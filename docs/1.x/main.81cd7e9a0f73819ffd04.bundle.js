/*! For license information please see main.81cd7e9a0f73819ffd04.bundle.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{0:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("ERkP")},1:function(module,exports){module.exports=storybook_docs_dll},10:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("7x/C")},106:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("5o43")},107:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("P2aG")},108:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("LJOr")},109:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("tVqn")},11:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("jQ/y")},122:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("aYSr")},123:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("/Qos")},124:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("j4Sf")},125:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("LUwd")},126:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("OZaJ")},13:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("plBw")},130:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("sVFb")},14:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("vrRf")},15:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("M+/F")},154:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("3yYM")},157:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("DfhM")},158:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("LqLs")},159:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("pu3o")},16:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("87if")},160:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("6U7i")},161:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("Cm4o")},17:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("lTEL")},173:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("F63i")},176:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("GFpt")},18:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("kYxP")},20:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("2G9S")},209:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("+kY7")},21:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("DZ+c")},211:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("5BYb")},214:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("5878")},217:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("m9LP")},221:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("l1C2")},226:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("iKE+")},23:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("aLgo")},231:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("CUMQ")},24:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("cARO")},247:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("3voH")},25:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("z84I")},254:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("cww3")},26:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"b",(function(){return FileBrowser_FileBrowser})),__webpack_require__.d(__webpack_exports__,"d",(function(){return FileToolbar})),__webpack_require__.d(__webpack_exports__,"c",(function(){return FileList})),__webpack_require__.d(__webpack_exports__,"a",(function(){return ChonkyActions}));__webpack_require__(3),__webpack_require__(11),__webpack_require__(23),__webpack_require__(20),__webpack_require__(28),__webpack_require__(13),__webpack_require__(17),__webpack_require__(25),__webpack_require__(15),__webpack_require__(24),__webpack_require__(4),__webpack_require__(10),__webpack_require__(21),__webpack_require__(16),__webpack_require__(18);var delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll);__webpack_require__(36),__webpack_require__(54),__webpack_require__(5),__webpack_require__(124),__webpack_require__(30),__webpack_require__(106),__webpack_require__(125),__webpack_require__(126);function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}var FileHelper=function(){function FileHelper(){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,FileHelper)}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}(FileHelper,null,[{key:"isClickable",value:function isClickable(file){return!!file}},{key:"isOpenable",value:function isOpenable(file){return!!file&&!1!==file.openable}},{key:"isSelectable",value:function isSelectable(file){return!!file&&!1!==file.selectable}},{key:"isDraggable",value:function isDraggable(file){return!!file&&!1!==file.draggable}},{key:"isDroppable",value:function isDroppable(file){return!!file&&(!(!file.isDir||!1===file.droppable)||!0===file.droppable)}}]),FileHelper}();function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function _createSuperInternal(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}function selection_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function selection_defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function selection_createClass(Constructor,protoProps,staticProps){return protoProps&&selection_defineProperties(Constructor.prototype,protoProps),staticProps&&selection_defineProperties(Constructor,staticProps),Constructor}function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e2){throw _e2},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e3){didErr=!0,err=_e3},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var _IconMap,ChonkyIconName,selection_useSelectionModifiers=function useSelectionModifiers(disableSelection,setSelection){var deps=[disableSelection,setSelection];return{selectFiles:Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(fileIds){var reset=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];disableSelection||setSelection((function(selection){var _step,newSelection=reset?{}:Object.assign({},selection),_iterator=_createForOfIteratorHelper(fileIds);try{for(_iterator.s();!(_step=_iterator.n()).done;){newSelection[_step.value]=!0}}catch(err){_iterator.e(err)}finally{_iterator.f()}return newSelection}))}),deps),toggleSelection:Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(fileId){var exclusive=arguments.length>1&&void 0!==arguments[1]&&arguments[1];disableSelection||setSelection((function(selection){var newSelection=exclusive?{}:Object.assign({},selection);return!0===selection[fileId]?delete newSelection[fileId]:newSelection[fileId]=!0,newSelection}))}),deps),clearSelection:Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(){disableSelection||setSelection({})}),deps)}},selection_SelectionHelper=function(){function SelectionHelper(){selection_classCallCheck(this,SelectionHelper)}return selection_createClass(SelectionHelper,null,[{key:"getSelectedFiles",value:function getSelectedFiles(files,selection){for(var selectedFiles=files.filter((function(file){return FileHelper.isSelectable(file)&&!0===selection[file.id]})),_len=arguments.length,filters=new Array(_len>2?_len-2:0),_key=2;_key<_len;_key++)filters[_key-2]=arguments[_key];return filters.reduce((function(prevFiles,filter){return prevFiles.filter(filter)}),selectedFiles)}},{key:"getSelectionSize",value:function getSelectionSize(files,selection){for(var _len2=arguments.length,filters=new Array(_len2>2?_len2-2:0),_key2=2;_key2<_len2;_key2++)filters[_key2-2]=arguments[_key2];return SelectionHelper.getSelectedFiles.apply(SelectionHelper,[files,selection].concat(filters)).length}},{key:"isSelected",value:function isSelected(selection,file){return FileHelper.isSelectable(file)&&!0===selection[file.id]}}]),SelectionHelper}(),SelectionUtil=function(){function SelectionUtil(){var files=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],selection=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};selection_classCallCheck(this,SelectionUtil),this.files=void 0,this.selection=void 0,this.protectedUpdate(files,selection)}return selection_createClass(SelectionUtil,[{key:"protectedUpdate",value:function protectedUpdate(files,selection){this.files=files,this.selection=selection}},{key:"getSelection",value:function getSelection(){return this.selection}},{key:"getSelectedFiles",value:function getSelectedFiles(){for(var _len3=arguments.length,filters=new Array(_len3),_key3=0;_key3<_len3;_key3++)filters[_key3]=arguments[_key3];return selection_SelectionHelper.getSelectedFiles.apply(selection_SelectionHelper,[this.files,this.selection].concat(filters))}},{key:"getSelectionSize",value:function getSelectionSize(){for(var _len4=arguments.length,filters=new Array(_len4),_key4=0;_key4<_len4;_key4++)filters[_key4]=arguments[_key4];return selection_SelectionHelper.getSelectionSize.apply(selection_SelectionHelper,[this.files,this.selection].concat(filters))}},{key:"isSelected",value:function isSelected(file){return selection_SelectionHelper.isSelected(this.selection,file)}}]),SelectionUtil}(),UpdateableSelectionUtil=function(_SelectionUtil){!function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(UpdateableSelectionUtil,_SelectionUtil);var _super=_createSuper(UpdateableSelectionUtil);function UpdateableSelectionUtil(){return selection_classCallCheck(this,UpdateableSelectionUtil),_super.apply(this,arguments)}return selection_createClass(UpdateableSelectionUtil,[{key:"update",value:function update(){this.protectedUpdate.apply(this,arguments)}}]),UpdateableSelectionUtil}(SelectionUtil),ChonkyFilesContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext([]),ChonkyFolderChainContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(null),ChonkySelectionContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext({}),ChonkySelectionSizeContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(0),ChonkySelectionUtilContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(new SelectionUtil),ChonkyFileActionsContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext([]),ChonkyDispatchFileActionContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext((function(){return null})),ChonkyDispatchSpecialActionContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext((function(){return null})),ChonkyThumbnailGeneratorContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(null),ChonkyDoubleClickDelayContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(300),ChonkyDisableSelectionContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(!1),ChonkyEnableDragAndDropContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(!1),bluebird=(__webpack_require__(29),__webpack_require__(108),__webpack_require__(146)),bluebird_default=__webpack_require__.n(bluebird),faAdobe=__webpack_require__(338),faGitAlt=__webpack_require__(339),faLinux=__webpack_require__(340),faNodeJs=__webpack_require__(342),faPhp=__webpack_require__(343),faPython=__webpack_require__(344),faUbuntu=__webpack_require__(345),faWindows=__webpack_require__(341),faArrowDown=__webpack_require__(205),faArrowUp=__webpack_require__(303),faBalanceScale=__webpack_require__(319),faCheckCircle=__webpack_require__(301),faChevronDown=__webpack_require__(311),faChevronRight=__webpack_require__(310),faCircle=__webpack_require__(302),faCircleNotch=__webpack_require__(295),faCogs=__webpack_require__(321),faCubes=__webpack_require__(322),faDatabase=__webpack_require__(323),faDownload=__webpack_require__(312),faExclamationTriangle=__webpack_require__(315),faExternalLinkAlt=__webpack_require__(316),faEyeSlash=__webpack_require__(317),faFile=__webpack_require__(318),faFileAlt=__webpack_require__(324),faFileArchive=__webpack_require__(325),faFileCode=__webpack_require__(320),faFileExcel=__webpack_require__(326),faFileImage=__webpack_require__(327),faFilePdf=__webpack_require__(328),faFileWord=__webpack_require__(329),faFilm=__webpack_require__(330),faFistRaised=__webpack_require__(296),faFolder=__webpack_require__(305),faFolderOpen=__webpack_require__(307),faFolderPlus=__webpack_require__(306),faHandPointer=__webpack_require__(298),faInfoCircle=__webpack_require__(331),faKey=__webpack_require__(332),faLevelUpAlt=__webpack_require__(299),faList=__webpack_require__(304),faLock=__webpack_require__(333),faMusic=__webpack_require__(334),faRunning=__webpack_require__(335),faSearch=__webpack_require__(300),faTerminal=__webpack_require__(336),faTh=__webpack_require__(308),faThLarge=__webpack_require__(309),faTimes=__webpack_require__(297),faTrash=__webpack_require__(314),faUpload=__webpack_require__(313),faUsers=__webpack_require__(337),index_es=__webpack_require__(294);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}!function(ChonkyIconName){ChonkyIconName.loading="loading",ChonkyIconName.dndDragging="dndDragging",ChonkyIconName.dndCanDrop="dndCanDrop",ChonkyIconName.dndCannotDrop="dndCannotDrop",ChonkyIconName.openFiles="openFiles",ChonkyIconName.openParentFolder="openParentFolder",ChonkyIconName.search="search",ChonkyIconName.checkActive="checkActive",ChonkyIconName.checkInactive="checkInactive",ChonkyIconName.desc="desc",ChonkyIconName.asc="asc",ChonkyIconName.list="list",ChonkyIconName.folder="folder",ChonkyIconName.folderCreate="folderCreate",ChonkyIconName.folderOpen="folderOpen",ChonkyIconName.smallThumbnail="smallThumbnail",ChonkyIconName.largeThumbnail="largeThumbnail",ChonkyIconName.folderChainSeparator="folderChainSeparator",ChonkyIconName.dropdown="dropdown",ChonkyIconName.download="download",ChonkyIconName.upload="upload",ChonkyIconName.trash="trash",ChonkyIconName.fallbackIcon="fallbackIcon",ChonkyIconName.symlink="symlink",ChonkyIconName.hidden="hidden",ChonkyIconName.file="file",ChonkyIconName.license="license",ChonkyIconName.code="code",ChonkyIconName.config="config",ChonkyIconName.model="model",ChonkyIconName.database="database",ChonkyIconName.text="text",ChonkyIconName.archive="archive",ChonkyIconName.csv="csv",ChonkyIconName.image="image",ChonkyIconName.pdf="pdf",ChonkyIconName.word="word",ChonkyIconName.video="video",ChonkyIconName.info="info",ChonkyIconName.key="key",ChonkyIconName.lock="lock",ChonkyIconName.music="music",ChonkyIconName.flash="flash",ChonkyIconName.terminal="terminal",ChonkyIconName.authors="authors",ChonkyIconName.adobe="adobe",ChonkyIconName.git="git",ChonkyIconName.linux="linux",ChonkyIconName.windows="windows",ChonkyIconName.nodejs="nodejs",ChonkyIconName.php="php",ChonkyIconName.python="python",ChonkyIconName.ubuntu="ubuntu"}(ChonkyIconName||(ChonkyIconName={}));var IconMap=(_defineProperty(_IconMap={},ChonkyIconName.loading,faCircleNotch.faCircleNotch),_defineProperty(_IconMap,ChonkyIconName.dndDragging,faFistRaised.faFistRaised),_defineProperty(_IconMap,ChonkyIconName.dndCanDrop,faArrowDown.faArrowDown),_defineProperty(_IconMap,ChonkyIconName.dndCannotDrop,faTimes.faTimes),_defineProperty(_IconMap,ChonkyIconName.openFiles,faHandPointer.faHandPointer),_defineProperty(_IconMap,ChonkyIconName.openParentFolder,faLevelUpAlt.faLevelUpAlt),_defineProperty(_IconMap,ChonkyIconName.search,faSearch.faSearch),_defineProperty(_IconMap,ChonkyIconName.checkActive,faCheckCircle.faCheckCircle),_defineProperty(_IconMap,ChonkyIconName.checkInactive,faCircle.faCircle),_defineProperty(_IconMap,ChonkyIconName.desc,faArrowDown.faArrowDown),_defineProperty(_IconMap,ChonkyIconName.asc,faArrowUp.faArrowUp),_defineProperty(_IconMap,ChonkyIconName.list,faList.faList),_defineProperty(_IconMap,ChonkyIconName.folder,faFolder.faFolder),_defineProperty(_IconMap,ChonkyIconName.folderCreate,faFolderPlus.faFolderPlus),_defineProperty(_IconMap,ChonkyIconName.folderOpen,faFolderOpen.faFolderOpen),_defineProperty(_IconMap,ChonkyIconName.smallThumbnail,faTh.faTh),_defineProperty(_IconMap,ChonkyIconName.largeThumbnail,faThLarge.faThLarge),_defineProperty(_IconMap,ChonkyIconName.folderChainSeparator,faChevronRight.faChevronRight),_defineProperty(_IconMap,ChonkyIconName.dropdown,faChevronDown.faChevronDown),_defineProperty(_IconMap,ChonkyIconName.download,faDownload.faDownload),_defineProperty(_IconMap,ChonkyIconName.upload,faUpload.faUpload),_defineProperty(_IconMap,ChonkyIconName.trash,faTrash.faTrash),_defineProperty(_IconMap,ChonkyIconName.fallbackIcon,faExclamationTriangle.faExclamationTriangle),_defineProperty(_IconMap,ChonkyIconName.symlink,faExternalLinkAlt.faExternalLinkAlt),_defineProperty(_IconMap,ChonkyIconName.hidden,faEyeSlash.faEyeSlash),_defineProperty(_IconMap,ChonkyIconName.file,faFile.faFile),_defineProperty(_IconMap,ChonkyIconName.license,faBalanceScale.faBalanceScale),_defineProperty(_IconMap,ChonkyIconName.code,faFileCode.faFileCode),_defineProperty(_IconMap,ChonkyIconName.config,faCogs.faCogs),_defineProperty(_IconMap,ChonkyIconName.model,faCubes.faCubes),_defineProperty(_IconMap,ChonkyIconName.database,faDatabase.faDatabase),_defineProperty(_IconMap,ChonkyIconName.text,faFileAlt.faFileAlt),_defineProperty(_IconMap,ChonkyIconName.archive,faFileArchive.faFileArchive),_defineProperty(_IconMap,ChonkyIconName.csv,faFileExcel.faFileExcel),_defineProperty(_IconMap,ChonkyIconName.image,faFileImage.faFileImage),_defineProperty(_IconMap,ChonkyIconName.pdf,faFilePdf.faFilePdf),_defineProperty(_IconMap,ChonkyIconName.word,faFileWord.faFileWord),_defineProperty(_IconMap,ChonkyIconName.video,faFilm.faFilm),_defineProperty(_IconMap,ChonkyIconName.info,faInfoCircle.faInfoCircle),_defineProperty(_IconMap,ChonkyIconName.key,faKey.faKey),_defineProperty(_IconMap,ChonkyIconName.lock,faLock.faLock),_defineProperty(_IconMap,ChonkyIconName.music,faMusic.faMusic),_defineProperty(_IconMap,ChonkyIconName.flash,faRunning.faRunning),_defineProperty(_IconMap,ChonkyIconName.terminal,faTerminal.faTerminal),_defineProperty(_IconMap,ChonkyIconName.authors,faUsers.faUsers),_defineProperty(_IconMap,ChonkyIconName.adobe,faAdobe.faAdobe),_defineProperty(_IconMap,ChonkyIconName.git,faGitAlt.faGitAlt),_defineProperty(_IconMap,ChonkyIconName.linux,faLinux.faLinux),_defineProperty(_IconMap,ChonkyIconName.windows,faWindows.faWindows),_defineProperty(_IconMap,ChonkyIconName.nodejs,faNodeJs.faNodeJs),_defineProperty(_IconMap,ChonkyIconName.php,faPhp.faPhp),_defineProperty(_IconMap,ChonkyIconName.python,faPython.faPython),_defineProperty(_IconMap,ChonkyIconName.ubuntu,faUbuntu.faUbuntu),_IconMap),ChonkyIconFA=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var icon=props.icon,faProps=Object.assign({},props,{icon:IconMap[icon]?IconMap[icon]:IconMap.fallbackIcon});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(index_es.a,faProps)}));__webpack_require__(39);function logger_defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}var Logger=function(){function Logger(){!function logger_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Logger)}return function logger_createClass(Constructor,protoProps,staticProps){return protoProps&&logger_defineProperties(Constructor.prototype,protoProps),staticProps&&logger_defineProperties(Constructor,staticProps),Constructor}(Logger,null,[{key:"error",value:function error(){for(var _console,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];(_console=console).error.apply(_console,["[Chonky runtime error]"].concat(args))}},{key:"formatBullets",value:function formatBullets(bullets){return"\n- ".concat(bullets.join("\n- "))}}]),Logger}();__webpack_require__(14),__webpack_require__(158);function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return validation_arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(iter))return Array.from(iter)}(arr)||function validation_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return validation_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return validation_arrayLikeToArray(o,minLen)}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function validation_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function validation_typeof(obj){return(validation_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}var isPlainObject=function isPlainObject(value){return"[object Object]"===Object.prototype.toString.call(value)},useCleanFileArray=function useCleanFileArray(fileArray,allowNull){var cleanFileArray,warningMessage=null,warningBullets=[];if(Array.isArray(fileArray)){for(var indicesToBeRemoved=new Set,seenIds={},duplicateIdSet=new Set,missingIdIndices=[],missingNameIndices=[],invalidTypeIndices=[],i=0;i<fileArray.length;++i){var file=fileArray[i];isPlainObject(file)?(file.id&&seenIds[file.id]?(duplicateIdSet.add(file.id),indicesToBeRemoved.add(i)):seenIds[file.id]=!0,file.name||(missingNameIndices.push(i),indicesToBeRemoved.add(i)),file.id||(missingIdIndices.push(i),indicesToBeRemoved.add(i))):null!==file&&(invalidTypeIndices.push(i),indicesToBeRemoved.add(i))}duplicateIdSet.size>0&&warningBullets.push("Some files have duplicate IDs. These IDs appeared multiple "+"times: ".concat(Array.from(duplicateIdSet))),missingIdIndices.length>0&&warningBullets.push('Some files are missing the "id" field. '+"Relevant file indices: ".concat(missingIdIndices.join(", "))),missingNameIndices.length>0&&warningBullets.push('Some files are missing the "name" field. '+"Relevant file indices: ".concat(missingNameIndices.join(", "))),invalidTypeIndices.length>0&&warningBullets.push('Some files have invalid type (they are neither a plain object nor "null"). '+"Relevant file indices: ".concat(invalidTypeIndices.join(", "))),indicesToBeRemoved.size>0?(cleanFileArray=fileArray.filter((function(value,index){return!indicesToBeRemoved.has(index)})),warningMessage="".concat(indicesToBeRemoved.size," offending ")+"file".concat(1===indicesToBeRemoved.size?" was":"s were"," ")+" removed from the array."):cleanFileArray=fileArray}else cleanFileArray=allowNull?null:[],allowNull&&null===fileArray||(warningMessage="Provided value was replaced "+"with ".concat(allowNull?"null":"empty array","."),warningBullets.push('Expected "files" to be an array, got type '+'"'.concat(validation_typeof(fileArray),'" instead (value: ').concat(fileArray,").")));return{cleanFileArray:cleanFileArray,warningMessage:warningMessage,warningBullets:warningBullets}};function file_actions_createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=function file_actions_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return file_actions_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return file_actions_arrayLikeToArray(o,minLen)}(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function file_actions_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var SpecialAction,ChonkyActions={MoveFilesTo:{name:"move_files_to"},DuplicateFilesTo:{name:"duplicate_files_to"},OpenParentFolder:{name:"open_parent_folder",requiresParentFolder:!0,hotkeys:["backspace"],toolbarButton:{name:"Go up a directory",tooltip:"Go up a directory",icon:ChonkyIconName.openParentFolder,iconOnly:!0}},OpenFiles:{name:"open_files",requiresSelection:!0,fileFilter:FileHelper.isOpenable,toolbarButton:{name:"Open selection",group:"Actions",dropdown:!0,icon:ChonkyIconName.openFiles}},Search:{name:"search",hotkeys:["ctrl+f"],toolbarButton:{name:"Search",icon:ChonkyIconName.search,iconOnly:!0}},CopyFiles:{name:"copy_files",requiresSelection:!0},CreateFolder:{name:"create_folder",toolbarButton:{name:"Create folder",tooltip:"Create a folder",icon:ChonkyIconName.folderCreate}},UploadFiles:{name:"upload_files",toolbarButton:{name:"Upload files",tooltip:"Upload files",icon:ChonkyIconName.upload}},DownloadFiles:{name:"download_files",requiresSelection:!0,toolbarButton:{name:"Download files",group:"Actions",tooltip:"Download files",icon:ChonkyIconName.download}}},DefaultActions=[ChonkyActions.MoveFilesTo,ChonkyActions.DuplicateFilesTo,ChonkyActions.OpenParentFolder,ChonkyActions.OpenFiles,ChonkyActions.Search],INTENTIONAL_EMPTY_DEPS=[];function special_actions_defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}!function(SpecialAction){SpecialAction.MouseClickFile="mouse_click_file",SpecialAction.KeyboardClickFile="keyboard_click_file",SpecialAction.DragNDropStart="drag_n_drop_start",SpecialAction.DragNDropEnd="drag_n_drop_end"}(SpecialAction||(SpecialAction={}));var special_actions_useSpecialFileActionHandlerMap=function useSpecialFileActionHandlerMap(selectionUtil,selectFiles,toggleSelection,clearSelection,dispatchFileAction){var specialActionHandlerMapDeps=[selectFiles,toggleSelection,clearSelection,dispatchFileAction];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var _ref;return special_actions_defineProperty(_ref={},SpecialAction.MouseClickFile,(function(data){"double"===data.clickType&&FileHelper.isOpenable(data.file)?dispatchFileAction({actionName:ChonkyActions.OpenFiles.name,target:data.file,files:[data.file]}):FileHelper.isSelectable(data.file)?toggleSelection(data.file.id,!data.ctrlKey):data.ctrlKey||clearSelection()})),special_actions_defineProperty(_ref,SpecialAction.KeyboardClickFile,(function(data){data.enterKey&&FileHelper.isOpenable(data.file)?dispatchFileAction({actionName:ChonkyActions.OpenFiles.name,target:data.file,files:selectionUtil.getSelectedFiles(FileHelper.isOpenable)}):data.spaceKey&&FileHelper.isSelectable(data.file)&&toggleSelection(data.file.id,data.ctrlKey)})),special_actions_defineProperty(_ref,SpecialAction.DragNDropStart,(function(data){var file=data.dragSource;selectionUtil.isSelected(file)||(clearSelection(),FileHelper.isSelectable(file)&&selectFiles([file.id]))})),special_actions_defineProperty(_ref,SpecialAction.DragNDropEnd,(function(data){if(!selectionUtil.isSelected(data.dropTarget)){var selectedFiles=selectionUtil.getSelectedFiles(FileHelper.isDraggable),droppedFiles=selectedFiles.length>0?selectedFiles:[data.dragSource];dispatchFileAction({actionName:"copy"===data.dropEffect?ChonkyActions.DuplicateFilesTo.name:ChonkyActions.MoveFilesTo.name,target:data.dropTarget,files:droppedFiles})}})),_ref}),specialActionHandlerMapDeps)},ContextComposer_ContextComposer=(__webpack_require__(621),function ContextComposer(props){var providers=props.providers,children=props.children;return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.Fragment,null,providers.reduceRight((function(acc,data){var Provider=data.provider;return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(Provider,{value:data.value},acc)}),children))});ContextComposer_ContextComposer.displayName="ContextComposer";try{ContextComposer_ContextComposer.displayName="ContextComposer",ContextComposer_ContextComposer.__docgenInfo={description:"Takes an array of context providers and composes them into a\nhierarchy:\n\n<Comp1 {...props}>\n     <Comp2 {...props}>\n         <Comp3 {...props}>\n             {children}\n         </Comp3>\n     </Comp2>\n</Comp1>",displayName:"ContextComposer",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/ContextComposer.tsx#ContextComposer"]={docgenInfo:ContextComposer_ContextComposer.__docgenInfo,name:"ContextComposer",path:"src/components/internal/ContextComposer.tsx#ContextComposer"})}catch(__react_docgen_typescript_loader_error){}var useDragLayer=__webpack_require__(768),useDrag=__webpack_require__(770),useDrop=__webpack_require__(771),getEmptyImage=__webpack_require__(275),classnames=__webpack_require__(58),classnames_default=__webpack_require__.n(classnames),exact_trie=__webpack_require__(346),exact_trie_default=__webpack_require__.n(exact_trie),memoizee=__webpack_require__(347);function file_icon_helper_slicedToArray(arr,i){return function file_icon_helper_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function file_icon_helper_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function file_icon_helper_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return file_icon_helper_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return file_icon_helper_arrayLikeToArray(o,minLen)}(arr,i)||function file_icon_helper_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function file_icon_helper_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var getIconTrie=__webpack_require__.n(memoizee)()((function(){for(var colourIndex=0,IconsToExtensions=[[ChonkyIconName.license,["license"]],[ChonkyIconName.config,["sfk","ini","yaml","toml","iml"]],[ChonkyIconName.model,["3ds","obj","ply","fbx"]],[ChonkyIconName.database,["json","sql","npy","npz"]],[ChonkyIconName.text,["txt","md"]],[ChonkyIconName.archive,["zip","rar","tar","tar.gz"]],[ChonkyIconName.csv,["csv","xls","xlsx"]],[ChonkyIconName.image,ImageExtensions],[ChonkyIconName.pdf,["pdf"]],[ChonkyIconName.word,["doc","docx","odt"]],[ChonkyIconName.video,VideoExtensions],[ChonkyIconName.code,["html","php","css","sass","scss","less","cpp","h","hpp","c","xml","ipynb"]],[ChonkyIconName.info,["bib","readme","nfo"]],[ChonkyIconName.key,["pem","pub"]],[ChonkyIconName.lock,["lock","lock.json","shrinkwrap.json"]],[ChonkyIconName.music,AudioExtensions],[ChonkyIconName.flash,["swf"]],[ChonkyIconName.terminal,["run","sh"]],[ChonkyIconName.trash,[".Trashes"]],[ChonkyIconName.authors,["authors","contributors"]],[ChonkyIconName.adobe,["psd"]],[ChonkyIconName.git,[".gitignore"]],[ChonkyIconName.linux,["AppImage"]],[ChonkyIconName.windows,["exe"]],[ChonkyIconName.nodejs,["js","jsx","ts","tsx","d.ts"]],[ChonkyIconName.php,["php"]],[ChonkyIconName.python,["py"]],[ChonkyIconName.ubuntu,["deb"]]],exactTrie=new exact_trie_default.a,_i=0,_IconsToExtensions=IconsToExtensions;_i<_IconsToExtensions.length;_i++)for(var _pair=file_icon_helper_slicedToArray(_IconsToExtensions[_i],2),icon=_pair[0],extensions=_pair[1],i=0;i<extensions.length;++i){var iconData={icon:icon,colorCode:(colourIndex+=5)%(ColorsLight.length-1)+1};exactTrie.put(extensions[i],iconData,!0)}return exactTrie})),VideoExtensions=["3g2","3gp","3gpp","asf","asx","avi","dvb","f4v","fli","flv","fvt","h261","h263","h264","jpgm","jpgv","jpm","m1v","m2v","m4u","m4v","mj2","mjp2","mk3d","mks","mkv","mng","mov","movie","mp4","mp4v","mpe","mpeg","mpg","mpg4","mxu","ogv","pyv","qt","smv","ts","uvh","uvm","uvp","uvs","uvu","uvv","uvvh","uvvm","uvvp","uvvs","uvvu","uvvv","viv","vob","webm","wm","wmv","wmx","wvx"],ImageExtensions=["3ds","apng","azv","bmp","bmp","btif","cgm","cmx","djv","djvu","drle","dwg","dxf","emf","exr","fbs","fh","fh4","fh5","fh7","fhc","fits","fpx","fst","g3","gif","heic","heics","heif","heifs","ico","ico","ief","jls","jng","jp2","jpe","jpeg","jpf","jpg","jpg2","jpm","jpx","jxr","ktx","mdi","mmr","npx","pbm","pct","pcx","pcx","pgm","pic","png","pnm","ppm","psd","pti","ras","rgb","rlc","sgi","sid","sub","svg","svgz","t38","tap","tfx","tga","tif","tiff","uvg","uvi","uvvg","uvvi","vtf","wbmp","wdp","webp","wmf","xbm","xif","xpm","xwd"],AudioExtensions=["3gpp","aac","adp","aif","aifc","aiff","au","caf","dra","dts","dtshd","ecelp4800","ecelp7470","ecelp9600","eol","flac","kar","lvp","m2a","m3a","m3u","m4a","m4a","mid","midi","mka","mp2","mp2a","mp3","mp3","mp4a","mpga","oga","ogg","pya","ra","ra","ram","rip","rmi","rmp","s3m","sil","snd","spx","uva","uvva","wav","wav","wav","wax","weba","wma","xm"],ColorsLight=["#bbbbbb","#d65c5c","#d6665c","#d6705c","#d67a5c","#d6855c","#d68f5c","#d6995c","#d6a35c","#d6ad5c","#d6b85c","#d6c25c","#d6cc5c","#d6d65c","#ccd65c","#c2d65c","#b8d65c","#add65c","#a3d65c","#99d65c","#8fd65c","#85d65c","#7ad65c","#70d65c","#66d65c","#5cd65c","#5cd666","#5cd670","#5cd67a","#5cd685","#5cd68f","#5cd699","#5cd6a3","#5cd6ad","#5cd6b8","#5cd6c2","#5cd6cc","#5cd6d6","#5cccd6","#5cc2d6","#5cb8d6","#5cadd6","#5ca3d6","#5c99d6","#5c8fd6","#5c85d6","#5c7ad6","#5c70d6","#5c66d6","#5c5cd6","#665cd6","#705cd6","#7a5cd6","#855cd6","#8f5cd6","#995cd6","#a35cd6","#ad5cd6","#b85cd6","#c25cd6","#cc5cd6","#d65cd6","#d65ccc","#d65cc2","#d65cb8","#d65cad","#d65ca3","#d65c99","#d65c8f","#d65c85","#d65c7a","#d65c70","#d65c66"],ColorsDark=["#777","#8f3d3d","#8f443d","#8f4b3d","#8f523d","#8f583d","#8f5f3d","#8f663d","#8f6d3d","#8f743d","#8f7a3d","#8f813d","#8f883d","#8f8f3d","#888f3d","#818f3d","#7a8f3d","#748f3d","#6d8f3d","#668f3d","#5f8f3d","#588f3d","#528f3d","#4b8f3d","#448f3d","#3d8f3d","#3d8f44","#3d8f4b","#3d8f52","#3d8f58","#3d8f5f","#3d8f66","#3d8f6d","#3d8f74","#3d8f7a","#3d8f81","#3d8f88","#3d8f8f","#3d888f","#3d818f","#3d7a8f","#3d748f","#3d6d8f","#3d668f","#3d5f8f","#3d588f","#3d528f","#3d4b8f","#3d448f","#3d3d8f","#443d8f","#4b3d8f","#523d8f","#583d8f","#5f3d8f","#663d8f","#6d3d8f","#743d8f","#7a3d8f","#813d8f","#883d8f","#8f3d8f","#8f3d88","#8f3d81","#8f3d7a","#8f3d74","#8f3d6d","#8f3d66","#8f3d5f","#8f3d58","#8f3d52","#8f3d4b","#8f3d44"],TextPlaceholder=(__webpack_require__(688),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var placeholderLength=function getRandomInt(min,max){return min+Math.floor(Math.random()*Math.floor(max-min))}(props.minLength,props.maxLength),whitespace="&nbsp;".repeat(placeholderLength);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-text-placeholder",dangerouslySetInnerHTML:{__html:whitespace}})}))),FileThumbnail_FileThumbnail=(__webpack_require__(95),function FileThumbnail(props){var thumbnailUrl=props.thumbnailUrl,thumbnailStyle=thumbnailUrl?{backgroundImage:"url('".concat(thumbnailUrl,"')")}:{},className=classnames_default()({"chonky-file-thumbnail":!0,"chonky-file-thumbnail-hidden":!thumbnailUrl});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:className,style:thumbnailStyle})});function BaseFileEntry_slicedToArray(arr,i){return function BaseFileEntry_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function BaseFileEntry_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function BaseFileEntry_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return BaseFileEntry_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return BaseFileEntry_arrayLikeToArray(o,minLen)}(arr,i)||function BaseFileEntry_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function BaseFileEntry_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}FileThumbnail_FileThumbnail.displayName="FileThumbnail";var BaseFileEntry=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var file=props.file,selected=props.selected,style=props.style,dndIsDragging=props.dndIsDragging,dndIsOver=props.dndIsOver,dndCanDrop=props.dndCanDrop,_useState2=BaseFileEntry_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(null),2),thumbnailUrl=_useState2[0],setThumbnailUrl=_useState2[1],_useState4=BaseFileEntry_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(!1),2),thumbnailLoading=_useState4[0];!function useThumbnailUrl(file,setThumbnailUrl,setThumbnailLoading){var thumbnailGenerator=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyThumbnailGeneratorContext),deps=[file,setThumbnailUrl,setThumbnailLoading,thumbnailGenerator];Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){var loadingCancelled=!1;return file&&(thumbnailGenerator?(setThumbnailLoading(!0),Promise.resolve().then((function(){return thumbnailGenerator(file)})).then((function(thumbnailUrl){loadingCancelled||(setThumbnailLoading(!1),thumbnailUrl&&"string"==typeof thumbnailUrl&&setThumbnailUrl(thumbnailUrl))})).catch((function(error){loadingCancelled||setThumbnailLoading(!1),Logger.error('User-defined "thumbnailGenerator" handler threw an error: '.concat(error.message))}))):file.thumbnailUrl&&setThumbnailUrl(file.thumbnailUrl)),function(){loadingCancelled=!0}}),deps)}(file,setThumbnailUrl,_useState4[1]);var iconData=function useIconData(file){var deps=[file];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){if(!file)return{icon:ChonkyIconName.loading,colorCode:0};if(!0===file.isDir)return{icon:ChonkyIconName.folder,colorCode:0};var match=getIconTrie().getWithCheckpoints(file.name,".",!0);return match||{icon:ChonkyIconName.file,colorCode:32}}),deps)}(file),backgroundColor=thumbnailUrl?ColorsDark[iconData.colorCode]:ColorsLight[iconData.colorCode],iconSpin=thumbnailLoading||!file,icon=thumbnailLoading?ChonkyIconName.loading:iconData.icon,dndIcon=function useDndIcon(selected,isDragging,isOver,canDrop){return isOver?canDrop&&!selected?ChonkyIconName.dndCanDrop:ChonkyIconName.dndCannotDrop:isDragging?ChonkyIconName.dndDragging:null}(selected,dndIsDragging,dndIsOver,dndCanDrop),className=classnames_default()({"chonky-file-entry":!0,"chonky-file-entry-selected":selected,"chonky-file-entry-dragging":dndIsDragging,"chonky-file-entry-drop-hovered":dndIsOver&&dndCanDrop});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:className,style:style},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-entry-inside"},dndIcon&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-entry-dnd-indicator"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:dndIcon})),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-entry-preview"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-icon"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-icon-inside"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:icon,spin:iconSpin}))),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-selection"}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(FileThumbnail_FileThumbnail,{thumbnailUrl:thumbnailUrl}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-background",style:{backgroundColor:backgroundColor}})),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-entry-description"},file?file.name:delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(TextPlaceholder,{minLength:15,maxLength:20}))))})),ClickableFileEntry_hooks_useFileClickHandlers=function useFileClickHandlers(file){var dispatchSpecialAction=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyDispatchSpecialActionContext),handlerDeps=[file,dispatchSpecialAction],onMouseClick=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event,clickType){file&&dispatchSpecialAction({actionName:SpecialAction.MouseClickFile,clickType:clickType,file:file,altKey:event.altKey,ctrlKey:event.ctrlKey,shiftKey:event.shiftKey})}),handlerDeps),onKeyboardClick=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){file&&dispatchSpecialAction({actionName:SpecialAction.KeyboardClickFile,file:file,enterKey:event.enterKey,spaceKey:event.spaceKey,altKey:event.altKey,ctrlKey:event.ctrlKey,shiftKey:event.shiftKey})}),handlerDeps);return{onSingleClick:Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){return onMouseClick(event,"single")}),[onMouseClick]),onDoubleClick:Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){return onMouseClick(event,"double")}),[onMouseClick]),onKeyboardClick:onKeyboardClick}};try{ClickableFileEntry_hooks_useFileClickHandlers.displayName="useFileClickHandlers",ClickableFileEntry_hooks_useFileClickHandlers.__docgenInfo={description:"",displayName:"useFileClickHandlers",props:{id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},name:{defaultValue:null,description:"",name:"name",required:!0,type:{name:"string"}},ext:{defaultValue:null,description:"",name:"ext",required:!1,type:{name:"string"}},isDir:{defaultValue:null,description:"",name:"isDir",required:!1,type:{name:"boolean"}},isHidden:{defaultValue:null,description:"",name:"isHidden",required:!1,type:{name:"boolean"}},isSymlink:{defaultValue:null,description:"",name:"isSymlink",required:!1,type:{name:"boolean"}},openable:{defaultValue:null,description:"",name:"openable",required:!1,type:{name:"boolean"}},selectable:{defaultValue:null,description:"",name:"selectable",required:!1,type:{name:"boolean"}},draggable:{defaultValue:null,description:"",name:"draggable",required:!1,type:{name:"boolean"}},droppable:{defaultValue:null,description:"",name:"droppable",required:!1,type:{name:"boolean"}},size:{defaultValue:null,description:"",name:"size",required:!1,type:{name:"number"}},modDate:{defaultValue:null,description:"",name:"modDate",required:!1,type:{name:"Date"}},parentId:{defaultValue:null,description:"",name:"parentId",required:!1,type:{name:"string"}},childrenIds:{defaultValue:null,description:"",name:"childrenIds",required:!1,type:{name:"string[]"}},thumbnailUrl:{defaultValue:null,description:"",name:"thumbnailUrl",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/ClickableFileEntry-hooks.tsx#useFileClickHandlers"]={docgenInfo:ClickableFileEntry_hooks_useFileClickHandlers.__docgenInfo,name:"useFileClickHandlers",path:"src/components/internal/ClickableFileEntry-hooks.tsx#useFileClickHandlers"})}catch(__react_docgen_typescript_loader_error){}__webpack_require__(130);var ClickableWrapper_hooks_useKeyDownHandler=function useKeyDownHandler(onKeyboardClick){var deps=[onKeyboardClick];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){if(onKeyboardClick){var keyboardClickEvent={enterKey:"Enter"===event.nativeEvent.code,spaceKey:"Space"===event.nativeEvent.code,altKey:event.altKey,ctrlKey:event.ctrlKey,shiftKey:event.shiftKey};(keyboardClickEvent.spaceKey||keyboardClickEvent.enterKey)&&(event.preventDefault(),onKeyboardClick(keyboardClickEvent))}}),deps)};try{ClickableWrapper_hooks_useKeyDownHandler.displayName="useKeyDownHandler",ClickableWrapper_hooks_useKeyDownHandler.__docgenInfo={description:"",displayName:"useKeyDownHandler",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/ClickableWrapper-hooks.tsx#useKeyDownHandler"]={docgenInfo:ClickableWrapper_hooks_useKeyDownHandler.__docgenInfo,name:"useKeyDownHandler",path:"src/components/internal/ClickableWrapper-hooks.tsx#useKeyDownHandler"})}catch(__react_docgen_typescript_loader_error){}var ClickableWrapper_ClickableWrapper=function ClickableWrapper(props){var children=props.children,WrapperTag=props.wrapperTag,passthroughProps=props.passthroughProps,onSingleClick=props.onSingleClick,onDoubleClick=props.onDoubleClick,onKeyboardClick=props.onKeyboardClick,handleClick=function useClickHandler(onSingleClick,onDoubleClick){var doubleClickDelay=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyDoubleClickDelayContext),counter=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return{clickCount:0,clickTimeout:null}}),[]),deps=[doubleClickDelay,onSingleClick,onDoubleClick];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){var mouseClickEvent={altKey:event.altKey,ctrlKey:event.ctrlKey,shiftKey:event.shiftKey};counter.clickCount++,1===counter.clickCount?(onSingleClick&&(event.preventDefault(),onSingleClick(mouseClickEvent)),counter.clickCount=1,counter.clickTimeout=setTimeout((function(){return counter.clickCount=0}),doubleClickDelay)):2===counter.clickCount&&(onDoubleClick&&(event.preventDefault(),onDoubleClick(mouseClickEvent)),"number"==typeof counter.clickTimeout&&(clearTimeout(counter.clickTimeout),counter.clickTimeout=null,counter.clickCount=0))}),deps)}(onSingleClick,onDoubleClick),handleKeyDown=ClickableWrapper_hooks_useKeyDownHandler(onKeyboardClick),compProps={};(onSingleClick||onDoubleClick||onKeyboardClick)&&(compProps.onClick=handleClick,compProps.onKeyDown=handleKeyDown,compProps.tabIndex=0);var mergedProps=Object.assign({},compProps,passthroughProps);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(WrapperTag,mergedProps,children)};ClickableWrapper_ClickableWrapper.displayName="ClickableWrapper";var ClickableFileEntry_ClickableFileEntry=function ClickableFileEntry(props){var file=props.file,fileClickHandlers=ClickableFileEntry_hooks_useFileClickHandlers(file),wrapperProps=Object.assign({wrapperTag:"div",passthroughProps:{className:"chonky-file-entry-clickable-wrapper chonky-fill-parent"}},FileHelper.isClickable(file)?fileClickHandlers:void 0);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ClickableWrapper_ClickableWrapper,wrapperProps,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(BaseFileEntry,props))};function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function DnDFileEntry_slicedToArray(arr,i){return function DnDFileEntry_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function DnDFileEntry_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function DnDFileEntry_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return DnDFileEntry_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return DnDFileEntry_arrayLikeToArray(o,minLen)}(arr,i)||function DnDFileEntry_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function DnDFileEntry_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}ClickableFileEntry_ClickableFileEntry.displayName="ClickableFileEntry";var DnDFileEntry_DnDFileEntry=function DnDFileEntry(props){var file=props.file,dispatchSpecialAction=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyDispatchSpecialActionContext),canDrag=FileHelper.isDraggable(file),onDragStart=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(){FileHelper.isDraggable(file)&&dispatchSpecialAction({actionName:SpecialAction.DragNDropStart,dragSource:file})}),[dispatchSpecialAction,file]),onDragEnd=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(item,monitor){var dropResult=monitor.getDropResult();FileHelper.isDraggable(file)&&dropResult&&dropResult.dropTarget&&dispatchSpecialAction({actionName:SpecialAction.DragNDropEnd,dragSource:file,dropTarget:dropResult.dropTarget,dropEffect:dropResult.dropEffect})}),[dispatchSpecialAction,file]),onDrop=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(item,monitor){if(monitor.canDrop())return{dropTarget:file}}),[file]),canDrop=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(item){var _item$file,isSameFile=(null===(_item$file=item.file)||void 0===_item$file?void 0:_item$file.id)===(null==file?void 0:file.id);return FileHelper.isDroppable(file)&&!isSameFile}),[file]),_useDrag2=DnDFileEntry_slicedToArray(Object(useDrag.a)({item:{type:"chonky-file-entry",file:file},canDrag:canDrag,begin:onDragStart,end:onDragEnd,collect:function collect(monitor){return{isDragging:monitor.isDragging()}}}),3),dndIsDragging=_useDrag2[0].isDragging,drag=_useDrag2[1],preview=_useDrag2[2],_useDrop2=DnDFileEntry_slicedToArray(Object(useDrop.a)({accept:"chonky-file-entry",drop:onDrop,canDrop:canDrop,collect:function collect(monitor){return{isOver:monitor.isOver(),canDrop:monitor.canDrop()}}}),2),_useDrop2$=_useDrop2[0],dndIsOver=_useDrop2$.isOver,dndCanDrop=_useDrop2$.canDrop,drop=_useDrop2[1];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){preview(Object(getEmptyImage.a)(),{captureDraggingState:!0})}),[]),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{ref:drop,className:"chonky-file-entry-droppable-wrapper chonky-fill-parent"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{ref:FileHelper.isDraggable(file)?drag:null,className:"chonky-file-entry-draggable-wrapper chonky-fill-parent"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ClickableFileEntry_ClickableFileEntry,_extends({},props,{dndIsDragging:dndIsDragging,dndIsOver:dndIsOver,dndCanDrop:dndCanDrop}))))};DnDFileEntry_DnDFileEntry.displayName="DnDFileEntry";var layerStyles={position:"fixed",pointerEvents:"none",zIndex:100,left:0,top:0,width:"100%",height:"100%"},getItemStyles=function getItemStyles(initialCursorOffset,initialFileOffset,currentFileOffset){if(!initialCursorOffset||!initialFileOffset||!currentFileOffset)return{display:"none"};var x=initialCursorOffset.x+(currentFileOffset.x-initialFileOffset.x),y=initialCursorOffset.y+(currentFileOffset.y-initialFileOffset.y),transform="translate(".concat(x,"px, ").concat(y,"px)");return{transform:transform,WebkitTransform:transform}},DnDFileListDragLayer_DnDFileListDragLayer=function DnDFileListDragLayer(){var selectionSize=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkySelectionSizeContext),_useDragLayer=Object(useDragLayer.a)((function(monitor){return{item:monitor.getItem(),itemType:monitor.getItemType(),initialCursorOffset:monitor.getInitialClientOffset(),initialFileOffset:monitor.getInitialSourceClientOffset(),currentFileOffset:monitor.getSourceClientOffset(),isDragging:monitor.isDragging()}})),itemType=_useDragLayer.itemType,item=_useDragLayer.item,initialCursorOffset=_useDragLayer.initialCursorOffset,initialFileOffset=_useDragLayer.initialFileOffset,currentFileOffset=_useDragLayer.currentFileOffset;return _useDragLayer.isDragging?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:layerStyles},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:getItemStyles(initialCursorOffset,initialFileOffset,currentFileOffset)},function renderItem(){if(item.file&&"chonky-file-entry"===itemType)return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-drag-preview"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("b",null,item.file.name),selectionSize>1&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.Fragment,null," and ",delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("strong",null,selectionSize-1," other file",selectionSize-1!=1?"s":"")))}())):null};DnDFileListDragLayer_DnDFileListDragLayer.displayName="DnDFileListDragLayer";var ErrorMessage=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var message=props.message,bullets=props.bullets,bulletList=null;if(bullets&&bullets.length>0){for(var items=[],i=0;i<bullets.length;++i)items.push(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("li",{key:"error-bullet-".concat(i)},bullets[i]));bulletList=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("ul",null,items)}return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-error"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-error-name"},"Chonky runtime error:")," ",message,bulletList)}));function FileBrowser_toConsumableArray(arr){return function FileBrowser_arrayWithoutHoles(arr){if(Array.isArray(arr))return FileBrowser_arrayLikeToArray(arr)}(arr)||function FileBrowser_iterableToArray(iter){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(iter))return Array.from(iter)}(arr)||function FileBrowser_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return FileBrowser_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return FileBrowser_arrayLikeToArray(o,minLen)}(arr)||function FileBrowser_nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function FileBrowser_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var FileBrowser_FileBrowser=function FileBrowser(props){var files=props.files,children=props.children,folderChain=props.folderChain?props.folderChain:null,fileActions=props.fileActions?props.fileActions:[],onFileAction=props.onFileAction?props.onFileAction:null,thumbnailGenerator=props.thumbnailGenerator?props.thumbnailGenerator:null,doubleClickDelay="number"==typeof props.doubleClickDelay?props.doubleClickDelay:300,disableSelection=!!props.disableSelection,enableDragAndDrop=!!props.enableDragAndDrop,validationResult=function useFileBrowserValidation(files,folderChain){var filesDeps=[files],_useMemo=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var errorMessages=[],cleanFilesResult=useCleanFileArray(files,!1);if(cleanFilesResult.warningMessage){var errorMessage='The "files" prop passed to '.concat(FileBrowser_FileBrowser.name," did not pass validation. ")+"".concat(cleanFilesResult.warningMessage," ")+"The following errors were encountered:";Logger.error(errorMessage,Logger.formatBullets(cleanFilesResult.warningBullets)),errorMessages.push({message:errorMessage,bullets:cleanFilesResult.warningBullets})}return{cleanFiles:cleanFilesResult.cleanFileArray,errorMessages:errorMessages}}),filesDeps),cleanFiles=_useMemo.cleanFiles,filesErrorMessages=_useMemo.errorMessages,folderChainDeps=[folderChain],_useMemo2=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var errorMessages=[],cleanFolderChainResult=useCleanFileArray(folderChain,!0);if(cleanFolderChainResult.warningMessage){var errorMessage='The "folderChain" prop passed to '.concat(FileBrowser_FileBrowser.name," did not pass validation. ")+"".concat(cleanFolderChainResult.warningMessage," ")+"The following errors were encountered:";Logger.error(errorMessage,Logger.formatBullets(cleanFolderChainResult.warningBullets)),errorMessages.push({message:errorMessage,bullets:cleanFolderChainResult.warningBullets})}return{cleanFolderChain:cleanFolderChainResult.cleanFileArray,errorMessages:errorMessages}}),folderChainDeps),cleanFolderChain=_useMemo2.cleanFolderChain,folderChainErrorMessages=_useMemo2.errorMessages;return{cleanFiles:cleanFiles,cleanFolderChain:cleanFolderChain,errorMessages:[].concat(_toConsumableArray(filesErrorMessages),_toConsumableArray(folderChainErrorMessages))}}(files,folderChain),sortedFiles=validationResult.cleanFiles,cleanFolderChain=validationResult.cleanFolderChain,_useSelection=function useSelection(files,disableSelection){var _useState2=_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)({}),2),selection=_useState2[0],setSelection=_useState2[1],selectionSize=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return selection_SelectionHelper.getSelectionSize(files,selection)}),[files,selection]),_useSelectionModifier=selection_useSelectionModifiers(disableSelection,setSelection),selectFiles=_useSelectionModifier.selectFiles,toggleSelection=_useSelectionModifier.toggleSelection,clearSelection=_useSelectionModifier.clearSelection,selectionUtilRef=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useRef)(new UpdateableSelectionUtil(files,selection));return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){selectionUtilRef.current.update(files,selection)}),[files,selection]),{selection:selection,selectionSize:selectionSize,selectionUtilRef:selectionUtilRef,selectFiles:selectFiles,toggleSelection:toggleSelection,clearSelection:clearSelection}}(sortedFiles,disableSelection),selection=_useSelection.selection,selectionSize=_useSelection.selectionSize,selectionUtilRef=_useSelection.selectionUtilRef,selectFiles=_useSelection.selectFiles,toggleSelection=_useSelection.toggleSelection,clearSelection=_useSelection.clearSelection,extendedFileActions=[].concat(FileBrowser_toConsumableArray(fileActions),FileBrowser_toConsumableArray(DefaultActions)),dispatchFileAction=function useFileActionDispatcher(fileActions,onFileAction){var actionMapDeps=[fileActions],actionMap=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var actionMap={};if(Array.isArray(fileActions)){var _step,_iterator=file_actions_createForOfIteratorHelper(fileActions);try{for(_iterator.s();!(_step=_iterator.n()).done;){var fileAction=_step.value;actionMap[fileAction.name]=fileAction}}catch(err){_iterator.e(err)}finally{_iterator.f()}}return actionMap}),actionMapDeps),dispatchFileActionDeps=[actionMap,onFileAction];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(actionData){var actionName=actionData.actionName,action=actionMap[actionName];action?function isFunction(value){return!!(value&&value.constructor&&value.call&&value.apply)}(onFileAction)&&bluebird_default.a.resolve().then((function(){return onFileAction(action,actionData)})).catch((function(error){return Logger.error('User-defined "onAction" handler threw an error: '.concat(error.message))})):Logger.error('Internal components dispatched a "'.concat(actionName,'" file action, ')+"but such action was not registered.")}),dispatchFileActionDeps)}(extendedFileActions,onFileAction),dispatchSpecialAction=function useSpecialActionDispatcher(files,selection,selectionUtil,selectFiles,toggleSelection,clearSelection,dispatchFileAction){var specialStateDeps=[files,selection],specialState=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return{files:files,selection:selection}}),INTENTIONAL_EMPTY_DEPS);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){specialState.files=files,specialState.selection=selection}),specialStateDeps);var specialActionHandlerMap=special_actions_useSpecialFileActionHandlerMap(selectionUtil,selectFiles,toggleSelection,clearSelection,dispatchFileAction),dispatchSpecialActionDeps=[specialActionHandlerMap];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(actionData){var actionName=actionData.actionName,handler=specialActionHandlerMap[actionName];if(handler)try{handler(actionData)}catch(error){Logger.error('Handler for special action "'.concat(actionName,'" threw an error.'),error)}else Logger.error('Internal components dispatched a "'.concat(actionName,'" special action, ')+"but no internal handler is available to process it.")}),dispatchSpecialActionDeps)}(sortedFiles,selection,selectionUtilRef.current,selectFiles,toggleSelection,clearSelection,dispatchFileAction),contexts=[{context:ChonkyFilesContext,value:sortedFiles},{context:ChonkyFolderChainContext,value:cleanFolderChain},{context:ChonkySelectionContext,value:selection},{context:ChonkySelectionSizeContext,value:selectionSize},{context:ChonkySelectionUtilContext,value:selectionUtilRef.current},{context:ChonkyFileActionsContext,value:extendedFileActions},{context:ChonkyDispatchFileActionContext,value:dispatchFileAction},{context:ChonkyDispatchSpecialActionContext,value:dispatchSpecialAction},{context:ChonkyThumbnailGeneratorContext,value:thumbnailGenerator},{context:ChonkyDoubleClickDelayContext,value:doubleClickDelay},{context:ChonkyDisableSelectionContext,value:disableSelection},{context:ChonkyEnableDragAndDropContext,value:enableDragAndDrop}],contextProviders=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return contexts.map((function(data){return{provider:data.context.Provider,value:data.value}}))}),contexts.map((function(data){return data.value})));return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ContextComposer_ContextComposer,{providers:contextProviders},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-root chonky-no-select"},enableDragAndDrop&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(DnDFileListDragLayer_DnDFileListDragLayer,null),validationResult.errorMessages.map((function(data,index){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ErrorMessage,{key:"error-message-".concat(index),message:data.message,bullets:data.bullets})})),children||null))};FileBrowser_FileBrowser.displayName="FileBrowser";var delegated_prop_typesfrom_dll_reference_storybook_docs_dll=__webpack_require__(6),delegated_prop_typesfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_prop_typesfrom_dll_reference_storybook_docs_dll),ToolbarButton_hooks_useSmartToolbarButtonProps=function useSmartToolbarButtonProps(action){var files=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyFilesContext),folderChain=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyFolderChainContext),selection=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkySelectionContext),selectionSize=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkySelectionSizeContext),dispatchChonkyAction=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyDispatchFileActionContext),parentFolder=folderChain&&folderChain.length>1?folderChain[(null==folderChain?void 0:folderChain.length)-2]:null,deps=[action,files,selection,selectionSize,dispatchChonkyAction,parentFolder];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var actionSelectionSize=void 0,actionFiles=void 0;action.requiresSelection&&(action.fileFilter?(actionSelectionSize=selection_SelectionHelper.getSelectionSize(files,selection,action.fileFilter),actionFiles=selection_SelectionHelper.getSelectedFiles(files,selection,action.fileFilter)):(actionSelectionSize=selectionSize,actionFiles=selection_SelectionHelper.getSelectedFiles(files,selection)));var actionTarget=action.requiresParentFolder&&parentFolder?parentFolder:void 0;return{onClick:function onClick(){return dispatchChonkyAction({actionName:action.name,target:actionTarget,files:actionFiles})},disabled:action.requiresSelection&&0===actionSelectionSize||action.requiresParentFolder&&!parentFolder}}),deps)};try{ToolbarButton_hooks_useSmartToolbarButtonProps.displayName="useSmartToolbarButtonProps",ToolbarButton_hooks_useSmartToolbarButtonProps.__docgenInfo={description:"",displayName:"useSmartToolbarButtonProps",props:{name:{defaultValue:null,description:"",name:"name",required:!0,type:{name:"string"}},metadata:{defaultValue:null,description:"",name:"metadata",required:!1,type:{name:"any"}},requiresParentFolder:{defaultValue:null,description:"",name:"requiresParentFolder",required:!1,type:{name:"boolean"}},requiresSelection:{defaultValue:null,description:"",name:"requiresSelection",required:!1,type:{name:"boolean"}},fileFilter:{defaultValue:null,description:"",name:"fileFilter",required:!1,type:{name:"FileFilter"}},hotkeys:{defaultValue:null,description:"",name:"hotkeys",required:!1,type:{name:"readonly string[]"}},toolbarButton:{defaultValue:null,description:"",name:"toolbarButton",required:!1,type:{name:"ToolbarButtonData"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/ToolbarButton-hooks.tsx#useSmartToolbarButtonProps"]={docgenInfo:ToolbarButton_hooks_useSmartToolbarButtonProps.__docgenInfo,name:"useSmartToolbarButtonProps",path:"src/components/external/ToolbarButton-hooks.tsx#useSmartToolbarButtonProps"})}catch(__react_docgen_typescript_loader_error){}var ToolbarButton=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var text=props.text,tooltip=props.tooltip,icon=props.icon,iconOnly=props.iconOnly,onClick=props.onClick,disabled=props.disabled,className=classnames_default()({"chonky-toolbar-button":!0});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("button",{className:className,onClick:onClick,title:tooltip||text,disabled:disabled},(icon||iconOnly)&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-button-icon"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:icon||ChonkyIconName.fallbackIcon})),text&&!iconOnly&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-button-text"},text))})),SmartToolbarButton=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var action=props.fileAction,button=action.toolbarButton;if(!button)return null;var _useSmartToolbarButto=ToolbarButton_hooks_useSmartToolbarButtonProps(action),onClick=_useSmartToolbarButto.onClick,disabled=_useSmartToolbarButto.disabled;return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ToolbarButton,{text:button.name,tooltip:button.tooltip,icon:button.icon,iconOnly:button.iconOnly,onClick:onClick,disabled:disabled})}));function FileToolbar_hooks_createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=function FileToolbar_hooks_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return FileToolbar_hooks_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return FileToolbar_hooks_arrayLikeToArray(o,minLen)}(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function FileToolbar_hooks_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var FileToolbar_hooks_useFolderChainComponent=function useFolderChainComponent(){var folderChain=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyFolderChainContext),dispatchChonkyAction=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyDispatchFileActionContext),deps=[folderChain,dispatchChonkyAction];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){if(!folderChain)return folderChain;for(var comps=new Array(Math.max(0,2*folderChain.length-1)),_loop=function _loop(i){var file=folderChain[i],isLast=i===folderChain.length-1,j=2*i,compProps={key:"folder-chain-entry-".concat(j),className:classnames_default()({"chonky-folder-chain-entry":!0,"chonky-loading":!file})};FileHelper.isOpenable(file)&&!isLast&&(compProps.onClick=function(){dispatchChonkyAction({actionName:ChonkyActions.OpenFiles.name,target:file,files:[file]})});var TagToUse=compProps.onClick?"button":"div";comps[j]=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(TagToUse,compProps,0===j&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-text-subtle-dark"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:ChonkyIconName.folder}),"  "),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-folder-chain-entry-name"},file?file.name:"Loading...")),isLast||(comps[j+1]=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{key:"folder-chain-separator-".concat(j),className:"chonky-folder-chain-separator"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:ChonkyIconName.folderChainSeparator,size:"xs"})))},i=0;i<folderChain.length;++i)_loop(i);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-folder-chain"},comps)}),deps)},FileToolbar_hooks_useFileActionButtons=function useFileActionButtons(){var files=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyFilesContext),folderChain=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyFolderChainContext),selection=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkySelectionContext),selectionUtil=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkySelectionUtilContext),fileActions=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyFileActionsContext),dispatchChonkyAction=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyDispatchFileActionContext),parentFolder=folderChain&&folderChain.length>1?folderChain[(null==folderChain?void 0:folderChain.length)-2]:null,selectionSize=selection_SelectionHelper.getSelectionSize(files,selection),deps=[files,folderChain,selection,selectionUtil,dispatchChonkyAction,parentFolder,selectionSize];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){for(var openParentFolderButton=null,buttonComponents=[],_loop2=function _loop2(i){var action=fileActions[i],toolbarButton=action.toolbarButton;if(!toolbarButton)return"continue";var actionSelectionSize=void 0,actionFiles=void 0;action.requiresSelection&&(action.fileFilter?(actionSelectionSize=selection_SelectionHelper.getSelectionSize(files,selection,action.fileFilter),actionFiles=selection_SelectionHelper.getSelectedFiles(files,selection,action.fileFilter)):(actionSelectionSize=selectionSize,actionFiles=selection_SelectionHelper.getSelectedFiles(files,selection)));var actionTarget=action.requiresParentFolder&&parentFolder?parentFolder:void 0,disabled=action.requiresSelection&&0===actionSelectionSize||action.requiresParentFolder&&!parentFolder,key="toolbar-button-".concat(action.name),component=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ToolbarButton,{key:key,text:toolbarButton.name,tooltip:toolbarButton.tooltip,icon:toolbarButton.icon,iconOnly:toolbarButton.iconOnly,onClick:function onClick(){return dispatchChonkyAction({actionName:action.name,target:actionTarget,files:actionFiles})},disabled:disabled});action.name===ChonkyActions.OpenParentFolder.name?openParentFolderButton=component:buttonComponents.push(component)},i=0;i<fileActions.length;++i)_loop2(i);return{openParentFolderButton:openParentFolderButton,buttonComponents:buttonComponents}}),deps)};try{FileToolbar_hooks_useFolderChainComponent.displayName="useFolderChainComponent",FileToolbar_hooks_useFolderChainComponent.__docgenInfo={description:"Generates folder chain HTML components for the `FileToolbar` component.",displayName:"useFolderChainComponent",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileToolbar-hooks.tsx#useFolderChainComponent"]={docgenInfo:FileToolbar_hooks_useFolderChainComponent.__docgenInfo,name:"useFolderChainComponent",path:"src/components/external/FileToolbar-hooks.tsx#useFolderChainComponent"})}catch(__react_docgen_typescript_loader_error){}try{FileToolbar_hooks_useFileActionButtons.displayName="useFileActionButtons",FileToolbar_hooks_useFileActionButtons.__docgenInfo={description:"Converts an array of file actions into button components.",displayName:"useFileActionButtons",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileToolbar-hooks.tsx#useFileActionButtons"]={docgenInfo:FileToolbar_hooks_useFileActionButtons.__docgenInfo,name:"useFileActionButtons",path:"src/components/external/FileToolbar-hooks.tsx#useFileActionButtons"})}catch(__react_docgen_typescript_loader_error){}var ToolbarButtonGroup=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var buttonComponents=props.group.fileActions.map((function(action){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(SmartToolbarButton,{key:"action-button-".concat(action.name),fileAction:action})}));return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-button-group"},buttonComponents)})),FileToolbar=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(){var folderChainComp=FileToolbar_hooks_useFolderChainComponent(),_useToolbarButtonGrou=function useToolbarButtonGroups(){var fileActions=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyFileActionsContext),deps=[fileActions];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var _step,buttonGroups=[],buttonGroupMap={},openParentFolderButtonGroup=null,searchButtonGroup=null,_iterator=FileToolbar_hooks_createForOfIteratorHelper(fileActions);try{for(_iterator.s();!(_step=_iterator.n()).done;){var action=_step.value;if(action.toolbarButton){var button=action.toolbarButton,group=void 0;button.group?buttonGroupMap[button.group]?((group=buttonGroupMap[button.group]).dropdown=group.dropdown||button.dropdown,group.fileActions.push(action)):(group={name:button.group,dropdown:button.dropdown,fileActions:[action]},buttonGroups.push(group),buttonGroupMap[group.name]=group):(group={name:button.group,dropdown:button.dropdown,fileActions:[action]},action.name===ChonkyActions.OpenParentFolder.name?openParentFolderButtonGroup=group:action.name===ChonkyActions.Search.name?searchButtonGroup=group:buttonGroups.push(group))}}}catch(err){_iterator.e(err)}finally{_iterator.f()}return{buttonGroups:buttonGroups,openParentFolderButtonGroup:openParentFolderButtonGroup,searchButtonGroup:searchButtonGroup}}),deps)}(),buttonGroups=_useToolbarButtonGrou.buttonGroups,openParentFolderButtonGroup=_useToolbarButtonGrou.openParentFolderButtonGroup,searchButtonGroup=_useToolbarButtonGrou.searchButtonGroup;return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-side chonky-toolbar-side-left"},openParentFolderButtonGroup&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ToolbarButtonGroup,{group:openParentFolderButtonGroup}),folderChainComp),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-side chonky-toolbar-side-right"},buttonGroups.map((function(group,index){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ToolbarButtonGroup,{key:"button-group-".concat(group.name?group.name:index),group:group})})),searchButtonGroup&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ToolbarButtonGroup,{group:searchButtonGroup})))}));FileToolbar.propTypes={folderChain:delegated_prop_typesfrom_dll_reference_storybook_docs_dll_default.a.arrayOf(delegated_prop_typesfrom_dll_reference_storybook_docs_dll_default.a.oneOfType([delegated_prop_typesfrom_dll_reference_storybook_docs_dll_default.a.string.isRequired,delegated_prop_typesfrom_dll_reference_storybook_docs_dll_default.a.oneOf([null]).isRequired]))};var es=__webpack_require__(152),SmallThumbsSize={width:160,height:120},FileList_virtualization_useEntryRenderer=function useEntryRenderer(files){var selection=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkySelectionContext),enableDragAndDrop=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyEnableDragAndDropContext),deps=[files,selection,enableDragAndDrop];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(virtualKey,index,style,parent,gutterSize,lastRow,lastColumn){if("number"==typeof gutterSize&&(lastRow||(style.height=style.height-gutterSize),lastColumn||(style.width=style.width-gutterSize)),lastRow&&(style.height=style.height-1),lastColumn&&(style.width=style.width-1),index>=files.length)return null;var file=files[index],key=file?file.id:"loading-file-".concat(virtualKey),entryProps={file:file,displayIndex:index,selected:!!file&&!0===selection[file.id]},fileEntryComponent=enableDragAndDrop?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(DnDFileEntry_DnDFileEntry,entryProps):delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ClickableFileEntry_ClickableFileEntry,entryProps);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{key:key,className:"chonky-virtualization-wrapper",style:style},fileEntryComponent)}),deps)},_noContentRenderer=function noContentRenderer(height){var placeholderProps={className:classnames_default()({"chonky-file-list-notification":!0,"chonky-file-list-notification-empty":!0})};return"number"==typeof height&&(placeholderProps.style={height:height}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",placeholderProps,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-list-notification-content"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:ChonkyIconName.folderOpen}),"  Nothing to show"))};_noContentRenderer.displayName="noContentRenderer";var FileList_virtualization_useGridRenderer=function useGridRenderer(files,entryRenderer,thumbsGridRef,fillParentContainer){var deps=[files,entryRenderer,thumbsGridRef,fillParentContainer];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(_ref){var columnCount,width=_ref.width,height=_ref.height,entrySize=SmallThumbsSize,isMobile=function isMobileDevice(){return void 0!==window.orientation||-1!==navigator.userAgent.indexOf("IEMobile")}(),gutter=isMobile?5:8,scrollbar=!fillParentContainer||isMobile?0:16;if(isMobile&&width<400)columnCount=3,entrySize={width:Math.floor((width-gutter*(columnCount-1))/columnCount),height:120};else{var columnCountFloat=(width+gutter-scrollbar)/(entrySize.width+gutter);columnCount=Math.max(1,Math.floor(columnCountFloat))}var rowCount=Math.ceil(files.length/columnCount);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(es.b,{style:{minHeight:entrySize.height+10},ref:thumbsGridRef,cellRenderer:function cellRenderer(data){var index=data.rowIndex*columnCount+data.columnIndex;return entryRenderer(data.key,index,Object.assign({},data.style),data.parent,gutter,data.rowIndex===rowCount-1,data.columnIndex===columnCount-1)},noContentRenderer:function noContentRenderer(){return _noContentRenderer(entrySize.height)},rowCount:rowCount,columnCount:columnCount,columnWidth:function columnWidth(_ref2){return function getColWidth(index,columnCount,entrySize,gutterSize){return index===columnCount-1?entrySize.width:entrySize.width+gutterSize}(_ref2.index,columnCount,entrySize,gutter)},rowHeight:function rowHeight(_ref3){return function getRowHeight(index,rowCount,entrySize,gutterSize){return index===rowCount-1?entrySize.height:entrySize.height+gutterSize}(_ref3.index,rowCount,entrySize,gutter)},overscanRowCount:2,width:width,height:"number"==typeof height?height:500,autoHeight:!fillParentContainer,tabIndex:null})}),deps)};try{FileList_virtualization_useEntryRenderer.displayName="useEntryRenderer",FileList_virtualization_useEntryRenderer.__docgenInfo={description:"",displayName:"useEntryRenderer",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileList-virtualization.tsx#useEntryRenderer"]={docgenInfo:FileList_virtualization_useEntryRenderer.__docgenInfo,name:"useEntryRenderer",path:"src/components/external/FileList-virtualization.tsx#useEntryRenderer"})}catch(__react_docgen_typescript_loader_error){}try{noContentRenderer.displayName="noContentRenderer",noContentRenderer.__docgenInfo={description:"",displayName:"noContentRenderer",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileList-virtualization.tsx#noContentRenderer"]={docgenInfo:noContentRenderer.__docgenInfo,name:"noContentRenderer",path:"src/components/external/FileList-virtualization.tsx#noContentRenderer"})}catch(__react_docgen_typescript_loader_error){}var FileList=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(){var files=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyFilesContext),entryRenderer=FileList_virtualization_useEntryRenderer(files),thumbsGridRef=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useRef)(),gridRenderer=FileList_virtualization_useGridRenderer(files,entryRenderer,thumbsGridRef,!0);if(!files){var errorMessage="".concat(FileList.name,' cannot find the "files" array via React context. This ')+"happens when ".concat(FileList.name," is placed outside of ").concat(FileBrowser_FileBrowser.name)+"component.";return Logger.error(errorMessage),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ErrorMessage,{message:errorMessage})}return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-list"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(es.a,{disableHeight:!1},gridRenderer))}));__webpack_require__(91)},263:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("N4z3")},264:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("1Mu/")},28:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("hCOa")},29:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("KqXw")},3:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("1t7P")},30:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("UvmB")},33:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return story_helpers_createDocsObject})),__webpack_require__.d(__webpack_exports__,"b",(function(){return story_helpers_showActionNotification}));__webpack_require__(3),__webpack_require__(11),__webpack_require__(23),__webpack_require__(20),__webpack_require__(70),__webpack_require__(28),__webpack_require__(14),__webpack_require__(13),__webpack_require__(17),__webpack_require__(39),__webpack_require__(25),__webpack_require__(15),__webpack_require__(24),__webpack_require__(4),__webpack_require__(5),__webpack_require__(10),__webpack_require__(29),__webpack_require__(21),__webpack_require__(16),__webpack_require__(109),__webpack_require__(18),__webpack_require__(750),__webpack_require__(752),__webpack_require__(754);var blocks=__webpack_require__(45),utils=__webpack_require__(92),dist=__webpack_require__(53),lib_noty=__webpack_require__(353),lib_noty_default=__webpack_require__.n(lib_noty),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),DndProvider=__webpack_require__(769),esm=__webpack_require__(203);function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}var story_helpers_createDocsObject=function createDocsObject(params){var markdown=params.markdown;return{page:function page(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.Fragment,null,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(DndProvider.a,{backend:esm.a},story_helpers_parseMarkdown('<div class="unstable-warning">\n\n> **Stop right there!** \n> \n> You are reading the documentation for an **unreleased** 1.x\n> version of Chonky. The API described here can change - it will not be\n> frozen until the official 1.x release.\n>\n> If you need to use Chonky right now, use the 0.x version from the \n> [Documentation Index](https://timbokz.github.io/Chonky/).\n>\n> **Want to request a feature for 1.x or report a 1.x issue?** Post it in\n> [Chonky GitHub issues](https://github.com/TimboKZ/Chonky/issues).\n\n</div>\n'),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(blocks.Title,null),story_helpers_parseMarkdown(markdown),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(story_helpers_CustomPrimary,null),story_helpers_parseMarkdown("### A note about live examples...\n\nAll live examples are written in Typescript. All components and types are imported\nfrom the `chonky` package, e.g.:\n\n```ts\nimport 'chonky/style/main.css';\nimport { FileBrowser, FileToolbar, FileList, FileData } from 'chonky';\n```\n\nThe only exception is the `showActionNotification()` function, which calls\n[the Noty notification library](https://ned.im/noty/) (not packaged with Chonky). To\nrun the examples locally, you can replace `showActionNotification()` with\n`console.log()`.\n")))}}},story_helpers_CustomPrimary=function CustomPrimary(_ref){var story,name=_ref.name,context=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(blocks.DocsContext),componentStories=Object(utils.getDocsStories)(context);return componentStories&&(story=name?componentStories.find((function(s){return s.name===name})):componentStories[0]),story?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(blocks.DocsStory,_extends({},story,{expanded:!1})):null},story_helpers_parseMarkdown=function parseMarkdown(markdown){var _step,occurrences=[],_iterator=_createForOfIteratorHelper(getIndicesOf("```",markdown));try{for(_iterator.s();!(_step=_iterator.n()).done;){var index=_step.value,lineEnd=markdown.indexOf("\n",index),line=markdown.substring(index,lineEnd).trim();/^```[a-z-]+$/i.exec(line)?occurrences.push({type:"start",language:line.substring(3),markdownEnd:index,codeStart:lineEnd+1}):/^```$/i.exec(line)&&occurrences.push({type:"end",codeEnd:index,markdownStart:lineEnd+1})}}catch(err){_iterator.e(err)}finally{_iterator.f()}for(var components=[],markdownStart=0,i=0;i<occurrences.length-1;++i){var start=occurrences[i],end=occurrences[i+1];if("start"===start.type&&"end"===end.type){var mdKey="md-".concat(i+=1),mdSlice=markdown.substring(markdownStart,start.markdownEnd),codeSlice=markdown.substring(start.codeStart,end.codeEnd),codeKey="code-".concat(i);components.push(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(blocks.Description,{key:mdKey,markdown:mdSlice})),components.push(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(dist.Source,{key:codeKey,language:start.language,code:codeSlice})),markdownStart=end.markdownStart}}return components.push(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(blocks.Description,{key:"markdown-last",markdown:markdown.substring(markdownStart)})),components},getIndicesOf=function getIndicesOf(needle,haystack){var index,searchStrLen=needle.length;if(0==searchStrLen)return[];for(var startIndex=0,indices=[];(index=haystack.indexOf(needle,startIndex))>-1;)indices.push(index),startIndex=index+searchStrLen;return indices},story_helpers_showActionNotification=function showActionNotification(params){var action=params.action,data=params.data,textParts=[];if(textParts.push("<b>Action:</b> ".concat(action.name)),data.target&&textParts.push("<b>Target:</b> <code>".concat(data.target.name,"</code>")),data.files){var fileComps=data.files.map((function(f){return f.name})).map((function(name){return"<code>".concat(name,"</code>")})),fileCount=fileComps.length,fileTitle="".concat(fileCount," ").concat(1===fileCount?"file":"files",":");textParts.push("<b>".concat(fileTitle,"</b> [").concat(fileComps.join(", "),"]"))}var text=textParts.join("<br/>");new lib_noty_default.a({text:text,type:"success",theme:"relax",timeout:3e3}).show()};try{story_helpers_createDocsObject.displayName="createDocsObject",story_helpers_createDocsObject.__docgenInfo={description:"",displayName:"createDocsObject",props:{markdown:{defaultValue:null,description:"",name:"markdown",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/story-helpers.tsx#createDocsObject"]={docgenInfo:story_helpers_createDocsObject.__docgenInfo,name:"createDocsObject",path:"stories/story-helpers.tsx#createDocsObject"})}catch(__react_docgen_typescript_loader_error){}try{story_helpers_showActionNotification.displayName="showActionNotification",story_helpers_showActionNotification.__docgenInfo={description:"",displayName:"showActionNotification",props:{action:{defaultValue:null,description:"",name:"action",required:!0,type:{name:"FileAction"}},data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"FileActionData"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/story-helpers.tsx#showActionNotification"]={docgenInfo:story_helpers_showActionNotification.__docgenInfo,name:"showActionNotification",path:"stories/story-helpers.tsx#showActionNotification"})}catch(__react_docgen_typescript_loader_error){}},34:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("NyMY")},354:function(module,exports,__webpack_require__){__webpack_require__(355),__webpack_require__(380),__webpack_require__(381),__webpack_require__(421),__webpack_require__(549),__webpack_require__(589),__webpack_require__(601),__webpack_require__(603),__webpack_require__(608),module.exports=__webpack_require__(615)},356:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("ARua")},36:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("LW0h")},37:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("aokA")},373:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("9JhN")},374:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("PjZX")},381:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(210)},387:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("JY+C")},39:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("7xRU")},391:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("ZUdG")},392:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("PuIx")},394:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("tQbP")},4:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("ho0z")},40:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("jwue")},405:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("dSaG")},406:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("hQin")},41:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("+oxZ")},42:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("lN5B")},424:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("LJ7e")},426:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("I2fK")},427:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("DY47")},433:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("3kp9")},437:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("/bc2")},438:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("/JuR")},439:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("+Bxv")},440:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("muFx")},441:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("Wci6")},442:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("WoRU")},443:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("o3fS")},444:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("JmTi")},445:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("xaiR")},446:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("SlD/")},447:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("Monn")},449:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("fmNP")},453:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("uFXj")},456:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("V0IW")},457:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("OCSl")},46:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("EgRP")},482:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("kA4r")},484:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("Blm6")},485:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("ssvU")},486:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("lZm3")},490:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("Ee2X")},494:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("b2e3")},5:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("IAdD")},50:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("MvUL")},51:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("yH/f")},515:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("maj8")},52:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("Ysgh")},539:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("H87J")},54:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("KOtZ")},540:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("S3pA")},541:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("O1Sc")},542:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("zF5n")},553:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("kvVz")},56:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("A3UQ")},560:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("tJVe")},561:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("nuol")},562:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("PjJO")},563:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("DpO5")},582:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("Kkar")},583:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("2q8g")},584:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("nDih")},59:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("HUCg")},6:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("aWzz")},60:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("Yct5")},608:function(module,exports,__webpack_require__){"use strict";__webpack_require__(3),__webpack_require__(36),__webpack_require__(40),__webpack_require__(46),__webpack_require__(30),__webpack_require__(609),__webpack_require__(611),__webpack_require__(8),__webpack_require__(41);var _clientApi=__webpack_require__(49),_clientLogger=__webpack_require__(38),_configFilename=__webpack_require__(614);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(_configFilename.args||_configFilename.argTypes)&&_clientLogger.logger.warn("Invalid args/argTypes in config, ignoring.",JSON.stringify({args:_configFilename.args,argTypes:_configFilename.argTypes})),_configFilename.decorators&&_configFilename.decorators.forEach((function(decorator){return(0,_clientApi.addDecorator)(decorator)})),(_configFilename.parameters||_configFilename.globalArgs||_configFilename.globalArgTypes)&&(0,_clientApi.addParameters)(_objectSpread(_objectSpread({},_configFilename.parameters),{},{globalArgs:_configFilename.globalArgs,globalArgTypes:_configFilename.globalArgTypes})),_configFilename.argTypesEnhancers&&_configFilename.argTypesEnhancers.forEach((function(enhancer){return(0,_clientApi.addArgTypesEnhancer)(enhancer)}))},610:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("ct80")},612:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("oD4t")},613:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("2sZ7")},614:function(module,exports){},615:function(module,exports,__webpack_require__){"use strict";(function(module){var _framework=__webpack_require__(210);module._StorybookPreserveDecorators=!0,(0,_framework.configure)([__webpack_require__(616)],module)}).call(this,__webpack_require__(122)(module))},616:function(module,exports,__webpack_require__){var map={"./00-Welcome/01-Welcome.stories.mdx":617,"./00-Welcome/02-Philosophy.stories.mdx":618,"./00-Welcome/03-Installation.stories.mdx":619,"./01-File-Browser-basics/01-Component-hierarchy.stories.tsx":758,"./01-File-Browser-basics/02-Displaying-files.stories.tsx":759,"./01-File-Browser-basics/03-Specifying-folder.stories.tsx":760,"./01-File-Browser-basics/04-Actions.stories.tsx":761,"./01-File-Browser-basics/05-Custom-actions.stories.tsx":762,"./01-File-Browser-basics/06-Thumbnails.stories.tsx":763,"./01-File-Browser-basics/07-Drag-n-drop.stories.tsx":764,"./02-File-Browser-advanced/01-Invalid-props.stories.tsx":765,"./02-File-Browser-advanced/02-Virtualization.stories.tsx":766,"./03-API-Reference/02-Built-in-actions.stories.mdx":756};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=616},617:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(3),__webpack_require__(14),__webpack_require__(5),__webpack_require__(8),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(2),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(45),_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(93);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Meta=function makeShortcode(name){return function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",props)}}("Meta"),layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(Meta,{title:"0 Chonky Overview|Introduction",mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__.a,{mdxType:"ChonkyHeader"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"introduction"},"Introduction"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,'Chonky is a file browser component for React. It tries to recreate the native file browsing experience in your\nbrowser. This means your users can make selections, drag & drop files, toggle file view between "large thumbnails"\nand "detailed list", use keyboard shortcuts, and much more!'),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h3",{id:"view-on-github"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"h3"},{href:"https://github.com/TimboKZ/Chonky",target:"_blank",rel:"nofollow noopener noreferrer"}),"View on Github")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("blockquote",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",{parentName:"blockquote"},"Chonky is still in development, please ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"p"},{href:"https://github.com/TimboKZ/Chonky/issues",target:"_blank",rel:"nofollow noopener noreferrer"}),"create an issue")," if you have a\nproblem or want to request a feature.")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h3",{id:"chonky-features"},"Chonky features:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"It's file system agnostic - data can come from an arbitrary source as long as it follows the required format."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"Supports async file system logic - via thumb lazy-loading and loading placeholders."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"Users can choose between 3 views: Details, medium thumbnails, large thumbnails. All file views are responsive and\nmobile-friendly."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"Developers can pass file action handlers to define custom behaviour for file opening, moving or deleting."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"Supports file selections and ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("em",{parentName:"li"},"drag & drop (WIP)"),", sorting and ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("em",{parentName:"li"},"text search (WIP)"),"."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"Supports ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"li"},{href:"https://reactjs.org/docs/optimizing-performance.html#virtualize-long-lists",target:"_blank",rel:"nofollow noopener noreferrer"}),"windowing")," (a.k.a.\nvirtualization) for long file lists (",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"li"},{href:"#section-virtualization-with-10000-files"}),"see example"),")."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"Supports common keyboard shortcuts."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"Supports file thumbnails (e.g. generated from videos or images)."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"Detects common file types, showing appropriate icons.")))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"0 Chonky Overview|Introduction",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},618:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(3),__webpack_require__(14),__webpack_require__(5),__webpack_require__(8),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(2),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(45),_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(93);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Meta=function makeShortcode(name){return function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",props)}}("Meta"),layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(Meta,{title:"0 Chonky Overview|Philosophy",mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__.a,{mdxType:"ChonkyHeader"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"philosophy"},"Philosophy"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Please read this section to understand what Chonky is and is not."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h3",{id:"chonky-is-the-presentation-layer"},"Chonky is the presentation layer."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Chonky takes a list of files and shows them to the user. It does not and should not\nknow where the files came from, nor should it now how file operations are carried out."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h3",{id:"chonky-is-filesystem-agnostic"},"Chonky is filesystem-agnostic."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Chonky tries to stay ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("strong",{parentName:"p"},"unopinionated")," when it comes to interactions with the file\nsystem (FS)."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h3",{id:"developing-file-browsers-is-hard-each-use-case-is-unique"},"Developing file browsers is hard. Each use case is unique."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"At the same time, Chonky tries to cover all possible interactions with the user. This includes support for keyboard\nnavigation and common keyboard shortcuts, support for file selections, drag & drop, different file views, and much more."))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"0 Chonky Overview|Philosophy",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},619:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(3),__webpack_require__(14),__webpack_require__(5),__webpack_require__(8),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(2),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(45),_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(93);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Meta=function makeShortcode(name){return function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",props)}}("Meta"),layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(Meta,{title:"0 Chonky Overview|Installation & usage",mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__.a,{mdxType:"ChonkyHeader"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"installation"},"Installation"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Add Chonky to your NPM project:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("code",_extends({parentName:"pre"},{className:"language-shell"}),"npm install chonky\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Then, import relevant components and styles:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("code",_extends({parentName:"pre"},{className:"language-js"}),"import 'chonky/style/main.css';\nimport { FileBrowser, FileList } from 'chonky';\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"And you're good to go! Check other sections in the documentation to see how Chonky\ncomponents can be used."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h3",{id:"usage-with-typescript"},"Usage with Typescript"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Chonky was built using Typescript. As such, many of the internal types and interfaces\nare exported. Some types are generic, to make it easier for you to integrate Chonky\ninto you Typescript package."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"If you're also using Typescript, you can add Chonky types to your project using\nstandard\nimports:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("code",_extends({parentName:"pre"},{className:"language-ts"}),"// FileArray is a TS type\nimport { FileArray } from 'chonky';\n\nconst myFiles: FileArray = [\n    {\n        id: 'abD3',\n        name: 'README.txt',\n    },\n    null,\n];\n")))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"0 Chonky Overview|Installation & usage",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},62:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("jQ3i")},620:function(module,exports,__webpack_require__){(exports=__webpack_require__(138)(!1)).push([module.i,'.chonky-fill-parent {\n  height: 100%;\n}\n\n.chonky-no-select {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n.chonky-root {\n  border: solid 1px #e4e4e4;\n  border-radius: 4px;\n  padding: 7.5px;\n  touch-action: manipulation;\n  font-size: 15px;\n  font-family: sans-serif;\n  flex-direction: column;\n  position: relative;\n  display: flex;\n  height: 100%;\n}\n\n.chonky-error {\n  border: solid 1px rgba(108, 72, 72, 0.11);\n  margin-bottom: 7.5px;\n  border-radius: 4px;\n  background-color: #fdebeb;\n  font-family: sans-serif;\n  color: #8e2121;\n  padding: 1em;\n}\n.chonky-error-name {\n  opacity: 0.5;\n}\n.chonky-error ul {\n  padding-top: 0.1em;\n  margin: 0;\n}\n.chonky-error li {\n  margin-top: 0.5em;\n}\n\n.chonky-tooltip {\n  position: relative;\n}\n.chonky-tooltip:hover::before, .chonky-tooltip:hover::after, .chonky-tooltip:focus::before, .chonky-tooltip:focus::after, .chonky-tooltip:active::before, .chonky-tooltip:active::after {\n  display: block;\n  opacity: 1;\n}\n.chonky-tooltip::before, .chonky-tooltip::after {\n  transition: opacity 100ms ease-in-out;\n  pointer-events: none;\n  position: absolute;\n  display: none;\n  z-index: 9999;\n  bottom: 100%;\n  opacity: 0;\n  left: 50%;\n}\n.chonky-tooltip::before {\n  transform: translateX(-75%);\n  background-color: rgba(0, 0, 0, 0.8);\n  border-radius: 2px;\n  content: attr(data-tooltip);\n  padding: 0.4em 0.5em;\n  white-space: nowrap;\n  margin-bottom: 6px;\n  line-height: 1em;\n  color: #fff;\n  font-size: 0.8em;\n  height: 1em;\n}\n.chonky-tooltip::after {\n  transform: translateX(-50%) rotate(45deg);\n  border: solid 2px rgba(0, 0, 0, 0.8);\n  border-left-color: transparent;\n  border-top-color: transparent;\n  margin-bottom: 4px;\n  content: "";\n}\n\n.chonky-text-placeholder {\n  -webkit-animation: loading-placeholder 1.5s infinite linear;\n  animation: loading-placeholder 1.5s infinite linear;\n  background-color: #ccc;\n  white-space: nowrap;\n  border-radius: 4px;\n  overflow: hidden;\n  min-width: 20px;\n  max-width: 40%;\n}\n@-webkit-keyframes loading-placeholder {\n  0% {\n    opacity: 0.2;\n  }\n  50% {\n    opacity: 0.4;\n  }\n  100% {\n    opacity: 0.2;\n  }\n}\n@keyframes loading-placeholder {\n  0% {\n    opacity: 0.2;\n  }\n  50% {\n    opacity: 0.4;\n  }\n  100% {\n    opacity: 0.2;\n  }\n}\n\n.chonky-toolbar {\n  justify-content: space-between;\n  flex-wrap: wrap-reverse;\n  flex-direction: row;\n  display: flex;\n}\n.chonky-toolbar-side {\n  margin-bottom: 7.5px;\n  flex-direction: row;\n  padding-bottom: 0;\n  display: flex;\n  flex-grow: 1;\n}\n.chonky-toolbar-side-left {\n  flex-grow: 10000;\n}\n.chonky-toolbar-side-left .chonky-toolbar-button-group {\n  margin-right: 7.5px;\n}\n.chonky-toolbar-side-right {\n  justify-content: space-between;\n}\n.chonky-toolbar-side-right .chonky-toolbar-button-group {\n  margin-left: 7.5px;\n}\n.chonky-toolbar-side-inside {\n  flex-direction: row;\n  display: flex;\n}\n.chonky-toolbar-side-inside > * {\n  vertical-align: middle;\n  display: inline-block;\n}\n@media screen and (max-width: 400px) {\n  .chonky-toolbar {\n    flex-direction: column-reverse;\n  }\n  .chonky-side-right {\n    justify-content: space-between;\n  }\n}\n.chonky-folder-chain-entry, .chonky-folder-chain-separator {\n  vertical-align: middle;\n  display: inline-block;\n}\n.chonky-folder-chain-entry {\n  background: none;\n  cursor: pointer;\n  color: inherit;\n  font: inherit;\n  border: none;\n  padding: 0;\n  transition: background-color 100ms ease-in-out;\n  border-radius: 4px;\n  border: solid 1px transparent;\n  line-height: 28px;\n  padding: 0 0.3em !important;\n  height: 28px;\n  box-sizing: border-box;\n}\n@media screen and (max-width: 400px) {\n  .chonky-folder-chain-entry {\n    line-height: 1.7em;\n    height: 1.7em;\n  }\n}\n.chonky-folder-chain-entry:last-child .chonky-folder-chain-entry-name {\n  -webkit-text-decoration: underline #bbb;\n          text-decoration: underline #bbb;\n}\n.chonky-folder-chain-entry.chonky-loading {\n  font-style: italic;\n  color: #bbb;\n}\ndiv.chonky-folder-chain-entry {\n  cursor: default;\n}\n\nbutton.chonky-folder-chain-entry:hover {\n  background-color: #f5f5f5;\n}\nbutton.chonky-folder-chain-entry:active {\n  border-color: #ccc;\n}\n\n.chonky-folder-chain-separator {\n  line-height: 28px;\n  height: 28px;\n  color: #bbb;\n  padding: 0 0.1em;\n}\n@media screen and (max-width: 400px) {\n  .chonky-folder-chain-separator {\n    line-height: 1.7em;\n    height: 1.7em;\n    padding: 0 0.1em;\n  }\n}\n\n.chonky-toolbar-button-group .chonky-toolbar-button {\n  border-radius: 0;\n}\n.chonky-toolbar-button-group .chonky-toolbar-button:first-child {\n  border-bottom-left-radius: 4px;\n  border-top-left-radius: 4px;\n}\n.chonky-toolbar-button-group .chonky-toolbar-button:last-child {\n  border-bottom-right-radius: 4px;\n  border-top-right-radius: 4px;\n}\n.chonky-toolbar-button-group .chonky-toolbar-button:focus {\n  z-index: 15;\n}\n.chonky-toolbar-button-group .chonky-toolbar-button:not(:first-child) {\n  margin-left: -1px;\n}\n\n.chonky-toolbar-button {\n  transition: background-color 100ms ease-in-out;\n  background: none;\n  cursor: pointer;\n  color: inherit;\n  font: inherit;\n  border: none;\n  padding: 0;\n  line-height: 26px;\n  border: solid 1px #e4e4e4;\n  border-radius: 4px;\n  min-width: 28px;\n  height: 28px;\n  vertical-align: middle;\n  box-sizing: border-box;\n  flex-direction: row;\n  text-align: center;\n  position: relative;\n  z-index: 10;\n}\n.chonky-toolbar-button-icon, .chonky-toolbar-button-text {\n  display: inline-block;\n}\n.chonky-toolbar-button-icon {\n  min-width: 28px;\n}\n.chonky-toolbar-button-text {\n  padding-right: 10px;\n  padding-left: 10px;\n}\n.chonky-toolbar-button-icon + .chonky-toolbar-button-text {\n  padding-left: 0 !important;\n}\n@media screen and (max-width: 400px) {\n  .chonky-toolbar-button {\n    line-height: 1.7em;\n    min-width: 1.7em;\n    height: 1.7em;\n  }\n  .chonky-toolbar-button-icon {\n    min-width: 1.7em;\n  }\n}\n.chonky-toolbar-button.chonky-active {\n  z-index: 93;\n}\n.chonky-toolbar-button:hover {\n  z-index: 92;\n}\n.chonky-toolbar-button:active {\n  border-color: #ccc;\n}\n.chonky-toolbar-button > span {\n  padding: 6px;\n  border-color: #ccc;\n  white-space: nowrap;\n}\n.chonky-toolbar-button[disabled] {\n  color: #bbb !important;\n  pointer-events: none;\n}\n.chonky-toolbar-button.chonky-active {\n  color: #09f;\n}\n.chonky-toolbar-button:hover {\n  background-color: #f5f5f5;\n  z-index: 92;\n}\n\n.chonky-file-list {\n  flex: 1 1;\n}\n\n.chonky-file-entry-clickable-wrapper {\n  outline: none !important;\n  position: relative;\n}\n.chonky-file-entry-clickable-wrapper:focus .chonky-file-entry-inside:before {\n  box-shadow: inset 0 0 0 2px #000 !important;\n}\n.chonky-file-entry-clickable-wrapper:focus .chonky-file-entry-description {\n  border-top-color: #000 !important;\n}\n.chonky-file-entry-clickable-wrapper:focus .chonky-file-icon-inside {\n  color: #000;\n}\n\n.chonky-file-drag-preview {\n  padding: 7.5px 10px;\n  box-shadow: 2px 2px 5px #888;\n  border-radius: 2px;\n  border: solid 2px #09f;\n  background-color: #f5f5f5;\n  display: inline-block;\n}\n\n.chonky-file-entry {\n  border: solid 1px #e4e4e4;\n  border-radius: 2px;\n  box-sizing: border-box;\n  overflow: hidden;\n  height: 100%;\n}\n.chonky-file-entry-inside {\n  box-sizing: border-box;\n  flex-direction: column;\n  display: flex;\n  height: 100%;\n}\n.chonky-file-entry-inside:before {\n  border-radius: 4px;\n  position: absolute;\n  display: block;\n  z-index: 999;\n  content: "";\n  bottom: 0;\n  right: 0;\n  left: 0;\n  top: 0;\n}\n.chonky-file-entry-dnd-indicator {\n  box-sizing: border-box;\n  position: absolute;\n  font-size: 1.2em;\n  opacity: 0.6;\n  padding: 6px;\n  z-index: 80;\n  left: 1px;\n  top: 1px;\n}\n.chonky-file-entry-dnd-indicator:before {\n  border-bottom: 50px solid transparent;\n  border-left: 50px solid #fff;\n  position: absolute;\n  content: "";\n  z-index: -1;\n  height: 0;\n  width: 0;\n  left: 0;\n  top: 0;\n}\n.chonky-file-entry-preview {\n  background-color: #fff;\n  position: relative;\n  overflow: hidden;\n  flex-grow: 1;\n}\n.chonky-file-entry-description {\n  border-top: solid 2px transparent;\n  background-color: #fff;\n  font-size: 14px;\n  padding: 3px 5px 5px 5px;\n}\n.chonky-file-entry-selected .chonky-file-entry-inside:before {\n  box-shadow: inset 0 0 0 2px #33adff !important;\n}\n.chonky-file-entry-selected .chonky-file-entry-description {\n  border-top-color: #33adff !important;\n}\n.chonky-file-entry-selected .chonky-file-selection {\n  opacity: 1 !important;\n}\n.chonky-file-entry-dragging .chonky-file-background {\n  opacity: 0.3 !important;\n}\n.chonky-file-entry-drop-hovered .chonky-file-background {\n  opacity: 1 !important;\n}\n\n.chonky-file-icon, .chonky-file-selection, .chonky-file-thumbnail, .chonky-file-background {\n  position: absolute;\n  display: block;\n  height: 100%;\n  width: 100%;\n  left: 0;\n  top: 0;\n}\n.chonky-file-icon {\n  z-index: 40;\n}\n.chonky-file-icon-inside {\n  transform: translateX(-50%) translateY(-50%);\n  text-align: center;\n  position: absolute;\n  font-size: 2.2em;\n  display: block;\n  color: #fff;\n  left: 50%;\n  top: 50%;\n}\n.chonky-file-selection {\n  z-index: 30;\n  background: repeating-linear-gradient(45deg, rgba(0, 153, 255, 0.14), rgba(0, 153, 255, 0.14) 10px, rgba(0, 153, 255, 0.2) 10px, rgba(0, 153, 255, 0.2) 20px);\n  background-color: rgba(0, 153, 255, 0.14);\n  opacity: 0;\n}\n.chonky-file-thumbnail {\n  z-index: 20;\n  transition: opacity 100ms ease-in-out;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: contain;\n  opacity: 1;\n}\n.chonky-file-thumbnail-hidden {\n  opacity: 0;\n}\n.chonky-file-background {\n  z-index: 10;\n  transition: opacity 100ms ease-in-out;\n  opacity: 0.5;\n}\n',""]),module.exports=exports},622:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("mPOS")},623:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("f4p7")},624:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("znGZ")},63:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("1Iuc")},64:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("fRV1")},65:function(module,exports,__webpack_require__){var api=__webpack_require__(137),content=__webpack_require__(620);"string"==typeof(content=content.__esModule?content.default:content)&&(content=[[module.i,content,""]]);var options={insert:"head",singleton:!1};api(content,options);module.exports=content.locals||{}},690:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("i7Kn")},70:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("hBpG")},71:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("ZVkB")},72:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("x4t0")},75:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("7nmT")},754:function(module,exports,__webpack_require__){var api=__webpack_require__(137),content=__webpack_require__(755);"string"==typeof(content=content.__esModule?content.default:content)&&(content=[[module.i,content,""]]);var options={insert:"head",singleton:!1};api(content,options);module.exports=content.locals||{}},755:function(module,exports,__webpack_require__){(exports=__webpack_require__(138)(!1)).push([module.i,'.sbdocs-content .sbdocs-p, .sbdocs-content .sbdocs-p *,\n.sbdocs-content .sbdocs-ul,\n.sbdocs-content .sbdocs-ul *,\n.sbdocs-content .sbdocs-ol,\n.sbdocs-content .sbdocs-ol * {\n  line-height: 25px !important;\n  font-size: 17px !important;\n}\n.sbdocs-content .sbdocs-p code,\n.sbdocs-content .sbdocs-ul code,\n.sbdocs-content .sbdocs-ol code {\n  padding: 0 5px !important;\n  font-size: 14px !important;\n}\n\n.sbdocs-preview {\n  border: solid 3px #09f !important;\n  margin: 50px 0 40px 0 !important;\n  border-radius: 3px !important;\n  position: relative !important;\n  overflow: visible !important;\n}\n.sbdocs-preview:before {\n  border-top-right-radius: 3px;\n  border-top-left-radius: 3px;\n  font-family: sans-serif;\n  content: "Live Example";\n  background-color: #09f;\n  position: absolute;\n  margin-left: -3px;\n  margin-top: -25px;\n  font-weight: bold;\n  line-height: 25px;\n  font-size: 14px;\n  padding: 0 8px;\n  display: block;\n  height: 25px;\n  color: #fff;\n}\n.sbdocs-preview > div:first-child > div:first-child {\n  padding: 10px 10px 30px 10px !important;\n  margin: 0 !important;\n  overflow: visible !important;\n}\n\n.noty_bar {\n  line-height: 24px;\n}\n.noty_bar code {\n  background-color: rgba(255, 255, 255, 0.7);\n  display: inline-block;\n  border-radius: 4px;\n  line-height: 20px;\n  padding: 0 4px;\n}\n\n.unstable-warning blockquote {\n  background-color: #fde0e0;\n  border-color: #9e0808;\n  margin-bottom: 40px;\n  padding: 20px 30px;\n}\n\n.live-example-action {\n  font-family: sans-serif !important;\n  font-size: 1.2em !important;\n  margin-bottom: 16px;\n  text-align: center;\n  color: #5f0707;\n}\n',""]),module.exports=exports},756:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(3),__webpack_require__(14),__webpack_require__(5),__webpack_require__(8),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(2),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(45);__webpack_require__(93);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Meta=function makeShortcode(name){return function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",props)}}("Meta"),layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(Meta,{title:"3 API Reference|Built-in file actions",mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"built-in-file-actions"},"Built-in file actions"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Explain ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"p"},"ChonkyActions")," map."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h2",{id:"how-to-use-file-actions"},"How to use file actions"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h2",{id:"list-of-built-in-file-actions"},"List of built-in file actions"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h3",{id:"openfiles"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"h3"},"OpenFiles")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"p"},"data.files")," will always be set, but ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"p"},"data.target")," can sometimes be undefined. For\nexample, when the user clicks ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"p"},"Actions -> Open selection"),", target will be undefined."))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"3 API Reference|Built-in file actions",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},758:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ComponentHierarchyExample",(function(){return _01_Component_hierarchy_stories_ComponentHierarchyExample}));__webpack_require__(30),__webpack_require__(65);var _parameters,src=__webpack_require__(26),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"1 File Browser basics|Component hierarchy",parameters:(_parameters={storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import \'chonky/style/main.css\';\\n\\nimport { FileBrowser, FileList, FileToolbar } from \'chonky\';\\nimport React from \'react\';\\n\\nimport { createDocsObject } from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./01-Component-hierarchy.md\';\\n\\n\\nexport default {\\n    title: \'1 File Browser basics|Component hierarchy\',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ComponentHierarchyExample = () => {\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser files={[]} enableDragAndDrop={true}>\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"1-file-browser-basics-component-hierarchy--component-hierarchy-example":{"startLoc":{"col":41,"line":19},"endLoc":{"col":1,"line":28},"startBody":{"col":41,"line":19},"endBody":{"col":1,"line":28}}};\n    \nimport \'chonky/style/main.css\';\n\nimport { FileBrowser, FileList, FileToolbar } from \'chonky\';\nimport React from \'react\';\n\nimport { createDocsObject } from \'../story-helpers\';\n// @ts-ignore\n\nimport markdown from \'./01-Component-hierarchy.md\';\n\n\nexport default {\n    title: \'1 File Browser basics|Component hierarchy\',\n    parameters: {"storySource":{"source":"import \'chonky/style/main.css\';\\n\\nimport { FileBrowser, FileList, FileToolbar } from \'chonky\';\\nimport React from \'react\';\\n\\nimport { createDocsObject } from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./01-Component-hierarchy.md\';\\n\\n\\nexport default {\\n    title: \'1 File Browser basics|Component hierarchy\',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ComponentHierarchyExample = () => {\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser files={[]} enableDragAndDrop={true}>\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n","locationsMap":{"1-file-browser-basics-component-hierarchy--component-hierarchy-example":{"startLoc":{"col":41,"line":19},"endLoc":{"col":1,"line":28},"startBody":{"col":41,"line":19},"endBody":{"col":1,"line":28}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ComponentHierarchyExample = () => {\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser files={[]} enableDragAndDrop={true}>\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n',locationsMap:{"1-file-browser-basics-component-hierarchy--component-hierarchy-example":{startLoc:{col:41,line:27},endLoc:{col:1,line:36},startBody:{col:41,line:27},endBody:{col:1,line:36}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport { FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './01-Component-hierarchy.md';\n\n\nexport default {\n    title: '1 File Browser basics|Component hierarchy',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ComponentHierarchyExample = () => {\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser files={[]} enableDragAndDrop={true}>\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"1-file-browser-basics-component-hierarchy--component-hierarchy-example":{startLoc:{col:41,line:19},endLoc:{col:1,line:28},startBody:{col:41,line:19},endBody:{col:1,line:28}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"TODO Explain:\n\n* `FileBrowser` must wrap everything.\n"})),_parameters)};var _01_Component_hierarchy_stories_ComponentHierarchyExample=function ComponentHierarchyExample(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.b,{files:[],enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,null)))};_01_Component_hierarchy_stories_ComponentHierarchyExample.displayName="ComponentHierarchyExample"},759:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"FilesArrayExample",(function(){return _02_Displaying_files_stories_FilesArrayExample}));__webpack_require__(24),__webpack_require__(30),__webpack_require__(65);var _parameters,src=__webpack_require__(26),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"1 File Browser basics|Displaying files",parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileArray,\\n    FileBrowser,\\n    FileList,\\n    FileToolbar\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './02-Displaying-files.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Displaying files',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const FilesArrayExample = () => {\\n    const files: FileArray = [\\n        null, // Loading animation will be shown for this file\\n        null,\\n        {\\n            id: 'nTe',\\n            name: 'Normal file.yaml',\\n            isDir: false,\\n            isHidden: true,\\n            size: 890,\\n        },\\n        {\\n            id: 'zxc',\\n            name: 'Hidden file.mp4',\\n            isDir: false,\\n            isHidden: true,\\n            size: 890,\\n        },\\n        {\\n            id: 'bnm',\\n            name: 'Normal folder',\\n            isDir: true,\\n            childrenIds: ['random-id-1', 'random-id-2'],\\n        },\\n        {\\n            id: 'vfr',\\n            name: 'Symlink folder',\\n            isDir: true,\\n            isSymlink: true,\\n        },\\n        {\\n            id: 'qwe',\\n            name: 'Not selectable.tar.gz',\\n            ext: '.tar.gz', // Custom extension\\n            selectable: false, // Disable selection\\n            size: 54300000000,\\n            modDate: new Date(),\\n        },\\n        {\\n            id: 'rty',\\n            name: 'Not openable.pem',\\n            openable: false, // Prevent opening\\n            size: 100000000,\\n        },\\n        {\\n            id: 'btj',\\n            name: 'Not draggable.exe',\\n            draggable: false, // Prevent this files from being dragged\\n        },\\n        {\\n            id: 'upq',\\n            name: 'Not droppable',\\n            isDir: true,\\n            droppable: false, // Prevent files from being dropped into this folder\\n        },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"1-file-browser-basics-displaying-files--files-array-example\":{\"startLoc\":{\"col\":33,\"line\":26},\"endLoc\":{\"col\":1,\"line\":99},\"startBody\":{\"col\":33,\"line\":26},\"endBody\":{\"col\":1,\"line\":99}}};\n    \nimport 'chonky/style/main.css';\n\nimport {\n    FileAction,\n    FileActionData,\n    FileArray,\n    FileBrowser,\n    FileList,\n    FileToolbar\n} from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './02-Displaying-files.md';\n\n\nexport default {\n    title: '1 File Browser basics|Displaying files',\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileArray,\\n    FileBrowser,\\n    FileList,\\n    FileToolbar\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './02-Displaying-files.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Displaying files',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const FilesArrayExample = () => {\\n    const files: FileArray = [\\n        null, // Loading animation will be shown for this file\\n        null,\\n        {\\n            id: 'nTe',\\n            name: 'Normal file.yaml',\\n            isDir: false,\\n            isHidden: true,\\n            size: 890,\\n        },\\n        {\\n            id: 'zxc',\\n            name: 'Hidden file.mp4',\\n            isDir: false,\\n            isHidden: true,\\n            size: 890,\\n        },\\n        {\\n            id: 'bnm',\\n            name: 'Normal folder',\\n            isDir: true,\\n            childrenIds: ['random-id-1', 'random-id-2'],\\n        },\\n        {\\n            id: 'vfr',\\n            name: 'Symlink folder',\\n            isDir: true,\\n            isSymlink: true,\\n        },\\n        {\\n            id: 'qwe',\\n            name: 'Not selectable.tar.gz',\\n            ext: '.tar.gz', // Custom extension\\n            selectable: false, // Disable selection\\n            size: 54300000000,\\n            modDate: new Date(),\\n        },\\n        {\\n            id: 'rty',\\n            name: 'Not openable.pem',\\n            openable: false, // Prevent opening\\n            size: 100000000,\\n        },\\n        {\\n            id: 'btj',\\n            name: 'Not draggable.exe',\\n            draggable: false, // Prevent this files from being dragged\\n        },\\n        {\\n            id: 'upq',\\n            name: 'Not droppable',\\n            isDir: true,\\n            droppable: false, // Prevent files from being dropped into this folder\\n        },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"1-file-browser-basics-displaying-files--files-array-example\":{\"startLoc\":{\"col\":33,\"line\":26},\"endLoc\":{\"col\":1,\"line\":99},\"startBody\":{\"col\":33,\"line\":26},\"endBody\":{\"col\":1,\"line\":99}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const FilesArrayExample = () => {\n    const files: FileArray = [\n        null, // Loading animation will be shown for this file\n        null,\n        {\n            id: 'nTe',\n            name: 'Normal file.yaml',\n            isDir: false,\n            isHidden: true,\n            size: 890,\n        },\n        {\n            id: 'zxc',\n            name: 'Hidden file.mp4',\n            isDir: false,\n            isHidden: true,\n            size: 890,\n        },\n        {\n            id: 'bnm',\n            name: 'Normal folder',\n            isDir: true,\n            childrenIds: ['random-id-1', 'random-id-2'],\n        },\n        {\n            id: 'vfr',\n            name: 'Symlink folder',\n            isDir: true,\n            isSymlink: true,\n        },\n        {\n            id: 'qwe',\n            name: 'Not selectable.tar.gz',\n            ext: '.tar.gz', // Custom extension\n            selectable: false, // Disable selection\n            size: 54300000000,\n            modDate: new Date(),\n        },\n        {\n            id: 'rty',\n            name: 'Not openable.pem',\n            openable: false, // Prevent opening\n            size: 100000000,\n        },\n        {\n            id: 'btj',\n            name: 'Not draggable.exe',\n            draggable: false, // Prevent this files from being dragged\n        },\n        {\n            id: 'upq',\n            name: 'Not droppable',\n            isDir: true,\n            droppable: false, // Prevent files from being dropped into this folder\n        },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"1-file-browser-basics-displaying-files--files-array-example":{startLoc:{col:33,line:34},endLoc:{col:1,line:107},startBody:{col:33,line:34},endBody:{col:1,line:107}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    FileAction,\n    FileActionData,\n    FileArray,\n    FileBrowser,\n    FileList,\n    FileToolbar\n} from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './02-Displaying-files.md';\n\n\nexport default {\n    title: '1 File Browser basics|Displaying files',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const FilesArrayExample = () => {\n    const files: FileArray = [\n        null, // Loading animation will be shown for this file\n        null,\n        {\n            id: 'nTe',\n            name: 'Normal file.yaml',\n            isDir: false,\n            isHidden: true,\n            size: 890,\n        },\n        {\n            id: 'zxc',\n            name: 'Hidden file.mp4',\n            isDir: false,\n            isHidden: true,\n            size: 890,\n        },\n        {\n            id: 'bnm',\n            name: 'Normal folder',\n            isDir: true,\n            childrenIds: ['random-id-1', 'random-id-2'],\n        },\n        {\n            id: 'vfr',\n            name: 'Symlink folder',\n            isDir: true,\n            isSymlink: true,\n        },\n        {\n            id: 'qwe',\n            name: 'Not selectable.tar.gz',\n            ext: '.tar.gz', // Custom extension\n            selectable: false, // Disable selection\n            size: 54300000000,\n            modDate: new Date(),\n        },\n        {\n            id: 'rty',\n            name: 'Not openable.pem',\n            openable: false, // Prevent opening\n            size: 100000000,\n        },\n        {\n            id: 'btj',\n            name: 'Not draggable.exe',\n            draggable: false, // Prevent this files from being dragged\n        },\n        {\n            id: 'upq',\n            name: 'Not droppable',\n            isDir: true,\n            droppable: false, // Prevent files from being dropped into this folder\n        },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"1-file-browser-basics-displaying-files--files-array-example":{startLoc:{col:33,line:26},endLoc:{col:1,line:99},startBody:{col:33,line:26},endBody:{col:1,line:99}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"TODO Explain:\n\n-   Chonky is a presentation layer.\n-   `FileBrowser` and `FileList` is the minimum required.\n-   Files array is the source of truth.\n-   The `FileData` type.\n\n```js\nconst files = [\n    {\n        id: 'gBt4z3',\n        name: 'README.md',\n    },\n    {\n        id: 'gM5tTe',\n        name: 'Blueprints',\n        isDir: true,\n    },\n    {\n        id: 'mT7Et',\n        name: 'I am not selectable!',\n        selectable: false,\n    },\n    null, // Loading animation will be shown for this file\n];\n```\n\n<span style=\"color: red; font-weight: bold;\">\nIt is very important that file IDs are unique:\n</span>\n\nIf file IDs are not unique, the consequences can be dire - for example, your user can\naccidentally delete the wrong file. Chonky tries to protect you by scanning the files\narray for duplicate IDs, but you should put some extra checks in your code too. You can\nnever be too safe.\n"})),_parameters)};var _02_Displaying_files_stories_FilesArrayExample=function FilesArrayExample(){var files=[null,null,{id:"nTe",name:"Normal file.yaml",isDir:!1,isHidden:!0,size:890},{id:"zxc",name:"Hidden file.mp4",isDir:!1,isHidden:!0,size:890},{id:"bnm",name:"Normal folder",isDir:!0,childrenIds:["random-id-1","random-id-2"]},{id:"vfr",name:"Symlink folder",isDir:!0,isSymlink:!0},{id:"qwe",name:"Not selectable.tar.gz",ext:".tar.gz",selectable:!1,size:543e8,modDate:new Date},{id:"rty",name:"Not openable.pem",openable:!1,size:1e8},{id:"btj",name:"Not draggable.exe",draggable:!1},{id:"upq",name:"Not droppable",isDir:!0,droppable:!1}];return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.b,{files:files,onFileAction:function handleFileAction(action,data){Object(story_helpers.b)({action:action,data:data})},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,null)))};_02_Displaying_files_stories_FilesArrayExample.displayName="FilesArrayExample"},760:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"FolderChainExample",(function(){return _03_Specifying_folder_stories_FolderChainExample}));__webpack_require__(30),__webpack_require__(65);var _parameters,src=__webpack_require__(26),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"1 File Browser basics|Specifying current folder",parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './03-Specifying-folder.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Specifying current folder',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const FolderChainExample = () => {\\n    const folderChain = [\\n        {\\n            id: 'gM5tTe',\\n            name: 'My Documents',\\n            isDir: true,\\n        },\\n        {\\n            id: 'mTxYeA',\\n            name: 'Not Openable',\\n            isDir: true,\\n            openable: false, // This button will not be clickable\\n        },\\n        null, // Loading animation will be shown for this file\\n        {\\n            id: 'vxWtA',\\n            name: 'Unity Projects',\\n            isDir: true,\\n        },\\n        {\\n            id: 'mT7Et',\\n            name: 'Good Projects',\\n            isDir: true,\\n        },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={[]}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"1-file-browser-basics-specifying-current-folder--folder-chain-example\":{\"startLoc\":{\"col\":34,\"line\":19},\"endLoc\":{\"col\":1,\"line\":61},\"startBody\":{\"col\":34,\"line\":19},\"endBody\":{\"col\":1,\"line\":61}}};\n    \nimport 'chonky/style/main.css';\n\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './03-Specifying-folder.md';\n\n\nexport default {\n    title: '1 File Browser basics|Specifying current folder',\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './03-Specifying-folder.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Specifying current folder',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const FolderChainExample = () => {\\n    const folderChain = [\\n        {\\n            id: 'gM5tTe',\\n            name: 'My Documents',\\n            isDir: true,\\n        },\\n        {\\n            id: 'mTxYeA',\\n            name: 'Not Openable',\\n            isDir: true,\\n            openable: false, // This button will not be clickable\\n        },\\n        null, // Loading animation will be shown for this file\\n        {\\n            id: 'vxWtA',\\n            name: 'Unity Projects',\\n            isDir: true,\\n        },\\n        {\\n            id: 'mT7Et',\\n            name: 'Good Projects',\\n            isDir: true,\\n        },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={[]}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"1-file-browser-basics-specifying-current-folder--folder-chain-example\":{\"startLoc\":{\"col\":34,\"line\":19},\"endLoc\":{\"col\":1,\"line\":61},\"startBody\":{\"col\":34,\"line\":19},\"endBody\":{\"col\":1,\"line\":61}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const FolderChainExample = () => {\n    const folderChain = [\n        {\n            id: 'gM5tTe',\n            name: 'My Documents',\n            isDir: true,\n        },\n        {\n            id: 'mTxYeA',\n            name: 'Not Openable',\n            isDir: true,\n            openable: false, // This button will not be clickable\n        },\n        null, // Loading animation will be shown for this file\n        {\n            id: 'vxWtA',\n            name: 'Unity Projects',\n            isDir: true,\n        },\n        {\n            id: 'mT7Et',\n            name: 'Good Projects',\n            isDir: true,\n        },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={[]}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"1-file-browser-basics-specifying-current-folder--folder-chain-example":{startLoc:{col:34,line:27},endLoc:{col:1,line:69},startBody:{col:34,line:27},endBody:{col:1,line:69}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './03-Specifying-folder.md';\n\n\nexport default {\n    title: '1 File Browser basics|Specifying current folder',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const FolderChainExample = () => {\n    const folderChain = [\n        {\n            id: 'gM5tTe',\n            name: 'My Documents',\n            isDir: true,\n        },\n        {\n            id: 'mTxYeA',\n            name: 'Not Openable',\n            isDir: true,\n            openable: false, // This button will not be clickable\n        },\n        null, // Loading animation will be shown for this file\n        {\n            id: 'vxWtA',\n            name: 'Unity Projects',\n            isDir: true,\n        },\n        {\n            id: 'mT7Et',\n            name: 'Good Projects',\n            isDir: true,\n        },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={[]}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"1-file-browser-basics-specifying-current-folder--folder-chain-example":{startLoc:{col:34,line:19},endLoc:{col:1,line:61},startBody:{col:34,line:19},endBody:{col:1,line:61}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"TODO Explain:\n\n* Introducing `FileToolbar`.\n* Explain folder chain.\n* Folder chain can have nulls to.\n* Folders are clickable, go up a directory folder goes to parent directory.\n"})),_parameters)};var _03_Specifying_folder_stories_FolderChainExample=function FolderChainExample(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.b,{files:[],folderChain:[{id:"gM5tTe",name:"My Documents",isDir:!0},{id:"mTxYeA",name:"Not Openable",isDir:!0,openable:!1},null,{id:"vxWtA",name:"Unity Projects",isDir:!0},{id:"mT7Et",name:"Good Projects",isDir:!0}],onFileAction:function handleFileAction(action,data){Object(story_helpers.b)({action:action,data:data})}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,null)))};_03_Specifying_folder_stories_FolderChainExample.displayName="FolderChainExample"},761:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ActionsExample",(function(){return _04_Actions_stories_ActionsExample}));__webpack_require__(3),__webpack_require__(11),__webpack_require__(23),__webpack_require__(20),__webpack_require__(28),__webpack_require__(13),__webpack_require__(17),__webpack_require__(39),__webpack_require__(25),__webpack_require__(15),__webpack_require__(24),__webpack_require__(4),__webpack_require__(30),__webpack_require__(10),__webpack_require__(21),__webpack_require__(16),__webpack_require__(18),__webpack_require__(65);var _parameters,src=__webpack_require__(26),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(33);function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"1 File Browser basics|Using file actions",parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyActions,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileToolbar,\\n} from 'chonky';\\nimport React, { useState } from 'react';\\n\\nimport { createDocsObject } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './04-Actions.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Using file actions',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ActionsExample = () => {\\n    const [actionCount, setActionCount] = useState(0);\\n    const [lastAction, setLastAction] = useState(\\n        'Click on something or drag & drop files...'\\n    );\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        // Log action to console\\n        \\n        console.log('\\\\nAction object:', action, '\\\\nAction data:', data);\\n\\n        // Show pretty action HTML\\n        const textParts = [];\\n        textParts.push(`<b>Action #${actionCount + 1}:</b> ${action.name}`);\\n        if (data.target) {\\n            textParts.push(`<b>Target:</b> \\\"${data.target.name}\\\"`);\\n        }\\n        if (data.files) {\\n            const fileNames = data.files.map((f) => `\\\"${f.name}\\\"`).join(', ');\\n            textParts.push(`<b>Files:</b> ${fileNames}`);\\n        }\\n        setActionCount((count) => count + 1);\\n        setLastAction(textParts.join(' '));\\n    };\\n\\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'hunter2', name: 'Password.txt' },\\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\\n    ];\\n\\n    const fileActions = [\\n        ChonkyActions.CreateFolder,\\n        ChonkyActions.UploadFiles,\\n        ChonkyActions.DownloadFiles,\\n        ChonkyActions.CopyFiles,\\n    ];\\n\\n    return (\\n        <div className=\\\"live-example\\\" style={{ height: 500 }}>\\n            <div\\n                className=\\\"live-example-action\\\"\\n                dangerouslySetInnerHTML={{ __html: lastAction }}\\n            />\\n\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                fileActions={fileActions}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"1-file-browser-basics-using-file-actions--actions-example\":{\"startLoc\":{\"col\":30,\"line\":26},\"endLoc\":{\"col\":1,\"line\":84},\"startBody\":{\"col\":30,\"line\":26},\"endBody\":{\"col\":1,\"line\":84}}};\n    \nimport 'chonky/style/main.css';\n\nimport {\n    ChonkyActions,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileToolbar,\n} from 'chonky';\nimport React, { useState } from 'react';\n\nimport { createDocsObject } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './04-Actions.md';\n\n\nexport default {\n    title: '1 File Browser basics|Using file actions',\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyActions,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileToolbar,\\n} from 'chonky';\\nimport React, { useState } from 'react';\\n\\nimport { createDocsObject } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './04-Actions.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Using file actions',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ActionsExample = () => {\\n    const [actionCount, setActionCount] = useState(0);\\n    const [lastAction, setLastAction] = useState(\\n        'Click on something or drag & drop files...'\\n    );\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        // Log action to console\\n        \\n        console.log('\\\\nAction object:', action, '\\\\nAction data:', data);\\n\\n        // Show pretty action HTML\\n        const textParts = [];\\n        textParts.push(`<b>Action #${actionCount + 1}:</b> ${action.name}`);\\n        if (data.target) {\\n            textParts.push(`<b>Target:</b> \\\"${data.target.name}\\\"`);\\n        }\\n        if (data.files) {\\n            const fileNames = data.files.map((f) => `\\\"${f.name}\\\"`).join(', ');\\n            textParts.push(`<b>Files:</b> ${fileNames}`);\\n        }\\n        setActionCount((count) => count + 1);\\n        setLastAction(textParts.join(' '));\\n    };\\n\\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'hunter2', name: 'Password.txt' },\\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\\n    ];\\n\\n    const fileActions = [\\n        ChonkyActions.CreateFolder,\\n        ChonkyActions.UploadFiles,\\n        ChonkyActions.DownloadFiles,\\n        ChonkyActions.CopyFiles,\\n    ];\\n\\n    return (\\n        <div className=\\\"live-example\\\" style={{ height: 500 }}>\\n            <div\\n                className=\\\"live-example-action\\\"\\n                dangerouslySetInnerHTML={{ __html: lastAction }}\\n            />\\n\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                fileActions={fileActions}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"1-file-browser-basics-using-file-actions--actions-example\":{\"startLoc\":{\"col\":30,\"line\":26},\"endLoc\":{\"col\":1,\"line\":84},\"startBody\":{\"col\":30,\"line\":26},\"endBody\":{\"col\":1,\"line\":84}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ActionsExample = () => {\n    const [actionCount, setActionCount] = useState(0);\n    const [lastAction, setLastAction] = useState(\n        'Click on something or drag & drop files...'\n    );\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        // Log action to console\n        \n        console.log('\\nAction object:', action, '\\nAction data:', data);\n\n        // Show pretty action HTML\n        const textParts = [];\n        textParts.push(`<b>Action #${actionCount + 1}:</b> ${action.name}`);\n        if (data.target) {\n            textParts.push(`<b>Target:</b> \"${data.target.name}\"`);\n        }\n        if (data.files) {\n            const fileNames = data.files.map((f) => `\"${f.name}\"`).join(', ');\n            textParts.push(`<b>Files:</b> ${fileNames}`);\n        }\n        setActionCount((count) => count + 1);\n        setLastAction(textParts.join(' '));\n    };\n\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'hunter2', name: 'Password.txt' },\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\n    ];\n\n    const fileActions = [\n        ChonkyActions.CreateFolder,\n        ChonkyActions.UploadFiles,\n        ChonkyActions.DownloadFiles,\n        ChonkyActions.CopyFiles,\n    ];\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <div\n                className=\"live-example-action\"\n                dangerouslySetInnerHTML={{ __html: lastAction }}\n            />\n\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                fileActions={fileActions}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"1-file-browser-basics-using-file-actions--actions-example":{startLoc:{col:30,line:34},endLoc:{col:1,line:92},startBody:{col:30,line:34},endBody:{col:1,line:92}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    ChonkyActions,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileToolbar,\n} from 'chonky';\nimport React, { useState } from 'react';\n\nimport { createDocsObject } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './04-Actions.md';\n\n\nexport default {\n    title: '1 File Browser basics|Using file actions',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ActionsExample = () => {\n    const [actionCount, setActionCount] = useState(0);\n    const [lastAction, setLastAction] = useState(\n        'Click on something or drag & drop files...'\n    );\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        // Log action to console\n        \n        console.log('\\nAction object:', action, '\\nAction data:', data);\n\n        // Show pretty action HTML\n        const textParts = [];\n        textParts.push(`<b>Action #${actionCount + 1}:</b> ${action.name}`);\n        if (data.target) {\n            textParts.push(`<b>Target:</b> \"${data.target.name}\"`);\n        }\n        if (data.files) {\n            const fileNames = data.files.map((f) => `\"${f.name}\"`).join(', ');\n            textParts.push(`<b>Files:</b> ${fileNames}`);\n        }\n        setActionCount((count) => count + 1);\n        setLastAction(textParts.join(' '));\n    };\n\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'hunter2', name: 'Password.txt' },\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\n    ];\n\n    const fileActions = [\n        ChonkyActions.CreateFolder,\n        ChonkyActions.UploadFiles,\n        ChonkyActions.DownloadFiles,\n        ChonkyActions.CopyFiles,\n    ];\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <div\n                className=\"live-example-action\"\n                dangerouslySetInnerHTML={{ __html: lastAction }}\n            />\n\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                fileActions={fileActions}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"1-file-browser-basics-using-file-actions--actions-example":{startLoc:{col:30,line:26},endLoc:{col:1,line:84},startBody:{col:30,line:26},endBody:{col:1,line:84}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"Every application using Chonky will be different. Some will require a feature to\nupload files, other will need to support cutting & pasting. Bottom line -\nrequirements will differ! Chonky tries to address this problem using **File Actions**\nand **Action Handlers**.\n\n## File actions\n\n**File Actions** define _what_ can happen. These actions can be triggered by some\nhotkey, user clicking on a button, or a special event like drag & drop. Here are some\nexamples of file actions:\n\n-   User deletes some files by making a selection and pressing `Delete`.\n-   User initializes a file upload by clicking on \"Upload File\" button.\n-   User moves some files from one folder to another using drag & drop.\n\nAction definitions can be passed to the `FileBrowser` component via the `actions`.\nFor your convenience, Chonky includes definitions for many common actions. You just\nneed to import and enable them as follows:\n\n```tsx\nimport { FileBrowser, FileList, FileToolbar, ChonkyActions } from 'chonky';\n\nexport const MyComponent = () => {\n    const actions = [\n        ChonkyActions.CreateFolder, // Adds a button to the toolbar\n        ChonkyActions.UploadFiles, // Adds a button\n        ChonkyActions.DownloadFiles, // Adds a button\n        ChonkyActions.CopyFiles, // Adds a button and a shortcut: Ctrl+C\n\n    ];\n\n    return (\n        <FileBrowser files={[]} actions={actions}>\n            <FileToolbar />\n            <FileList />\n        </FileBrowser>\n    );\n};\n```\n\n## Action handlers\n\n```ts\nconst helloWorld = '123';\n```\n"})),_parameters)};var _04_Actions_stories_ActionsExample=function ActionsExample(){var _useState2=_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(0),2),actionCount=_useState2[0],setActionCount=_useState2[1],_useState4=_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)("Click on something or drag & drop files..."),2),lastAction=_useState4[0],setLastAction=_useState4[1],fileActions=[src.a.CreateFolder,src.a.UploadFiles,src.a.DownloadFiles,src.a.CopyFiles];return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"live-example",style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"live-example-action",dangerouslySetInnerHTML:{__html:lastAction}}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.b,{files:[{id:"mHe4A1",name:"Meaning of life.txt",size:31415},{id:"hunter2",name:"Password.txt"},{id:"bEf24q",name:"Drag & drop files here",isDir:!0}],folderChain:[{id:"gBt4z3",name:"My Documents",isDir:!0}],fileActions:fileActions,onFileAction:function handleFileAction(action,data){console.log("\nAction object:",action,"\nAction data:",data);var textParts=[];if(textParts.push("<b>Action #".concat(actionCount+1,":</b> ").concat(action.name)),data.target&&textParts.push('<b>Target:</b> "'.concat(data.target.name,'"')),data.files){var fileNames=data.files.map((function(f){return'"'.concat(f.name,'"')})).join(", ");textParts.push("<b>Files:</b> ".concat(fileNames))}setActionCount((function(count){return count+1})),setLastAction(textParts.join(" "))},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,null)))};_04_Actions_stories_ActionsExample.displayName="ActionsExample"},762:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"CustomActionsExample",(function(){return _05_Custom_actions_stories_CustomActionsExample}));__webpack_require__(30),__webpack_require__(65);var _parameters,src=__webpack_require__(26),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"1 File Browser basics|Custom file actions",parameters:(_parameters={storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import \'chonky/style/main.css\';\\n\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from \'chonky\';\\nimport React from \'react\';\\n\\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./05-Custom-actions.md\';\\n\\n\\nexport default {\\n    title: \'1 File Browser basics|Custom file actions\',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const CustomActionsExample = () => {\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <FileBrowser files={[]} onFileAction={handleFileAction}>\\n            <FileList />\\n            <FileToolbar />\\n        </FileBrowser>\\n    );\\n};\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"1-file-browser-basics-custom-file-actions--custom-actions-example":{"startLoc":{"col":36,"line":19},"endLoc":{"col":1,"line":30},"startBody":{"col":36,"line":19},"endBody":{"col":1,"line":30}}};\n    \nimport \'chonky/style/main.css\';\n\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from \'chonky\';\nimport React from \'react\';\n\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\n// @ts-ignore\n\nimport markdown from \'./05-Custom-actions.md\';\n\n\nexport default {\n    title: \'1 File Browser basics|Custom file actions\',\n    parameters: {"storySource":{"source":"import \'chonky/style/main.css\';\\n\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from \'chonky\';\\nimport React from \'react\';\\n\\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./05-Custom-actions.md\';\\n\\n\\nexport default {\\n    title: \'1 File Browser basics|Custom file actions\',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const CustomActionsExample = () => {\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <FileBrowser files={[]} onFileAction={handleFileAction}>\\n            <FileList />\\n            <FileToolbar />\\n        </FileBrowser>\\n    );\\n};\\n","locationsMap":{"1-file-browser-basics-custom-file-actions--custom-actions-example":{"startLoc":{"col":36,"line":19},"endLoc":{"col":1,"line":30},"startBody":{"col":36,"line":19},"endBody":{"col":1,"line":30}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const CustomActionsExample = () => {\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <FileBrowser files={[]} onFileAction={handleFileAction}>\n            <FileList />\n            <FileToolbar />\n        </FileBrowser>\n    );\n};\n',locationsMap:{"1-file-browser-basics-custom-file-actions--custom-actions-example":{startLoc:{col:36,line:27},endLoc:{col:1,line:38},startBody:{col:36,line:27},endBody:{col:1,line:38}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './05-Custom-actions.md';\n\n\nexport default {\n    title: '1 File Browser basics|Custom file actions',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const CustomActionsExample = () => {\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <FileBrowser files={[]} onFileAction={handleFileAction}>\n            <FileList />\n            <FileToolbar />\n        </FileBrowser>\n    );\n};\n",locationsMap:{"1-file-browser-basics-custom-file-actions--custom-actions-example":{startLoc:{col:36,line:19},endLoc:{col:1,line:30},startBody:{col:36,line:19},endBody:{col:1,line:30}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"Notes:\n\n-   If one of the actions in a group is marked as `dropdown`, they all become dropdown.\n"})),_parameters)};var _05_Custom_actions_stories_CustomActionsExample=function CustomActionsExample(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.b,{files:[],onFileAction:function handleFileAction(action,data){Object(story_helpers.b)({action:action,data:data})}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null))};_05_Custom_actions_stories_CustomActionsExample.displayName="CustomActionsExample"},763:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ActionsExample",(function(){return _06_Thumbnails_stories_ActionsExample}));__webpack_require__(30),__webpack_require__(130),__webpack_require__(65);var _parameters,bluebird=__webpack_require__(146),bluebird_default=__webpack_require__.n(bluebird),src=__webpack_require__(26),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"1 File Browser basics|File thumbnails",parameters:(_parameters={storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import \'chonky/style/main.css\';\\n\\nimport Promise from \'bluebird\';\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileData,\\n    FileList,\\n    FileToolbar,\\n} from \'chonky\';\\nimport React from \'react\';\\n\\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./06-Thumbnails.md\';\\n\\n\\nexport default {\\n    title: \'1 File Browser basics|File thumbnails\',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ActionsExample = () => {\\n    const thumbnailGenerator = (file: FileData & { delay: number }) => {\\n        return new Promise((resolve) => {\\n            // Delay loading by `file.delay` seconds to simulate thumb generation.\\n            setTimeout(() => resolve(\'./Lenna.png\'), file.delay * 1000);\\n        });\\n    };\\n\\n    const folderChain = [{ id: \'gBt4z3\', name: \'My Pictures\', isDir: true }];\\n    const files: FileData[] = [];\\n    for (let i = 0; i < 20; ++i) {\\n        const delay = i * 2;\\n        files.push({\\n            id: `image-${i}`,\\n            name: `Delay - ${delay} seconds.jpg`,\\n            delay: delay,\\n        });\\n    }\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div className=\\"live-example\\" style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                thumbnailGenerator={thumbnailGenerator} // <----\\n                enableDragAndDrop={true}\\n                onFileAction={handleFileAction}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"1-file-browser-basics-file-thumbnails--actions-example":{"startLoc":{"col":30,"line":27},"endLoc":{"col":1,"line":64},"startBody":{"col":30,"line":27},"endBody":{"col":1,"line":64}}};\n    \nimport \'chonky/style/main.css\';\n\nimport Promise from \'bluebird\';\nimport {\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileData,\n    FileList,\n    FileToolbar,\n} from \'chonky\';\nimport React from \'react\';\n\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\n// @ts-ignore\n\nimport markdown from \'./06-Thumbnails.md\';\n\n\nexport default {\n    title: \'1 File Browser basics|File thumbnails\',\n    parameters: {"storySource":{"source":"import \'chonky/style/main.css\';\\n\\nimport Promise from \'bluebird\';\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileData,\\n    FileList,\\n    FileToolbar,\\n} from \'chonky\';\\nimport React from \'react\';\\n\\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./06-Thumbnails.md\';\\n\\n\\nexport default {\\n    title: \'1 File Browser basics|File thumbnails\',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ActionsExample = () => {\\n    const thumbnailGenerator = (file: FileData & { delay: number }) => {\\n        return new Promise((resolve) => {\\n            // Delay loading by `file.delay` seconds to simulate thumb generation.\\n            setTimeout(() => resolve(\'./Lenna.png\'), file.delay * 1000);\\n        });\\n    };\\n\\n    const folderChain = [{ id: \'gBt4z3\', name: \'My Pictures\', isDir: true }];\\n    const files: FileData[] = [];\\n    for (let i = 0; i < 20; ++i) {\\n        const delay = i * 2;\\n        files.push({\\n            id: `image-${i}`,\\n            name: `Delay - ${delay} seconds.jpg`,\\n            delay: delay,\\n        });\\n    }\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div className=\\"live-example\\" style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                thumbnailGenerator={thumbnailGenerator} // <----\\n                enableDragAndDrop={true}\\n                onFileAction={handleFileAction}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n","locationsMap":{"1-file-browser-basics-file-thumbnails--actions-example":{"startLoc":{"col":30,"line":27},"endLoc":{"col":1,"line":64},"startBody":{"col":30,"line":27},"endBody":{"col":1,"line":64}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ActionsExample = () => {\n    const thumbnailGenerator = (file: FileData & { delay: number }) => {\n        return new Promise((resolve) => {\n            // Delay loading by `file.delay` seconds to simulate thumb generation.\n            setTimeout(() => resolve(\'./Lenna.png\'), file.delay * 1000);\n        });\n    };\n\n    const folderChain = [{ id: \'gBt4z3\', name: \'My Pictures\', isDir: true }];\n    const files: FileData[] = [];\n    for (let i = 0; i < 20; ++i) {\n        const delay = i * 2;\n        files.push({\n            id: `image-${i}`,\n            name: `Delay - ${delay} seconds.jpg`,\n            delay: delay,\n        });\n    }\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div className="live-example" style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                thumbnailGenerator={thumbnailGenerator} // <----\n                enableDragAndDrop={true}\n                onFileAction={handleFileAction}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n',locationsMap:{"1-file-browser-basics-file-thumbnails--actions-example":{startLoc:{col:30,line:35},endLoc:{col:1,line:72},startBody:{col:30,line:35},endBody:{col:1,line:72}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport Promise from 'bluebird';\nimport {\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileData,\n    FileList,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './06-Thumbnails.md';\n\n\nexport default {\n    title: '1 File Browser basics|File thumbnails',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ActionsExample = () => {\n    const thumbnailGenerator = (file: FileData & { delay: number }) => {\n        return new Promise((resolve) => {\n            // Delay loading by `file.delay` seconds to simulate thumb generation.\n            setTimeout(() => resolve('./Lenna.png'), file.delay * 1000);\n        });\n    };\n\n    const folderChain = [{ id: 'gBt4z3', name: 'My Pictures', isDir: true }];\n    const files: FileData[] = [];\n    for (let i = 0; i < 20; ++i) {\n        const delay = i * 2;\n        files.push({\n            id: `image-${i}`,\n            name: `Delay - ${delay} seconds.jpg`,\n            delay: delay,\n        });\n    }\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                thumbnailGenerator={thumbnailGenerator} // <----\n                enableDragAndDrop={true}\n                onFileAction={handleFileAction}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"1-file-browser-basics-file-thumbnails--actions-example":{startLoc:{col:30,line:27},endLoc:{col:1,line:64},startBody:{col:30,line:27},endBody:{col:1,line:64}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"File thumbnails, woo!\n"})),_parameters)};var _06_Thumbnails_stories_ActionsExample=function ActionsExample(){for(var files=[],i=0;i<20;++i){var delay=2*i;files.push({id:"image-".concat(i),name:"Delay - ".concat(delay," seconds.jpg"),delay:delay})}return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"live-example",style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.b,{files:files,folderChain:[{id:"gBt4z3",name:"My Pictures",isDir:!0}],thumbnailGenerator:function thumbnailGenerator(file){return new bluebird_default.a((function(resolve){setTimeout((function(){return resolve("./Lenna.png")}),1e3*file.delay)}))},enableDragAndDrop:!0,onFileAction:function handleFileAction(action,data){Object(story_helpers.b)({action:action,data:data})}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,null)))};_06_Thumbnails_stories_ActionsExample.displayName="ActionsExample"},764:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"DragNDropExample",(function(){return _07_Drag_n_drop_stories_DragNDropExample}));__webpack_require__(30),__webpack_require__(65);var _parameters,src=__webpack_require__(26),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"1 File Browser basics|Enabling drag & drop",parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './07-Drag-n-drop.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Enabling drag & drop',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const DragNDropExample = () => {\\n    const folderChain = [\\n        { id: 'gBt4z3', name: 'My Documents', isDir: true },\\n        { id: 'gM5tTe', name: 'Other', isDir: true },\\n    ];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'yt43Ax', name: 'SCP-3930 Photos', isDir: true },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div className=\\\"live-example\\\" style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"1-file-browser-basics-enabling-drag-drop--drag-n-drop-example\":{\"startLoc\":{\"col\":32,\"line\":19},\"endLoc\":{\"col\":1,\"line\":46},\"startBody\":{\"col\":32,\"line\":19},\"endBody\":{\"col\":1,\"line\":46}}};\n    \nimport 'chonky/style/main.css';\n\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './07-Drag-n-drop.md';\n\n\nexport default {\n    title: '1 File Browser basics|Enabling drag & drop',\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './07-Drag-n-drop.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Enabling drag & drop',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const DragNDropExample = () => {\\n    const folderChain = [\\n        { id: 'gBt4z3', name: 'My Documents', isDir: true },\\n        { id: 'gM5tTe', name: 'Other', isDir: true },\\n    ];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'yt43Ax', name: 'SCP-3930 Photos', isDir: true },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div className=\\\"live-example\\\" style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"1-file-browser-basics-enabling-drag-drop--drag-n-drop-example\":{\"startLoc\":{\"col\":32,\"line\":19},\"endLoc\":{\"col\":1,\"line\":46},\"startBody\":{\"col\":32,\"line\":19},\"endBody\":{\"col\":1,\"line\":46}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const DragNDropExample = () => {\n    const folderChain = [\n        { id: 'gBt4z3', name: 'My Documents', isDir: true },\n        { id: 'gM5tTe', name: 'Other', isDir: true },\n    ];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'yt43Ax', name: 'SCP-3930 Photos', isDir: true },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"1-file-browser-basics-enabling-drag-drop--drag-n-drop-example":{startLoc:{col:32,line:27},endLoc:{col:1,line:54},startBody:{col:32,line:27},endBody:{col:1,line:54}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './07-Drag-n-drop.md';\n\n\nexport default {\n    title: '1 File Browser basics|Enabling drag & drop',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const DragNDropExample = () => {\n    const folderChain = [\n        { id: 'gBt4z3', name: 'My Documents', isDir: true },\n        { id: 'gM5tTe', name: 'Other', isDir: true },\n    ];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'yt43Ax', name: 'SCP-3930 Photos', isDir: true },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"1-file-browser-basics-enabling-drag-drop--drag-n-drop-example":{startLoc:{col:32,line:19},endLoc:{col:1,line:46},startBody:{col:32,line:19},endBody:{col:1,line:46}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"You might notice that drag & drop does not work out-of-the-box in Chonky. This is\nbecause Chonky uses [react-dnd](https://react-dnd.github.io/react-dnd/) library to\nhandle drag & drop, which is not turned by default.\n\nTo enable drag & drop, you will need to wrap your application root with the\n`<DndProvider>` component from react-dnd:\n\n```tsx\nimport React, { ReactDOM } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nReactDOM.render(\n    <DndProvider backend={HTML5Backend}>\n        <App />\n    </DndProvider>,\n    document.getElementById('app')\n);\n```\n\nNext, enable drag & drop in your `<FileBrowser>`:\n\n```tsx\n<FileBrowser\n    files={files}\n    enableDragAndDrop={true} // <----\n>\n    <FileToolbar />\n    <FileList />\n</FileBrowser>\n```\n\nOnce you do this, drag & drop should start working in all Chonky instances. FYI, you\ndon't have to use `HTML5Backend`, you can replace it with any backend you want. Consult\n[react-dnd docs](https://react-dnd.github.io/react-dnd/docs/overview) for details.\n"})),_parameters)};var _07_Drag_n_drop_stories_DragNDropExample=function DragNDropExample(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"live-example",style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.b,{files:[{id:"mHe4A1",name:"Meaning of life.txt",size:31415},{id:"yt43Ax",name:"SCP-3930 Photos",isDir:!0}],folderChain:[{id:"gBt4z3",name:"My Documents",isDir:!0},{id:"gM5tTe",name:"Other",isDir:!0}],onFileAction:function handleFileAction(action,data){Object(story_helpers.b)({action:action,data:data})},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,null)))};_07_Drag_n_drop_stories_DragNDropExample.displayName="DragNDropExample"},765:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"InvalidPropsExample",(function(){return _01_Invalid_props_stories_InvalidPropsExample}));__webpack_require__(30);var _parameters,delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),src=(__webpack_require__(65),__webpack_require__(26)),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"2 File Browser examples|Passing invalid props",parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import React from 'react';\\n\\nimport 'chonky/style/main.css';\\nimport { FileBrowser, FileList, FileToolbar } from 'chonky';\\n\\nimport { createDocsObject } from '../story-helpers';\\n\\n// @ts-ignore\\n\\nimport markdown from './01-Invalid-props.md';\\n\\n\\nexport default {\\n    title: '2 File Browser examples|Passing invalid props',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const InvalidPropsExample = () => {\\n    const badFiles = [\\n        12312, // Not an object or `null`!\\n        {}, // Missing all required fields!\\n        { id: '2xf4' }, // Missing some required fields!\\n        { id: '2xf4', name: 'Some other file!' }, // Duplicate ID!\\n\\n        { id: 'xbAr', name: 'Good file.txt' }, // Good file!\\n    ];\\n    const badFolderChain = [\\n        12312, // Not an object or `null`!\\n        { id: 'bRyH', name: 'Good folder', isDir: true },\\n        { id: 'bMgR', name: 'Good folder #2', isDir: true },\\n    ];\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            {/* @ts-ignore */}\\n            <FileBrowser files={badFiles} folderChain={badFolderChain}>\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"2-file-browser-examples-passing-invalid-props--invalid-props-example\":{\"startLoc\":{\"col\":35,\"line\":20},\"endLoc\":{\"col\":1,\"line\":44},\"startBody\":{\"col\":35,\"line\":20},\"endBody\":{\"col\":1,\"line\":44}}};\n    \nimport React from 'react';\n\nimport 'chonky/style/main.css';\nimport { FileBrowser, FileList, FileToolbar } from 'chonky';\n\nimport { createDocsObject } from '../story-helpers';\n\n// @ts-ignore\n\nimport markdown from './01-Invalid-props.md';\n\n\nexport default {\n    title: '2 File Browser examples|Passing invalid props',\n    parameters: {\"storySource\":{\"source\":\"import React from 'react';\\n\\nimport 'chonky/style/main.css';\\nimport { FileBrowser, FileList, FileToolbar } from 'chonky';\\n\\nimport { createDocsObject } from '../story-helpers';\\n\\n// @ts-ignore\\n\\nimport markdown from './01-Invalid-props.md';\\n\\n\\nexport default {\\n    title: '2 File Browser examples|Passing invalid props',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const InvalidPropsExample = () => {\\n    const badFiles = [\\n        12312, // Not an object or `null`!\\n        {}, // Missing all required fields!\\n        { id: '2xf4' }, // Missing some required fields!\\n        { id: '2xf4', name: 'Some other file!' }, // Duplicate ID!\\n\\n        { id: 'xbAr', name: 'Good file.txt' }, // Good file!\\n    ];\\n    const badFolderChain = [\\n        12312, // Not an object or `null`!\\n        { id: 'bRyH', name: 'Good folder', isDir: true },\\n        { id: 'bMgR', name: 'Good folder #2', isDir: true },\\n    ];\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            {/* @ts-ignore */}\\n            <FileBrowser files={badFiles} folderChain={badFolderChain}>\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"2-file-browser-examples-passing-invalid-props--invalid-props-example\":{\"startLoc\":{\"col\":35,\"line\":20},\"endLoc\":{\"col\":1,\"line\":44},\"startBody\":{\"col\":35,\"line\":20},\"endBody\":{\"col\":1,\"line\":44}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const InvalidPropsExample = () => {\n    const badFiles = [\n        12312, // Not an object or `null`!\n        {}, // Missing all required fields!\n        { id: '2xf4' }, // Missing some required fields!\n        { id: '2xf4', name: 'Some other file!' }, // Duplicate ID!\n\n        { id: 'xbAr', name: 'Good file.txt' }, // Good file!\n    ];\n    const badFolderChain = [\n        12312, // Not an object or `null`!\n        { id: 'bRyH', name: 'Good folder', isDir: true },\n        { id: 'bMgR', name: 'Good folder #2', isDir: true },\n    ];\n\n    return (\n        <div style={{ height: 500 }}>\n            {/* @ts-ignore */}\n            <FileBrowser files={badFiles} folderChain={badFolderChain}>\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"2-file-browser-examples-passing-invalid-props--invalid-props-example":{startLoc:{col:35,line:28},endLoc:{col:1,line:52},startBody:{col:35,line:28},endBody:{col:1,line:52}}}}},_defineProperty(_parameters,"storySource",{source:"import React from 'react';\n\nimport 'chonky/style/main.css';\nimport { FileBrowser, FileList, FileToolbar } from 'chonky';\n\nimport { createDocsObject } from '../story-helpers';\n\n// @ts-ignore\n\nimport markdown from './01-Invalid-props.md';\n\n\nexport default {\n    title: '2 File Browser examples|Passing invalid props',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const InvalidPropsExample = () => {\n    const badFiles = [\n        12312, // Not an object or `null`!\n        {}, // Missing all required fields!\n        { id: '2xf4' }, // Missing some required fields!\n        { id: '2xf4', name: 'Some other file!' }, // Duplicate ID!\n\n        { id: 'xbAr', name: 'Good file.txt' }, // Good file!\n    ];\n    const badFolderChain = [\n        12312, // Not an object or `null`!\n        { id: 'bRyH', name: 'Good folder', isDir: true },\n        { id: 'bMgR', name: 'Good folder #2', isDir: true },\n    ];\n\n    return (\n        <div style={{ height: 500 }}>\n            {/* @ts-ignore */}\n            <FileBrowser files={badFiles} folderChain={badFolderChain}>\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"2-file-browser-examples-passing-invalid-props--invalid-props-example":{startLoc:{col:35,line:20},endLoc:{col:1,line:44},startBody:{col:35,line:20},endBody:{col:1,line:44}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"Where possible, Chonky tries to report errors when they arise. For example,\n`FileBrowser` component expects its `files` prop to be an array. If you pass some\ninvalid value instead, e.g. `null`, you will see an error component being rendered\ninstead of the file browser. Same error will also be logged to console.\n"})),_parameters)};var _01_Invalid_props_stories_InvalidPropsExample=function InvalidPropsExample(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.b,{files:[12312,{},{id:"2xf4"},{id:"2xf4",name:"Some other file!"},{id:"xbAr",name:"Good file.txt"}],folderChain:[12312,{id:"bRyH",name:"Good folder",isDir:!0},{id:"bMgR",name:"Good folder #2",isDir:!0}]},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,null)))};_01_Invalid_props_stories_InvalidPropsExample.displayName="InvalidPropsExample"},766:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"VirtualizationExample",(function(){return _02_Virtualization_stories_VirtualizationExample}));__webpack_require__(30);var _parameters,delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),src=(__webpack_require__(65),__webpack_require__(26)),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"2 File Browser examples|Virtualization with 10,000 files",parameters:(_parameters={storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import React from \'react\';\\n\\nimport \'chonky/style/main.css\';\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from \'chonky\';\\n\\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\\n\\n// @ts-ignore\\n\\nimport markdown from \'./02-Virtualization.md\';\\n\\n\\nexport default {\\n    title: \'2 File Browser examples|Virtualization with 10,000 files\',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const VirtualizationExample = () => {\\n    const files = [];\\n\\n    for (let i = 0; i < 10000; ++i) {\\n        files.push({\\n            id: `file-${i}`,\\n            name: i ? `Chrome (${i}).exe` : \'Chrome.exe\',\\n        });\\n    }\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"2-file-browser-examples-virtualization-with-10-000-files--virtualization-example":{"startLoc":{"col":37,"line":20},"endLoc":{"col":1,"line":46},"startBody":{"col":37,"line":20},"endBody":{"col":1,"line":46}}};\n    \nimport React from \'react\';\n\nimport \'chonky/style/main.css\';\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from \'chonky\';\n\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\n\n// @ts-ignore\n\nimport markdown from \'./02-Virtualization.md\';\n\n\nexport default {\n    title: \'2 File Browser examples|Virtualization with 10,000 files\',\n    parameters: {"storySource":{"source":"import React from \'react\';\\n\\nimport \'chonky/style/main.css\';\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from \'chonky\';\\n\\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\\n\\n// @ts-ignore\\n\\nimport markdown from \'./02-Virtualization.md\';\\n\\n\\nexport default {\\n    title: \'2 File Browser examples|Virtualization with 10,000 files\',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const VirtualizationExample = () => {\\n    const files = [];\\n\\n    for (let i = 0; i < 10000; ++i) {\\n        files.push({\\n            id: `file-${i}`,\\n            name: i ? `Chrome (${i}).exe` : \'Chrome.exe\',\\n        });\\n    }\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n","locationsMap":{"2-file-browser-examples-virtualization-with-10-000-files--virtualization-example":{"startLoc":{"col":37,"line":20},"endLoc":{"col":1,"line":46},"startBody":{"col":37,"line":20},"endBody":{"col":1,"line":46}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const VirtualizationExample = () => {\n    const files = [];\n\n    for (let i = 0; i < 10000; ++i) {\n        files.push({\n            id: `file-${i}`,\n            name: i ? `Chrome (${i}).exe` : \'Chrome.exe\',\n        });\n    }\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n',locationsMap:{"2-file-browser-examples-virtualization-with-10-000-files--virtualization-example":{startLoc:{col:37,line:28},endLoc:{col:1,line:54},startBody:{col:37,line:28},endBody:{col:1,line:54}}}}},_defineProperty(_parameters,"storySource",{source:"import React from 'react';\n\nimport 'chonky/style/main.css';\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n\n// @ts-ignore\n\nimport markdown from './02-Virtualization.md';\n\n\nexport default {\n    title: '2 File Browser examples|Virtualization with 10,000 files',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const VirtualizationExample = () => {\n    const files = [];\n\n    for (let i = 0; i < 10000; ++i) {\n        files.push({\n            id: `file-${i}`,\n            name: i ? `Chrome (${i}).exe` : 'Chrome.exe',\n        });\n    }\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"2-file-browser-examples-virtualization-with-10-000-files--virtualization-example":{startLoc:{col:37,line:20},endLoc:{col:1,line:46},startBody:{col:37,line:20},endBody:{col:1,line:46}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"This component uses [`react-virtualized`](https://bvaughn.github.io/react-virtualized/).\n"})),_parameters)};var _02_Virtualization_stories_VirtualizationExample=function VirtualizationExample(){for(var files=[],i=0;i<1e4;++i)files.push({id:"file-".concat(i),name:i?"Chrome (".concat(i,").exe"):"Chrome.exe"});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.b,{files:files,onFileAction:function handleFileAction(action,data){Object(story_helpers.b)({action:action,data:data})},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,null)))};_02_Virtualization_stories_VirtualizationExample.displayName="VirtualizationExample"},77:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("WNMA")},79:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("1IsZ")},8:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("+KXO")},80:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("vbDw")},81:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("y2Ah")},91:function(module,exports){},93:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return MDXContent}));__webpack_require__(3),__webpack_require__(14),__webpack_require__(5),__webpack_require__(8),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(2);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",{style:{textAlign:"center"}},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{src:"./Chonky_clear.png",alt:"Chonky logo",style:{width:500}}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",{href:"https://www.npmjs.com/package/chonky",target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{alt:"NPM package",src:"https://img.shields.io/npm/v/chonky.svg"})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",{href:"https://tldrlegal.com/license/mit-license",style:{marginLeft:5},target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{alt:"MIT license",src:"https://img.shields.io/npm/l/chonky"})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",{href:"https://www.npmjs.com/package/chonky",style:{marginLeft:5},target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{alt:"NPM downloads",src:"https://img.shields.io/npm/dt/chonky"})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",{href:"https://github.com/TimboKZ/Chonky",style:{marginLeft:5},target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{alt:"GitHub stars",src:"https://img.shields.io/github/stars/TimboKZ/Chonky"})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",{href:"https://discord.gg/HT4ttdQ",style:{marginLeft:5},target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{alt:"Chat on Discord",src:"https://img.shields.io/discord/696033621986770957?label=Chat%20on%20Discord"})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null)),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",{class:"unstable-warning"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("blockquote",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",{parentName:"blockquote"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("strong",{parentName:"p"},"Stop right there!")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",{parentName:"blockquote"},"You are reading the documentation for an ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("strong",{parentName:"p"},"unreleased")," 1.x\nversion of Chonky. The API described here can change - it will not be\nfrozen until the official 1.x release."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",{parentName:"blockquote"},"If you need to use Chonky right now, use the 0.x version from the\n",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"p"},{href:"https://timbokz.github.io/Chonky/",target:"_blank",rel:"nofollow noopener noreferrer"}),"Documentation Index"),"."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",{parentName:"blockquote"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("strong",{parentName:"p"},"Want to request a feature for 1.x or report a 1.x issue?")," Post it in\n",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"p"},{href:"https://github.com/TimboKZ/Chonky/issues",target:"_blank",rel:"nofollow noopener noreferrer"}),"Chonky GitHub issues"),"."))))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0},95:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("JtPf")},96:function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)("ax0f")}},[[354,1,2]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3QvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJzdG9yeWJvb2tfZG9jc19kbGxcIiIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3V0aWwtZGVwcmVjYXRlL2Jyb3dzZXIuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zZWFyY2guanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuZGVzY3JpcHRpb24uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vd2VicGFjay9idWlsZGluL21vZHVsZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuY3JlYXRlLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5jb25zdHJ1Y3QuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmlzLWFycmF5LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZi5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5ldmVyeS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc2V0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3FzL2xpYi9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL3dlYi51cmwuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3Byb2Nlc3MvYnJvd3Nlci5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvbWUuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLmJpbmQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLm1hcC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9AZW1vdGlvbi9jb3JlL2Rpc3QvY29yZS5icm93c2VyLmVzbS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmNvbnN0cnVjdG9yLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuaXRlcmF0b3IuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbWFya2Rvd24tdG8tanN4L2Rpc3QvZXNtLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLXN0cmluZy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWwvZmlsZS1oZWxwZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWwvc2VsZWN0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2V4dGVybmFsL0Nob25reUljb24udHN4Iiwid2VicGFjazovLy8uL3NyYy91dGlsL2NvbnRleHQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWwvbG9nZ2VyLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlsL3ZhbGlkYXRpb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWwvZmlsZS1hY3Rpb25zLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlsL3NwZWNpYWwtYWN0aW9ucy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbC9jb25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaW50ZXJuYWwvQ29udGV4dENvbXBvc2VyLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbC9maWxlLWljb24taGVscGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2V4dGVybmFsL1RleHRQbGFjZWhvbGRlci50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaW50ZXJuYWwvRmlsZVRodW1ibmFpbC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaW50ZXJuYWwvQmFzZUZpbGVFbnRyeS50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaW50ZXJuYWwvQmFzZUZpbGVFbnRyeS1ob29rcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaW50ZXJuYWwvQ2xpY2thYmxlRmlsZUVudHJ5LWhvb2tzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9pbnRlcm5hbC9DbGlja2FibGVXcmFwcGVyLWhvb2tzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9pbnRlcm5hbC9DbGlja2FibGVXcmFwcGVyLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9pbnRlcm5hbC9DbGlja2FibGVGaWxlRW50cnkudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2ludGVybmFsL0RuREZpbGVFbnRyeS50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaW50ZXJuYWwvRG5ERmlsZUxpc3REcmFnTGF5ZXIudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2ludGVybmFsL0Vycm9yTWVzc2FnZS50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZXh0ZXJuYWwvRmlsZUJyb3dzZXIudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2V4dGVybmFsL1Rvb2xiYXJCdXR0b24taG9va3MudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2V4dGVybmFsL1Rvb2xiYXJCdXR0b24udHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2V4dGVybmFsL0ZpbGVUb29sYmFyLWhvb2tzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9leHRlcm5hbC9Ub29sYmFyQnV0dG9uR3JvdXAudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2V4dGVybmFsL0ZpbGVUb29sYmFyLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9leHRlcm5hbC9GaWxlTGlzdC12aXJ0dWFsaXphdGlvbi50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZXh0ZXJuYWwvRmlsZUxpc3QudHN4Iiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9kZXNjcmlwdG9ycy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy8uL3N0b3JpZXMvc3RvcnktaGVscGVycy50c3giLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy9VbnN0YWJsZS13YXJuaW5nLm1kIiwid2VicGFjazovLy8uL3N0b3JpZXMvTGl2ZS1leGFtcGxlcy5tZCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vZ2xvYmFsL3dpbmRvdy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9haXJibmItanMtc2hpbXMvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvZ2xvYmFsLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL3BhdGguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vLi8uc3Rvcnlib29rL3N0b3J5Ym9vay1pbml0LWZyYW1ld29yay1lbnRyeS5qcyIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL3dlYi5pbW1lZGlhdGUuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLndlYWstbWFwLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2xvZGFzaC9tZXJnZVdpdGguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvcnQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi90ZWxlanNvbi9kaXN0L2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3BvbGlzaGVkL2Rpc3QvcG9saXNoZWQuZXNtLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL0BlbW90aW9uL3N0eWxlZC9kaXN0L3N0eWxlZC5icm93c2VyLmVzbS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9lbW90aW9uLXRoZW1pbmcvZGlzdC9lbW90aW9uLXRoZW1pbmcuYnJvd3Nlci5lc20uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vQGVtb3Rpb24vaXMtcHJvcC12YWxpZC9kaXN0L2lzLXByb3AtdmFsaWQuYnJvd3Nlci5lc20uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vZGVlcC1vYmplY3QtZGlmZi9kaXN0L2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3JlYWN0LXN5bnRheC1oaWdobGlnaHRlci9kaXN0L2Nqcy9sYW5ndWFnZXMvcHJpc20vanN4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3JlYWN0LXN5bnRheC1oaWdobGlnaHRlci9kaXN0L2Nqcy9sYW5ndWFnZXMvcHJpc20vYmFzaC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXIvZGlzdC9janMvbGFuZ3VhZ2VzL3ByaXNtL2Nzcy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXIvZGlzdC9janMvbGFuZ3VhZ2VzL3ByaXNtL2pzb24uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvY2pzL2xhbmd1YWdlcy9wcmlzbS9tYXJrdXAuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvY2pzL2xhbmd1YWdlcy9wcmlzbS9tYXJrZG93bi5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXIvZGlzdC9janMvbGFuZ3VhZ2VzL3ByaXNtL3lhbWwuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvY2pzL2xhbmd1YWdlcy9wcmlzbS90c3guanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvY2pzL2xhbmd1YWdlcy9wcmlzbS90eXBlc2NyaXB0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3JlYWN0LXN5bnRheC1oaWdobGlnaHRlci9kaXN0L2VzbS9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXIvZGlzdC9janMvY3JlYXRlLWVsZW1lbnQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vb3ZlcmxheXNjcm9sbGJhcnMvanMvT3ZlcmxheVNjcm9sbGJhcnMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zbWFsbC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC10ZXh0YXJlYS1hdXRvc2l6ZS9kaXN0L3JlYWN0LXRleHRhcmVhLWF1dG9zaXplLmJyb3dzZXIuZXNtLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3JlYWN0LXBvcHBlci10b29sdGlwL2Rpc3QvZXNtL3JlYWN0LXBvcHBlci10b29sdGlwLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3QtY29sb3IvbGliL2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5wYXJzZS1pbnQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5pcy1uYW4uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnBhcnNlLWZsb2F0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vZmFzdC1kZWVwLWVxdWFsL2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuYXNzaWduLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmZyZWV6ZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9vYmplY3QtYXNzaWduL2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbG9kYXNoL19hcnJheU1hcC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2xvZGFzaC9fYmFzZUl0ZXJhdGVlLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2xvZGFzaC9fYmFzZVBpY2tCeS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9sb2Rhc2gvX2dldEFsbEtleXNJbi5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC1pcy9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi90cy1kZWRlbnQvZGlzdC9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvbm90LWEtcmVnZXhwLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL2NvcnJlY3QtaXMtcmVnZXhwLWxvZ2ljLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL2lzLXB1cmUuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbG9kYXNoL2lzUGxhaW5PYmplY3QuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbG9kYXNoL2lzRnVuY3Rpb24uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbG9kYXNoL2lzU3RyaW5nLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0L3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0LmVzLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3Byb3AtdHlwZXMvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vQHN0b3J5Ym9vay9jc2YvZGlzdC9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy8uLy5zdG9yeWJvb2svcHJldmlldy5qcy1nZW5lcmF0ZWQtY29uZmlnLWVudHJ5LmpzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9mYWlscy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9vd24ta2V5cy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHkuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vLi8uc3Rvcnlib29rL2dlbmVyYXRlZC1zdG9yaWVzLWVudHJ5LmpzIiwid2VicGFjazovLy9cXC4pLioiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wMC1XZWxjb21lLzAxLVdlbGNvbWUuc3Rvcmllcy5tZHgiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wMC1XZWxjb21lLzAyLVBoaWxvc29waHkuc3Rvcmllcy5tZHgiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wMC1XZWxjb21lLzAzLUluc3RhbGxhdGlvbi5zdG9yaWVzLm1keCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vLy4vc3R5bGUvbWFpbi5jc3MiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXJlZHVjZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC11c2VzLXRvLWxlbmd0aC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmJvbGQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vd2VicGFjay9idWlsZGluL2dsb2JhbC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy8uL3N0eWxlL21haW4uY3NzPzdjYmIiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL3RvLWludGVnZXIuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5lbnRyaWVzLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3QtZG9tL2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy9zdG9yeWJvb2suY3NzPzdhMGMiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy9zdG9yeWJvb2suY3NzIiwid2VicGFjazovLy8uL3N0b3JpZXMvMDMtQVBJLVJlZmVyZW5jZS8wMi1CdWlsdC1pbi1hY3Rpb25zLnN0b3JpZXMubWR4Iiwid2VicGFjazovLy8uL3N0b3JpZXMvMDEtRmlsZS1Ccm93c2VyLWJhc2ljcy8wMS1Db21wb25lbnQtaGllcmFyY2h5LnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3N0b3JpZXMvMDEtRmlsZS1Ccm93c2VyLWJhc2ljcy8wMS1Db21wb25lbnQtaGllcmFyY2h5Lm1kIiwid2VicGFjazovLy8uL3N0b3JpZXMvMDEtRmlsZS1Ccm93c2VyLWJhc2ljcy8wMi1EaXNwbGF5aW5nLWZpbGVzLnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3N0b3JpZXMvMDEtRmlsZS1Ccm93c2VyLWJhc2ljcy8wMi1EaXNwbGF5aW5nLWZpbGVzLm1kIiwid2VicGFjazovLy8uL3N0b3JpZXMvMDEtRmlsZS1Ccm93c2VyLWJhc2ljcy8wMy1TcGVjaWZ5aW5nLWZvbGRlci5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzLzAxLUZpbGUtQnJvd3Nlci1iYXNpY3MvMDMtU3BlY2lmeWluZy1mb2xkZXIubWQiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wMS1GaWxlLUJyb3dzZXItYmFzaWNzLzA0LUFjdGlvbnMuc3Rvcmllcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wMS1GaWxlLUJyb3dzZXItYmFzaWNzLzA0LUFjdGlvbnMubWQiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wMS1GaWxlLUJyb3dzZXItYmFzaWNzLzA1LUN1c3RvbS1hY3Rpb25zLnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3N0b3JpZXMvMDEtRmlsZS1Ccm93c2VyLWJhc2ljcy8wNS1DdXN0b20tYWN0aW9ucy5tZCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzLzAxLUZpbGUtQnJvd3Nlci1iYXNpY3MvMDYtVGh1bWJuYWlscy5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzLzAxLUZpbGUtQnJvd3Nlci1iYXNpY3MvMDYtVGh1bWJuYWlscy5tZCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzLzAxLUZpbGUtQnJvd3Nlci1iYXNpY3MvMDctRHJhZy1uLWRyb3Auc3Rvcmllcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wMS1GaWxlLUJyb3dzZXItYmFzaWNzLzA3LURyYWctbi1kcm9wLm1kIiwid2VicGFjazovLy8uL3N0b3JpZXMvMDItRmlsZS1Ccm93c2VyLWFkdmFuY2VkLzAxLUludmFsaWQtcHJvcHMuc3Rvcmllcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wMi1GaWxlLUJyb3dzZXItYWR2YW5jZWQvMDEtSW52YWxpZC1wcm9wcy5tZCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzLzAyLUZpbGUtQnJvd3Nlci1hZHZhbmNlZC8wMi1WaXJ0dWFsaXphdGlvbi5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzLzAyLUZpbGUtQnJvd3Nlci1hZHZhbmNlZC8wMi1WaXJ0dWFsaXphdGlvbi5tZCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5tYXRjaC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnZhbHVlcy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbWVtb2l6ZXJpZmljL21lbW9pemVyaWZpYy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9sb2Rhc2gvbWFwVmFsdWVzLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy9DaG9ua3ktaGVhZGVyLm1keCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJzdG9yeWJvb2tfZG9jc19kbGwiLCJGaWxlSGVscGVyIiwiZmlsZSIsIm9wZW5hYmxlIiwic2VsZWN0YWJsZSIsImRyYWdnYWJsZSIsImlzRGlyIiwiZHJvcHBhYmxlIiwiQ2hvbmt5SWNvbk5hbWUiLCJ1c2VTZWxlY3Rpb25Nb2RpZmllcnMiLCJkaXNhYmxlU2VsZWN0aW9uIiwic2V0U2VsZWN0aW9uIiwiZGVwcyIsInNlbGVjdEZpbGVzIiwidXNlQ2FsbGJhY2siLCJmaWxlSWRzIiwicmVzZXQiLCJzZWxlY3Rpb24iLCJuZXdTZWxlY3Rpb24iLCJ0b2dnbGVTZWxlY3Rpb24iLCJmaWxlSWQiLCJleGNsdXNpdmUiLCJjbGVhclNlbGVjdGlvbiIsIlNlbGVjdGlvbkhlbHBlciIsImZpbGVzIiwic2VsZWN0ZWRGaWxlcyIsImZpbHRlciIsImlzU2VsZWN0YWJsZSIsImlkIiwiZmlsdGVycyIsInJlZHVjZSIsInByZXZGaWxlcyIsImdldFNlbGVjdGVkRmlsZXMiLCJsZW5ndGgiLCJTZWxlY3Rpb25VdGlsIiwidGhpcyIsInByb3RlY3RlZFVwZGF0ZSIsImdldFNlbGVjdGlvblNpemUiLCJpc1NlbGVjdGVkIiwiVXBkYXRlYWJsZVNlbGVjdGlvblV0aWwiLCJDaG9ua3lGaWxlc0NvbnRleHQiLCJSZWFjdCIsImNyZWF0ZUNvbnRleHQiLCJDaG9ua3lGb2xkZXJDaGFpbkNvbnRleHQiLCJDaG9ua3lTZWxlY3Rpb25Db250ZXh0IiwiQ2hvbmt5U2VsZWN0aW9uU2l6ZUNvbnRleHQiLCJDaG9ua3lTZWxlY3Rpb25VdGlsQ29udGV4dCIsIkNob25reUZpbGVBY3Rpb25zQ29udGV4dCIsIkNob25reURpc3BhdGNoRmlsZUFjdGlvbkNvbnRleHQiLCJDaG9ua3lEaXNwYXRjaFNwZWNpYWxBY3Rpb25Db250ZXh0IiwiQ2hvbmt5VGh1bWJuYWlsR2VuZXJhdG9yQ29udGV4dCIsIkNob25reURvdWJsZUNsaWNrRGVsYXlDb250ZXh0IiwiQ2hvbmt5RGlzYWJsZVNlbGVjdGlvbkNvbnRleHQiLCJDaG9ua3lFbmFibGVEcmFnQW5kRHJvcENvbnRleHQiLCJJY29uTWFwIiwibG9hZGluZyIsImZhQ2lyY2xlTm90Y2giLCJkbmREcmFnZ2luZyIsImZhRmlzdFJhaXNlZCIsImRuZENhbkRyb3AiLCJmYUFycm93RG93biIsImRuZENhbm5vdERyb3AiLCJmYVRpbWVzIiwib3BlbkZpbGVzIiwiZmFIYW5kUG9pbnRlciIsIm9wZW5QYXJlbnRGb2xkZXIiLCJmYUxldmVsVXBBbHQiLCJzZWFyY2giLCJmYVNlYXJjaCIsImNoZWNrQWN0aXZlIiwiZmFDaGVja0NpcmNsZSIsImNoZWNrSW5hY3RpdmUiLCJmYUNpcmNsZSIsImRlc2MiLCJhc2MiLCJmYUFycm93VXAiLCJsaXN0IiwiZmFMaXN0IiwiZm9sZGVyIiwiZmFGb2xkZXIiLCJmb2xkZXJDcmVhdGUiLCJmYUZvbGRlclBsdXMiLCJmb2xkZXJPcGVuIiwiZmFGb2xkZXJPcGVuIiwic21hbGxUaHVtYm5haWwiLCJmYVRoIiwibGFyZ2VUaHVtYm5haWwiLCJmYVRoTGFyZ2UiLCJmb2xkZXJDaGFpblNlcGFyYXRvciIsImZhQ2hldnJvblJpZ2h0IiwiZHJvcGRvd24iLCJmYUNoZXZyb25Eb3duIiwiZG93bmxvYWQiLCJmYURvd25sb2FkIiwidXBsb2FkIiwiZmFVcGxvYWQiLCJ0cmFzaCIsImZhVHJhc2giLCJmYWxsYmFja0ljb24iLCJmYUV4Y2xhbWF0aW9uVHJpYW5nbGUiLCJzeW1saW5rIiwiZmFFeHRlcm5hbExpbmtBbHQiLCJoaWRkZW4iLCJmYUV5ZVNsYXNoIiwiZmFGaWxlIiwibGljZW5zZSIsImZhQmFsYW5jZVNjYWxlIiwiY29kZSIsImZhRmlsZUNvZGUiLCJjb25maWciLCJmYUNvZ3MiLCJtb2RlbCIsImZhQ3ViZXMiLCJkYXRhYmFzZSIsImZhRGF0YWJhc2UiLCJ0ZXh0IiwiZmFGaWxlQWx0IiwiYXJjaGl2ZSIsImZhRmlsZUFyY2hpdmUiLCJjc3YiLCJmYUZpbGVFeGNlbCIsImltYWdlIiwiZmFGaWxlSW1hZ2UiLCJwZGYiLCJmYUZpbGVQZGYiLCJ3b3JkIiwiZmFGaWxlV29yZCIsInZpZGVvIiwiZmFGaWxtIiwiaW5mbyIsImZhSW5mb0NpcmNsZSIsImtleSIsImZhS2V5IiwibG9jayIsImZhTG9jayIsIm11c2ljIiwiZmFNdXNpYyIsImZsYXNoIiwiZmFSdW5uaW5nIiwidGVybWluYWwiLCJmYVRlcm1pbmFsIiwiYXV0aG9ycyIsImZhVXNlcnMiLCJhZG9iZSIsImZhQWRvYmUiLCJnaXQiLCJmYUdpdEFsdCIsImxpbnV4IiwiZmFMaW51eCIsIndpbmRvd3MiLCJmYVdpbmRvd3MiLCJub2RlanMiLCJmYU5vZGVKcyIsInBocCIsImZhUGhwIiwicHl0aG9uIiwiZmFQeXRob24iLCJ1YnVudHUiLCJmYVVidW50dSIsIkNob25reUljb25GQSIsIm1lbW8iLCJwcm9wcyIsImljb24iLCJmYVByb3BzIiwiTG9nZ2VyIiwiYXJncyIsImNvbnNvbGUiLCJlcnJvciIsImJ1bGxldHMiLCJqb2luIiwiaXNQbGFpbk9iamVjdCIsInZhbHVlIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwidXNlQ2xlYW5GaWxlQXJyYXkiLCJmaWxlQXJyYXkiLCJhbGxvd051bGwiLCJjbGVhbkZpbGVBcnJheSIsIndhcm5pbmdNZXNzYWdlIiwid2FybmluZ0J1bGxldHMiLCJBcnJheSIsImlzQXJyYXkiLCJpbmRpY2VzVG9CZVJlbW92ZWQiLCJTZXQiLCJzZWVuSWRzIiwiZHVwbGljYXRlSWRTZXQiLCJtaXNzaW5nSWRJbmRpY2VzIiwibWlzc2luZ05hbWVJbmRpY2VzIiwiaW52YWxpZFR5cGVJbmRpY2VzIiwiaSIsImFkZCIsIm5hbWUiLCJwdXNoIiwic2l6ZSIsImZyb20iLCJpbmRleCIsImhhcyIsIlNwZWNpYWxBY3Rpb24iLCJDaG9ua3lBY3Rpb25zIiwiTW92ZUZpbGVzVG8iLCJEdXBsaWNhdGVGaWxlc1RvIiwiT3BlblBhcmVudEZvbGRlciIsInJlcXVpcmVzUGFyZW50Rm9sZGVyIiwiaG90a2V5cyIsInRvb2xiYXJCdXR0b24iLCJ0b29sdGlwIiwiaWNvbk9ubHkiLCJPcGVuRmlsZXMiLCJyZXF1aXJlc1NlbGVjdGlvbiIsImZpbGVGaWx0ZXIiLCJpc09wZW5hYmxlIiwiZ3JvdXAiLCJTZWFyY2giLCJDb3B5RmlsZXMiLCJDcmVhdGVGb2xkZXIiLCJVcGxvYWRGaWxlcyIsIkRvd25sb2FkRmlsZXMiLCJEZWZhdWx0QWN0aW9ucyIsIklOVEVOVElPTkFMX0VNUFRZX0RFUFMiLCJ1c2VTcGVjaWFsRmlsZUFjdGlvbkhhbmRsZXJNYXAiLCJzZWxlY3Rpb25VdGlsIiwiZGlzcGF0Y2hGaWxlQWN0aW9uIiwic3BlY2lhbEFjdGlvbkhhbmRsZXJNYXBEZXBzIiwidXNlTWVtbyIsIk1vdXNlQ2xpY2tGaWxlIiwiZGF0YSIsImNsaWNrVHlwZSIsImFjdGlvbk5hbWUiLCJ0YXJnZXQiLCJjdHJsS2V5IiwiS2V5Ym9hcmRDbGlja0ZpbGUiLCJlbnRlcktleSIsInNwYWNlS2V5IiwiRHJhZ05Ecm9wU3RhcnQiLCJkcmFnU291cmNlIiwiRHJhZ05Ecm9wRW5kIiwiZHJvcFRhcmdldCIsImlzRHJhZ2dhYmxlIiwiZHJvcHBlZEZpbGVzIiwiZHJvcEVmZmVjdCIsIkNvbnRleHRDb21wb3NlciIsInByb3ZpZGVycyIsImNoaWxkcmVuIiwiRnJhZ21lbnQiLCJyZWR1Y2VSaWdodCIsImFjYyIsIlByb3ZpZGVyIiwicHJvdmlkZXIiLCJnZXRJY29uVHJpZSIsIm1lbW9pemUiLCJjb2xvdXJJbmRleCIsIkljb25zVG9FeHRlbnNpb25zIiwiSW1hZ2VFeHRlbnNpb25zIiwiVmlkZW9FeHRlbnNpb25zIiwiQXVkaW9FeHRlbnNpb25zIiwiZXhhY3RUcmllIiwiRXhhY3RUcmllIiwiZXh0ZW5zaW9ucyIsImljb25EYXRhIiwiY29sb3JDb2RlIiwiQ29sb3JzTGlnaHQiLCJwdXQiLCJDb2xvcnNEYXJrIiwiVGV4dFBsYWNlaG9sZGVyIiwicGxhY2Vob2xkZXJMZW5ndGgiLCJnZXRSYW5kb21JbnQiLCJtaW4iLCJtYXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJtaW5MZW5ndGgiLCJtYXhMZW5ndGgiLCJ3aGl0ZXNwYWNlIiwicmVwZWF0IiwiY2xhc3NOYW1lIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJGaWxlVGh1bWJuYWlsIiwidGh1bWJuYWlsVXJsIiwidGh1bWJuYWlsU3R5bGUiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJjIiwic3R5bGUiLCJCYXNlRmlsZUVudHJ5Iiwic2VsZWN0ZWQiLCJkbmRJc0RyYWdnaW5nIiwiZG5kSXNPdmVyIiwidXNlU3RhdGUiLCJzZXRUaHVtYm5haWxVcmwiLCJ0aHVtYm5haWxMb2FkaW5nIiwidXNlVGh1bWJuYWlsVXJsIiwic2V0VGh1bWJuYWlsTG9hZGluZyIsInRodW1ibmFpbEdlbmVyYXRvciIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJsb2FkaW5nQ2FuY2VsbGVkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwibWVzc2FnZSIsInVzZUljb25EYXRhIiwibWF0Y2giLCJnZXRXaXRoQ2hlY2twb2ludHMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJpY29uU3BpbiIsImRuZEljb24iLCJ1c2VEbmRJY29uIiwiaXNEcmFnZ2luZyIsImlzT3ZlciIsImNhbkRyb3AiLCJzcGluIiwidXNlRmlsZUNsaWNrSGFuZGxlcnMiLCJkaXNwYXRjaFNwZWNpYWxBY3Rpb24iLCJoYW5kbGVyRGVwcyIsIm9uTW91c2VDbGljayIsImV2ZW50IiwiYWx0S2V5Iiwic2hpZnRLZXkiLCJvbktleWJvYXJkQ2xpY2siLCJvblNpbmdsZUNsaWNrIiwib25Eb3VibGVDbGljayIsInVzZUtleURvd25IYW5kbGVyIiwia2V5Ym9hcmRDbGlja0V2ZW50IiwibmF0aXZlRXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsIkNsaWNrYWJsZVdyYXBwZXIiLCJXcmFwcGVyVGFnIiwid3JhcHBlclRhZyIsInBhc3N0aHJvdWdoUHJvcHMiLCJoYW5kbGVDbGljayIsInVzZUNsaWNrSGFuZGxlciIsImRvdWJsZUNsaWNrRGVsYXkiLCJjb3VudGVyIiwiY2xpY2tDb3VudCIsImNsaWNrVGltZW91dCIsIm1vdXNlQ2xpY2tFdmVudCIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJoYW5kbGVLZXlEb3duIiwiY29tcFByb3BzIiwib25DbGljayIsIm9uS2V5RG93biIsInRhYkluZGV4IiwibWVyZ2VkUHJvcHMiLCJDbGlja2FibGVGaWxlRW50cnkiLCJmaWxlQ2xpY2tIYW5kbGVycyIsIndyYXBwZXJQcm9wcyIsImlzQ2xpY2thYmxlIiwidW5kZWZpbmVkIiwiRG5ERmlsZUVudHJ5IiwiY2FuRHJhZyIsIm9uRHJhZ1N0YXJ0Iiwib25EcmFnRW5kIiwiaXRlbSIsIm1vbml0b3IiLCJkcm9wUmVzdWx0IiwiZ2V0RHJvcFJlc3VsdCIsIm9uRHJvcCIsImlzU2FtZUZpbGUiLCJpc0Ryb3BwYWJsZSIsInVzZURyYWciLCJ0eXBlIiwiYmVnaW4iLCJlbmQiLCJjb2xsZWN0IiwiZHJhZyIsInByZXZpZXciLCJ1c2VEcm9wIiwiYWNjZXB0IiwiZHJvcCIsImdldEVtcHR5SW1hZ2UiLCJjYXB0dXJlRHJhZ2dpbmdTdGF0ZSIsInJlZiIsImxheWVyU3R5bGVzIiwicG9zaXRpb24iLCJwb2ludGVyRXZlbnRzIiwiekluZGV4IiwibGVmdCIsInRvcCIsIndpZHRoIiwiaGVpZ2h0IiwiZ2V0SXRlbVN0eWxlcyIsImluaXRpYWxDdXJzb3JPZmZzZXQiLCJpbml0aWFsRmlsZU9mZnNldCIsImN1cnJlbnRGaWxlT2Zmc2V0IiwiZGlzcGxheSIsIngiLCJ5IiwidHJhbnNmb3JtIiwiV2Via2l0VHJhbnNmb3JtIiwiRG5ERmlsZUxpc3REcmFnTGF5ZXIiLCJzZWxlY3Rpb25TaXplIiwidXNlRHJhZ0xheWVyIiwiZ2V0SXRlbSIsIml0ZW1UeXBlIiwiZ2V0SXRlbVR5cGUiLCJnZXRJbml0aWFsQ2xpZW50T2Zmc2V0IiwiZ2V0SW5pdGlhbFNvdXJjZUNsaWVudE9mZnNldCIsImdldFNvdXJjZUNsaWVudE9mZnNldCIsInJlbmRlckl0ZW0iLCJFcnJvck1lc3NhZ2UiLCJidWxsZXRMaXN0IiwiaXRlbXMiLCJGaWxlQnJvd3NlciIsImZvbGRlckNoYWluIiwiZmlsZUFjdGlvbnMiLCJvbkZpbGVBY3Rpb24iLCJlbmFibGVEcmFnQW5kRHJvcCIsInZhbGlkYXRpb25SZXN1bHQiLCJ1c2VGaWxlQnJvd3NlclZhbGlkYXRpb24iLCJmaWxlc0RlcHMiLCJlcnJvck1lc3NhZ2VzIiwiY2xlYW5GaWxlc1Jlc3VsdCIsImVycm9yTWVzc2FnZSIsImZvcm1hdEJ1bGxldHMiLCJjbGVhbkZpbGVzIiwiZmlsZXNFcnJvck1lc3NhZ2VzIiwiZm9sZGVyQ2hhaW5EZXBzIiwiY2xlYW5Gb2xkZXJDaGFpblJlc3VsdCIsImNsZWFuRm9sZGVyQ2hhaW4iLCJmb2xkZXJDaGFpbkVycm9yTWVzc2FnZXMiLCJzb3J0ZWRGaWxlcyIsInVzZVNlbGVjdGlvbiIsInNlbGVjdGlvblV0aWxSZWYiLCJ1c2VSZWYiLCJjdXJyZW50IiwidXBkYXRlIiwiZXh0ZW5kZWRGaWxlQWN0aW9ucyIsInVzZUZpbGVBY3Rpb25EaXNwYXRjaGVyIiwiYWN0aW9uTWFwRGVwcyIsImFjdGlvbk1hcCIsImZpbGVBY3Rpb24iLCJkaXNwYXRjaEZpbGVBY3Rpb25EZXBzIiwiYWN0aW9uRGF0YSIsImFjdGlvbiIsImlzRnVuY3Rpb24iLCJjb25zdHJ1Y3RvciIsImFwcGx5IiwidXNlU3BlY2lhbEFjdGlvbkRpc3BhdGNoZXIiLCJzcGVjaWFsU3RhdGVEZXBzIiwic3BlY2lhbFN0YXRlIiwic3BlY2lhbEFjdGlvbkhhbmRsZXJNYXAiLCJkaXNwYXRjaFNwZWNpYWxBY3Rpb25EZXBzIiwiaGFuZGxlciIsImNvbnRleHRzIiwiY29udGV4dCIsImNvbnRleHRQcm92aWRlcnMiLCJtYXAiLCJ1c2VTbWFydFRvb2xiYXJCdXR0b25Qcm9wcyIsImRpc3BhdGNoQ2hvbmt5QWN0aW9uIiwicGFyZW50Rm9sZGVyIiwiYWN0aW9uU2VsZWN0aW9uU2l6ZSIsImFjdGlvbkZpbGVzIiwiYWN0aW9uVGFyZ2V0IiwiZGlzYWJsZWQiLCJUb29sYmFyQnV0dG9uIiwidGl0bGUiLCJTbWFydFRvb2xiYXJCdXR0b24iLCJidXR0b24iLCJ1c2VGb2xkZXJDaGFpbkNvbXBvbmVudCIsImNvbXBzIiwiaXNMYXN0IiwiaiIsIlRhZ1RvVXNlIiwidXNlRmlsZUFjdGlvbkJ1dHRvbnMiLCJvcGVuUGFyZW50Rm9sZGVyQnV0dG9uIiwiYnV0dG9uQ29tcG9uZW50cyIsImNvbXBvbmVudCIsIlRvb2xiYXJCdXR0b25Hcm91cCIsIkZpbGVUb29sYmFyIiwiZm9sZGVyQ2hhaW5Db21wIiwidXNlVG9vbGJhckJ1dHRvbkdyb3VwcyIsImJ1dHRvbkdyb3VwcyIsImJ1dHRvbkdyb3VwTWFwIiwib3BlblBhcmVudEZvbGRlckJ1dHRvbkdyb3VwIiwic2VhcmNoQnV0dG9uR3JvdXAiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJhcnJheU9mIiwib25lT2ZUeXBlIiwic3RyaW5nIiwiaXNSZXF1aXJlZCIsIm9uZU9mIiwiU21hbGxUaHVtYnNTaXplIiwidXNlRW50cnlSZW5kZXJlciIsInZpcnR1YWxLZXkiLCJwYXJlbnQiLCJndXR0ZXJTaXplIiwibGFzdFJvdyIsImxhc3RDb2x1bW4iLCJlbnRyeVByb3BzIiwiZGlzcGxheUluZGV4IiwiZmlsZUVudHJ5Q29tcG9uZW50Iiwibm9Db250ZW50UmVuZGVyZXIiLCJwbGFjZWhvbGRlclByb3BzIiwidXNlR3JpZFJlbmRlcmVyIiwiZW50cnlSZW5kZXJlciIsInRodW1ic0dyaWRSZWYiLCJmaWxsUGFyZW50Q29udGFpbmVyIiwiY29sdW1uQ291bnQiLCJlbnRyeVNpemUiLCJpc01vYmlsZSIsImlzTW9iaWxlRGV2aWNlIiwid2luZG93Iiwib3JpZW50YXRpb24iLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpbmRleE9mIiwiZ3V0dGVyIiwic2Nyb2xsYmFyIiwiY29sdW1uQ291bnRGbG9hdCIsInJvd0NvdW50IiwiY2VpbCIsIm1pbkhlaWdodCIsImNlbGxSZW5kZXJlciIsInJvd0luZGV4IiwiY29sdW1uSW5kZXgiLCJjb2x1bW5XaWR0aCIsImdldENvbFdpZHRoIiwicm93SGVpZ2h0IiwiZ2V0Um93SGVpZ2h0Iiwib3ZlcnNjYW5Sb3dDb3VudCIsImF1dG9IZWlnaHQiLCJGaWxlTGlzdCIsImdyaWRSZW5kZXJlciIsImRpc2FibGVIZWlnaHQiLCJjcmVhdGVEb2NzT2JqZWN0IiwicGFyYW1zIiwibWFya2Rvd24iLCJwYWdlIiwiRG5kUHJvdmlkZXIiLCJiYWNrZW5kIiwiSFRNTDVCYWNrZW5kIiwicGFyc2VNYXJrZG93biIsIkN1c3RvbVByaW1hcnkiLCJzdG9yeSIsIkRvY3NDb250ZXh0IiwiY29tcG9uZW50U3RvcmllcyIsImdldERvY3NTdG9yaWVzIiwiZmluZCIsInMiLCJleHBhbmRlZCIsIm9jY3VycmVuY2VzIiwiZ2V0SW5kaWNlc09mIiwibGluZUVuZCIsImxpbmUiLCJzdWJzdHJpbmciLCJ0cmltIiwiZXhlYyIsImxhbmd1YWdlIiwibWFya2Rvd25FbmQiLCJjb2RlU3RhcnQiLCJjb2RlRW5kIiwibWFya2Rvd25TdGFydCIsImNvbXBvbmVudHMiLCJzdGFydCIsIm1kS2V5IiwibWRTbGljZSIsImNvZGVTbGljZSIsImNvZGVLZXkiLCJuZWVkbGUiLCJoYXlzdGFjayIsInNlYXJjaFN0ckxlbiIsInN0YXJ0SW5kZXgiLCJpbmRpY2VzIiwic2hvd0FjdGlvbk5vdGlmaWNhdGlvbiIsInRleHRQYXJ0cyIsImZpbGVDb21wcyIsImYiLCJmaWxlQ291bnQiLCJmaWxlVGl0bGUiLCJOb3R5IiwidGhlbWUiLCJ0aW1lb3V0Iiwic2hvdyIsIl9jbGllbnRBcGkiLCJyZXF1aXJlIiwiX2NsaWVudExvZ2dlciIsIl9jb25maWdGaWxlbmFtZSIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJzb3VyY2UiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiYXJnVHlwZXMiLCJsb2dnZXIiLCJ3YXJuIiwiSlNPTiIsInN0cmluZ2lmeSIsImRlY29yYXRvcnMiLCJkZWNvcmF0b3IiLCJhZGREZWNvcmF0b3IiLCJwYXJhbWV0ZXJzIiwiZ2xvYmFsQXJncyIsImdsb2JhbEFyZ1R5cGVzIiwiYWRkUGFyYW1ldGVycyIsImFyZ1R5cGVzRW5oYW5jZXJzIiwiZW5oYW5jZXIiLCJhZGRBcmdUeXBlc0VuaGFuY2VyIiwiX2ZyYW1ld29yayIsIl9TdG9yeWJvb2tQcmVzZXJ2ZURlY29yYXRvcnMiLCJjb25maWd1cmUiLCJ3ZWJwYWNrQ29udGV4dCIsInJlcSIsIndlYnBhY2tDb250ZXh0UmVzb2x2ZSIsIm8iLCJlIiwiRXJyb3IiLCJ3ZWJwYWNrQ29udGV4dEtleXMiLCJNZXRhIiwibWFrZVNob3J0Y29kZSIsIk1EWERlZmF1bHRTaG9ydGNvZGUiLCJsYXlvdXRQcm9wcyIsIk1EWENvbnRlbnQiLCJtZHhUeXBlIiwicGFyZW50TmFtZSIsImlzTURYQ29tcG9uZW50IiwiX19wYWdlIiwiZG9jc09ubHkiLCJjb21wb25lbnRNZXRhIiwiaW5jbHVkZVN0b3JpZXMiLCJtZHhTdG9yeU5hbWVUb0tleSIsImRvY3MiLCJtZHhDb21wb25lbnRNZXRhIiwiX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIiwiYXBpIiwiY29udGVudCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0Iiwib3B0aW9ucyIsImxvY2FscyIsIkNvbXBvbmVudEhpZXJhcmNoeUV4YW1wbGUiLCJGaWxlc0FycmF5RXhhbXBsZSIsImlzSGlkZGVuIiwiY2hpbGRyZW5JZHMiLCJpc1N5bWxpbmsiLCJleHQiLCJtb2REYXRlIiwiRGF0ZSIsImhhbmRsZUZpbGVBY3Rpb24iLCJGb2xkZXJDaGFpbkV4YW1wbGUiLCJBY3Rpb25zRXhhbXBsZSIsImFjdGlvbkNvdW50Iiwic2V0QWN0aW9uQ291bnQiLCJsYXN0QWN0aW9uIiwic2V0TGFzdEFjdGlvbiIsImxvZyIsImZpbGVOYW1lcyIsImNvdW50IiwiQ3VzdG9tQWN0aW9uc0V4YW1wbGUiLCJkZWxheSIsIkRyYWdORHJvcEV4YW1wbGUiLCJJbnZhbGlkUHJvcHNFeGFtcGxlIiwiVmlydHVhbGl6YXRpb25FeGFtcGxlIiwidGV4dEFsaWduIiwic3JjIiwiYWx0IiwiaHJlZiIsIm1hcmdpbkxlZnQiLCJjbGFzcyJdLCJtYXBwaW5ncyI6Ijt3R0FBQUEsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsMkJDQTFDRixPQUFPQyxRQUFVRSxvQixnRENBakJILE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsZ0RDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsZ0RDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGdEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsZ0RDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGdEQ0ExQ0Ys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QUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE9BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE9BQ0EsTUFDQSxNQUNBLE9BQ0EsT0FDQSxNQUNBLE9BQ0EsTUFDQSxPQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsT0FFU0UsZ0JBQTRCLENBQ3JDLE9BQ0EsTUFDQSxNQUNBLE1BQ0EsT0FDQSxPQUNBLEtBQ0EsTUFDQSxNQUNBLE1BQ0EsUUFDQSxZQUNBLFlBQ0EsWUFDQSxNQUNBLE9BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE9BQ0EsTUFDQSxNQUNBLE9BQ0EsTUFDQSxNQUNBLE9BQ0EsT0FDQSxNQUNBLE1BQ0EsTUFDQSxLQUNBLEtBQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsT0FDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE9BQ0EsTUFDQSxNQUVTTSxZQUF3QixDQUNqQyxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxXQUVTRSxXQUF1QixDQUNoQyxPQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxV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Q0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsK0NDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxnRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxnRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGdEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxnRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLCtDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsZ0RDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxnRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsZ0RDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGdEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxp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R0UsS0FBSyx1Q0FBdUN0WSxNQUFPLENBQ2xEdVksV0FBWSxHQUNYOWIsT0FBTyxVQUNSLDhEQUFLNGIsSUFBSSxnQkFBZ0JELElBQUksMENBRWpDLDREQUFHRSxLQUFLLG9DQUFvQ3RZLE1BQU8sQ0FDL0N1WSxXQUFZLEdBQ1g5YixPQUFPLFVBQ1IsOERBQUs0YixJQUFJLGVBQWVELElBQUksd0RBRWhDLDREQUFHRSxLQUFLLDZCQUE2QnRZLE1BQU8sQ0FDeEN1WSxXQUFZLEdBQ1g5YixPQUFPLFVBQ1IsOERBQUs0YixJQUFJLGtCQUFrQkQsSUFBSSxpRkFFbkMsa0VBQ0Esa0VBQ0EsbUVBRUEsOERBQUtJLE1BQU0sb0JBQ1QseUVBQ0UsNERBQUc1QyxXQUFXLGNBQWEsaUVBQVFBLFdBQVcsS0FBbkIsc0JBQzNCLDREQUFHQSxXQUFXLGNBQWQsNENBQXdFLGlFQUFRQSxXQUFXLEtBQW5CLGNBQXhFLHVIQUdBLDREQUFHQSxXQUFXLGNBQWQsc0VBQ04scUVBQUdBLFdBQVcsS0FBUSxDQUNaLEtBQVEsb0NBQ1IsT0FBVSxTQUNWLElBQU8saUNBSGpCLHVCQURNLEtBTUEsNERBQUdBLFdBQVcsY0FBYSxpRUFBUUEsV0FBVyxLQUFuQiw0REFBM0IsZ0JBQ04scUVBQUdBLFdBQVcsS0FBUSxDQUNaLEtBQVEsMkNBQ1IsT0FBVSxTQUNWLElBQU8saUNBSGpCLHdCQURNLFFBbkRnQkYsVyx5QkErRHhCQSxXQUFXRyxnQkFBaUIsRyxnREMvRTVCN25CLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGdEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFUiLCJmaWxlIjoibWFpbi44MWNkN2U5YTBmNzM4MTlmZmQwNC5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIkVSa1BcIik7IiwibW9kdWxlLmV4cG9ydHMgPSBzdG9yeWJvb2tfZG9jc19kbGw7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCI3eC9DXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiNW80M1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIlAyYUdcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJMSk9yXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwidFZxblwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcImpRL3lcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJhWVNyXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiL1Fvc1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcImo0U2ZcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJMVXdkXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiT1phSlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcInBsQndcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJzVkZiXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwidnJSZlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIk0rL0ZcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCIzeVlNXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiRGZoTVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIkxxTHNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJwdTNvXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiODdpZlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIjZVN2lcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJDbTRvXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwibFRFTFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIkY2M2lcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJHRnB0XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwia1l4UFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIjJHOVNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCIra1k3XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiRForY1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIjVCWWJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCI1ODc4XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwibTlMUFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcImwxQzJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJpS0UrXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiYUxnb1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIkNVTVFcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJjQVJPXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiM3ZvSFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIno4NElcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJjd3czXCIpOyIsImltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAndHNkZWYnO1xuXG5pbXBvcnQgeyBGaWxlRGF0YSB9IGZyb20gJy4uL3R5cGVkZWYnO1xuXG5leHBvcnQgY2xhc3MgRmlsZUhlbHBlciB7XG4gICAgcHVibGljIHN0YXRpYyBpc0NsaWNrYWJsZShmaWxlOiBOdWxsYWJsZTxGaWxlRGF0YT4pOiBmaWxlIGlzIEZpbGVEYXRhIHtcbiAgICAgICAgLy8gQ2xpY2thYmxlIGJ5IGRlZmF1bHRcbiAgICAgICAgLy8gVE9ETzogUGVyaGFwcyBhZGQgYGNsaWNrYWJsZWAgdG8gYEZpbGVEYXRhYC4uLiBQcm9iYWJseSBub3QuXG4gICAgICAgIHJldHVybiAhIWZpbGU7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBpc09wZW5hYmxlKGZpbGU6IE51bGxhYmxlPEZpbGVEYXRhPik6IGZpbGUgaXMgRmlsZURhdGEge1xuICAgICAgICAvLyBPcGVuYWJsZSBieSBkZWZhdWx0XG4gICAgICAgIHJldHVybiAhIWZpbGUgJiYgZmlsZS5vcGVuYWJsZSAhPT0gZmFsc2U7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBpc1NlbGVjdGFibGUoZmlsZTogTnVsbGFibGU8RmlsZURhdGE+KTogZmlsZSBpcyBGaWxlRGF0YSB7XG4gICAgICAgIC8vIFNlbGVjdGFibGUgYnkgZGVmYXVsdFxuICAgICAgICByZXR1cm4gISFmaWxlICYmIGZpbGUuc2VsZWN0YWJsZSAhPT0gZmFsc2U7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBpc0RyYWdnYWJsZShmaWxlOiBOdWxsYWJsZTxGaWxlRGF0YT4pOiBmaWxlIGlzIEZpbGVEYXRhIHtcbiAgICAgICAgLy8gRmlsZSAmIGZvbGRlcnMgYXJlIGRyYWdnYWJsZSBieSBkZWZhdWx0LCBgbnVsbGAgaXMgbm90XG4gICAgICAgIHJldHVybiAhIWZpbGUgJiYgZmlsZS5kcmFnZ2FibGUgIT09IGZhbHNlO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgaXNEcm9wcGFibGUoZmlsZTogTnVsbGFibGU8RmlsZURhdGE+KTogZmlsZSBpcyBGaWxlRGF0YSB7XG4gICAgICAgIC8vIEZvbGRlcnMgYXJlIGRyb3BwYWJsZSBieSBkZWZhdWx0LCBmaWxlcyBhcmUgbm90XG4gICAgICAgIGlmICghZmlsZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoZmlsZS5pc0RpciAmJiBmaWxlLmRyb3BwYWJsZSAhPT0gZmFsc2UpIHJldHVybiB0cnVlO1xuICAgICAgICByZXR1cm4gZmlsZS5kcm9wcGFibGUgPT09IHRydWU7XG4gICAgfVxufVxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBOdWxsYWJsZSB9IGZyb20gJ3RzZGVmJztcblxuaW1wb3J0IHtcbiAgICBGaWxlQXJyYXksXG4gICAgRmlsZURhdGEsXG4gICAgRmlsZUZpbHRlcixcbiAgICBGaWxlU2VsZWN0aW9uLFxuICAgIFJlYWRvbmx5RmlsZUFycmF5LFxufSBmcm9tICcuLi90eXBlZGVmJztcbmltcG9ydCB7IEZpbGVIZWxwZXIgfSBmcm9tICcuL2ZpbGUtaGVscGVyJztcblxuZXhwb3J0IGNvbnN0IHVzZVNlbGVjdGlvbiA9IChmaWxlczogRmlsZUFycmF5LCBkaXNhYmxlU2VsZWN0aW9uOiBib29sZWFuKSA9PiB7XG4gICAgLy8gQ3JlYXRlIFJlYWN0LW1hbmFnZWQgc3RhdGUgZm9yIGNvbXBvbmVudHMgdGhhdCBuZWVkIHRvIHJlLXJlbmRlciBvbiBzdGF0ZSBjaGFuZ2UuXG4gICAgY29uc3QgW3NlbGVjdGlvbiwgc2V0U2VsZWN0aW9uXSA9IHVzZVN0YXRlPEZpbGVTZWxlY3Rpb24+KHt9KTtcblxuICAgIC8vIFByZS1jb21wdXRlIHNlbGVjdGlvbiBzaXplIGZvciBjb21wb25lbnRzIHRoYXQgYXJlIG9ubHkgaW50ZXJlc3RlZCBpbiB0aGVcbiAgICAvLyBudW1iZXIgb2Ygc2VsZWN0ZWQgZmlsZXMgYnV0IG5vdCB0aGUgYWN0dWFsIGZpbGVzXG4gICAgY29uc3Qgc2VsZWN0aW9uU2l6ZSA9IHVzZU1lbW8oXG4gICAgICAgICgpID0+IFNlbGVjdGlvbkhlbHBlci5nZXRTZWxlY3Rpb25TaXplKGZpbGVzLCBzZWxlY3Rpb24pLFxuICAgICAgICBbZmlsZXMsIHNlbGVjdGlvbl1cbiAgICApO1xuXG4gICAgLy8gQ3JlYXRlIGNhbGxiYWNrcyBmb3IgdXBkYXRpbmcgc2VsZWN0aW9uLiBUaGVzZSB3aWxsIHVwZGF0ZSB0aGUgUmVhY3RcbiAgICAvLyBzdGF0ZSBgc2VsZWN0aW9uYCwgY2F1c2luZyByZS1yZW5kZXJzLiBUaGlzIGlzIGludGVudGlvbmFsLlxuICAgIGNvbnN0IHsgc2VsZWN0RmlsZXMsIHRvZ2dsZVNlbGVjdGlvbiwgY2xlYXJTZWxlY3Rpb24gfSA9IHVzZVNlbGVjdGlvbk1vZGlmaWVycyhcbiAgICAgICAgZGlzYWJsZVNlbGVjdGlvbixcbiAgICAgICAgc2V0U2VsZWN0aW9uXG4gICAgKTtcblxuICAgIC8vIENyZWF0ZSBzZWxlY3Rpb24gcmVmIGZvciBmdW5jdGlvbnMgdGhhdCBuZWVkIHNlbGVjdGlvbiBidXQgc2hvdWxkbid0IHJlLXJlbmRlclxuICAgIGNvbnN0IHNlbGVjdGlvblV0aWxSZWYgPSB1c2VSZWY8U2VsZWN0aW9uVXRpbD4oXG4gICAgICAgIG5ldyBVcGRhdGVhYmxlU2VsZWN0aW9uVXRpbChmaWxlcywgc2VsZWN0aW9uKVxuICAgICk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgKHNlbGVjdGlvblV0aWxSZWYuY3VycmVudCBhcyBVcGRhdGVhYmxlU2VsZWN0aW9uVXRpbCkudXBkYXRlKGZpbGVzLCBzZWxlY3Rpb24pO1xuICAgIH0sIFtmaWxlcywgc2VsZWN0aW9uXSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBzZWxlY3Rpb24sXG4gICAgICAgIHNlbGVjdGlvblNpemUsXG4gICAgICAgIHNlbGVjdGlvblV0aWxSZWYsXG4gICAgICAgIHNlbGVjdEZpbGVzLFxuICAgICAgICB0b2dnbGVTZWxlY3Rpb24sXG4gICAgICAgIGNsZWFyU2VsZWN0aW9uLFxuICAgIH07XG59O1xuXG5jb25zdCB1c2VTZWxlY3Rpb25Nb2RpZmllcnMgPSAoXG4gICAgZGlzYWJsZVNlbGVjdGlvbjogYm9vbGVhbixcbiAgICBzZXRTZWxlY3Rpb246IFJlYWN0LkRpc3BhdGNoPFJlYWN0LlNldFN0YXRlQWN0aW9uPEZpbGVTZWxlY3Rpb24+PlxuKSA9PiB7XG4gICAgY29uc3QgZGVwcyA9IFtkaXNhYmxlU2VsZWN0aW9uLCBzZXRTZWxlY3Rpb25dO1xuICAgIGNvbnN0IHNlbGVjdEZpbGVzID0gdXNlQ2FsbGJhY2soKGZpbGVJZHM6IHN0cmluZ1tdLCByZXNldDogYm9vbGVhbiA9IHRydWUpID0+IHtcbiAgICAgICAgaWYgKGRpc2FibGVTZWxlY3Rpb24pIHJldHVybjtcblxuICAgICAgICBzZXRTZWxlY3Rpb24oKHNlbGVjdGlvbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3U2VsZWN0aW9uID0gcmVzZXQgPyB7fSA6IHsgLi4uc2VsZWN0aW9uIH07XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZpbGVJZCBvZiBmaWxlSWRzKSBuZXdTZWxlY3Rpb25bZmlsZUlkXSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gbmV3U2VsZWN0aW9uO1xuICAgICAgICB9KTtcbiAgICB9LCBkZXBzKTtcbiAgICBjb25zdCB0b2dnbGVTZWxlY3Rpb24gPSB1c2VDYWxsYmFjayhcbiAgICAgICAgKGZpbGVJZDogc3RyaW5nLCBleGNsdXNpdmU6IGJvb2xlYW4gPSBmYWxzZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGRpc2FibGVTZWxlY3Rpb24pIHJldHVybjtcblxuICAgICAgICAgICAgc2V0U2VsZWN0aW9uKChzZWxlY3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdTZWxlY3Rpb24gPSBleGNsdXNpdmUgPyB7fSA6IHsgLi4uc2VsZWN0aW9uIH07XG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGlvbltmaWxlSWRdID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBuZXdTZWxlY3Rpb25bZmlsZUlkXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXdTZWxlY3Rpb25bZmlsZUlkXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXdTZWxlY3Rpb247XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVwc1xuICAgICk7XG4gICAgY29uc3QgY2xlYXJTZWxlY3Rpb24gPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIGlmIChkaXNhYmxlU2VsZWN0aW9uKSByZXR1cm47XG5cbiAgICAgICAgc2V0U2VsZWN0aW9uKHt9KTtcbiAgICB9LCBkZXBzKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHNlbGVjdEZpbGVzLFxuICAgICAgICB0b2dnbGVTZWxlY3Rpb24sXG4gICAgICAgIGNsZWFyU2VsZWN0aW9uLFxuICAgIH07XG59O1xuXG4vKipcbiAqIFRoaXMgaGVscGVyIHJlbGllcyBvbiB0aGUgYGZpbGVzYCBhbmQgYHNlbGVjdGlvbmAgb2JqZWN0cyB0byBiZSBwYXNzZWQgZnJvbSB0aGVcbiAqIG91dHNpZGUuIEl0IGlzIHNhZmUgdG8gdXNlIGluIFJlYWN0IGNvbXBvbmVudHMgYmVjYXVzZSBpdCBkb2Vzbid0IGhhdmUgYW55XG4gKiBpbnRlcm5hbCBzdGF0ZSwgYW5kIGFsbCBtZXRob2RzIGFyZSBzdGF0aWMuXG4gKi9cbmV4cG9ydCBjbGFzcyBTZWxlY3Rpb25IZWxwZXIge1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0U2VsZWN0ZWRGaWxlcyhcbiAgICAgICAgZmlsZXM6IFJlYWRvbmx5RmlsZUFycmF5LFxuICAgICAgICBzZWxlY3Rpb246IFJlYWRvbmx5PEZpbGVTZWxlY3Rpb24+LFxuICAgICAgICAuLi5maWx0ZXJzOiBGaWxlRmlsdGVyW11cbiAgICApOiBSZWFkb25seUFycmF5PFJlYWRvbmx5PEZpbGVEYXRhPj4ge1xuICAgICAgICBjb25zdCBzZWxlY3RlZEZpbGVzID0gZmlsZXMuZmlsdGVyKFxuICAgICAgICAgICAgKGZpbGUpID0+IEZpbGVIZWxwZXIuaXNTZWxlY3RhYmxlKGZpbGUpICYmIHNlbGVjdGlvbltmaWxlLmlkXSA9PT0gdHJ1ZVxuICAgICAgICApIGFzIEZpbGVEYXRhW107XG5cbiAgICAgICAgcmV0dXJuIGZpbHRlcnMucmVkdWNlKFxuICAgICAgICAgICAgKHByZXZGaWxlcywgZmlsdGVyKSA9PiBwcmV2RmlsZXMuZmlsdGVyKGZpbHRlciksXG4gICAgICAgICAgICBzZWxlY3RlZEZpbGVzXG4gICAgICAgICk7XG4gICAgfVxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0U2VsZWN0aW9uU2l6ZShcbiAgICAgICAgZmlsZXM6IFJlYWRvbmx5RmlsZUFycmF5LFxuICAgICAgICBzZWxlY3Rpb246IFJlYWRvbmx5PEZpbGVTZWxlY3Rpb24+LFxuICAgICAgICAuLi5maWx0ZXJzOiBGaWxlRmlsdGVyW11cbiAgICApOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gU2VsZWN0aW9uSGVscGVyLmdldFNlbGVjdGVkRmlsZXMoZmlsZXMsIHNlbGVjdGlvbiwgLi4uZmlsdGVycykubGVuZ3RoO1xuICAgIH1cbiAgICBwdWJsaWMgc3RhdGljIGlzU2VsZWN0ZWQoXG4gICAgICAgIHNlbGVjdGlvbjogUmVhZG9ubHk8RmlsZVNlbGVjdGlvbj4sXG4gICAgICAgIGZpbGU6IE51bGxhYmxlPFJlYWRvbmx5PEZpbGVEYXRhPj5cbiAgICApOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIEZpbGVIZWxwZXIuaXNTZWxlY3RhYmxlKGZpbGUpICYmIHNlbGVjdGlvbltmaWxlLmlkXSA9PT0gdHJ1ZTtcbiAgICB9XG59XG5cbi8qKlxuICogVGhpcyBgU2VsZWN0aW9uVXRpbGAgY29udGFpbnMgYW4gaW50ZXJuYWwgcmVmZXJlbmNlIHRvIGBmaWxlc2AgYW5kIGBzZWxlY3Rpb25gXG4gKiBvYmplY3RzLiBJdCBpcyBleHBvc2VkIHZpYSBhIFJlYWN0IGNvbnRleHQsIGFuZCBpcyBtZWFudCB0byBiZSB1c2VkIGluIGZ1bmN0aW9uc1xuICogdGhhdCBuZWVkIHRvIGFjY2VzcyBzZWxlY3Rpb24gV0lUSE9VVCB0cmlnZ2VyaW5nIHJlLXJlbmRlcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBTZWxlY3Rpb25VdGlsIHtcbiAgICBwcml2YXRlIGZpbGVzOiBGaWxlQXJyYXk7XG4gICAgcHJpdmF0ZSBzZWxlY3Rpb246IEZpbGVTZWxlY3Rpb247XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoZmlsZXM6IEZpbGVBcnJheSA9IFtdLCBzZWxlY3Rpb246IEZpbGVTZWxlY3Rpb24gPSB7fSkge1xuICAgICAgICB0aGlzLnByb3RlY3RlZFVwZGF0ZShmaWxlcywgc2VsZWN0aW9uKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgcHJvdGVjdGVkVXBkYXRlKGZpbGVzOiBGaWxlQXJyYXksIHNlbGVjdGlvbjogRmlsZVNlbGVjdGlvbikge1xuICAgICAgICB0aGlzLmZpbGVzID0gZmlsZXM7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uID0gc2VsZWN0aW9uO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTZWxlY3Rpb24oKTogUmVhZG9ubHk8RmlsZVNlbGVjdGlvbj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3Rpb247XG4gICAgfVxuICAgIHB1YmxpYyBnZXRTZWxlY3RlZEZpbGVzKFxuICAgICAgICAuLi5maWx0ZXJzOiBGaWxlRmlsdGVyW11cbiAgICApOiBSZWFkb25seUFycmF5PFJlYWRvbmx5PEZpbGVEYXRhPj4ge1xuICAgICAgICByZXR1cm4gU2VsZWN0aW9uSGVscGVyLmdldFNlbGVjdGVkRmlsZXModGhpcy5maWxlcywgdGhpcy5zZWxlY3Rpb24sIC4uLmZpbHRlcnMpO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0U2VsZWN0aW9uU2l6ZSguLi5maWx0ZXJzOiBGaWxlRmlsdGVyW10pOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gU2VsZWN0aW9uSGVscGVyLmdldFNlbGVjdGlvblNpemUodGhpcy5maWxlcywgdGhpcy5zZWxlY3Rpb24sIC4uLmZpbHRlcnMpO1xuICAgIH1cbiAgICBwdWJsaWMgaXNTZWxlY3RlZChmaWxlOiBOdWxsYWJsZTxGaWxlRGF0YT4pOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIFNlbGVjdGlvbkhlbHBlci5pc1NlbGVjdGVkKHRoaXMuc2VsZWN0aW9uLCBmaWxlKTtcbiAgICB9XG59XG5cbmNsYXNzIFVwZGF0ZWFibGVTZWxlY3Rpb25VdGlsIGV4dGVuZHMgU2VsZWN0aW9uVXRpbCB7XG4gICAgcHVibGljIHVwZGF0ZSguLi5hcmdzOiBQYXJhbWV0ZXJzPFNlbGVjdGlvblV0aWxbJ3Byb3RlY3RlZFVwZGF0ZSddPikge1xuICAgICAgICB0aGlzLnByb3RlY3RlZFVwZGF0ZSguLi5hcmdzKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBmYUFkb2JlIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtYnJhbmRzLXN2Zy1pY29ucy9mYUFkb2JlJztcbmltcG9ydCB7IGZhR2l0QWx0IH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtYnJhbmRzLXN2Zy1pY29ucy9mYUdpdEFsdCc7XG5pbXBvcnQgeyBmYUxpbnV4IH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtYnJhbmRzLXN2Zy1pY29ucy9mYUxpbnV4JztcbmltcG9ydCB7IGZhTm9kZUpzIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtYnJhbmRzLXN2Zy1pY29ucy9mYU5vZGVKcyc7XG5pbXBvcnQgeyBmYVBocCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLWJyYW5kcy1zdmctaWNvbnMvZmFQaHAnO1xuaW1wb3J0IHsgZmFQeXRob24gfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1icmFuZHMtc3ZnLWljb25zL2ZhUHl0aG9uJztcbmltcG9ydCB7IGZhVWJ1bnR1IH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtYnJhbmRzLXN2Zy1pY29ucy9mYVVidW50dSc7XG5pbXBvcnQgeyBmYVdpbmRvd3MgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1icmFuZHMtc3ZnLWljb25zL2ZhV2luZG93cyc7XG5pbXBvcnQgeyBmYUFycm93RG93biB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUFycm93RG93bic7XG5pbXBvcnQgeyBmYUFycm93VXAgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFBcnJvd1VwJztcbmltcG9ydCB7IGZhQmFsYW5jZVNjYWxlIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhQmFsYW5jZVNjYWxlJztcbmltcG9ydCB7IGZhQ2hlY2tDaXJjbGUgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFDaGVja0NpcmNsZSc7XG5pbXBvcnQgeyBmYUNoZXZyb25Eb3duIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhQ2hldnJvbkRvd24nO1xuaW1wb3J0IHsgZmFDaGV2cm9uUmlnaHQgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFDaGV2cm9uUmlnaHQnO1xuaW1wb3J0IHsgZmFDaXJjbGUgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFDaXJjbGUnO1xuaW1wb3J0IHsgZmFDaXJjbGVOb3RjaCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUNpcmNsZU5vdGNoJztcbmltcG9ydCB7IGZhQ29ncyB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUNvZ3MnO1xuaW1wb3J0IHsgZmFDdWJlcyB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUN1YmVzJztcbmltcG9ydCB7IGZhRGF0YWJhc2UgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFEYXRhYmFzZSc7XG5pbXBvcnQgeyBmYURvd25sb2FkIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRG93bmxvYWQnO1xuaW1wb3J0IHsgZmFFeGNsYW1hdGlvblRyaWFuZ2xlIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRXhjbGFtYXRpb25UcmlhbmdsZSc7XG5pbXBvcnQgeyBmYUV4dGVybmFsTGlua0FsdCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUV4dGVybmFsTGlua0FsdCc7XG5pbXBvcnQgeyBmYUV5ZVNsYXNoIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRXllU2xhc2gnO1xuaW1wb3J0IHsgZmFGaWxlIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRmlsZSc7XG5pbXBvcnQgeyBmYUZpbGVBbHQgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFGaWxlQWx0JztcbmltcG9ydCB7IGZhRmlsZUFyY2hpdmUgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFGaWxlQXJjaGl2ZSc7XG5pbXBvcnQgeyBmYUZpbGVDb2RlIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRmlsZUNvZGUnO1xuaW1wb3J0IHsgZmFGaWxlRXhjZWwgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFGaWxlRXhjZWwnO1xuaW1wb3J0IHsgZmFGaWxlSW1hZ2UgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFGaWxlSW1hZ2UnO1xuaW1wb3J0IHsgZmFGaWxlUGRmIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRmlsZVBkZic7XG5pbXBvcnQgeyBmYUZpbGVXb3JkIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRmlsZVdvcmQnO1xuaW1wb3J0IHsgZmFGaWxtIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRmlsbSc7XG5pbXBvcnQgeyBmYUZpc3RSYWlzZWQgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFGaXN0UmFpc2VkJztcbmltcG9ydCB7IGZhRm9sZGVyIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRm9sZGVyJztcbmltcG9ydCB7IGZhRm9sZGVyT3BlbiB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUZvbGRlck9wZW4nO1xuaW1wb3J0IHsgZmFGb2xkZXJQbHVzIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRm9sZGVyUGx1cyc7XG5pbXBvcnQgeyBmYUhhbmRQb2ludGVyIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhSGFuZFBvaW50ZXInO1xuaW1wb3J0IHsgZmFJbmZvQ2lyY2xlIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhSW5mb0NpcmNsZSc7XG5pbXBvcnQgeyBmYUtleSB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUtleSc7XG5pbXBvcnQgeyBmYUxldmVsVXBBbHQgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFMZXZlbFVwQWx0JztcbmltcG9ydCB7IGZhTGlzdCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUxpc3QnO1xuaW1wb3J0IHsgZmFMb2NrIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhTG9jayc7XG5pbXBvcnQgeyBmYU11c2ljIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhTXVzaWMnO1xuaW1wb3J0IHsgZmFSdW5uaW5nIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhUnVubmluZyc7XG5pbXBvcnQgeyBmYVNlYXJjaCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYVNlYXJjaCc7XG5pbXBvcnQgeyBmYVRlcm1pbmFsIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhVGVybWluYWwnO1xuaW1wb3J0IHsgZmFUaCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYVRoJztcbmltcG9ydCB7IGZhVGhMYXJnZSB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYVRoTGFyZ2UnO1xuaW1wb3J0IHsgZmFUaW1lcyB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYVRpbWVzJztcbmltcG9ydCB7IGZhVHJhc2ggfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFUcmFzaCc7XG5pbXBvcnQgeyBmYVVwbG9hZCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYVVwbG9hZCc7XG5pbXBvcnQgeyBmYVVzZXJzIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhVXNlcnMnO1xuaW1wb3J0IHsgRm9udEF3ZXNvbWVJY29uIH0gZnJvbSAnQGZvcnRhd2Vzb21lL3JlYWN0LWZvbnRhd2Vzb21lJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBlbnVtIENob25reUljb25OYW1lIHtcbiAgICAvLyBNaXNjXG4gICAgbG9hZGluZyA9ICdsb2FkaW5nJyxcblxuICAgIC8vIEZpbGUgQWN0aW9uczogRHJhZyAmIGRyb3BcbiAgICBkbmREcmFnZ2luZyA9ICdkbmREcmFnZ2luZycsXG4gICAgZG5kQ2FuRHJvcCA9ICdkbmRDYW5Ecm9wJyxcbiAgICBkbmRDYW5ub3REcm9wID0gJ2RuZENhbm5vdERyb3AnLFxuXG4gICAgLy8gRmlsZSBBY3Rpb25zOiBGaWxlIG9wZXJhdGlvbnNcbiAgICBvcGVuRmlsZXMgPSAnb3BlbkZpbGVzJyxcbiAgICBvcGVuUGFyZW50Rm9sZGVyID0gJ29wZW5QYXJlbnRGb2xkZXInLFxuICAgIHNlYXJjaCA9ICdzZWFyY2gnLFxuXG4gICAgLy8gRmlsZSBBY3Rpb25zOiBVbnNvcnRlZFxuICAgIGNoZWNrQWN0aXZlID0gJ2NoZWNrQWN0aXZlJyxcbiAgICBjaGVja0luYWN0aXZlID0gJ2NoZWNrSW5hY3RpdmUnLFxuICAgIGRlc2MgPSAnZGVzYycsXG4gICAgYXNjID0gJ2FzYycsXG4gICAgbGlzdCA9ICdsaXN0JyxcbiAgICBmb2xkZXIgPSAnZm9sZGVyJyxcbiAgICBmb2xkZXJDcmVhdGUgPSAnZm9sZGVyQ3JlYXRlJyxcbiAgICBmb2xkZXJPcGVuID0gJ2ZvbGRlck9wZW4nLFxuICAgIHNtYWxsVGh1bWJuYWlsID0gJ3NtYWxsVGh1bWJuYWlsJyxcbiAgICBsYXJnZVRodW1ibmFpbCA9ICdsYXJnZVRodW1ibmFpbCcsXG4gICAgZm9sZGVyQ2hhaW5TZXBhcmF0b3IgPSAnZm9sZGVyQ2hhaW5TZXBhcmF0b3InLFxuICAgIGRyb3Bkb3duID0gJ2Ryb3Bkb3duJyxcbiAgICBkb3dubG9hZCA9ICdkb3dubG9hZCcsXG4gICAgdXBsb2FkID0gJ3VwbG9hZCcsXG4gICAgdHJhc2ggPSAndHJhc2gnLFxuICAgIGZhbGxiYWNrSWNvbiA9ICdmYWxsYmFja0ljb24nLFxuICAgIHN5bWxpbmsgPSAnc3ltbGluaycsXG4gICAgaGlkZGVuID0gJ2hpZGRlbicsXG5cbiAgICAvLyBGaWxlIHR5cGVzXG4gICAgZmlsZSA9ICdmaWxlJyxcbiAgICBsaWNlbnNlID0gJ2xpY2Vuc2UnLFxuICAgIGNvZGUgPSAnY29kZScsXG4gICAgY29uZmlnID0gJ2NvbmZpZycsXG4gICAgbW9kZWwgPSAnbW9kZWwnLFxuICAgIGRhdGFiYXNlID0gJ2RhdGFiYXNlJyxcbiAgICB0ZXh0ID0gJ3RleHQnLFxuICAgIGFyY2hpdmUgPSAnYXJjaGl2ZScsXG4gICAgY3N2ID0gJ2NzdicsXG4gICAgaW1hZ2UgPSAnaW1hZ2UnLFxuICAgIHBkZiA9ICdwZGYnLFxuICAgIHdvcmQgPSAnd29yZCcsXG4gICAgdmlkZW8gPSAndmlkZW8nLFxuICAgIGluZm8gPSAnaW5mbycsXG4gICAga2V5ID0gJ2tleScsXG4gICAgbG9jayA9ICdsb2NrJyxcbiAgICBtdXNpYyA9ICdtdXNpYycsXG4gICAgZmxhc2ggPSAnZmxhc2gnLFxuICAgIHRlcm1pbmFsID0gJ3Rlcm1pbmFsJyxcbiAgICBhdXRob3JzID0gJ2F1dGhvcnMnLFxuICAgIGFkb2JlID0gJ2Fkb2JlJyxcbiAgICBnaXQgPSAnZ2l0JyxcbiAgICBsaW51eCA9ICdsaW51eCcsXG4gICAgd2luZG93cyA9ICd3aW5kb3dzJyxcbiAgICBub2RlanMgPSAnbm9kZWpzJyxcbiAgICBwaHAgPSAncGhwJyxcbiAgICBweXRob24gPSAncHl0aG9uJyxcbiAgICB1YnVudHUgPSAndWJ1bnR1Jyxcbn1cblxuY29uc3QgSWNvbk1hcDogeyBbaWNvbk5hbWUgaW4gQ2hvbmt5SWNvbk5hbWVdOiBhbnkgfSA9IHtcbiAgICAvLyBNaXNjXG4gICAgW0Nob25reUljb25OYW1lLmxvYWRpbmddOiBmYUNpcmNsZU5vdGNoLFxuXG4gICAgLy8gRmlsZSBBY3Rpb25zOiBEcmFnICYgZHJvcFxuICAgIFtDaG9ua3lJY29uTmFtZS5kbmREcmFnZ2luZ106IGZhRmlzdFJhaXNlZCxcbiAgICBbQ2hvbmt5SWNvbk5hbWUuZG5kQ2FuRHJvcF06IGZhQXJyb3dEb3duLFxuICAgIFtDaG9ua3lJY29uTmFtZS5kbmRDYW5ub3REcm9wXTogZmFUaW1lcyxcblxuICAgIC8vIEZpbGUgQWN0aW9uczogRmlsZSBvcGVyYXRpb25zXG4gICAgW0Nob25reUljb25OYW1lLm9wZW5GaWxlc106IGZhSGFuZFBvaW50ZXIsXG4gICAgW0Nob25reUljb25OYW1lLm9wZW5QYXJlbnRGb2xkZXJdOiBmYUxldmVsVXBBbHQsXG4gICAgW0Nob25reUljb25OYW1lLnNlYXJjaF06IGZhU2VhcmNoLFxuXG4gICAgLy8gRmlsZSBBY3Rpb25zOiBVbnNvcnRlZFxuICAgIFtDaG9ua3lJY29uTmFtZS5jaGVja0FjdGl2ZV06IGZhQ2hlY2tDaXJjbGUsXG4gICAgW0Nob25reUljb25OYW1lLmNoZWNrSW5hY3RpdmVdOiBmYUNpcmNsZSxcbiAgICBbQ2hvbmt5SWNvbk5hbWUuZGVzY106IGZhQXJyb3dEb3duLFxuICAgIFtDaG9ua3lJY29uTmFtZS5hc2NdOiBmYUFycm93VXAsXG4gICAgW0Nob25reUljb25OYW1lLmxpc3RdOiBmYUxpc3QsXG4gICAgW0Nob25reUljb25OYW1lLmZvbGRlcl06IGZhRm9sZGVyLFxuICAgIFtDaG9ua3lJY29uTmFtZS5mb2xkZXJDcmVhdGVdOiBmYUZvbGRlclBsdXMsXG4gICAgW0Nob25reUljb25OYW1lLmZvbGRlck9wZW5dOiBmYUZvbGRlck9wZW4sXG4gICAgW0Nob25reUljb25OYW1lLnNtYWxsVGh1bWJuYWlsXTogZmFUaCxcbiAgICBbQ2hvbmt5SWNvbk5hbWUubGFyZ2VUaHVtYm5haWxdOiBmYVRoTGFyZ2UsXG4gICAgW0Nob25reUljb25OYW1lLmZvbGRlckNoYWluU2VwYXJhdG9yXTogZmFDaGV2cm9uUmlnaHQsXG4gICAgW0Nob25reUljb25OYW1lLmRyb3Bkb3duXTogZmFDaGV2cm9uRG93bixcbiAgICBbQ2hvbmt5SWNvbk5hbWUuZG93bmxvYWRdOiBmYURvd25sb2FkLFxuICAgIFtDaG9ua3lJY29uTmFtZS51cGxvYWRdOiBmYVVwbG9hZCxcbiAgICBbQ2hvbmt5SWNvbk5hbWUudHJhc2hdOiBmYVRyYXNoLFxuICAgIFtDaG9ua3lJY29uTmFtZS5mYWxsYmFja0ljb25dOiBmYUV4Y2xhbWF0aW9uVHJpYW5nbGUsXG4gICAgW0Nob25reUljb25OYW1lLnN5bWxpbmtdOiBmYUV4dGVybmFsTGlua0FsdCxcbiAgICBbQ2hvbmt5SWNvbk5hbWUuaGlkZGVuXTogZmFFeWVTbGFzaCxcblxuICAgIC8vIGZpbGUgdHlwZXNcbiAgICBbQ2hvbmt5SWNvbk5hbWUuZmlsZV06IGZhRmlsZSxcbiAgICBbQ2hvbmt5SWNvbk5hbWUubGljZW5zZV06IGZhQmFsYW5jZVNjYWxlLFxuICAgIFtDaG9ua3lJY29uTmFtZS5jb2RlXTogZmFGaWxlQ29kZSxcbiAgICBbQ2hvbmt5SWNvbk5hbWUuY29uZmlnXTogZmFDb2dzLFxuICAgIFtDaG9ua3lJY29uTmFtZS5tb2RlbF06IGZhQ3ViZXMsXG4gICAgW0Nob25reUljb25OYW1lLmRhdGFiYXNlXTogZmFEYXRhYmFzZSxcbiAgICBbQ2hvbmt5SWNvbk5hbWUudGV4dF06IGZhRmlsZUFsdCxcbiAgICBbQ2hvbmt5SWNvbk5hbWUuYXJjaGl2ZV06IGZhRmlsZUFyY2hpdmUsXG4gICAgW0Nob25reUljb25OYW1lLmNzdl06IGZhRmlsZUV4Y2VsLFxuICAgIFtDaG9ua3lJY29uTmFtZS5pbWFnZV06IGZhRmlsZUltYWdlLFxuICAgIFtDaG9ua3lJY29uTmFtZS5wZGZdOiBmYUZpbGVQZGYsXG4gICAgW0Nob25reUljb25OYW1lLndvcmRdOiBmYUZpbGVXb3JkLFxuICAgIFtDaG9ua3lJY29uTmFtZS52aWRlb106IGZhRmlsbSxcbiAgICBbQ2hvbmt5SWNvbk5hbWUuaW5mb106IGZhSW5mb0NpcmNsZSxcbiAgICBbQ2hvbmt5SWNvbk5hbWUua2V5XTogZmFLZXksXG4gICAgW0Nob25reUljb25OYW1lLmxvY2tdOiBmYUxvY2ssXG4gICAgW0Nob25reUljb25OYW1lLm11c2ljXTogZmFNdXNpYyxcbiAgICBbQ2hvbmt5SWNvbk5hbWUuZmxhc2hdOiBmYVJ1bm5pbmcsXG4gICAgW0Nob25reUljb25OYW1lLnRlcm1pbmFsXTogZmFUZXJtaW5hbCxcbiAgICBbQ2hvbmt5SWNvbk5hbWUuYXV0aG9yc106IGZhVXNlcnMsXG4gICAgW0Nob25reUljb25OYW1lLmFkb2JlXTogZmFBZG9iZSxcbiAgICBbQ2hvbmt5SWNvbk5hbWUuZ2l0XTogZmFHaXRBbHQsXG4gICAgW0Nob25reUljb25OYW1lLmxpbnV4XTogZmFMaW51eCxcbiAgICBbQ2hvbmt5SWNvbk5hbWUud2luZG93c106IGZhV2luZG93cyxcbiAgICBbQ2hvbmt5SWNvbk5hbWUubm9kZWpzXTogZmFOb2RlSnMsXG4gICAgW0Nob25reUljb25OYW1lLnBocF06IGZhUGhwLFxuICAgIFtDaG9ua3lJY29uTmFtZS5weXRob25dOiBmYVB5dGhvbixcbiAgICBbQ2hvbmt5SWNvbk5hbWUudWJ1bnR1XTogZmFVYnVudHUsXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgaW50ZXJmYWNlIENob25reUljb25Qcm9wcyB7XG4gICAgaWNvbjogQ2hvbmt5SWNvbk5hbWUgfCBzdHJpbmc7XG4gICAgc3Bpbj86IGJvb2xlYW47XG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICAgIGNvbG9yPzogc3RyaW5nO1xuICAgIGZpeGVkV2lkdGg/OiBib29sZWFuO1xuICAgIHNpemU/OiAneHMnIHwgJ2xnJyB8ICdzbSc7XG4gICAgc3R5bGU/OiBSZWFjdC5DU1NQcm9wZXJ0aWVzO1xufVxuXG5leHBvcnQgY29uc3QgQ2hvbmt5SWNvbkZBOiBSZWFjdC5GQzxDaG9ua3lJY29uUHJvcHM+ID0gUmVhY3QubWVtbygocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IGljb24gfSA9IHByb3BzO1xuXG4gICAgY29uc3QgZmFQcm9wcyA9IHtcbiAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgIGljb246IEljb25NYXBbaWNvbl0gPyBJY29uTWFwW2ljb25dIDogSWNvbk1hcC5mYWxsYmFja0ljb24sXG4gICAgfSBhcyBjb25zdDtcbiAgICByZXR1cm4gPEZvbnRBd2Vzb21lSWNvbiB7Li4uZmFQcm9wc30gLz47XG59KTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBOdWxsYWJsZSB9IGZyb20gJ3RzZGVmJztcblxuaW1wb3J0IHtcbiAgICBGaWxlQWN0aW9uLFxuICAgIEZpbGVBcnJheSxcbiAgICBGaWxlU2VsZWN0aW9uLFxuICAgIEludGVybmFsRmlsZUFjdGlvbkRpc3BhdGNoZXIsXG4gICAgSW50ZXJuYWxTcGVjaWFsQWN0aW9uRGlzcGF0Y2hlcixcbiAgICBUaHVtYm5haWxHZW5lcmF0b3IsXG59IGZyb20gJy4uL3R5cGVkZWYnO1xuaW1wb3J0IHsgU2VsZWN0aW9uVXRpbCB9IGZyb20gJy4vc2VsZWN0aW9uJztcblxuZXhwb3J0IGNvbnN0IENob25reUZpbGVzQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8RmlsZUFycmF5PihbXSk7XG5leHBvcnQgY29uc3QgQ2hvbmt5Rm9sZGVyQ2hhaW5Db250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxOdWxsYWJsZTxGaWxlQXJyYXk+PihudWxsKTtcbmV4cG9ydCBjb25zdCBDaG9ua3lTZWxlY3Rpb25Db250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxGaWxlU2VsZWN0aW9uPih7fSk7XG5leHBvcnQgY29uc3QgQ2hvbmt5U2VsZWN0aW9uU2l6ZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PG51bWJlcj4oMCk7XG5leHBvcnQgY29uc3QgQ2hvbmt5U2VsZWN0aW9uVXRpbENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PFNlbGVjdGlvblV0aWw+KFxuICAgIG5ldyBTZWxlY3Rpb25VdGlsKClcbik7XG5cbmV4cG9ydCBjb25zdCBDaG9ua3lGaWxlQWN0aW9uc0NvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PEZpbGVBY3Rpb25bXT4oW10pO1xuZXhwb3J0IGNvbnN0IENob25reURpc3BhdGNoRmlsZUFjdGlvbkNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PFxuICAgIEludGVybmFsRmlsZUFjdGlvbkRpc3BhdGNoZXJcbj4oKC4uLmFyZ3M6IGFueVtdKSA9PiBudWxsKTtcbmV4cG9ydCBjb25zdCBDaG9ua3lEaXNwYXRjaFNwZWNpYWxBY3Rpb25Db250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxcbiAgICBJbnRlcm5hbFNwZWNpYWxBY3Rpb25EaXNwYXRjaGVyXG4+KCguLi5hcmdzOiBhbnlbXSkgPT4gbnVsbCk7XG5cbmV4cG9ydCBjb25zdCBDaG9ua3lUaHVtYm5haWxHZW5lcmF0b3JDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxcbiAgICBOdWxsYWJsZTxUaHVtYm5haWxHZW5lcmF0b3I+XG4+KG51bGwpO1xuXG5leHBvcnQgY29uc3QgQ2hvbmt5RG91YmxlQ2xpY2tEZWxheUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PG51bWJlcj4oMzAwKTtcblxuZXhwb3J0IGNvbnN0IENob25reURpc2FibGVTZWxlY3Rpb25Db250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxib29sZWFuPihmYWxzZSk7XG5leHBvcnQgY29uc3QgQ2hvbmt5RW5hYmxlRHJhZ0FuZERyb3BDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxib29sZWFuPihmYWxzZSk7XG5cbnR5cGUgRXh0cmFjdENvbnRleHRUeXBlPFA+ID0gUCBleHRlbmRzIFJlYWN0LkNvbnRleHQ8aW5mZXIgVD4gPyBUIDogbmV2ZXI7XG5pbnRlcmZhY2UgQ29udGV4dERhdGE8Q29udGV4dFR5cGUgZXh0ZW5kcyBSZWFjdC5Db250ZXh0PGFueT4+IHtcbiAgICBjb250ZXh0OiBDb250ZXh0VHlwZTtcbiAgICB2YWx1ZTogRXh0cmFjdENvbnRleHRUeXBlPENvbnRleHRUeXBlPjtcbn1cbmV4cG9ydCBjb25zdCB2YWxpZGF0ZUNvbnRleHRUeXBlID0gPFQgZXh0ZW5kcyBSZWFjdC5Db250ZXh0PGFueT4+KFxuICAgIGNvbnRleHREYXRhOiBDb250ZXh0RGF0YTxUPlxuKSA9PiBjb250ZXh0RGF0YTtcbiIsImV4cG9ydCBjbGFzcyBMb2dnZXIge1xuICAgIHB1YmxpYyBzdGF0aWMgZXJyb3IoLi4uYXJnczogYW55W10pOiB2b2lkIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS5lcnJvcignW0Nob25reSBydW50aW1lIGVycm9yXScsIC4uLmFyZ3MpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZm9ybWF0QnVsbGV0cyhidWxsZXRzOiBzdHJpbmdbXSk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgXFxuLSAke2J1bGxldHMuam9pbignXFxuLSAnKX1gO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBOdWxsYWJsZSB9IGZyb20gJ3RzZGVmJztcblxuaW1wb3J0IHsgRmlsZUJyb3dzZXIgfSBmcm9tICcuLi9jb21wb25lbnRzL2V4dGVybmFsL0ZpbGVCcm93c2VyJztcbmltcG9ydCB7IEZpbGVBcnJheSB9IGZyb20gJy4uL3R5cGVkZWYnO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXInO1xuXG5leHBvcnQgY29uc3QgaXNQbGFpbk9iamVjdCA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgb2JqZWN0ID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59O1xuZXhwb3J0IGNvbnN0IGlzRnVuY3Rpb24gPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIEZ1bmN0aW9uID0+IHtcbiAgICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY2FsbCAmJiB2YWx1ZS5hcHBseSk7XG59O1xuXG5leHBvcnQgY29uc3QgaXNNb2JpbGVEZXZpY2UgPSAoKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgdHlwZW9mIHdpbmRvdy5vcmllbnRhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdJRU1vYmlsZScpICE9PSAtMVxuICAgICk7XG59O1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gdmFsaWRhdGVzIHRoZSB1c2VyLXByb3ZpZGVkIGZpbGVzIGFycmF5LiBJdCBjaGVja3MgdGhlIGZvbGxvd2luZ1xuICogY3JpdGVyaWE6XG4gKiAtIGBmaWxlc2AgaXMgbm90IGFuIGFycmF5XG4gKiAtIHRoZXJlIGFyZSBkdXBsaWNhdGUgZmlsZSBJRHNcbiAqIC0gc29tZSBmaWxlcyBhcmUgbWlzc2luZyBgaWRgIGZpZWxkXG4gKiAtIHNvbWUgZmlsZXMgYXJlIG1pc3NpbmcgYG5hbWVgIGZpZWxkXG4gKiAtIHNvbWUgZmlsZXMgaGF2ZSBpbnZhbGlkIHR5cGUgKHRoZXkgYXJlIG5laXRoZXIgYW4gb2JqZWN0IG5vciBgbnVsbGApXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VDbGVhbkZpbGVBcnJheSA9IDxBbGxvd051bGwgZXh0ZW5kcyBib29sZWFuPihcbiAgICBmaWxlQXJyYXk6IEFsbG93TnVsbCBleHRlbmRzIGZhbHNlID8gRmlsZUFycmF5IDogTnVsbGFibGU8RmlsZUFycmF5PixcbiAgICBhbGxvd051bGw6IEFsbG93TnVsbFxuKToge1xuICAgIGNsZWFuRmlsZUFycmF5OiBBbGxvd051bGwgZXh0ZW5kcyBmYWxzZSA/IEZpbGVBcnJheSA6IE51bGxhYmxlPEZpbGVBcnJheT47XG4gICAgd2FybmluZ01lc3NhZ2U6IE51bGxhYmxlPHN0cmluZz47XG4gICAgd2FybmluZ0J1bGxldHM6IHN0cmluZ1tdO1xufSA9PiB7XG4gICAgbGV0IGNsZWFuRmlsZUFycmF5OiBBbGxvd051bGwgZXh0ZW5kcyBmYWxzZSA/IEZpbGVBcnJheSA6IE51bGxhYmxlPEZpbGVBcnJheT47XG4gICAgbGV0IHdhcm5pbmdNZXNzYWdlID0gbnVsbDtcbiAgICBjb25zdCB3YXJuaW5nQnVsbGV0cyA9IFtdO1xuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGZpbGVBcnJheSkpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjbGVhbkZpbGVBcnJheSA9IGFsbG93TnVsbCA/IG51bGwgOiBbXTtcbiAgICAgICAgaWYgKCFhbGxvd051bGwgfHwgZmlsZUFycmF5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICB3YXJuaW5nTWVzc2FnZSA9XG4gICAgICAgICAgICAgICAgYFByb3ZpZGVkIHZhbHVlIHdhcyByZXBsYWNlZCBgICtcbiAgICAgICAgICAgICAgICBgd2l0aCAke2FsbG93TnVsbCA/ICdudWxsJyA6ICdlbXB0eSBhcnJheSd9LmA7XG4gICAgICAgICAgICB3YXJuaW5nQnVsbGV0cy5wdXNoKFxuICAgICAgICAgICAgICAgIGBFeHBlY3RlZCBcImZpbGVzXCIgdG8gYmUgYW4gYXJyYXksIGdvdCB0eXBlIGAgK1xuICAgICAgICAgICAgICAgICAgICBgXCIke3R5cGVvZiBmaWxlQXJyYXl9XCIgaW5zdGVhZCAodmFsdWU6ICR7ZmlsZUFycmF5fSkuYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGluZGljZXNUb0JlUmVtb3ZlZCA9IG5ldyBTZXQ8bnVtYmVyPigpO1xuXG4gICAgICAgIGNvbnN0IHNlZW5JZHMgPSB7fTtcbiAgICAgICAgY29uc3QgZHVwbGljYXRlSWRTZXQgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgICAgICAgY29uc3QgbWlzc2luZ0lkSW5kaWNlcyA9IFtdO1xuICAgICAgICBjb25zdCBtaXNzaW5nTmFtZUluZGljZXMgPSBbXTtcbiAgICAgICAgY29uc3QgaW52YWxpZFR5cGVJbmRpY2VzID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlQXJyYXkubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBmaWxlQXJyYXlbaV07XG5cbiAgICAgICAgICAgIGlmIChpc1BsYWluT2JqZWN0KGZpbGUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZpbGUuaWQgJiYgc2Vlbklkc1tmaWxlLmlkXSkge1xuICAgICAgICAgICAgICAgICAgICBkdXBsaWNhdGVJZFNldC5hZGQoZmlsZS5pZCk7XG4gICAgICAgICAgICAgICAgICAgIGluZGljZXNUb0JlUmVtb3ZlZC5hZGQoaSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2Vlbklkc1tmaWxlLmlkXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFmaWxlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgbWlzc2luZ05hbWVJbmRpY2VzLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgICAgIGluZGljZXNUb0JlUmVtb3ZlZC5hZGQoaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZmlsZS5pZCkge1xuICAgICAgICAgICAgICAgICAgICBtaXNzaW5nSWRJbmRpY2VzLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgICAgIGluZGljZXNUb0JlUmVtb3ZlZC5hZGQoaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChmaWxlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaW52YWxpZFR5cGVJbmRpY2VzLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgaW5kaWNlc1RvQmVSZW1vdmVkLmFkZChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkdXBsaWNhdGVJZFNldC5zaXplID4gMCkge1xuICAgICAgICAgICAgd2FybmluZ0J1bGxldHMucHVzaChcbiAgICAgICAgICAgICAgICBgU29tZSBmaWxlcyBoYXZlIGR1cGxpY2F0ZSBJRHMuIFRoZXNlIElEcyBhcHBlYXJlZCBtdWx0aXBsZSBgICtcbiAgICAgICAgICAgICAgICAgICAgYHRpbWVzOiAke0FycmF5LmZyb20oZHVwbGljYXRlSWRTZXQpfWBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pc3NpbmdJZEluZGljZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgd2FybmluZ0J1bGxldHMucHVzaChcbiAgICAgICAgICAgICAgICBgU29tZSBmaWxlcyBhcmUgbWlzc2luZyB0aGUgXCJpZFwiIGZpZWxkLiBgICtcbiAgICAgICAgICAgICAgICAgICAgYFJlbGV2YW50IGZpbGUgaW5kaWNlczogJHttaXNzaW5nSWRJbmRpY2VzLmpvaW4oJywgJyl9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWlzc2luZ05hbWVJbmRpY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHdhcm5pbmdCdWxsZXRzLnB1c2goXG4gICAgICAgICAgICAgICAgYFNvbWUgZmlsZXMgYXJlIG1pc3NpbmcgdGhlIFwibmFtZVwiIGZpZWxkLiBgICtcbiAgICAgICAgICAgICAgICAgICAgYFJlbGV2YW50IGZpbGUgaW5kaWNlczogJHttaXNzaW5nTmFtZUluZGljZXMuam9pbignLCAnKX1gXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnZhbGlkVHlwZUluZGljZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgd2FybmluZ0J1bGxldHMucHVzaChcbiAgICAgICAgICAgICAgICBgU29tZSBmaWxlcyBoYXZlIGludmFsaWQgdHlwZSAodGhleSBhcmUgbmVpdGhlciBhIHBsYWluIG9iamVjdCBub3IgXCJudWxsXCIpLiBgICtcbiAgICAgICAgICAgICAgICAgICAgYFJlbGV2YW50IGZpbGUgaW5kaWNlczogJHtpbnZhbGlkVHlwZUluZGljZXMuam9pbignLCAnKX1gXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZGljZXNUb0JlUmVtb3ZlZC5zaXplID4gMCkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgY2xlYW5GaWxlQXJyYXkgPSBmaWxlQXJyYXkuZmlsdGVyKFxuICAgICAgICAgICAgICAgICh2YWx1ZSwgaW5kZXgpID0+ICFpbmRpY2VzVG9CZVJlbW92ZWQuaGFzKGluZGV4KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHdhcm5pbmdNZXNzYWdlID1cbiAgICAgICAgICAgICAgICBgJHtpbmRpY2VzVG9CZVJlbW92ZWQuc2l6ZX0gb2ZmZW5kaW5nIGAgK1xuICAgICAgICAgICAgICAgIGBmaWxlJHtpbmRpY2VzVG9CZVJlbW92ZWQuc2l6ZSA9PT0gMSA/ICcgd2FzJyA6ICdzIHdlcmUnfSBgICtcbiAgICAgICAgICAgICAgICBgIHJlbW92ZWQgZnJvbSB0aGUgYXJyYXkuYDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsZWFuRmlsZUFycmF5ID0gZmlsZUFycmF5O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgY2xlYW5GaWxlQXJyYXksIHdhcm5pbmdNZXNzYWdlLCB3YXJuaW5nQnVsbGV0cyB9O1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBFcnJvck1lc3NhZ2VEYXRhIHtcbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgYnVsbGV0czogc3RyaW5nW107XG59XG5cbmV4cG9ydCBjb25zdCB1c2VGaWxlQnJvd3NlclZhbGlkYXRpb24gPSAoXG4gICAgZmlsZXM6IEZpbGVBcnJheSxcbiAgICBmb2xkZXJDaGFpbjogTnVsbGFibGU8RmlsZUFycmF5PlxuKToge1xuICAgIGNsZWFuRmlsZXM6IEZpbGVBcnJheTtcbiAgICBjbGVhbkZvbGRlckNoYWluOiBOdWxsYWJsZTxGaWxlQXJyYXk+O1xuICAgIGVycm9yTWVzc2FnZXM6IEVycm9yTWVzc2FnZURhdGFbXTtcbn0gPT4ge1xuICAgIGNvbnN0IGZpbGVzRGVwcyA9IFtmaWxlc107XG4gICAgY29uc3QgeyBjbGVhbkZpbGVzLCBlcnJvck1lc3NhZ2VzOiBmaWxlc0Vycm9yTWVzc2FnZXMgfSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2VzOiBFcnJvck1lc3NhZ2VEYXRhW10gPSBbXTtcblxuICAgICAgICBjb25zdCBjbGVhbkZpbGVzUmVzdWx0ID0gdXNlQ2xlYW5GaWxlQXJyYXkoZmlsZXMsIGZhbHNlKTtcbiAgICAgICAgaWYgKGNsZWFuRmlsZXNSZXN1bHQud2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9XG4gICAgICAgICAgICAgICAgYFRoZSBcImZpbGVzXCIgcHJvcCBwYXNzZWQgdG8gJHtGaWxlQnJvd3Nlci5uYW1lfSBkaWQgbm90IHBhc3MgdmFsaWRhdGlvbi4gYCArXG4gICAgICAgICAgICAgICAgYCR7Y2xlYW5GaWxlc1Jlc3VsdC53YXJuaW5nTWVzc2FnZX0gYCArXG4gICAgICAgICAgICAgICAgYFRoZSBmb2xsb3dpbmcgZXJyb3JzIHdlcmUgZW5jb3VudGVyZWQ6YDtcbiAgICAgICAgICAgIExvZ2dlci5lcnJvcihcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgTG9nZ2VyLmZvcm1hdEJ1bGxldHMoY2xlYW5GaWxlc1Jlc3VsdC53YXJuaW5nQnVsbGV0cylcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgICAgICBidWxsZXRzOiBjbGVhbkZpbGVzUmVzdWx0Lndhcm5pbmdCdWxsZXRzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2xlYW5GaWxlczogY2xlYW5GaWxlc1Jlc3VsdC5jbGVhbkZpbGVBcnJheSxcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZXMsXG4gICAgICAgIH07XG4gICAgfSwgZmlsZXNEZXBzKTtcblxuICAgIGNvbnN0IGZvbGRlckNoYWluRGVwcyA9IFtmb2xkZXJDaGFpbl07XG4gICAgY29uc3QgeyBjbGVhbkZvbGRlckNoYWluLCBlcnJvck1lc3NhZ2VzOiBmb2xkZXJDaGFpbkVycm9yTWVzc2FnZXMgfSA9IHVzZU1lbW8oXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZXM6IEVycm9yTWVzc2FnZURhdGFbXSA9IFtdO1xuXG4gICAgICAgICAgICBjb25zdCBjbGVhbkZvbGRlckNoYWluUmVzdWx0ID0gdXNlQ2xlYW5GaWxlQXJyYXkoZm9sZGVyQ2hhaW4sIHRydWUpO1xuICAgICAgICAgICAgaWYgKGNsZWFuRm9sZGVyQ2hhaW5SZXN1bHQud2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPVxuICAgICAgICAgICAgICAgICAgICBgVGhlIFwiZm9sZGVyQ2hhaW5cIiBwcm9wIHBhc3NlZCB0byAke0ZpbGVCcm93c2VyLm5hbWV9IGRpZCBub3QgcGFzcyB2YWxpZGF0aW9uLiBgICtcbiAgICAgICAgICAgICAgICAgICAgYCR7Y2xlYW5Gb2xkZXJDaGFpblJlc3VsdC53YXJuaW5nTWVzc2FnZX0gYCArXG4gICAgICAgICAgICAgICAgICAgIGBUaGUgZm9sbG93aW5nIGVycm9ycyB3ZXJlIGVuY291bnRlcmVkOmA7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5mb3JtYXRCdWxsZXRzKGNsZWFuRm9sZGVyQ2hhaW5SZXN1bHQud2FybmluZ0J1bGxldHMpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIGJ1bGxldHM6IGNsZWFuRm9sZGVyQ2hhaW5SZXN1bHQud2FybmluZ0J1bGxldHMsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY2xlYW5Gb2xkZXJDaGFpbjogY2xlYW5Gb2xkZXJDaGFpblJlc3VsdC5jbGVhbkZpbGVBcnJheSxcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2VzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZm9sZGVyQ2hhaW5EZXBzXG4gICAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGNsZWFuRmlsZXMsXG4gICAgICAgIGNsZWFuRm9sZGVyQ2hhaW4sXG4gICAgICAgIGVycm9yTWVzc2FnZXM6IFsuLi5maWxlc0Vycm9yTWVzc2FnZXMsIC4uLmZvbGRlckNoYWluRXJyb3JNZXNzYWdlc10sXG4gICAgfTtcbn07XG4iLCJpbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAndHNkZWYnO1xuXG5pbXBvcnQgeyBDaG9ua3lJY29uTmFtZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvZXh0ZXJuYWwvQ2hvbmt5SWNvbic7XG5pbXBvcnQge1xuICAgIEZpbGVBY3Rpb24sXG4gICAgRmlsZUFjdGlvbkhhbmRsZXIsXG4gICAgSW50ZXJuYWxGaWxlQWN0aW9uRGlzcGF0Y2hlcixcbn0gZnJvbSAnLi4vdHlwZWRlZic7XG5pbXBvcnQgeyBGaWxlSGVscGVyIH0gZnJvbSAnLi9maWxlLWhlbHBlcic7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi92YWxpZGF0aW9uJztcblxuZXhwb3J0IGNvbnN0IENob25reUFjdGlvbnMgPSB7XG4gICAgLy8gQWN0aW9ucyB0cmlnZ2VyZWQgYnkgZHJhZyAmIGRyb3BcbiAgICBNb3ZlRmlsZXNUbzoge1xuICAgICAgICBuYW1lOiAnbW92ZV9maWxlc190bycsXG4gICAgfSxcbiAgICBEdXBsaWNhdGVGaWxlc1RvOiB7XG4gICAgICAgIG5hbWU6ICdkdXBsaWNhdGVfZmlsZXNfdG8nLFxuICAgIH0sXG5cbiAgICBPcGVuUGFyZW50Rm9sZGVyOiB7XG4gICAgICAgIG5hbWU6ICdvcGVuX3BhcmVudF9mb2xkZXInLFxuICAgICAgICByZXF1aXJlc1BhcmVudEZvbGRlcjogdHJ1ZSxcbiAgICAgICAgaG90a2V5czogWydiYWNrc3BhY2UnXSxcbiAgICAgICAgdG9vbGJhckJ1dHRvbjoge1xuICAgICAgICAgICAgbmFtZTogJ0dvIHVwIGEgZGlyZWN0b3J5JyxcbiAgICAgICAgICAgIHRvb2x0aXA6ICdHbyB1cCBhIGRpcmVjdG9yeScsXG4gICAgICAgICAgICBpY29uOiBDaG9ua3lJY29uTmFtZS5vcGVuUGFyZW50Rm9sZGVyLFxuICAgICAgICAgICAgaWNvbk9ubHk6IHRydWUsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBPcGVuRmlsZXM6IHtcbiAgICAgICAgLy8gV2UgZG9uJ3Qgc3BlY2lmeSB0aGUgJ2VudGVyJyBob3RrZXkgaGVyZSBiZWNhdXNlIGl0IGlzIGhhbmRsZWQgaW5zaWRlXG4gICAgICAgIC8vIGA8Q2xpY2thYmxlRmlsZUVudHJ5PmAgY29tcG9uZW50LlxuICAgICAgICBuYW1lOiAnb3Blbl9maWxlcycsXG4gICAgICAgIHJlcXVpcmVzU2VsZWN0aW9uOiB0cnVlLFxuICAgICAgICBmaWxlRmlsdGVyOiBGaWxlSGVscGVyLmlzT3BlbmFibGUsXG4gICAgICAgIHRvb2xiYXJCdXR0b246IHtcbiAgICAgICAgICAgIG5hbWU6ICdPcGVuIHNlbGVjdGlvbicsXG4gICAgICAgICAgICBncm91cDogJ0FjdGlvbnMnLFxuICAgICAgICAgICAgZHJvcGRvd246IHRydWUsXG4gICAgICAgICAgICBpY29uOiBDaG9ua3lJY29uTmFtZS5vcGVuRmlsZXMsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBTZWFyY2g6IHtcbiAgICAgICAgbmFtZTogJ3NlYXJjaCcsXG4gICAgICAgIGhvdGtleXM6IFsnY3RybCtmJ10sXG4gICAgICAgIHRvb2xiYXJCdXR0b246IHtcbiAgICAgICAgICAgIG5hbWU6ICdTZWFyY2gnLFxuICAgICAgICAgICAgaWNvbjogQ2hvbmt5SWNvbk5hbWUuc2VhcmNoLFxuICAgICAgICAgICAgaWNvbk9ubHk6IHRydWUsXG4gICAgICAgIH0sXG4gICAgfSxcblxuICAgIENvcHlGaWxlczoge1xuICAgICAgICBuYW1lOiAnY29weV9maWxlcycsXG4gICAgICAgIHJlcXVpcmVzU2VsZWN0aW9uOiB0cnVlLFxuICAgIH0sXG5cbiAgICBDcmVhdGVGb2xkZXI6IHtcbiAgICAgICAgbmFtZTogJ2NyZWF0ZV9mb2xkZXInLFxuICAgICAgICB0b29sYmFyQnV0dG9uOiB7XG4gICAgICAgICAgICBuYW1lOiAnQ3JlYXRlIGZvbGRlcicsXG4gICAgICAgICAgICB0b29sdGlwOiAnQ3JlYXRlIGEgZm9sZGVyJyxcbiAgICAgICAgICAgIGljb246IENob25reUljb25OYW1lLmZvbGRlckNyZWF0ZSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIFVwbG9hZEZpbGVzOiB7XG4gICAgICAgIG5hbWU6ICd1cGxvYWRfZmlsZXMnLFxuICAgICAgICB0b29sYmFyQnV0dG9uOiB7XG4gICAgICAgICAgICBuYW1lOiAnVXBsb2FkIGZpbGVzJyxcbiAgICAgICAgICAgIHRvb2x0aXA6ICdVcGxvYWQgZmlsZXMnLFxuICAgICAgICAgICAgaWNvbjogQ2hvbmt5SWNvbk5hbWUudXBsb2FkLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgRG93bmxvYWRGaWxlczoge1xuICAgICAgICBuYW1lOiAnZG93bmxvYWRfZmlsZXMnLFxuICAgICAgICByZXF1aXJlc1NlbGVjdGlvbjogdHJ1ZSxcbiAgICAgICAgdG9vbGJhckJ1dHRvbjoge1xuICAgICAgICAgICAgbmFtZTogJ0Rvd25sb2FkIGZpbGVzJyxcbiAgICAgICAgICAgIGdyb3VwOiAnQWN0aW9ucycsXG4gICAgICAgICAgICB0b29sdGlwOiAnRG93bmxvYWQgZmlsZXMnLFxuICAgICAgICAgICAgaWNvbjogQ2hvbmt5SWNvbk5hbWUuZG93bmxvYWQsXG4gICAgICAgIH0sXG4gICAgfSxcbn0gYXMgY29uc3Q7XG5cbmV4cG9ydCBjb25zdCBEZWZhdWx0QWN0aW9uczogRmlsZUFjdGlvbltdID0gW1xuICAgIENob25reUFjdGlvbnMuTW92ZUZpbGVzVG8sXG4gICAgQ2hvbmt5QWN0aW9ucy5EdXBsaWNhdGVGaWxlc1RvLFxuXG4gICAgQ2hvbmt5QWN0aW9ucy5PcGVuUGFyZW50Rm9sZGVyLFxuICAgIENob25reUFjdGlvbnMuT3BlbkZpbGVzLFxuICAgIENob25reUFjdGlvbnMuU2VhcmNoLFxuXTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgZGlzcGF0Y2ggbWV0aG9kIG1lYW50IHRvIGJlIHVzZWQgYnkgY2hpbGQgY29tcG9uZW50cy4gVGhpcyBkaXNwYXRjaCBtZXRob2RcbiAqIGlzIG1lYW50IGZvciBhY3Rpb25zIHRoYXQgc2hvdWxkIGJlIGhhbmRsZWQgZGlyZWN0bHkgYnkgdGhlIHVzZXIuIElmIHlvdSB3YW50IHRvXG4gKiB0cmFuc2Zvcm0gdGhlIGFjdGlvbiBpbnRlcm5hbGx5IGJlZm9yZSBzZW5kaW5nIGl0IHRvIHRoZSB1c2VyLCB1c2UgdGhlIFwic3BlY2lhbFxuICogYWN0aW9uIGRpc3BhdGNoZXJcIi5cbiAqL1xuZXhwb3J0IGNvbnN0IHVzZUZpbGVBY3Rpb25EaXNwYXRjaGVyID0gKFxuICAgIGZpbGVBY3Rpb25zOiBGaWxlQWN0aW9uW10sXG4gICAgb25GaWxlQWN0aW9uOiBOdWxsYWJsZTxGaWxlQWN0aW9uSGFuZGxlcj5cbik6IEludGVybmFsRmlsZUFjdGlvbkRpc3BhdGNoZXIgPT4ge1xuICAgIGNvbnN0IGFjdGlvbk1hcERlcHMgPSBbZmlsZUFjdGlvbnNdO1xuICAgIGNvbnN0IGFjdGlvbk1hcCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBjb25zdCBhY3Rpb25NYXAgPSB7fTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZmlsZUFjdGlvbnMpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZpbGVBY3Rpb24gb2YgZmlsZUFjdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb25NYXBbZmlsZUFjdGlvbi5uYW1lXSA9IGZpbGVBY3Rpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjdGlvbk1hcDtcbiAgICB9LCBhY3Rpb25NYXBEZXBzKTtcblxuICAgIGNvbnN0IGRpc3BhdGNoRmlsZUFjdGlvbkRlcHMgPSBbYWN0aW9uTWFwLCBvbkZpbGVBY3Rpb25dO1xuICAgIGNvbnN0IGRpc3BhdGNoRmlsZUFjdGlvbjogSW50ZXJuYWxGaWxlQWN0aW9uRGlzcGF0Y2hlciA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAoYWN0aW9uRGF0YSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBhY3Rpb25OYW1lIH0gPSBhY3Rpb25EYXRhO1xuXG4gICAgICAgICAgICBjb25zdCBhY3Rpb24gPSBhY3Rpb25NYXBbYWN0aW9uTmFtZV07XG4gICAgICAgICAgICBpZiAoYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24ob25GaWxlQWN0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gb25GaWxlQWN0aW9uKGFjdGlvbiwgYWN0aW9uRGF0YSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZ2dlci5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFVzZXItZGVmaW5lZCBcIm9uQWN0aW9uXCIgaGFuZGxlciB0aHJldyBhbiBlcnJvcjogJHtlcnJvci5tZXNzYWdlfWBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgSW50ZXJuYWwgY29tcG9uZW50cyBkaXNwYXRjaGVkIGEgXCIke2FjdGlvbk5hbWV9XCIgZmlsZSBhY3Rpb24sIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYGJ1dCBzdWNoIGFjdGlvbiB3YXMgbm90IHJlZ2lzdGVyZWQuYFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRpc3BhdGNoRmlsZUFjdGlvbkRlcHNcbiAgICApO1xuXG4gICAgcmV0dXJuIGRpc3BhdGNoRmlsZUFjdGlvbjtcbn07XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQge1xuICAgIEZpbGVBcnJheSxcbiAgICBGaWxlRGF0YSxcbiAgICBGaWxlU2VsZWN0aW9uLFxuICAgIEludGVybmFsRmlsZUFjdGlvbkRpc3BhdGNoZXIsXG4gICAgSW50ZXJuYWxTcGVjaWFsQWN0aW9uRGlzcGF0Y2hlcixcbn0gZnJvbSAnLi4vdHlwZWRlZic7XG5pbXBvcnQgeyBJTlRFTlRJT05BTF9FTVBUWV9ERVBTIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgQ2hvbmt5QWN0aW9ucyB9IGZyb20gJy4vZmlsZS1hY3Rpb25zJztcbmltcG9ydCB7IEZpbGVIZWxwZXIgfSBmcm9tICcuL2ZpbGUtaGVscGVyJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IFNlbGVjdGlvblV0aWwsIHVzZVNlbGVjdGlvbiB9IGZyb20gJy4vc2VsZWN0aW9uJztcblxuZXhwb3J0IGVudW0gU3BlY2lhbEFjdGlvbiB7XG4gICAgTW91c2VDbGlja0ZpbGUgPSAnbW91c2VfY2xpY2tfZmlsZScsXG4gICAgS2V5Ym9hcmRDbGlja0ZpbGUgPSAna2V5Ym9hcmRfY2xpY2tfZmlsZScsXG5cbiAgICBEcmFnTkRyb3BTdGFydCA9ICdkcmFnX25fZHJvcF9zdGFydCcsXG4gICAgRHJhZ05Ecm9wRW5kID0gJ2RyYWdfbl9kcm9wX2VuZCcsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3BlY2lhbEZpbGVNb3VzZUNsaWNrQWN0aW9uIHtcbiAgICBhY3Rpb25OYW1lOiBTcGVjaWFsQWN0aW9uLk1vdXNlQ2xpY2tGaWxlO1xuICAgIGZpbGU6IEZpbGVEYXRhO1xuICAgIGFsdEtleTogYm9vbGVhbjtcbiAgICBjdHJsS2V5OiBib29sZWFuO1xuICAgIHNoaWZ0S2V5OiBib29sZWFuO1xuICAgIGNsaWNrVHlwZTogJ3NpbmdsZScgfCAnZG91YmxlJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTcGVjaWFsRmlsZUtleWJvYXJkQ2xpY2tBY3Rpb24ge1xuICAgIGFjdGlvbk5hbWU6IFNwZWNpYWxBY3Rpb24uS2V5Ym9hcmRDbGlja0ZpbGU7XG4gICAgZmlsZTogRmlsZURhdGE7XG4gICAgZW50ZXJLZXk6IGJvb2xlYW47XG4gICAgc3BhY2VLZXk6IGJvb2xlYW47XG4gICAgYWx0S2V5OiBib29sZWFuO1xuICAgIGN0cmxLZXk6IGJvb2xlYW47XG4gICAgc2hpZnRLZXk6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3BlY2lhbERyYWdORHJvcFN0YXJ0QWN0aW9uIHtcbiAgICBhY3Rpb25OYW1lOiBTcGVjaWFsQWN0aW9uLkRyYWdORHJvcFN0YXJ0O1xuICAgIGRyYWdTb3VyY2U6IEZpbGVEYXRhO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNwZWNpYWxEcmFnTkRyb3BFbmRBY3Rpb24ge1xuICAgIGFjdGlvbk5hbWU6IFNwZWNpYWxBY3Rpb24uRHJhZ05Ecm9wRW5kO1xuICAgIGRyYWdTb3VyY2U6IEZpbGVEYXRhO1xuICAgIGRyb3BUYXJnZXQ6IEZpbGVEYXRhO1xuICAgIGRyb3BFZmZlY3Q6ICdtb3ZlJyB8ICdjb3B5Jztcbn1cblxuZXhwb3J0IHR5cGUgU3BlY2lhbEFjdGlvbkRhdGEgPVxuICAgIHwgU3BlY2lhbEZpbGVNb3VzZUNsaWNrQWN0aW9uXG4gICAgfCBTcGVjaWFsRmlsZUtleWJvYXJkQ2xpY2tBY3Rpb25cbiAgICB8IFNwZWNpYWxEcmFnTkRyb3BTdGFydEFjdGlvblxuICAgIHwgU3BlY2lhbERyYWdORHJvcEVuZEFjdGlvbjtcblxuaW50ZXJmYWNlIFNwZWNpYWxNdXRhYmxlQ2hvbmt5U3RhdGUge1xuICAgIGZpbGVzOiBGaWxlQXJyYXk7XG4gICAgc2VsZWN0aW9uOiBGaWxlU2VsZWN0aW9uO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBkaXNwYXRjaCBtZXRob2QgbWVhbnQgdG8gYmUgdXNlZCBieSBjaGlsZCBjb21wb25lbnRzLiBUaGlzIGRpc3BhdGNoXG4gKiBtZXRob2QgaXMgbWVhbnQgZm9yIFwic3BlY2lhbFwiIGludGVybmFsIGFjdGlvbnMuIEl0IHRha2VzIGEgc3BlY2lhbCBhY3Rpb24sIGFuZFxuICogdHJhbnNmb3JtcyBpdCBpbnRvIGEgXCJmaWxlIGFjdGlvblwiIHRoYXQgY2FuIGJlIGhhbmRsZWQgYnkgdGhlIHVzZXIuXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VTcGVjaWFsQWN0aW9uRGlzcGF0Y2hlciA9IChcbiAgICBmaWxlczogRmlsZUFycmF5LFxuICAgIHNlbGVjdGlvbjogRmlsZVNlbGVjdGlvbixcbiAgICBzZWxlY3Rpb25VdGlsOiBTZWxlY3Rpb25VdGlsLFxuICAgIHNlbGVjdEZpbGVzOiBSZXR1cm5UeXBlPHR5cGVvZiB1c2VTZWxlY3Rpb24+WydzZWxlY3RGaWxlcyddLFxuICAgIHRvZ2dsZVNlbGVjdGlvbjogUmV0dXJuVHlwZTx0eXBlb2YgdXNlU2VsZWN0aW9uPlsndG9nZ2xlU2VsZWN0aW9uJ10sXG4gICAgY2xlYXJTZWxlY3Rpb246IFJldHVyblR5cGU8dHlwZW9mIHVzZVNlbGVjdGlvbj5bJ2NsZWFyU2VsZWN0aW9uJ10sXG4gICAgZGlzcGF0Y2hGaWxlQWN0aW9uOiBJbnRlcm5hbEZpbGVBY3Rpb25EaXNwYXRjaGVyXG4pOiBJbnRlcm5hbFNwZWNpYWxBY3Rpb25EaXNwYXRjaGVyID0+IHtcbiAgICAvLyBHZW5lcmF0ZSBtdXRhYmxlIENob25reSBzdGF0ZSBvYmplY3Qgc28gdGhhdCBzcGVjaWFsIGFjdGlvbiBoYW5kbGVycyBjYW4gdXNlXG4gICAgLy8gdXAtdG8tZGF0ZSBzdGF0ZSB3aXRob3V0IHRyaWdnZXJpbmcgcmUtcmVuZGVyc1xuICAgIGNvbnN0IHNwZWNpYWxTdGF0ZURlcHMgPSBbZmlsZXMsIHNlbGVjdGlvbl07XG4gICAgY29uc3Qgc3BlY2lhbFN0YXRlID0gdXNlTWVtbzxTcGVjaWFsTXV0YWJsZUNob25reVN0YXRlPihcbiAgICAgICAgKCkgPT4gKHtcbiAgICAgICAgICAgIGZpbGVzLFxuICAgICAgICAgICAgc2VsZWN0aW9uLFxuICAgICAgICB9KSxcbiAgICAgICAgSU5URU5USU9OQUxfRU1QVFlfREVQU1xuICAgICk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgc3BlY2lhbFN0YXRlLmZpbGVzID0gZmlsZXM7XG4gICAgICAgIHNwZWNpYWxTdGF0ZS5zZWxlY3Rpb24gPSBzZWxlY3Rpb247XG4gICAgfSwgc3BlY2lhbFN0YXRlRGVwcyk7XG5cbiAgICAvLyBDcmVhdGUgdGhlIHNwZWNpYWwgYWN0aW9uIGhhbmRsZXIgbWFwXG4gICAgY29uc3Qgc3BlY2lhbEFjdGlvbkhhbmRsZXJNYXAgPSB1c2VTcGVjaWFsRmlsZUFjdGlvbkhhbmRsZXJNYXAoXG4gICAgICAgIHNlbGVjdGlvblV0aWwsXG4gICAgICAgIHNlbGVjdEZpbGVzLFxuICAgICAgICB0b2dnbGVTZWxlY3Rpb24sXG4gICAgICAgIGNsZWFyU2VsZWN0aW9uLFxuICAgICAgICBkaXNwYXRjaEZpbGVBY3Rpb25cbiAgICApO1xuXG4gICAgLy8gUHJvY2VzcyBzcGVjaWFsIGFjdGlvbnMgdXNpbmcgdGhlIGhhbmRsZXJzIGZyb20gdGhlIG1hcFxuICAgIGNvbnN0IGRpc3BhdGNoU3BlY2lhbEFjdGlvbkRlcHMgPSBbc3BlY2lhbEFjdGlvbkhhbmRsZXJNYXBdO1xuICAgIGNvbnN0IGRpc3BhdGNoU3BlY2lhbEFjdGlvbiA9IHVzZUNhbGxiYWNrKChhY3Rpb25EYXRhOiBTcGVjaWFsQWN0aW9uRGF0YSkgPT4ge1xuICAgICAgICBjb25zdCB7IGFjdGlvbk5hbWUgfSA9IGFjdGlvbkRhdGE7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBzcGVjaWFsQWN0aW9uSGFuZGxlck1hcFthY3Rpb25OYW1lXTtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcihhY3Rpb25EYXRhKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgSGFuZGxlciBmb3Igc3BlY2lhbCBhY3Rpb24gXCIke2FjdGlvbk5hbWV9XCIgdGhyZXcgYW4gZXJyb3IuYCxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgTG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgICAgIGBJbnRlcm5hbCBjb21wb25lbnRzIGRpc3BhdGNoZWQgYSBcIiR7YWN0aW9uTmFtZX1cIiBzcGVjaWFsIGFjdGlvbiwgYCArXG4gICAgICAgICAgICAgICAgICAgIGBidXQgbm8gaW50ZXJuYWwgaGFuZGxlciBpcyBhdmFpbGFibGUgdG8gcHJvY2VzcyBpdC5gXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfSwgZGlzcGF0Y2hTcGVjaWFsQWN0aW9uRGVwcyk7XG4gICAgcmV0dXJuIGRpc3BhdGNoU3BlY2lhbEFjdGlvbjtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VTcGVjaWFsRmlsZUFjdGlvbkhhbmRsZXJNYXAgPSAoXG4gICAgc2VsZWN0aW9uVXRpbDogU2VsZWN0aW9uVXRpbCxcbiAgICBzZWxlY3RGaWxlczogUmV0dXJuVHlwZTx0eXBlb2YgdXNlU2VsZWN0aW9uPlsnc2VsZWN0RmlsZXMnXSxcbiAgICB0b2dnbGVTZWxlY3Rpb246IFJldHVyblR5cGU8dHlwZW9mIHVzZVNlbGVjdGlvbj5bJ3RvZ2dsZVNlbGVjdGlvbiddLFxuICAgIGNsZWFyU2VsZWN0aW9uOiBSZXR1cm5UeXBlPHR5cGVvZiB1c2VTZWxlY3Rpb24+WydjbGVhclNlbGVjdGlvbiddLFxuICAgIGRpc3BhdGNoRmlsZUFjdGlvbjogSW50ZXJuYWxGaWxlQWN0aW9uRGlzcGF0Y2hlclxuKSA9PiB7XG4gICAgLy8gRGVmaW5lIGhhbmRsZXJzIGluIGEgbWFwXG4gICAgY29uc3Qgc3BlY2lhbEFjdGlvbkhhbmRsZXJNYXBEZXBzID0gW1xuICAgICAgICBzZWxlY3RGaWxlcyxcbiAgICAgICAgdG9nZ2xlU2VsZWN0aW9uLFxuICAgICAgICBjbGVhclNlbGVjdGlvbixcbiAgICAgICAgZGlzcGF0Y2hGaWxlQWN0aW9uLFxuICAgIF07XG4gICAgY29uc3Qgc3BlY2lhbEFjdGlvbkhhbmRsZXJNYXAgPSB1c2VNZW1vKFxuICAgICAgICAoKSA9PlxuICAgICAgICAgICAgKHtcbiAgICAgICAgICAgICAgICBbU3BlY2lhbEFjdGlvbi5Nb3VzZUNsaWNrRmlsZV06IChkYXRhOiBTcGVjaWFsRmlsZU1vdXNlQ2xpY2tBY3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5jbGlja1R5cGUgPT09ICdkb3VibGUnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBGaWxlSGVscGVyLmlzT3BlbmFibGUoZGF0YS5maWxlKVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoRmlsZUFjdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uTmFtZTogQ2hvbmt5QWN0aW9ucy5PcGVuRmlsZXMubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IGRhdGEuZmlsZSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRvIHNpbXVsYXRlIFdpbmRvd3MgRXhwbG9yZXIgYW5kIE5hdXRpbHVzIGJlaGF2aW91cixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhIGRvdWJsZSBjbGljayBvbiBhIGZpbGUgb25seSBvcGVucyB0aGF0IGZpbGUgZXZlbiBpZlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZXJlIGlzIGEgc2VsZWN0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzOiBbZGF0YS5maWxlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEZpbGVIZWxwZXIuaXNTZWxlY3RhYmxlKGRhdGEuZmlsZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVTZWxlY3Rpb24oZGF0YS5maWxlLmlkLCAhZGF0YS5jdHJsS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBIYW5kbGUgcmFuZ2Ugc2VsZWN0aW9ucy5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhLmN0cmxLZXkpIGNsZWFyU2VsZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtTcGVjaWFsQWN0aW9uLktleWJvYXJkQ2xpY2tGaWxlXTogKFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBTcGVjaWFsRmlsZUtleWJvYXJkQ2xpY2tBY3Rpb25cbiAgICAgICAgICAgICAgICApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuZW50ZXJLZXkgJiYgRmlsZUhlbHBlci5pc09wZW5hYmxlKGRhdGEuZmlsZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoRmlsZUFjdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uTmFtZTogQ2hvbmt5QWN0aW9ucy5PcGVuRmlsZXMubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IGRhdGEuZmlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlczogc2VsZWN0aW9uVXRpbC5nZXRTZWxlY3RlZEZpbGVzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlSGVscGVyLmlzT3BlbmFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS5zcGFjZUtleSAmJiBGaWxlSGVscGVyLmlzU2VsZWN0YWJsZShkYXRhLmZpbGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVTZWxlY3Rpb24oZGF0YS5maWxlLmlkLCBkYXRhLmN0cmxLZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogSGFuZGxlIHJhbmdlIHNlbGVjdGlvbnMuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtTcGVjaWFsQWN0aW9uLkRyYWdORHJvcFN0YXJ0XTogKGRhdGE6IFNwZWNpYWxEcmFnTkRyb3BTdGFydEFjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlID0gZGF0YS5kcmFnU291cmNlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGVjdGlvblV0aWwuaXNTZWxlY3RlZChmaWxlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChGaWxlSGVscGVyLmlzU2VsZWN0YWJsZShmaWxlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdEZpbGVzKFtmaWxlLmlkXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtTcGVjaWFsQWN0aW9uLkRyYWdORHJvcEVuZF06IChkYXRhOiBTcGVjaWFsRHJhZ05Ecm9wRW5kQWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rpb25VdGlsLmlzU2VsZWN0ZWQoZGF0YS5kcm9wVGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FuJ3QgZHJvcCBhIHNlbGVjdGlvbiBpbnRvIGl0c2VsZlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRGaWxlcyA9IHNlbGVjdGlvblV0aWwuZ2V0U2VsZWN0ZWRGaWxlcyhcbiAgICAgICAgICAgICAgICAgICAgICAgIEZpbGVIZWxwZXIuaXNEcmFnZ2FibGVcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZHJvcHBlZEZpbGVzID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkRmlsZXMubGVuZ3RoID4gMCA/IHNlbGVjdGVkRmlsZXMgOiBbZGF0YS5kcmFnU291cmNlXTtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hGaWxlQWN0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbk5hbWU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5kcm9wRWZmZWN0ID09PSAnY29weSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBDaG9ua3lBY3Rpb25zLkR1cGxpY2F0ZUZpbGVzVG8ubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IENob25reUFjdGlvbnMuTW92ZUZpbGVzVG8ubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogZGF0YS5kcm9wVGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXM6IGRyb3BwZWRGaWxlcyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0gYXMgeyBbYWN0aW9uTmFtZSBpbiBTcGVjaWFsQWN0aW9uXTogKGRhdGE6IFNwZWNpYWxBY3Rpb25EYXRhKSA9PiB2b2lkIH0pLFxuICAgICAgICBzcGVjaWFsQWN0aW9uSGFuZGxlck1hcERlcHNcbiAgICApO1xuICAgIHJldHVybiBzcGVjaWFsQWN0aW9uSGFuZGxlck1hcDtcbn07XG4iLCIvLyBVc2VkIGluIFJlYWN0IGhvb2tzIHRvIGluZGljYXRlIGVtcHR5IGRlcHMgYXJlIGludGVudGlvbmFsLlxuZXhwb3J0IGNvbnN0IElOVEVOVElPTkFMX0VNUFRZX0RFUFM6IFJlYWRvbmx5QXJyYXk8bmV2ZXI+ID0gW107XG4iLCIvKipcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMjBcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29udGV4dFByb3ZpZGVyRGF0YTxUID0gYW55PiB7XG4gICAgcHJvdmlkZXI6IFJlYWN0LlByb3ZpZGVyPFQ+O1xuICAgIHZhbHVlOiBUO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbnRleHRDb21wb3NlclByb3BzIHtcbiAgICBwcm92aWRlcnM6IENvbnRleHRQcm92aWRlckRhdGFbXTtcbn1cblxuLyoqXG4gKiBUYWtlcyBhbiBhcnJheSBvZiBjb250ZXh0IHByb3ZpZGVycyBhbmQgY29tcG9zZXMgdGhlbSBpbnRvIGFcbiAqIGhpZXJhcmNoeTpcbiAqXG4gKiA8Q29tcDEgey4uLnByb3BzfT5cbiAqICAgICA8Q29tcDIgey4uLnByb3BzfT5cbiAqICAgICAgICAgPENvbXAzIHsuLi5wcm9wc30+XG4gKiAgICAgICAgICAgICB7Y2hpbGRyZW59XG4gKiAgICAgICAgIDwvQ29tcDM+XG4gKiAgICAgPC9Db21wMj5cbiAqIDwvQ29tcDE+XG4gKi9cbmV4cG9ydCBjb25zdCBDb250ZXh0Q29tcG9zZXI6IFJlYWN0LkZDPENvbnRleHRDb21wb3NlclByb3BzPiA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgcHJvdmlkZXJzLCBjaGlsZHJlbiB9ID0gcHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICB7cHJvdmlkZXJzLnJlZHVjZVJpZ2h0KChhY2MsIGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBQcm92aWRlciA9IGRhdGEucHJvdmlkZXI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDxQcm92aWRlciB2YWx1ZT17ZGF0YS52YWx1ZX0+e2FjY308L1Byb3ZpZGVyPjtcbiAgICAgICAgICAgIH0sIGNoaWxkcmVuKX1cbiAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICApO1xufTtcbiIsIi8qKlxuICogQGF1dGhvciBUaW11ciBLdXpoYWdhbGl5ZXYgPHRpbS5rdXpoQGdtYWlsLmNvbT5cbiAqIEBjb3B5cmlnaHQgMjAxOVxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IEV4YWN0VHJpZSBmcm9tICdleGFjdC10cmllJztcbmltcG9ydCBtZW1vaXplIGZyb20gJ21lbW9pemVlJztcbmltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBOdWxsYWJsZSB9IGZyb20gJ3RzZGVmJztcblxuaW1wb3J0IHsgQ2hvbmt5SWNvbk5hbWUgfSBmcm9tICcuLi9jb21wb25lbnRzL2V4dGVybmFsL0Nob25reUljb24nO1xuaW1wb3J0IHsgRmlsZURhdGEsIEZpbGVJY29uRGF0YSB9IGZyb20gJy4uL3R5cGVkZWYnO1xuXG5jb25zdCBnZXRJY29uVHJpZSA9IG1lbW9pemUoKCkgPT4ge1xuICAgIGxldCBjb2xvdXJJbmRleCA9IDA7XG4gICAgY29uc3Qgc3RlcCA9IDU7XG5cbiAgICBjb25zdCBJY29uc1RvRXh0ZW5zaW9ucyA9IFtcbiAgICAgICAgW0Nob25reUljb25OYW1lLmxpY2Vuc2UsIFsnbGljZW5zZSddXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLmNvbmZpZywgWydzZmsnLCAnaW5pJywgJ3lhbWwnLCAndG9tbCcsICdpbWwnXV0sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS5tb2RlbCwgWyczZHMnLCAnb2JqJywgJ3BseScsICdmYngnXV0sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS5kYXRhYmFzZSwgWydqc29uJywgJ3NxbCcsICducHknLCAnbnB6J11dLFxuICAgICAgICBbQ2hvbmt5SWNvbk5hbWUudGV4dCwgWyd0eHQnLCAnbWQnXV0sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS5hcmNoaXZlLCBbJ3ppcCcsICdyYXInLCAndGFyJywgJ3Rhci5neiddXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLmNzdiwgWydjc3YnLCAneGxzJywgJ3hsc3gnXV0sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS5pbWFnZSwgSW1hZ2VFeHRlbnNpb25zXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLnBkZiwgWydwZGYnXV0sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS53b3JkLCBbJ2RvYycsICdkb2N4JywgJ29kdCddXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLnZpZGVvLCBWaWRlb0V4dGVuc2lvbnNdLFxuICAgICAgICBbXG4gICAgICAgICAgICBDaG9ua3lJY29uTmFtZS5jb2RlLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICdodG1sJyxcbiAgICAgICAgICAgICAgICAncGhwJyxcbiAgICAgICAgICAgICAgICAnY3NzJyxcbiAgICAgICAgICAgICAgICAnc2FzcycsXG4gICAgICAgICAgICAgICAgJ3Njc3MnLFxuICAgICAgICAgICAgICAgICdsZXNzJyxcbiAgICAgICAgICAgICAgICAnY3BwJyxcbiAgICAgICAgICAgICAgICAnaCcsXG4gICAgICAgICAgICAgICAgJ2hwcCcsXG4gICAgICAgICAgICAgICAgJ2MnLFxuICAgICAgICAgICAgICAgICd4bWwnLFxuICAgICAgICAgICAgICAgICdpcHluYicsXG4gICAgICAgICAgICBdLFxuICAgICAgICBdLFxuICAgICAgICBbQ2hvbmt5SWNvbk5hbWUuaW5mbywgWydiaWInLCAncmVhZG1lJywgJ25mbyddXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLmtleSwgWydwZW0nLCAncHViJ11dLFxuICAgICAgICBbQ2hvbmt5SWNvbk5hbWUubG9jaywgWydsb2NrJywgJ2xvY2suanNvbicsICdzaHJpbmt3cmFwLmpzb24nXV0sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS5tdXNpYywgQXVkaW9FeHRlbnNpb25zXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLmZsYXNoLCBbJ3N3ZiddXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLnRlcm1pbmFsLCBbJ3J1bicsICdzaCddXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLnRyYXNoLCBbJy5UcmFzaGVzJ11dLFxuICAgICAgICBbQ2hvbmt5SWNvbk5hbWUuYXV0aG9ycywgWydhdXRob3JzJywgJ2NvbnRyaWJ1dG9ycyddXSxcblxuICAgICAgICBbQ2hvbmt5SWNvbk5hbWUuYWRvYmUsIFsncHNkJ11dLFxuICAgICAgICBbQ2hvbmt5SWNvbk5hbWUuZ2l0LCBbJy5naXRpZ25vcmUnXV0sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS5saW51eCwgWydBcHBJbWFnZSddXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLndpbmRvd3MsIFsnZXhlJ11dLFxuICAgICAgICBbQ2hvbmt5SWNvbk5hbWUubm9kZWpzLCBbJ2pzJywgJ2pzeCcsICd0cycsICd0c3gnLCAnZC50cyddXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLnBocCwgWydwaHAnXV0sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS5weXRob24sIFsncHknXV0sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS51YnVudHUsIFsnZGViJ11dLFxuICAgIF0gYXMgY29uc3Q7XG5cbiAgICBjb25zdCBleGFjdFRyaWUgPSBuZXcgRXhhY3RUcmllKCk7XG4gICAgZm9yIChjb25zdCBwYWlyIG9mIEljb25zVG9FeHRlbnNpb25zKSB7XG4gICAgICAgIGNvbnN0IFtpY29uLCBleHRlbnNpb25zXSA9IHBhaXI7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBleHRlbnNpb25zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb2xvdXJJbmRleCArPSBzdGVwO1xuICAgICAgICAgICAgY29uc3QgY29sb3JDb2RlID0gKGNvbG91ckluZGV4ICUgKENvbG9yc0xpZ2h0Lmxlbmd0aCAtIDEpKSArIDE7XG4gICAgICAgICAgICBjb25zdCBpY29uRGF0YTogRmlsZUljb25EYXRhID0ge1xuICAgICAgICAgICAgICAgIGljb24sXG4gICAgICAgICAgICAgICAgY29sb3JDb2RlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGV4YWN0VHJpZS5wdXQoZXh0ZW5zaW9uc1tpXSwgaWNvbkRhdGEsIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4YWN0VHJpZTtcbn0pO1xuXG5leHBvcnQgY29uc3QgdXNlSWNvbkRhdGEgPSAoZmlsZTogTnVsbGFibGU8RmlsZURhdGE+KTogRmlsZUljb25EYXRhID0+IHtcbiAgICBjb25zdCBkZXBzID0gW2ZpbGVdO1xuICAgIHJldHVybiB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgaWYgKCFmaWxlKSByZXR1cm4geyBpY29uOiBDaG9ua3lJY29uTmFtZS5sb2FkaW5nLCBjb2xvckNvZGU6IDAgfTtcbiAgICAgICAgaWYgKGZpbGUuaXNEaXIgPT09IHRydWUpIHJldHVybiB7IGljb246IENob25reUljb25OYW1lLmZvbGRlciwgY29sb3JDb2RlOiAwIH07XG5cbiAgICAgICAgY29uc3QgaWNvblRyaWUgPSBnZXRJY29uVHJpZSgpO1xuICAgICAgICBjb25zdCBtYXRjaCA9IGljb25UcmllLmdldFdpdGhDaGVja3BvaW50cyhmaWxlLm5hbWUsICcuJywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoIDogeyBpY29uOiBDaG9ua3lJY29uTmFtZS5maWxlLCBjb2xvckNvZGU6IDMyIH07XG4gICAgfSwgZGVwcyk7XG59O1xuXG5leHBvcnQgY29uc3QgVmlkZW9FeHRlbnNpb25zOiBzdHJpbmdbXSA9IFtcbiAgICAnM2cyJyxcbiAgICAnM2dwJyxcbiAgICAnM2dwcCcsXG4gICAgJ2FzZicsXG4gICAgJ2FzeCcsXG4gICAgJ2F2aScsXG4gICAgJ2R2YicsXG4gICAgJ2Y0dicsXG4gICAgJ2ZsaScsXG4gICAgJ2ZsdicsXG4gICAgJ2Z2dCcsXG4gICAgJ2gyNjEnLFxuICAgICdoMjYzJyxcbiAgICAnaDI2NCcsXG4gICAgJ2pwZ20nLFxuICAgICdqcGd2JyxcbiAgICAnanBtJyxcbiAgICAnbTF2JyxcbiAgICAnbTJ2JyxcbiAgICAnbTR1JyxcbiAgICAnbTR2JyxcbiAgICAnbWoyJyxcbiAgICAnbWpwMicsXG4gICAgJ21rM2QnLFxuICAgICdta3MnLFxuICAgICdta3YnLFxuICAgICdtbmcnLFxuICAgICdtb3YnLFxuICAgICdtb3ZpZScsXG4gICAgJ21wNCcsXG4gICAgJ21wNHYnLFxuICAgICdtcGUnLFxuICAgICdtcGVnJyxcbiAgICAnbXBnJyxcbiAgICAnbXBnNCcsXG4gICAgJ214dScsXG4gICAgJ29ndicsXG4gICAgJ3B5dicsXG4gICAgJ3F0JyxcbiAgICAnc212JyxcbiAgICAndHMnLFxuICAgICd1dmgnLFxuICAgICd1dm0nLFxuICAgICd1dnAnLFxuICAgICd1dnMnLFxuICAgICd1dnUnLFxuICAgICd1dnYnLFxuICAgICd1dnZoJyxcbiAgICAndXZ2bScsXG4gICAgJ3V2dnAnLFxuICAgICd1dnZzJyxcbiAgICAndXZ2dScsXG4gICAgJ3V2dnYnLFxuICAgICd2aXYnLFxuICAgICd2b2InLFxuICAgICd3ZWJtJyxcbiAgICAnd20nLFxuICAgICd3bXYnLFxuICAgICd3bXgnLFxuICAgICd3dngnLFxuXTtcbmV4cG9ydCBjb25zdCBJbWFnZUV4dGVuc2lvbnM6IHN0cmluZ1tdID0gW1xuICAgICczZHMnLFxuICAgICdhcG5nJyxcbiAgICAnYXp2JyxcbiAgICAnYm1wJyxcbiAgICAnYm1wJyxcbiAgICAnYnRpZicsXG4gICAgJ2NnbScsXG4gICAgJ2NteCcsXG4gICAgJ2RqdicsXG4gICAgJ2RqdnUnLFxuICAgICdkcmxlJyxcbiAgICAnZHdnJyxcbiAgICAnZHhmJyxcbiAgICAnZW1mJyxcbiAgICAnZXhyJyxcbiAgICAnZmJzJyxcbiAgICAnZmgnLFxuICAgICdmaDQnLFxuICAgICdmaDUnLFxuICAgICdmaDcnLFxuICAgICdmaGMnLFxuICAgICdmaXRzJyxcbiAgICAnZnB4JyxcbiAgICAnZnN0JyxcbiAgICAnZzMnLFxuICAgICdnaWYnLFxuICAgICdoZWljJyxcbiAgICAnaGVpY3MnLFxuICAgICdoZWlmJyxcbiAgICAnaGVpZnMnLFxuICAgICdpY28nLFxuICAgICdpY28nLFxuICAgICdpZWYnLFxuICAgICdqbHMnLFxuICAgICdqbmcnLFxuICAgICdqcDInLFxuICAgICdqcGUnLFxuICAgICdqcGVnJyxcbiAgICAnanBmJyxcbiAgICAnanBnJyxcbiAgICAnanBnMicsXG4gICAgJ2pwbScsXG4gICAgJ2pweCcsXG4gICAgJ2p4cicsXG4gICAgJ2t0eCcsXG4gICAgJ21kaScsXG4gICAgJ21tcicsXG4gICAgJ25weCcsXG4gICAgJ3BibScsXG4gICAgJ3BjdCcsXG4gICAgJ3BjeCcsXG4gICAgJ3BjeCcsXG4gICAgJ3BnbScsXG4gICAgJ3BpYycsXG4gICAgJ3BuZycsXG4gICAgJ3BubScsXG4gICAgJ3BwbScsXG4gICAgJ3BzZCcsXG4gICAgJ3B0aScsXG4gICAgJ3JhcycsXG4gICAgJ3JnYicsXG4gICAgJ3JsYycsXG4gICAgJ3NnaScsXG4gICAgJ3NpZCcsXG4gICAgJ3N1YicsXG4gICAgJ3N2ZycsXG4gICAgJ3N2Z3onLFxuICAgICd0MzgnLFxuICAgICd0YXAnLFxuICAgICd0ZngnLFxuICAgICd0Z2EnLFxuICAgICd0aWYnLFxuICAgICd0aWZmJyxcbiAgICAndXZnJyxcbiAgICAndXZpJyxcbiAgICAndXZ2ZycsXG4gICAgJ3V2dmknLFxuICAgICd2dGYnLFxuICAgICd3Ym1wJyxcbiAgICAnd2RwJyxcbiAgICAnd2VicCcsXG4gICAgJ3dtZicsXG4gICAgJ3hibScsXG4gICAgJ3hpZicsXG4gICAgJ3hwbScsXG4gICAgJ3h3ZCcsXG5dO1xuZXhwb3J0IGNvbnN0IEF1ZGlvRXh0ZW5zaW9uczogc3RyaW5nW10gPSBbXG4gICAgJzNncHAnLFxuICAgICdhYWMnLFxuICAgICdhZHAnLFxuICAgICdhaWYnLFxuICAgICdhaWZjJyxcbiAgICAnYWlmZicsXG4gICAgJ2F1JyxcbiAgICAnY2FmJyxcbiAgICAnZHJhJyxcbiAgICAnZHRzJyxcbiAgICAnZHRzaGQnLFxuICAgICdlY2VscDQ4MDAnLFxuICAgICdlY2VscDc0NzAnLFxuICAgICdlY2VscDk2MDAnLFxuICAgICdlb2wnLFxuICAgICdmbGFjJyxcbiAgICAna2FyJyxcbiAgICAnbHZwJyxcbiAgICAnbTJhJyxcbiAgICAnbTNhJyxcbiAgICAnbTN1JyxcbiAgICAnbTRhJyxcbiAgICAnbTRhJyxcbiAgICAnbWlkJyxcbiAgICAnbWlkaScsXG4gICAgJ21rYScsXG4gICAgJ21wMicsXG4gICAgJ21wMmEnLFxuICAgICdtcDMnLFxuICAgICdtcDMnLFxuICAgICdtcDRhJyxcbiAgICAnbXBnYScsXG4gICAgJ29nYScsXG4gICAgJ29nZycsXG4gICAgJ3B5YScsXG4gICAgJ3JhJyxcbiAgICAncmEnLFxuICAgICdyYW0nLFxuICAgICdyaXAnLFxuICAgICdybWknLFxuICAgICdybXAnLFxuICAgICdzM20nLFxuICAgICdzaWwnLFxuICAgICdzbmQnLFxuICAgICdzcHgnLFxuICAgICd1dmEnLFxuICAgICd1dnZhJyxcbiAgICAnd2F2JyxcbiAgICAnd2F2JyxcbiAgICAnd2F2JyxcbiAgICAnd2F4JyxcbiAgICAnd2ViYScsXG4gICAgJ3dtYScsXG4gICAgJ3htJyxcbl07XG5leHBvcnQgY29uc3QgQ29sb3JzTGlnaHQ6IHN0cmluZ1tdID0gW1xuICAgICcjYmJiYmJiJyxcbiAgICAnI2Q2NWM1YycsXG4gICAgJyNkNjY2NWMnLFxuICAgICcjZDY3MDVjJyxcbiAgICAnI2Q2N2E1YycsXG4gICAgJyNkNjg1NWMnLFxuICAgICcjZDY4ZjVjJyxcbiAgICAnI2Q2OTk1YycsXG4gICAgJyNkNmEzNWMnLFxuICAgICcjZDZhZDVjJyxcbiAgICAnI2Q2Yjg1YycsXG4gICAgJyNkNmMyNWMnLFxuICAgICcjZDZjYzVjJyxcbiAgICAnI2Q2ZDY1YycsXG4gICAgJyNjY2Q2NWMnLFxuICAgICcjYzJkNjVjJyxcbiAgICAnI2I4ZDY1YycsXG4gICAgJyNhZGQ2NWMnLFxuICAgICcjYTNkNjVjJyxcbiAgICAnIzk5ZDY1YycsXG4gICAgJyM4ZmQ2NWMnLFxuICAgICcjODVkNjVjJyxcbiAgICAnIzdhZDY1YycsXG4gICAgJyM3MGQ2NWMnLFxuICAgICcjNjZkNjVjJyxcbiAgICAnIzVjZDY1YycsXG4gICAgJyM1Y2Q2NjYnLFxuICAgICcjNWNkNjcwJyxcbiAgICAnIzVjZDY3YScsXG4gICAgJyM1Y2Q2ODUnLFxuICAgICcjNWNkNjhmJyxcbiAgICAnIzVjZDY5OScsXG4gICAgJyM1Y2Q2YTMnLFxuICAgICcjNWNkNmFkJyxcbiAgICAnIzVjZDZiOCcsXG4gICAgJyM1Y2Q2YzInLFxuICAgICcjNWNkNmNjJyxcbiAgICAnIzVjZDZkNicsXG4gICAgJyM1Y2NjZDYnLFxuICAgICcjNWNjMmQ2JyxcbiAgICAnIzVjYjhkNicsXG4gICAgJyM1Y2FkZDYnLFxuICAgICcjNWNhM2Q2JyxcbiAgICAnIzVjOTlkNicsXG4gICAgJyM1YzhmZDYnLFxuICAgICcjNWM4NWQ2JyxcbiAgICAnIzVjN2FkNicsXG4gICAgJyM1YzcwZDYnLFxuICAgICcjNWM2NmQ2JyxcbiAgICAnIzVjNWNkNicsXG4gICAgJyM2NjVjZDYnLFxuICAgICcjNzA1Y2Q2JyxcbiAgICAnIzdhNWNkNicsXG4gICAgJyM4NTVjZDYnLFxuICAgICcjOGY1Y2Q2JyxcbiAgICAnIzk5NWNkNicsXG4gICAgJyNhMzVjZDYnLFxuICAgICcjYWQ1Y2Q2JyxcbiAgICAnI2I4NWNkNicsXG4gICAgJyNjMjVjZDYnLFxuICAgICcjY2M1Y2Q2JyxcbiAgICAnI2Q2NWNkNicsXG4gICAgJyNkNjVjY2MnLFxuICAgICcjZDY1Y2MyJyxcbiAgICAnI2Q2NWNiOCcsXG4gICAgJyNkNjVjYWQnLFxuICAgICcjZDY1Y2EzJyxcbiAgICAnI2Q2NWM5OScsXG4gICAgJyNkNjVjOGYnLFxuICAgICcjZDY1Yzg1JyxcbiAgICAnI2Q2NWM3YScsXG4gICAgJyNkNjVjNzAnLFxuICAgICcjZDY1YzY2Jyxcbl07XG5leHBvcnQgY29uc3QgQ29sb3JzRGFyazogc3RyaW5nW10gPSBbXG4gICAgJyM3NzcnLFxuICAgICcjOGYzZDNkJyxcbiAgICAnIzhmNDQzZCcsXG4gICAgJyM4ZjRiM2QnLFxuICAgICcjOGY1MjNkJyxcbiAgICAnIzhmNTgzZCcsXG4gICAgJyM4ZjVmM2QnLFxuICAgICcjOGY2NjNkJyxcbiAgICAnIzhmNmQzZCcsXG4gICAgJyM4Zjc0M2QnLFxuICAgICcjOGY3YTNkJyxcbiAgICAnIzhmODEzZCcsXG4gICAgJyM4Zjg4M2QnLFxuICAgICcjOGY4ZjNkJyxcbiAgICAnIzg4OGYzZCcsXG4gICAgJyM4MThmM2QnLFxuICAgICcjN2E4ZjNkJyxcbiAgICAnIzc0OGYzZCcsXG4gICAgJyM2ZDhmM2QnLFxuICAgICcjNjY4ZjNkJyxcbiAgICAnIzVmOGYzZCcsXG4gICAgJyM1ODhmM2QnLFxuICAgICcjNTI4ZjNkJyxcbiAgICAnIzRiOGYzZCcsXG4gICAgJyM0NDhmM2QnLFxuICAgICcjM2Q4ZjNkJyxcbiAgICAnIzNkOGY0NCcsXG4gICAgJyMzZDhmNGInLFxuICAgICcjM2Q4ZjUyJyxcbiAgICAnIzNkOGY1OCcsXG4gICAgJyMzZDhmNWYnLFxuICAgICcjM2Q4ZjY2JyxcbiAgICAnIzNkOGY2ZCcsXG4gICAgJyMzZDhmNzQnLFxuICAgICcjM2Q4ZjdhJyxcbiAgICAnIzNkOGY4MScsXG4gICAgJyMzZDhmODgnLFxuICAgICcjM2Q4ZjhmJyxcbiAgICAnIzNkODg4ZicsXG4gICAgJyMzZDgxOGYnLFxuICAgICcjM2Q3YThmJyxcbiAgICAnIzNkNzQ4ZicsXG4gICAgJyMzZDZkOGYnLFxuICAgICcjM2Q2NjhmJyxcbiAgICAnIzNkNWY4ZicsXG4gICAgJyMzZDU4OGYnLFxuICAgICcjM2Q1MjhmJyxcbiAgICAnIzNkNGI4ZicsXG4gICAgJyMzZDQ0OGYnLFxuICAgICcjM2QzZDhmJyxcbiAgICAnIzQ0M2Q4ZicsXG4gICAgJyM0YjNkOGYnLFxuICAgICcjNTIzZDhmJyxcbiAgICAnIzU4M2Q4ZicsXG4gICAgJyM1ZjNkOGYnLFxuICAgICcjNjYzZDhmJyxcbiAgICAnIzZkM2Q4ZicsXG4gICAgJyM3NDNkOGYnLFxuICAgICcjN2EzZDhmJyxcbiAgICAnIzgxM2Q4ZicsXG4gICAgJyM4ODNkOGYnLFxuICAgICcjOGYzZDhmJyxcbiAgICAnIzhmM2Q4OCcsXG4gICAgJyM4ZjNkODEnLFxuICAgICcjOGYzZDdhJyxcbiAgICAnIzhmM2Q3NCcsXG4gICAgJyM4ZjNkNmQnLFxuICAgICcjOGYzZDY2JyxcbiAgICAnIzhmM2Q1ZicsXG4gICAgJyM4ZjNkNTgnLFxuICAgICcjOGYzZDUyJyxcbiAgICAnIzhmM2Q0YicsXG4gICAgJyM4ZjNkNDQnLFxuXTtcbiIsIi8qKlxuICogQGF1dGhvciBUaW11ciBLdXpoYWdhbGl5ZXYgPHRpbS5rdXpoQGdtYWlsLmNvbT5cbiAqIEBjb3B5cmlnaHQgMjAyMFxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGludGVyZmFjZSBUZXh0UGxhY2Vob2xkZXJQcm9wcyB7XG4gICAgbWluTGVuZ3RoOiBudW1iZXI7XG4gICAgbWF4TGVuZ3RoOiBudW1iZXI7XG59XG5cbmNvbnN0IGdldFJhbmRvbUludCA9IChtaW46IG51bWJlciwgbWF4OiBudW1iZXIpID0+IHtcbiAgICByZXR1cm4gbWluICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTWF0aC5mbG9vcihtYXggLSBtaW4pKTtcbn07XG5leHBvcnQgY29uc3QgVGV4dFBsYWNlaG9sZGVyOiBSZWFjdC5GQzxUZXh0UGxhY2Vob2xkZXJQcm9wcz4gPSBSZWFjdC5tZW1vKChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgbWluTGVuZ3RoLCBtYXhMZW5ndGggfSA9IHByb3BzO1xuXG4gICAgY29uc3QgcGxhY2Vob2xkZXJMZW5ndGggPSBnZXRSYW5kb21JbnQobWluTGVuZ3RoLCBtYXhMZW5ndGgpO1xuICAgIGNvbnN0IHdoaXRlc3BhY2UgPSAnJm5ic3A7Jy5yZXBlYXQocGxhY2Vob2xkZXJMZW5ndGgpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPHNwYW5cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImNob25reS10ZXh0LXBsYWNlaG9sZGVyXCJcbiAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogd2hpdGVzcGFjZSB9fVxuICAgICAgICAvPlxuICAgICk7XG59KTtcbiIsIi8qKlxuICogQGF1dGhvciBUaW11ciBLdXpoYWdhbGl5ZXYgPHRpbS5rdXpoQGdtYWlsLmNvbT5cbiAqIEBjb3B5cmlnaHQgMjAyMFxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IGMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTnVsbGFibGUgfSBmcm9tICd0c2RlZic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZVRodW1ibmFpbFByb3BzIHtcbiAgICB0aHVtYm5haWxVcmw6IE51bGxhYmxlPHN0cmluZz47XG59XG5cbmV4cG9ydCBjb25zdCBGaWxlVGh1bWJuYWlsOiBSZWFjdC5GQzxGaWxlVGh1bWJuYWlsUHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyB0aHVtYm5haWxVcmwgfSA9IHByb3BzO1xuXG4gICAgY29uc3QgdGh1bWJuYWlsU3R5bGU6IFJlYWN0LkNTU1Byb3BlcnRpZXMgPSB0aHVtYm5haWxVcmxcbiAgICAgICAgPyB7IGJhY2tncm91bmRJbWFnZTogYHVybCgnJHt0aHVtYm5haWxVcmx9JylgIH1cbiAgICAgICAgOiB7fTtcblxuICAgIGNvbnN0IGNsYXNzTmFtZSA9IGMoe1xuICAgICAgICAnY2hvbmt5LWZpbGUtdGh1bWJuYWlsJzogdHJ1ZSxcbiAgICAgICAgJ2Nob25reS1maWxlLXRodW1ibmFpbC1oaWRkZW4nOiAhdGh1bWJuYWlsVXJsLFxuICAgIH0pO1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBzdHlsZT17dGh1bWJuYWlsU3R5bGV9IC8+O1xufTtcbiIsImltcG9ydCBjIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTnVsbGFibGUgfSBmcm9tICd0c2RlZic7XG5cbmltcG9ydCB7IEZpbGVEYXRhIH0gZnJvbSAnLi4vLi4vdHlwZWRlZic7XG5pbXBvcnQgeyBDb2xvcnNEYXJrLCBDb2xvcnNMaWdodCwgdXNlSWNvbkRhdGEgfSBmcm9tICcuLi8uLi91dGlsL2ZpbGUtaWNvbi1oZWxwZXInO1xuaW1wb3J0IHsgQ2hvbmt5SWNvbkZBLCBDaG9ua3lJY29uTmFtZSB9IGZyb20gJy4uL2V4dGVybmFsL0Nob25reUljb24nO1xuaW1wb3J0IHsgVGV4dFBsYWNlaG9sZGVyIH0gZnJvbSAnLi4vZXh0ZXJuYWwvVGV4dFBsYWNlaG9sZGVyJztcbmltcG9ydCB7IHVzZURuZEljb24sIHVzZVRodW1ibmFpbFVybCB9IGZyb20gJy4vQmFzZUZpbGVFbnRyeS1ob29rcyc7XG5pbXBvcnQgeyBEbkRQcm9wcyB9IGZyb20gJy4vRG5ERmlsZUVudHJ5JztcbmltcG9ydCB7IEZpbGVUaHVtYm5haWwgfSBmcm9tICcuL0ZpbGVUaHVtYm5haWwnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVFbnRyeVByb3BzIGV4dGVuZHMgRG5EUHJvcHMge1xuICAgIGZpbGU6IE51bGxhYmxlPEZpbGVEYXRhPjtcblxuICAgIGRpc3BsYXlJbmRleDogbnVtYmVyOyAvLyBJbmRleCBhdCB3aGljaCB0aGlzIGZpbGUgYXBwZWFycyBpbiB0aGUgZmlsZSBsaXN0XG5cbiAgICBzZWxlY3RlZDogYm9vbGVhbjtcblxuICAgIHN0eWxlPzogUmVhY3QuQ1NTUHJvcGVydGllcztcbn1cblxuZXhwb3J0IGNvbnN0IEJhc2VGaWxlRW50cnk6IFJlYWN0LkZDPEZpbGVFbnRyeVByb3BzPiA9IFJlYWN0Lm1lbW8oKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBmaWxlLCBzZWxlY3RlZCwgc3R5bGUsIGRuZElzRHJhZ2dpbmcsIGRuZElzT3ZlciwgZG5kQ2FuRHJvcCB9ID0gcHJvcHM7XG5cbiAgICAvLyBEZWFsIHdpdGggdGh1bWJuYWlsc1xuICAgIGNvbnN0IFt0aHVtYm5haWxVcmwsIHNldFRodW1ibmFpbFVybF0gPSB1c2VTdGF0ZTxOdWxsYWJsZTxzdHJpbmc+PihudWxsKTtcbiAgICBjb25zdCBbdGh1bWJuYWlsTG9hZGluZywgc2V0VGh1bWJuYWlsTG9hZGluZ10gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG4gICAgdXNlVGh1bWJuYWlsVXJsKGZpbGUsIHNldFRodW1ibmFpbFVybCwgc2V0VGh1bWJuYWlsTG9hZGluZyk7XG5cbiAgICAvLyBEZWFsIHdpdGggZmlsZSBpY29uXG4gICAgY29uc3QgaWNvbkRhdGEgPSB1c2VJY29uRGF0YShmaWxlKTtcbiAgICBjb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSB0aHVtYm5haWxVcmxcbiAgICAgICAgPyBDb2xvcnNEYXJrW2ljb25EYXRhLmNvbG9yQ29kZV1cbiAgICAgICAgOiBDb2xvcnNMaWdodFtpY29uRGF0YS5jb2xvckNvZGVdO1xuICAgIGNvbnN0IGljb25TcGluID0gdGh1bWJuYWlsTG9hZGluZyB8fCAhZmlsZTtcbiAgICBjb25zdCBpY29uID0gdGh1bWJuYWlsTG9hZGluZyA/IENob25reUljb25OYW1lLmxvYWRpbmcgOiBpY29uRGF0YS5pY29uO1xuXG4gICAgLy8gRGVhbCB3aXRoIGRyYWcgJiBkcm9wXG4gICAgY29uc3QgZG5kSWNvbiA9IHVzZURuZEljb24oc2VsZWN0ZWQsIGRuZElzRHJhZ2dpbmcsIGRuZElzT3ZlciwgZG5kQ2FuRHJvcCk7XG5cbiAgICAvLyBSZW5kZXIgdGhlIGNvbXBvbmVudFxuICAgIGNvbnN0IGNsYXNzTmFtZSA9IGMoe1xuICAgICAgICAnY2hvbmt5LWZpbGUtZW50cnknOiB0cnVlLFxuICAgICAgICAnY2hvbmt5LWZpbGUtZW50cnktc2VsZWN0ZWQnOiBzZWxlY3RlZCxcbiAgICAgICAgJ2Nob25reS1maWxlLWVudHJ5LWRyYWdnaW5nJzogZG5kSXNEcmFnZ2luZyxcbiAgICAgICAgJ2Nob25reS1maWxlLWVudHJ5LWRyb3AtaG92ZXJlZCc6IGRuZElzT3ZlciAmJiBkbmRDYW5Ecm9wLFxuICAgIH0pO1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9IHN0eWxlPXtzdHlsZX0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNob25reS1maWxlLWVudHJ5LWluc2lkZVwiPlxuICAgICAgICAgICAgICAgIHtkbmRJY29uICYmIChcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjaG9ua3ktZmlsZS1lbnRyeS1kbmQtaW5kaWNhdG9yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Q2hvbmt5SWNvbkZBIGljb249e2RuZEljb259IC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjaG9ua3ktZmlsZS1lbnRyeS1wcmV2aWV3XCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2hvbmt5LWZpbGUtaWNvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjaG9ua3ktZmlsZS1pY29uLWluc2lkZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDaG9ua3lJY29uRkEgaWNvbj17aWNvbn0gc3Bpbj17aWNvblNwaW59IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2hvbmt5LWZpbGUtc2VsZWN0aW9uXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPEZpbGVUaHVtYm5haWwgdGh1bWJuYWlsVXJsPXt0aHVtYm5haWxVcmx9IC8+XG4gICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNob25reS1maWxlLWJhY2tncm91bmRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yIH19XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjaG9ua3ktZmlsZS1lbnRyeS1kZXNjcmlwdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICB7ZmlsZSA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUubmFtZVxuICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgPFRleHRQbGFjZWhvbGRlciBtaW5MZW5ndGg9ezE1fSBtYXhMZW5ndGg9ezIwfSAvPlxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59KTtcbiIsImltcG9ydCB7IHVzZUNvbnRleHQsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE5pbGFibGUsIE51bGxhYmxlIH0gZnJvbSAndHNkZWYnO1xuXG5pbXBvcnQgeyBGaWxlRGF0YSB9IGZyb20gJy4uLy4uL3R5cGVkZWYnO1xuaW1wb3J0IHsgQ2hvbmt5VGh1bWJuYWlsR2VuZXJhdG9yQ29udGV4dCB9IGZyb20gJy4uLy4uL3V0aWwvY29udGV4dCc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi8uLi91dGlsL2xvZ2dlcic7XG5pbXBvcnQgeyBDaG9ua3lJY29uTmFtZSB9IGZyb20gJy4uL2V4dGVybmFsL0Nob25reUljb24nO1xuXG5leHBvcnQgY29uc3QgdXNlRG5kSWNvbiA9IChcbiAgICBzZWxlY3RlZDogTmlsYWJsZTxib29sZWFuPixcbiAgICBpc0RyYWdnaW5nOiBOaWxhYmxlPGJvb2xlYW4+LFxuICAgIGlzT3ZlcjogTmlsYWJsZTxib29sZWFuPixcbiAgICBjYW5Ecm9wOiBOaWxhYmxlPGJvb2xlYW4+XG4pOiBOdWxsYWJsZTxDaG9ua3lJY29uTmFtZT4gPT4ge1xuICAgIGlmIChpc092ZXIpIHtcbiAgICAgICAgcmV0dXJuIGNhbkRyb3AgJiYgIXNlbGVjdGVkXG4gICAgICAgICAgICA/IENob25reUljb25OYW1lLmRuZENhbkRyb3BcbiAgICAgICAgICAgIDogQ2hvbmt5SWNvbk5hbWUuZG5kQ2Fubm90RHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNEcmFnZ2luZyA/IENob25reUljb25OYW1lLmRuZERyYWdnaW5nIDogbnVsbDtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VUaHVtYm5haWxVcmwgPSAoXG4gICAgZmlsZTogTnVsbGFibGU8RmlsZURhdGE+LFxuICAgIHNldFRodW1ibmFpbFVybDogKHVybDogc3RyaW5nKSA9PiB2b2lkLFxuICAgIHNldFRodW1ibmFpbExvYWRpbmc6IChzdGF0ZTogYm9vbGVhbikgPT4gdm9pZFxuKSA9PiB7XG4gICAgY29uc3QgdGh1bWJuYWlsR2VuZXJhdG9yID0gdXNlQ29udGV4dChDaG9ua3lUaHVtYm5haWxHZW5lcmF0b3JDb250ZXh0KTtcblxuICAgIGNvbnN0IGRlcHMgPSBbZmlsZSwgc2V0VGh1bWJuYWlsVXJsLCBzZXRUaHVtYm5haWxMb2FkaW5nLCB0aHVtYm5haWxHZW5lcmF0b3JdO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGxldCBsb2FkaW5nQ2FuY2VsbGVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGZpbGUpIHtcbiAgICAgICAgICAgIGlmICh0aHVtYm5haWxHZW5lcmF0b3IpIHtcbiAgICAgICAgICAgICAgICBzZXRUaHVtYm5haWxMb2FkaW5nKHRydWUpO1xuICAgICAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHRodW1ibmFpbEdlbmVyYXRvcihmaWxlKSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKHRodW1ibmFpbFVybDogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9hZGluZ0NhbmNlbGxlZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGh1bWJuYWlsTG9hZGluZyhmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aHVtYm5haWxVcmwgJiYgdHlwZW9mIHRodW1ibmFpbFVybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaHVtYm5haWxVcmwodGh1bWJuYWlsVXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsb2FkaW5nQ2FuY2VsbGVkKSBzZXRUaHVtYm5haWxMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZ2dlci5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgVXNlci1kZWZpbmVkIFwidGh1bWJuYWlsR2VuZXJhdG9yXCIgaGFuZGxlciB0aHJldyBhbiBlcnJvcjogJHtlcnJvci5tZXNzYWdlfWBcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmaWxlLnRodW1ibmFpbFVybCkge1xuICAgICAgICAgICAgICAgIHNldFRodW1ibmFpbFVybChmaWxlLnRodW1ibmFpbFVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgbG9hZGluZ0NhbmNlbGxlZCA9IHRydWU7XG4gICAgICAgIH07XG4gICAgfSwgZGVwcyk7XG59O1xuIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBOdWxsYWJsZSB9IGZyb20gJ3RzZGVmJztcblxuaW1wb3J0IHsgRmlsZURhdGEgfSBmcm9tICcuLi8uLi90eXBlZGVmJztcbmltcG9ydCB7IENob25reURpc3BhdGNoU3BlY2lhbEFjdGlvbkNvbnRleHQgfSBmcm9tICcuLi8uLi91dGlsL2NvbnRleHQnO1xuaW1wb3J0IHsgU3BlY2lhbEFjdGlvbiwgU3BlY2lhbEZpbGVNb3VzZUNsaWNrQWN0aW9uIH0gZnJvbSAnLi4vLi4vdXRpbC9zcGVjaWFsLWFjdGlvbnMnO1xuaW1wb3J0IHsgS2V5Ym9hcmRDbGlja0V2ZW50LCBNb3VzZUNsaWNrRXZlbnQgfSBmcm9tICcuL0NsaWNrYWJsZVdyYXBwZXInO1xuXG5leHBvcnQgY29uc3QgdXNlRmlsZUNsaWNrSGFuZGxlcnMgPSAoZmlsZTogTnVsbGFibGU8RmlsZURhdGE+KSA9PiB7XG4gICAgY29uc3QgZGlzcGF0Y2hTcGVjaWFsQWN0aW9uID0gdXNlQ29udGV4dChDaG9ua3lEaXNwYXRjaFNwZWNpYWxBY3Rpb25Db250ZXh0KTtcblxuICAgIC8vIFByZXBhcmUgYmFzZSBoYW5kbGVyc1xuICAgIGNvbnN0IGhhbmRsZXJEZXBzID0gW2ZpbGUsIGRpc3BhdGNoU3BlY2lhbEFjdGlvbl07XG4gICAgY29uc3Qgb25Nb3VzZUNsaWNrID0gdXNlQ2FsbGJhY2soXG4gICAgICAgIChcbiAgICAgICAgICAgIGV2ZW50OiBNb3VzZUNsaWNrRXZlbnQsXG4gICAgICAgICAgICBjbGlja1R5cGU6IFNwZWNpYWxGaWxlTW91c2VDbGlja0FjdGlvblsnY2xpY2tUeXBlJ11cbiAgICAgICAgKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWZpbGUpIHJldHVybjtcblxuICAgICAgICAgICAgZGlzcGF0Y2hTcGVjaWFsQWN0aW9uKHtcbiAgICAgICAgICAgICAgICBhY3Rpb25OYW1lOiBTcGVjaWFsQWN0aW9uLk1vdXNlQ2xpY2tGaWxlLFxuICAgICAgICAgICAgICAgIGNsaWNrVHlwZSxcbiAgICAgICAgICAgICAgICBmaWxlLFxuICAgICAgICAgICAgICAgIGFsdEtleTogZXZlbnQuYWx0S2V5LFxuICAgICAgICAgICAgICAgIGN0cmxLZXk6IGV2ZW50LmN0cmxLZXksXG4gICAgICAgICAgICAgICAgc2hpZnRLZXk6IGV2ZW50LnNoaWZ0S2V5LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGhhbmRsZXJEZXBzXG4gICAgKTtcbiAgICBjb25zdCBvbktleWJvYXJkQ2xpY2sgPSB1c2VDYWxsYmFjaygoZXZlbnQ6IEtleWJvYXJkQ2xpY2tFdmVudCkgPT4ge1xuICAgICAgICBpZiAoIWZpbGUpIHJldHVybjtcblxuICAgICAgICBkaXNwYXRjaFNwZWNpYWxBY3Rpb24oe1xuICAgICAgICAgICAgYWN0aW9uTmFtZTogU3BlY2lhbEFjdGlvbi5LZXlib2FyZENsaWNrRmlsZSxcbiAgICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgICBlbnRlcktleTogZXZlbnQuZW50ZXJLZXksXG4gICAgICAgICAgICBzcGFjZUtleTogZXZlbnQuc3BhY2VLZXksXG4gICAgICAgICAgICBhbHRLZXk6IGV2ZW50LmFsdEtleSxcbiAgICAgICAgICAgIGN0cmxLZXk6IGV2ZW50LmN0cmxLZXksXG4gICAgICAgICAgICBzaGlmdEtleTogZXZlbnQuc2hpZnRLZXksXG4gICAgICAgIH0pO1xuICAgIH0sIGhhbmRsZXJEZXBzKTtcblxuICAgIC8vIFByZXBhcmUgc2luZ2xlL2RvdWJsZSBjbGljayBoYW5kbGVyc1xuICAgIGNvbnN0IG9uU2luZ2xlQ2xpY2sgPSB1c2VDYWxsYmFjayhcbiAgICAgICAgKGV2ZW50OiBNb3VzZUNsaWNrRXZlbnQpID0+IG9uTW91c2VDbGljayhldmVudCwgJ3NpbmdsZScpLFxuICAgICAgICBbb25Nb3VzZUNsaWNrXVxuICAgICk7XG4gICAgY29uc3Qgb25Eb3VibGVDbGljayA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAoZXZlbnQ6IE1vdXNlQ2xpY2tFdmVudCkgPT4gb25Nb3VzZUNsaWNrKGV2ZW50LCAnZG91YmxlJyksXG4gICAgICAgIFtvbk1vdXNlQ2xpY2tdXG4gICAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIG9uU2luZ2xlQ2xpY2ssXG4gICAgICAgIG9uRG91YmxlQ2xpY2ssXG4gICAgICAgIG9uS2V5Ym9hcmRDbGljayxcbiAgICB9O1xufTtcbiIsIi8qKlxuICogQGF1dGhvciBUaW11ciBLdXpoYWdhbGl5ZXYgPHRpbS5rdXpoQGdtYWlsLmNvbT5cbiAqIEBjb3B5cmlnaHQgMjAyMFxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VDb250ZXh0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTmlsYWJsZSwgTnVsbGFibGUgfSBmcm9tICd0c2RlZic7XG5cbmltcG9ydCB7IENob25reURvdWJsZUNsaWNrRGVsYXlDb250ZXh0IH0gZnJvbSAnLi4vLi4vdXRpbC9jb250ZXh0JztcbmltcG9ydCB7XG4gICAgS2V5Ym9hcmRDbGlja0V2ZW50LFxuICAgIEtleWJvYXJkQ2xpY2tFdmVudEhhbmRsZXIsXG4gICAgTW91c2VDbGlja0V2ZW50LFxuICAgIE1vdXNlQ2xpY2tFdmVudEhhbmRsZXIsXG59IGZyb20gJy4vQ2xpY2thYmxlV3JhcHBlcic7XG5cbmV4cG9ydCBjb25zdCB1c2VDbGlja0hhbmRsZXIgPSAoXG4gICAgb25TaW5nbGVDbGljazogTmlsYWJsZTxNb3VzZUNsaWNrRXZlbnRIYW5kbGVyPixcbiAgICBvbkRvdWJsZUNsaWNrOiBOaWxhYmxlPE1vdXNlQ2xpY2tFdmVudEhhbmRsZXI+XG4pID0+IHtcbiAgICBjb25zdCBkb3VibGVDbGlja0RlbGF5ID0gdXNlQ29udGV4dChDaG9ua3lEb3VibGVDbGlja0RlbGF5Q29udGV4dCk7XG5cbiAgICBjb25zdCBjb3VudGVyID0gdXNlTWVtbyhcbiAgICAgICAgKCkgPT4gKHtcbiAgICAgICAgICAgIGNsaWNrQ291bnQ6IDAsXG4gICAgICAgICAgICBjbGlja1RpbWVvdXQ6IG51bGwgYXMgTnVsbGFibGU8bnVtYmVyPixcbiAgICAgICAgfSksXG4gICAgICAgIFtdXG4gICAgKTtcblxuICAgIGNvbnN0IGRlcHMgPSBbZG91YmxlQ2xpY2tEZWxheSwgb25TaW5nbGVDbGljaywgb25Eb3VibGVDbGlja107XG4gICAgcmV0dXJuIHVzZUNhbGxiYWNrKChldmVudDogUmVhY3QuTW91c2VFdmVudCkgPT4ge1xuICAgICAgICBjb25zdCBtb3VzZUNsaWNrRXZlbnQ6IE1vdXNlQ2xpY2tFdmVudCA9IHtcbiAgICAgICAgICAgIGFsdEtleTogZXZlbnQuYWx0S2V5LFxuICAgICAgICAgICAgY3RybEtleTogZXZlbnQuY3RybEtleSxcbiAgICAgICAgICAgIHNoaWZ0S2V5OiBldmVudC5zaGlmdEtleSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb3VudGVyLmNsaWNrQ291bnQrKztcbiAgICAgICAgaWYgKGNvdW50ZXIuY2xpY2tDb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgaWYgKG9uU2luZ2xlQ2xpY2spIHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIG9uU2luZ2xlQ2xpY2sobW91c2VDbGlja0V2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvdW50ZXIuY2xpY2tDb3VudCA9IDE7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjb3VudGVyLmNsaWNrVGltZW91dCA9IHNldFRpbWVvdXQoXG4gICAgICAgICAgICAgICAgKCkgPT4gKGNvdW50ZXIuY2xpY2tDb3VudCA9IDApLFxuICAgICAgICAgICAgICAgIGRvdWJsZUNsaWNrRGVsYXlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAoY291bnRlci5jbGlja0NvdW50ID09PSAyKSB7XG4gICAgICAgICAgICBpZiAob25Eb3VibGVDbGljaykge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgb25Eb3VibGVDbGljayhtb3VzZUNsaWNrRXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb3VudGVyLmNsaWNrVGltZW91dCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoY291bnRlci5jbGlja1RpbWVvdXQpO1xuICAgICAgICAgICAgICAgIGNvdW50ZXIuY2xpY2tUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjb3VudGVyLmNsaWNrQ291bnQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgZGVwcyk7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlS2V5RG93bkhhbmRsZXIgPSAob25LZXlib2FyZENsaWNrPzogS2V5Ym9hcmRDbGlja0V2ZW50SGFuZGxlcikgPT4ge1xuICAgIGNvbnN0IGRlcHMgPSBbb25LZXlib2FyZENsaWNrXTtcbiAgICByZXR1cm4gdXNlQ2FsbGJhY2soKGV2ZW50OiBSZWFjdC5LZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICAgIGlmICghb25LZXlib2FyZENsaWNrKSByZXR1cm47XG5cbiAgICAgICAgY29uc3Qga2V5Ym9hcmRDbGlja0V2ZW50OiBLZXlib2FyZENsaWNrRXZlbnQgPSB7XG4gICAgICAgICAgICBlbnRlcktleTogZXZlbnQubmF0aXZlRXZlbnQuY29kZSA9PT0gJ0VudGVyJyxcbiAgICAgICAgICAgIHNwYWNlS2V5OiBldmVudC5uYXRpdmVFdmVudC5jb2RlID09PSAnU3BhY2UnLFxuICAgICAgICAgICAgYWx0S2V5OiBldmVudC5hbHRLZXksXG4gICAgICAgICAgICBjdHJsS2V5OiBldmVudC5jdHJsS2V5LFxuICAgICAgICAgICAgc2hpZnRLZXk6IGV2ZW50LnNoaWZ0S2V5LFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChrZXlib2FyZENsaWNrRXZlbnQuc3BhY2VLZXkgfHwga2V5Ym9hcmRDbGlja0V2ZW50LmVudGVyS2V5KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgb25LZXlib2FyZENsaWNrKGtleWJvYXJkQ2xpY2tFdmVudCk7XG4gICAgICAgIH1cbiAgICB9LCBkZXBzKTtcbn07XG4iLCIvKipcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMjBcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBBbnlPYmplY3RXaXRoU3RyaW5nS2V5cyB9IGZyb20gJ3RzZGVmJztcblxuaW1wb3J0IHsgdXNlQ2xpY2tIYW5kbGVyLCB1c2VLZXlEb3duSGFuZGxlciB9IGZyb20gJy4vQ2xpY2thYmxlV3JhcHBlci1ob29rcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW91c2VDbGlja0V2ZW50IHtcbiAgICBhbHRLZXk6IGJvb2xlYW47XG4gICAgY3RybEtleTogYm9vbGVhbjtcbiAgICBzaGlmdEtleTogYm9vbGVhbjtcbn1cbmV4cG9ydCB0eXBlIE1vdXNlQ2xpY2tFdmVudEhhbmRsZXIgPSAoZXZlbnQ6IE1vdXNlQ2xpY2tFdmVudCkgPT4gdm9pZDtcblxuZXhwb3J0IGludGVyZmFjZSBLZXlib2FyZENsaWNrRXZlbnQge1xuICAgIGVudGVyS2V5OiBib29sZWFuO1xuICAgIHNwYWNlS2V5OiBib29sZWFuO1xuICAgIGFsdEtleTogYm9vbGVhbjtcbiAgICBjdHJsS2V5OiBib29sZWFuO1xuICAgIHNoaWZ0S2V5OiBib29sZWFuO1xufVxuZXhwb3J0IHR5cGUgS2V5Ym9hcmRDbGlja0V2ZW50SGFuZGxlciA9IChldmVudDogS2V5Ym9hcmRDbGlja0V2ZW50KSA9PiB2b2lkO1xuXG5leHBvcnQgaW50ZXJmYWNlIENsaWNrYWJsZVdyYXBwZXJQcm9wcyB7XG4gICAgd3JhcHBlclRhZzogYW55O1xuICAgIHBhc3N0aHJvdWdoUHJvcHM/OiBhbnk7XG5cbiAgICBvblNpbmdsZUNsaWNrPzogTW91c2VDbGlja0V2ZW50SGFuZGxlcjtcbiAgICBvbkRvdWJsZUNsaWNrPzogTW91c2VDbGlja0V2ZW50SGFuZGxlcjtcbiAgICBvbktleWJvYXJkQ2xpY2s/OiBLZXlib2FyZENsaWNrRXZlbnRIYW5kbGVyO1xufVxuXG5leHBvcnQgY29uc3QgQ2xpY2thYmxlV3JhcHBlcjogUmVhY3QuRkM8Q2xpY2thYmxlV3JhcHBlclByb3BzPiA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIHdyYXBwZXJUYWc6IFdyYXBwZXJUYWcsXG4gICAgICAgIHBhc3N0aHJvdWdoUHJvcHMsXG4gICAgICAgIG9uU2luZ2xlQ2xpY2ssXG4gICAgICAgIG9uRG91YmxlQ2xpY2ssXG4gICAgICAgIG9uS2V5Ym9hcmRDbGljayxcbiAgICB9ID0gcHJvcHM7XG5cbiAgICBjb25zdCBoYW5kbGVDbGljayA9IHVzZUNsaWNrSGFuZGxlcihvblNpbmdsZUNsaWNrLCBvbkRvdWJsZUNsaWNrKTtcbiAgICBjb25zdCBoYW5kbGVLZXlEb3duID0gdXNlS2V5RG93bkhhbmRsZXIob25LZXlib2FyZENsaWNrKTtcblxuICAgIGNvbnN0IGNvbXBQcm9wczogQW55T2JqZWN0V2l0aFN0cmluZ0tleXMgPSB7fTtcbmlmIChvblNpbmdsZUNsaWNrIHx8IG9uRG91YmxlQ2xpY2sgfHwgb25LZXlib2FyZENsaWNrKSB7XG4gICAgICAgIGNvbXBQcm9wcy5vbkNsaWNrID0gaGFuZGxlQ2xpY2s7XG4gICAgICAgIGNvbXBQcm9wcy5vbktleURvd24gPSBoYW5kbGVLZXlEb3duO1xuICAgICAgICBjb21wUHJvcHMudGFiSW5kZXggPSAwO1xuICAgIH1cblxuICAgIGNvbnN0IG1lcmdlZFByb3BzID0geyAuLi5jb21wUHJvcHMsIC4uLnBhc3N0aHJvdWdoUHJvcHMgfTtcbiAgICByZXR1cm4gPFdyYXBwZXJUYWcgey4uLm1lcmdlZFByb3BzfT57Y2hpbGRyZW59PC9XcmFwcGVyVGFnPjtcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBGaWxlSGVscGVyIH0gZnJvbSAnLi4vLi4vdXRpbC9maWxlLWhlbHBlcic7XG5pbXBvcnQgeyBCYXNlRmlsZUVudHJ5LCBGaWxlRW50cnlQcm9wcyB9IGZyb20gJy4vQmFzZUZpbGVFbnRyeSc7XG5pbXBvcnQgeyB1c2VGaWxlQ2xpY2tIYW5kbGVycyB9IGZyb20gJy4vQ2xpY2thYmxlRmlsZUVudHJ5LWhvb2tzJztcbmltcG9ydCB7IENsaWNrYWJsZVdyYXBwZXIsIENsaWNrYWJsZVdyYXBwZXJQcm9wcyB9IGZyb20gJy4vQ2xpY2thYmxlV3JhcHBlcic7XG5cbmV4cG9ydCBjb25zdCBDbGlja2FibGVGaWxlRW50cnk6IFJlYWN0LkZDPEZpbGVFbnRyeVByb3BzPiA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgZmlsZSB9ID0gcHJvcHM7XG5cbiAgICBjb25zdCBmaWxlQ2xpY2tIYW5kbGVycyA9IHVzZUZpbGVDbGlja0hhbmRsZXJzKGZpbGUpO1xuXG4gICAgY29uc3Qgd3JhcHBlclByb3BzOiBDbGlja2FibGVXcmFwcGVyUHJvcHMgPSB7XG4gICAgICAgIHdyYXBwZXJUYWc6ICdkaXYnLFxuICAgICAgICBwYXNzdGhyb3VnaFByb3BzOiB7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICdjaG9ua3ktZmlsZS1lbnRyeS1jbGlja2FibGUtd3JhcHBlciBjaG9ua3ktZmlsbC1wYXJlbnQnLFxuICAgICAgICB9LFxuICAgICAgICAuLi4oRmlsZUhlbHBlci5pc0NsaWNrYWJsZShmaWxlKSA/IGZpbGVDbGlja0hhbmRsZXJzIDogdW5kZWZpbmVkKSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPENsaWNrYWJsZVdyYXBwZXIgey4uLndyYXBwZXJQcm9wc30+XG4gICAgICAgICAgICA8QmFzZUZpbGVFbnRyeSB7Li4ucHJvcHN9IC8+XG4gICAgICAgIDwvQ2xpY2thYmxlV3JhcHBlcj5cbiAgICApO1xufTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlQ29udGV4dCwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRHJhZ09iamVjdFdpdGhUeXBlLCBEcmFnU291cmNlTW9uaXRvciwgdXNlRHJhZywgdXNlRHJvcCB9IGZyb20gJ3JlYWN0LWRuZCc7XG5pbXBvcnQgeyBnZXRFbXB0eUltYWdlIH0gZnJvbSAncmVhY3QtZG5kLWh0bWw1LWJhY2tlbmQnO1xuaW1wb3J0IHsgRXhjbHVkZUtleXMsIE5pbGFibGUsIE51bGxhYmxlIH0gZnJvbSAndHNkZWYnO1xuXG5pbXBvcnQgeyBGaWxlRGF0YSB9IGZyb20gJy4uLy4uL3R5cGVkZWYnO1xuaW1wb3J0IHsgQ2hvbmt5RGlzcGF0Y2hTcGVjaWFsQWN0aW9uQ29udGV4dCB9IGZyb20gJy4uLy4uL3V0aWwvY29udGV4dCc7XG5pbXBvcnQgeyBGaWxlSGVscGVyIH0gZnJvbSAnLi4vLi4vdXRpbC9maWxlLWhlbHBlcic7XG5pbXBvcnQgeyBTcGVjaWFsQWN0aW9uIH0gZnJvbSAnLi4vLi4vdXRpbC9zcGVjaWFsLWFjdGlvbnMnO1xuaW1wb3J0IHsgRmlsZUVudHJ5UHJvcHMgfSBmcm9tICcuL0Jhc2VGaWxlRW50cnknO1xuaW1wb3J0IHsgQ2xpY2thYmxlRmlsZUVudHJ5IH0gZnJvbSAnLi9DbGlja2FibGVGaWxlRW50cnknO1xuXG5leHBvcnQgaW50ZXJmYWNlIERuRFByb3BzIHtcbiAgICBkbmRJc0RyYWdnaW5nPzogYm9vbGVhbjtcbiAgICBkbmRJc092ZXI/OiBib29sZWFuO1xuICAgIGRuZENhbkRyb3A/OiBib29sZWFuO1xufVxuXG5leHBvcnQgdHlwZSBEbkRGaWxlRW50cnlJdGVtID0gRHJhZ09iamVjdFdpdGhUeXBlICYgeyBmaWxlOiBOdWxsYWJsZTxGaWxlRGF0YT4gfTtcbmV4cG9ydCBjb25zdCBEbkRGaWxlRW50cnlUeXBlID0gJ2Nob25reS1maWxlLWVudHJ5JztcblxuZXhwb3J0IGNvbnN0IERuREZpbGVFbnRyeTogUmVhY3QuRkM8RmlsZUVudHJ5UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBmaWxlIH0gPSBwcm9wcztcblxuICAgIGNvbnN0IGRpc3BhdGNoU3BlY2lhbEFjdGlvbiA9IHVzZUNvbnRleHQoQ2hvbmt5RGlzcGF0Y2hTcGVjaWFsQWN0aW9uQ29udGV4dCk7XG5cbiAgICBpbnRlcmZhY2UgQ2hvbmt5RG5ERHJvcFJlc3VsdCB7XG4gICAgICAgIGRyb3BUYXJnZXQ6IE5pbGFibGU8RmlsZURhdGE+O1xuICAgICAgICBkcm9wRWZmZWN0OiAnbW92ZScgfCAnY29weSc7XG4gICAgfVxuXG4gICAgLy8gRm9yIGRyYWcgc291cmNlXG4gICAgY29uc3QgY2FuRHJhZyA9IEZpbGVIZWxwZXIuaXNEcmFnZ2FibGUoZmlsZSk7XG4gICAgY29uc3Qgb25EcmFnU3RhcnQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIGlmICghRmlsZUhlbHBlci5pc0RyYWdnYWJsZShmaWxlKSkgcmV0dXJuO1xuXG4gICAgICAgIGRpc3BhdGNoU3BlY2lhbEFjdGlvbih7XG4gICAgICAgICAgICBhY3Rpb25OYW1lOiBTcGVjaWFsQWN0aW9uLkRyYWdORHJvcFN0YXJ0LFxuICAgICAgICAgICAgZHJhZ1NvdXJjZTogZmlsZSxcbiAgICAgICAgfSk7XG4gICAgfSwgW2Rpc3BhdGNoU3BlY2lhbEFjdGlvbiwgZmlsZV0pO1xuICAgIGNvbnN0IG9uRHJhZ0VuZCA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAoaXRlbTogRG5ERmlsZUVudHJ5SXRlbSwgbW9uaXRvcjogRHJhZ1NvdXJjZU1vbml0b3IpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRyb3BSZXN1bHQgPSBtb25pdG9yLmdldERyb3BSZXN1bHQoKSBhcyBDaG9ua3lEbkREcm9wUmVzdWx0O1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICFGaWxlSGVscGVyLmlzRHJhZ2dhYmxlKGZpbGUpIHx8XG4gICAgICAgICAgICAgICAgIWRyb3BSZXN1bHQgfHxcbiAgICAgICAgICAgICAgICAhZHJvcFJlc3VsdC5kcm9wVGFyZ2V0XG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRpc3BhdGNoU3BlY2lhbEFjdGlvbih7XG4gICAgICAgICAgICAgICAgYWN0aW9uTmFtZTogU3BlY2lhbEFjdGlvbi5EcmFnTkRyb3BFbmQsXG4gICAgICAgICAgICAgICAgZHJhZ1NvdXJjZTogZmlsZSxcbiAgICAgICAgICAgICAgICBkcm9wVGFyZ2V0OiBkcm9wUmVzdWx0LmRyb3BUYXJnZXQsXG4gICAgICAgICAgICAgICAgZHJvcEVmZmVjdDogZHJvcFJlc3VsdC5kcm9wRWZmZWN0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIFtkaXNwYXRjaFNwZWNpYWxBY3Rpb24sIGZpbGVdXG4gICAgKTtcblxuICAgIC8vIEZvciBkcm9wIHRhcmdldFxuICAgIGNvbnN0IG9uRHJvcCA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAoaXRlbTogRG5ERmlsZUVudHJ5SXRlbSwgbW9uaXRvcikgPT4ge1xuICAgICAgICAgICAgaWYgKCFtb25pdG9yLmNhbkRyb3AoKSkgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgY3VzdG9tRHJvcFJlc3VsdDogRXhjbHVkZUtleXM8Q2hvbmt5RG5ERHJvcFJlc3VsdCwgJ2Ryb3BFZmZlY3QnPiA9IHtcbiAgICAgICAgICAgICAgICBkcm9wVGFyZ2V0OiBmaWxlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBjdXN0b21Ecm9wUmVzdWx0O1xuICAgICAgICB9LFxuICAgICAgICBbZmlsZV1cbiAgICApO1xuICAgIGNvbnN0IGNhbkRyb3AgPSB1c2VDYWxsYmFjayhcbiAgICAgICAgKGl0ZW06IERuREZpbGVFbnRyeUl0ZW0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlzU2FtZUZpbGUgPSBpdGVtLmZpbGU/LmlkID09PSBmaWxlPy5pZDtcbiAgICAgICAgICAgIHJldHVybiBGaWxlSGVscGVyLmlzRHJvcHBhYmxlKGZpbGUpICYmICFpc1NhbWVGaWxlO1xuICAgICAgICB9LFxuICAgICAgICBbZmlsZV1cbiAgICApO1xuXG4gICAgLy8gQ3JlYXRlIHJlZnMgZm9yIHJlYWN0LWRuZCBob29rc1xuICAgIGNvbnN0IFt7IGlzRHJhZ2dpbmc6IGRuZElzRHJhZ2dpbmcgfSwgZHJhZywgcHJldmlld10gPSB1c2VEcmFnKHtcbiAgICAgICAgaXRlbTogeyB0eXBlOiBEbkRGaWxlRW50cnlUeXBlLCBmaWxlIH0gYXMgRG5ERmlsZUVudHJ5SXRlbSxcbiAgICAgICAgY2FuRHJhZyxcbiAgICAgICAgYmVnaW46IG9uRHJhZ1N0YXJ0LFxuICAgICAgICBlbmQ6IG9uRHJhZ0VuZCxcbiAgICAgICAgY29sbGVjdDogKG1vbml0b3IpID0+ICh7XG4gICAgICAgICAgICBpc0RyYWdnaW5nOiBtb25pdG9yLmlzRHJhZ2dpbmcoKSxcbiAgICAgICAgfSksXG4gICAgfSk7XG4gICAgY29uc3QgW3sgaXNPdmVyOiBkbmRJc092ZXIsIGNhbkRyb3A6IGRuZENhbkRyb3AgfSwgZHJvcF0gPSB1c2VEcm9wKHtcbiAgICAgICAgYWNjZXB0OiBEbkRGaWxlRW50cnlUeXBlLFxuICAgICAgICBkcm9wOiBvbkRyb3AsXG4gICAgICAgIGNhbkRyb3AsXG4gICAgICAgIGNvbGxlY3Q6IChtb25pdG9yKSA9PiAoe1xuICAgICAgICAgICAgaXNPdmVyOiBtb25pdG9yLmlzT3ZlcigpLFxuICAgICAgICAgICAgY2FuRHJvcDogbW9uaXRvci5jYW5Ecm9wKCksXG4gICAgICAgIH0pLFxuICAgIH0pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgLy8gU2V0IGRyYWcgcHJldmlldyB0byBhbiBlbXB0eSBpbWFnZSBiZWNhdXNlIGBEbkRGaWxlTGlzdERyYWdMYXllcmAgd2lsbFxuICAgICAgICAvLyBwcm92aWRlIGl0cyBvd24gcHJldmlldy5cbiAgICAgICAgcHJldmlldyhnZXRFbXB0eUltYWdlKCksIHsgY2FwdHVyZURyYWdnaW5nU3RhdGU6IHRydWUgfSk7XG4gICAgfSwgW10pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdlxuICAgICAgICAgICAgcmVmPXtkcm9wfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2hvbmt5LWZpbGUtZW50cnktZHJvcHBhYmxlLXdyYXBwZXIgY2hvbmt5LWZpbGwtcGFyZW50XCJcbiAgICAgICAgPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIHJlZj17RmlsZUhlbHBlci5pc0RyYWdnYWJsZShmaWxlKSA/IGRyYWcgOiBudWxsfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNob25reS1maWxlLWVudHJ5LWRyYWdnYWJsZS13cmFwcGVyIGNob25reS1maWxsLXBhcmVudFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPENsaWNrYWJsZUZpbGVFbnRyeVxuICAgICAgICAgICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgICAgICAgICAgIGRuZElzRHJhZ2dpbmc9e2RuZElzRHJhZ2dpbmd9XG4gICAgICAgICAgICAgICAgICAgIGRuZElzT3Zlcj17ZG5kSXNPdmVyfVxuICAgICAgICAgICAgICAgICAgICBkbmRDYW5Ecm9wPXtkbmRDYW5Ecm9wfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG4iLCIvKipcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMjBcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlRHJhZ0xheWVyIH0gZnJvbSAncmVhY3QtZG5kJztcbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAndHNkZWYnO1xuXG5pbXBvcnQgeyBDaG9ua3lTZWxlY3Rpb25TaXplQ29udGV4dCB9IGZyb20gJy4uLy4uL3V0aWwvY29udGV4dCc7XG5pbXBvcnQgeyBEbkRGaWxlRW50cnlJdGVtLCBEbkRGaWxlRW50cnlUeXBlIH0gZnJvbSAnLi9EbkRGaWxlRW50cnknO1xuXG5leHBvcnQgaW50ZXJmYWNlIERuREZpbGVMaXN0RHJhZ0xheWVyUHJvcHMge31cblxuY29uc3QgbGF5ZXJTdHlsZXM6IFJlYWN0LkNTU1Byb3BlcnRpZXMgPSB7XG4gICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgIHpJbmRleDogMTAwLFxuICAgIGxlZnQ6IDAsXG4gICAgdG9wOiAwLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG59O1xuY29uc3QgZ2V0SXRlbVN0eWxlcyA9IChcbiAgICBpbml0aWFsQ3Vyc29yT2Zmc2V0OiBOdWxsYWJsZTx7IHg6IG51bWJlcjsgeTogbnVtYmVyIH0+LFxuICAgIGluaXRpYWxGaWxlT2Zmc2V0OiBOdWxsYWJsZTx7IHg6IG51bWJlcjsgeTogbnVtYmVyIH0+LFxuICAgIGN1cnJlbnRGaWxlT2Zmc2V0OiBOdWxsYWJsZTx7IHg6IG51bWJlcjsgeTogbnVtYmVyIH0+XG4pID0+IHtcbiAgICBpZiAoIWluaXRpYWxDdXJzb3JPZmZzZXQgfHwgIWluaXRpYWxGaWxlT2Zmc2V0IHx8ICFjdXJyZW50RmlsZU9mZnNldCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCB4ID0gaW5pdGlhbEN1cnNvck9mZnNldC54ICsgKGN1cnJlbnRGaWxlT2Zmc2V0LnggLSBpbml0aWFsRmlsZU9mZnNldC54KTtcbiAgICBjb25zdCB5ID0gaW5pdGlhbEN1cnNvck9mZnNldC55ICsgKGN1cnJlbnRGaWxlT2Zmc2V0LnkgLSBpbml0aWFsRmlsZU9mZnNldC55KTtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSBgdHJhbnNsYXRlKCR7eH1weCwgJHt5fXB4KWA7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHJhbnNmb3JtLFxuICAgICAgICBXZWJraXRUcmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IERuREZpbGVMaXN0RHJhZ0xheWVyOiBSZWFjdC5GQzxEbkRGaWxlTGlzdERyYWdMYXllclByb3BzPiA9ICgpID0+IHtcbiAgICBjb25zdCBzZWxlY3Rpb25TaXplID0gdXNlQ29udGV4dChDaG9ua3lTZWxlY3Rpb25TaXplQ29udGV4dCk7XG5cbiAgICBjb25zdCB7XG4gICAgICAgIGl0ZW1UeXBlLFxuICAgICAgICBpdGVtLFxuICAgICAgICBpbml0aWFsQ3Vyc29yT2Zmc2V0LFxuICAgICAgICBpbml0aWFsRmlsZU9mZnNldCxcbiAgICAgICAgY3VycmVudEZpbGVPZmZzZXQsXG4gICAgICAgIGlzRHJhZ2dpbmcsXG4gICAgfSA9IHVzZURyYWdMYXllcigobW9uaXRvcikgPT4gKHtcbiAgICAgICAgaXRlbTogbW9uaXRvci5nZXRJdGVtKCkgYXMgRG5ERmlsZUVudHJ5SXRlbSxcbiAgICAgICAgaXRlbVR5cGU6IG1vbml0b3IuZ2V0SXRlbVR5cGUoKSxcbiAgICAgICAgaW5pdGlhbEN1cnNvck9mZnNldDogbW9uaXRvci5nZXRJbml0aWFsQ2xpZW50T2Zmc2V0KCksXG4gICAgICAgIGluaXRpYWxGaWxlT2Zmc2V0OiBtb25pdG9yLmdldEluaXRpYWxTb3VyY2VDbGllbnRPZmZzZXQoKSxcbiAgICAgICAgY3VycmVudEZpbGVPZmZzZXQ6IG1vbml0b3IuZ2V0U291cmNlQ2xpZW50T2Zmc2V0KCksXG4gICAgICAgIGlzRHJhZ2dpbmc6IG1vbml0b3IuaXNEcmFnZ2luZygpLFxuICAgIH0pKTtcbiAgICBmdW5jdGlvbiByZW5kZXJJdGVtKCkge1xuICAgICAgICBpZiAoIWl0ZW0uZmlsZSB8fCBpdGVtVHlwZSAhPT0gRG5ERmlsZUVudHJ5VHlwZSkgcmV0dXJuO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNob25reS1maWxlLWRyYWctcHJldmlld1wiPlxuICAgICAgICAgICAgICAgIDxiPntpdGVtLmZpbGUubmFtZX08L2I+XG4gICAgICAgICAgICAgICAge3NlbGVjdGlvblNpemUgPiAxICYmIChcbiAgICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsnIGFuZCAnfVxuICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2VsZWN0aW9uU2l6ZSAtIDF9IG90aGVyIGZpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2VsZWN0aW9uU2l6ZSAtIDEgIT09IDEgPyAncycgOiAnJ31cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Ryb25nPlxuICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxuICAgIGlmICghaXNEcmFnZ2luZykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBzdHlsZT17bGF5ZXJTdHlsZXN9PlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIHN0eWxlPXtnZXRJdGVtU3R5bGVzKFxuICAgICAgICAgICAgICAgICAgICBpbml0aWFsQ3Vyc29yT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICBpbml0aWFsRmlsZU9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEZpbGVPZmZzZXRcbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtyZW5kZXJJdGVtKCl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEVycm9yTWVzc2FnZVByb3BzIHtcbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgYnVsbGV0cz86IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgY29uc3QgRXJyb3JNZXNzYWdlID0gUmVhY3QubWVtbzxFcnJvck1lc3NhZ2VQcm9wcz4oKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBtZXNzYWdlLCBidWxsZXRzIH0gPSBwcm9wcztcblxuICAgIGxldCBidWxsZXRMaXN0ID0gbnVsbDtcbiAgICBpZiAoYnVsbGV0cyAmJiBidWxsZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWxsZXRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpdGVtcy5wdXNoKDxsaSBrZXk9e2BlcnJvci1idWxsZXQtJHtpfWB9PntidWxsZXRzW2ldfTwvbGk+KTtcbiAgICAgICAgfVxuICAgICAgICBidWxsZXRMaXN0ID0gPHVsPntpdGVtc308L3VsPjtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNob25reS1lcnJvclwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiY2hvbmt5LWVycm9yLW5hbWVcIj5DaG9ua3kgcnVudGltZSBlcnJvcjo8L3NwYW4+IHttZXNzYWdlfVxuICAgICAgICAgICAge2J1bGxldExpc3R9XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59KTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQge1xuICAgIEZpbGVBY3Rpb24sXG4gICAgRmlsZUFjdGlvbkhhbmRsZXIsXG4gICAgRmlsZUFycmF5LFxuICAgIFRodW1ibmFpbEdlbmVyYXRvcixcbn0gZnJvbSAnLi4vLi4vdHlwZWRlZic7XG5pbXBvcnQge1xuICAgIENob25reURpc2FibGVTZWxlY3Rpb25Db250ZXh0LFxuICAgIENob25reURpc3BhdGNoRmlsZUFjdGlvbkNvbnRleHQsXG4gICAgQ2hvbmt5RGlzcGF0Y2hTcGVjaWFsQWN0aW9uQ29udGV4dCxcbiAgICBDaG9ua3lEb3VibGVDbGlja0RlbGF5Q29udGV4dCxcbiAgICBDaG9ua3lFbmFibGVEcmFnQW5kRHJvcENvbnRleHQsXG4gICAgQ2hvbmt5RmlsZUFjdGlvbnNDb250ZXh0LFxuICAgIENob25reUZpbGVzQ29udGV4dCxcbiAgICBDaG9ua3lGb2xkZXJDaGFpbkNvbnRleHQsXG4gICAgQ2hvbmt5U2VsZWN0aW9uQ29udGV4dCxcbiAgICBDaG9ua3lTZWxlY3Rpb25TaXplQ29udGV4dCxcbiAgICBDaG9ua3lTZWxlY3Rpb25VdGlsQ29udGV4dCxcbiAgICBDaG9ua3lUaHVtYm5haWxHZW5lcmF0b3JDb250ZXh0LFxuICAgIHZhbGlkYXRlQ29udGV4dFR5cGUsXG59IGZyb20gJy4uLy4uL3V0aWwvY29udGV4dCc7XG5pbXBvcnQgeyBEZWZhdWx0QWN0aW9ucywgdXNlRmlsZUFjdGlvbkRpc3BhdGNoZXIgfSBmcm9tICcuLi8uLi91dGlsL2ZpbGUtYWN0aW9ucyc7XG5pbXBvcnQgeyB1c2VTZWxlY3Rpb24gfSBmcm9tICcuLi8uLi91dGlsL3NlbGVjdGlvbic7XG5pbXBvcnQgeyB1c2VTcGVjaWFsQWN0aW9uRGlzcGF0Y2hlciB9IGZyb20gJy4uLy4uL3V0aWwvc3BlY2lhbC1hY3Rpb25zJztcbmltcG9ydCB7IHVzZUZpbGVCcm93c2VyVmFsaWRhdGlvbiB9IGZyb20gJy4uLy4uL3V0aWwvdmFsaWRhdGlvbic7XG5pbXBvcnQgeyBDb250ZXh0Q29tcG9zZXIsIENvbnRleHRQcm92aWRlckRhdGEgfSBmcm9tICcuLi9pbnRlcm5hbC9Db250ZXh0Q29tcG9zZXInO1xuaW1wb3J0IHsgRG5ERmlsZUxpc3REcmFnTGF5ZXIgfSBmcm9tICcuLi9pbnRlcm5hbC9EbkRGaWxlTGlzdERyYWdMYXllcic7XG5pbXBvcnQgeyBFcnJvck1lc3NhZ2UgfSBmcm9tICcuLi9pbnRlcm5hbC9FcnJvck1lc3NhZ2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVCcm93c2VyUHJvcHMge1xuICAgIC8qKlxuICAgICAqIExpc3Qgb2YgZmlsZXMgdGhhdCB3aWxsIGJlIGRpc3BsYXllZCBpbiB0aGUgbWFpbiBjb250YWluZXIuIFRoZSBwcm92aWRlZCB2YWx1ZVxuICAgICAqICoqbXVzdCoqIGJlIGFuIGFycmF5LCB3aGVyZSBlYWNoIGVsZW1lbnQgaXMgZWl0aGVyIGBudWxsYCBvciBhbiBvYmplY3QgdGhhdFxuICAgICAqIHNhdGlzZmllcyB0aGUgYEZpbGVEYXRhYCB0eXBlLiBJZiBhbiBlbGVtZW50IGlzIGBudWxsYCwgYSBsb2FkaW5nIHBsYWNlaG9sZGVyXG4gICAgICogd2lsbCBiZSBkaXNwbGF5ZWQgaW4gaXRzIHBsYWNlLlxuICAgICAqL1xuICAgIGZpbGVzOiBGaWxlQXJyYXk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBmb2xkZXIgaGllcmFyY2h5LiBUaGlzIHNob3VsZCBiZSBhbiBhcnJheSBvZiBgZmlsZXNgLCBldmVyeVxuICAgICAqIGVsZW1lbnQgc2hvdWxkIGVpdGhlciBiZSBgbnVsbGAgb3IgYW4gb2JqZWN0IG9mIGBGaWxlRGF0YWAgdHlwZS4gVGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBzaG91bGQgcmVwcmVzZW50IHRoZSB0b3AtbGV2ZWwgZGlyZWN0b3J5LCBhbmQgdGhlIGxhc3QgZWxlbWVudFxuICAgICAqIHNob3VsZCBiZSB0aGUgY3VycmVudCBmb2xkZXIuXG4gICAgICovXG4gICAgZm9sZGVyQ2hhaW4/OiBGaWxlQXJyYXk7XG5cbiAgICBmaWxlQWN0aW9ucz86IEZpbGVBY3Rpb25bXTtcbiAgICBvbkZpbGVBY3Rpb24/OiBGaWxlQWN0aW9uSGFuZGxlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmdW5jdGlvbiB0aGF0IGRldGVybWluZXMgdGhlIHRodW1ibmFpbCBpbWFnZSBVUkwgZm9yIGEgZmlsZS4gSXQgZ2V0cyBhIGZpbGUgb2JqZWN0IGFzIHRoZSBpbnB1dCwgYW5kXG4gICAgICogc2hvdWxkIHJldHVybiBhIGBzdHJpbmdgIG9yIGBudWxsYC4gSXQgY2FuIGFsc28gcmV0dXJuIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGludG8gYSBgc3RyaW5nYCBvciBgbnVsbGAuXG4gICAgICogW1NlZSByZWxldmFudCBzZWN0aW9uXSgjc2VjdGlvbi1kaXNwbGF5aW5nLWZpbGUtdGh1bWJuYWlscykuXG4gICAgICovXG4gICAgdGh1bWJuYWlsR2VuZXJhdG9yPzogVGh1bWJuYWlsR2VuZXJhdG9yO1xuXG4gICAgLyoqXG4gICAgICogTWF4aW11bSBkZWxheSBiZXR3ZWVuIHRoZSB0d28gY2xpY2tzIGluIGEgZG91YmxlIGNsaWNrLCBpbiBtaWxsaXNlY29uZHMuXG4gICAgICovXG4gICAgZG91YmxlQ2xpY2tEZWxheT86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmbGFnIHRoYXQgY29tcGxldGVseSBkaXNhYmxlcyBmaWxlIHNlbGVjdGlvbiBmdW5jdGlvbmFsaXR5LiBJZiBhbnkgaGFuZGxlcnMgZGVwZW5kIG9uIGZpbGUgc2VsZWN0aW9ucywgdGhlaXJcbiAgICAgKiBpbnB1dCB3aWxsIGxvb2sgbGlrZSBubyBmaWxlcyBhcmUgc2VsZWN0ZWQuXG4gICAgICovXG4gICAgZGlzYWJsZVNlbGVjdGlvbj86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZmxhZyB0aGF0IGNvbXBsZXRlbHkgZGlzYWJsZXMgZHJhZyAmIGRyb3AgZnVuY3Rpb25hbGl0eS5cbiAgICAgKiBbU2VlIHJlbGV2YW50IHNlY3Rpb25dKCNzZWN0aW9uLW1hbmFnaW5nLWZpbGUtc2VsZWN0aW9uKS5cbiAgICAgKi9cbiAgICBlbmFibGVEcmFnQW5kRHJvcD86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZmxhZyB0aGF0IGRldGVybWluZXMgd2hldGhlciBDaG9ua3kgc2hvdWxkIGZpbGwgdGhlIGhlaWdodCBwYXJlbnQgY29udGFpbmVyLiBXaGVuIHNldCB0byBgdHJ1ZWAsIHRoZSBtYXhpbXVtXG4gICAgICogaGVpZ2h0IG9mIHRoZSBmaWxlIGJyb3dzZXIgd2lsbCBiZSBsaW1pdGVkIHRvIHRoZSBoZWlnaHQgb2YgdGhlIHBhcmVudCBjb250YWluZXIsIGFuZCBzY3JvbGxiYXIgd2lsbCBiZSBzaG93blxuICAgICAqIHdoZW4gbmVjZXNzYXJ5LiBXaGVuIHNldCB0byBgZmFsc2VgLCBmaWxlIGJyb3dzZXIgaGVpZ2h0IHdpbGwgYmUgZXh0ZW5kZWQgdG8gZGlzcGxheSBhbGwgZmlsZXMgYXQgdGhlIHNhbWUgdGltZS5cbiAgICAgKi9cbiAgICBmaWxsUGFyZW50Q29udGFpbmVyPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNvbnN0IEZpbGVCcm93c2VyOiBSZWFjdC5GQzxGaWxlQnJvd3NlclByb3BzPiA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgZmlsZXMsIGNoaWxkcmVuIH0gPSBwcm9wcztcblxuICAgIC8vIEFzc2lnbiBkZWZhdWx0IHZhbHVlc1xuICAgIGNvbnN0IGZvbGRlckNoYWluID0gcHJvcHMuZm9sZGVyQ2hhaW4gPyBwcm9wcy5mb2xkZXJDaGFpbiA6IG51bGw7XG4gICAgY29uc3QgZmlsZUFjdGlvbnMgPSBwcm9wcy5maWxlQWN0aW9ucyA/IHByb3BzLmZpbGVBY3Rpb25zIDogW107XG4gICAgY29uc3Qgb25GaWxlQWN0aW9uID0gcHJvcHMub25GaWxlQWN0aW9uID8gcHJvcHMub25GaWxlQWN0aW9uIDogbnVsbDtcbiAgICBjb25zdCB0aHVtYm5haWxHZW5lcmF0b3IgPSBwcm9wcy50aHVtYm5haWxHZW5lcmF0b3JcbiAgICAgICAgPyBwcm9wcy50aHVtYm5haWxHZW5lcmF0b3JcbiAgICAgICAgOiBudWxsO1xuICAgIGNvbnN0IGRvdWJsZUNsaWNrRGVsYXkgPVxuICAgICAgICB0eXBlb2YgcHJvcHMuZG91YmxlQ2xpY2tEZWxheSA9PT0gJ251bWJlcicgPyBwcm9wcy5kb3VibGVDbGlja0RlbGF5IDogMzAwO1xuICAgIGNvbnN0IGRpc2FibGVTZWxlY3Rpb24gPSAhIXByb3BzLmRpc2FibGVTZWxlY3Rpb247XG4gICAgY29uc3QgZW5hYmxlRHJhZ0FuZERyb3AgPSAhIXByb3BzLmVuYWJsZURyYWdBbmREcm9wO1xuXG4gICAgY29uc3QgdmFsaWRhdGlvblJlc3VsdCA9IHVzZUZpbGVCcm93c2VyVmFsaWRhdGlvbihmaWxlcywgZm9sZGVyQ2hhaW4pO1xuXG4gICAgY29uc3Qgc29ydGVkRmlsZXMgPSB2YWxpZGF0aW9uUmVzdWx0LmNsZWFuRmlsZXM7XG4gICAgY29uc3QgY2xlYW5Gb2xkZXJDaGFpbiA9IHZhbGlkYXRpb25SZXN1bHQuY2xlYW5Gb2xkZXJDaGFpbjtcblxuICAgIC8vIEluaXRpYWwgc2VsZWN0aW9uXG4gICAgY29uc3Qge1xuICAgICAgICBzZWxlY3Rpb24sXG4gICAgICAgIHNlbGVjdGlvblNpemUsXG4gICAgICAgIHNlbGVjdGlvblV0aWxSZWYsXG4gICAgICAgIHNlbGVjdEZpbGVzLFxuICAgICAgICB0b2dnbGVTZWxlY3Rpb24sXG4gICAgICAgIGNsZWFyU2VsZWN0aW9uLFxuICAgIH0gPSB1c2VTZWxlY3Rpb24oc29ydGVkRmlsZXMsIGRpc2FibGVTZWxlY3Rpb24pO1xuXG4gICAgLy8gVE9ETzogVmFsaWRhdGUgZmlsZSBhY3Rpb25zXG4gICAgLy8gVE9ETzogUmVtb3ZlIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmUgZGVmYXVsdCBhY3Rpb25zLCBvdGhlcndpc2UgZXJyb3Igb25cbiAgICAvLyAgZHVwbGljYXRlcy5cbiAgICBjb25zdCBleHRlbmRlZEZpbGVBY3Rpb25zID0gWy4uLmZpbGVBY3Rpb25zLCAuLi5EZWZhdWx0QWN0aW9uc107XG5cbiAgICBjb25zdCBkaXNwYXRjaEZpbGVBY3Rpb24gPSB1c2VGaWxlQWN0aW9uRGlzcGF0Y2hlcihcbiAgICAgICAgZXh0ZW5kZWRGaWxlQWN0aW9ucyxcbiAgICAgICAgb25GaWxlQWN0aW9uXG4gICAgKTtcbiAgICBjb25zdCBkaXNwYXRjaFNwZWNpYWxBY3Rpb24gPSB1c2VTcGVjaWFsQWN0aW9uRGlzcGF0Y2hlcihcbiAgICAgICAgc29ydGVkRmlsZXMsXG4gICAgICAgIHNlbGVjdGlvbixcbiAgICAgICAgc2VsZWN0aW9uVXRpbFJlZi5jdXJyZW50LFxuICAgICAgICBzZWxlY3RGaWxlcyxcbiAgICAgICAgdG9nZ2xlU2VsZWN0aW9uLFxuICAgICAgICBjbGVhclNlbGVjdGlvbixcbiAgICAgICAgZGlzcGF0Y2hGaWxlQWN0aW9uXG4gICAgKTtcblxuICAgIHR5cGUgRXh0cmFjdENvbnRleHRUeXBlPFA+ID0gUCBleHRlbmRzIFJlYWN0LkNvbnRleHQ8aW5mZXIgVD4gPyBUIDogbmV2ZXI7XG4gICAgaW50ZXJmYWNlIENvbnRleHREYXRhPENvbnRleHRUeXBlIGV4dGVuZHMgUmVhY3QuQ29udGV4dDxhbnk+PiB7XG4gICAgICAgIGNvbnRleHQ6IENvbnRleHRUeXBlO1xuICAgICAgICB2YWx1ZTogRXh0cmFjdENvbnRleHRUeXBlPENvbnRleHRUeXBlPjtcbiAgICB9XG4gICAgY29uc3QgY29udGV4dHM6IENvbnRleHREYXRhPGFueT5bXSA9IFtcbiAgICAgICAgdmFsaWRhdGVDb250ZXh0VHlwZSh7XG4gICAgICAgICAgICBjb250ZXh0OiBDaG9ua3lGaWxlc0NvbnRleHQsXG4gICAgICAgICAgICB2YWx1ZTogc29ydGVkRmlsZXMsXG4gICAgICAgIH0pLFxuICAgICAgICB2YWxpZGF0ZUNvbnRleHRUeXBlKHtcbiAgICAgICAgICAgIGNvbnRleHQ6IENob25reUZvbGRlckNoYWluQ29udGV4dCxcbiAgICAgICAgICAgIHZhbHVlOiBjbGVhbkZvbGRlckNoYWluLFxuICAgICAgICB9KSxcbiAgICAgICAgdmFsaWRhdGVDb250ZXh0VHlwZSh7XG4gICAgICAgICAgICBjb250ZXh0OiBDaG9ua3lTZWxlY3Rpb25Db250ZXh0LFxuICAgICAgICAgICAgdmFsdWU6IHNlbGVjdGlvbixcbiAgICAgICAgfSksXG4gICAgICAgIHZhbGlkYXRlQ29udGV4dFR5cGUoe1xuICAgICAgICAgICAgY29udGV4dDogQ2hvbmt5U2VsZWN0aW9uU2l6ZUNvbnRleHQsXG4gICAgICAgICAgICB2YWx1ZTogc2VsZWN0aW9uU2l6ZSxcbiAgICAgICAgfSksXG4gICAgICAgIHZhbGlkYXRlQ29udGV4dFR5cGUoe1xuICAgICAgICAgICAgY29udGV4dDogQ2hvbmt5U2VsZWN0aW9uVXRpbENvbnRleHQsXG4gICAgICAgICAgICB2YWx1ZTogc2VsZWN0aW9uVXRpbFJlZi5jdXJyZW50LFxuICAgICAgICB9KSxcbiAgICAgICAgdmFsaWRhdGVDb250ZXh0VHlwZSh7XG4gICAgICAgICAgICBjb250ZXh0OiBDaG9ua3lGaWxlQWN0aW9uc0NvbnRleHQsXG4gICAgICAgICAgICB2YWx1ZTogZXh0ZW5kZWRGaWxlQWN0aW9ucyxcbiAgICAgICAgfSksXG4gICAgICAgIHZhbGlkYXRlQ29udGV4dFR5cGUoe1xuICAgICAgICAgICAgY29udGV4dDogQ2hvbmt5RGlzcGF0Y2hGaWxlQWN0aW9uQ29udGV4dCxcbiAgICAgICAgICAgIHZhbHVlOiBkaXNwYXRjaEZpbGVBY3Rpb24sXG4gICAgICAgIH0pLFxuICAgICAgICB2YWxpZGF0ZUNvbnRleHRUeXBlKHtcbiAgICAgICAgICAgIGNvbnRleHQ6IENob25reURpc3BhdGNoU3BlY2lhbEFjdGlvbkNvbnRleHQsXG4gICAgICAgICAgICB2YWx1ZTogZGlzcGF0Y2hTcGVjaWFsQWN0aW9uLFxuICAgICAgICB9KSxcbiAgICAgICAgdmFsaWRhdGVDb250ZXh0VHlwZSh7XG4gICAgICAgICAgICBjb250ZXh0OiBDaG9ua3lUaHVtYm5haWxHZW5lcmF0b3JDb250ZXh0LFxuICAgICAgICAgICAgdmFsdWU6IHRodW1ibmFpbEdlbmVyYXRvcixcbiAgICAgICAgfSksXG4gICAgICAgIHZhbGlkYXRlQ29udGV4dFR5cGUoe1xuICAgICAgICAgICAgY29udGV4dDogQ2hvbmt5RG91YmxlQ2xpY2tEZWxheUNvbnRleHQsXG4gICAgICAgICAgICB2YWx1ZTogZG91YmxlQ2xpY2tEZWxheSxcbiAgICAgICAgfSksXG4gICAgICAgIHZhbGlkYXRlQ29udGV4dFR5cGUoe1xuICAgICAgICAgICAgY29udGV4dDogQ2hvbmt5RGlzYWJsZVNlbGVjdGlvbkNvbnRleHQsXG4gICAgICAgICAgICB2YWx1ZTogZGlzYWJsZVNlbGVjdGlvbixcbiAgICAgICAgfSksXG4gICAgICAgIHZhbGlkYXRlQ29udGV4dFR5cGUoe1xuICAgICAgICAgICAgY29udGV4dDogQ2hvbmt5RW5hYmxlRHJhZ0FuZERyb3BDb250ZXh0LFxuICAgICAgICAgICAgdmFsdWU6IGVuYWJsZURyYWdBbmREcm9wLFxuICAgICAgICB9KSxcbiAgICBdO1xuXG4gICAgY29uc3QgY29udGV4dFByb3ZpZGVycyA9IHVzZU1lbW88Q29udGV4dFByb3ZpZGVyRGF0YVtdPihcbiAgICAgICAgKCkgPT5cbiAgICAgICAgICAgIGNvbnRleHRzLm1hcCgoZGF0YSkgPT4gKHtcbiAgICAgICAgICAgICAgICBwcm92aWRlcjogZGF0YS5jb250ZXh0LlByb3ZpZGVyLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhLnZhbHVlLFxuICAgICAgICAgICAgfSkpLFxuICAgICAgICBjb250ZXh0cy5tYXAoKGRhdGEpID0+IGRhdGEudmFsdWUpXG4gICAgKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxDb250ZXh0Q29tcG9zZXIgcHJvdmlkZXJzPXtjb250ZXh0UHJvdmlkZXJzfT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2hvbmt5LXJvb3QgY2hvbmt5LW5vLXNlbGVjdFwiPlxuICAgICAgICAgICAgICAgIHtlbmFibGVEcmFnQW5kRHJvcCAmJiA8RG5ERmlsZUxpc3REcmFnTGF5ZXIgLz59XG4gICAgICAgICAgICAgICAge3ZhbGlkYXRpb25SZXN1bHQuZXJyb3JNZXNzYWdlcy5tYXAoKGRhdGEsIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgIDxFcnJvck1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleT17YGVycm9yLW1lc3NhZ2UtJHtpbmRleH1gfVxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZT17ZGF0YS5tZXNzYWdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnVsbGV0cz17ZGF0YS5idWxsZXRzfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgIHtjaGlsZHJlbiA/IGNoaWxkcmVuIDogbnVsbH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L0NvbnRleHRDb21wb3Nlcj5cbiAgICApO1xufTtcbiIsImltcG9ydCB7IHVzZUNvbnRleHQsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBVbmRlZmluYWJsZSB9IGZyb20gJ3RzZGVmJztcblxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZURhdGEgfSBmcm9tICcuLi8uLi90eXBlZGVmJztcbmltcG9ydCB7XG4gICAgQ2hvbmt5RGlzcGF0Y2hGaWxlQWN0aW9uQ29udGV4dCxcbiAgICBDaG9ua3lGaWxlc0NvbnRleHQsXG4gICAgQ2hvbmt5Rm9sZGVyQ2hhaW5Db250ZXh0LFxuICAgIENob25reVNlbGVjdGlvbkNvbnRleHQsXG4gICAgQ2hvbmt5U2VsZWN0aW9uU2l6ZUNvbnRleHQsXG59IGZyb20gJy4uLy4uL3V0aWwvY29udGV4dCc7XG5pbXBvcnQgeyBTZWxlY3Rpb25IZWxwZXIgfSBmcm9tICcuLi8uLi91dGlsL3NlbGVjdGlvbic7XG5cbmV4cG9ydCBjb25zdCB1c2VTbWFydFRvb2xiYXJCdXR0b25Qcm9wcyA9IChhY3Rpb246IEZpbGVBY3Rpb24pID0+IHtcbiAgICBjb25zdCBmaWxlcyA9IHVzZUNvbnRleHQoQ2hvbmt5RmlsZXNDb250ZXh0KTtcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IHVzZUNvbnRleHQoQ2hvbmt5Rm9sZGVyQ2hhaW5Db250ZXh0KTtcbiAgICBjb25zdCBzZWxlY3Rpb24gPSB1c2VDb250ZXh0KENob25reVNlbGVjdGlvbkNvbnRleHQpO1xuICAgIGNvbnN0IHNlbGVjdGlvblNpemUgPSB1c2VDb250ZXh0KENob25reVNlbGVjdGlvblNpemVDb250ZXh0KTtcbiAgICBjb25zdCBkaXNwYXRjaENob25reUFjdGlvbiA9IHVzZUNvbnRleHQoQ2hvbmt5RGlzcGF0Y2hGaWxlQWN0aW9uQ29udGV4dCk7XG5cbiAgICBjb25zdCBwYXJlbnRGb2xkZXIgPVxuICAgICAgICBmb2xkZXJDaGFpbiAmJiBmb2xkZXJDaGFpbi5sZW5ndGggPiAxXG4gICAgICAgICAgICA/IGZvbGRlckNoYWluW2ZvbGRlckNoYWluPy5sZW5ndGggLSAyXVxuICAgICAgICAgICAgOiBudWxsO1xuXG4gICAgY29uc3QgZGVwcyA9IFtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBmaWxlcyxcbiAgICAgICAgc2VsZWN0aW9uLFxuICAgICAgICBzZWxlY3Rpb25TaXplLFxuICAgICAgICBkaXNwYXRjaENob25reUFjdGlvbixcbiAgICAgICAgcGFyZW50Rm9sZGVyLFxuICAgIF07XG4gICAgcmV0dXJuIHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBsZXQgYWN0aW9uU2VsZWN0aW9uU2l6ZTogVW5kZWZpbmFibGU8bnVtYmVyPiA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IGFjdGlvbkZpbGVzOiBVbmRlZmluYWJsZTxSZWFkb25seUFycmF5PEZpbGVEYXRhPj4gPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChhY3Rpb24ucmVxdWlyZXNTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIGlmIChhY3Rpb24uZmlsZUZpbHRlcikge1xuICAgICAgICAgICAgICAgIGFjdGlvblNlbGVjdGlvblNpemUgPSBTZWxlY3Rpb25IZWxwZXIuZ2V0U2VsZWN0aW9uU2l6ZShcbiAgICAgICAgICAgICAgICAgICAgZmlsZXMsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uLmZpbGVGaWx0ZXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGFjdGlvbkZpbGVzID0gU2VsZWN0aW9uSGVscGVyLmdldFNlbGVjdGVkRmlsZXMoXG4gICAgICAgICAgICAgICAgICAgIGZpbGVzLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbi5maWxlRmlsdGVyXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uU2VsZWN0aW9uU2l6ZSA9IHNlbGVjdGlvblNpemU7XG4gICAgICAgICAgICAgICAgYWN0aW9uRmlsZXMgPSBTZWxlY3Rpb25IZWxwZXIuZ2V0U2VsZWN0ZWRGaWxlcyhmaWxlcywgc2VsZWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhY3Rpb25UYXJnZXQgPVxuICAgICAgICAgICAgYWN0aW9uLnJlcXVpcmVzUGFyZW50Rm9sZGVyICYmIHBhcmVudEZvbGRlciA/IHBhcmVudEZvbGRlciA6IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgZGlzYWJsZWQgPVxuICAgICAgICAgICAgKGFjdGlvbi5yZXF1aXJlc1NlbGVjdGlvbiAmJiBhY3Rpb25TZWxlY3Rpb25TaXplID09PSAwKSB8fFxuICAgICAgICAgICAgKGFjdGlvbi5yZXF1aXJlc1BhcmVudEZvbGRlciAmJiAhcGFyZW50Rm9sZGVyKTtcblxuICAgICAgICBjb25zdCBvbkNsaWNrID0gKCkgPT5cbiAgICAgICAgICAgIGRpc3BhdGNoQ2hvbmt5QWN0aW9uKHtcbiAgICAgICAgICAgICAgICBhY3Rpb25OYW1lOiBhY3Rpb24ubmFtZSxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGFjdGlvblRhcmdldCxcbiAgICAgICAgICAgICAgICBmaWxlczogYWN0aW9uRmlsZXMsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4geyBvbkNsaWNrLCBkaXNhYmxlZCB9O1xuICAgIH0sIGRlcHMpO1xufTtcbiIsImltcG9ydCBjIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgRmlsZUFjdGlvbiB9IGZyb20gJy4uLy4uL3R5cGVkZWYnO1xuaW1wb3J0IHsgQ2hvbmt5SWNvbkZBLCBDaG9ua3lJY29uTmFtZSB9IGZyb20gJy4vQ2hvbmt5SWNvbic7XG5pbXBvcnQgeyB1c2VTbWFydFRvb2xiYXJCdXR0b25Qcm9wcyB9IGZyb20gJy4vVG9vbGJhckJ1dHRvbi1ob29rcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG9vbGJhckJ1dHRvblByb3BzIHtcbiAgICB0ZXh0OiBzdHJpbmc7XG4gICAgdG9vbHRpcD86IHN0cmluZztcbiAgICBpY29uPzogQ2hvbmt5SWNvbk5hbWUgfCBzdHJpbmc7XG4gICAgaWNvbk9ubHk/OiBib29sZWFuO1xuICAgIG9uQ2xpY2s/OiAoKSA9PiB2b2lkO1xuICAgIGRpc2FibGVkPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNvbnN0IFRvb2xiYXJCdXR0b246IFJlYWN0LkZDPFRvb2xiYXJCdXR0b25Qcm9wcz4gPSBSZWFjdC5tZW1vKChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgdGV4dCwgdG9vbHRpcCwgaWNvbiwgaWNvbk9ubHksIG9uQ2xpY2ssIGRpc2FibGVkIH0gPSBwcm9wcztcblxuICAgIGNvbnN0IGNsYXNzTmFtZSA9IGMoe1xuICAgICAgICAnY2hvbmt5LXRvb2xiYXItYnV0dG9uJzogdHJ1ZSxcbiAgICB9KTtcbiAgICByZXR1cm4gKFxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICAgICAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICAgICAgICB0aXRsZT17dG9vbHRpcCA/IHRvb2x0aXAgOiB0ZXh0fVxuICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICA+XG4gICAgICAgICAgICB7KGljb24gfHwgaWNvbk9ubHkpICYmIChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNob25reS10b29sYmFyLWJ1dHRvbi1pY29uXCI+XG4gICAgICAgICAgICAgICAgICAgIDxDaG9ua3lJY29uRkEgaWNvbj17aWNvbiA/IGljb24gOiBDaG9ua3lJY29uTmFtZS5mYWxsYmFja0ljb259IC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAge3RleHQgJiYgIWljb25Pbmx5ICYmIChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNob25reS10b29sYmFyLWJ1dHRvbi10ZXh0XCI+e3RleHR9PC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICA8L2J1dHRvbj5cbiAgICApO1xufSk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU21hcnRUb29sYmFyQnV0dG9uUHJvcHMge1xuICAgIGZpbGVBY3Rpb246IEZpbGVBY3Rpb247XG59XG5cbmV4cG9ydCBjb25zdCBTbWFydFRvb2xiYXJCdXR0b246IFJlYWN0LkZDPFNtYXJ0VG9vbGJhckJ1dHRvblByb3BzPiA9IFJlYWN0Lm1lbW8oXG4gICAgKHByb3BzKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgZmlsZUFjdGlvbjogYWN0aW9uIH0gPSBwcm9wcztcblxuICAgICAgICBjb25zdCB7IHRvb2xiYXJCdXR0b246IGJ1dHRvbiB9ID0gYWN0aW9uO1xuICAgICAgICBpZiAoIWJ1dHRvbikgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgY29uc3QgeyBvbkNsaWNrLCBkaXNhYmxlZCB9ID0gdXNlU21hcnRUb29sYmFyQnV0dG9uUHJvcHMoYWN0aW9uKTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFRvb2xiYXJCdXR0b25cbiAgICAgICAgICAgICAgICB0ZXh0PXtidXR0b24ubmFtZX1cbiAgICAgICAgICAgICAgICB0b29sdGlwPXtidXR0b24udG9vbHRpcH1cbiAgICAgICAgICAgICAgICBpY29uPXtidXR0b24uaWNvbn1cbiAgICAgICAgICAgICAgICBpY29uT25seT17YnV0dG9uLmljb25Pbmx5fVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICB9XG4pO1xuIiwiaW1wb3J0IGMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE51bGxhYmxlLCBVbmRlZmluYWJsZSB9IGZyb20gJ3RzZGVmJztcblxuaW1wb3J0IHsgRmlsZURhdGEgfSBmcm9tICcuLi8uLi90eXBlZGVmJztcbmltcG9ydCB7XG4gICAgQ2hvbmt5RGlzcGF0Y2hGaWxlQWN0aW9uQ29udGV4dCxcbiAgICBDaG9ua3lGaWxlQWN0aW9uc0NvbnRleHQsXG4gICAgQ2hvbmt5RmlsZXNDb250ZXh0LFxuICAgIENob25reUZvbGRlckNoYWluQ29udGV4dCxcbiAgICBDaG9ua3lTZWxlY3Rpb25Db250ZXh0LFxuICAgIENob25reVNlbGVjdGlvblV0aWxDb250ZXh0LFxufSBmcm9tICcuLi8uLi91dGlsL2NvbnRleHQnO1xuaW1wb3J0IHsgQ2hvbmt5QWN0aW9ucyB9IGZyb20gJy4uLy4uL3V0aWwvZmlsZS1hY3Rpb25zJztcbmltcG9ydCB7IEZpbGVIZWxwZXIgfSBmcm9tICcuLi8uLi91dGlsL2ZpbGUtaGVscGVyJztcbmltcG9ydCB7IFNlbGVjdGlvbkhlbHBlciB9IGZyb20gJy4uLy4uL3V0aWwvc2VsZWN0aW9uJztcbmltcG9ydCB7IENob25reUljb25GQSwgQ2hvbmt5SWNvbk5hbWUgfSBmcm9tICcuL0Nob25reUljb24nO1xuaW1wb3J0IHsgVG9vbGJhckJ1dHRvbiB9IGZyb20gJy4vVG9vbGJhckJ1dHRvbic7XG5pbXBvcnQgeyBUb29sYmFyQnV0dG9uR3JvdXAgfSBmcm9tICcuL1Rvb2xiYXJCdXR0b25Hcm91cCc7XG5cbi8qKlxuICogR2VuZXJhdGVzIGZvbGRlciBjaGFpbiBIVE1MIGNvbXBvbmVudHMgZm9yIHRoZSBgRmlsZVRvb2xiYXJgIGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGNvbnN0IHVzZUZvbGRlckNoYWluQ29tcG9uZW50ID0gKCkgPT4ge1xuICAgIGNvbnN0IGZvbGRlckNoYWluID0gdXNlQ29udGV4dChDaG9ua3lGb2xkZXJDaGFpbkNvbnRleHQpO1xuICAgIGNvbnN0IGRpc3BhdGNoQ2hvbmt5QWN0aW9uID0gdXNlQ29udGV4dChDaG9ua3lEaXNwYXRjaEZpbGVBY3Rpb25Db250ZXh0KTtcbiAgICAvLyBBbGwgaG9vayBwYXJhbXMgc2hvdWxkIGdvIGludG8gYGRlcHNgXG4gICAgY29uc3QgZGVwcyA9IFtmb2xkZXJDaGFpbiwgZGlzcGF0Y2hDaG9ua3lBY3Rpb25dO1xuICAgIGNvbnN0IGZvbGRlckNoYWluQ29tcG9uZW50ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIGlmICghZm9sZGVyQ2hhaW4pIHJldHVybiBmb2xkZXJDaGFpbjtcblxuICAgICAgICBjb25zdCBjb21wcyA9IG5ldyBBcnJheShNYXRoLm1heCgwLCBmb2xkZXJDaGFpbi5sZW5ndGggKiAyIC0gMSkpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZvbGRlckNoYWluLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlID0gZm9sZGVyQ2hhaW5baV07XG4gICAgICAgICAgICBjb25zdCBpc0xhc3QgPSBpID09PSBmb2xkZXJDaGFpbi5sZW5ndGggLSAxO1xuICAgICAgICAgICAgY29uc3QgaiA9IGkgKiAyO1xuXG4gICAgICAgICAgICBjb25zdCBjb21wUHJvcHM6IFJlYWN0LkNvbXBvbmVudFByb3BzPGFueT4gPSB7XG4gICAgICAgICAgICAgICAga2V5OiBgZm9sZGVyLWNoYWluLWVudHJ5LSR7an1gLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogYyh7XG4gICAgICAgICAgICAgICAgICAgICdjaG9ua3ktZm9sZGVyLWNoYWluLWVudHJ5JzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgJ2Nob25reS1sb2FkaW5nJzogIWZpbGUsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKEZpbGVIZWxwZXIuaXNPcGVuYWJsZShmaWxlKSAmJiAhaXNMYXN0KSB7XG4gICAgICAgICAgICAgICAgY29tcFByb3BzLm9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoQ2hvbmt5QWN0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbk5hbWU6IENob25reUFjdGlvbnMuT3BlbkZpbGVzLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IGZpbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlczogW2ZpbGVdLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgVGFnVG9Vc2UgPSBjb21wUHJvcHMub25DbGljayA/ICdidXR0b24nIDogJ2Rpdic7XG4gICAgICAgICAgICBjb21wc1tqXSA9IChcbiAgICAgICAgICAgICAgICA8VGFnVG9Vc2Ugey4uLmNvbXBQcm9wc30+XG4gICAgICAgICAgICAgICAgICAgIHsvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgKi99XG4gICAgICAgICAgICAgICAgICAgIHtqID09PSAwICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImNob25reS10ZXh0LXN1YnRsZS1kYXJrXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPENob25reUljb25GQSBpY29uPXtDaG9ua3lJY29uTmFtZS5mb2xkZXJ9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7Jm5ic3A7XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImNob25reS1mb2xkZXItY2hhaW4tZW50cnktbmFtZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAge2ZpbGUgPyBmaWxlLm5hbWUgOiAnTG9hZGluZy4uLid9XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L1RhZ1RvVXNlPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICghaXNMYXN0KSB7XG4gICAgICAgICAgICAgICAgY29tcHNbaiArIDFdID0gKFxuICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2Bmb2xkZXItY2hhaW4tc2VwYXJhdG9yLSR7an1gfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2hvbmt5LWZvbGRlci1jaGFpbi1zZXBhcmF0b3JcIlxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Q2hvbmt5SWNvbkZBXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj17Q2hvbmt5SWNvbk5hbWUuZm9sZGVyQ2hhaW5TZXBhcmF0b3J9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT1cInhzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiY2hvbmt5LWZvbGRlci1jaGFpblwiPntjb21wc308L2Rpdj47XG4gICAgfSwgZGVwcyk7XG4gICAgcmV0dXJuIGZvbGRlckNoYWluQ29tcG9uZW50O1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBhcnJheSBvZiBmaWxlIGFjdGlvbnMgaW50byBidXR0b24gY29tcG9uZW50cy5cbiAqL1xuZXhwb3J0IGNvbnN0IHVzZUZpbGVBY3Rpb25CdXR0b25zID0gKCk6IHtcbiAgICBvcGVuUGFyZW50Rm9sZGVyQnV0dG9uOiBOdWxsYWJsZTxSZWFjdC5SZWFjdEVsZW1lbnQ+O1xuICAgIGJ1dHRvbkNvbXBvbmVudHM6IFJlYWN0LlJlYWN0RWxlbWVudFtdO1xufSA9PiB7XG4gICAgY29uc3QgZmlsZXMgPSB1c2VDb250ZXh0KENob25reUZpbGVzQ29udGV4dCk7XG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSB1c2VDb250ZXh0KENob25reUZvbGRlckNoYWluQ29udGV4dCk7XG4gICAgY29uc3Qgc2VsZWN0aW9uID0gdXNlQ29udGV4dChDaG9ua3lTZWxlY3Rpb25Db250ZXh0KTtcbiAgICBjb25zdCBzZWxlY3Rpb25VdGlsID0gdXNlQ29udGV4dChDaG9ua3lTZWxlY3Rpb25VdGlsQ29udGV4dCk7XG4gICAgY29uc3QgZmlsZUFjdGlvbnMgPSB1c2VDb250ZXh0KENob25reUZpbGVBY3Rpb25zQ29udGV4dCk7XG4gICAgY29uc3QgZGlzcGF0Y2hDaG9ua3lBY3Rpb24gPSB1c2VDb250ZXh0KENob25reURpc3BhdGNoRmlsZUFjdGlvbkNvbnRleHQpO1xuXG4gICAgY29uc3QgcGFyZW50Rm9sZGVyID1cbiAgICAgICAgZm9sZGVyQ2hhaW4gJiYgZm9sZGVyQ2hhaW4ubGVuZ3RoID4gMVxuICAgICAgICAgICAgPyBmb2xkZXJDaGFpbltmb2xkZXJDaGFpbj8ubGVuZ3RoIC0gMl1cbiAgICAgICAgICAgIDogbnVsbDtcbiAgICBjb25zdCBzZWxlY3Rpb25TaXplID0gU2VsZWN0aW9uSGVscGVyLmdldFNlbGVjdGlvblNpemUoZmlsZXMsIHNlbGVjdGlvbik7XG5cbiAgICAvLyBBbGwgaG9vayBwYXJhbXMgc2hvdWxkIGdvIGludG8gYGRlcHNgXG4gICAgY29uc3QgZGVwcyA9IFtcbiAgICAgICAgZmlsZXMsXG4gICAgICAgIGZvbGRlckNoYWluLFxuICAgICAgICBzZWxlY3Rpb24sXG4gICAgICAgIHNlbGVjdGlvblV0aWwsXG4gICAgICAgIGRpc3BhdGNoQ2hvbmt5QWN0aW9uLFxuICAgICAgICBwYXJlbnRGb2xkZXIsXG4gICAgICAgIHNlbGVjdGlvblNpemUsXG4gICAgXTtcbiAgICByZXR1cm4gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIGxldCBvcGVuUGFyZW50Rm9sZGVyQnV0dG9uID0gbnVsbDtcbiAgICAgICAgY29uc3QgYnV0dG9uQ29tcG9uZW50czogUmVhY3QuUmVhY3RFbGVtZW50W10gPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlQWN0aW9ucy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgYWN0aW9uID0gZmlsZUFjdGlvbnNbaV07XG4gICAgICAgICAgICBjb25zdCB7IHRvb2xiYXJCdXR0b24gfSA9IGFjdGlvbjtcbiAgICAgICAgICAgIGlmICghdG9vbGJhckJ1dHRvbikgY29udGludWU7XG5cbiAgICAgICAgICAgIGxldCBhY3Rpb25TZWxlY3Rpb25TaXplOiBVbmRlZmluYWJsZTxudW1iZXI+ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgbGV0IGFjdGlvbkZpbGVzOiBVbmRlZmluYWJsZTxSZWFkb25seUFycmF5PEZpbGVEYXRhPj4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAoYWN0aW9uLnJlcXVpcmVzU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbi5maWxlRmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvblNlbGVjdGlvblNpemUgPSBTZWxlY3Rpb25IZWxwZXIuZ2V0U2VsZWN0aW9uU2l6ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLmZpbGVGaWx0ZXJcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uRmlsZXMgPSBTZWxlY3Rpb25IZWxwZXIuZ2V0U2VsZWN0ZWRGaWxlcyhcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLmZpbGVGaWx0ZXJcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb25TZWxlY3Rpb25TaXplID0gc2VsZWN0aW9uU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uRmlsZXMgPSBTZWxlY3Rpb25IZWxwZXIuZ2V0U2VsZWN0ZWRGaWxlcyhmaWxlcywgc2VsZWN0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhY3Rpb25UYXJnZXQgPVxuICAgICAgICAgICAgICAgIGFjdGlvbi5yZXF1aXJlc1BhcmVudEZvbGRlciAmJiBwYXJlbnRGb2xkZXIgPyBwYXJlbnRGb2xkZXIgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjb25zdCBkaXNhYmxlZCA9XG4gICAgICAgICAgICAgICAgKGFjdGlvbi5yZXF1aXJlc1NlbGVjdGlvbiAmJiBhY3Rpb25TZWxlY3Rpb25TaXplID09PSAwKSB8fFxuICAgICAgICAgICAgICAgIChhY3Rpb24ucmVxdWlyZXNQYXJlbnRGb2xkZXIgJiYgIXBhcmVudEZvbGRlcik7XG5cbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGB0b29sYmFyLWJ1dHRvbi0ke2FjdGlvbi5uYW1lfWA7XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSAoXG4gICAgICAgICAgICAgICAgPFRvb2xiYXJCdXR0b25cbiAgICAgICAgICAgICAgICAgICAga2V5PXtrZXl9XG4gICAgICAgICAgICAgICAgICAgIHRleHQ9e3Rvb2xiYXJCdXR0b24ubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcD17dG9vbGJhckJ1dHRvbi50b29sdGlwfVxuICAgICAgICAgICAgICAgICAgICBpY29uPXt0b29sYmFyQnV0dG9uLmljb259XG4gICAgICAgICAgICAgICAgICAgIGljb25Pbmx5PXt0b29sYmFyQnV0dG9uLmljb25Pbmx5fVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hDaG9ua3lBY3Rpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbk5hbWU6IGFjdGlvbi5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogYWN0aW9uVGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzOiBhY3Rpb25GaWxlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAoYWN0aW9uLm5hbWUgPT09IENob25reUFjdGlvbnMuT3BlblBhcmVudEZvbGRlci5uYW1lKSB7XG4gICAgICAgICAgICAgICAgb3BlblBhcmVudEZvbGRlckJ1dHRvbiA9IGNvbXBvbmVudDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYnV0dG9uQ29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBvcGVuUGFyZW50Rm9sZGVyQnV0dG9uLCBidXR0b25Db21wb25lbnRzIH07XG4gICAgfSwgZGVwcyk7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlVG9vbGJhckJ1dHRvbkdyb3VwcyA9ICgpID0+IHtcbiAgICBjb25zdCBmaWxlQWN0aW9ucyA9IHVzZUNvbnRleHQoQ2hvbmt5RmlsZUFjdGlvbnNDb250ZXh0KTtcbiAgICBjb25zdCBkZXBzID0gW2ZpbGVBY3Rpb25zXTtcbiAgICByZXR1cm4gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIC8vIENyZWF0ZSBhbiBhcnJheSBmb3Igbm9ybWFsIHRvb2xiYXIgYnV0dG9uc1xuICAgICAgICBjb25zdCBidXR0b25Hcm91cHM6IFRvb2xiYXJCdXR0b25Hcm91cFtdID0gW107XG5cbiAgICAgICAgLy8gQ3JlYXRlIGEgbWFwIHVzZWQgZm9yIG1lcmdpbmcgYnV0dG9ucyBpbnRvIGdyb3Vwc1xuICAgICAgICBjb25zdCBidXR0b25Hcm91cE1hcDogeyBbZ3JvdXBOYW1lOiBzdHJpbmddOiBUb29sYmFyQnV0dG9uR3JvdXAgfSA9IHt9O1xuXG4gICAgICAgIC8vIENyZWF0ZSBzZXBhcmF0ZSB2YXJpYWJsZXMgZm9yIGJ1dHRvbnMgdGhhdCBnZXQgc3BlY2lhbCB0cmVhdG1lbnQ6XG4gICAgICAgIGxldCBvcGVuUGFyZW50Rm9sZGVyQnV0dG9uR3JvdXA6IE51bGxhYmxlPFRvb2xiYXJCdXR0b25Hcm91cD4gPSBudWxsO1xuICAgICAgICBsZXQgc2VhcmNoQnV0dG9uR3JvdXA6IE51bGxhYmxlPFRvb2xiYXJCdXR0b25Hcm91cD4gPSBudWxsO1xuXG4gICAgICAgIGZvciAoY29uc3QgYWN0aW9uIG9mIGZpbGVBY3Rpb25zKSB7XG4gICAgICAgICAgICBpZiAoIWFjdGlvbi50b29sYmFyQnV0dG9uKSBjb250aW51ZTtcblxuICAgICAgICAgICAgY29uc3QgYnV0dG9uID0gYWN0aW9uLnRvb2xiYXJCdXR0b247XG4gICAgICAgICAgICBsZXQgZ3JvdXA6IFRvb2xiYXJCdXR0b25Hcm91cDtcblxuICAgICAgICAgICAgaWYgKGJ1dHRvbi5ncm91cCkge1xuICAgICAgICAgICAgICAgIGlmIChidXR0b25Hcm91cE1hcFtidXR0b24uZ3JvdXBdKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGdyb3VwIGV4aXN0cywgYXBwZW5kIGFjdGlvbiB0byBpdC5cbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAgPSBidXR0b25Hcm91cE1hcFtidXR0b24uZ3JvdXBdO1xuICAgICAgICAgICAgICAgICAgICBncm91cC5kcm9wZG93biA9IGdyb3VwLmRyb3Bkb3duIHx8IGJ1dHRvbi5kcm9wZG93bjtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAuZmlsZUFjdGlvbnMucHVzaChhY3Rpb24pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgY3JlYXRlIGEgbmV3IGdyb3VwLlxuICAgICAgICAgICAgICAgICAgICBncm91cCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGJ1dHRvbi5ncm91cCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duOiBidXR0b24uZHJvcGRvd24sXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlQWN0aW9uczogW2FjdGlvbl0sXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbkdyb3Vwcy5wdXNoKGdyb3VwKTtcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uR3JvdXBNYXBbZ3JvdXAubmFtZSFdID0gZ3JvdXA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBidXR0b24gaGFzIG5vIGdyb3VwIHNwZWNpZmllZCwgd2UgcHV0IGl0IGluIGEgc3RhbmRhbG9uZSBncm91cFxuICAgICAgICAgICAgICAgIGdyb3VwID0ge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBidXR0b24uZ3JvdXAsXG4gICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duOiBidXR0b24uZHJvcGRvd24sXG4gICAgICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zOiBbYWN0aW9uXSxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy8gT25seSBhZGQgaXQgdG8gdGhlIG5vcm1hbCBncm91cHMgYXJyYXkgaWYgaXQncyBub3QgYSBzcGVjaWFsIGJ1dHRvblxuICAgICAgICAgICAgICAgIGlmIChhY3Rpb24ubmFtZSA9PT0gQ2hvbmt5QWN0aW9ucy5PcGVuUGFyZW50Rm9sZGVyLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgb3BlblBhcmVudEZvbGRlckJ1dHRvbkdyb3VwID0gZ3JvdXA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24ubmFtZSA9PT0gQ2hvbmt5QWN0aW9ucy5TZWFyY2gubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBzZWFyY2hCdXR0b25Hcm91cCA9IGdyb3VwO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbkdyb3Vwcy5wdXNoKGdyb3VwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBidXR0b25Hcm91cHMsIG9wZW5QYXJlbnRGb2xkZXJCdXR0b25Hcm91cCwgc2VhcmNoQnV0dG9uR3JvdXAgfTtcbiAgICB9LCBkZXBzKTtcbn07XG4iLCIvKipcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMTlcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IEZpbGVBY3Rpb24gfSBmcm9tICcuLi8uLi90eXBlZGVmJztcbmltcG9ydCB7IFNtYXJ0VG9vbGJhckJ1dHRvbiB9IGZyb20gJy4vVG9vbGJhckJ1dHRvbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG9vbGJhckJ1dHRvbkdyb3VwIHtcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIGRyb3Bkb3duPzogYm9vbGVhbjtcbiAgICBmaWxlQWN0aW9uczogRmlsZUFjdGlvbltdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRvb2xiYXJCdXR0b25Hcm91cFByb3BzIHtcbiAgICBncm91cDogVG9vbGJhckJ1dHRvbkdyb3VwO1xufVxuXG5leHBvcnQgY29uc3QgVG9vbGJhckJ1dHRvbkdyb3VwOiBSZWFjdC5GQzxUb29sYmFyQnV0dG9uR3JvdXBQcm9wcz4gPSBSZWFjdC5tZW1vKFxuICAgIChwcm9wcykgPT4ge1xuICAgICAgICBjb25zdCB7IGdyb3VwIH0gPSBwcm9wcztcblxuICAgICAgICBjb25zdCBidXR0b25Db21wb25lbnRzID0gZ3JvdXAuZmlsZUFjdGlvbnMubWFwKChhY3Rpb24pID0+IChcbiAgICAgICAgICAgIDxTbWFydFRvb2xiYXJCdXR0b25cbiAgICAgICAgICAgICAgICBrZXk9e2BhY3Rpb24tYnV0dG9uLSR7YWN0aW9uLm5hbWV9YH1cbiAgICAgICAgICAgICAgICBmaWxlQWN0aW9uPXthY3Rpb259XG4gICAgICAgICAgICAvPlxuICAgICAgICApKTtcbiAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiY2hvbmt5LXRvb2xiYXItYnV0dG9uLWdyb3VwXCI+e2J1dHRvbkNvbXBvbmVudHN9PC9kaXY+O1xuICAgIH1cbik7XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgdXNlRm9sZGVyQ2hhaW5Db21wb25lbnQsIHVzZVRvb2xiYXJCdXR0b25Hcm91cHMgfSBmcm9tICcuL0ZpbGVUb29sYmFyLWhvb2tzJztcbmltcG9ydCB7IFRvb2xiYXJCdXR0b25Hcm91cCB9IGZyb20gJy4vVG9vbGJhckJ1dHRvbkdyb3VwJztcblxuZXhwb3J0IGludGVyZmFjZSBGaWxlVG9vbGJhclByb3BzIHt9XG5cbmV4cG9ydCBjb25zdCBGaWxlVG9vbGJhcjogUmVhY3QuRkM8RmlsZVRvb2xiYXJQcm9wcz4gPSBSZWFjdC5tZW1vKCgpID0+IHtcbiAgICBjb25zdCBmb2xkZXJDaGFpbkNvbXAgPSB1c2VGb2xkZXJDaGFpbkNvbXBvbmVudCgpO1xuICAgIGNvbnN0IHtcbiAgICAgICAgYnV0dG9uR3JvdXBzLFxuICAgICAgICBvcGVuUGFyZW50Rm9sZGVyQnV0dG9uR3JvdXAsXG4gICAgICAgIHNlYXJjaEJ1dHRvbkdyb3VwLFxuICAgIH0gPSB1c2VUb29sYmFyQnV0dG9uR3JvdXBzKCk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNob25reS10b29sYmFyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNob25reS10b29sYmFyLXNpZGUgY2hvbmt5LXRvb2xiYXItc2lkZS1sZWZ0XCI+XG4gICAgICAgICAgICAgICAge29wZW5QYXJlbnRGb2xkZXJCdXR0b25Hcm91cCAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDxUb29sYmFyQnV0dG9uR3JvdXAgZ3JvdXA9e29wZW5QYXJlbnRGb2xkZXJCdXR0b25Hcm91cH0gLz5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIHtmb2xkZXJDaGFpbkNvbXB9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2hvbmt5LXRvb2xiYXItc2lkZSBjaG9ua3ktdG9vbGJhci1zaWRlLXJpZ2h0XCI+XG4gICAgICAgICAgICAgICAge2J1dHRvbkdyb3Vwcy5tYXAoKGdyb3VwLCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8VG9vbGJhckJ1dHRvbkdyb3VwXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2BidXR0b24tZ3JvdXAtJHtncm91cC5uYW1lID8gZ3JvdXAubmFtZSA6IGluZGV4fWB9XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cD17Z3JvdXB9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAge3NlYXJjaEJ1dHRvbkdyb3VwICYmIDxUb29sYmFyQnV0dG9uR3JvdXAgZ3JvdXA9e3NlYXJjaEJ1dHRvbkdyb3VwfSAvPn1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufSk7XG5cbkZpbGVUb29sYmFyLnByb3BUeXBlcyA9IHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZm9sZGVyQ2hhaW46IFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgICBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgICAgIFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgICAgICAgIFByb3BUeXBlcy5vbmVPZihbbnVsbF0pLmlzUmVxdWlyZWQsXG4gICAgICAgIF0pXG4gICAgKSxcbn07XG4iLCJpbXBvcnQgYyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEdyaWQgfSBmcm9tICdyZWFjdC12aXJ0dWFsaXplZCc7XG5pbXBvcnQgeyBOaWxhYmxlIH0gZnJvbSAndHNkZWYnO1xuXG5pbXBvcnQgeyBGaWxlQXJyYXkgfSBmcm9tICcuLi8uLi90eXBlZGVmJztcbmltcG9ydCB7XG4gICAgQ2hvbmt5RW5hYmxlRHJhZ0FuZERyb3BDb250ZXh0LFxuICAgIENob25reVNlbGVjdGlvbkNvbnRleHQsXG59IGZyb20gJy4uLy4uL3V0aWwvY29udGV4dCc7XG5pbXBvcnQgeyBpc01vYmlsZURldmljZSB9IGZyb20gJy4uLy4uL3V0aWwvdmFsaWRhdGlvbic7XG5pbXBvcnQgeyBGaWxlRW50cnlQcm9wcyB9IGZyb20gJy4uL2ludGVybmFsL0Jhc2VGaWxlRW50cnknO1xuaW1wb3J0IHsgQ2xpY2thYmxlRmlsZUVudHJ5IH0gZnJvbSAnLi4vaW50ZXJuYWwvQ2xpY2thYmxlRmlsZUVudHJ5JztcbmltcG9ydCB7IERuREZpbGVFbnRyeSB9IGZyb20gJy4uL2ludGVybmFsL0RuREZpbGVFbnRyeSc7XG5pbXBvcnQgeyBDaG9ua3lJY29uRkEsIENob25reUljb25OYW1lIH0gZnJvbSAnLi9DaG9ua3lJY29uJztcblxuZXhwb3J0IGludGVyZmFjZSBFbnRyeVNpemUge1xuICAgIHdpZHRoOiBudW1iZXI7XG4gICAgaGVpZ2h0OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjb25zdCBTbWFsbFRodW1ic1NpemU6IEVudHJ5U2l6ZSA9IHsgd2lkdGg6IDE2MCwgaGVpZ2h0OiAxMjAgfTtcblxuZXhwb3J0IGNvbnN0IGdldENvbFdpZHRoID0gKFxuICAgIGluZGV4OiBudW1iZXIsXG4gICAgY29sdW1uQ291bnQ6IG51bWJlcixcbiAgICBlbnRyeVNpemU6IEVudHJ5U2l6ZSxcbiAgICBndXR0ZXJTaXplOiBudW1iZXJcbikgPT4ge1xuICAgIGlmIChpbmRleCA9PT0gY29sdW1uQ291bnQgLSAxKSByZXR1cm4gZW50cnlTaXplLndpZHRoO1xuICAgIHJldHVybiBlbnRyeVNpemUud2lkdGggKyBndXR0ZXJTaXplO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFJvd0hlaWdodCA9IChcbiAgICBpbmRleDogbnVtYmVyLFxuICAgIHJvd0NvdW50OiBudW1iZXIsXG4gICAgZW50cnlTaXplOiBFbnRyeVNpemUsXG4gICAgZ3V0dGVyU2l6ZTogbnVtYmVyXG4pID0+IHtcbiAgICBpZiAoaW5kZXggPT09IHJvd0NvdW50IC0gMSkgcmV0dXJuIGVudHJ5U2l6ZS5oZWlnaHQ7XG4gICAgcmV0dXJuIGVudHJ5U2l6ZS5oZWlnaHQgKyBndXR0ZXJTaXplO1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZUVudHJ5UmVuZGVyZXIgPSAoZmlsZXM6IEZpbGVBcnJheSkgPT4ge1xuICAgIGNvbnN0IHNlbGVjdGlvbiA9IHVzZUNvbnRleHQoQ2hvbmt5U2VsZWN0aW9uQ29udGV4dCk7XG4gICAgY29uc3QgZW5hYmxlRHJhZ0FuZERyb3AgPSB1c2VDb250ZXh0KENob25reUVuYWJsZURyYWdBbmREcm9wQ29udGV4dCk7XG4gICAgLy8gQWxsIGhvb2sgcGFyYW1ldGVycyBzaG91bGQgZ28gaW50byBgZGVwc2AgYXJyYXlcbiAgICBjb25zdCBkZXBzID0gW2ZpbGVzLCBzZWxlY3Rpb24sIGVuYWJsZURyYWdBbmREcm9wXTtcbiAgICBjb25zdCBlbnRyeVJlbmRlcmVyID0gdXNlQ2FsbGJhY2soXG4gICAgICAgIChcbiAgICAgICAgICAgIHZpcnR1YWxLZXk6IHN0cmluZyxcbiAgICAgICAgICAgIGluZGV4OiBudW1iZXIsXG4gICAgICAgICAgICBzdHlsZTogYW55LFxuICAgICAgICAgICAgcGFyZW50OiBhbnksXG4gICAgICAgICAgICBndXR0ZXJTaXplPzogbnVtYmVyLFxuICAgICAgICAgICAgbGFzdFJvdz86IGJvb2xlYW4sXG4gICAgICAgICAgICBsYXN0Q29sdW1uPzogYm9vbGVhblxuICAgICAgICApID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZ3V0dGVyU2l6ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWxhc3RSb3cpIHN0eWxlLmhlaWdodCA9IHN0eWxlLmhlaWdodCAtIGd1dHRlclNpemU7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWxhc3RDb2x1bW4pIHN0eWxlLndpZHRoID0gc3R5bGUud2lkdGggLSBndXR0ZXJTaXplO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBXaGVuIHJlbmRlcmluZyB0aGUgZmlsZSBsaXN0LCBzb21lIGJyb3dzZXJzIGN1dCBvZmYgdGhlIGxhc3QgcGl4ZWwgb2ZcbiAgICAgICAgICAgIC8vIGEgZmlsZSBlbnRyeSwgbWFraW5nIGl0IGxvb2sgdWdseS4gVG8gZ2V0IGFyb3VuZCB0aGlzIHJlbmRlcmluZyBidWdcbiAgICAgICAgICAgIC8vIHdlIG1ha2UgZmlsZSBlbnRyaWVzIGluIHRoZSBsYXN0IHJvdy9jb2x1bW4gMSBwaXhlbCBzaG9ydGVyLlxuICAgICAgICAgICAgLy8gVE9ETzogSW5zdGVhZCBvZiBzdWJ0cmFjdGluZyAxIGhlcmUsIGFkZCAxIHRvIHdpZHRoL2hlaWdodCBvZiBsYXN0XG4gICAgICAgICAgICAvLyAgY29sdW1uLlxuICAgICAgICAgICAgaWYgKGxhc3RSb3cpIHN0eWxlLmhlaWdodCA9IHN0eWxlLmhlaWdodCAtIDE7XG4gICAgICAgICAgICBpZiAobGFzdENvbHVtbikgc3R5bGUud2lkdGggPSBzdHlsZS53aWR0aCAtIDE7XG5cbiAgICAgICAgICAgIGlmIChpbmRleCA+PSBmaWxlcy5sZW5ndGgpIHJldHVybiBudWxsO1xuICAgICAgICAgICAgY29uc3QgZmlsZSA9IGZpbGVzW2luZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGZpbGUgPyBmaWxlLmlkIDogYGxvYWRpbmctZmlsZS0ke3ZpcnR1YWxLZXl9YDtcbiAgICAgICAgICAgIGNvbnN0IGVudHJ5UHJvcHM6IEZpbGVFbnRyeVByb3BzID0ge1xuICAgICAgICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgICAgICAgZGlzcGxheUluZGV4OiBpbmRleCxcblxuICAgICAgICAgICAgICAgIC8vIFdlIGRlbGliZXJhdGVseSBkb24ndCB1c2UgYEZpbGVIZWxwZXIuaXNTZWxlY3RhYmxlYCBoZXJlLiBXZSB3YW50XG4gICAgICAgICAgICAgICAgLy8gdGhlIFVJIHRvIHJlcHJlc2VudCB0aGUgdHJ1ZSBzdGF0ZSBvZiBzZWxlY3Rpb24uIFRoaXMgd2lsbCBoZWxwIHVzZXJzXG4gICAgICAgICAgICAgICAgLy8gc2VlIHdoYXQgZXhhY3RseSB0aGUgc2VsZWN0aW9uIGlzIGJlZm9yZSBydW5uaW5nIHNvbWUgY29kZS5cbiAgICAgICAgICAgICAgICBzZWxlY3RlZDogISFmaWxlICYmIHNlbGVjdGlvbltmaWxlLmlkXSA9PT0gdHJ1ZSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IGZpbGVFbnRyeUNvbXBvbmVudCA9IGVuYWJsZURyYWdBbmREcm9wID8gKFxuICAgICAgICAgICAgICAgIDxEbkRGaWxlRW50cnkgey4uLmVudHJ5UHJvcHN9IC8+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIDxDbGlja2FibGVGaWxlRW50cnkgey4uLmVudHJ5UHJvcHN9IC8+XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8ZGl2IGtleT17a2V5fSBjbGFzc05hbWU9XCJjaG9ua3ktdmlydHVhbGl6YXRpb24td3JhcHBlclwiIHN0eWxlPXtzdHlsZX0+XG4gICAgICAgICAgICAgICAgICAgIHtmaWxlRW50cnlDb21wb25lbnR9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBkZXBzXG4gICAgKTtcblxuICAgIHJldHVybiBlbnRyeVJlbmRlcmVyO1xufTtcblxuZXhwb3J0IGNvbnN0IG5vQ29udGVudFJlbmRlcmVyID0gKGhlaWdodD86IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IHBsYWNlaG9sZGVyUHJvcHM6IGFueSA9IHtcbiAgICAgICAgY2xhc3NOYW1lOiBjKHtcbiAgICAgICAgICAgICdjaG9ua3ktZmlsZS1saXN0LW5vdGlmaWNhdGlvbic6IHRydWUsXG4gICAgICAgICAgICAnY2hvbmt5LWZpbGUtbGlzdC1ub3RpZmljYXRpb24tZW1wdHknOiB0cnVlLFxuICAgICAgICB9KSxcbiAgICB9O1xuICAgIGlmICh0eXBlb2YgaGVpZ2h0ID09PSAnbnVtYmVyJykgcGxhY2Vob2xkZXJQcm9wcy5zdHlsZSA9IHsgaGVpZ2h0IH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IHsuLi5wbGFjZWhvbGRlclByb3BzfT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2hvbmt5LWZpbGUtbGlzdC1ub3RpZmljYXRpb24tY29udGVudFwiPlxuICAgICAgICAgICAgICAgIDxDaG9ua3lJY29uRkEgaWNvbj17Q2hvbmt5SWNvbk5hbWUuZm9sZGVyT3Blbn0gLz5cbiAgICAgICAgICAgICAgICAmbmJzcDsgTm90aGluZyB0byBzaG93XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VHcmlkUmVuZGVyZXIgPSAoXG4gICAgZmlsZXM6IEZpbGVBcnJheSxcbiAgICBlbnRyeVJlbmRlcmVyOiBSZXR1cm5UeXBlPHR5cGVvZiB1c2VFbnRyeVJlbmRlcmVyPixcbiAgICB0aHVtYnNHcmlkUmVmOiBSZWFjdC5SZWY8TmlsYWJsZTxHcmlkPj4sXG4gICAgZmlsbFBhcmVudENvbnRhaW5lcjogYm9vbGVhblxuKSA9PiB7XG4gICAgY29uc3QgZGVwcyA9IFtmaWxlcywgZW50cnlSZW5kZXJlciwgdGh1bWJzR3JpZFJlZiwgZmlsbFBhcmVudENvbnRhaW5lcl07XG4gICAgcmV0dXJuIHVzZUNhbGxiYWNrKCh7IHdpZHRoLCBoZWlnaHQgfSkgPT4ge1xuICAgICAgICBsZXQgY29sdW1uQ291bnQ6IG51bWJlcjtcbiAgICAgICAgbGV0IGVudHJ5U2l6ZSA9IFNtYWxsVGh1bWJzU2l6ZTtcblxuICAgICAgICBjb25zdCBpc01vYmlsZSA9IGlzTW9iaWxlRGV2aWNlKCk7XG4gICAgICAgIGNvbnN0IGd1dHRlciA9IGlzTW9iaWxlID8gNSA6IDg7XG4gICAgICAgIGNvbnN0IHNjcm9sbGJhciA9ICFmaWxsUGFyZW50Q29udGFpbmVyIHx8IGlzTW9iaWxlID8gMCA6IDE2O1xuXG4gICAgICAgIC8vIFRPRE86IGNvbnN0IGlzTGFyZ2VUaHVtYnMgPSB2aWV3ID09PSBGaWxlVmlldy5MYXJnZVRodW1icztcbiAgICAgICAgY29uc3QgaXNMYXJnZVRodW1icyA9IGZhbHNlO1xuICAgICAgICBpZiAoaXNNb2JpbGUgJiYgd2lkdGggPCA0MDApIHtcbiAgICAgICAgICAgIC8vIEhhcmRjb2RlIGNvbHVtbiBjb3VudCBvbiBtb2JpbGVcbiAgICAgICAgICAgIGNvbHVtbkNvdW50ID0gaXNMYXJnZVRodW1icyA/IDIgOiAzO1xuICAgICAgICAgICAgZW50cnlTaXplID0ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBNYXRoLmZsb29yKCh3aWR0aCAtIGd1dHRlciAqIChjb2x1bW5Db3VudCAtIDEpKSAvIGNvbHVtbkNvdW50KSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGlzTGFyZ2VUaHVtYnMgPyAxNjAgOiAxMjAsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgY29sdW1uQ291bnRGbG9hdCA9XG4gICAgICAgICAgICAgICAgKHdpZHRoICsgZ3V0dGVyIC0gc2Nyb2xsYmFyKSAvIChlbnRyeVNpemUud2lkdGggKyBndXR0ZXIpO1xuICAgICAgICAgICAgY29sdW1uQ291bnQgPSBNYXRoLm1heCgxLCBNYXRoLmZsb29yKGNvbHVtbkNvdW50RmxvYXQpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByb3dDb3VudCA9IE1hdGguY2VpbChmaWxlcy5sZW5ndGggLyBjb2x1bW5Db3VudCk7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxHcmlkXG4gICAgICAgICAgICAgICAgc3R5bGU9e3sgbWluSGVpZ2h0OiBlbnRyeVNpemUuaGVpZ2h0ICsgMTAgfX1cbiAgICAgICAgICAgICAgICByZWY9e3RodW1ic0dyaWRSZWYgYXMgYW55fVxuICAgICAgICAgICAgICAgIGNlbGxSZW5kZXJlcj17KGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBkYXRhLnJvd0luZGV4ICogY29sdW1uQ291bnQgKyBkYXRhLmNvbHVtbkluZGV4O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW50cnlSZW5kZXJlcihcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEua2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IC4uLmRhdGEuc3R5bGUgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucGFyZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgZ3V0dGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5yb3dJbmRleCA9PT0gcm93Q291bnQgLSAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5jb2x1bW5JbmRleCA9PT0gY29sdW1uQ291bnQgLSAxXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICBub0NvbnRlbnRSZW5kZXJlcj17KCkgPT4gbm9Db250ZW50UmVuZGVyZXIoZW50cnlTaXplLmhlaWdodCl9XG4gICAgICAgICAgICAgICAgcm93Q291bnQ9e3Jvd0NvdW50fVxuICAgICAgICAgICAgICAgIGNvbHVtbkNvdW50PXtjb2x1bW5Db3VudH1cbiAgICAgICAgICAgICAgICBjb2x1bW5XaWR0aD17KHsgaW5kZXggfSkgPT5cbiAgICAgICAgICAgICAgICAgICAgZ2V0Q29sV2lkdGgoaW5kZXgsIGNvbHVtbkNvdW50LCBlbnRyeVNpemUsIGd1dHRlcilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcm93SGVpZ2h0PXsoeyBpbmRleCB9KSA9PlxuICAgICAgICAgICAgICAgICAgICBnZXRSb3dIZWlnaHQoaW5kZXgsIHJvd0NvdW50LCBlbnRyeVNpemUsIGd1dHRlcilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3ZlcnNjYW5Sb3dDb3VudD17Mn1cbiAgICAgICAgICAgICAgICB3aWR0aD17d2lkdGh9XG4gICAgICAgICAgICAgICAgaGVpZ2h0PXt0eXBlb2YgaGVpZ2h0ID09PSAnbnVtYmVyJyA/IGhlaWdodCA6IDUwMH1cbiAgICAgICAgICAgICAgICBhdXRvSGVpZ2h0PXshZmlsbFBhcmVudENvbnRhaW5lcn1cbiAgICAgICAgICAgICAgICB0YWJJbmRleD17bnVsbH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgfSwgZGVwcyk7XG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEF1dG9TaXplciwgR3JpZCB9IGZyb20gJ3JlYWN0LXZpcnR1YWxpemVkJztcblxuaW1wb3J0IHsgQ2hvbmt5RmlsZXNDb250ZXh0IH0gZnJvbSAnLi4vLi4vdXRpbC9jb250ZXh0JztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uLy4uL3V0aWwvbG9nZ2VyJztcbmltcG9ydCB7IEVycm9yTWVzc2FnZSB9IGZyb20gJy4uL2ludGVybmFsL0Vycm9yTWVzc2FnZSc7XG5pbXBvcnQgeyBGaWxlQnJvd3NlciB9IGZyb20gJy4vRmlsZUJyb3dzZXInO1xuaW1wb3J0IHsgdXNlRW50cnlSZW5kZXJlciwgdXNlR3JpZFJlbmRlcmVyIH0gZnJvbSAnLi9GaWxlTGlzdC12aXJ0dWFsaXphdGlvbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZUxpc3RQcm9wcyB7fVxuXG5leHBvcnQgY29uc3QgRmlsZUxpc3Q6IFJlYWN0LkZDPEZpbGVMaXN0UHJvcHM+ID0gUmVhY3QubWVtbygoKSA9PiB7XG4gICAgY29uc3QgZmlsZXMgPSB1c2VDb250ZXh0KENob25reUZpbGVzQ29udGV4dCk7XG5cbiAgICBjb25zdCBlbnRyeVJlbmRlcmVyID0gdXNlRW50cnlSZW5kZXJlcihmaWxlcyk7XG5cbiAgICAvLyBUaHVtYnMgZ3JpZCByZWYgaXMgbm90IHVzZWQgYXQgdGhlIG1vbWVudCBidXQgd2lsbCBiZSBuZWNlc3NhcnkgbGF0ZXIuIEl0IGlzXG4gICAgLy8gdXNlZCB0byByZWNvbXB1dGUgdGhlIGhlaWdodCBvZiByb3dzIGluIHRoZSBgTGlzdGAgZnJvbSBgcmVhY3QtdmlydHVhbGl6ZWRgLlxuICAgIC8vIENvbnN1bHQgQ2hvbmt5IHYwLnggaW1wbGVtZW50YXRpb24gZm9yIGRldGFpbHMuXG4gICAgY29uc3QgdGh1bWJzR3JpZFJlZiA9IHVzZVJlZjxHcmlkPigpO1xuXG4gICAgLy8gVE9ETzogUmVhZCB0aGlzIHZhbHVlIGZyb20gc29tZXdoZXJlLlxuICAgIGNvbnN0IGZpbGxQYXJlbnRDb250YWluZXIgPSB0cnVlO1xuXG4gICAgY29uc3QgZ3JpZFJlbmRlcmVyID0gdXNlR3JpZFJlbmRlcmVyKFxuICAgICAgICBmaWxlcyxcbiAgICAgICAgZW50cnlSZW5kZXJlcixcbiAgICAgICAgdGh1bWJzR3JpZFJlZixcbiAgICAgICAgZmlsbFBhcmVudENvbnRhaW5lclxuICAgICk7XG5cbiAgICBpZiAoIWZpbGVzKSB7XG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9XG4gICAgICAgICAgICBgJHtGaWxlTGlzdC5uYW1lfSBjYW5ub3QgZmluZCB0aGUgXCJmaWxlc1wiIGFycmF5IHZpYSBSZWFjdCBjb250ZXh0LiBUaGlzIGAgK1xuICAgICAgICAgICAgYGhhcHBlbnMgd2hlbiAke0ZpbGVMaXN0Lm5hbWV9IGlzIHBsYWNlZCBvdXRzaWRlIG9mICR7RmlsZUJyb3dzZXIubmFtZX1gICtcbiAgICAgICAgICAgIGBjb21wb25lbnQuYDtcbiAgICAgICAgTG9nZ2VyLmVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICAgIHJldHVybiA8RXJyb3JNZXNzYWdlIG1lc3NhZ2U9e2Vycm9yTWVzc2FnZX0gLz47XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjaG9ua3ktZmlsZS1saXN0XCI+XG4gICAgICAgICAgICA8QXV0b1NpemVyIGRpc2FibGVIZWlnaHQ9eyFmaWxsUGFyZW50Q29udGFpbmVyfT57Z3JpZFJlbmRlcmVyfTwvQXV0b1NpemVyPlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIk40ejNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCIxTXUvXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiaENPYVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIktxWHdcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCIxdDdQXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiVXZtQlwiKTsiLCJpbXBvcnQgJ25vdHkvbGliL25vdHkuY3NzJztcbmltcG9ydCAnbm90eS9saWIvdGhlbWVzL3JlbGF4LmNzcyc7XG5pbXBvcnQgJy4vc3Rvcnlib29rLmNzcyc7XG5cbmltcG9ydCB7XG4gICAgRGVzY3JpcHRpb24sXG4gICAgRG9jc0NvbnRleHQsXG4gICAgRG9jc1N0b3J5LFxuICAgIFRpdGxlLFxufSBmcm9tICdAc3Rvcnlib29rL2FkZG9uLWRvY3MvYmxvY2tzJztcbmltcG9ydCB7IGdldERvY3NTdG9yaWVzIH0gZnJvbSAnQHN0b3J5Ym9vay9hZGRvbi1kb2NzL2Rpc3QvYmxvY2tzL3V0aWxzJztcbmltcG9ydCB7IFNvdXJjZSB9IGZyb20gJ0BzdG9yeWJvb2svY29tcG9uZW50cyc7XG5pbXBvcnQgTm90eSBmcm9tICdub3R5JztcbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRG5kUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1kbmQnO1xuaW1wb3J0IHsgSFRNTDVCYWNrZW5kIH0gZnJvbSAncmVhY3QtZG5kLWh0bWw1LWJhY2tlbmQnO1xuXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSB9IGZyb20gJy4uL3NyYyc7XG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgVW5zdGFibGVXYXJuaW5nTWQgZnJvbSAnLi9VbnN0YWJsZS13YXJuaW5nLm1kJztcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBMaXZlRXhhbXBsZU1kIGZyb20gJy4vTGl2ZS1leGFtcGxlcy5tZCc7XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVEb2NzT2JqZWN0ID0gKHBhcmFtczogeyBtYXJrZG93bjogc3RyaW5nIH0pID0+IHtcbiAgICBjb25zdCB7IG1hcmtkb3duIH0gPSBwYXJhbXM7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBwYWdlOiAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgICAgICAgPERuZFByb3ZpZGVyIGJhY2tlbmQ9e0hUTUw1QmFja2VuZH0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7cGFyc2VNYXJrZG93bihVbnN0YWJsZVdhcm5pbmdNZCl9XG4gICAgICAgICAgICAgICAgICAgICAgICA8VGl0bGUgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtwYXJzZU1hcmtkb3duKG1hcmtkb3duKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxDdXN0b21QcmltYXJ5IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICB7cGFyc2VNYXJrZG93bihMaXZlRXhhbXBsZU1kKX1cbiAgICAgICAgICAgICAgICAgICAgPC9EbmRQcm92aWRlcj5cbiAgICAgICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IEN1c3RvbVByaW1hcnk6IFJlYWN0LkZDPGFueT4gPSAoeyBuYW1lIH0pID0+IHtcbiAgICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChEb2NzQ29udGV4dCk7XG4gICAgY29uc3QgY29tcG9uZW50U3RvcmllcyA9IGdldERvY3NTdG9yaWVzKGNvbnRleHQpO1xuICAgIGxldCBzdG9yeTtcbiAgICBpZiAoY29tcG9uZW50U3Rvcmllcykge1xuICAgICAgICBzdG9yeSA9IG5hbWVcbiAgICAgICAgICAgID8gY29tcG9uZW50U3Rvcmllcy5maW5kKChzKSA9PiBzLm5hbWUgPT09IG5hbWUpXG4gICAgICAgICAgICA6IGNvbXBvbmVudFN0b3JpZXNbMF07XG4gICAgfVxuICAgIHJldHVybiBzdG9yeSA/IDxEb2NzU3Rvcnkgey4uLnN0b3J5fSBleHBhbmRlZD17ZmFsc2V9IC8+IDogbnVsbDtcbn07XG5cbmNvbnN0IHBhcnNlTWFya2Rvd24gPSAobWFya2Rvd246IHN0cmluZyk6IFJlYWN0LlJlYWN0RWxlbWVudFtdID0+IHtcbiAgICAvLyBFeHRyYWN0IGluZGljZXMgb2Ygc3RhcnQgYW5kIGVuZCBvZiBlYWNoIGNvZGUgYmxvY2tcbiAgICBjb25zdCBpbmRpY2VzID0gZ2V0SW5kaWNlc09mKCdgYGAnLCBtYXJrZG93bik7XG5cbiAgICAvLyBNYXRjaCBpbmRpY2VzIHRvIHN0YXJ0L2VuZCBsb2NhdGlvblxuICAgIGNvbnN0IG9jY3VycmVuY2VzID0gW107XG4gICAgZm9yIChjb25zdCBpbmRleCBvZiBpbmRpY2VzKSB7XG4gICAgICAgIGNvbnN0IGxpbmVFbmQgPSBtYXJrZG93bi5pbmRleE9mKCdcXG4nLCBpbmRleCk7XG4gICAgICAgIGNvbnN0IGxpbmUgPSBtYXJrZG93bi5zdWJzdHJpbmcoaW5kZXgsIGxpbmVFbmQpLnRyaW0oKTtcblxuICAgICAgICBpZiAoL15gYGBbYS16LV0rJC9pLmV4ZWMobGluZSkpIHtcbiAgICAgICAgICAgIG9jY3VycmVuY2VzLnB1c2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdzdGFydCcsXG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2U6IGxpbmUuc3Vic3RyaW5nKDMpLFxuICAgICAgICAgICAgICAgIG1hcmtkb3duRW5kOiBpbmRleCxcbiAgICAgICAgICAgICAgICBjb2RlU3RhcnQ6IGxpbmVFbmQgKyAxLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoL15gYGAkL2kuZXhlYyhsaW5lKSkge1xuICAgICAgICAgICAgb2NjdXJyZW5jZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2VuZCcsXG4gICAgICAgICAgICAgICAgY29kZUVuZDogaW5kZXgsXG4gICAgICAgICAgICAgICAgbWFya2Rvd25TdGFydDogbGluZUVuZCArIDEsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIENyZWF0ZSBjb21wb25lbnRzIGJhc2VkIG9uIHN0YXJ0L2VuZCBsb2NhdGlvblxuICAgIGNvbnN0IGNvbXBvbmVudHMgPSBbXTtcbiAgICBsZXQgbWFya2Rvd25TdGFydCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvY2N1cnJlbmNlcy5sZW5ndGggLSAxOyArK2kpIHtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBvY2N1cnJlbmNlc1tpXTtcbiAgICAgICAgY29uc3QgZW5kID0gb2NjdXJyZW5jZXNbaSArIDFdO1xuXG4gICAgICAgIGlmIChzdGFydC50eXBlICE9PSAnc3RhcnQnIHx8IGVuZC50eXBlICE9PSAnZW5kJykgY29udGludWU7XG4gICAgICAgIGVsc2UgaSArPSAxO1xuXG4gICAgICAgIGNvbnN0IG1kS2V5ID0gYG1kLSR7aX1gO1xuICAgICAgICBjb25zdCBtZFNsaWNlID0gbWFya2Rvd24uc3Vic3RyaW5nKG1hcmtkb3duU3RhcnQsIHN0YXJ0Lm1hcmtkb3duRW5kKTtcbiAgICAgICAgY29uc3QgY29kZVNsaWNlID0gbWFya2Rvd24uc3Vic3RyaW5nKHN0YXJ0LmNvZGVTdGFydCEsIGVuZC5jb2RlRW5kKTtcbiAgICAgICAgY29uc3QgY29kZUtleSA9IGBjb2RlLSR7aX1gO1xuXG4gICAgICAgIGNvbXBvbmVudHMucHVzaCg8RGVzY3JpcHRpb24ga2V5PXttZEtleX0gbWFya2Rvd249e21kU2xpY2V9IC8+KTtcbiAgICAgICAgY29tcG9uZW50cy5wdXNoKFxuICAgICAgICAgICAgPFNvdXJjZSBrZXk9e2NvZGVLZXl9IGxhbmd1YWdlPXtzdGFydC5sYW5ndWFnZX0gY29kZT17Y29kZVNsaWNlfSAvPlxuICAgICAgICApO1xuICAgICAgICBtYXJrZG93blN0YXJ0ID0gZW5kLm1hcmtkb3duU3RhcnQhO1xuICAgIH1cbiAgICBjb21wb25lbnRzLnB1c2goXG4gICAgICAgIDxEZXNjcmlwdGlvbiBrZXk9XCJtYXJrZG93bi1sYXN0XCIgbWFya2Rvd249e21hcmtkb3duLnN1YnN0cmluZyhtYXJrZG93blN0YXJ0KX0gLz5cbiAgICApO1xuXG4gICAgcmV0dXJuIGNvbXBvbmVudHM7XG59O1xuXG5jb25zdCBnZXRJbmRpY2VzT2YgPSAobmVlZGxlOiBzdHJpbmcsIGhheXN0YWNrOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBzZWFyY2hTdHJMZW4gPSBuZWVkbGUubGVuZ3RoO1xuICAgIGlmIChzZWFyY2hTdHJMZW4gPT0gMCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGxldCBpbmRleDtcbiAgICBsZXQgc3RhcnRJbmRleCA9IDA7XG4gICAgY29uc3QgaW5kaWNlcyA9IFtdO1xuICAgIHdoaWxlICgoaW5kZXggPSBoYXlzdGFjay5pbmRleE9mKG5lZWRsZSwgc3RhcnRJbmRleCkpID4gLTEpIHtcbiAgICAgICAgaW5kaWNlcy5wdXNoKGluZGV4KTtcbiAgICAgICAgc3RhcnRJbmRleCA9IGluZGV4ICsgc2VhcmNoU3RyTGVuO1xuICAgIH1cbiAgICByZXR1cm4gaW5kaWNlcztcbn07XG5cbmV4cG9ydCBjb25zdCBzaG93QWN0aW9uTm90aWZpY2F0aW9uID0gKHBhcmFtczoge1xuICAgIGFjdGlvbjogRmlsZUFjdGlvbjtcbiAgICBkYXRhOiBGaWxlQWN0aW9uRGF0YTtcbn0pID0+IHtcbiAgICBjb25zdCB7IGFjdGlvbiwgZGF0YSB9ID0gcGFyYW1zO1xuXG4gICAgY29uc3QgdGV4dFBhcnRzID0gW107XG4gICAgdGV4dFBhcnRzLnB1c2goYDxiPkFjdGlvbjo8L2I+ICR7YWN0aW9uLm5hbWV9YCk7XG4gICAgaWYgKGRhdGEudGFyZ2V0KSB7XG4gICAgICAgIHRleHRQYXJ0cy5wdXNoKGA8Yj5UYXJnZXQ6PC9iPiA8Y29kZT4ke2RhdGEudGFyZ2V0Lm5hbWV9PC9jb2RlPmApO1xuICAgIH1cbiAgICBpZiAoZGF0YS5maWxlcykge1xuICAgICAgICBjb25zdCBmaWxlTmFtZXMgPSBkYXRhLmZpbGVzLm1hcCgoZikgPT4gZi5uYW1lKTtcbiAgICAgICAgY29uc3QgZmlsZUNvbXBzID0gZmlsZU5hbWVzLm1hcCgobmFtZSkgPT4gYDxjb2RlPiR7bmFtZX08L2NvZGU+YCk7XG4gICAgICAgIGNvbnN0IGZpbGVDb3VudCA9IGZpbGVDb21wcy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGZpbGVUaXRsZSA9IGAke2ZpbGVDb3VudH0gJHtmaWxlQ291bnQgPT09IDEgPyAnZmlsZScgOiAnZmlsZXMnfTpgO1xuICAgICAgICB0ZXh0UGFydHMucHVzaChgPGI+JHtmaWxlVGl0bGV9PC9iPiBbJHtmaWxlQ29tcHMuam9pbignLCAnKX1dYCk7XG4gICAgfVxuICAgIGNvbnN0IHRleHQgPSB0ZXh0UGFydHMuam9pbignPGJyLz4nKTtcblxuICAgIG5ldyBOb3R5KHtcbiAgICAgICAgdGV4dCxcbiAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxuICAgICAgICB0aGVtZTogJ3JlbGF4JyxcbiAgICAgICAgdGltZW91dDogMzAwMCxcbiAgICB9KS5zaG93KCk7XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgXCI8ZGl2IGNsYXNzPVxcXCJ1bnN0YWJsZS13YXJuaW5nXFxcIj5cXG5cXG4+ICoqU3RvcCByaWdodCB0aGVyZSEqKiBcXG4+IFxcbj4gWW91IGFyZSByZWFkaW5nIHRoZSBkb2N1bWVudGF0aW9uIGZvciBhbiAqKnVucmVsZWFzZWQqKiAxLnhcXG4+IHZlcnNpb24gb2YgQ2hvbmt5LiBUaGUgQVBJIGRlc2NyaWJlZCBoZXJlIGNhbiBjaGFuZ2UgLSBpdCB3aWxsIG5vdCBiZVxcbj4gZnJvemVuIHVudGlsIHRoZSBvZmZpY2lhbCAxLnggcmVsZWFzZS5cXG4+XFxuPiBJZiB5b3UgbmVlZCB0byB1c2UgQ2hvbmt5IHJpZ2h0IG5vdywgdXNlIHRoZSAwLnggdmVyc2lvbiBmcm9tIHRoZSBcXG4+IFtEb2N1bWVudGF0aW9uIEluZGV4XShodHRwczovL3RpbWJva3ouZ2l0aHViLmlvL0Nob25reS8pLlxcbj5cXG4+ICoqV2FudCB0byByZXF1ZXN0IGEgZmVhdHVyZSBmb3IgMS54IG9yIHJlcG9ydCBhIDEueCBpc3N1ZT8qKiBQb3N0IGl0IGluXFxuPiBbQ2hvbmt5IEdpdEh1YiBpc3N1ZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9UaW1ib0taL0Nob25reS9pc3N1ZXMpLlxcblxcbjwvZGl2PlxcblwiOyIsImV4cG9ydCBkZWZhdWx0IFwiIyMjIEEgbm90ZSBhYm91dCBsaXZlIGV4YW1wbGVzLi4uXFxuXFxuQWxsIGxpdmUgZXhhbXBsZXMgYXJlIHdyaXR0ZW4gaW4gVHlwZXNjcmlwdC4gQWxsIGNvbXBvbmVudHMgYW5kIHR5cGVzIGFyZSBpbXBvcnRlZFxcbmZyb20gdGhlIGBjaG9ua3lgIHBhY2thZ2UsIGUuZy46XFxuXFxuYGBgdHNcXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuaW1wb3J0IHsgRmlsZUJyb3dzZXIsIEZpbGVUb29sYmFyLCBGaWxlTGlzdCwgRmlsZURhdGEgfSBmcm9tICdjaG9ua3knO1xcbmBgYFxcblxcblRoZSBvbmx5IGV4Y2VwdGlvbiBpcyB0aGUgYHNob3dBY3Rpb25Ob3RpZmljYXRpb24oKWAgZnVuY3Rpb24sIHdoaWNoIGNhbGxzXFxuW3RoZSBOb3R5IG5vdGlmaWNhdGlvbiBsaWJyYXJ5XShodHRwczovL25lZC5pbS9ub3R5LykgKG5vdCBwYWNrYWdlZCB3aXRoIENob25reSkuIFRvXFxucnVuIHRoZSBleGFtcGxlcyBsb2NhbGx5LCB5b3UgY2FuIHJlcGxhY2UgYHNob3dBY3Rpb25Ob3RpZmljYXRpb24oKWAgd2l0aFxcbmBjb25zb2xlLmxvZygpYC5cXG5cIjsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIk55TVlcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJBUnVhXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiTFcwaFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcImFva0FcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCI5SmhOXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiUGpaWFwiKTsiLCJpbXBvcnQgJ0BzdG9yeWJvb2svcmVhY3QnOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiSlkrQ1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIjd4UlVcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJaVWRHXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiUHVJeFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcInRRYlBcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJobzB6XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiand1ZVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcImRTYUdcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJoUWluXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiK294WlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcImxONUJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJMSjdlXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiSTJmS1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIkRZNDdcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCIza3A5XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiL2JjMlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIi9KdVJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCIrQnh2XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwibXVGeFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIldjaTZcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJXb1JVXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwibzNmU1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIkptVGlcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJ4YWlSXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiU2xEL1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIk1vbm5cIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJmbU5QXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwidUZYalwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIlYwSVdcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJPQ1NsXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiRWdSUFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcImtBNHJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJCbG02XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwic3N2VVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcImxabTNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJFZTJYXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiYjJlM1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIklBZERcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJNdlVMXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwieUgvZlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIm1hajhcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJZc2doXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiSDg3SlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIktPdFpcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJTM3BBXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiTzFTY1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcInpGNW5cIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJrdlZ6XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiQTNVUVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcInRKVmVcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJudW9sXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiUGpKT1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIkRwTzVcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJLa2FyXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiMnE4Z1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIm5EaWhcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJIVUNnXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiYVd6elwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIlljdDVcIik7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfY2xpZW50QXBpID0gcmVxdWlyZShcIi9ob21lL2V1cWwxbi9Xb3Jrc3BhY2VzL3BlcnNvbmFsL0Nob25reS9ub2RlX21vZHVsZXMvQHN0b3J5Ym9vay9jbGllbnQtYXBpXCIpO1xuXG52YXIgX2NsaWVudExvZ2dlciA9IHJlcXVpcmUoXCIvaG9tZS9ldXFsMW4vV29ya3NwYWNlcy9wZXJzb25hbC9DaG9ua3kvbm9kZV9tb2R1bGVzL0BzdG9yeWJvb2svY2xpZW50LWxvZ2dlclwiKTtcblxudmFyIF9jb25maWdGaWxlbmFtZSA9IHJlcXVpcmUoXCIvaG9tZS9ldXFsMW4vV29ya3NwYWNlcy9wZXJzb25hbC9DaG9ua3kvLnN0b3J5Ym9vay9wcmV2aWV3LmpzXCIpO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaWYgKF9jb25maWdGaWxlbmFtZS5hcmdzIHx8IF9jb25maWdGaWxlbmFtZS5hcmdUeXBlcykge1xuICBfY2xpZW50TG9nZ2VyLmxvZ2dlci53YXJuKCdJbnZhbGlkIGFyZ3MvYXJnVHlwZXMgaW4gY29uZmlnLCBpZ25vcmluZy4nLCBKU09OLnN0cmluZ2lmeSh7XG4gICAgYXJnczogX2NvbmZpZ0ZpbGVuYW1lLmFyZ3MsXG4gICAgYXJnVHlwZXM6IF9jb25maWdGaWxlbmFtZS5hcmdUeXBlc1xuICB9KSk7XG59XG5cbmlmIChfY29uZmlnRmlsZW5hbWUuZGVjb3JhdG9ycykge1xuICBfY29uZmlnRmlsZW5hbWUuZGVjb3JhdG9ycy5mb3JFYWNoKGZ1bmN0aW9uIChkZWNvcmF0b3IpIHtcbiAgICByZXR1cm4gKDAsIF9jbGllbnRBcGkuYWRkRGVjb3JhdG9yKShkZWNvcmF0b3IpO1xuICB9KTtcbn1cblxuaWYgKF9jb25maWdGaWxlbmFtZS5wYXJhbWV0ZXJzIHx8IF9jb25maWdGaWxlbmFtZS5nbG9iYWxBcmdzIHx8IF9jb25maWdGaWxlbmFtZS5nbG9iYWxBcmdUeXBlcykge1xuICAoMCwgX2NsaWVudEFwaS5hZGRQYXJhbWV0ZXJzKShfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIF9jb25maWdGaWxlbmFtZS5wYXJhbWV0ZXJzKSwge30sIHtcbiAgICBnbG9iYWxBcmdzOiBfY29uZmlnRmlsZW5hbWUuZ2xvYmFsQXJncyxcbiAgICBnbG9iYWxBcmdUeXBlczogX2NvbmZpZ0ZpbGVuYW1lLmdsb2JhbEFyZ1R5cGVzXG4gIH0pKTtcbn1cblxuaWYgKF9jb25maWdGaWxlbmFtZS5hcmdUeXBlc0VuaGFuY2Vycykge1xuICBfY29uZmlnRmlsZW5hbWUuYXJnVHlwZXNFbmhhbmNlcnMuZm9yRWFjaChmdW5jdGlvbiAoZW5oYW5jZXIpIHtcbiAgICByZXR1cm4gKDAsIF9jbGllbnRBcGkuYWRkQXJnVHlwZXNFbmhhbmNlcikoZW5oYW5jZXIpO1xuICB9KTtcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcImN0ODBcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJvRDR0XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiMnNaN1wiKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9mcmFtZXdvcmsgPSByZXF1aXJlKFwiQHN0b3J5Ym9vay9yZWFjdFwiKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlXG5tb2R1bGUuX1N0b3J5Ym9va1ByZXNlcnZlRGVjb3JhdG9ycyA9IHRydWU7XG4oMCwgX2ZyYW1ld29yay5jb25maWd1cmUpKFtyZXF1aXJlLmNvbnRleHQoJy4uL3N0b3JpZXMnLCB0cnVlLCAvKD86KD8hXFwuKS4qP1xcLnN0b3JpZXNcXC4odHN4fG1keCkpJC8pXSwgbW9kdWxlKTsiLCJ2YXIgbWFwID0ge1xuXHRcIi4vMDAtV2VsY29tZS8wMS1XZWxjb21lLnN0b3JpZXMubWR4XCI6IDYxNyxcblx0XCIuLzAwLVdlbGNvbWUvMDItUGhpbG9zb3BoeS5zdG9yaWVzLm1keFwiOiA2MTgsXG5cdFwiLi8wMC1XZWxjb21lLzAzLUluc3RhbGxhdGlvbi5zdG9yaWVzLm1keFwiOiA2MTksXG5cdFwiLi8wMS1GaWxlLUJyb3dzZXItYmFzaWNzLzAxLUNvbXBvbmVudC1oaWVyYXJjaHkuc3Rvcmllcy50c3hcIjogNzU4LFxuXHRcIi4vMDEtRmlsZS1Ccm93c2VyLWJhc2ljcy8wMi1EaXNwbGF5aW5nLWZpbGVzLnN0b3JpZXMudHN4XCI6IDc1OSxcblx0XCIuLzAxLUZpbGUtQnJvd3Nlci1iYXNpY3MvMDMtU3BlY2lmeWluZy1mb2xkZXIuc3Rvcmllcy50c3hcIjogNzYwLFxuXHRcIi4vMDEtRmlsZS1Ccm93c2VyLWJhc2ljcy8wNC1BY3Rpb25zLnN0b3JpZXMudHN4XCI6IDc2MSxcblx0XCIuLzAxLUZpbGUtQnJvd3Nlci1iYXNpY3MvMDUtQ3VzdG9tLWFjdGlvbnMuc3Rvcmllcy50c3hcIjogNzYyLFxuXHRcIi4vMDEtRmlsZS1Ccm93c2VyLWJhc2ljcy8wNi1UaHVtYm5haWxzLnN0b3JpZXMudHN4XCI6IDc2Myxcblx0XCIuLzAxLUZpbGUtQnJvd3Nlci1iYXNpY3MvMDctRHJhZy1uLWRyb3Auc3Rvcmllcy50c3hcIjogNzY0LFxuXHRcIi4vMDItRmlsZS1Ccm93c2VyLWFkdmFuY2VkLzAxLUludmFsaWQtcHJvcHMuc3Rvcmllcy50c3hcIjogNzY1LFxuXHRcIi4vMDItRmlsZS1Ccm93c2VyLWFkdmFuY2VkLzAyLVZpcnR1YWxpemF0aW9uLnN0b3JpZXMudHN4XCI6IDc2Nixcblx0XCIuLzAzLUFQSS1SZWZlcmVuY2UvMDItQnVpbHQtaW4tYWN0aW9ucy5zdG9yaWVzLm1keFwiOiA3NTZcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSA2MTY7IiwiXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBtZHggfSBmcm9tICdAbWR4LWpzL3JlYWN0J1xuXG4vKiBAanN4IG1keCAqL1xuaW1wb3J0IHsgYXNzZXJ0SXNGbiwgQWRkQ29udGV4dCB9IGZyb20gXCJAc3Rvcnlib29rL2FkZG9uLWRvY3MvYmxvY2tzXCI7XG5cbmltcG9ydCBDaG9ua3lIZWFkZXIgZnJvbSAnLi4vQ2hvbmt5LWhlYWRlci5tZHgnO1xuXG5jb25zdCBtYWtlU2hvcnRjb2RlID0gbmFtZSA9PiBmdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKSB7XG4gIGNvbnNvbGUud2FybihcIkNvbXBvbmVudCBcIiArIG5hbWUgKyBcIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlXCIpXG4gIHJldHVybiA8ZGl2IHsuLi5wcm9wc30vPlxufTtcbmNvbnN0IE1ldGEgPSBtYWtlU2hvcnRjb2RlKFwiTWV0YVwiKTtcbmNvbnN0IGxheW91dFByb3BzID0ge1xuICBcbn07XG5jb25zdCBNRFhMYXlvdXQgPSBcIndyYXBwZXJcIlxuZnVuY3Rpb24gTURYQ29udGVudCh7XG4gIGNvbXBvbmVudHMsXG4gIC4uLnByb3BzXG59KSB7XG4gIHJldHVybiA8TURYTGF5b3V0IHsuLi5sYXlvdXRQcm9wc30gey4uLnByb3BzfSBjb21wb25lbnRzPXtjb21wb25lbnRzfSBtZHhUeXBlPVwiTURYTGF5b3V0XCI+XG5cbiAgICA8TWV0YSB0aXRsZT1cIjAgQ2hvbmt5IE92ZXJ2aWV3fEludHJvZHVjdGlvblwiIG1keFR5cGU9XCJNZXRhXCIgLz5cbiAgICA8Q2hvbmt5SGVhZGVyIG1keFR5cGU9XCJDaG9ua3lIZWFkZXJcIiAvPlxuICAgIDxoMSB7Li4ue1xuICAgICAgXCJpZFwiOiBcImludHJvZHVjdGlvblwiXG4gICAgfX0+e2BJbnRyb2R1Y3Rpb25gfTwvaDE+XG4gICAgPHA+e2BDaG9ua3kgaXMgYSBmaWxlIGJyb3dzZXIgY29tcG9uZW50IGZvciBSZWFjdC4gSXQgdHJpZXMgdG8gcmVjcmVhdGUgdGhlIG5hdGl2ZSBmaWxlIGJyb3dzaW5nIGV4cGVyaWVuY2UgaW4geW91clxuYnJvd3Nlci4gVGhpcyBtZWFucyB5b3VyIHVzZXJzIGNhbiBtYWtlIHNlbGVjdGlvbnMsIGRyYWcgJiBkcm9wIGZpbGVzLCB0b2dnbGUgZmlsZSB2aWV3IGJldHdlZW4gXCJsYXJnZSB0aHVtYm5haWxzXCJcbmFuZCBcImRldGFpbGVkIGxpc3RcIiwgdXNlIGtleWJvYXJkIHNob3J0Y3V0cywgYW5kIG11Y2ggbW9yZSFgfTwvcD5cbiAgICA8aDMgey4uLntcbiAgICAgIFwiaWRcIjogXCJ2aWV3LW9uLWdpdGh1YlwiXG4gICAgfX0+PGEgcGFyZW50TmFtZT1cImgzXCIgey4uLntcbiAgICAgICAgXCJocmVmXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL1RpbWJvS1ovQ2hvbmt5XCIsXG4gICAgICAgIFwidGFyZ2V0XCI6IFwiX2JsYW5rXCIsXG4gICAgICAgIFwicmVsXCI6IFwibm9mb2xsb3cgbm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICB9fT57YFZpZXcgb24gR2l0aHViYH08L2E+PC9oMz5cbiAgICA8YmxvY2txdW90ZT5cbiAgICAgIDxwIHBhcmVudE5hbWU9XCJibG9ja3F1b3RlXCI+e2BDaG9ua3kgaXMgc3RpbGwgaW4gZGV2ZWxvcG1lbnQsIHBsZWFzZSBgfTxhIHBhcmVudE5hbWU9XCJwXCIgey4uLntcbiAgICAgICAgICBcImhyZWZcIjogXCJodHRwczovL2dpdGh1Yi5jb20vVGltYm9LWi9DaG9ua3kvaXNzdWVzXCIsXG4gICAgICAgICAgXCJ0YXJnZXRcIjogXCJfYmxhbmtcIixcbiAgICAgICAgICBcInJlbFwiOiBcIm5vZm9sbG93IG5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICB9fT57YGNyZWF0ZSBhbiBpc3N1ZWB9PC9hPntgIGlmIHlvdSBoYXZlIGFcbnByb2JsZW0gb3Igd2FudCB0byByZXF1ZXN0IGEgZmVhdHVyZS5gfTwvcD5cbiAgICA8L2Jsb2NrcXVvdGU+XG4gICAgPGgzIHsuLi57XG4gICAgICBcImlkXCI6IFwiY2hvbmt5LWZlYXR1cmVzXCJcbiAgICB9fT57YENob25reSBmZWF0dXJlczpgfTwvaDM+XG4gICAgPHVsPlxuICAgICAgPGxpIHBhcmVudE5hbWU9XCJ1bFwiPntgSXQncyBmaWxlIHN5c3RlbSBhZ25vc3RpYyAtIGRhdGEgY2FuIGNvbWUgZnJvbSBhbiBhcmJpdHJhcnkgc291cmNlIGFzIGxvbmcgYXMgaXQgZm9sbG93cyB0aGUgcmVxdWlyZWQgZm9ybWF0LmB9PC9saT5cbiAgICAgIDxsaSBwYXJlbnROYW1lPVwidWxcIj57YFN1cHBvcnRzIGFzeW5jIGZpbGUgc3lzdGVtIGxvZ2ljIC0gdmlhIHRodW1iIGxhenktbG9hZGluZyBhbmQgbG9hZGluZyBwbGFjZWhvbGRlcnMuYH08L2xpPlxuICAgICAgPGxpIHBhcmVudE5hbWU9XCJ1bFwiPntgVXNlcnMgY2FuIGNob29zZSBiZXR3ZWVuIDMgdmlld3M6IERldGFpbHMsIG1lZGl1bSB0aHVtYm5haWxzLCBsYXJnZSB0aHVtYm5haWxzLiBBbGwgZmlsZSB2aWV3cyBhcmUgcmVzcG9uc2l2ZSBhbmRcbm1vYmlsZS1mcmllbmRseS5gfTwvbGk+XG4gICAgICA8bGkgcGFyZW50TmFtZT1cInVsXCI+e2BEZXZlbG9wZXJzIGNhbiBwYXNzIGZpbGUgYWN0aW9uIGhhbmRsZXJzIHRvIGRlZmluZSBjdXN0b20gYmVoYXZpb3VyIGZvciBmaWxlIG9wZW5pbmcsIG1vdmluZyBvciBkZWxldGluZy5gfTwvbGk+XG4gICAgICA8bGkgcGFyZW50TmFtZT1cInVsXCI+e2BTdXBwb3J0cyBmaWxlIHNlbGVjdGlvbnMgYW5kIGB9PGVtIHBhcmVudE5hbWU9XCJsaVwiPntgZHJhZyAmIGRyb3AgKFdJUClgfTwvZW0+e2AsIHNvcnRpbmcgYW5kIGB9PGVtIHBhcmVudE5hbWU9XCJsaVwiPntgdGV4dCBzZWFyY2ggKFdJUClgfTwvZW0+e2AuYH08L2xpPlxuICAgICAgPGxpIHBhcmVudE5hbWU9XCJ1bFwiPntgU3VwcG9ydHMgYH08YSBwYXJlbnROYW1lPVwibGlcIiB7Li4ue1xuICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9vcHRpbWl6aW5nLXBlcmZvcm1hbmNlLmh0bWwjdmlydHVhbGl6ZS1sb25nLWxpc3RzXCIsXG4gICAgICAgICAgXCJ0YXJnZXRcIjogXCJfYmxhbmtcIixcbiAgICAgICAgICBcInJlbFwiOiBcIm5vZm9sbG93IG5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICB9fT57YHdpbmRvd2luZ2B9PC9hPntgIChhLmsuYS5cbnZpcnR1YWxpemF0aW9uKSBmb3IgbG9uZyBmaWxlIGxpc3RzIChgfTxhIHBhcmVudE5hbWU9XCJsaVwiIHsuLi57XG4gICAgICAgICAgXCJocmVmXCI6IFwiI3NlY3Rpb24tdmlydHVhbGl6YXRpb24td2l0aC0xMDAwMC1maWxlc1wiXG4gICAgICAgIH19Pntgc2VlIGV4YW1wbGVgfTwvYT57YCkuYH08L2xpPlxuICAgICAgPGxpIHBhcmVudE5hbWU9XCJ1bFwiPntgU3VwcG9ydHMgY29tbW9uIGtleWJvYXJkIHNob3J0Y3V0cy5gfTwvbGk+XG4gICAgICA8bGkgcGFyZW50TmFtZT1cInVsXCI+e2BTdXBwb3J0cyBmaWxlIHRodW1ibmFpbHMgKGUuZy4gZ2VuZXJhdGVkIGZyb20gdmlkZW9zIG9yIGltYWdlcykuYH08L2xpPlxuICAgICAgPGxpIHBhcmVudE5hbWU9XCJ1bFwiPntgRGV0ZWN0cyBjb21tb24gZmlsZSB0eXBlcywgc2hvd2luZyBhcHByb3ByaWF0ZSBpY29ucy5gfTwvbGk+XG4gICAgPC91bD5cbiAgICA8L01EWExheW91dD47XG59XG5cbjtcbk1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQgPSB0cnVlO1xuXG5leHBvcnQgY29uc3QgX19wYWdlID0gKCkgPT4geyB0aHJvdyBuZXcgRXJyb3IoXCJEb2NzLW9ubHkgc3RvcnlcIik7IH07XG5cbl9fcGFnZS5wYXJhbWV0ZXJzID0geyBkb2NzT25seTogdHJ1ZSB9O1xuXG5jb25zdCBjb21wb25lbnRNZXRhID0geyB0aXRsZTogJzAgQ2hvbmt5IE92ZXJ2aWV3fEludHJvZHVjdGlvbicsIGluY2x1ZGVTdG9yaWVzOiBbXCJfX3BhZ2VcIl0sICB9O1xuXG5jb25zdCBtZHhTdG9yeU5hbWVUb0tleSA9IHt9O1xuXG5jb21wb25lbnRNZXRhLnBhcmFtZXRlcnMgPSBjb21wb25lbnRNZXRhLnBhcmFtZXRlcnMgfHwge307XG5jb21wb25lbnRNZXRhLnBhcmFtZXRlcnMuZG9jcyA9IHtcbiAgLi4uKGNvbXBvbmVudE1ldGEucGFyYW1ldGVycy5kb2NzIHx8IHt9KSxcbiAgcGFnZTogKCkgPT4gPEFkZENvbnRleHQgbWR4U3RvcnlOYW1lVG9LZXk9e21keFN0b3J5TmFtZVRvS2V5fSBtZHhDb21wb25lbnRNZXRhPXtjb21wb25lbnRNZXRhfT48TURYQ29udGVudCAvPjwvQWRkQ29udGV4dD4sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnRNZXRhOyIsIlxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgbWR4IH0gZnJvbSAnQG1keC1qcy9yZWFjdCdcblxuLyogQGpzeCBtZHggKi9cbmltcG9ydCB7IGFzc2VydElzRm4sIEFkZENvbnRleHQgfSBmcm9tIFwiQHN0b3J5Ym9vay9hZGRvbi1kb2NzL2Jsb2Nrc1wiO1xuXG5pbXBvcnQgQ2hvbmt5SGVhZGVyIGZyb20gJy4uL0Nob25reS1oZWFkZXIubWR4JztcblxuY29uc3QgbWFrZVNob3J0Y29kZSA9IG5hbWUgPT4gZnVuY3Rpb24gTURYRGVmYXVsdFNob3J0Y29kZShwcm9wcykge1xuICBjb25zb2xlLndhcm4oXCJDb21wb25lbnQgXCIgKyBuYW1lICsgXCIgd2FzIG5vdCBpbXBvcnRlZCwgZXhwb3J0ZWQsIG9yIHByb3ZpZGVkIGJ5IE1EWFByb3ZpZGVyIGFzIGdsb2JhbCBzY29wZVwiKVxuICByZXR1cm4gPGRpdiB7Li4ucHJvcHN9Lz5cbn07XG5jb25zdCBNZXRhID0gbWFrZVNob3J0Y29kZShcIk1ldGFcIik7XG5jb25zdCBsYXlvdXRQcm9wcyA9IHtcbiAgXG59O1xuY29uc3QgTURYTGF5b3V0ID0gXCJ3cmFwcGVyXCJcbmZ1bmN0aW9uIE1EWENvbnRlbnQoe1xuICBjb21wb25lbnRzLFxuICAuLi5wcm9wc1xufSkge1xuICByZXR1cm4gPE1EWExheW91dCB7Li4ubGF5b3V0UHJvcHN9IHsuLi5wcm9wc30gY29tcG9uZW50cz17Y29tcG9uZW50c30gbWR4VHlwZT1cIk1EWExheW91dFwiPlxuXG4gICAgPE1ldGEgdGl0bGU9XCIwIENob25reSBPdmVydmlld3xQaGlsb3NvcGh5XCIgbWR4VHlwZT1cIk1ldGFcIiAvPlxuICAgIDxDaG9ua3lIZWFkZXIgbWR4VHlwZT1cIkNob25reUhlYWRlclwiIC8+XG4gICAgPGgxIHsuLi57XG4gICAgICBcImlkXCI6IFwicGhpbG9zb3BoeVwiXG4gICAgfX0+e2BQaGlsb3NvcGh5YH08L2gxPlxuICAgIDxwPntgUGxlYXNlIHJlYWQgdGhpcyBzZWN0aW9uIHRvIHVuZGVyc3RhbmQgd2hhdCBDaG9ua3kgaXMgYW5kIGlzIG5vdC5gfTwvcD5cbiAgICA8YnIgLz5cbiAgICA8YnIgLz5cbiAgICA8aDMgey4uLntcbiAgICAgIFwiaWRcIjogXCJjaG9ua3ktaXMtdGhlLXByZXNlbnRhdGlvbi1sYXllclwiXG4gICAgfX0+e2BDaG9ua3kgaXMgdGhlIHByZXNlbnRhdGlvbiBsYXllci5gfTwvaDM+XG4gICAgPHA+e2BDaG9ua3kgdGFrZXMgYSBsaXN0IG9mIGZpbGVzIGFuZCBzaG93cyB0aGVtIHRvIHRoZSB1c2VyLiBJdCBkb2VzIG5vdCBhbmQgc2hvdWxkIG5vdFxua25vdyB3aGVyZSB0aGUgZmlsZXMgY2FtZSBmcm9tLCBub3Igc2hvdWxkIGl0IG5vdyBob3cgZmlsZSBvcGVyYXRpb25zIGFyZSBjYXJyaWVkIG91dC5gfTwvcD5cbiAgICA8YnIgLz5cbiAgICA8aDMgey4uLntcbiAgICAgIFwiaWRcIjogXCJjaG9ua3ktaXMtZmlsZXN5c3RlbS1hZ25vc3RpY1wiXG4gICAgfX0+e2BDaG9ua3kgaXMgZmlsZXN5c3RlbS1hZ25vc3RpYy5gfTwvaDM+XG4gICAgPHA+e2BDaG9ua3kgdHJpZXMgdG8gc3RheSBgfTxzdHJvbmcgcGFyZW50TmFtZT1cInBcIj57YHVub3BpbmlvbmF0ZWRgfTwvc3Ryb25nPntgIHdoZW4gaXQgY29tZXMgdG8gaW50ZXJhY3Rpb25zIHdpdGggdGhlIGZpbGVcbnN5c3RlbSAoRlMpLmB9PC9wPlxuICAgIDxiciAvPlxuICAgIDxoMyB7Li4ue1xuICAgICAgXCJpZFwiOiBcImRldmVsb3BpbmctZmlsZS1icm93c2Vycy1pcy1oYXJkLWVhY2gtdXNlLWNhc2UtaXMtdW5pcXVlXCJcbiAgICB9fT57YERldmVsb3BpbmcgZmlsZSBicm93c2VycyBpcyBoYXJkLiBFYWNoIHVzZSBjYXNlIGlzIHVuaXF1ZS5gfTwvaDM+XG4gICAgPHA+e2BBdCB0aGUgc2FtZSB0aW1lLCBDaG9ua3kgdHJpZXMgdG8gY292ZXIgYWxsIHBvc3NpYmxlIGludGVyYWN0aW9ucyB3aXRoIHRoZSB1c2VyLiBUaGlzIGluY2x1ZGVzIHN1cHBvcnQgZm9yIGtleWJvYXJkXG5uYXZpZ2F0aW9uIGFuZCBjb21tb24ga2V5Ym9hcmQgc2hvcnRjdXRzLCBzdXBwb3J0IGZvciBmaWxlIHNlbGVjdGlvbnMsIGRyYWcgJiBkcm9wLCBkaWZmZXJlbnQgZmlsZSB2aWV3cywgYW5kIG11Y2ggbW9yZS5gfTwvcD5cbiAgICA8L01EWExheW91dD47XG59XG5cbjtcbk1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQgPSB0cnVlO1xuXG5leHBvcnQgY29uc3QgX19wYWdlID0gKCkgPT4geyB0aHJvdyBuZXcgRXJyb3IoXCJEb2NzLW9ubHkgc3RvcnlcIik7IH07XG5cbl9fcGFnZS5wYXJhbWV0ZXJzID0geyBkb2NzT25seTogdHJ1ZSB9O1xuXG5jb25zdCBjb21wb25lbnRNZXRhID0geyB0aXRsZTogJzAgQ2hvbmt5IE92ZXJ2aWV3fFBoaWxvc29waHknLCBpbmNsdWRlU3RvcmllczogW1wiX19wYWdlXCJdLCAgfTtcblxuY29uc3QgbWR4U3RvcnlOYW1lVG9LZXkgPSB7fTtcblxuY29tcG9uZW50TWV0YS5wYXJhbWV0ZXJzID0gY29tcG9uZW50TWV0YS5wYXJhbWV0ZXJzIHx8IHt9O1xuY29tcG9uZW50TWV0YS5wYXJhbWV0ZXJzLmRvY3MgPSB7XG4gIC4uLihjb21wb25lbnRNZXRhLnBhcmFtZXRlcnMuZG9jcyB8fCB7fSksXG4gIHBhZ2U6ICgpID0+IDxBZGRDb250ZXh0IG1keFN0b3J5TmFtZVRvS2V5PXttZHhTdG9yeU5hbWVUb0tleX0gbWR4Q29tcG9uZW50TWV0YT17Y29tcG9uZW50TWV0YX0+PE1EWENvbnRlbnQgLz48L0FkZENvbnRleHQ+LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50TWV0YTsiLCJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IG1keCB9IGZyb20gJ0BtZHgtanMvcmVhY3QnXG5cbi8qIEBqc3ggbWR4ICovXG5pbXBvcnQgeyBhc3NlcnRJc0ZuLCBBZGRDb250ZXh0IH0gZnJvbSBcIkBzdG9yeWJvb2svYWRkb24tZG9jcy9ibG9ja3NcIjtcblxuaW1wb3J0IENob25reUhlYWRlciBmcm9tICcuLi9DaG9ua3ktaGVhZGVyLm1keCc7XG5cbmNvbnN0IG1ha2VTaG9ydGNvZGUgPSBuYW1lID0+IGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpIHtcbiAgY29uc29sZS53YXJuKFwiQ29tcG9uZW50IFwiICsgbmFtZSArIFwiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGVcIilcbiAgcmV0dXJuIDxkaXYgey4uLnByb3BzfS8+XG59O1xuY29uc3QgTWV0YSA9IG1ha2VTaG9ydGNvZGUoXCJNZXRhXCIpO1xuY29uc3QgbGF5b3V0UHJvcHMgPSB7XG4gIFxufTtcbmNvbnN0IE1EWExheW91dCA9IFwid3JhcHBlclwiXG5mdW5jdGlvbiBNRFhDb250ZW50KHtcbiAgY29tcG9uZW50cyxcbiAgLi4ucHJvcHNcbn0pIHtcbiAgcmV0dXJuIDxNRFhMYXlvdXQgey4uLmxheW91dFByb3BzfSB7Li4ucHJvcHN9IGNvbXBvbmVudHM9e2NvbXBvbmVudHN9IG1keFR5cGU9XCJNRFhMYXlvdXRcIj5cblxuICAgIDxNZXRhIHRpdGxlPVwiMCBDaG9ua3kgT3ZlcnZpZXd8SW5zdGFsbGF0aW9uICZhbXA7IHVzYWdlXCIgbWR4VHlwZT1cIk1ldGFcIiAvPlxuICAgIDxDaG9ua3lIZWFkZXIgbWR4VHlwZT1cIkNob25reUhlYWRlclwiIC8+XG4gICAgPGgxIHsuLi57XG4gICAgICBcImlkXCI6IFwiaW5zdGFsbGF0aW9uXCJcbiAgICB9fT57YEluc3RhbGxhdGlvbmB9PC9oMT5cbiAgICA8cD57YEFkZCBDaG9ua3kgdG8geW91ciBOUE0gcHJvamVjdDpgfTwvcD5cbiAgICA8cHJlPjxjb2RlIHBhcmVudE5hbWU9XCJwcmVcIiB7Li4ue1xuICAgICAgICBcImNsYXNzTmFtZVwiOiBcImxhbmd1YWdlLXNoZWxsXCJcbiAgICAgIH19PntgbnBtIGluc3RhbGwgY2hvbmt5XG5gfTwvY29kZT48L3ByZT5cbiAgICA8cD57YFRoZW4sIGltcG9ydCByZWxldmFudCBjb21wb25lbnRzIGFuZCBzdHlsZXM6YH08L3A+XG4gICAgPHByZT48Y29kZSBwYXJlbnROYW1lPVwicHJlXCIgey4uLntcbiAgICAgICAgXCJjbGFzc05hbWVcIjogXCJsYW5ndWFnZS1qc1wiXG4gICAgICB9fT57YGltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcbmltcG9ydCB7IEZpbGVCcm93c2VyLCBGaWxlTGlzdCB9IGZyb20gJ2Nob25reSc7XG5gfTwvY29kZT48L3ByZT5cbiAgICA8cD57YEFuZCB5b3UncmUgZ29vZCB0byBnbyEgQ2hlY2sgb3RoZXIgc2VjdGlvbnMgaW4gdGhlIGRvY3VtZW50YXRpb24gdG8gc2VlIGhvdyBDaG9ua3lcbmNvbXBvbmVudHMgY2FuIGJlIHVzZWQuYH08L3A+XG4gICAgPGgzIHsuLi57XG4gICAgICBcImlkXCI6IFwidXNhZ2Utd2l0aC10eXBlc2NyaXB0XCJcbiAgICB9fT57YFVzYWdlIHdpdGggVHlwZXNjcmlwdGB9PC9oMz5cbiAgICA8cD57YENob25reSB3YXMgYnVpbHQgdXNpbmcgVHlwZXNjcmlwdC4gQXMgc3VjaCwgbWFueSBvZiB0aGUgaW50ZXJuYWwgdHlwZXMgYW5kIGludGVyZmFjZXNcbmFyZSBleHBvcnRlZC4gU29tZSB0eXBlcyBhcmUgZ2VuZXJpYywgdG8gbWFrZSBpdCBlYXNpZXIgZm9yIHlvdSB0byBpbnRlZ3JhdGUgQ2hvbmt5XG5pbnRvIHlvdSBUeXBlc2NyaXB0IHBhY2thZ2UuYH08L3A+XG4gICAgPHA+e2BJZiB5b3UncmUgYWxzbyB1c2luZyBUeXBlc2NyaXB0LCB5b3UgY2FuIGFkZCBDaG9ua3kgdHlwZXMgdG8geW91ciBwcm9qZWN0IHVzaW5nXG5zdGFuZGFyZFxuaW1wb3J0czpgfTwvcD5cbiAgICA8cHJlPjxjb2RlIHBhcmVudE5hbWU9XCJwcmVcIiB7Li4ue1xuICAgICAgICBcImNsYXNzTmFtZVwiOiBcImxhbmd1YWdlLXRzXCJcbiAgICAgIH19PntgLy8gRmlsZUFycmF5IGlzIGEgVFMgdHlwZVxuaW1wb3J0IHsgRmlsZUFycmF5IH0gZnJvbSAnY2hvbmt5JztcblxuY29uc3QgbXlGaWxlczogRmlsZUFycmF5ID0gW1xuICAgIHtcbiAgICAgICAgaWQ6ICdhYkQzJyxcbiAgICAgICAgbmFtZTogJ1JFQURNRS50eHQnLFxuICAgIH0sXG4gICAgbnVsbCxcbl07XG5gfTwvY29kZT48L3ByZT5cbiAgICA8L01EWExheW91dD47XG59XG5cbjtcbk1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQgPSB0cnVlO1xuXG5leHBvcnQgY29uc3QgX19wYWdlID0gKCkgPT4geyB0aHJvdyBuZXcgRXJyb3IoXCJEb2NzLW9ubHkgc3RvcnlcIik7IH07XG5cbl9fcGFnZS5wYXJhbWV0ZXJzID0geyBkb2NzT25seTogdHJ1ZSB9O1xuXG5jb25zdCBjb21wb25lbnRNZXRhID0geyB0aXRsZTogJzAgQ2hvbmt5IE92ZXJ2aWV3fEluc3RhbGxhdGlvbiAmIHVzYWdlJywgaW5jbHVkZVN0b3JpZXM6IFtcIl9fcGFnZVwiXSwgIH07XG5cbmNvbnN0IG1keFN0b3J5TmFtZVRvS2V5ID0ge307XG5cbmNvbXBvbmVudE1ldGEucGFyYW1ldGVycyA9IGNvbXBvbmVudE1ldGEucGFyYW1ldGVycyB8fCB7fTtcbmNvbXBvbmVudE1ldGEucGFyYW1ldGVycy5kb2NzID0ge1xuICAuLi4oY29tcG9uZW50TWV0YS5wYXJhbWV0ZXJzLmRvY3MgfHwge30pLFxuICBwYWdlOiAoKSA9PiA8QWRkQ29udGV4dCBtZHhTdG9yeU5hbWVUb0tleT17bWR4U3RvcnlOYW1lVG9LZXl9IG1keENvbXBvbmVudE1ldGE9e2NvbXBvbmVudE1ldGF9PjxNRFhDb250ZW50IC8+PC9BZGRDb250ZXh0Pixcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudE1ldGE7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJqUTNpXCIpOyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuY2hvbmt5LWZpbGwtcGFyZW50IHtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuXFxuLmNob25reS1uby1zZWxlY3Qge1xcbiAgLXdlYmtpdC10b3VjaC1jYWxsb3V0OiBub25lO1xcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXG59XFxuXFxuLmNob25reS1yb290IHtcXG4gIGJvcmRlcjogc29saWQgMXB4ICNlNGU0ZTQ7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBwYWRkaW5nOiA3LjVweDtcXG4gIHRvdWNoLWFjdGlvbjogbWFuaXB1bGF0aW9uO1xcbiAgZm9udC1zaXplOiAxNXB4O1xcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuXFxuLmNob25reS1lcnJvciB7XFxuICBib3JkZXI6IHNvbGlkIDFweCByZ2JhKDEwOCwgNzIsIDcyLCAwLjExKTtcXG4gIG1hcmdpbi1ib3R0b206IDcuNXB4O1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZkZWJlYjtcXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xcbiAgY29sb3I6ICM4ZTIxMjE7XFxuICBwYWRkaW5nOiAxZW07XFxufVxcbi5jaG9ua3ktZXJyb3ItbmFtZSB7XFxuICBvcGFjaXR5OiAwLjU7XFxufVxcbi5jaG9ua3ktZXJyb3IgdWwge1xcbiAgcGFkZGluZy10b3A6IDAuMWVtO1xcbiAgbWFyZ2luOiAwO1xcbn1cXG4uY2hvbmt5LWVycm9yIGxpIHtcXG4gIG1hcmdpbi10b3A6IDAuNWVtO1xcbn1cXG5cXG4uY2hvbmt5LXRvb2x0aXAge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4uY2hvbmt5LXRvb2x0aXA6aG92ZXI6OmJlZm9yZSwgLmNob25reS10b29sdGlwOmhvdmVyOjphZnRlciwgLmNob25reS10b29sdGlwOmZvY3VzOjpiZWZvcmUsIC5jaG9ua3ktdG9vbHRpcDpmb2N1czo6YWZ0ZXIsIC5jaG9ua3ktdG9vbHRpcDphY3RpdmU6OmJlZm9yZSwgLmNob25reS10b29sdGlwOmFjdGl2ZTo6YWZ0ZXIge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG4uY2hvbmt5LXRvb2x0aXA6OmJlZm9yZSwgLmNob25reS10b29sdGlwOjphZnRlciB7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDEwMG1zIGVhc2UtaW4tb3V0O1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBkaXNwbGF5OiBub25lO1xcbiAgei1pbmRleDogOTk5OTtcXG4gIGJvdHRvbTogMTAwJTtcXG4gIG9wYWNpdHk6IDA7XFxuICBsZWZ0OiA1MCU7XFxufVxcbi5jaG9ua3ktdG9vbHRpcDo6YmVmb3JlIHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNzUlKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44KTtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIGNvbnRlbnQ6IGF0dHIoZGF0YS10b29sdGlwKTtcXG4gIHBhZGRpbmc6IDAuNGVtIDAuNWVtO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIG1hcmdpbi1ib3R0b206IDZweDtcXG4gIGxpbmUtaGVpZ2h0OiAxZW07XFxuICBjb2xvcjogI2ZmZjtcXG4gIGZvbnQtc2l6ZTogMC44ZW07XFxuICBoZWlnaHQ6IDFlbTtcXG59XFxuLmNob25reS10b29sdGlwOjphZnRlciB7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgcm90YXRlKDQ1ZGVnKTtcXG4gIGJvcmRlcjogc29saWQgMnB4IHJnYmEoMCwgMCwgMCwgMC44KTtcXG4gIGJvcmRlci1sZWZ0LWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci10b3AtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgbWFyZ2luLWJvdHRvbTogNHB4O1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxufVxcblxcbi5jaG9ua3ktdGV4dC1wbGFjZWhvbGRlciB7XFxuICAtd2Via2l0LWFuaW1hdGlvbjogbG9hZGluZy1wbGFjZWhvbGRlciAxLjVzIGluZmluaXRlIGxpbmVhcjtcXG4gIGFuaW1hdGlvbjogbG9hZGluZy1wbGFjZWhvbGRlciAxLjVzIGluZmluaXRlIGxpbmVhcjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNjY2M7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIG1pbi13aWR0aDogMjBweDtcXG4gIG1heC13aWR0aDogNDAlO1xcbn1cXG5ALXdlYmtpdC1rZXlmcmFtZXMgbG9hZGluZy1wbGFjZWhvbGRlciB7XFxuICAwJSB7XFxuICAgIG9wYWNpdHk6IDAuMjtcXG4gIH1cXG4gIDUwJSB7XFxuICAgIG9wYWNpdHk6IDAuNDtcXG4gIH1cXG4gIDEwMCUge1xcbiAgICBvcGFjaXR5OiAwLjI7XFxuICB9XFxufVxcbkBrZXlmcmFtZXMgbG9hZGluZy1wbGFjZWhvbGRlciB7XFxuICAwJSB7XFxuICAgIG9wYWNpdHk6IDAuMjtcXG4gIH1cXG4gIDUwJSB7XFxuICAgIG9wYWNpdHk6IDAuNDtcXG4gIH1cXG4gIDEwMCUge1xcbiAgICBvcGFjaXR5OiAwLjI7XFxuICB9XFxufVxcblxcbi5jaG9ua3ktdG9vbGJhciB7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBmbGV4LXdyYXA6IHdyYXAtcmV2ZXJzZTtcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG4uY2hvbmt5LXRvb2xiYXItc2lkZSB7XFxuICBtYXJnaW4tYm90dG9tOiA3LjVweDtcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICBwYWRkaW5nLWJvdHRvbTogMDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWdyb3c6IDE7XFxufVxcbi5jaG9ua3ktdG9vbGJhci1zaWRlLWxlZnQge1xcbiAgZmxleC1ncm93OiAxMDAwMDtcXG59XFxuLmNob25reS10b29sYmFyLXNpZGUtbGVmdCAuY2hvbmt5LXRvb2xiYXItYnV0dG9uLWdyb3VwIHtcXG4gIG1hcmdpbi1yaWdodDogNy41cHg7XFxufVxcbi5jaG9ua3ktdG9vbGJhci1zaWRlLXJpZ2h0IHtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG59XFxuLmNob25reS10b29sYmFyLXNpZGUtcmlnaHQgLmNob25reS10b29sYmFyLWJ1dHRvbi1ncm91cCB7XFxuICBtYXJnaW4tbGVmdDogNy41cHg7XFxufVxcbi5jaG9ua3ktdG9vbGJhci1zaWRlLWluc2lkZSB7XFxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuLmNob25reS10b29sYmFyLXNpZGUtaW5zaWRlID4gKiB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MDBweCkge1xcbiAgLmNob25reS10b29sYmFyIHtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbi1yZXZlcnNlO1xcbiAgfVxcbiAgLmNob25reS1zaWRlLXJpZ2h0IHtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgfVxcbn1cXG4uY2hvbmt5LWZvbGRlci1jaGFpbi1lbnRyeSwgLmNob25reS1mb2xkZXItY2hhaW4tc2VwYXJhdG9yIHtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcbi5jaG9ua3ktZm9sZGVyLWNoYWluLWVudHJ5IHtcXG4gIGJhY2tncm91bmQ6IG5vbmU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBjb2xvcjogaW5oZXJpdDtcXG4gIGZvbnQ6IGluaGVyaXQ7XFxuICBib3JkZXI6IG5vbmU7XFxuICBwYWRkaW5nOiAwO1xcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAxMDBtcyBlYXNlLWluLW91dDtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIGJvcmRlcjogc29saWQgMXB4IHRyYW5zcGFyZW50O1xcbiAgbGluZS1oZWlnaHQ6IDI4cHg7XFxuICBwYWRkaW5nOiAwIDAuM2VtICFpbXBvcnRhbnQ7XFxuICBoZWlnaHQ6IDI4cHg7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MDBweCkge1xcbiAgLmNob25reS1mb2xkZXItY2hhaW4tZW50cnkge1xcbiAgICBsaW5lLWhlaWdodDogMS43ZW07XFxuICAgIGhlaWdodDogMS43ZW07XFxuICB9XFxufVxcbi5jaG9ua3ktZm9sZGVyLWNoYWluLWVudHJ5Omxhc3QtY2hpbGQgLmNob25reS1mb2xkZXItY2hhaW4tZW50cnktbmFtZSB7XFxuICAtd2Via2l0LXRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lICNiYmI7XFxuICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lICNiYmI7XFxufVxcbi5jaG9ua3ktZm9sZGVyLWNoYWluLWVudHJ5LmNob25reS1sb2FkaW5nIHtcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXG4gIGNvbG9yOiAjYmJiO1xcbn1cXG5kaXYuY2hvbmt5LWZvbGRlci1jaGFpbi1lbnRyeSB7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxufVxcblxcbmJ1dHRvbi5jaG9ua3ktZm9sZGVyLWNoYWluLWVudHJ5OmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7XFxufVxcbmJ1dHRvbi5jaG9ua3ktZm9sZGVyLWNoYWluLWVudHJ5OmFjdGl2ZSB7XFxuICBib3JkZXItY29sb3I6ICNjY2M7XFxufVxcblxcbi5jaG9ua3ktZm9sZGVyLWNoYWluLXNlcGFyYXRvciB7XFxuICBsaW5lLWhlaWdodDogMjhweDtcXG4gIGhlaWdodDogMjhweDtcXG4gIGNvbG9yOiAjYmJiO1xcbiAgcGFkZGluZzogMCAwLjFlbTtcXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDAwcHgpIHtcXG4gIC5jaG9ua3ktZm9sZGVyLWNoYWluLXNlcGFyYXRvciB7XFxuICAgIGxpbmUtaGVpZ2h0OiAxLjdlbTtcXG4gICAgaGVpZ2h0OiAxLjdlbTtcXG4gICAgcGFkZGluZzogMCAwLjFlbTtcXG4gIH1cXG59XFxuXFxuLmNob25reS10b29sYmFyLWJ1dHRvbi1ncm91cCAuY2hvbmt5LXRvb2xiYXItYnV0dG9uIHtcXG4gIGJvcmRlci1yYWRpdXM6IDA7XFxufVxcbi5jaG9ua3ktdG9vbGJhci1idXR0b24tZ3JvdXAgLmNob25reS10b29sYmFyLWJ1dHRvbjpmaXJzdC1jaGlsZCB7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiA0cHg7XFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiA0cHg7XFxufVxcbi5jaG9ua3ktdG9vbGJhci1idXR0b24tZ3JvdXAgLmNob25reS10b29sYmFyLWJ1dHRvbjpsYXN0LWNoaWxkIHtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiA0cHg7XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogNHB4O1xcbn1cXG4uY2hvbmt5LXRvb2xiYXItYnV0dG9uLWdyb3VwIC5jaG9ua3ktdG9vbGJhci1idXR0b246Zm9jdXMge1xcbiAgei1pbmRleDogMTU7XFxufVxcbi5jaG9ua3ktdG9vbGJhci1idXR0b24tZ3JvdXAgLmNob25reS10b29sYmFyLWJ1dHRvbjpub3QoOmZpcnN0LWNoaWxkKSB7XFxuICBtYXJnaW4tbGVmdDogLTFweDtcXG59XFxuXFxuLmNob25reS10b29sYmFyLWJ1dHRvbiB7XFxuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDEwMG1zIGVhc2UtaW4tb3V0O1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbiAgZm9udDogaW5oZXJpdDtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIHBhZGRpbmc6IDA7XFxuICBsaW5lLWhlaWdodDogMjZweDtcXG4gIGJvcmRlcjogc29saWQgMXB4ICNlNGU0ZTQ7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBtaW4td2lkdGg6IDI4cHg7XFxuICBoZWlnaHQ6IDI4cHg7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB6LWluZGV4OiAxMDtcXG59XFxuLmNob25reS10b29sYmFyLWJ1dHRvbi1pY29uLCAuY2hvbmt5LXRvb2xiYXItYnV0dG9uLXRleHQge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG4uY2hvbmt5LXRvb2xiYXItYnV0dG9uLWljb24ge1xcbiAgbWluLXdpZHRoOiAyOHB4O1xcbn1cXG4uY2hvbmt5LXRvb2xiYXItYnV0dG9uLXRleHQge1xcbiAgcGFkZGluZy1yaWdodDogMTBweDtcXG4gIHBhZGRpbmctbGVmdDogMTBweDtcXG59XFxuLmNob25reS10b29sYmFyLWJ1dHRvbi1pY29uICsgLmNob25reS10b29sYmFyLWJ1dHRvbi10ZXh0IHtcXG4gIHBhZGRpbmctbGVmdDogMCAhaW1wb3J0YW50O1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MDBweCkge1xcbiAgLmNob25reS10b29sYmFyLWJ1dHRvbiB7XFxuICAgIGxpbmUtaGVpZ2h0OiAxLjdlbTtcXG4gICAgbWluLXdpZHRoOiAxLjdlbTtcXG4gICAgaGVpZ2h0OiAxLjdlbTtcXG4gIH1cXG4gIC5jaG9ua3ktdG9vbGJhci1idXR0b24taWNvbiB7XFxuICAgIG1pbi13aWR0aDogMS43ZW07XFxuICB9XFxufVxcbi5jaG9ua3ktdG9vbGJhci1idXR0b24uY2hvbmt5LWFjdGl2ZSB7XFxuICB6LWluZGV4OiA5MztcXG59XFxuLmNob25reS10b29sYmFyLWJ1dHRvbjpob3ZlciB7XFxuICB6LWluZGV4OiA5MjtcXG59XFxuLmNob25reS10b29sYmFyLWJ1dHRvbjphY3RpdmUge1xcbiAgYm9yZGVyLWNvbG9yOiAjY2NjO1xcbn1cXG4uY2hvbmt5LXRvb2xiYXItYnV0dG9uID4gc3BhbiB7XFxuICBwYWRkaW5nOiA2cHg7XFxuICBib3JkZXItY29sb3I6ICNjY2M7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbn1cXG4uY2hvbmt5LXRvb2xiYXItYnV0dG9uW2Rpc2FibGVkXSB7XFxuICBjb2xvcjogI2JiYiAhaW1wb3J0YW50O1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxufVxcbi5jaG9ua3ktdG9vbGJhci1idXR0b24uY2hvbmt5LWFjdGl2ZSB7XFxuICBjb2xvcjogIzA5ZjtcXG59XFxuLmNob25reS10b29sYmFyLWJ1dHRvbjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmNWY1O1xcbiAgei1pbmRleDogOTI7XFxufVxcblxcbi5jaG9ua3ktZmlsZS1saXN0IHtcXG4gIGZsZXg6IDEgMTtcXG59XFxuXFxuLmNob25reS1maWxlLWVudHJ5LWNsaWNrYWJsZS13cmFwcGVyIHtcXG4gIG91dGxpbmU6IG5vbmUgIWltcG9ydGFudDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLmNob25reS1maWxlLWVudHJ5LWNsaWNrYWJsZS13cmFwcGVyOmZvY3VzIC5jaG9ua3ktZmlsZS1lbnRyeS1pbnNpZGU6YmVmb3JlIHtcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMCAwIDJweCAjMDAwICFpbXBvcnRhbnQ7XFxufVxcbi5jaG9ua3ktZmlsZS1lbnRyeS1jbGlja2FibGUtd3JhcHBlcjpmb2N1cyAuY2hvbmt5LWZpbGUtZW50cnktZGVzY3JpcHRpb24ge1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogIzAwMCAhaW1wb3J0YW50O1xcbn1cXG4uY2hvbmt5LWZpbGUtZW50cnktY2xpY2thYmxlLXdyYXBwZXI6Zm9jdXMgLmNob25reS1maWxlLWljb24taW5zaWRlIHtcXG4gIGNvbG9yOiAjMDAwO1xcbn1cXG5cXG4uY2hvbmt5LWZpbGUtZHJhZy1wcmV2aWV3IHtcXG4gIHBhZGRpbmc6IDcuNXB4IDEwcHg7XFxuICBib3gtc2hhZG93OiAycHggMnB4IDVweCAjODg4O1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgYm9yZGVyOiBzb2xpZCAycHggIzA5ZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblxcbi5jaG9ua3ktZmlsZS1lbnRyeSB7XFxuICBib3JkZXI6IHNvbGlkIDFweCAjZTRlNGU0O1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBoZWlnaHQ6IDEwMCU7XFxufVxcbi5jaG9ua3ktZmlsZS1lbnRyeS1pbnNpZGUge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG4uY2hvbmt5LWZpbGUtZW50cnktaW5zaWRlOmJlZm9yZSB7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHotaW5kZXg6IDk5OTtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgYm90dG9tOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBsZWZ0OiAwO1xcbiAgdG9wOiAwO1xcbn1cXG4uY2hvbmt5LWZpbGUtZW50cnktZG5kLWluZGljYXRvciB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgZm9udC1zaXplOiAxLjJlbTtcXG4gIG9wYWNpdHk6IDAuNjtcXG4gIHBhZGRpbmc6IDZweDtcXG4gIHotaW5kZXg6IDgwO1xcbiAgbGVmdDogMXB4O1xcbiAgdG9wOiAxcHg7XFxufVxcbi5jaG9ua3ktZmlsZS1lbnRyeS1kbmQtaW5kaWNhdG9yOmJlZm9yZSB7XFxuICBib3JkZXItYm90dG9tOiA1MHB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWxlZnQ6IDUwcHggc29saWQgI2ZmZjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgei1pbmRleDogLTE7XFxuICBoZWlnaHQ6IDA7XFxuICB3aWR0aDogMDtcXG4gIGxlZnQ6IDA7XFxuICB0b3A6IDA7XFxufVxcbi5jaG9ua3ktZmlsZS1lbnRyeS1wcmV2aWV3IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgZmxleC1ncm93OiAxO1xcbn1cXG4uY2hvbmt5LWZpbGUtZW50cnktZGVzY3JpcHRpb24ge1xcbiAgYm9yZGVyLXRvcDogc29saWQgMnB4IHRyYW5zcGFyZW50O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIHBhZGRpbmc6IDNweCA1cHggNXB4IDVweDtcXG59XFxuLmNob25reS1maWxlLWVudHJ5LXNlbGVjdGVkIC5jaG9ua3ktZmlsZS1lbnRyeS1pbnNpZGU6YmVmb3JlIHtcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMCAwIDJweCAjMzNhZGZmICFpbXBvcnRhbnQ7XFxufVxcbi5jaG9ua3ktZmlsZS1lbnRyeS1zZWxlY3RlZCAuY2hvbmt5LWZpbGUtZW50cnktZGVzY3JpcHRpb24ge1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogIzMzYWRmZiAhaW1wb3J0YW50O1xcbn1cXG4uY2hvbmt5LWZpbGUtZW50cnktc2VsZWN0ZWQgLmNob25reS1maWxlLXNlbGVjdGlvbiB7XFxuICBvcGFjaXR5OiAxICFpbXBvcnRhbnQ7XFxufVxcbi5jaG9ua3ktZmlsZS1lbnRyeS1kcmFnZ2luZyAuY2hvbmt5LWZpbGUtYmFja2dyb3VuZCB7XFxuICBvcGFjaXR5OiAwLjMgIWltcG9ydGFudDtcXG59XFxuLmNob25reS1maWxlLWVudHJ5LWRyb3AtaG92ZXJlZCAuY2hvbmt5LWZpbGUtYmFja2dyb3VuZCB7XFxuICBvcGFjaXR5OiAxICFpbXBvcnRhbnQ7XFxufVxcblxcbi5jaG9ua3ktZmlsZS1pY29uLCAuY2hvbmt5LWZpbGUtc2VsZWN0aW9uLCAuY2hvbmt5LWZpbGUtdGh1bWJuYWlsLCAuY2hvbmt5LWZpbGUtYmFja2dyb3VuZCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGhlaWdodDogMTAwJTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgbGVmdDogMDtcXG4gIHRvcDogMDtcXG59XFxuLmNob25reS1maWxlLWljb24ge1xcbiAgei1pbmRleDogNDA7XFxufVxcbi5jaG9ua3ktZmlsZS1pY29uLWluc2lkZSB7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGZvbnQtc2l6ZTogMi4yZW07XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGNvbG9yOiAjZmZmO1xcbiAgbGVmdDogNTAlO1xcbiAgdG9wOiA1MCU7XFxufVxcbi5jaG9ua3ktZmlsZS1zZWxlY3Rpb24ge1xcbiAgei1pbmRleDogMzA7XFxuICBiYWNrZ3JvdW5kOiByZXBlYXRpbmctbGluZWFyLWdyYWRpZW50KDQ1ZGVnLCByZ2JhKDAsIDE1MywgMjU1LCAwLjE0KSwgcmdiYSgwLCAxNTMsIDI1NSwgMC4xNCkgMTBweCwgcmdiYSgwLCAxNTMsIDI1NSwgMC4yKSAxMHB4LCByZ2JhKDAsIDE1MywgMjU1LCAwLjIpIDIwcHgpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAxNTMsIDI1NSwgMC4xNCk7XFxuICBvcGFjaXR5OiAwO1xcbn1cXG4uY2hvbmt5LWZpbGUtdGh1bWJuYWlsIHtcXG4gIHotaW5kZXg6IDIwO1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAxMDBtcyBlYXNlLWluLW91dDtcXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XFxuICBiYWNrZ3JvdW5kLXNpemU6IGNvbnRhaW47XFxuICBvcGFjaXR5OiAxO1xcbn1cXG4uY2hvbmt5LWZpbGUtdGh1bWJuYWlsLWhpZGRlbiB7XFxuICBvcGFjaXR5OiAwO1xcbn1cXG4uY2hvbmt5LWZpbGUtYmFja2dyb3VuZCB7XFxuICB6LWluZGV4OiAxMDtcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMTAwbXMgZWFzZS1pbi1vdXQ7XFxuICBvcGFjaXR5OiAwLjU7XFxufVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIm1QT1NcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJmNHA3XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiem5HWlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIjFJdWNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJmUlYxXCIpOyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMTItMSEuLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9wb3N0Y3NzIS4vbWFpbi5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiaTdLblwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcImhCcEdcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJaVmtCXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwieDR0MFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIjdubVRcIik7IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0xMi0xIS4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3Bvc3Rjc3MhLi9zdG9yeWJvb2suY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnNiZG9jcy1jb250ZW50IC5zYmRvY3MtcCwgLnNiZG9jcy1jb250ZW50IC5zYmRvY3MtcCAqLFxcbi5zYmRvY3MtY29udGVudCAuc2Jkb2NzLXVsLFxcbi5zYmRvY3MtY29udGVudCAuc2Jkb2NzLXVsICosXFxuLnNiZG9jcy1jb250ZW50IC5zYmRvY3Mtb2wsXFxuLnNiZG9jcy1jb250ZW50IC5zYmRvY3Mtb2wgKiB7XFxuICBsaW5lLWhlaWdodDogMjVweCAhaW1wb3J0YW50O1xcbiAgZm9udC1zaXplOiAxN3B4ICFpbXBvcnRhbnQ7XFxufVxcbi5zYmRvY3MtY29udGVudCAuc2Jkb2NzLXAgY29kZSxcXG4uc2Jkb2NzLWNvbnRlbnQgLnNiZG9jcy11bCBjb2RlLFxcbi5zYmRvY3MtY29udGVudCAuc2Jkb2NzLW9sIGNvZGUge1xcbiAgcGFkZGluZzogMCA1cHggIWltcG9ydGFudDtcXG4gIGZvbnQtc2l6ZTogMTRweCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uc2Jkb2NzLXByZXZpZXcge1xcbiAgYm9yZGVyOiBzb2xpZCAzcHggIzA5ZiAhaW1wb3J0YW50O1xcbiAgbWFyZ2luOiA1MHB4IDAgNDBweCAwICFpbXBvcnRhbnQ7XFxuICBib3JkZXItcmFkaXVzOiAzcHggIWltcG9ydGFudDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZSAhaW1wb3J0YW50O1xcbiAgb3ZlcmZsb3c6IHZpc2libGUgIWltcG9ydGFudDtcXG59XFxuLnNiZG9jcy1wcmV2aWV3OmJlZm9yZSB7XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogM3B4O1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogM3B4O1xcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxuICBjb250ZW50OiBcXFwiTGl2ZSBFeGFtcGxlXFxcIjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwOWY7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBtYXJnaW4tbGVmdDogLTNweDtcXG4gIG1hcmdpbi10b3A6IC0yNXB4O1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBsaW5lLWhlaWdodDogMjVweDtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIHBhZGRpbmc6IDAgOHB4O1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBoZWlnaHQ6IDI1cHg7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLnNiZG9jcy1wcmV2aWV3ID4gZGl2OmZpcnN0LWNoaWxkID4gZGl2OmZpcnN0LWNoaWxkIHtcXG4gIHBhZGRpbmc6IDEwcHggMTBweCAzMHB4IDEwcHggIWltcG9ydGFudDtcXG4gIG1hcmdpbjogMCAhaW1wb3J0YW50O1xcbiAgb3ZlcmZsb3c6IHZpc2libGUgIWltcG9ydGFudDtcXG59XFxuXFxuLm5vdHlfYmFyIHtcXG4gIGxpbmUtaGVpZ2h0OiAyNHB4O1xcbn1cXG4ubm90eV9iYXIgY29kZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyk7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBsaW5lLWhlaWdodDogMjBweDtcXG4gIHBhZGRpbmc6IDAgNHB4O1xcbn1cXG5cXG4udW5zdGFibGUtd2FybmluZyBibG9ja3F1b3RlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZGUwZTA7XFxuICBib3JkZXItY29sb3I6ICM5ZTA4MDg7XFxuICBtYXJnaW4tYm90dG9tOiA0MHB4O1xcbiAgcGFkZGluZzogMjBweCAzMHB4O1xcbn1cXG5cXG4ubGl2ZS1leGFtcGxlLWFjdGlvbiB7XFxuICBmb250LWZhbWlseTogc2Fucy1zZXJpZiAhaW1wb3J0YW50O1xcbiAgZm9udC1zaXplOiAxLjJlbSAhaW1wb3J0YW50O1xcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGNvbG9yOiAjNWYwNzA3O1xcbn1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwiXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBtZHggfSBmcm9tICdAbWR4LWpzL3JlYWN0J1xuXG4vKiBAanN4IG1keCAqL1xuaW1wb3J0IHsgYXNzZXJ0SXNGbiwgQWRkQ29udGV4dCB9IGZyb20gXCJAc3Rvcnlib29rL2FkZG9uLWRvY3MvYmxvY2tzXCI7XG5cbmltcG9ydCBDaG9ua3lIZWFkZXIgZnJvbSAnLi4vQ2hvbmt5LWhlYWRlci5tZHgnO1xuXG5jb25zdCBtYWtlU2hvcnRjb2RlID0gbmFtZSA9PiBmdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKSB7XG4gIGNvbnNvbGUud2FybihcIkNvbXBvbmVudCBcIiArIG5hbWUgKyBcIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlXCIpXG4gIHJldHVybiA8ZGl2IHsuLi5wcm9wc30vPlxufTtcbmNvbnN0IE1ldGEgPSBtYWtlU2hvcnRjb2RlKFwiTWV0YVwiKTtcbmNvbnN0IGxheW91dFByb3BzID0ge1xuICBcbn07XG5jb25zdCBNRFhMYXlvdXQgPSBcIndyYXBwZXJcIlxuZnVuY3Rpb24gTURYQ29udGVudCh7XG4gIGNvbXBvbmVudHMsXG4gIC4uLnByb3BzXG59KSB7XG4gIHJldHVybiA8TURYTGF5b3V0IHsuLi5sYXlvdXRQcm9wc30gey4uLnByb3BzfSBjb21wb25lbnRzPXtjb21wb25lbnRzfSBtZHhUeXBlPVwiTURYTGF5b3V0XCI+XG5cbiAgICA8TWV0YSB0aXRsZT1cIjMgQVBJIFJlZmVyZW5jZXxCdWlsdC1pbiBmaWxlIGFjdGlvbnNcIiBtZHhUeXBlPVwiTWV0YVwiIC8+XG4gICAgPGgxIHsuLi57XG4gICAgICBcImlkXCI6IFwiYnVpbHQtaW4tZmlsZS1hY3Rpb25zXCJcbiAgICB9fT57YEJ1aWx0LWluIGZpbGUgYWN0aW9uc2B9PC9oMT5cbiAgICA8cD57YEV4cGxhaW4gYH08aW5saW5lQ29kZSBwYXJlbnROYW1lPVwicFwiPntgQ2hvbmt5QWN0aW9uc2B9PC9pbmxpbmVDb2RlPntgIG1hcC5gfTwvcD5cbiAgICA8aDIgey4uLntcbiAgICAgIFwiaWRcIjogXCJob3ctdG8tdXNlLWZpbGUtYWN0aW9uc1wiXG4gICAgfX0+e2BIb3cgdG8gdXNlIGZpbGUgYWN0aW9uc2B9PC9oMj5cbiAgICA8aDIgey4uLntcbiAgICAgIFwiaWRcIjogXCJsaXN0LW9mLWJ1aWx0LWluLWZpbGUtYWN0aW9uc1wiXG4gICAgfX0+e2BMaXN0IG9mIGJ1aWx0LWluIGZpbGUgYWN0aW9uc2B9PC9oMj5cbiAgICA8aDMgey4uLntcbiAgICAgIFwiaWRcIjogXCJvcGVuZmlsZXNcIlxuICAgIH19PjxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJoM1wiPntgT3BlbkZpbGVzYH08L2lubGluZUNvZGU+PC9oMz5cbiAgICA8cD48aW5saW5lQ29kZSBwYXJlbnROYW1lPVwicFwiPntgZGF0YS5maWxlc2B9PC9pbmxpbmVDb2RlPntgIHdpbGwgYWx3YXlzIGJlIHNldCwgYnV0IGB9PGlubGluZUNvZGUgcGFyZW50TmFtZT1cInBcIj57YGRhdGEudGFyZ2V0YH08L2lubGluZUNvZGU+e2AgY2FuIHNvbWV0aW1lcyBiZSB1bmRlZmluZWQuIEZvclxuZXhhbXBsZSwgd2hlbiB0aGUgdXNlciBjbGlja3MgYH08aW5saW5lQ29kZSBwYXJlbnROYW1lPVwicFwiPntgQWN0aW9ucyAtPiBPcGVuIHNlbGVjdGlvbmB9PC9pbmxpbmVDb2RlPntgLCB0YXJnZXQgd2lsbCBiZSB1bmRlZmluZWQuYH08L3A+XG4gICAgPC9NRFhMYXlvdXQ+O1xufVxuXG47XG5NRFhDb250ZW50LmlzTURYQ29tcG9uZW50ID0gdHJ1ZTtcblxuZXhwb3J0IGNvbnN0IF9fcGFnZSA9ICgpID0+IHsgdGhyb3cgbmV3IEVycm9yKFwiRG9jcy1vbmx5IHN0b3J5XCIpOyB9O1xuXG5fX3BhZ2UucGFyYW1ldGVycyA9IHsgZG9jc09ubHk6IHRydWUgfTtcblxuY29uc3QgY29tcG9uZW50TWV0YSA9IHsgdGl0bGU6ICczIEFQSSBSZWZlcmVuY2V8QnVpbHQtaW4gZmlsZSBhY3Rpb25zJywgaW5jbHVkZVN0b3JpZXM6IFtcIl9fcGFnZVwiXSwgIH07XG5cbmNvbnN0IG1keFN0b3J5TmFtZVRvS2V5ID0ge307XG5cbmNvbXBvbmVudE1ldGEucGFyYW1ldGVycyA9IGNvbXBvbmVudE1ldGEucGFyYW1ldGVycyB8fCB7fTtcbmNvbXBvbmVudE1ldGEucGFyYW1ldGVycy5kb2NzID0ge1xuICAuLi4oY29tcG9uZW50TWV0YS5wYXJhbWV0ZXJzLmRvY3MgfHwge30pLFxuICBwYWdlOiAoKSA9PiA8QWRkQ29udGV4dCBtZHhTdG9yeU5hbWVUb0tleT17bWR4U3RvcnlOYW1lVG9LZXl9IG1keENvbXBvbmVudE1ldGE9e2NvbXBvbmVudE1ldGF9PjxNRFhDb250ZW50IC8+PC9BZGRDb250ZXh0Pixcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudE1ldGE7IiwiXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQgeyBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QgfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtQ29tcG9uZW50LWhpZXJhcmNoeS5tZCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfENvbXBvbmVudCBoaWVyYXJjaHknLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgQ29tcG9uZW50SGllcmFyY2h5RXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyIGZpbGVzPXtbXX0gZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9PlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiO1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XFxcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1jb21wb25lbnQtaGllcmFyY2h5LS1jb21wb25lbnQtaGllcmFyY2h5LWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjo0MSxcXFwibGluZVxcXCI6MTl9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjoyOH0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjQxLFxcXCJsaW5lXFxcIjoxOX0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjoyOH19fTtcXG4gICAgXFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7IEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMS1Db21wb25lbnQtaGllcmFyY2h5Lm1kJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfENvbXBvbmVudCBoaWVyYXJjaHknLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcInN0b3J5U291cmNlXFxcIjp7XFxcInNvdXJjZVxcXCI6XFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IHsgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0IH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAxLUNvbXBvbmVudC1oaWVyYXJjaHkubWQnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xDb21wb25lbnQgaGllcmFyY2h5JyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IENvbXBvbmVudEhpZXJhcmNoeUV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlciBmaWxlcz17W119IGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfT5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1jb21wb25lbnQtaGllcmFyY2h5LS1jb21wb25lbnQtaGllcmFyY2h5LWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjo0MSxcXFwibGluZVxcXCI6MTl9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjoyOH0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjQxLFxcXCJsaW5lXFxcIjoxOX0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjoyOH19fX0sXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgQ29tcG9uZW50SGllcmFyY2h5RXhhbXBsZSA9ICgpID0+IHtcXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyIGZpbGVzPXtbXX0gZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9PlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCI7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtY29tcG9uZW50LWhpZXJhcmNoeS0tY29tcG9uZW50LWhpZXJhcmNoeS1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjo0MSxcImxpbmVcIjoyN30sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjM2fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjQxLFwibGluZVwiOjI3fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjM2fX19O1xuICAgIFxuXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQgeyBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QgfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtQ29tcG9uZW50LWhpZXJhcmNoeS5tZCc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xDb21wb25lbnQgaGllcmFyY2h5JyxcXG4gICAgcGFyYW1ldGVyczoge1xcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IENvbXBvbmVudEhpZXJhcmNoeUV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlciBmaWxlcz17W119IGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfT5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiMS1maWxlLWJyb3dzZXItYmFzaWNzLWNvbXBvbmVudC1oaWVyYXJjaHktLWNvbXBvbmVudC1oaWVyYXJjaHktZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6NDEsXCJsaW5lXCI6MTl9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjoyOH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjo0MSxcImxpbmVcIjoxOX0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjoyOH19fTtcbiAgICBcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcblxuaW1wb3J0IHsgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0IH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XG4vLyBAdHMtaWdub3JlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAxLUNvbXBvbmVudC1oaWVyYXJjaHkubWQnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWRlZmF1bHQtZXhwb3J0XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8Q29tcG9uZW50IGhpZXJhcmNoeScsXG4gICAgcGFyYW1ldGVyczoge1wic3RvcnlTb3VyY2VcIjp7XCJzb3VyY2VcIjpcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQgeyBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QgfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtQ29tcG9uZW50LWhpZXJhcmNoeS5tZCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfENvbXBvbmVudCBoaWVyYXJjaHknLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgQ29tcG9uZW50SGllcmFyY2h5RXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyIGZpbGVzPXtbXX0gZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9PlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiO1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XFxcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1jb21wb25lbnQtaGllcmFyY2h5LS1jb21wb25lbnQtaGllcmFyY2h5LWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjo0MSxcXFwibGluZVxcXCI6MTl9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjoyOH0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjQxLFxcXCJsaW5lXFxcIjoxOX0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjoyOH19fTtcXG4gICAgXFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7IEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMS1Db21wb25lbnQtaGllcmFyY2h5Lm1kJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfENvbXBvbmVudCBoaWVyYXJjaHknLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcInN0b3J5U291cmNlXFxcIjp7XFxcInNvdXJjZVxcXCI6XFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IHsgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0IH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAxLUNvbXBvbmVudC1oaWVyYXJjaHkubWQnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xDb21wb25lbnQgaGllcmFyY2h5JyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IENvbXBvbmVudEhpZXJhcmNoeUV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlciBmaWxlcz17W119IGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfT5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1jb21wb25lbnQtaGllcmFyY2h5LS1jb21wb25lbnQtaGllcmFyY2h5LWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjo0MSxcXFwibGluZVxcXCI6MTl9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjoyOH0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjQxLFxcXCJsaW5lXFxcIjoxOX0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjoyOH19fX0sXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgQ29tcG9uZW50SGllcmFyY2h5RXhhbXBsZSA9ICgpID0+IHtcXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyIGZpbGVzPXtbXX0gZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9PlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCIsXCJsb2NhdGlvbnNNYXBcIjp7XCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtY29tcG9uZW50LWhpZXJhcmNoeS0tY29tcG9uZW50LWhpZXJhcmNoeS1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjo0MSxcImxpbmVcIjoyN30sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjM2fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjQxLFwibGluZVwiOjI3fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjM2fX19fSxcInN0b3J5U291cmNlXCI6e1wic291cmNlXCI6XCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHsgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0IH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAxLUNvbXBvbmVudC1oaWVyYXJjaHkubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8Q29tcG9uZW50IGhpZXJhcmNoeScsXFxuICAgIHBhcmFtZXRlcnM6IHtcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBDb21wb25lbnRIaWVyYXJjaHlFeGFtcGxlID0gKCkgPT4ge1xcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXIgZmlsZXM9e1tdfSBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX0+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIixcImxvY2F0aW9uc01hcFwiOntcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1jb21wb25lbnQtaGllcmFyY2h5LS1jb21wb25lbnQtaGllcmFyY2h5LWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjQxLFwibGluZVwiOjE5fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6Mjh9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6NDEsXCJsaW5lXCI6MTl9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6Mjh9fX19LFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXG4gICAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBDb21wb25lbnRIaWVyYXJjaHlFeGFtcGxlID0gKCkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XG4gICAgICAgICAgICA8RmlsZUJyb3dzZXIgZmlsZXM9e1tdfSBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX0+XG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IFwiVE9ETyBFeHBsYWluOlxcblxcbiogYEZpbGVCcm93c2VyYCBtdXN0IHdyYXAgZXZlcnl0aGluZy5cXG5cIjsiLCJcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAvLyBAdHMtbm9jaGVja1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fU1RPUllfXyA9IFwiXFxuICAgICAgXFxuICAgICAgLy8gQHRzLW5vY2hlY2tcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fU1RPUllfXyA9IFxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQXJyYXksXFxcXG4gICAgRmlsZUJyb3dzZXIsXFxcXG4gICAgRmlsZUxpc3QsXFxcXG4gICAgRmlsZVRvb2xiYXJcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDItRGlzcGxheWluZy1maWxlcy5tZCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfERpc3BsYXlpbmcgZmlsZXMnLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgRmlsZXNBcnJheUV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgZmlsZXM6IEZpbGVBcnJheSA9IFtcXFxcbiAgICAgICAgbnVsbCwgLy8gTG9hZGluZyBhbmltYXRpb24gd2lsbCBiZSBzaG93biBmb3IgdGhpcyBmaWxlXFxcXG4gICAgICAgIG51bGwsXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnblRlJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3JtYWwgZmlsZS55YW1sJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiBmYWxzZSxcXFxcbiAgICAgICAgICAgIGlzSGlkZGVuOiB0cnVlLFxcXFxuICAgICAgICAgICAgc2l6ZTogODkwLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3p4YycsXFxcXG4gICAgICAgICAgICBuYW1lOiAnSGlkZGVuIGZpbGUubXA0JyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiBmYWxzZSxcXFxcbiAgICAgICAgICAgIGlzSGlkZGVuOiB0cnVlLFxcXFxuICAgICAgICAgICAgc2l6ZTogODkwLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ2JubScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm9ybWFsIGZvbGRlcicsXFxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICAgICAgICAgIGNoaWxkcmVuSWRzOiBbJ3JhbmRvbS1pZC0xJywgJ3JhbmRvbS1pZC0yJ10sXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAndmZyJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdTeW1saW5rIGZvbGRlcicsXFxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICAgICAgICAgIGlzU3ltbGluazogdHJ1ZSxcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICdxd2UnLFxcXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBzZWxlY3RhYmxlLnRhci5neicsXFxcXG4gICAgICAgICAgICBleHQ6ICcudGFyLmd6JywgLy8gQ3VzdG9tIGV4dGVuc2lvblxcXFxuICAgICAgICAgICAgc2VsZWN0YWJsZTogZmFsc2UsIC8vIERpc2FibGUgc2VsZWN0aW9uXFxcXG4gICAgICAgICAgICBzaXplOiA1NDMwMDAwMDAwMCxcXFxcbiAgICAgICAgICAgIG1vZERhdGU6IG5ldyBEYXRlKCksXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAncnR5JyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3Qgb3BlbmFibGUucGVtJyxcXFxcbiAgICAgICAgICAgIG9wZW5hYmxlOiBmYWxzZSwgLy8gUHJldmVudCBvcGVuaW5nXFxcXG4gICAgICAgICAgICBzaXplOiAxMDAwMDAwMDAsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnYnRqJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgZHJhZ2dhYmxlLmV4ZScsXFxcXG4gICAgICAgICAgICBkcmFnZ2FibGU6IGZhbHNlLCAvLyBQcmV2ZW50IHRoaXMgZmlsZXMgZnJvbSBiZWluZyBkcmFnZ2VkXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAndXBxJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgZHJvcHBhYmxlJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcXFxuICAgICAgICAgICAgZHJvcHBhYmxlOiBmYWxzZSwgLy8gUHJldmVudCBmaWxlcyBmcm9tIGJlaW5nIGRyb3BwZWQgaW50byB0aGlzIGZvbGRlclxcXFxuICAgICAgICB9LFxcXFxuICAgIF07XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwiMS1maWxlLWJyb3dzZXItYmFzaWNzLWRpc3BsYXlpbmctZmlsZXMtLWZpbGVzLWFycmF5LWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozMyxcXFwibGluZVxcXCI6MjZ9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo5OX0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjMzLFxcXCJsaW5lXFxcIjoyNn0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo5OX19fTtcXG4gICAgXFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7XFxuICAgIEZpbGVBY3Rpb24sXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcbiAgICBGaWxlQXJyYXksXFxuICAgIEZpbGVCcm93c2VyLFxcbiAgICBGaWxlTGlzdCxcXG4gICAgRmlsZVRvb2xiYXJcXG59IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAyLURpc3BsYXlpbmctZmlsZXMubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8RGlzcGxheWluZyBmaWxlcycsXFxuICAgIHBhcmFtZXRlcnM6IHtcXFwic3RvcnlTb3VyY2VcXFwiOntcXFwic291cmNlXFxcIjpcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIEZpbGVBY3Rpb24sXFxcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxcXG4gICAgRmlsZUFycmF5LFxcXFxuICAgIEZpbGVCcm93c2VyLFxcXFxuICAgIEZpbGVMaXN0LFxcXFxuICAgIEZpbGVUb29sYmFyXFxcXG59IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAyLURpc3BsYXlpbmctZmlsZXMubWQnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xEaXNwbGF5aW5nIGZpbGVzJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEZpbGVzQXJyYXlFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGZpbGVzOiBGaWxlQXJyYXkgPSBbXFxcXG4gICAgICAgIG51bGwsIC8vIExvYWRpbmcgYW5pbWF0aW9uIHdpbGwgYmUgc2hvd24gZm9yIHRoaXMgZmlsZVxcXFxuICAgICAgICBudWxsLFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ25UZScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm9ybWFsIGZpbGUueWFtbCcsXFxcXG4gICAgICAgICAgICBpc0RpcjogZmFsc2UsXFxcXG4gICAgICAgICAgICBpc0hpZGRlbjogdHJ1ZSxcXFxcbiAgICAgICAgICAgIHNpemU6IDg5MCxcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICd6eGMnLFxcXFxuICAgICAgICAgICAgbmFtZTogJ0hpZGRlbiBmaWxlLm1wNCcsXFxcXG4gICAgICAgICAgICBpc0RpcjogZmFsc2UsXFxcXG4gICAgICAgICAgICBpc0hpZGRlbjogdHJ1ZSxcXFxcbiAgICAgICAgICAgIHNpemU6IDg5MCxcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICdibm0nLFxcXFxuICAgICAgICAgICAgbmFtZTogJ05vcm1hbCBmb2xkZXInLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgICAgICBjaGlsZHJlbklkczogWydyYW5kb20taWQtMScsICdyYW5kb20taWQtMiddLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3ZmcicsXFxcXG4gICAgICAgICAgICBuYW1lOiAnU3ltbGluayBmb2xkZXInLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgICAgICBpc1N5bWxpbms6IHRydWUsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAncXdlJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3Qgc2VsZWN0YWJsZS50YXIuZ3onLFxcXFxuICAgICAgICAgICAgZXh0OiAnLnRhci5neicsIC8vIEN1c3RvbSBleHRlbnNpb25cXFxcbiAgICAgICAgICAgIHNlbGVjdGFibGU6IGZhbHNlLCAvLyBEaXNhYmxlIHNlbGVjdGlvblxcXFxuICAgICAgICAgICAgc2l6ZTogNTQzMDAwMDAwMDAsXFxcXG4gICAgICAgICAgICBtb2REYXRlOiBuZXcgRGF0ZSgpLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3J0eScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IG9wZW5hYmxlLnBlbScsXFxcXG4gICAgICAgICAgICBvcGVuYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgb3BlbmluZ1xcXFxuICAgICAgICAgICAgc2l6ZTogMTAwMDAwMDAwLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ2J0aicsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IGRyYWdnYWJsZS5leGUnLFxcXFxuICAgICAgICAgICAgZHJhZ2dhYmxlOiBmYWxzZSwgLy8gUHJldmVudCB0aGlzIGZpbGVzIGZyb20gYmVpbmcgZHJhZ2dlZFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3VwcScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IGRyb3BwYWJsZScsXFxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICAgICAgICAgIGRyb3BwYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgZmlsZXMgZnJvbSBiZWluZyBkcm9wcGVkIGludG8gdGhpcyBmb2xkZXJcXFxcbiAgICAgICAgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiLFxcXCJsb2NhdGlvbnNNYXBcXFwiOntcXFwiMS1maWxlLWJyb3dzZXItYmFzaWNzLWRpc3BsYXlpbmctZmlsZXMtLWZpbGVzLWFycmF5LWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozMyxcXFwibGluZVxcXCI6MjZ9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo5OX0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjMzLFxcXCJsaW5lXFxcIjoyNn0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo5OX19fX0sXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgRmlsZXNBcnJheUV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGZpbGVzOiBGaWxlQXJyYXkgPSBbXFxuICAgICAgICBudWxsLCAvLyBMb2FkaW5nIGFuaW1hdGlvbiB3aWxsIGJlIHNob3duIGZvciB0aGlzIGZpbGVcXG4gICAgICAgIG51bGwsXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICduVGUnLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3JtYWwgZmlsZS55YW1sJyxcXG4gICAgICAgICAgICBpc0RpcjogZmFsc2UsXFxuICAgICAgICAgICAgaXNIaWRkZW46IHRydWUsXFxuICAgICAgICAgICAgc2l6ZTogODkwLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ3p4YycsXFxuICAgICAgICAgICAgbmFtZTogJ0hpZGRlbiBmaWxlLm1wNCcsXFxuICAgICAgICAgICAgaXNEaXI6IGZhbHNlLFxcbiAgICAgICAgICAgIGlzSGlkZGVuOiB0cnVlLFxcbiAgICAgICAgICAgIHNpemU6IDg5MCxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdibm0nLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3JtYWwgZm9sZGVyJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgICAgICBjaGlsZHJlbklkczogWydyYW5kb20taWQtMScsICdyYW5kb20taWQtMiddLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ3ZmcicsXFxuICAgICAgICAgICAgbmFtZTogJ1N5bWxpbmsgZm9sZGVyJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgICAgICBpc1N5bWxpbms6IHRydWUsXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAncXdlJyxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IHNlbGVjdGFibGUudGFyLmd6JyxcXG4gICAgICAgICAgICBleHQ6ICcudGFyLmd6JywgLy8gQ3VzdG9tIGV4dGVuc2lvblxcbiAgICAgICAgICAgIHNlbGVjdGFibGU6IGZhbHNlLCAvLyBEaXNhYmxlIHNlbGVjdGlvblxcbiAgICAgICAgICAgIHNpemU6IDU0MzAwMDAwMDAwLFxcbiAgICAgICAgICAgIG1vZERhdGU6IG5ldyBEYXRlKCksXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAncnR5JyxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IG9wZW5hYmxlLnBlbScsXFxuICAgICAgICAgICAgb3BlbmFibGU6IGZhbHNlLCAvLyBQcmV2ZW50IG9wZW5pbmdcXG4gICAgICAgICAgICBzaXplOiAxMDAwMDAwMDAsXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnYnRqJyxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IGRyYWdnYWJsZS5leGUnLFxcbiAgICAgICAgICAgIGRyYWdnYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgdGhpcyBmaWxlcyBmcm9tIGJlaW5nIGRyYWdnZWRcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICd1cHEnLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgZHJvcHBhYmxlJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgICAgICBkcm9wcGFibGU6IGZhbHNlLCAvLyBQcmV2ZW50IGZpbGVzIGZyb20gYmVpbmcgZHJvcHBlZCBpbnRvIHRoaXMgZm9sZGVyXFxuICAgICAgICB9LFxcbiAgICBdO1xcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCI7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtZGlzcGxheWluZy1maWxlcy0tZmlsZXMtYXJyYXktZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzMsXCJsaW5lXCI6MzR9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjoxMDd9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzMsXCJsaW5lXCI6MzR9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6MTA3fX19O1xuICAgIFxuXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQge1xcbiAgICBGaWxlQWN0aW9uLFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXG4gICAgRmlsZUFycmF5LFxcbiAgICBGaWxlQnJvd3NlcixcXG4gICAgRmlsZUxpc3QsXFxuICAgIEZpbGVUb29sYmFyXFxufSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMi1EaXNwbGF5aW5nLWZpbGVzLm1kJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfERpc3BsYXlpbmcgZmlsZXMnLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgRmlsZXNBcnJheUV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGZpbGVzOiBGaWxlQXJyYXkgPSBbXFxuICAgICAgICBudWxsLCAvLyBMb2FkaW5nIGFuaW1hdGlvbiB3aWxsIGJlIHNob3duIGZvciB0aGlzIGZpbGVcXG4gICAgICAgIG51bGwsXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICduVGUnLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3JtYWwgZmlsZS55YW1sJyxcXG4gICAgICAgICAgICBpc0RpcjogZmFsc2UsXFxuICAgICAgICAgICAgaXNIaWRkZW46IHRydWUsXFxuICAgICAgICAgICAgc2l6ZTogODkwLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ3p4YycsXFxuICAgICAgICAgICAgbmFtZTogJ0hpZGRlbiBmaWxlLm1wNCcsXFxuICAgICAgICAgICAgaXNEaXI6IGZhbHNlLFxcbiAgICAgICAgICAgIGlzSGlkZGVuOiB0cnVlLFxcbiAgICAgICAgICAgIHNpemU6IDg5MCxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdibm0nLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3JtYWwgZm9sZGVyJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgICAgICBjaGlsZHJlbklkczogWydyYW5kb20taWQtMScsICdyYW5kb20taWQtMiddLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ3ZmcicsXFxuICAgICAgICAgICAgbmFtZTogJ1N5bWxpbmsgZm9sZGVyJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgICAgICBpc1N5bWxpbms6IHRydWUsXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAncXdlJyxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IHNlbGVjdGFibGUudGFyLmd6JyxcXG4gICAgICAgICAgICBleHQ6ICcudGFyLmd6JywgLy8gQ3VzdG9tIGV4dGVuc2lvblxcbiAgICAgICAgICAgIHNlbGVjdGFibGU6IGZhbHNlLCAvLyBEaXNhYmxlIHNlbGVjdGlvblxcbiAgICAgICAgICAgIHNpemU6IDU0MzAwMDAwMDAwLFxcbiAgICAgICAgICAgIG1vZERhdGU6IG5ldyBEYXRlKCksXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAncnR5JyxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IG9wZW5hYmxlLnBlbScsXFxuICAgICAgICAgICAgb3BlbmFibGU6IGZhbHNlLCAvLyBQcmV2ZW50IG9wZW5pbmdcXG4gICAgICAgICAgICBzaXplOiAxMDAwMDAwMDAsXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnYnRqJyxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IGRyYWdnYWJsZS5leGUnLFxcbiAgICAgICAgICAgIGRyYWdnYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgdGhpcyBmaWxlcyBmcm9tIGJlaW5nIGRyYWdnZWRcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICd1cHEnLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgZHJvcHBhYmxlJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgICAgICBkcm9wcGFibGU6IGZhbHNlLCAvLyBQcmV2ZW50IGZpbGVzIGZyb20gYmVpbmcgZHJvcHBlZCBpbnRvIHRoaXMgZm9sZGVyXFxuICAgICAgICB9LFxcbiAgICBdO1xcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCI7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtZGlzcGxheWluZy1maWxlcy0tZmlsZXMtYXJyYXktZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzMsXCJsaW5lXCI6MjZ9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo5OX0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMyxcImxpbmVcIjoyNn0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo5OX19fTtcbiAgICBcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcblxuaW1wb3J0IHtcbiAgICBGaWxlQWN0aW9uLFxuICAgIEZpbGVBY3Rpb25EYXRhLFxuICAgIEZpbGVBcnJheSxcbiAgICBGaWxlQnJvd3NlcixcbiAgICBGaWxlTGlzdCxcbiAgICBGaWxlVG9vbGJhclxufSBmcm9tICdjaG9ua3knO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xuLy8gQHRzLWlnbm9yZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMi1EaXNwbGF5aW5nLWZpbGVzLm1kJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1kZWZhdWx0LWV4cG9ydFxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfERpc3BsYXlpbmcgZmlsZXMnLFxuICAgIHBhcmFtZXRlcnM6IHtcInN0b3J5U291cmNlXCI6e1wic291cmNlXCI6XCJcXG4gICAgICBcXG4gICAgICAvLyBAdHMtbm9jaGVja1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19TVE9SWV9fID0gXFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IHtcXFxcbiAgICBGaWxlQWN0aW9uLFxcXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcXFxuICAgIEZpbGVBcnJheSxcXFxcbiAgICBGaWxlQnJvd3NlcixcXFxcbiAgICBGaWxlTGlzdCxcXFxcbiAgICBGaWxlVG9vbGJhclxcXFxufSBmcm9tICdjaG9ua3knO1xcXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMi1EaXNwbGF5aW5nLWZpbGVzLm1kJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8RGlzcGxheWluZyBmaWxlcycsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBGaWxlc0FycmF5RXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBmaWxlczogRmlsZUFycmF5ID0gW1xcXFxuICAgICAgICBudWxsLCAvLyBMb2FkaW5nIGFuaW1hdGlvbiB3aWxsIGJlIHNob3duIGZvciB0aGlzIGZpbGVcXFxcbiAgICAgICAgbnVsbCxcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICduVGUnLFxcXFxuICAgICAgICAgICAgbmFtZTogJ05vcm1hbCBmaWxlLnlhbWwnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IGZhbHNlLFxcXFxuICAgICAgICAgICAgaXNIaWRkZW46IHRydWUsXFxcXG4gICAgICAgICAgICBzaXplOiA4OTAsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnenhjJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdIaWRkZW4gZmlsZS5tcDQnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IGZhbHNlLFxcXFxuICAgICAgICAgICAgaXNIaWRkZW46IHRydWUsXFxcXG4gICAgICAgICAgICBzaXplOiA4OTAsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnYm5tJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3JtYWwgZm9sZGVyJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcXFxuICAgICAgICAgICAgY2hpbGRyZW5JZHM6IFsncmFuZG9tLWlkLTEnLCAncmFuZG9tLWlkLTInXSxcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICd2ZnInLFxcXFxuICAgICAgICAgICAgbmFtZTogJ1N5bWxpbmsgZm9sZGVyJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcXFxuICAgICAgICAgICAgaXNTeW1saW5rOiB0cnVlLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3F3ZScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IHNlbGVjdGFibGUudGFyLmd6JyxcXFxcbiAgICAgICAgICAgIGV4dDogJy50YXIuZ3onLCAvLyBDdXN0b20gZXh0ZW5zaW9uXFxcXG4gICAgICAgICAgICBzZWxlY3RhYmxlOiBmYWxzZSwgLy8gRGlzYWJsZSBzZWxlY3Rpb25cXFxcbiAgICAgICAgICAgIHNpemU6IDU0MzAwMDAwMDAwLFxcXFxuICAgICAgICAgICAgbW9kRGF0ZTogbmV3IERhdGUoKSxcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICdydHknLFxcXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBvcGVuYWJsZS5wZW0nLFxcXFxuICAgICAgICAgICAgb3BlbmFibGU6IGZhbHNlLCAvLyBQcmV2ZW50IG9wZW5pbmdcXFxcbiAgICAgICAgICAgIHNpemU6IDEwMDAwMDAwMCxcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICdidGonLFxcXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBkcmFnZ2FibGUuZXhlJyxcXFxcbiAgICAgICAgICAgIGRyYWdnYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgdGhpcyBmaWxlcyBmcm9tIGJlaW5nIGRyYWdnZWRcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICd1cHEnLFxcXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBkcm9wcGFibGUnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgICAgICBkcm9wcGFibGU6IGZhbHNlLCAvLyBQcmV2ZW50IGZpbGVzIGZyb20gYmVpbmcgZHJvcHBlZCBpbnRvIHRoaXMgZm9sZGVyXFxcXG4gICAgICAgIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIjtcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1xcXCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtZGlzcGxheWluZy1maWxlcy0tZmlsZXMtYXJyYXktZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjMzLFxcXCJsaW5lXFxcIjoyNn0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjk5fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzMsXFxcImxpbmVcXFwiOjI2fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjk5fX19O1xcbiAgICBcXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHtcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVBcnJheSxcXG4gICAgRmlsZUJyb3dzZXIsXFxuICAgIEZpbGVMaXN0LFxcbiAgICBGaWxlVG9vbGJhclxcbn0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDItRGlzcGxheWluZy1maWxlcy5tZCc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xEaXNwbGF5aW5nIGZpbGVzJyxcXG4gICAgcGFyYW1ldGVyczoge1xcXCJzdG9yeVNvdXJjZVxcXCI6e1xcXCJzb3VyY2VcXFwiOlxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQXJyYXksXFxcXG4gICAgRmlsZUJyb3dzZXIsXFxcXG4gICAgRmlsZUxpc3QsXFxcXG4gICAgRmlsZVRvb2xiYXJcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDItRGlzcGxheWluZy1maWxlcy5tZCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfERpc3BsYXlpbmcgZmlsZXMnLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgRmlsZXNBcnJheUV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgZmlsZXM6IEZpbGVBcnJheSA9IFtcXFxcbiAgICAgICAgbnVsbCwgLy8gTG9hZGluZyBhbmltYXRpb24gd2lsbCBiZSBzaG93biBmb3IgdGhpcyBmaWxlXFxcXG4gICAgICAgIG51bGwsXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnblRlJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3JtYWwgZmlsZS55YW1sJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiBmYWxzZSxcXFxcbiAgICAgICAgICAgIGlzSGlkZGVuOiB0cnVlLFxcXFxuICAgICAgICAgICAgc2l6ZTogODkwLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3p4YycsXFxcXG4gICAgICAgICAgICBuYW1lOiAnSGlkZGVuIGZpbGUubXA0JyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiBmYWxzZSxcXFxcbiAgICAgICAgICAgIGlzSGlkZGVuOiB0cnVlLFxcXFxuICAgICAgICAgICAgc2l6ZTogODkwLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ2JubScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm9ybWFsIGZvbGRlcicsXFxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICAgICAgICAgIGNoaWxkcmVuSWRzOiBbJ3JhbmRvbS1pZC0xJywgJ3JhbmRvbS1pZC0yJ10sXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAndmZyJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdTeW1saW5rIGZvbGRlcicsXFxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICAgICAgICAgIGlzU3ltbGluazogdHJ1ZSxcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICdxd2UnLFxcXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBzZWxlY3RhYmxlLnRhci5neicsXFxcXG4gICAgICAgICAgICBleHQ6ICcudGFyLmd6JywgLy8gQ3VzdG9tIGV4dGVuc2lvblxcXFxuICAgICAgICAgICAgc2VsZWN0YWJsZTogZmFsc2UsIC8vIERpc2FibGUgc2VsZWN0aW9uXFxcXG4gICAgICAgICAgICBzaXplOiA1NDMwMDAwMDAwMCxcXFxcbiAgICAgICAgICAgIG1vZERhdGU6IG5ldyBEYXRlKCksXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAncnR5JyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3Qgb3BlbmFibGUucGVtJyxcXFxcbiAgICAgICAgICAgIG9wZW5hYmxlOiBmYWxzZSwgLy8gUHJldmVudCBvcGVuaW5nXFxcXG4gICAgICAgICAgICBzaXplOiAxMDAwMDAwMDAsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnYnRqJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgZHJhZ2dhYmxlLmV4ZScsXFxcXG4gICAgICAgICAgICBkcmFnZ2FibGU6IGZhbHNlLCAvLyBQcmV2ZW50IHRoaXMgZmlsZXMgZnJvbSBiZWluZyBkcmFnZ2VkXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAndXBxJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgZHJvcHBhYmxlJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcXFxuICAgICAgICAgICAgZHJvcHBhYmxlOiBmYWxzZSwgLy8gUHJldmVudCBmaWxlcyBmcm9tIGJlaW5nIGRyb3BwZWQgaW50byB0aGlzIGZvbGRlclxcXFxuICAgICAgICB9LFxcXFxuICAgIF07XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCIsXFxcImxvY2F0aW9uc01hcFxcXCI6e1xcXCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtZGlzcGxheWluZy1maWxlcy0tZmlsZXMtYXJyYXktZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjMzLFxcXCJsaW5lXFxcIjoyNn0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjk5fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzMsXFxcImxpbmVcXFwiOjI2fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjk5fX19fSxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBGaWxlc0FycmF5RXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgZmlsZXM6IEZpbGVBcnJheSA9IFtcXG4gICAgICAgIG51bGwsIC8vIExvYWRpbmcgYW5pbWF0aW9uIHdpbGwgYmUgc2hvd24gZm9yIHRoaXMgZmlsZVxcbiAgICAgICAgbnVsbCxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ25UZScsXFxuICAgICAgICAgICAgbmFtZTogJ05vcm1hbCBmaWxlLnlhbWwnLFxcbiAgICAgICAgICAgIGlzRGlyOiBmYWxzZSxcXG4gICAgICAgICAgICBpc0hpZGRlbjogdHJ1ZSxcXG4gICAgICAgICAgICBzaXplOiA4OTAsXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnenhjJyxcXG4gICAgICAgICAgICBuYW1lOiAnSGlkZGVuIGZpbGUubXA0JyxcXG4gICAgICAgICAgICBpc0RpcjogZmFsc2UsXFxuICAgICAgICAgICAgaXNIaWRkZW46IHRydWUsXFxuICAgICAgICAgICAgc2l6ZTogODkwLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ2JubScsXFxuICAgICAgICAgICAgbmFtZTogJ05vcm1hbCBmb2xkZXInLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgICAgIGNoaWxkcmVuSWRzOiBbJ3JhbmRvbS1pZC0xJywgJ3JhbmRvbS1pZC0yJ10sXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAndmZyJyxcXG4gICAgICAgICAgICBuYW1lOiAnU3ltbGluayBmb2xkZXInLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgICAgIGlzU3ltbGluazogdHJ1ZSxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdxd2UnLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3Qgc2VsZWN0YWJsZS50YXIuZ3onLFxcbiAgICAgICAgICAgIGV4dDogJy50YXIuZ3onLCAvLyBDdXN0b20gZXh0ZW5zaW9uXFxuICAgICAgICAgICAgc2VsZWN0YWJsZTogZmFsc2UsIC8vIERpc2FibGUgc2VsZWN0aW9uXFxuICAgICAgICAgICAgc2l6ZTogNTQzMDAwMDAwMDAsXFxuICAgICAgICAgICAgbW9kRGF0ZTogbmV3IERhdGUoKSxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdydHknLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3Qgb3BlbmFibGUucGVtJyxcXG4gICAgICAgICAgICBvcGVuYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgb3BlbmluZ1xcbiAgICAgICAgICAgIHNpemU6IDEwMDAwMDAwMCxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdidGonLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgZHJhZ2dhYmxlLmV4ZScsXFxuICAgICAgICAgICAgZHJhZ2dhYmxlOiBmYWxzZSwgLy8gUHJldmVudCB0aGlzIGZpbGVzIGZyb20gYmVpbmcgZHJhZ2dlZFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ3VwcScsXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBkcm9wcGFibGUnLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgICAgIGRyb3BwYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgZmlsZXMgZnJvbSBiZWluZyBkcm9wcGVkIGludG8gdGhpcyBmb2xkZXJcXG4gICAgICAgIH0sXFxuICAgIF07XFxuXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXG4gICAgfTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIixcImxvY2F0aW9uc01hcFwiOntcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1kaXNwbGF5aW5nLWZpbGVzLS1maWxlcy1hcnJheS1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozMyxcImxpbmVcIjozNH0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjEwN30sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMyxcImxpbmVcIjozNH0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjoxMDd9fX19LFwic3RvcnlTb3VyY2VcIjp7XCJzb3VyY2VcIjpcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQge1xcbiAgICBGaWxlQWN0aW9uLFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXG4gICAgRmlsZUFycmF5LFxcbiAgICBGaWxlQnJvd3NlcixcXG4gICAgRmlsZUxpc3QsXFxuICAgIEZpbGVUb29sYmFyXFxufSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMi1EaXNwbGF5aW5nLWZpbGVzLm1kJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfERpc3BsYXlpbmcgZmlsZXMnLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgRmlsZXNBcnJheUV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGZpbGVzOiBGaWxlQXJyYXkgPSBbXFxuICAgICAgICBudWxsLCAvLyBMb2FkaW5nIGFuaW1hdGlvbiB3aWxsIGJlIHNob3duIGZvciB0aGlzIGZpbGVcXG4gICAgICAgIG51bGwsXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICduVGUnLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3JtYWwgZmlsZS55YW1sJyxcXG4gICAgICAgICAgICBpc0RpcjogZmFsc2UsXFxuICAgICAgICAgICAgaXNIaWRkZW46IHRydWUsXFxuICAgICAgICAgICAgc2l6ZTogODkwLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ3p4YycsXFxuICAgICAgICAgICAgbmFtZTogJ0hpZGRlbiBmaWxlLm1wNCcsXFxuICAgICAgICAgICAgaXNEaXI6IGZhbHNlLFxcbiAgICAgICAgICAgIGlzSGlkZGVuOiB0cnVlLFxcbiAgICAgICAgICAgIHNpemU6IDg5MCxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdibm0nLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3JtYWwgZm9sZGVyJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgICAgICBjaGlsZHJlbklkczogWydyYW5kb20taWQtMScsICdyYW5kb20taWQtMiddLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ3ZmcicsXFxuICAgICAgICAgICAgbmFtZTogJ1N5bWxpbmsgZm9sZGVyJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgICAgICBpc1N5bWxpbms6IHRydWUsXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAncXdlJyxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IHNlbGVjdGFibGUudGFyLmd6JyxcXG4gICAgICAgICAgICBleHQ6ICcudGFyLmd6JywgLy8gQ3VzdG9tIGV4dGVuc2lvblxcbiAgICAgICAgICAgIHNlbGVjdGFibGU6IGZhbHNlLCAvLyBEaXNhYmxlIHNlbGVjdGlvblxcbiAgICAgICAgICAgIHNpemU6IDU0MzAwMDAwMDAwLFxcbiAgICAgICAgICAgIG1vZERhdGU6IG5ldyBEYXRlKCksXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAncnR5JyxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IG9wZW5hYmxlLnBlbScsXFxuICAgICAgICAgICAgb3BlbmFibGU6IGZhbHNlLCAvLyBQcmV2ZW50IG9wZW5pbmdcXG4gICAgICAgICAgICBzaXplOiAxMDAwMDAwMDAsXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnYnRqJyxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IGRyYWdnYWJsZS5leGUnLFxcbiAgICAgICAgICAgIGRyYWdnYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgdGhpcyBmaWxlcyBmcm9tIGJlaW5nIGRyYWdnZWRcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICd1cHEnLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgZHJvcHBhYmxlJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgICAgICBkcm9wcGFibGU6IGZhbHNlLCAvLyBQcmV2ZW50IGZpbGVzIGZyb20gYmVpbmcgZHJvcHBlZCBpbnRvIHRoaXMgZm9sZGVyXFxuICAgICAgICB9LFxcbiAgICBdO1xcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCIsXCJsb2NhdGlvbnNNYXBcIjp7XCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtZGlzcGxheWluZy1maWxlcy0tZmlsZXMtYXJyYXktZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzMsXCJsaW5lXCI6MjZ9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo5OX0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMyxcImxpbmVcIjoyNn0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo5OX19fX0sXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcbiAgICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IEZpbGVzQXJyYXlFeGFtcGxlID0gKCkgPT4ge1xuICAgIGNvbnN0IGZpbGVzOiBGaWxlQXJyYXkgPSBbXG4gICAgICAgIG51bGwsIC8vIExvYWRpbmcgYW5pbWF0aW9uIHdpbGwgYmUgc2hvd24gZm9yIHRoaXMgZmlsZVxuICAgICAgICBudWxsLFxuICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ25UZScsXG4gICAgICAgICAgICBuYW1lOiAnTm9ybWFsIGZpbGUueWFtbCcsXG4gICAgICAgICAgICBpc0RpcjogZmFsc2UsXG4gICAgICAgICAgICBpc0hpZGRlbjogdHJ1ZSxcbiAgICAgICAgICAgIHNpemU6IDg5MCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICd6eGMnLFxuICAgICAgICAgICAgbmFtZTogJ0hpZGRlbiBmaWxlLm1wNCcsXG4gICAgICAgICAgICBpc0RpcjogZmFsc2UsXG4gICAgICAgICAgICBpc0hpZGRlbjogdHJ1ZSxcbiAgICAgICAgICAgIHNpemU6IDg5MCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICdibm0nLFxuICAgICAgICAgICAgbmFtZTogJ05vcm1hbCBmb2xkZXInLFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXG4gICAgICAgICAgICBjaGlsZHJlbklkczogWydyYW5kb20taWQtMScsICdyYW5kb20taWQtMiddLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ3ZmcicsXG4gICAgICAgICAgICBuYW1lOiAnU3ltbGluayBmb2xkZXInLFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXG4gICAgICAgICAgICBpc1N5bWxpbms6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAncXdlJyxcbiAgICAgICAgICAgIG5hbWU6ICdOb3Qgc2VsZWN0YWJsZS50YXIuZ3onLFxuICAgICAgICAgICAgZXh0OiAnLnRhci5neicsIC8vIEN1c3RvbSBleHRlbnNpb25cbiAgICAgICAgICAgIHNlbGVjdGFibGU6IGZhbHNlLCAvLyBEaXNhYmxlIHNlbGVjdGlvblxuICAgICAgICAgICAgc2l6ZTogNTQzMDAwMDAwMDAsXG4gICAgICAgICAgICBtb2REYXRlOiBuZXcgRGF0ZSgpLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ3J0eScsXG4gICAgICAgICAgICBuYW1lOiAnTm90IG9wZW5hYmxlLnBlbScsXG4gICAgICAgICAgICBvcGVuYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgb3BlbmluZ1xuICAgICAgICAgICAgc2l6ZTogMTAwMDAwMDAwLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ2J0aicsXG4gICAgICAgICAgICBuYW1lOiAnTm90IGRyYWdnYWJsZS5leGUnLFxuICAgICAgICAgICAgZHJhZ2dhYmxlOiBmYWxzZSwgLy8gUHJldmVudCB0aGlzIGZpbGVzIGZyb20gYmVpbmcgZHJhZ2dlZFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ3VwcScsXG4gICAgICAgICAgICBuYW1lOiAnTm90IGRyb3BwYWJsZScsXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcbiAgICAgICAgICAgIGRyb3BwYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgZmlsZXMgZnJvbSBiZWluZyBkcm9wcGVkIGludG8gdGhpcyBmb2xkZXJcbiAgICAgICAgfSxcbiAgICBdO1xuXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBcIlRPRE8gRXhwbGFpbjpcXG5cXG4tICAgQ2hvbmt5IGlzIGEgcHJlc2VudGF0aW9uIGxheWVyLlxcbi0gICBgRmlsZUJyb3dzZXJgIGFuZCBgRmlsZUxpc3RgIGlzIHRoZSBtaW5pbXVtIHJlcXVpcmVkLlxcbi0gICBGaWxlcyBhcnJheSBpcyB0aGUgc291cmNlIG9mIHRydXRoLlxcbi0gICBUaGUgYEZpbGVEYXRhYCB0eXBlLlxcblxcbmBgYGpzXFxuY29uc3QgZmlsZXMgPSBbXFxuICAgIHtcXG4gICAgICAgIGlkOiAnZ0J0NHozJyxcXG4gICAgICAgIG5hbWU6ICdSRUFETUUubWQnLFxcbiAgICB9LFxcbiAgICB7XFxuICAgICAgICBpZDogJ2dNNXRUZScsXFxuICAgICAgICBuYW1lOiAnQmx1ZXByaW50cycsXFxuICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgfSxcXG4gICAge1xcbiAgICAgICAgaWQ6ICdtVDdFdCcsXFxuICAgICAgICBuYW1lOiAnSSBhbSBub3Qgc2VsZWN0YWJsZSEnLFxcbiAgICAgICAgc2VsZWN0YWJsZTogZmFsc2UsXFxuICAgIH0sXFxuICAgIG51bGwsIC8vIExvYWRpbmcgYW5pbWF0aW9uIHdpbGwgYmUgc2hvd24gZm9yIHRoaXMgZmlsZVxcbl07XFxuYGBgXFxuXFxuPHNwYW4gc3R5bGU9XFxcImNvbG9yOiByZWQ7IGZvbnQtd2VpZ2h0OiBib2xkO1xcXCI+XFxuSXQgaXMgdmVyeSBpbXBvcnRhbnQgdGhhdCBmaWxlIElEcyBhcmUgdW5pcXVlOlxcbjwvc3Bhbj5cXG5cXG5JZiBmaWxlIElEcyBhcmUgbm90IHVuaXF1ZSwgdGhlIGNvbnNlcXVlbmNlcyBjYW4gYmUgZGlyZSAtIGZvciBleGFtcGxlLCB5b3VyIHVzZXIgY2FuXFxuYWNjaWRlbnRhbGx5IGRlbGV0ZSB0aGUgd3JvbmcgZmlsZS4gQ2hvbmt5IHRyaWVzIHRvIHByb3RlY3QgeW91IGJ5IHNjYW5uaW5nIHRoZSBmaWxlc1xcbmFycmF5IGZvciBkdXBsaWNhdGUgSURzLCBidXQgeW91IHNob3VsZCBwdXQgc29tZSBleHRyYSBjaGVja3MgaW4geW91ciBjb2RlIHRvby4gWW91IGNhblxcbm5ldmVyIGJlIHRvbyBzYWZlLlxcblwiOyIsIlxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJcXG4gICAgICBcXG4gICAgICAvLyBAdHMtbm9jaGVja1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19TVE9SWV9fID0gXFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMy1TcGVjaWZ5aW5nLWZvbGRlci5tZCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfFNwZWNpZnlpbmcgY3VycmVudCBmb2xkZXInLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgRm9sZGVyQ2hhaW5FeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW1xcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ2dNNXRUZScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTXkgRG9jdW1lbnRzJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ21UeFllQScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IE9wZW5hYmxlJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcXFxuICAgICAgICAgICAgb3BlbmFibGU6IGZhbHNlLCAvLyBUaGlzIGJ1dHRvbiB3aWxsIG5vdCBiZSBjbGlja2FibGVcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAgbnVsbCwgLy8gTG9hZGluZyBhbmltYXRpb24gd2lsbCBiZSBzaG93biBmb3IgdGhpcyBmaWxlXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAndnhXdEEnLFxcXFxuICAgICAgICAgICAgbmFtZTogJ1VuaXR5IFByb2plY3RzJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ21UN0V0JyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdHb29kIFByb2plY3RzJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcXFxuICAgICAgICB9LFxcXFxuICAgIF07XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtbXX1cXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiO1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XFxcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1zcGVjaWZ5aW5nLWN1cnJlbnQtZm9sZGVyLS1mb2xkZXItY2hhaW4tZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjM0LFxcXCJsaW5lXFxcIjoxOX0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjYxfSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzQsXFxcImxpbmVcXFwiOjE5fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjYxfX19O1xcbiAgICBcXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMy1TcGVjaWZ5aW5nLWZvbGRlci5tZCc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xTcGVjaWZ5aW5nIGN1cnJlbnQgZm9sZGVyJyxcXG4gICAgcGFyYW1ldGVyczoge1xcXCJzdG9yeVNvdXJjZVxcXCI6e1xcXCJzb3VyY2VcXFwiOlxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDMtU3BlY2lmeWluZy1mb2xkZXIubWQnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xTcGVjaWZ5aW5nIGN1cnJlbnQgZm9sZGVyJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEZvbGRlckNoYWluRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFtcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICdnTTV0VGUnLFxcXFxuICAgICAgICAgICAgbmFtZTogJ015IERvY3VtZW50cycsXFxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICdtVHhZZUEnLFxcXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBPcGVuYWJsZScsXFxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICAgICAgICAgIG9wZW5hYmxlOiBmYWxzZSwgLy8gVGhpcyBidXR0b24gd2lsbCBub3QgYmUgY2xpY2thYmxlXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIG51bGwsIC8vIExvYWRpbmcgYW5pbWF0aW9uIHdpbGwgYmUgc2hvd24gZm9yIHRoaXMgZmlsZVxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3Z4V3RBJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdVbml0eSBQcm9qZWN0cycsXFxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICdtVDdFdCcsXFxcXG4gICAgICAgICAgICBuYW1lOiAnR29vZCBQcm9qZWN0cycsXFxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICAgICAgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17W119XFxcXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1zcGVjaWZ5aW5nLWN1cnJlbnQtZm9sZGVyLS1mb2xkZXItY2hhaW4tZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjM0LFxcXCJsaW5lXFxcIjoxOX0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjYxfSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzQsXFxcImxpbmVcXFwiOjE5fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjYxfX19fSxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBGb2xkZXJDaGFpbkV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW1xcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnZ001dFRlJyxcXG4gICAgICAgICAgICBuYW1lOiAnTXkgRG9jdW1lbnRzJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdtVHhZZUEnLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgT3BlbmFibGUnLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgICAgIG9wZW5hYmxlOiBmYWxzZSwgLy8gVGhpcyBidXR0b24gd2lsbCBub3QgYmUgY2xpY2thYmxlXFxuICAgICAgICB9LFxcbiAgICAgICAgbnVsbCwgLy8gTG9hZGluZyBhbmltYXRpb24gd2lsbCBiZSBzaG93biBmb3IgdGhpcyBmaWxlXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICd2eFd0QScsXFxuICAgICAgICAgICAgbmFtZTogJ1VuaXR5IFByb2plY3RzJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdtVDdFdCcsXFxuICAgICAgICAgICAgbmFtZTogJ0dvb2QgUHJvamVjdHMnLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgfSxcXG4gICAgXTtcXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e1tdfVxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIjtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1zcGVjaWZ5aW5nLWN1cnJlbnQtZm9sZGVyLS1mb2xkZXItY2hhaW4tZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzQsXCJsaW5lXCI6Mjd9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo2OX0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozNCxcImxpbmVcIjoyN30sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo2OX19fTtcbiAgICBcblxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMy1TcGVjaWZ5aW5nLWZvbGRlci5tZCc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xTcGVjaWZ5aW5nIGN1cnJlbnQgZm9sZGVyJyxcXG4gICAgcGFyYW1ldGVyczoge1xcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEZvbGRlckNoYWluRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdnTTV0VGUnLFxcbiAgICAgICAgICAgIG5hbWU6ICdNeSBEb2N1bWVudHMnLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ21UeFllQScsXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBPcGVuYWJsZScsXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxuICAgICAgICAgICAgb3BlbmFibGU6IGZhbHNlLCAvLyBUaGlzIGJ1dHRvbiB3aWxsIG5vdCBiZSBjbGlja2FibGVcXG4gICAgICAgIH0sXFxuICAgICAgICBudWxsLCAvLyBMb2FkaW5nIGFuaW1hdGlvbiB3aWxsIGJlIHNob3duIGZvciB0aGlzIGZpbGVcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ3Z4V3RBJyxcXG4gICAgICAgICAgICBuYW1lOiAnVW5pdHkgUHJvamVjdHMnLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ21UN0V0JyxcXG4gICAgICAgICAgICBuYW1lOiAnR29vZCBQcm9qZWN0cycsXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxuICAgICAgICB9LFxcbiAgICBdO1xcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17W119XFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiMS1maWxlLWJyb3dzZXItYmFzaWNzLXNwZWNpZnlpbmctY3VycmVudC1mb2xkZXItLWZvbGRlci1jaGFpbi1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozNCxcImxpbmVcIjoxOX0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjYxfSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjM0LFwibGluZVwiOjE5fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjYxfX19O1xuICAgIFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xuXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSwgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XG4vLyBAdHMtaWdub3JlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAzLVNwZWNpZnlpbmctZm9sZGVyLm1kJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1kZWZhdWx0LWV4cG9ydFxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfFNwZWNpZnlpbmcgY3VycmVudCBmb2xkZXInLFxuICAgIHBhcmFtZXRlcnM6IHtcInN0b3J5U291cmNlXCI6e1wic291cmNlXCI6XCJcXG4gICAgICBcXG4gICAgICAvLyBAdHMtbm9jaGVja1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19TVE9SWV9fID0gXFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMy1TcGVjaWZ5aW5nLWZvbGRlci5tZCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfFNwZWNpZnlpbmcgY3VycmVudCBmb2xkZXInLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgRm9sZGVyQ2hhaW5FeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW1xcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ2dNNXRUZScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTXkgRG9jdW1lbnRzJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ21UeFllQScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IE9wZW5hYmxlJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcXFxuICAgICAgICAgICAgb3BlbmFibGU6IGZhbHNlLCAvLyBUaGlzIGJ1dHRvbiB3aWxsIG5vdCBiZSBjbGlja2FibGVcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAgbnVsbCwgLy8gTG9hZGluZyBhbmltYXRpb24gd2lsbCBiZSBzaG93biBmb3IgdGhpcyBmaWxlXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAndnhXdEEnLFxcXFxuICAgICAgICAgICAgbmFtZTogJ1VuaXR5IFByb2plY3RzJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ21UN0V0JyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdHb29kIFByb2plY3RzJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcXFxuICAgICAgICB9LFxcXFxuICAgIF07XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtbXX1cXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiO1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XFxcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1zcGVjaWZ5aW5nLWN1cnJlbnQtZm9sZGVyLS1mb2xkZXItY2hhaW4tZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjM0LFxcXCJsaW5lXFxcIjoxOX0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjYxfSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzQsXFxcImxpbmVcXFwiOjE5fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjYxfX19O1xcbiAgICBcXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMy1TcGVjaWZ5aW5nLWZvbGRlci5tZCc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xTcGVjaWZ5aW5nIGN1cnJlbnQgZm9sZGVyJyxcXG4gICAgcGFyYW1ldGVyczoge1xcXCJzdG9yeVNvdXJjZVxcXCI6e1xcXCJzb3VyY2VcXFwiOlxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDMtU3BlY2lmeWluZy1mb2xkZXIubWQnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xTcGVjaWZ5aW5nIGN1cnJlbnQgZm9sZGVyJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEZvbGRlckNoYWluRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFtcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICdnTTV0VGUnLFxcXFxuICAgICAgICAgICAgbmFtZTogJ015IERvY3VtZW50cycsXFxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICdtVHhZZUEnLFxcXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBPcGVuYWJsZScsXFxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICAgICAgICAgIG9wZW5hYmxlOiBmYWxzZSwgLy8gVGhpcyBidXR0b24gd2lsbCBub3QgYmUgY2xpY2thYmxlXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIG51bGwsIC8vIExvYWRpbmcgYW5pbWF0aW9uIHdpbGwgYmUgc2hvd24gZm9yIHRoaXMgZmlsZVxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3Z4V3RBJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdVbml0eSBQcm9qZWN0cycsXFxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICdtVDdFdCcsXFxcXG4gICAgICAgICAgICBuYW1lOiAnR29vZCBQcm9qZWN0cycsXFxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICAgICAgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17W119XFxcXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1zcGVjaWZ5aW5nLWN1cnJlbnQtZm9sZGVyLS1mb2xkZXItY2hhaW4tZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjM0LFxcXCJsaW5lXFxcIjoxOX0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjYxfSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzQsXFxcImxpbmVcXFwiOjE5fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjYxfX19fSxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBGb2xkZXJDaGFpbkV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW1xcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnZ001dFRlJyxcXG4gICAgICAgICAgICBuYW1lOiAnTXkgRG9jdW1lbnRzJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdtVHhZZUEnLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgT3BlbmFibGUnLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgICAgIG9wZW5hYmxlOiBmYWxzZSwgLy8gVGhpcyBidXR0b24gd2lsbCBub3QgYmUgY2xpY2thYmxlXFxuICAgICAgICB9LFxcbiAgICAgICAgbnVsbCwgLy8gTG9hZGluZyBhbmltYXRpb24gd2lsbCBiZSBzaG93biBmb3IgdGhpcyBmaWxlXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICd2eFd0QScsXFxuICAgICAgICAgICAgbmFtZTogJ1VuaXR5IFByb2plY3RzJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdtVDdFdCcsXFxuICAgICAgICAgICAgbmFtZTogJ0dvb2QgUHJvamVjdHMnLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgfSxcXG4gICAgXTtcXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e1tdfVxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIixcImxvY2F0aW9uc01hcFwiOntcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1zcGVjaWZ5aW5nLWN1cnJlbnQtZm9sZGVyLS1mb2xkZXItY2hhaW4tZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzQsXCJsaW5lXCI6Mjd9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo2OX0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozNCxcImxpbmVcIjoyN30sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo2OX19fX0sXCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDMtU3BlY2lmeWluZy1mb2xkZXIubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8U3BlY2lmeWluZyBjdXJyZW50IGZvbGRlcicsXFxuICAgIHBhcmFtZXRlcnM6IHtcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBGb2xkZXJDaGFpbkV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW1xcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnZ001dFRlJyxcXG4gICAgICAgICAgICBuYW1lOiAnTXkgRG9jdW1lbnRzJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdtVHhZZUEnLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgT3BlbmFibGUnLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgICAgIG9wZW5hYmxlOiBmYWxzZSwgLy8gVGhpcyBidXR0b24gd2lsbCBub3QgYmUgY2xpY2thYmxlXFxuICAgICAgICB9LFxcbiAgICAgICAgbnVsbCwgLy8gTG9hZGluZyBhbmltYXRpb24gd2lsbCBiZSBzaG93biBmb3IgdGhpcyBmaWxlXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICd2eFd0QScsXFxuICAgICAgICAgICAgbmFtZTogJ1VuaXR5IFByb2plY3RzJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdtVDdFdCcsXFxuICAgICAgICAgICAgbmFtZTogJ0dvb2QgUHJvamVjdHMnLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgfSxcXG4gICAgXTtcXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e1tdfVxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIixcImxvY2F0aW9uc01hcFwiOntcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1zcGVjaWZ5aW5nLWN1cnJlbnQtZm9sZGVyLS1mb2xkZXItY2hhaW4tZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzQsXCJsaW5lXCI6MTl9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo2MX0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozNCxcImxpbmVcIjoxOX0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo2MX19fX0sXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcbiAgICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IEZvbGRlckNoYWluRXhhbXBsZSA9ICgpID0+IHtcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFtcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICdnTTV0VGUnLFxuICAgICAgICAgICAgbmFtZTogJ015IERvY3VtZW50cycsXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICdtVHhZZUEnLFxuICAgICAgICAgICAgbmFtZTogJ05vdCBPcGVuYWJsZScsXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcbiAgICAgICAgICAgIG9wZW5hYmxlOiBmYWxzZSwgLy8gVGhpcyBidXR0b24gd2lsbCBub3QgYmUgY2xpY2thYmxlXG4gICAgICAgIH0sXG4gICAgICAgIG51bGwsIC8vIExvYWRpbmcgYW5pbWF0aW9uIHdpbGwgYmUgc2hvd24gZm9yIHRoaXMgZmlsZVxuICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ3Z4V3RBJyxcbiAgICAgICAgICAgIG5hbWU6ICdVbml0eSBQcm9qZWN0cycsXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICdtVDdFdCcsXG4gICAgICAgICAgICBuYW1lOiAnR29vZCBQcm9qZWN0cycsXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICBdO1xuXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcbiAgICAgICAgICAgICAgICBmaWxlcz17W119XG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgXCJUT0RPIEV4cGxhaW46XFxuXFxuKiBJbnRyb2R1Y2luZyBgRmlsZVRvb2xiYXJgLlxcbiogRXhwbGFpbiBmb2xkZXIgY2hhaW4uXFxuKiBGb2xkZXIgY2hhaW4gY2FuIGhhdmUgbnVsbHMgdG8uXFxuKiBGb2xkZXJzIGFyZSBjbGlja2FibGUsIGdvIHVwIGEgZGlyZWN0b3J5IGZvbGRlciBnb2VzIHRvIHBhcmVudCBkaXJlY3RvcnkuXFxuXCI7IiwiXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIENob25reUFjdGlvbnMsXFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQnJvd3NlcixcXFxcbiAgICBGaWxlTGlzdCxcXFxcbiAgICBGaWxlVG9vbGJhcixcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNC1BY3Rpb25zLm1kJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8VXNpbmcgZmlsZSBhY3Rpb25zJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IFthY3Rpb25Db3VudCwgc2V0QWN0aW9uQ291bnRdID0gdXNlU3RhdGUoMCk7XFxcXG4gICAgY29uc3QgW2xhc3RBY3Rpb24sIHNldExhc3RBY3Rpb25dID0gdXNlU3RhdGUoXFxcXG4gICAgICAgICdDbGljayBvbiBzb21ldGhpbmcgb3IgZHJhZyAmIGRyb3AgZmlsZXMuLi4nXFxcXG4gICAgKTtcXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICAvLyBMb2cgYWN0aW9uIHRvIGNvbnNvbGVcXFxcbiAgICAgICAgXFxcXG4gICAgICAgIGNvbnNvbGUubG9nKCdcXFxcXFxcXG5BY3Rpb24gb2JqZWN0OicsIGFjdGlvbiwgJ1xcXFxcXFxcbkFjdGlvbiBkYXRhOicsIGRhdGEpO1xcXFxuXFxcXG4gICAgICAgIC8vIFNob3cgcHJldHR5IGFjdGlvbiBIVE1MXFxcXG4gICAgICAgIGNvbnN0IHRleHRQYXJ0cyA9IFtdO1xcXFxuICAgICAgICB0ZXh0UGFydHMucHVzaChgPGI+QWN0aW9uICMke2FjdGlvbkNvdW50ICsgMX06PC9iPiAke2FjdGlvbi5uYW1lfWApO1xcXFxuICAgICAgICBpZiAoZGF0YS50YXJnZXQpIHtcXFxcbiAgICAgICAgICAgIHRleHRQYXJ0cy5wdXNoKGA8Yj5UYXJnZXQ6PC9iPiBcXFxcXFxcIiR7ZGF0YS50YXJnZXQubmFtZX1cXFxcXFxcImApO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGlmIChkYXRhLmZpbGVzKSB7XFxcXG4gICAgICAgICAgICBjb25zdCBmaWxlTmFtZXMgPSBkYXRhLmZpbGVzLm1hcCgoZikgPT4gYFxcXFxcXFwiJHtmLm5hbWV9XFxcXFxcXCJgKS5qb2luKCcsICcpO1xcXFxuICAgICAgICAgICAgdGV4dFBhcnRzLnB1c2goYDxiPkZpbGVzOjwvYj4gJHtmaWxlTmFtZXN9YCk7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgc2V0QWN0aW9uQ291bnQoKGNvdW50KSA9PiBjb3VudCArIDEpO1xcXFxuICAgICAgICBzZXRMYXN0QWN0aW9uKHRleHRQYXJ0cy5qb2luKCcgJykpO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IERvY3VtZW50cycsIGlzRGlyOiB0cnVlIH1dO1xcXFxuICAgIGNvbnN0IGZpbGVzID0gW1xcXFxuICAgICAgICB7IGlkOiAnbUhlNEExJywgbmFtZTogJ01lYW5pbmcgb2YgbGlmZS50eHQnLCBzaXplOiAzMTQxNSB9LFxcXFxuICAgICAgICB7IGlkOiAnaHVudGVyMicsIG5hbWU6ICdQYXNzd29yZC50eHQnIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdiRWYyNHEnLCBuYW1lOiAnRHJhZyAmIGRyb3AgZmlsZXMgaGVyZScsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIGNvbnN0IGZpbGVBY3Rpb25zID0gW1xcXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNyZWF0ZUZvbGRlcixcXFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5VcGxvYWRGaWxlcyxcXFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Eb3dubG9hZEZpbGVzLFxcXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNvcHlGaWxlcyxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcXFxcXCJsaXZlLWV4YW1wbGVcXFxcXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxkaXZcXFxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XFxcXFxcXCJsaXZlLWV4YW1wbGUtYWN0aW9uXFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IGxhc3RBY3Rpb24gfX1cXFxcbiAgICAgICAgICAgIC8+XFxcXG5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxcXG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2ZpbGVBY3Rpb25zfVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIjtcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1xcXCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtdXNpbmctZmlsZS1hY3Rpb25zLS1hY3Rpb25zLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozMCxcXFwibGluZVxcXCI6MjZ9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo4NH0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjMwLFxcXCJsaW5lXFxcIjoyNn0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo4NH19fTtcXG4gICAgXFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7XFxuICAgIENob25reUFjdGlvbnMsXFxuICAgIEZpbGVBY3Rpb24sXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcbiAgICBGaWxlQnJvd3NlcixcXG4gICAgRmlsZUxpc3QsXFxuICAgIEZpbGVUb29sYmFyLFxcbn0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNC1BY3Rpb25zLm1kJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfFVzaW5nIGZpbGUgYWN0aW9ucycsXFxuICAgIHBhcmFtZXRlcnM6IHtcXFwic3RvcnlTb3VyY2VcXFwiOntcXFwic291cmNlXFxcIjpcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIENob25reUFjdGlvbnMsXFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQnJvd3NlcixcXFxcbiAgICBGaWxlTGlzdCxcXFxcbiAgICBGaWxlVG9vbGJhcixcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNC1BY3Rpb25zLm1kJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8VXNpbmcgZmlsZSBhY3Rpb25zJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IFthY3Rpb25Db3VudCwgc2V0QWN0aW9uQ291bnRdID0gdXNlU3RhdGUoMCk7XFxcXG4gICAgY29uc3QgW2xhc3RBY3Rpb24sIHNldExhc3RBY3Rpb25dID0gdXNlU3RhdGUoXFxcXG4gICAgICAgICdDbGljayBvbiBzb21ldGhpbmcgb3IgZHJhZyAmIGRyb3AgZmlsZXMuLi4nXFxcXG4gICAgKTtcXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICAvLyBMb2cgYWN0aW9uIHRvIGNvbnNvbGVcXFxcbiAgICAgICAgXFxcXG4gICAgICAgIGNvbnNvbGUubG9nKCdcXFxcXFxcXG5BY3Rpb24gb2JqZWN0OicsIGFjdGlvbiwgJ1xcXFxcXFxcbkFjdGlvbiBkYXRhOicsIGRhdGEpO1xcXFxuXFxcXG4gICAgICAgIC8vIFNob3cgcHJldHR5IGFjdGlvbiBIVE1MXFxcXG4gICAgICAgIGNvbnN0IHRleHRQYXJ0cyA9IFtdO1xcXFxuICAgICAgICB0ZXh0UGFydHMucHVzaChgPGI+QWN0aW9uICMke2FjdGlvbkNvdW50ICsgMX06PC9iPiAke2FjdGlvbi5uYW1lfWApO1xcXFxuICAgICAgICBpZiAoZGF0YS50YXJnZXQpIHtcXFxcbiAgICAgICAgICAgIHRleHRQYXJ0cy5wdXNoKGA8Yj5UYXJnZXQ6PC9iPiBcXFxcXFxcIiR7ZGF0YS50YXJnZXQubmFtZX1cXFxcXFxcImApO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGlmIChkYXRhLmZpbGVzKSB7XFxcXG4gICAgICAgICAgICBjb25zdCBmaWxlTmFtZXMgPSBkYXRhLmZpbGVzLm1hcCgoZikgPT4gYFxcXFxcXFwiJHtmLm5hbWV9XFxcXFxcXCJgKS5qb2luKCcsICcpO1xcXFxuICAgICAgICAgICAgdGV4dFBhcnRzLnB1c2goYDxiPkZpbGVzOjwvYj4gJHtmaWxlTmFtZXN9YCk7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgc2V0QWN0aW9uQ291bnQoKGNvdW50KSA9PiBjb3VudCArIDEpO1xcXFxuICAgICAgICBzZXRMYXN0QWN0aW9uKHRleHRQYXJ0cy5qb2luKCcgJykpO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IERvY3VtZW50cycsIGlzRGlyOiB0cnVlIH1dO1xcXFxuICAgIGNvbnN0IGZpbGVzID0gW1xcXFxuICAgICAgICB7IGlkOiAnbUhlNEExJywgbmFtZTogJ01lYW5pbmcgb2YgbGlmZS50eHQnLCBzaXplOiAzMTQxNSB9LFxcXFxuICAgICAgICB7IGlkOiAnaHVudGVyMicsIG5hbWU6ICdQYXNzd29yZC50eHQnIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdiRWYyNHEnLCBuYW1lOiAnRHJhZyAmIGRyb3AgZmlsZXMgaGVyZScsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIGNvbnN0IGZpbGVBY3Rpb25zID0gW1xcXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNyZWF0ZUZvbGRlcixcXFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5VcGxvYWRGaWxlcyxcXFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Eb3dubG9hZEZpbGVzLFxcXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNvcHlGaWxlcyxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcXFxcXCJsaXZlLWV4YW1wbGVcXFxcXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxkaXZcXFxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XFxcXFxcXCJsaXZlLWV4YW1wbGUtYWN0aW9uXFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IGxhc3RBY3Rpb24gfX1cXFxcbiAgICAgICAgICAgIC8+XFxcXG5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxcXG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2ZpbGVBY3Rpb25zfVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcIjEtZmlsZS1icm93c2VyLWJhc2ljcy11c2luZy1maWxlLWFjdGlvbnMtLWFjdGlvbnMtZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjMwLFxcXCJsaW5lXFxcIjoyNn0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjg0fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzAsXFxcImxpbmVcXFwiOjI2fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjg0fX19fSxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBBY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgW2FjdGlvbkNvdW50LCBzZXRBY3Rpb25Db3VudF0gPSB1c2VTdGF0ZSgwKTtcXG4gICAgY29uc3QgW2xhc3RBY3Rpb24sIHNldExhc3RBY3Rpb25dID0gdXNlU3RhdGUoXFxuICAgICAgICAnQ2xpY2sgb24gc29tZXRoaW5nIG9yIGRyYWcgJiBkcm9wIGZpbGVzLi4uJ1xcbiAgICApO1xcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIC8vIExvZyBhY3Rpb24gdG8gY29uc29sZVxcbiAgICAgICAgXFxuICAgICAgICBjb25zb2xlLmxvZygnXFxcXG5BY3Rpb24gb2JqZWN0OicsIGFjdGlvbiwgJ1xcXFxuQWN0aW9uIGRhdGE6JywgZGF0YSk7XFxuXFxuICAgICAgICAvLyBTaG93IHByZXR0eSBhY3Rpb24gSFRNTFxcbiAgICAgICAgY29uc3QgdGV4dFBhcnRzID0gW107XFxuICAgICAgICB0ZXh0UGFydHMucHVzaChgPGI+QWN0aW9uICMke2FjdGlvbkNvdW50ICsgMX06PC9iPiAke2FjdGlvbi5uYW1lfWApO1xcbiAgICAgICAgaWYgKGRhdGEudGFyZ2V0KSB7XFxuICAgICAgICAgICAgdGV4dFBhcnRzLnB1c2goYDxiPlRhcmdldDo8L2I+IFxcXCIke2RhdGEudGFyZ2V0Lm5hbWV9XFxcImApO1xcbiAgICAgICAgfVxcbiAgICAgICAgaWYgKGRhdGEuZmlsZXMpIHtcXG4gICAgICAgICAgICBjb25zdCBmaWxlTmFtZXMgPSBkYXRhLmZpbGVzLm1hcCgoZikgPT4gYFxcXCIke2YubmFtZX1cXFwiYCkuam9pbignLCAnKTtcXG4gICAgICAgICAgICB0ZXh0UGFydHMucHVzaChgPGI+RmlsZXM6PC9iPiAke2ZpbGVOYW1lc31gKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHNldEFjdGlvbkNvdW50KChjb3VudCkgPT4gY291bnQgKyAxKTtcXG4gICAgICAgIHNldExhc3RBY3Rpb24odGV4dFBhcnRzLmpvaW4oJyAnKSk7XFxuICAgIH07XFxuXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgRG9jdW1lbnRzJywgaXNEaXI6IHRydWUgfV07XFxuICAgIGNvbnN0IGZpbGVzID0gW1xcbiAgICAgICAgeyBpZDogJ21IZTRBMScsIG5hbWU6ICdNZWFuaW5nIG9mIGxpZmUudHh0Jywgc2l6ZTogMzE0MTUgfSxcXG4gICAgICAgIHsgaWQ6ICdodW50ZXIyJywgbmFtZTogJ1Bhc3N3b3JkLnR4dCcgfSxcXG4gICAgICAgIHsgaWQ6ICdiRWYyNHEnLCBuYW1lOiAnRHJhZyAmIGRyb3AgZmlsZXMgaGVyZScsIGlzRGlyOiB0cnVlIH0sXFxuICAgIF07XFxuXFxuICAgIGNvbnN0IGZpbGVBY3Rpb25zID0gW1xcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5DcmVhdGVGb2xkZXIsXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLlVwbG9hZEZpbGVzLFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Eb3dubG9hZEZpbGVzLFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Db3B5RmlsZXMsXFxuICAgIF07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwibGl2ZS1leGFtcGxlXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8ZGl2XFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cXFwibGl2ZS1leGFtcGxlLWFjdGlvblxcXCJcXG4gICAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBsYXN0QWN0aW9uIH19XFxuICAgICAgICAgICAgLz5cXG5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtmaWxlQWN0aW9uc31cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIjtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcIjEtZmlsZS1icm93c2VyLWJhc2ljcy11c2luZy1maWxlLWFjdGlvbnMtLWFjdGlvbnMtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6MzR9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo5Mn0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMCxcImxpbmVcIjozNH0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo5Mn19fTtcbiAgICBcblxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHtcXG4gICAgQ2hvbmt5QWN0aW9ucyxcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVCcm93c2VyLFxcbiAgICBGaWxlTGlzdCxcXG4gICAgRmlsZVRvb2xiYXIsXFxufSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0IH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA0LUFjdGlvbnMubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8VXNpbmcgZmlsZSBhY3Rpb25zJyxcXG4gICAgcGFyYW1ldGVyczoge1xcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBbYWN0aW9uQ291bnQsIHNldEFjdGlvbkNvdW50XSA9IHVzZVN0YXRlKDApO1xcbiAgICBjb25zdCBbbGFzdEFjdGlvbiwgc2V0TGFzdEFjdGlvbl0gPSB1c2VTdGF0ZShcXG4gICAgICAgICdDbGljayBvbiBzb21ldGhpbmcgb3IgZHJhZyAmIGRyb3AgZmlsZXMuLi4nXFxuICAgICk7XFxuXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgLy8gTG9nIGFjdGlvbiB0byBjb25zb2xlXFxuICAgICAgICBcXG4gICAgICAgIGNvbnNvbGUubG9nKCdcXFxcbkFjdGlvbiBvYmplY3Q6JywgYWN0aW9uLCAnXFxcXG5BY3Rpb24gZGF0YTonLCBkYXRhKTtcXG5cXG4gICAgICAgIC8vIFNob3cgcHJldHR5IGFjdGlvbiBIVE1MXFxuICAgICAgICBjb25zdCB0ZXh0UGFydHMgPSBbXTtcXG4gICAgICAgIHRleHRQYXJ0cy5wdXNoKGA8Yj5BY3Rpb24gIyR7YWN0aW9uQ291bnQgKyAxfTo8L2I+ICR7YWN0aW9uLm5hbWV9YCk7XFxuICAgICAgICBpZiAoZGF0YS50YXJnZXQpIHtcXG4gICAgICAgICAgICB0ZXh0UGFydHMucHVzaChgPGI+VGFyZ2V0OjwvYj4gXFxcIiR7ZGF0YS50YXJnZXQubmFtZX1cXFwiYCk7XFxuICAgICAgICB9XFxuICAgICAgICBpZiAoZGF0YS5maWxlcykge1xcbiAgICAgICAgICAgIGNvbnN0IGZpbGVOYW1lcyA9IGRhdGEuZmlsZXMubWFwKChmKSA9PiBgXFxcIiR7Zi5uYW1lfVxcXCJgKS5qb2luKCcsICcpO1xcbiAgICAgICAgICAgIHRleHRQYXJ0cy5wdXNoKGA8Yj5GaWxlczo8L2I+ICR7ZmlsZU5hbWVzfWApO1xcbiAgICAgICAgfVxcbiAgICAgICAgc2V0QWN0aW9uQ291bnQoKGNvdW50KSA9PiBjb3VudCArIDEpO1xcbiAgICAgICAgc2V0TGFzdEFjdGlvbih0ZXh0UGFydHMuam9pbignICcpKTtcXG4gICAgfTtcXG5cXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBEb2N1bWVudHMnLCBpc0RpcjogdHJ1ZSB9XTtcXG4gICAgY29uc3QgZmlsZXMgPSBbXFxuICAgICAgICB7IGlkOiAnbUhlNEExJywgbmFtZTogJ01lYW5pbmcgb2YgbGlmZS50eHQnLCBzaXplOiAzMTQxNSB9LFxcbiAgICAgICAgeyBpZDogJ2h1bnRlcjInLCBuYW1lOiAnUGFzc3dvcmQudHh0JyB9LFxcbiAgICAgICAgeyBpZDogJ2JFZjI0cScsIG5hbWU6ICdEcmFnICYgZHJvcCBmaWxlcyBoZXJlJywgaXNEaXI6IHRydWUgfSxcXG4gICAgXTtcXG5cXG4gICAgY29uc3QgZmlsZUFjdGlvbnMgPSBbXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNyZWF0ZUZvbGRlcixcXG4gICAgICAgIENob25reUFjdGlvbnMuVXBsb2FkRmlsZXMsXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkRvd25sb2FkRmlsZXMsXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNvcHlGaWxlcyxcXG4gICAgXTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJsaXZlLWV4YW1wbGVcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxkaXZcXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVxcXCJsaXZlLWV4YW1wbGUtYWN0aW9uXFxcIlxcbiAgICAgICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IGxhc3RBY3Rpb24gfX1cXG4gICAgICAgICAgICAvPlxcblxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2ZpbGVBY3Rpb25zfVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiMS1maWxlLWJyb3dzZXItYmFzaWNzLXVzaW5nLWZpbGUtYWN0aW9ucy0tYWN0aW9ucy1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozMCxcImxpbmVcIjoyNn0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjg0fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjMwLFwibGluZVwiOjI2fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjg0fX19O1xuICAgIFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xuXG5pbXBvcnQge1xuICAgIENob25reUFjdGlvbnMsXG4gICAgRmlsZUFjdGlvbixcbiAgICBGaWxlQWN0aW9uRGF0YSxcbiAgICBGaWxlQnJvd3NlcixcbiAgICBGaWxlTGlzdCxcbiAgICBGaWxlVG9vbGJhcixcbn0gZnJvbSAnY2hvbmt5JztcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xuLy8gQHRzLWlnbm9yZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNC1BY3Rpb25zLm1kJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1kZWZhdWx0LWV4cG9ydFxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfFVzaW5nIGZpbGUgYWN0aW9ucycsXG4gICAgcGFyYW1ldGVyczoge1wic3RvcnlTb3VyY2VcIjp7XCJzb3VyY2VcIjpcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIENob25reUFjdGlvbnMsXFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQnJvd3NlcixcXFxcbiAgICBGaWxlTGlzdCxcXFxcbiAgICBGaWxlVG9vbGJhcixcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNC1BY3Rpb25zLm1kJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8VXNpbmcgZmlsZSBhY3Rpb25zJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IFthY3Rpb25Db3VudCwgc2V0QWN0aW9uQ291bnRdID0gdXNlU3RhdGUoMCk7XFxcXG4gICAgY29uc3QgW2xhc3RBY3Rpb24sIHNldExhc3RBY3Rpb25dID0gdXNlU3RhdGUoXFxcXG4gICAgICAgICdDbGljayBvbiBzb21ldGhpbmcgb3IgZHJhZyAmIGRyb3AgZmlsZXMuLi4nXFxcXG4gICAgKTtcXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICAvLyBMb2cgYWN0aW9uIHRvIGNvbnNvbGVcXFxcbiAgICAgICAgXFxcXG4gICAgICAgIGNvbnNvbGUubG9nKCdcXFxcXFxcXG5BY3Rpb24gb2JqZWN0OicsIGFjdGlvbiwgJ1xcXFxcXFxcbkFjdGlvbiBkYXRhOicsIGRhdGEpO1xcXFxuXFxcXG4gICAgICAgIC8vIFNob3cgcHJldHR5IGFjdGlvbiBIVE1MXFxcXG4gICAgICAgIGNvbnN0IHRleHRQYXJ0cyA9IFtdO1xcXFxuICAgICAgICB0ZXh0UGFydHMucHVzaChgPGI+QWN0aW9uICMke2FjdGlvbkNvdW50ICsgMX06PC9iPiAke2FjdGlvbi5uYW1lfWApO1xcXFxuICAgICAgICBpZiAoZGF0YS50YXJnZXQpIHtcXFxcbiAgICAgICAgICAgIHRleHRQYXJ0cy5wdXNoKGA8Yj5UYXJnZXQ6PC9iPiBcXFxcXFxcIiR7ZGF0YS50YXJnZXQubmFtZX1cXFxcXFxcImApO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGlmIChkYXRhLmZpbGVzKSB7XFxcXG4gICAgICAgICAgICBjb25zdCBmaWxlTmFtZXMgPSBkYXRhLmZpbGVzLm1hcCgoZikgPT4gYFxcXFxcXFwiJHtmLm5hbWV9XFxcXFxcXCJgKS5qb2luKCcsICcpO1xcXFxuICAgICAgICAgICAgdGV4dFBhcnRzLnB1c2goYDxiPkZpbGVzOjwvYj4gJHtmaWxlTmFtZXN9YCk7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgc2V0QWN0aW9uQ291bnQoKGNvdW50KSA9PiBjb3VudCArIDEpO1xcXFxuICAgICAgICBzZXRMYXN0QWN0aW9uKHRleHRQYXJ0cy5qb2luKCcgJykpO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IERvY3VtZW50cycsIGlzRGlyOiB0cnVlIH1dO1xcXFxuICAgIGNvbnN0IGZpbGVzID0gW1xcXFxuICAgICAgICB7IGlkOiAnbUhlNEExJywgbmFtZTogJ01lYW5pbmcgb2YgbGlmZS50eHQnLCBzaXplOiAzMTQxNSB9LFxcXFxuICAgICAgICB7IGlkOiAnaHVudGVyMicsIG5hbWU6ICdQYXNzd29yZC50eHQnIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdiRWYyNHEnLCBuYW1lOiAnRHJhZyAmIGRyb3AgZmlsZXMgaGVyZScsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIGNvbnN0IGZpbGVBY3Rpb25zID0gW1xcXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNyZWF0ZUZvbGRlcixcXFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5VcGxvYWRGaWxlcyxcXFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Eb3dubG9hZEZpbGVzLFxcXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNvcHlGaWxlcyxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcXFxcXCJsaXZlLWV4YW1wbGVcXFxcXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxkaXZcXFxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XFxcXFxcXCJsaXZlLWV4YW1wbGUtYWN0aW9uXFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IGxhc3RBY3Rpb24gfX1cXFxcbiAgICAgICAgICAgIC8+XFxcXG5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxcXG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2ZpbGVBY3Rpb25zfVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIjtcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1xcXCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtdXNpbmctZmlsZS1hY3Rpb25zLS1hY3Rpb25zLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozMCxcXFwibGluZVxcXCI6MjZ9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo4NH0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjMwLFxcXCJsaW5lXFxcIjoyNn0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo4NH19fTtcXG4gICAgXFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7XFxuICAgIENob25reUFjdGlvbnMsXFxuICAgIEZpbGVBY3Rpb24sXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcbiAgICBGaWxlQnJvd3NlcixcXG4gICAgRmlsZUxpc3QsXFxuICAgIEZpbGVUb29sYmFyLFxcbn0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNC1BY3Rpb25zLm1kJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfFVzaW5nIGZpbGUgYWN0aW9ucycsXFxuICAgIHBhcmFtZXRlcnM6IHtcXFwic3RvcnlTb3VyY2VcXFwiOntcXFwic291cmNlXFxcIjpcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIENob25reUFjdGlvbnMsXFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQnJvd3NlcixcXFxcbiAgICBGaWxlTGlzdCxcXFxcbiAgICBGaWxlVG9vbGJhcixcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNC1BY3Rpb25zLm1kJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8VXNpbmcgZmlsZSBhY3Rpb25zJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IFthY3Rpb25Db3VudCwgc2V0QWN0aW9uQ291bnRdID0gdXNlU3RhdGUoMCk7XFxcXG4gICAgY29uc3QgW2xhc3RBY3Rpb24sIHNldExhc3RBY3Rpb25dID0gdXNlU3RhdGUoXFxcXG4gICAgICAgICdDbGljayBvbiBzb21ldGhpbmcgb3IgZHJhZyAmIGRyb3AgZmlsZXMuLi4nXFxcXG4gICAgKTtcXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICAvLyBMb2cgYWN0aW9uIHRvIGNvbnNvbGVcXFxcbiAgICAgICAgXFxcXG4gICAgICAgIGNvbnNvbGUubG9nKCdcXFxcXFxcXG5BY3Rpb24gb2JqZWN0OicsIGFjdGlvbiwgJ1xcXFxcXFxcbkFjdGlvbiBkYXRhOicsIGRhdGEpO1xcXFxuXFxcXG4gICAgICAgIC8vIFNob3cgcHJldHR5IGFjdGlvbiBIVE1MXFxcXG4gICAgICAgIGNvbnN0IHRleHRQYXJ0cyA9IFtdO1xcXFxuICAgICAgICB0ZXh0UGFydHMucHVzaChgPGI+QWN0aW9uICMke2FjdGlvbkNvdW50ICsgMX06PC9iPiAke2FjdGlvbi5uYW1lfWApO1xcXFxuICAgICAgICBpZiAoZGF0YS50YXJnZXQpIHtcXFxcbiAgICAgICAgICAgIHRleHRQYXJ0cy5wdXNoKGA8Yj5UYXJnZXQ6PC9iPiBcXFxcXFxcIiR7ZGF0YS50YXJnZXQubmFtZX1cXFxcXFxcImApO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGlmIChkYXRhLmZpbGVzKSB7XFxcXG4gICAgICAgICAgICBjb25zdCBmaWxlTmFtZXMgPSBkYXRhLmZpbGVzLm1hcCgoZikgPT4gYFxcXFxcXFwiJHtmLm5hbWV9XFxcXFxcXCJgKS5qb2luKCcsICcpO1xcXFxuICAgICAgICAgICAgdGV4dFBhcnRzLnB1c2goYDxiPkZpbGVzOjwvYj4gJHtmaWxlTmFtZXN9YCk7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgc2V0QWN0aW9uQ291bnQoKGNvdW50KSA9PiBjb3VudCArIDEpO1xcXFxuICAgICAgICBzZXRMYXN0QWN0aW9uKHRleHRQYXJ0cy5qb2luKCcgJykpO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IERvY3VtZW50cycsIGlzRGlyOiB0cnVlIH1dO1xcXFxuICAgIGNvbnN0IGZpbGVzID0gW1xcXFxuICAgICAgICB7IGlkOiAnbUhlNEExJywgbmFtZTogJ01lYW5pbmcgb2YgbGlmZS50eHQnLCBzaXplOiAzMTQxNSB9LFxcXFxuICAgICAgICB7IGlkOiAnaHVudGVyMicsIG5hbWU6ICdQYXNzd29yZC50eHQnIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdiRWYyNHEnLCBuYW1lOiAnRHJhZyAmIGRyb3AgZmlsZXMgaGVyZScsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIGNvbnN0IGZpbGVBY3Rpb25zID0gW1xcXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNyZWF0ZUZvbGRlcixcXFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5VcGxvYWRGaWxlcyxcXFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Eb3dubG9hZEZpbGVzLFxcXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNvcHlGaWxlcyxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcXFxcXCJsaXZlLWV4YW1wbGVcXFxcXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxkaXZcXFxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XFxcXFxcXCJsaXZlLWV4YW1wbGUtYWN0aW9uXFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IGxhc3RBY3Rpb24gfX1cXFxcbiAgICAgICAgICAgIC8+XFxcXG5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxcXG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2ZpbGVBY3Rpb25zfVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcIjEtZmlsZS1icm93c2VyLWJhc2ljcy11c2luZy1maWxlLWFjdGlvbnMtLWFjdGlvbnMtZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjMwLFxcXCJsaW5lXFxcIjoyNn0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjg0fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzAsXFxcImxpbmVcXFwiOjI2fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjg0fX19fSxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBBY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgW2FjdGlvbkNvdW50LCBzZXRBY3Rpb25Db3VudF0gPSB1c2VTdGF0ZSgwKTtcXG4gICAgY29uc3QgW2xhc3RBY3Rpb24sIHNldExhc3RBY3Rpb25dID0gdXNlU3RhdGUoXFxuICAgICAgICAnQ2xpY2sgb24gc29tZXRoaW5nIG9yIGRyYWcgJiBkcm9wIGZpbGVzLi4uJ1xcbiAgICApO1xcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIC8vIExvZyBhY3Rpb24gdG8gY29uc29sZVxcbiAgICAgICAgXFxuICAgICAgICBjb25zb2xlLmxvZygnXFxcXG5BY3Rpb24gb2JqZWN0OicsIGFjdGlvbiwgJ1xcXFxuQWN0aW9uIGRhdGE6JywgZGF0YSk7XFxuXFxuICAgICAgICAvLyBTaG93IHByZXR0eSBhY3Rpb24gSFRNTFxcbiAgICAgICAgY29uc3QgdGV4dFBhcnRzID0gW107XFxuICAgICAgICB0ZXh0UGFydHMucHVzaChgPGI+QWN0aW9uICMke2FjdGlvbkNvdW50ICsgMX06PC9iPiAke2FjdGlvbi5uYW1lfWApO1xcbiAgICAgICAgaWYgKGRhdGEudGFyZ2V0KSB7XFxuICAgICAgICAgICAgdGV4dFBhcnRzLnB1c2goYDxiPlRhcmdldDo8L2I+IFxcXCIke2RhdGEudGFyZ2V0Lm5hbWV9XFxcImApO1xcbiAgICAgICAgfVxcbiAgICAgICAgaWYgKGRhdGEuZmlsZXMpIHtcXG4gICAgICAgICAgICBjb25zdCBmaWxlTmFtZXMgPSBkYXRhLmZpbGVzLm1hcCgoZikgPT4gYFxcXCIke2YubmFtZX1cXFwiYCkuam9pbignLCAnKTtcXG4gICAgICAgICAgICB0ZXh0UGFydHMucHVzaChgPGI+RmlsZXM6PC9iPiAke2ZpbGVOYW1lc31gKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHNldEFjdGlvbkNvdW50KChjb3VudCkgPT4gY291bnQgKyAxKTtcXG4gICAgICAgIHNldExhc3RBY3Rpb24odGV4dFBhcnRzLmpvaW4oJyAnKSk7XFxuICAgIH07XFxuXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgRG9jdW1lbnRzJywgaXNEaXI6IHRydWUgfV07XFxuICAgIGNvbnN0IGZpbGVzID0gW1xcbiAgICAgICAgeyBpZDogJ21IZTRBMScsIG5hbWU6ICdNZWFuaW5nIG9mIGxpZmUudHh0Jywgc2l6ZTogMzE0MTUgfSxcXG4gICAgICAgIHsgaWQ6ICdodW50ZXIyJywgbmFtZTogJ1Bhc3N3b3JkLnR4dCcgfSxcXG4gICAgICAgIHsgaWQ6ICdiRWYyNHEnLCBuYW1lOiAnRHJhZyAmIGRyb3AgZmlsZXMgaGVyZScsIGlzRGlyOiB0cnVlIH0sXFxuICAgIF07XFxuXFxuICAgIGNvbnN0IGZpbGVBY3Rpb25zID0gW1xcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5DcmVhdGVGb2xkZXIsXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLlVwbG9hZEZpbGVzLFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Eb3dubG9hZEZpbGVzLFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Db3B5RmlsZXMsXFxuICAgIF07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwibGl2ZS1leGFtcGxlXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8ZGl2XFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cXFwibGl2ZS1leGFtcGxlLWFjdGlvblxcXCJcXG4gICAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBsYXN0QWN0aW9uIH19XFxuICAgICAgICAgICAgLz5cXG5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtmaWxlQWN0aW9uc31cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIixcImxvY2F0aW9uc01hcFwiOntcIjEtZmlsZS1icm93c2VyLWJhc2ljcy11c2luZy1maWxlLWFjdGlvbnMtLWFjdGlvbnMtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6MzR9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo5Mn0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMCxcImxpbmVcIjozNH0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo5Mn19fX0sXCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7XFxuICAgIENob25reUFjdGlvbnMsXFxuICAgIEZpbGVBY3Rpb24sXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcbiAgICBGaWxlQnJvd3NlcixcXG4gICAgRmlsZUxpc3QsXFxuICAgIEZpbGVUb29sYmFyLFxcbn0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNC1BY3Rpb25zLm1kJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfFVzaW5nIGZpbGUgYWN0aW9ucycsXFxuICAgIHBhcmFtZXRlcnM6IHtcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBBY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgW2FjdGlvbkNvdW50LCBzZXRBY3Rpb25Db3VudF0gPSB1c2VTdGF0ZSgwKTtcXG4gICAgY29uc3QgW2xhc3RBY3Rpb24sIHNldExhc3RBY3Rpb25dID0gdXNlU3RhdGUoXFxuICAgICAgICAnQ2xpY2sgb24gc29tZXRoaW5nIG9yIGRyYWcgJiBkcm9wIGZpbGVzLi4uJ1xcbiAgICApO1xcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIC8vIExvZyBhY3Rpb24gdG8gY29uc29sZVxcbiAgICAgICAgXFxuICAgICAgICBjb25zb2xlLmxvZygnXFxcXG5BY3Rpb24gb2JqZWN0OicsIGFjdGlvbiwgJ1xcXFxuQWN0aW9uIGRhdGE6JywgZGF0YSk7XFxuXFxuICAgICAgICAvLyBTaG93IHByZXR0eSBhY3Rpb24gSFRNTFxcbiAgICAgICAgY29uc3QgdGV4dFBhcnRzID0gW107XFxuICAgICAgICB0ZXh0UGFydHMucHVzaChgPGI+QWN0aW9uICMke2FjdGlvbkNvdW50ICsgMX06PC9iPiAke2FjdGlvbi5uYW1lfWApO1xcbiAgICAgICAgaWYgKGRhdGEudGFyZ2V0KSB7XFxuICAgICAgICAgICAgdGV4dFBhcnRzLnB1c2goYDxiPlRhcmdldDo8L2I+IFxcXCIke2RhdGEudGFyZ2V0Lm5hbWV9XFxcImApO1xcbiAgICAgICAgfVxcbiAgICAgICAgaWYgKGRhdGEuZmlsZXMpIHtcXG4gICAgICAgICAgICBjb25zdCBmaWxlTmFtZXMgPSBkYXRhLmZpbGVzLm1hcCgoZikgPT4gYFxcXCIke2YubmFtZX1cXFwiYCkuam9pbignLCAnKTtcXG4gICAgICAgICAgICB0ZXh0UGFydHMucHVzaChgPGI+RmlsZXM6PC9iPiAke2ZpbGVOYW1lc31gKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHNldEFjdGlvbkNvdW50KChjb3VudCkgPT4gY291bnQgKyAxKTtcXG4gICAgICAgIHNldExhc3RBY3Rpb24odGV4dFBhcnRzLmpvaW4oJyAnKSk7XFxuICAgIH07XFxuXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgRG9jdW1lbnRzJywgaXNEaXI6IHRydWUgfV07XFxuICAgIGNvbnN0IGZpbGVzID0gW1xcbiAgICAgICAgeyBpZDogJ21IZTRBMScsIG5hbWU6ICdNZWFuaW5nIG9mIGxpZmUudHh0Jywgc2l6ZTogMzE0MTUgfSxcXG4gICAgICAgIHsgaWQ6ICdodW50ZXIyJywgbmFtZTogJ1Bhc3N3b3JkLnR4dCcgfSxcXG4gICAgICAgIHsgaWQ6ICdiRWYyNHEnLCBuYW1lOiAnRHJhZyAmIGRyb3AgZmlsZXMgaGVyZScsIGlzRGlyOiB0cnVlIH0sXFxuICAgIF07XFxuXFxuICAgIGNvbnN0IGZpbGVBY3Rpb25zID0gW1xcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5DcmVhdGVGb2xkZXIsXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLlVwbG9hZEZpbGVzLFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Eb3dubG9hZEZpbGVzLFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Db3B5RmlsZXMsXFxuICAgIF07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwibGl2ZS1leGFtcGxlXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8ZGl2XFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cXFwibGl2ZS1leGFtcGxlLWFjdGlvblxcXCJcXG4gICAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBsYXN0QWN0aW9uIH19XFxuICAgICAgICAgICAgLz5cXG5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtmaWxlQWN0aW9uc31cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIixcImxvY2F0aW9uc01hcFwiOntcIjEtZmlsZS1icm93c2VyLWJhc2ljcy11c2luZy1maWxlLWFjdGlvbnMtLWFjdGlvbnMtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6MjZ9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo4NH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMCxcImxpbmVcIjoyNn0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo4NH19fX0sXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcbiAgICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xuICAgIGNvbnN0IFthY3Rpb25Db3VudCwgc2V0QWN0aW9uQ291bnRdID0gdXNlU3RhdGUoMCk7XG4gICAgY29uc3QgW2xhc3RBY3Rpb24sIHNldExhc3RBY3Rpb25dID0gdXNlU3RhdGUoXG4gICAgICAgICdDbGljayBvbiBzb21ldGhpbmcgb3IgZHJhZyAmIGRyb3AgZmlsZXMuLi4nXG4gICAgKTtcblxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xuICAgICAgICAvLyBMb2cgYWN0aW9uIHRvIGNvbnNvbGVcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS5sb2coJ1xcbkFjdGlvbiBvYmplY3Q6JywgYWN0aW9uLCAnXFxuQWN0aW9uIGRhdGE6JywgZGF0YSk7XG5cbiAgICAgICAgLy8gU2hvdyBwcmV0dHkgYWN0aW9uIEhUTUxcbiAgICAgICAgY29uc3QgdGV4dFBhcnRzID0gW107XG4gICAgICAgIHRleHRQYXJ0cy5wdXNoKGA8Yj5BY3Rpb24gIyR7YWN0aW9uQ291bnQgKyAxfTo8L2I+ICR7YWN0aW9uLm5hbWV9YCk7XG4gICAgICAgIGlmIChkYXRhLnRhcmdldCkge1xuICAgICAgICAgICAgdGV4dFBhcnRzLnB1c2goYDxiPlRhcmdldDo8L2I+IFwiJHtkYXRhLnRhcmdldC5uYW1lfVwiYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEuZmlsZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVOYW1lcyA9IGRhdGEuZmlsZXMubWFwKChmKSA9PiBgXCIke2YubmFtZX1cImApLmpvaW4oJywgJyk7XG4gICAgICAgICAgICB0ZXh0UGFydHMucHVzaChgPGI+RmlsZXM6PC9iPiAke2ZpbGVOYW1lc31gKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRBY3Rpb25Db3VudCgoY291bnQpID0+IGNvdW50ICsgMSk7XG4gICAgICAgIHNldExhc3RBY3Rpb24odGV4dFBhcnRzLmpvaW4oJyAnKSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgRG9jdW1lbnRzJywgaXNEaXI6IHRydWUgfV07XG4gICAgY29uc3QgZmlsZXMgPSBbXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXG4gICAgICAgIHsgaWQ6ICdodW50ZXIyJywgbmFtZTogJ1Bhc3N3b3JkLnR4dCcgfSxcbiAgICAgICAgeyBpZDogJ2JFZjI0cScsIG5hbWU6ICdEcmFnICYgZHJvcCBmaWxlcyBoZXJlJywgaXNEaXI6IHRydWUgfSxcbiAgICBdO1xuXG4gICAgY29uc3QgZmlsZUFjdGlvbnMgPSBbXG4gICAgICAgIENob25reUFjdGlvbnMuQ3JlYXRlRm9sZGVyLFxuICAgICAgICBDaG9ua3lBY3Rpb25zLlVwbG9hZEZpbGVzLFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkRvd25sb2FkRmlsZXMsXG4gICAgICAgIENob25reUFjdGlvbnMuQ29weUZpbGVzLFxuICAgIF07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxpdmUtZXhhbXBsZVwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImxpdmUtZXhhbXBsZS1hY3Rpb25cIlxuICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogbGFzdEFjdGlvbiB9fVxuICAgICAgICAgICAgLz5cblxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cbiAgICAgICAgICAgICAgICBmaWxlQWN0aW9ucz17ZmlsZUFjdGlvbnN9XG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBcIkV2ZXJ5IGFwcGxpY2F0aW9uIHVzaW5nIENob25reSB3aWxsIGJlIGRpZmZlcmVudC4gU29tZSB3aWxsIHJlcXVpcmUgYSBmZWF0dXJlIHRvXFxudXBsb2FkIGZpbGVzLCBvdGhlciB3aWxsIG5lZWQgdG8gc3VwcG9ydCBjdXR0aW5nICYgcGFzdGluZy4gQm90dG9tIGxpbmUgLVxcbnJlcXVpcmVtZW50cyB3aWxsIGRpZmZlciEgQ2hvbmt5IHRyaWVzIHRvIGFkZHJlc3MgdGhpcyBwcm9ibGVtIHVzaW5nICoqRmlsZSBBY3Rpb25zKipcXG5hbmQgKipBY3Rpb24gSGFuZGxlcnMqKi5cXG5cXG4jIyBGaWxlIGFjdGlvbnNcXG5cXG4qKkZpbGUgQWN0aW9ucyoqIGRlZmluZSBfd2hhdF8gY2FuIGhhcHBlbi4gVGhlc2UgYWN0aW9ucyBjYW4gYmUgdHJpZ2dlcmVkIGJ5IHNvbWVcXG5ob3RrZXksIHVzZXIgY2xpY2tpbmcgb24gYSBidXR0b24sIG9yIGEgc3BlY2lhbCBldmVudCBsaWtlIGRyYWcgJiBkcm9wLiBIZXJlIGFyZSBzb21lXFxuZXhhbXBsZXMgb2YgZmlsZSBhY3Rpb25zOlxcblxcbi0gICBVc2VyIGRlbGV0ZXMgc29tZSBmaWxlcyBieSBtYWtpbmcgYSBzZWxlY3Rpb24gYW5kIHByZXNzaW5nIGBEZWxldGVgLlxcbi0gICBVc2VyIGluaXRpYWxpemVzIGEgZmlsZSB1cGxvYWQgYnkgY2xpY2tpbmcgb24gXFxcIlVwbG9hZCBGaWxlXFxcIiBidXR0b24uXFxuLSAgIFVzZXIgbW92ZXMgc29tZSBmaWxlcyBmcm9tIG9uZSBmb2xkZXIgdG8gYW5vdGhlciB1c2luZyBkcmFnICYgZHJvcC5cXG5cXG5BY3Rpb24gZGVmaW5pdGlvbnMgY2FuIGJlIHBhc3NlZCB0byB0aGUgYEZpbGVCcm93c2VyYCBjb21wb25lbnQgdmlhIHRoZSBgYWN0aW9uc2AuXFxuRm9yIHlvdXIgY29udmVuaWVuY2UsIENob25reSBpbmNsdWRlcyBkZWZpbml0aW9ucyBmb3IgbWFueSBjb21tb24gYWN0aW9ucy4gWW91IGp1c3RcXG5uZWVkIHRvIGltcG9ydCBhbmQgZW5hYmxlIHRoZW0gYXMgZm9sbG93czpcXG5cXG5gYGB0c3hcXG5pbXBvcnQgeyBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyLCBDaG9ua3lBY3Rpb25zIH0gZnJvbSAnY2hvbmt5JztcXG5cXG5leHBvcnQgY29uc3QgTXlDb21wb25lbnQgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGFjdGlvbnMgPSBbXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNyZWF0ZUZvbGRlciwgLy8gQWRkcyBhIGJ1dHRvbiB0byB0aGUgdG9vbGJhclxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5VcGxvYWRGaWxlcywgLy8gQWRkcyBhIGJ1dHRvblxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Eb3dubG9hZEZpbGVzLCAvLyBBZGRzIGEgYnV0dG9uXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNvcHlGaWxlcywgLy8gQWRkcyBhIGJ1dHRvbiBhbmQgYSBzaG9ydGN1dDogQ3RybCtDXFxuXFxuICAgIF07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8RmlsZUJyb3dzZXIgZmlsZXM9e1tdfSBhY3Rpb25zPXthY3Rpb25zfT5cXG4gICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICk7XFxufTtcXG5gYGBcXG5cXG4jIyBBY3Rpb24gaGFuZGxlcnNcXG5cXG5gYGB0c1xcbmNvbnN0IGhlbGxvV29ybGQgPSAnMTIzJztcXG5gYGBcXG5cIjsiLCJcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAvLyBAdHMtbm9jaGVja1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fU1RPUllfXyA9IFwiXFxuICAgICAgXFxuICAgICAgLy8gQHRzLW5vY2hlY2tcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fU1RPUllfXyA9IFxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDUtQ3VzdG9tLWFjdGlvbnMubWQnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xDdXN0b20gZmlsZSBhY3Rpb25zJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEN1c3RvbUFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8RmlsZUJyb3dzZXIgZmlsZXM9e1tdfSBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259PlxcXFxuICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwiMS1maWxlLWJyb3dzZXItYmFzaWNzLWN1c3RvbS1maWxlLWFjdGlvbnMtLWN1c3RvbS1hY3Rpb25zLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozNixcXFwibGluZVxcXCI6MTl9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjozMH0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjM2LFxcXCJsaW5lXFxcIjoxOX0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjozMH19fTtcXG4gICAgXFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDUtQ3VzdG9tLWFjdGlvbnMubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8Q3VzdG9tIGZpbGUgYWN0aW9ucycsXFxuICAgIHBhcmFtZXRlcnM6IHtcXFwic3RvcnlTb3VyY2VcXFwiOntcXFwic291cmNlXFxcIjpcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSwgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA1LUN1c3RvbS1hY3Rpb25zLm1kJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8Q3VzdG9tIGZpbGUgYWN0aW9ucycsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBDdXN0b21BY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPEZpbGVCcm93c2VyIGZpbGVzPXtbXX0gb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufT5cXFxcbiAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiLFxcXCJsb2NhdGlvbnNNYXBcXFwiOntcXFwiMS1maWxlLWJyb3dzZXItYmFzaWNzLWN1c3RvbS1maWxlLWFjdGlvbnMtLWN1c3RvbS1hY3Rpb25zLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozNixcXFwibGluZVxcXCI6MTl9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjozMH0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjM2LFxcXCJsaW5lXFxcIjoxOX0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjozMH19fX0sXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgQ3VzdG9tQWN0aW9uc0V4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXG4gICAgfTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxGaWxlQnJvd3NlciBmaWxlcz17W119IG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn0+XFxuICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICApO1xcbn07XFxuXCI7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtY3VzdG9tLWZpbGUtYWN0aW9ucy0tY3VzdG9tLWFjdGlvbnMtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzYsXCJsaW5lXCI6Mjd9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjozOH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozNixcImxpbmVcIjoyN30sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjozOH19fTtcbiAgICBcblxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNS1DdXN0b20tYWN0aW9ucy5tZCc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xDdXN0b20gZmlsZSBhY3Rpb25zJyxcXG4gICAgcGFyYW1ldGVyczoge1xcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEN1c3RvbUFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8RmlsZUJyb3dzZXIgZmlsZXM9e1tdfSBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259PlxcbiAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgKTtcXG59O1xcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiMS1maWxlLWJyb3dzZXItYmFzaWNzLWN1c3RvbS1maWxlLWFjdGlvbnMtLWN1c3RvbS1hY3Rpb25zLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjM2LFwibGluZVwiOjE5fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6MzB9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzYsXCJsaW5lXCI6MTl9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6MzB9fX07XG4gICAgXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XG5cbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcbi8vIEB0cy1pZ25vcmVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDUtQ3VzdG9tLWFjdGlvbnMubWQnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWRlZmF1bHQtZXhwb3J0XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8Q3VzdG9tIGZpbGUgYWN0aW9ucycsXG4gICAgcGFyYW1ldGVyczoge1wic3RvcnlTb3VyY2VcIjp7XCJzb3VyY2VcIjpcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSwgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA1LUN1c3RvbS1hY3Rpb25zLm1kJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8Q3VzdG9tIGZpbGUgYWN0aW9ucycsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBDdXN0b21BY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPEZpbGVCcm93c2VyIGZpbGVzPXtbXX0gb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufT5cXFxcbiAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiO1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XFxcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1jdXN0b20tZmlsZS1hY3Rpb25zLS1jdXN0b20tYWN0aW9ucy1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzYsXFxcImxpbmVcXFwiOjE5fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6MzB9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozNixcXFwibGluZVxcXCI6MTl9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6MzB9fX07XFxuICAgIFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSwgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA1LUN1c3RvbS1hY3Rpb25zLm1kJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfEN1c3RvbSBmaWxlIGFjdGlvbnMnLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcInN0b3J5U291cmNlXFxcIjp7XFxcInNvdXJjZVxcXCI6XFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNS1DdXN0b20tYWN0aW9ucy5tZCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfEN1c3RvbSBmaWxlIGFjdGlvbnMnLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgQ3VzdG9tQWN0aW9uc0V4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxGaWxlQnJvd3NlciBmaWxlcz17W119IG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn0+XFxcXG4gICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1jdXN0b20tZmlsZS1hY3Rpb25zLS1jdXN0b20tYWN0aW9ucy1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzYsXFxcImxpbmVcXFwiOjE5fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6MzB9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozNixcXFwibGluZVxcXCI6MTl9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6MzB9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEN1c3RvbUFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8RmlsZUJyb3dzZXIgZmlsZXM9e1tdfSBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259PlxcbiAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgKTtcXG59O1xcblwiLFwibG9jYXRpb25zTWFwXCI6e1wiMS1maWxlLWJyb3dzZXItYmFzaWNzLWN1c3RvbS1maWxlLWFjdGlvbnMtLWN1c3RvbS1hY3Rpb25zLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjM2LFwibGluZVwiOjI3fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6Mzh9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzYsXCJsaW5lXCI6Mjd9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6Mzh9fX19LFwic3RvcnlTb3VyY2VcIjp7XCJzb3VyY2VcIjpcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSwgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA1LUN1c3RvbS1hY3Rpb25zLm1kJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfEN1c3RvbSBmaWxlIGFjdGlvbnMnLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgQ3VzdG9tQWN0aW9uc0V4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXG4gICAgfTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxGaWxlQnJvd3NlciBmaWxlcz17W119IG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn0+XFxuICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICApO1xcbn07XFxuXCIsXCJsb2NhdGlvbnNNYXBcIjp7XCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtY3VzdG9tLWZpbGUtYWN0aW9ucy0tY3VzdG9tLWFjdGlvbnMtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzYsXCJsaW5lXCI6MTl9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjozMH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozNixcImxpbmVcIjoxOX0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjozMH19fX0sXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcbiAgICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IEN1c3RvbUFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8RmlsZUJyb3dzZXIgZmlsZXM9e1tdfSBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259PlxuICAgICAgICAgICAgPEZpbGVMaXN0IC8+XG4gICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cbiAgICAgICAgPC9GaWxlQnJvd3Nlcj5cbiAgICApO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IFwiTm90ZXM6XFxuXFxuLSAgIElmIG9uZSBvZiB0aGUgYWN0aW9ucyBpbiBhIGdyb3VwIGlzIG1hcmtlZCBhcyBgZHJvcGRvd25gLCB0aGV5IGFsbCBiZWNvbWUgZHJvcGRvd24uXFxuXCI7IiwiXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XFxcXG5pbXBvcnQge1xcXFxuICAgIEZpbGVBY3Rpb24sXFxcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxcXG4gICAgRmlsZUJyb3dzZXIsXFxcXG4gICAgRmlsZURhdGEsXFxcXG4gICAgRmlsZUxpc3QsXFxcXG4gICAgRmlsZVRvb2xiYXIsXFxcXG59IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA2LVRodW1ibmFpbHMubWQnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xGaWxlIHRodW1ibmFpbHMnLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgQWN0aW9uc0V4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgdGh1bWJuYWlsR2VuZXJhdG9yID0gKGZpbGU6IEZpbGVEYXRhICYgeyBkZWxheTogbnVtYmVyIH0pID0+IHtcXFxcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XFxcXG4gICAgICAgICAgICAvLyBEZWxheSBsb2FkaW5nIGJ5IGBmaWxlLmRlbGF5YCBzZWNvbmRzIHRvIHNpbXVsYXRlIHRodW1iIGdlbmVyYXRpb24uXFxcXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUoJy4vTGVubmEucG5nJyksIGZpbGUuZGVsYXkgKiAxMDAwKTtcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgUGljdHVyZXMnLCBpc0RpcjogdHJ1ZSB9XTtcXFxcbiAgICBjb25zdCBmaWxlczogRmlsZURhdGFbXSA9IFtdO1xcXFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjA7ICsraSkge1xcXFxuICAgICAgICBjb25zdCBkZWxheSA9IGkgKiAyO1xcXFxuICAgICAgICBmaWxlcy5wdXNoKHtcXFxcbiAgICAgICAgICAgIGlkOiBgaW1hZ2UtJHtpfWAsXFxcXG4gICAgICAgICAgICBuYW1lOiBgRGVsYXkgLSAke2RlbGF5fSBzZWNvbmRzLmpwZ2AsXFxcXG4gICAgICAgICAgICBkZWxheTogZGVsYXksXFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH1cXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFxcXFxcImxpdmUtZXhhbXBsZVxcXFxcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICB0aHVtYm5haWxHZW5lcmF0b3I9e3RodW1ibmFpbEdlbmVyYXRvcn0gLy8gPC0tLS1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwiMS1maWxlLWJyb3dzZXItYmFzaWNzLWZpbGUtdGh1bWJuYWlscy0tYWN0aW9ucy1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzAsXFxcImxpbmVcXFwiOjI3fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjR9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozMCxcXFwibGluZVxcXCI6Mjd9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjR9fX07XFxuICAgIFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XFxuaW1wb3J0IHtcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVCcm93c2VyLFxcbiAgICBGaWxlRGF0YSxcXG4gICAgRmlsZUxpc3QsXFxuICAgIEZpbGVUb29sYmFyLFxcbn0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDYtVGh1bWJuYWlscy5tZCc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xGaWxlIHRodW1ibmFpbHMnLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcInN0b3J5U291cmNlXFxcIjp7XFxcInNvdXJjZVxcXCI6XFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnO1xcXFxuaW1wb3J0IHtcXFxcbiAgICBGaWxlQWN0aW9uLFxcXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcXFxuICAgIEZpbGVCcm93c2VyLFxcXFxuICAgIEZpbGVEYXRhLFxcXFxuICAgIEZpbGVMaXN0LFxcXFxuICAgIEZpbGVUb29sYmFyLFxcXFxufSBmcm9tICdjaG9ua3knO1xcXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNi1UaHVtYm5haWxzLm1kJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8RmlsZSB0aHVtYm5haWxzJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IHRodW1ibmFpbEdlbmVyYXRvciA9IChmaWxlOiBGaWxlRGF0YSAmIHsgZGVsYXk6IG51bWJlciB9KSA9PiB7XFxcXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xcXFxuICAgICAgICAgICAgLy8gRGVsYXkgbG9hZGluZyBieSBgZmlsZS5kZWxheWAgc2Vjb25kcyB0byBzaW11bGF0ZSB0aHVtYiBnZW5lcmF0aW9uLlxcXFxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKCcuL0xlbm5hLnBuZycpLCBmaWxlLmRlbGF5ICogMTAwMCk7XFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IFBpY3R1cmVzJywgaXNEaXI6IHRydWUgfV07XFxcXG4gICAgY29uc3QgZmlsZXM6IEZpbGVEYXRhW10gPSBbXTtcXFxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDIwOyArK2kpIHtcXFxcbiAgICAgICAgY29uc3QgZGVsYXkgPSBpICogMjtcXFxcbiAgICAgICAgZmlsZXMucHVzaCh7XFxcXG4gICAgICAgICAgICBpZDogYGltYWdlLSR7aX1gLFxcXFxuICAgICAgICAgICAgbmFtZTogYERlbGF5IC0gJHtkZWxheX0gc2Vjb25kcy5qcGdgLFxcXFxuICAgICAgICAgICAgZGVsYXk6IGRlbGF5LFxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcXFxcXCJsaXZlLWV4YW1wbGVcXFxcXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxcXG4gICAgICAgICAgICAgICAgdGh1bWJuYWlsR2VuZXJhdG9yPXt0aHVtYm5haWxHZW5lcmF0b3J9IC8vIDwtLS0tXFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiLFxcXCJsb2NhdGlvbnNNYXBcXFwiOntcXFwiMS1maWxlLWJyb3dzZXItYmFzaWNzLWZpbGUtdGh1bWJuYWlscy0tYWN0aW9ucy1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzAsXFxcImxpbmVcXFwiOjI3fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjR9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozMCxcXFwibGluZVxcXCI6Mjd9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjR9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCB0aHVtYm5haWxHZW5lcmF0b3IgPSAoZmlsZTogRmlsZURhdGEgJiB7IGRlbGF5OiBudW1iZXIgfSkgPT4ge1xcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XFxuICAgICAgICAgICAgLy8gRGVsYXkgbG9hZGluZyBieSBgZmlsZS5kZWxheWAgc2Vjb25kcyB0byBzaW11bGF0ZSB0aHVtYiBnZW5lcmF0aW9uLlxcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSgnLi9MZW5uYS5wbmcnKSwgZmlsZS5kZWxheSAqIDEwMDApO1xcbiAgICAgICAgfSk7XFxuICAgIH07XFxuXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgUGljdHVyZXMnLCBpc0RpcjogdHJ1ZSB9XTtcXG4gICAgY29uc3QgZmlsZXM6IEZpbGVEYXRhW10gPSBbXTtcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyMDsgKytpKSB7XFxuICAgICAgICBjb25zdCBkZWxheSA9IGkgKiAyO1xcbiAgICAgICAgZmlsZXMucHVzaCh7XFxuICAgICAgICAgICAgaWQ6IGBpbWFnZS0ke2l9YCxcXG4gICAgICAgICAgICBuYW1lOiBgRGVsYXkgLSAke2RlbGF5fSBzZWNvbmRzLmpwZ2AsXFxuICAgICAgICAgICAgZGVsYXk6IGRlbGF5LFxcbiAgICAgICAgfSk7XFxuICAgIH1cXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImxpdmUtZXhhbXBsZVxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcbiAgICAgICAgICAgICAgICB0aHVtYm5haWxHZW5lcmF0b3I9e3RodW1ibmFpbEdlbmVyYXRvcn0gLy8gPC0tLS1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIjtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1maWxlLXRodW1ibmFpbHMtLWFjdGlvbnMtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6MzV9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo3Mn0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMCxcImxpbmVcIjozNX0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo3Mn19fTtcbiAgICBcblxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnO1xcbmltcG9ydCB7XFxuICAgIEZpbGVBY3Rpb24sXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcbiAgICBGaWxlQnJvd3NlcixcXG4gICAgRmlsZURhdGEsXFxuICAgIEZpbGVMaXN0LFxcbiAgICBGaWxlVG9vbGJhcixcXG59IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA2LVRodW1ibmFpbHMubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8RmlsZSB0aHVtYm5haWxzJyxcXG4gICAgcGFyYW1ldGVyczoge1xcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCB0aHVtYm5haWxHZW5lcmF0b3IgPSAoZmlsZTogRmlsZURhdGEgJiB7IGRlbGF5OiBudW1iZXIgfSkgPT4ge1xcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XFxuICAgICAgICAgICAgLy8gRGVsYXkgbG9hZGluZyBieSBgZmlsZS5kZWxheWAgc2Vjb25kcyB0byBzaW11bGF0ZSB0aHVtYiBnZW5lcmF0aW9uLlxcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSgnLi9MZW5uYS5wbmcnKSwgZmlsZS5kZWxheSAqIDEwMDApO1xcbiAgICAgICAgfSk7XFxuICAgIH07XFxuXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgUGljdHVyZXMnLCBpc0RpcjogdHJ1ZSB9XTtcXG4gICAgY29uc3QgZmlsZXM6IEZpbGVEYXRhW10gPSBbXTtcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyMDsgKytpKSB7XFxuICAgICAgICBjb25zdCBkZWxheSA9IGkgKiAyO1xcbiAgICAgICAgZmlsZXMucHVzaCh7XFxuICAgICAgICAgICAgaWQ6IGBpbWFnZS0ke2l9YCxcXG4gICAgICAgICAgICBuYW1lOiBgRGVsYXkgLSAke2RlbGF5fSBzZWNvbmRzLmpwZ2AsXFxuICAgICAgICAgICAgZGVsYXk6IGRlbGF5LFxcbiAgICAgICAgfSk7XFxuICAgIH1cXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImxpdmUtZXhhbXBsZVxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcbiAgICAgICAgICAgICAgICB0aHVtYm5haWxHZW5lcmF0b3I9e3RodW1ibmFpbEdlbmVyYXRvcn0gLy8gPC0tLS1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIjtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1maWxlLXRodW1ibmFpbHMtLWFjdGlvbnMtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6Mjd9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo2NH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMCxcImxpbmVcIjoyN30sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo2NH19fTtcbiAgICBcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcblxuaW1wb3J0IFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHtcbiAgICBGaWxlQWN0aW9uLFxuICAgIEZpbGVBY3Rpb25EYXRhLFxuICAgIEZpbGVCcm93c2VyLFxuICAgIEZpbGVEYXRhLFxuICAgIEZpbGVMaXN0LFxuICAgIEZpbGVUb29sYmFyLFxufSBmcm9tICdjaG9ua3knO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xuLy8gQHRzLWlnbm9yZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNi1UaHVtYm5haWxzLm1kJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1kZWZhdWx0LWV4cG9ydFxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfEZpbGUgdGh1bWJuYWlscycsXG4gICAgcGFyYW1ldGVyczoge1wic3RvcnlTb3VyY2VcIjp7XCJzb3VyY2VcIjpcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XFxcXG5pbXBvcnQge1xcXFxuICAgIEZpbGVBY3Rpb24sXFxcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxcXG4gICAgRmlsZUJyb3dzZXIsXFxcXG4gICAgRmlsZURhdGEsXFxcXG4gICAgRmlsZUxpc3QsXFxcXG4gICAgRmlsZVRvb2xiYXIsXFxcXG59IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA2LVRodW1ibmFpbHMubWQnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xGaWxlIHRodW1ibmFpbHMnLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgQWN0aW9uc0V4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgdGh1bWJuYWlsR2VuZXJhdG9yID0gKGZpbGU6IEZpbGVEYXRhICYgeyBkZWxheTogbnVtYmVyIH0pID0+IHtcXFxcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XFxcXG4gICAgICAgICAgICAvLyBEZWxheSBsb2FkaW5nIGJ5IGBmaWxlLmRlbGF5YCBzZWNvbmRzIHRvIHNpbXVsYXRlIHRodW1iIGdlbmVyYXRpb24uXFxcXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUoJy4vTGVubmEucG5nJyksIGZpbGUuZGVsYXkgKiAxMDAwKTtcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgUGljdHVyZXMnLCBpc0RpcjogdHJ1ZSB9XTtcXFxcbiAgICBjb25zdCBmaWxlczogRmlsZURhdGFbXSA9IFtdO1xcXFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjA7ICsraSkge1xcXFxuICAgICAgICBjb25zdCBkZWxheSA9IGkgKiAyO1xcXFxuICAgICAgICBmaWxlcy5wdXNoKHtcXFxcbiAgICAgICAgICAgIGlkOiBgaW1hZ2UtJHtpfWAsXFxcXG4gICAgICAgICAgICBuYW1lOiBgRGVsYXkgLSAke2RlbGF5fSBzZWNvbmRzLmpwZ2AsXFxcXG4gICAgICAgICAgICBkZWxheTogZGVsYXksXFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH1cXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFxcXFxcImxpdmUtZXhhbXBsZVxcXFxcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICB0aHVtYm5haWxHZW5lcmF0b3I9e3RodW1ibmFpbEdlbmVyYXRvcn0gLy8gPC0tLS1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwiMS1maWxlLWJyb3dzZXItYmFzaWNzLWZpbGUtdGh1bWJuYWlscy0tYWN0aW9ucy1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzAsXFxcImxpbmVcXFwiOjI3fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjR9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozMCxcXFwibGluZVxcXCI6Mjd9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjR9fX07XFxuICAgIFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XFxuaW1wb3J0IHtcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVCcm93c2VyLFxcbiAgICBGaWxlRGF0YSxcXG4gICAgRmlsZUxpc3QsXFxuICAgIEZpbGVUb29sYmFyLFxcbn0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDYtVGh1bWJuYWlscy5tZCc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xGaWxlIHRodW1ibmFpbHMnLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcInN0b3J5U291cmNlXFxcIjp7XFxcInNvdXJjZVxcXCI6XFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnO1xcXFxuaW1wb3J0IHtcXFxcbiAgICBGaWxlQWN0aW9uLFxcXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcXFxuICAgIEZpbGVCcm93c2VyLFxcXFxuICAgIEZpbGVEYXRhLFxcXFxuICAgIEZpbGVMaXN0LFxcXFxuICAgIEZpbGVUb29sYmFyLFxcXFxufSBmcm9tICdjaG9ua3knO1xcXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNi1UaHVtYm5haWxzLm1kJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8RmlsZSB0aHVtYm5haWxzJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IHRodW1ibmFpbEdlbmVyYXRvciA9IChmaWxlOiBGaWxlRGF0YSAmIHsgZGVsYXk6IG51bWJlciB9KSA9PiB7XFxcXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xcXFxuICAgICAgICAgICAgLy8gRGVsYXkgbG9hZGluZyBieSBgZmlsZS5kZWxheWAgc2Vjb25kcyB0byBzaW11bGF0ZSB0aHVtYiBnZW5lcmF0aW9uLlxcXFxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKCcuL0xlbm5hLnBuZycpLCBmaWxlLmRlbGF5ICogMTAwMCk7XFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IFBpY3R1cmVzJywgaXNEaXI6IHRydWUgfV07XFxcXG4gICAgY29uc3QgZmlsZXM6IEZpbGVEYXRhW10gPSBbXTtcXFxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDIwOyArK2kpIHtcXFxcbiAgICAgICAgY29uc3QgZGVsYXkgPSBpICogMjtcXFxcbiAgICAgICAgZmlsZXMucHVzaCh7XFxcXG4gICAgICAgICAgICBpZDogYGltYWdlLSR7aX1gLFxcXFxuICAgICAgICAgICAgbmFtZTogYERlbGF5IC0gJHtkZWxheX0gc2Vjb25kcy5qcGdgLFxcXFxuICAgICAgICAgICAgZGVsYXk6IGRlbGF5LFxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcXFxcXCJsaXZlLWV4YW1wbGVcXFxcXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxcXG4gICAgICAgICAgICAgICAgdGh1bWJuYWlsR2VuZXJhdG9yPXt0aHVtYm5haWxHZW5lcmF0b3J9IC8vIDwtLS0tXFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiLFxcXCJsb2NhdGlvbnNNYXBcXFwiOntcXFwiMS1maWxlLWJyb3dzZXItYmFzaWNzLWZpbGUtdGh1bWJuYWlscy0tYWN0aW9ucy1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzAsXFxcImxpbmVcXFwiOjI3fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjR9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozMCxcXFwibGluZVxcXCI6Mjd9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjR9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCB0aHVtYm5haWxHZW5lcmF0b3IgPSAoZmlsZTogRmlsZURhdGEgJiB7IGRlbGF5OiBudW1iZXIgfSkgPT4ge1xcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XFxuICAgICAgICAgICAgLy8gRGVsYXkgbG9hZGluZyBieSBgZmlsZS5kZWxheWAgc2Vjb25kcyB0byBzaW11bGF0ZSB0aHVtYiBnZW5lcmF0aW9uLlxcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSgnLi9MZW5uYS5wbmcnKSwgZmlsZS5kZWxheSAqIDEwMDApO1xcbiAgICAgICAgfSk7XFxuICAgIH07XFxuXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgUGljdHVyZXMnLCBpc0RpcjogdHJ1ZSB9XTtcXG4gICAgY29uc3QgZmlsZXM6IEZpbGVEYXRhW10gPSBbXTtcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyMDsgKytpKSB7XFxuICAgICAgICBjb25zdCBkZWxheSA9IGkgKiAyO1xcbiAgICAgICAgZmlsZXMucHVzaCh7XFxuICAgICAgICAgICAgaWQ6IGBpbWFnZS0ke2l9YCxcXG4gICAgICAgICAgICBuYW1lOiBgRGVsYXkgLSAke2RlbGF5fSBzZWNvbmRzLmpwZ2AsXFxuICAgICAgICAgICAgZGVsYXk6IGRlbGF5LFxcbiAgICAgICAgfSk7XFxuICAgIH1cXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImxpdmUtZXhhbXBsZVxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcbiAgICAgICAgICAgICAgICB0aHVtYm5haWxHZW5lcmF0b3I9e3RodW1ibmFpbEdlbmVyYXRvcn0gLy8gPC0tLS1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIixcImxvY2F0aW9uc01hcFwiOntcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1maWxlLXRodW1ibmFpbHMtLWFjdGlvbnMtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6MzV9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo3Mn0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMCxcImxpbmVcIjozNX0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo3Mn19fX0sXCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCBQcm9taXNlIGZyb20gJ2JsdWViaXJkJztcXG5pbXBvcnQge1xcbiAgICBGaWxlQWN0aW9uLFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXG4gICAgRmlsZUJyb3dzZXIsXFxuICAgIEZpbGVEYXRhLFxcbiAgICBGaWxlTGlzdCxcXG4gICAgRmlsZVRvb2xiYXIsXFxufSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNi1UaHVtYm5haWxzLm1kJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfEZpbGUgdGh1bWJuYWlscycsXFxuICAgIHBhcmFtZXRlcnM6IHtcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBBY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgdGh1bWJuYWlsR2VuZXJhdG9yID0gKGZpbGU6IEZpbGVEYXRhICYgeyBkZWxheTogbnVtYmVyIH0pID0+IHtcXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xcbiAgICAgICAgICAgIC8vIERlbGF5IGxvYWRpbmcgYnkgYGZpbGUuZGVsYXlgIHNlY29uZHMgdG8gc2ltdWxhdGUgdGh1bWIgZ2VuZXJhdGlvbi5cXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUoJy4vTGVubmEucG5nJyksIGZpbGUuZGVsYXkgKiAxMDAwKTtcXG4gICAgICAgIH0pO1xcbiAgICB9O1xcblxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IFBpY3R1cmVzJywgaXNEaXI6IHRydWUgfV07XFxuICAgIGNvbnN0IGZpbGVzOiBGaWxlRGF0YVtdID0gW107XFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjA7ICsraSkge1xcbiAgICAgICAgY29uc3QgZGVsYXkgPSBpICogMjtcXG4gICAgICAgIGZpbGVzLnB1c2goe1xcbiAgICAgICAgICAgIGlkOiBgaW1hZ2UtJHtpfWAsXFxuICAgICAgICAgICAgbmFtZTogYERlbGF5IC0gJHtkZWxheX0gc2Vjb25kcy5qcGdgLFxcbiAgICAgICAgICAgIGRlbGF5OiBkZWxheSxcXG4gICAgICAgIH0pO1xcbiAgICB9XFxuXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXG4gICAgfTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJsaXZlLWV4YW1wbGVcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXG4gICAgICAgICAgICAgICAgdGh1bWJuYWlsR2VuZXJhdG9yPXt0aHVtYm5haWxHZW5lcmF0b3J9IC8vIDwtLS0tXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCIsXCJsb2NhdGlvbnNNYXBcIjp7XCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtZmlsZS10aHVtYm5haWxzLS1hY3Rpb25zLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjMwLFwibGluZVwiOjI3fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6NjR9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6Mjd9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6NjR9fX19LFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXG4gICAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBBY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcbiAgICBjb25zdCB0aHVtYm5haWxHZW5lcmF0b3IgPSAoZmlsZTogRmlsZURhdGEgJiB7IGRlbGF5OiBudW1iZXIgfSkgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIC8vIERlbGF5IGxvYWRpbmcgYnkgYGZpbGUuZGVsYXlgIHNlY29uZHMgdG8gc2ltdWxhdGUgdGh1bWIgZ2VuZXJhdGlvbi5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSgnLi9MZW5uYS5wbmcnKSwgZmlsZS5kZWxheSAqIDEwMDApO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBQaWN0dXJlcycsIGlzRGlyOiB0cnVlIH1dO1xuICAgIGNvbnN0IGZpbGVzOiBGaWxlRGF0YVtdID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyMDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGRlbGF5ID0gaSAqIDI7XG4gICAgICAgIGZpbGVzLnB1c2goe1xuICAgICAgICAgICAgaWQ6IGBpbWFnZS0ke2l9YCxcbiAgICAgICAgICAgIG5hbWU6IGBEZWxheSAtICR7ZGVsYXl9IHNlY29uZHMuanBnYCxcbiAgICAgICAgICAgIGRlbGF5OiBkZWxheSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGl2ZS1leGFtcGxlXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxuICAgICAgICAgICAgICAgIHRodW1ibmFpbEdlbmVyYXRvcj17dGh1bWJuYWlsR2VuZXJhdG9yfSAvLyA8LS0tLVxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgXCJGaWxlIHRodW1ibmFpbHMsIHdvbyFcXG5cIjsiLCJcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAvLyBAdHMtbm9jaGVja1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fU1RPUllfXyA9IFwiXFxuICAgICAgXFxuICAgICAgLy8gQHRzLW5vY2hlY2tcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fU1RPUllfXyA9IFxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDctRHJhZy1uLWRyb3AubWQnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xFbmFibGluZyBkcmFnICYgZHJvcCcsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBEcmFnTkRyb3BFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW1xcXFxuICAgICAgICB7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IERvY3VtZW50cycsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdnTTV0VGUnLCBuYW1lOiAnT3RoZXInLCBpc0RpcjogdHJ1ZSB9LFxcXFxuICAgIF07XFxcXG4gICAgY29uc3QgZmlsZXMgPSBbXFxcXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXFxcXG4gICAgICAgIHsgaWQ6ICd5dDQzQXgnLCBuYW1lOiAnU0NQLTM5MzAgUGhvdG9zJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXFxcXFwibGl2ZS1leGFtcGxlXFxcXFxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIjtcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1xcXCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtZW5hYmxpbmctZHJhZy1kcm9wLS1kcmFnLW4tZHJvcC1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzIsXFxcImxpbmVcXFwiOjE5fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDZ9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozMixcXFwibGluZVxcXCI6MTl9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDZ9fX07XFxuICAgIFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSwgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA3LURyYWctbi1kcm9wLm1kJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfEVuYWJsaW5nIGRyYWcgJiBkcm9wJyxcXG4gICAgcGFyYW1ldGVyczoge1xcXCJzdG9yeVNvdXJjZVxcXCI6e1xcXCJzb3VyY2VcXFwiOlxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDctRHJhZy1uLWRyb3AubWQnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xFbmFibGluZyBkcmFnICYgZHJvcCcsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBEcmFnTkRyb3BFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW1xcXFxuICAgICAgICB7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IERvY3VtZW50cycsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdnTTV0VGUnLCBuYW1lOiAnT3RoZXInLCBpc0RpcjogdHJ1ZSB9LFxcXFxuICAgIF07XFxcXG4gICAgY29uc3QgZmlsZXMgPSBbXFxcXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXFxcXG4gICAgICAgIHsgaWQ6ICd5dDQzQXgnLCBuYW1lOiAnU0NQLTM5MzAgUGhvdG9zJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXFxcXFwibGl2ZS1leGFtcGxlXFxcXFxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1lbmFibGluZy1kcmFnLWRyb3AtLWRyYWctbi1kcm9wLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozMixcXFwibGluZVxcXCI6MTl9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo0Nn0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjMyLFxcXCJsaW5lXFxcIjoxOX0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo0Nn19fX0sXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgRHJhZ05Ecm9wRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbXFxuICAgICAgICB7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IERvY3VtZW50cycsIGlzRGlyOiB0cnVlIH0sXFxuICAgICAgICB7IGlkOiAnZ001dFRlJywgbmFtZTogJ090aGVyJywgaXNEaXI6IHRydWUgfSxcXG4gICAgXTtcXG4gICAgY29uc3QgZmlsZXMgPSBbXFxuICAgICAgICB7IGlkOiAnbUhlNEExJywgbmFtZTogJ01lYW5pbmcgb2YgbGlmZS50eHQnLCBzaXplOiAzMTQxNSB9LFxcbiAgICAgICAgeyBpZDogJ3l0NDNBeCcsIG5hbWU6ICdTQ1AtMzkzMCBQaG90b3MnLCBpc0RpcjogdHJ1ZSB9LFxcbiAgICBdO1xcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwibGl2ZS1leGFtcGxlXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCI7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtZW5hYmxpbmctZHJhZy1kcm9wLS1kcmFnLW4tZHJvcC1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozMixcImxpbmVcIjoyN30sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjU0fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjMyLFwibGluZVwiOjI3fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjU0fX19O1xuICAgIFxuXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSwgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA3LURyYWctbi1kcm9wLm1kJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfEVuYWJsaW5nIGRyYWcgJiBkcm9wJyxcXG4gICAgcGFyYW1ldGVyczoge1xcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IERyYWdORHJvcEV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW1xcbiAgICAgICAgeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBEb2N1bWVudHMnLCBpc0RpcjogdHJ1ZSB9LFxcbiAgICAgICAgeyBpZDogJ2dNNXRUZScsIG5hbWU6ICdPdGhlcicsIGlzRGlyOiB0cnVlIH0sXFxuICAgIF07XFxuICAgIGNvbnN0IGZpbGVzID0gW1xcbiAgICAgICAgeyBpZDogJ21IZTRBMScsIG5hbWU6ICdNZWFuaW5nIG9mIGxpZmUudHh0Jywgc2l6ZTogMzE0MTUgfSxcXG4gICAgICAgIHsgaWQ6ICd5dDQzQXgnLCBuYW1lOiAnU0NQLTM5MzAgUGhvdG9zJywgaXNEaXI6IHRydWUgfSxcXG4gICAgXTtcXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImxpdmUtZXhhbXBsZVxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiMS1maWxlLWJyb3dzZXItYmFzaWNzLWVuYWJsaW5nLWRyYWctZHJvcC0tZHJhZy1uLWRyb3AtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzIsXCJsaW5lXCI6MTl9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo0Nn0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMixcImxpbmVcIjoxOX0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo0Nn19fTtcbiAgICBcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcblxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xuLy8gQHRzLWlnbm9yZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNy1EcmFnLW4tZHJvcC5tZCc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZGVmYXVsdC1leHBvcnRcbmV4cG9ydCBkZWZhdWx0IHtcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xFbmFibGluZyBkcmFnICYgZHJvcCcsXG4gICAgcGFyYW1ldGVyczoge1wic3RvcnlTb3VyY2VcIjp7XCJzb3VyY2VcIjpcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSwgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA3LURyYWctbi1kcm9wLm1kJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8RW5hYmxpbmcgZHJhZyAmIGRyb3AnLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgRHJhZ05Ecm9wRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFtcXFxcbiAgICAgICAgeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBEb2N1bWVudHMnLCBpc0RpcjogdHJ1ZSB9LFxcXFxuICAgICAgICB7IGlkOiAnZ001dFRlJywgbmFtZTogJ090aGVyJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuICAgIGNvbnN0IGZpbGVzID0gW1xcXFxuICAgICAgICB7IGlkOiAnbUhlNEExJywgbmFtZTogJ01lYW5pbmcgb2YgbGlmZS50eHQnLCBzaXplOiAzMTQxNSB9LFxcXFxuICAgICAgICB7IGlkOiAneXQ0M0F4JywgbmFtZTogJ1NDUC0zOTMwIFBob3RvcycsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFxcXFxcImxpdmUtZXhhbXBsZVxcXFxcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwiMS1maWxlLWJyb3dzZXItYmFzaWNzLWVuYWJsaW5nLWRyYWctZHJvcC0tZHJhZy1uLWRyb3AtZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjMyLFxcXCJsaW5lXFxcIjoxOX0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjQ2fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzIsXFxcImxpbmVcXFwiOjE5fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjQ2fX19O1xcbiAgICBcXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNy1EcmFnLW4tZHJvcC5tZCc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xFbmFibGluZyBkcmFnICYgZHJvcCcsXFxuICAgIHBhcmFtZXRlcnM6IHtcXFwic3RvcnlTb3VyY2VcXFwiOntcXFwic291cmNlXFxcIjpcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSwgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA3LURyYWctbi1kcm9wLm1kJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8RW5hYmxpbmcgZHJhZyAmIGRyb3AnLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgRHJhZ05Ecm9wRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFtcXFxcbiAgICAgICAgeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBEb2N1bWVudHMnLCBpc0RpcjogdHJ1ZSB9LFxcXFxuICAgICAgICB7IGlkOiAnZ001dFRlJywgbmFtZTogJ090aGVyJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuICAgIGNvbnN0IGZpbGVzID0gW1xcXFxuICAgICAgICB7IGlkOiAnbUhlNEExJywgbmFtZTogJ01lYW5pbmcgb2YgbGlmZS50eHQnLCBzaXplOiAzMTQxNSB9LFxcXFxuICAgICAgICB7IGlkOiAneXQ0M0F4JywgbmFtZTogJ1NDUC0zOTMwIFBob3RvcycsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFxcXFxcImxpdmUtZXhhbXBsZVxcXFxcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCIsXFxcImxvY2F0aW9uc01hcFxcXCI6e1xcXCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtZW5hYmxpbmctZHJhZy1kcm9wLS1kcmFnLW4tZHJvcC1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzIsXFxcImxpbmVcXFwiOjE5fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDZ9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozMixcXFwibGluZVxcXCI6MTl9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDZ9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IERyYWdORHJvcEV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW1xcbiAgICAgICAgeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBEb2N1bWVudHMnLCBpc0RpcjogdHJ1ZSB9LFxcbiAgICAgICAgeyBpZDogJ2dNNXRUZScsIG5hbWU6ICdPdGhlcicsIGlzRGlyOiB0cnVlIH0sXFxuICAgIF07XFxuICAgIGNvbnN0IGZpbGVzID0gW1xcbiAgICAgICAgeyBpZDogJ21IZTRBMScsIG5hbWU6ICdNZWFuaW5nIG9mIGxpZmUudHh0Jywgc2l6ZTogMzE0MTUgfSxcXG4gICAgICAgIHsgaWQ6ICd5dDQzQXgnLCBuYW1lOiAnU0NQLTM5MzAgUGhvdG9zJywgaXNEaXI6IHRydWUgfSxcXG4gICAgXTtcXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImxpdmUtZXhhbXBsZVxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiLFwibG9jYXRpb25zTWFwXCI6e1wiMS1maWxlLWJyb3dzZXItYmFzaWNzLWVuYWJsaW5nLWRyYWctZHJvcC0tZHJhZy1uLWRyb3AtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzIsXCJsaW5lXCI6Mjd9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo1NH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMixcImxpbmVcIjoyN30sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo1NH19fX0sXCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDctRHJhZy1uLWRyb3AubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8RW5hYmxpbmcgZHJhZyAmIGRyb3AnLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgRHJhZ05Ecm9wRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbXFxuICAgICAgICB7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IERvY3VtZW50cycsIGlzRGlyOiB0cnVlIH0sXFxuICAgICAgICB7IGlkOiAnZ001dFRlJywgbmFtZTogJ090aGVyJywgaXNEaXI6IHRydWUgfSxcXG4gICAgXTtcXG4gICAgY29uc3QgZmlsZXMgPSBbXFxuICAgICAgICB7IGlkOiAnbUhlNEExJywgbmFtZTogJ01lYW5pbmcgb2YgbGlmZS50eHQnLCBzaXplOiAzMTQxNSB9LFxcbiAgICAgICAgeyBpZDogJ3l0NDNBeCcsIG5hbWU6ICdTQ1AtMzkzMCBQaG90b3MnLCBpc0RpcjogdHJ1ZSB9LFxcbiAgICBdO1xcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwibGl2ZS1leGFtcGxlXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCIsXCJsb2NhdGlvbnNNYXBcIjp7XCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtZW5hYmxpbmctZHJhZy1kcm9wLS1kcmFnLW4tZHJvcC1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozMixcImxpbmVcIjoxOX0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjQ2fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjMyLFwibGluZVwiOjE5fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjQ2fX19fSxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxuICAgIH0sXG59O1xuXG5leHBvcnQgY29uc3QgRHJhZ05Ecm9wRXhhbXBsZSA9ICgpID0+IHtcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFtcbiAgICAgICAgeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBEb2N1bWVudHMnLCBpc0RpcjogdHJ1ZSB9LFxuICAgICAgICB7IGlkOiAnZ001dFRlJywgbmFtZTogJ090aGVyJywgaXNEaXI6IHRydWUgfSxcbiAgICBdO1xuICAgIGNvbnN0IGZpbGVzID0gW1xuICAgICAgICB7IGlkOiAnbUhlNEExJywgbmFtZTogJ01lYW5pbmcgb2YgbGlmZS50eHQnLCBzaXplOiAzMTQxNSB9LFxuICAgICAgICB7IGlkOiAneXQ0M0F4JywgbmFtZTogJ1NDUC0zOTMwIFBob3RvcycsIGlzRGlyOiB0cnVlIH0sXG4gICAgXTtcblxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxpdmUtZXhhbXBsZVwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IFwiWW91IG1pZ2h0IG5vdGljZSB0aGF0IGRyYWcgJiBkcm9wIGRvZXMgbm90IHdvcmsgb3V0LW9mLXRoZS1ib3ggaW4gQ2hvbmt5LiBUaGlzIGlzXFxuYmVjYXVzZSBDaG9ua3kgdXNlcyBbcmVhY3QtZG5kXShodHRwczovL3JlYWN0LWRuZC5naXRodWIuaW8vcmVhY3QtZG5kLykgbGlicmFyeSB0b1xcbmhhbmRsZSBkcmFnICYgZHJvcCwgd2hpY2ggaXMgbm90IHR1cm5lZCBieSBkZWZhdWx0LlxcblxcblRvIGVuYWJsZSBkcmFnICYgZHJvcCwgeW91IHdpbGwgbmVlZCB0byB3cmFwIHlvdXIgYXBwbGljYXRpb24gcm9vdCB3aXRoIHRoZVxcbmA8RG5kUHJvdmlkZXI+YCBjb21wb25lbnQgZnJvbSByZWFjdC1kbmQ6XFxuXFxuYGBgdHN4XFxuaW1wb3J0IFJlYWN0LCB7IFJlYWN0RE9NIH0gZnJvbSAncmVhY3QnO1xcbmltcG9ydCB7IERuZFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtZG5kJztcXG5pbXBvcnQgeyBIVE1MNUJhY2tlbmQgfSBmcm9tICdyZWFjdC1kbmQtaHRtbDUtYmFja2VuZCc7XFxuXFxuUmVhY3RET00ucmVuZGVyKFxcbiAgICA8RG5kUHJvdmlkZXIgYmFja2VuZD17SFRNTDVCYWNrZW5kfT5cXG4gICAgICAgIDxBcHAgLz5cXG4gICAgPC9EbmRQcm92aWRlcj4sXFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHAnKVxcbik7XFxuYGBgXFxuXFxuTmV4dCwgZW5hYmxlIGRyYWcgJiBkcm9wIGluIHlvdXIgYDxGaWxlQnJvd3Nlcj5gOlxcblxcbmBgYHRzeFxcbjxGaWxlQnJvd3NlclxcbiAgICBmaWxlcz17ZmlsZXN9XFxuICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfSAvLyA8LS0tLVxcbj5cXG4gICAgPEZpbGVUb29sYmFyIC8+XFxuICAgIDxGaWxlTGlzdCAvPlxcbjwvRmlsZUJyb3dzZXI+XFxuYGBgXFxuXFxuT25jZSB5b3UgZG8gdGhpcywgZHJhZyAmIGRyb3Agc2hvdWxkIHN0YXJ0IHdvcmtpbmcgaW4gYWxsIENob25reSBpbnN0YW5jZXMuIEZZSSwgeW91XFxuZG9uJ3QgaGF2ZSB0byB1c2UgYEhUTUw1QmFja2VuZGAsIHlvdSBjYW4gcmVwbGFjZSBpdCB3aXRoIGFueSBiYWNrZW5kIHlvdSB3YW50LiBDb25zdWx0XFxuW3JlYWN0LWRuZCBkb2NzXShodHRwczovL3JlYWN0LWRuZC5naXRodWIuaW8vcmVhY3QtZG5kL2RvY3Mvb3ZlcnZpZXcpIGZvciBkZXRhaWxzLlxcblwiOyIsIlxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJcXG4gICAgICBcXG4gICAgICAvLyBAdHMtbm9jaGVja1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19TVE9SWV9fID0gXFxcImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcbmltcG9ydCB7IEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0IH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG5cXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtSW52YWxpZC1wcm9wcy5tZCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnMiBGaWxlIEJyb3dzZXIgZXhhbXBsZXN8UGFzc2luZyBpbnZhbGlkIHByb3BzJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEludmFsaWRQcm9wc0V4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgYmFkRmlsZXMgPSBbXFxcXG4gICAgICAgIDEyMzEyLCAvLyBOb3QgYW4gb2JqZWN0IG9yIGBudWxsYCFcXFxcbiAgICAgICAge30sIC8vIE1pc3NpbmcgYWxsIHJlcXVpcmVkIGZpZWxkcyFcXFxcbiAgICAgICAgeyBpZDogJzJ4ZjQnIH0sIC8vIE1pc3Npbmcgc29tZSByZXF1aXJlZCBmaWVsZHMhXFxcXG4gICAgICAgIHsgaWQ6ICcyeGY0JywgbmFtZTogJ1NvbWUgb3RoZXIgZmlsZSEnIH0sIC8vIER1cGxpY2F0ZSBJRCFcXFxcblxcXFxuICAgICAgICB7IGlkOiAneGJBcicsIG5hbWU6ICdHb29kIGZpbGUudHh0JyB9LCAvLyBHb29kIGZpbGUhXFxcXG4gICAgXTtcXFxcbiAgICBjb25zdCBiYWRGb2xkZXJDaGFpbiA9IFtcXFxcbiAgICAgICAgMTIzMTIsIC8vIE5vdCBhbiBvYmplY3Qgb3IgYG51bGxgIVxcXFxuICAgICAgICB7IGlkOiAnYlJ5SCcsIG5hbWU6ICdHb29kIGZvbGRlcicsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdiTWdSJywgbmFtZTogJ0dvb2QgZm9sZGVyICMyJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIHsvKiBAdHMtaWdub3JlICovfVxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyIGZpbGVzPXtiYWRGaWxlc30gZm9sZGVyQ2hhaW49e2JhZEZvbGRlckNoYWlufT5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIjtcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1xcXCIyLWZpbGUtYnJvd3Nlci1leGFtcGxlcy1wYXNzaW5nLWludmFsaWQtcHJvcHMtLWludmFsaWQtcHJvcHMtZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjM1LFxcXCJsaW5lXFxcIjoyMH0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjQ0fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzUsXFxcImxpbmVcXFwiOjIwfSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjQ0fX19O1xcbiAgICBcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5pbXBvcnQgeyBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0IH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuXFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAxLUludmFsaWQtcHJvcHMubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcyIEZpbGUgQnJvd3NlciBleGFtcGxlc3xQYXNzaW5nIGludmFsaWQgcHJvcHMnLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcInN0b3J5U291cmNlXFxcIjp7XFxcInNvdXJjZVxcXCI6XFxcImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcbmltcG9ydCB7IEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0IH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG5cXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtSW52YWxpZC1wcm9wcy5tZCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnMiBGaWxlIEJyb3dzZXIgZXhhbXBsZXN8UGFzc2luZyBpbnZhbGlkIHByb3BzJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEludmFsaWRQcm9wc0V4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgYmFkRmlsZXMgPSBbXFxcXG4gICAgICAgIDEyMzEyLCAvLyBOb3QgYW4gb2JqZWN0IG9yIGBudWxsYCFcXFxcbiAgICAgICAge30sIC8vIE1pc3NpbmcgYWxsIHJlcXVpcmVkIGZpZWxkcyFcXFxcbiAgICAgICAgeyBpZDogJzJ4ZjQnIH0sIC8vIE1pc3Npbmcgc29tZSByZXF1aXJlZCBmaWVsZHMhXFxcXG4gICAgICAgIHsgaWQ6ICcyeGY0JywgbmFtZTogJ1NvbWUgb3RoZXIgZmlsZSEnIH0sIC8vIER1cGxpY2F0ZSBJRCFcXFxcblxcXFxuICAgICAgICB7IGlkOiAneGJBcicsIG5hbWU6ICdHb29kIGZpbGUudHh0JyB9LCAvLyBHb29kIGZpbGUhXFxcXG4gICAgXTtcXFxcbiAgICBjb25zdCBiYWRGb2xkZXJDaGFpbiA9IFtcXFxcbiAgICAgICAgMTIzMTIsIC8vIE5vdCBhbiBvYmplY3Qgb3IgYG51bGxgIVxcXFxuICAgICAgICB7IGlkOiAnYlJ5SCcsIG5hbWU6ICdHb29kIGZvbGRlcicsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdiTWdSJywgbmFtZTogJ0dvb2QgZm9sZGVyICMyJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIHsvKiBAdHMtaWdub3JlICovfVxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyIGZpbGVzPXtiYWRGaWxlc30gZm9sZGVyQ2hhaW49e2JhZEZvbGRlckNoYWlufT5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcIjItZmlsZS1icm93c2VyLWV4YW1wbGVzLXBhc3NpbmctaW52YWxpZC1wcm9wcy0taW52YWxpZC1wcm9wcy1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzUsXFxcImxpbmVcXFwiOjIwfSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDR9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozNSxcXFwibGluZVxcXCI6MjB9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDR9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEludmFsaWRQcm9wc0V4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGJhZEZpbGVzID0gW1xcbiAgICAgICAgMTIzMTIsIC8vIE5vdCBhbiBvYmplY3Qgb3IgYG51bGxgIVxcbiAgICAgICAge30sIC8vIE1pc3NpbmcgYWxsIHJlcXVpcmVkIGZpZWxkcyFcXG4gICAgICAgIHsgaWQ6ICcyeGY0JyB9LCAvLyBNaXNzaW5nIHNvbWUgcmVxdWlyZWQgZmllbGRzIVxcbiAgICAgICAgeyBpZDogJzJ4ZjQnLCBuYW1lOiAnU29tZSBvdGhlciBmaWxlIScgfSwgLy8gRHVwbGljYXRlIElEIVxcblxcbiAgICAgICAgeyBpZDogJ3hiQXInLCBuYW1lOiAnR29vZCBmaWxlLnR4dCcgfSwgLy8gR29vZCBmaWxlIVxcbiAgICBdO1xcbiAgICBjb25zdCBiYWRGb2xkZXJDaGFpbiA9IFtcXG4gICAgICAgIDEyMzEyLCAvLyBOb3QgYW4gb2JqZWN0IG9yIGBudWxsYCFcXG4gICAgICAgIHsgaWQ6ICdiUnlIJywgbmFtZTogJ0dvb2QgZm9sZGVyJywgaXNEaXI6IHRydWUgfSxcXG4gICAgICAgIHsgaWQ6ICdiTWdSJywgbmFtZTogJ0dvb2QgZm9sZGVyICMyJywgaXNEaXI6IHRydWUgfSxcXG4gICAgXTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgey8qIEB0cy1pZ25vcmUgKi99XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyIGZpbGVzPXtiYWRGaWxlc30gZm9sZGVyQ2hhaW49e2JhZEZvbGRlckNoYWlufT5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiMi1maWxlLWJyb3dzZXItZXhhbXBsZXMtcGFzc2luZy1pbnZhbGlkLXByb3BzLS1pbnZhbGlkLXByb3BzLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjM1LFwibGluZVwiOjI4fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6NTJ9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzUsXCJsaW5lXCI6Mjh9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6NTJ9fX07XG4gICAgXG5cbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAvLyBAdHMtbm9jaGVja1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuaW1wb3J0IHsgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxuXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcblxcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMS1JbnZhbGlkLXByb3BzLm1kJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiAnMiBGaWxlIEJyb3dzZXIgZXhhbXBsZXN8UGFzc2luZyBpbnZhbGlkIHByb3BzJyxcXG4gICAgcGFyYW1ldGVyczoge1xcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEludmFsaWRQcm9wc0V4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGJhZEZpbGVzID0gW1xcbiAgICAgICAgMTIzMTIsIC8vIE5vdCBhbiBvYmplY3Qgb3IgYG51bGxgIVxcbiAgICAgICAge30sIC8vIE1pc3NpbmcgYWxsIHJlcXVpcmVkIGZpZWxkcyFcXG4gICAgICAgIHsgaWQ6ICcyeGY0JyB9LCAvLyBNaXNzaW5nIHNvbWUgcmVxdWlyZWQgZmllbGRzIVxcbiAgICAgICAgeyBpZDogJzJ4ZjQnLCBuYW1lOiAnU29tZSBvdGhlciBmaWxlIScgfSwgLy8gRHVwbGljYXRlIElEIVxcblxcbiAgICAgICAgeyBpZDogJ3hiQXInLCBuYW1lOiAnR29vZCBmaWxlLnR4dCcgfSwgLy8gR29vZCBmaWxlIVxcbiAgICBdO1xcbiAgICBjb25zdCBiYWRGb2xkZXJDaGFpbiA9IFtcXG4gICAgICAgIDEyMzEyLCAvLyBOb3QgYW4gb2JqZWN0IG9yIGBudWxsYCFcXG4gICAgICAgIHsgaWQ6ICdiUnlIJywgbmFtZTogJ0dvb2QgZm9sZGVyJywgaXNEaXI6IHRydWUgfSxcXG4gICAgICAgIHsgaWQ6ICdiTWdSJywgbmFtZTogJ0dvb2QgZm9sZGVyICMyJywgaXNEaXI6IHRydWUgfSxcXG4gICAgXTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgey8qIEB0cy1pZ25vcmUgKi99XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyIGZpbGVzPXtiYWRGaWxlc30gZm9sZGVyQ2hhaW49e2JhZEZvbGRlckNoYWlufT5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiMi1maWxlLWJyb3dzZXItZXhhbXBsZXMtcGFzc2luZy1pbnZhbGlkLXByb3BzLS1pbnZhbGlkLXByb3BzLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjM1LFwibGluZVwiOjIwfSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6NDR9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzUsXCJsaW5lXCI6MjB9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6NDR9fX07XG4gICAgXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XG5pbXBvcnQgeyBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcblxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xuXG4vLyBAdHMtaWdub3JlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAxLUludmFsaWQtcHJvcHMubWQnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWRlZmF1bHQtZXhwb3J0XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgdGl0bGU6ICcyIEZpbGUgQnJvd3NlciBleGFtcGxlc3xQYXNzaW5nIGludmFsaWQgcHJvcHMnLFxuICAgIHBhcmFtZXRlcnM6IHtcInN0b3J5U291cmNlXCI6e1wic291cmNlXCI6XCJcXG4gICAgICBcXG4gICAgICAvLyBAdHMtbm9jaGVja1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19TVE9SWV9fID0gXFxcImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcbmltcG9ydCB7IEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0IH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG5cXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtSW52YWxpZC1wcm9wcy5tZCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnMiBGaWxlIEJyb3dzZXIgZXhhbXBsZXN8UGFzc2luZyBpbnZhbGlkIHByb3BzJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEludmFsaWRQcm9wc0V4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgYmFkRmlsZXMgPSBbXFxcXG4gICAgICAgIDEyMzEyLCAvLyBOb3QgYW4gb2JqZWN0IG9yIGBudWxsYCFcXFxcbiAgICAgICAge30sIC8vIE1pc3NpbmcgYWxsIHJlcXVpcmVkIGZpZWxkcyFcXFxcbiAgICAgICAgeyBpZDogJzJ4ZjQnIH0sIC8vIE1pc3Npbmcgc29tZSByZXF1aXJlZCBmaWVsZHMhXFxcXG4gICAgICAgIHsgaWQ6ICcyeGY0JywgbmFtZTogJ1NvbWUgb3RoZXIgZmlsZSEnIH0sIC8vIER1cGxpY2F0ZSBJRCFcXFxcblxcXFxuICAgICAgICB7IGlkOiAneGJBcicsIG5hbWU6ICdHb29kIGZpbGUudHh0JyB9LCAvLyBHb29kIGZpbGUhXFxcXG4gICAgXTtcXFxcbiAgICBjb25zdCBiYWRGb2xkZXJDaGFpbiA9IFtcXFxcbiAgICAgICAgMTIzMTIsIC8vIE5vdCBhbiBvYmplY3Qgb3IgYG51bGxgIVxcXFxuICAgICAgICB7IGlkOiAnYlJ5SCcsIG5hbWU6ICdHb29kIGZvbGRlcicsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdiTWdSJywgbmFtZTogJ0dvb2QgZm9sZGVyICMyJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIHsvKiBAdHMtaWdub3JlICovfVxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyIGZpbGVzPXtiYWRGaWxlc30gZm9sZGVyQ2hhaW49e2JhZEZvbGRlckNoYWlufT5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIjtcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1xcXCIyLWZpbGUtYnJvd3Nlci1leGFtcGxlcy1wYXNzaW5nLWludmFsaWQtcHJvcHMtLWludmFsaWQtcHJvcHMtZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjM1LFxcXCJsaW5lXFxcIjoyMH0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjQ0fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzUsXFxcImxpbmVcXFwiOjIwfSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjQ0fX19O1xcbiAgICBcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5pbXBvcnQgeyBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0IH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuXFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAxLUludmFsaWQtcHJvcHMubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcyIEZpbGUgQnJvd3NlciBleGFtcGxlc3xQYXNzaW5nIGludmFsaWQgcHJvcHMnLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcInN0b3J5U291cmNlXFxcIjp7XFxcInNvdXJjZVxcXCI6XFxcImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcbmltcG9ydCB7IEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0IH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG5cXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtSW52YWxpZC1wcm9wcy5tZCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnMiBGaWxlIEJyb3dzZXIgZXhhbXBsZXN8UGFzc2luZyBpbnZhbGlkIHByb3BzJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEludmFsaWRQcm9wc0V4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgYmFkRmlsZXMgPSBbXFxcXG4gICAgICAgIDEyMzEyLCAvLyBOb3QgYW4gb2JqZWN0IG9yIGBudWxsYCFcXFxcbiAgICAgICAge30sIC8vIE1pc3NpbmcgYWxsIHJlcXVpcmVkIGZpZWxkcyFcXFxcbiAgICAgICAgeyBpZDogJzJ4ZjQnIH0sIC8vIE1pc3Npbmcgc29tZSByZXF1aXJlZCBmaWVsZHMhXFxcXG4gICAgICAgIHsgaWQ6ICcyeGY0JywgbmFtZTogJ1NvbWUgb3RoZXIgZmlsZSEnIH0sIC8vIER1cGxpY2F0ZSBJRCFcXFxcblxcXFxuICAgICAgICB7IGlkOiAneGJBcicsIG5hbWU6ICdHb29kIGZpbGUudHh0JyB9LCAvLyBHb29kIGZpbGUhXFxcXG4gICAgXTtcXFxcbiAgICBjb25zdCBiYWRGb2xkZXJDaGFpbiA9IFtcXFxcbiAgICAgICAgMTIzMTIsIC8vIE5vdCBhbiBvYmplY3Qgb3IgYG51bGxgIVxcXFxuICAgICAgICB7IGlkOiAnYlJ5SCcsIG5hbWU6ICdHb29kIGZvbGRlcicsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdiTWdSJywgbmFtZTogJ0dvb2QgZm9sZGVyICMyJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIHsvKiBAdHMtaWdub3JlICovfVxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyIGZpbGVzPXtiYWRGaWxlc30gZm9sZGVyQ2hhaW49e2JhZEZvbGRlckNoYWlufT5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcIjItZmlsZS1icm93c2VyLWV4YW1wbGVzLXBhc3NpbmctaW52YWxpZC1wcm9wcy0taW52YWxpZC1wcm9wcy1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzUsXFxcImxpbmVcXFwiOjIwfSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDR9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozNSxcXFwibGluZVxcXCI6MjB9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDR9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEludmFsaWRQcm9wc0V4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGJhZEZpbGVzID0gW1xcbiAgICAgICAgMTIzMTIsIC8vIE5vdCBhbiBvYmplY3Qgb3IgYG51bGxgIVxcbiAgICAgICAge30sIC8vIE1pc3NpbmcgYWxsIHJlcXVpcmVkIGZpZWxkcyFcXG4gICAgICAgIHsgaWQ6ICcyeGY0JyB9LCAvLyBNaXNzaW5nIHNvbWUgcmVxdWlyZWQgZmllbGRzIVxcbiAgICAgICAgeyBpZDogJzJ4ZjQnLCBuYW1lOiAnU29tZSBvdGhlciBmaWxlIScgfSwgLy8gRHVwbGljYXRlIElEIVxcblxcbiAgICAgICAgeyBpZDogJ3hiQXInLCBuYW1lOiAnR29vZCBmaWxlLnR4dCcgfSwgLy8gR29vZCBmaWxlIVxcbiAgICBdO1xcbiAgICBjb25zdCBiYWRGb2xkZXJDaGFpbiA9IFtcXG4gICAgICAgIDEyMzEyLCAvLyBOb3QgYW4gb2JqZWN0IG9yIGBudWxsYCFcXG4gICAgICAgIHsgaWQ6ICdiUnlIJywgbmFtZTogJ0dvb2QgZm9sZGVyJywgaXNEaXI6IHRydWUgfSxcXG4gICAgICAgIHsgaWQ6ICdiTWdSJywgbmFtZTogJ0dvb2QgZm9sZGVyICMyJywgaXNEaXI6IHRydWUgfSxcXG4gICAgXTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgey8qIEB0cy1pZ25vcmUgKi99XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyIGZpbGVzPXtiYWRGaWxlc30gZm9sZGVyQ2hhaW49e2JhZEZvbGRlckNoYWlufT5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiLFwibG9jYXRpb25zTWFwXCI6e1wiMi1maWxlLWJyb3dzZXItZXhhbXBsZXMtcGFzc2luZy1pbnZhbGlkLXByb3BzLS1pbnZhbGlkLXByb3BzLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjM1LFwibGluZVwiOjI4fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6NTJ9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzUsXCJsaW5lXCI6Mjh9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6NTJ9fX19LFwic3RvcnlTb3VyY2VcIjp7XCJzb3VyY2VcIjpcImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcbmltcG9ydCB7IEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcblxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QgfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG5cXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtSW52YWxpZC1wcm9wcy5tZCc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogJzIgRmlsZSBCcm93c2VyIGV4YW1wbGVzfFBhc3NpbmcgaW52YWxpZCBwcm9wcycsXFxuICAgIHBhcmFtZXRlcnM6IHtcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBJbnZhbGlkUHJvcHNFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBiYWRGaWxlcyA9IFtcXG4gICAgICAgIDEyMzEyLCAvLyBOb3QgYW4gb2JqZWN0IG9yIGBudWxsYCFcXG4gICAgICAgIHt9LCAvLyBNaXNzaW5nIGFsbCByZXF1aXJlZCBmaWVsZHMhXFxuICAgICAgICB7IGlkOiAnMnhmNCcgfSwgLy8gTWlzc2luZyBzb21lIHJlcXVpcmVkIGZpZWxkcyFcXG4gICAgICAgIHsgaWQ6ICcyeGY0JywgbmFtZTogJ1NvbWUgb3RoZXIgZmlsZSEnIH0sIC8vIER1cGxpY2F0ZSBJRCFcXG5cXG4gICAgICAgIHsgaWQ6ICd4YkFyJywgbmFtZTogJ0dvb2QgZmlsZS50eHQnIH0sIC8vIEdvb2QgZmlsZSFcXG4gICAgXTtcXG4gICAgY29uc3QgYmFkRm9sZGVyQ2hhaW4gPSBbXFxuICAgICAgICAxMjMxMiwgLy8gTm90IGFuIG9iamVjdCBvciBgbnVsbGAhXFxuICAgICAgICB7IGlkOiAnYlJ5SCcsIG5hbWU6ICdHb29kIGZvbGRlcicsIGlzRGlyOiB0cnVlIH0sXFxuICAgICAgICB7IGlkOiAnYk1nUicsIG5hbWU6ICdHb29kIGZvbGRlciAjMicsIGlzRGlyOiB0cnVlIH0sXFxuICAgIF07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIHsvKiBAdHMtaWdub3JlICovfVxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlciBmaWxlcz17YmFkRmlsZXN9IGZvbGRlckNoYWluPXtiYWRGb2xkZXJDaGFpbn0+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIixcImxvY2F0aW9uc01hcFwiOntcIjItZmlsZS1icm93c2VyLWV4YW1wbGVzLXBhc3NpbmctaW52YWxpZC1wcm9wcy0taW52YWxpZC1wcm9wcy1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozNSxcImxpbmVcIjoyMH0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjQ0fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjM1LFwibGluZVwiOjIwfSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjQ0fX19fSxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxuICAgIH0sXG59O1xuXG5leHBvcnQgY29uc3QgSW52YWxpZFByb3BzRXhhbXBsZSA9ICgpID0+IHtcbiAgICBjb25zdCBiYWRGaWxlcyA9IFtcbiAgICAgICAgMTIzMTIsIC8vIE5vdCBhbiBvYmplY3Qgb3IgYG51bGxgIVxuICAgICAgICB7fSwgLy8gTWlzc2luZyBhbGwgcmVxdWlyZWQgZmllbGRzIVxuICAgICAgICB7IGlkOiAnMnhmNCcgfSwgLy8gTWlzc2luZyBzb21lIHJlcXVpcmVkIGZpZWxkcyFcbiAgICAgICAgeyBpZDogJzJ4ZjQnLCBuYW1lOiAnU29tZSBvdGhlciBmaWxlIScgfSwgLy8gRHVwbGljYXRlIElEIVxuXG4gICAgICAgIHsgaWQ6ICd4YkFyJywgbmFtZTogJ0dvb2QgZmlsZS50eHQnIH0sIC8vIEdvb2QgZmlsZSFcbiAgICBdO1xuICAgIGNvbnN0IGJhZEZvbGRlckNoYWluID0gW1xuICAgICAgICAxMjMxMiwgLy8gTm90IGFuIG9iamVjdCBvciBgbnVsbGAhXG4gICAgICAgIHsgaWQ6ICdiUnlIJywgbmFtZTogJ0dvb2QgZm9sZGVyJywgaXNEaXI6IHRydWUgfSxcbiAgICAgICAgeyBpZDogJ2JNZ1InLCBuYW1lOiAnR29vZCBmb2xkZXIgIzInLCBpc0RpcjogdHJ1ZSB9LFxuICAgIF07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxuICAgICAgICAgICAgey8qIEB0cy1pZ25vcmUgKi99XG4gICAgICAgICAgICA8RmlsZUJyb3dzZXIgZmlsZXM9e2JhZEZpbGVzfSBmb2xkZXJDaGFpbj17YmFkRm9sZGVyQ2hhaW59PlxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBcIldoZXJlIHBvc3NpYmxlLCBDaG9ua3kgdHJpZXMgdG8gcmVwb3J0IGVycm9ycyB3aGVuIHRoZXkgYXJpc2UuIEZvciBleGFtcGxlLFxcbmBGaWxlQnJvd3NlcmAgY29tcG9uZW50IGV4cGVjdHMgaXRzIGBmaWxlc2AgcHJvcCB0byBiZSBhbiBhcnJheS4gSWYgeW91IHBhc3Mgc29tZVxcbmludmFsaWQgdmFsdWUgaW5zdGVhZCwgZS5nLiBgbnVsbGAsIHlvdSB3aWxsIHNlZSBhbiBlcnJvciBjb21wb25lbnQgYmVpbmcgcmVuZGVyZWRcXG5pbnN0ZWFkIG9mIHRoZSBmaWxlIGJyb3dzZXIuIFNhbWUgZXJyb3Igd2lsbCBhbHNvIGJlIGxvZ2dlZCB0byBjb25zb2xlLlxcblwiOyIsIlxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJcXG4gICAgICBcXG4gICAgICAvLyBAdHMtbm9jaGVja1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19TVE9SWV9fID0gXFxcImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXFxcblxcXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuXFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAyLVZpcnR1YWxpemF0aW9uLm1kJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICcyIEZpbGUgQnJvd3NlciBleGFtcGxlc3xWaXJ0dWFsaXphdGlvbiB3aXRoIDEwLDAwMCBmaWxlcycsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBWaXJ0dWFsaXphdGlvbkV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgZmlsZXMgPSBbXTtcXFxcblxcXFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwMDA7ICsraSkge1xcXFxuICAgICAgICBmaWxlcy5wdXNoKHtcXFxcbiAgICAgICAgICAgIGlkOiBgZmlsZS0ke2l9YCxcXFxcbiAgICAgICAgICAgIG5hbWU6IGkgPyBgQ2hyb21lICgke2l9KS5leGVgIDogJ0Nocm9tZS5leGUnLFxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwiMi1maWxlLWJyb3dzZXItZXhhbXBsZXMtdmlydHVhbGl6YXRpb24td2l0aC0xMC0wMDAtZmlsZXMtLXZpcnR1YWxpemF0aW9uLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozNyxcXFwibGluZVxcXCI6MjB9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo0Nn0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjM3LFxcXCJsaW5lXFxcIjoyMH0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo0Nn19fTtcXG4gICAgXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcblxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG5cXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDItVmlydHVhbGl6YXRpb24ubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcyIEZpbGUgQnJvd3NlciBleGFtcGxlc3xWaXJ0dWFsaXphdGlvbiB3aXRoIDEwLDAwMCBmaWxlcycsXFxuICAgIHBhcmFtZXRlcnM6IHtcXFwic3RvcnlTb3VyY2VcXFwiOntcXFwic291cmNlXFxcIjpcXFwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG5cXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDItVmlydHVhbGl6YXRpb24ubWQnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJzIgRmlsZSBCcm93c2VyIGV4YW1wbGVzfFZpcnR1YWxpemF0aW9uIHdpdGggMTAsMDAwIGZpbGVzJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IFZpcnR1YWxpemF0aW9uRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBmaWxlcyA9IFtdO1xcXFxuXFxcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDAwMDsgKytpKSB7XFxcXG4gICAgICAgIGZpbGVzLnB1c2goe1xcXFxuICAgICAgICAgICAgaWQ6IGBmaWxlLSR7aX1gLFxcXFxuICAgICAgICAgICAgbmFtZTogaSA/IGBDaHJvbWUgKCR7aX0pLmV4ZWAgOiAnQ2hyb21lLmV4ZScsXFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH1cXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcIjItZmlsZS1icm93c2VyLWV4YW1wbGVzLXZpcnR1YWxpemF0aW9uLXdpdGgtMTAtMDAwLWZpbGVzLS12aXJ0dWFsaXphdGlvbi1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzcsXFxcImxpbmVcXFwiOjIwfSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDZ9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozNyxcXFwibGluZVxcXCI6MjB9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDZ9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IFZpcnR1YWxpemF0aW9uRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgZmlsZXMgPSBbXTtcXG5cXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDAwMDsgKytpKSB7XFxuICAgICAgICBmaWxlcy5wdXNoKHtcXG4gICAgICAgICAgICBpZDogYGZpbGUtJHtpfWAsXFxuICAgICAgICAgICAgbmFtZTogaSA/IGBDaHJvbWUgKCR7aX0pLmV4ZWAgOiAnQ2hyb21lLmV4ZScsXFxuICAgICAgICB9KTtcXG4gICAgfVxcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCI7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCIyLWZpbGUtYnJvd3Nlci1leGFtcGxlcy12aXJ0dWFsaXphdGlvbi13aXRoLTEwLTAwMC1maWxlcy0tdmlydHVhbGl6YXRpb24tZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzcsXCJsaW5lXCI6Mjh9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo1NH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozNyxcImxpbmVcIjoyOH0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo1NH19fTtcbiAgICBcblxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSwgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxuXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcblxcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMi1WaXJ0dWFsaXphdGlvbi5tZCc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogJzIgRmlsZSBCcm93c2VyIGV4YW1wbGVzfFZpcnR1YWxpemF0aW9uIHdpdGggMTAsMDAwIGZpbGVzJyxcXG4gICAgcGFyYW1ldGVyczoge1xcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IFZpcnR1YWxpemF0aW9uRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgZmlsZXMgPSBbXTtcXG5cXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDAwMDsgKytpKSB7XFxuICAgICAgICBmaWxlcy5wdXNoKHtcXG4gICAgICAgICAgICBpZDogYGZpbGUtJHtpfWAsXFxuICAgICAgICAgICAgbmFtZTogaSA/IGBDaHJvbWUgKCR7aX0pLmV4ZWAgOiAnQ2hyb21lLmV4ZScsXFxuICAgICAgICB9KTtcXG4gICAgfVxcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCI7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCIyLWZpbGUtYnJvd3Nlci1leGFtcGxlcy12aXJ0dWFsaXphdGlvbi13aXRoLTEwLTAwMC1maWxlcy0tdmlydHVhbGl6YXRpb24tZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzcsXCJsaW5lXCI6MjB9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo0Nn0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozNyxcImxpbmVcIjoyMH0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo0Nn19fTtcbiAgICBcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcblxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xuXG4vLyBAdHMtaWdub3JlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAyLVZpcnR1YWxpemF0aW9uLm1kJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1kZWZhdWx0LWV4cG9ydFxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHRpdGxlOiAnMiBGaWxlIEJyb3dzZXIgZXhhbXBsZXN8VmlydHVhbGl6YXRpb24gd2l0aCAxMCwwMDAgZmlsZXMnLFxuICAgIHBhcmFtZXRlcnM6IHtcInN0b3J5U291cmNlXCI6e1wic291cmNlXCI6XCJcXG4gICAgICBcXG4gICAgICAvLyBAdHMtbm9jaGVja1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19TVE9SWV9fID0gXFxcImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXFxcblxcXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuXFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAyLVZpcnR1YWxpemF0aW9uLm1kJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICcyIEZpbGUgQnJvd3NlciBleGFtcGxlc3xWaXJ0dWFsaXphdGlvbiB3aXRoIDEwLDAwMCBmaWxlcycsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBWaXJ0dWFsaXphdGlvbkV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgZmlsZXMgPSBbXTtcXFxcblxcXFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwMDA7ICsraSkge1xcXFxuICAgICAgICBmaWxlcy5wdXNoKHtcXFxcbiAgICAgICAgICAgIGlkOiBgZmlsZS0ke2l9YCxcXFxcbiAgICAgICAgICAgIG5hbWU6IGkgPyBgQ2hyb21lICgke2l9KS5leGVgIDogJ0Nocm9tZS5leGUnLFxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwiMi1maWxlLWJyb3dzZXItZXhhbXBsZXMtdmlydHVhbGl6YXRpb24td2l0aC0xMC0wMDAtZmlsZXMtLXZpcnR1YWxpemF0aW9uLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozNyxcXFwibGluZVxcXCI6MjB9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo0Nn0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjM3LFxcXCJsaW5lXFxcIjoyMH0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo0Nn19fTtcXG4gICAgXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcblxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG5cXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDItVmlydHVhbGl6YXRpb24ubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcyIEZpbGUgQnJvd3NlciBleGFtcGxlc3xWaXJ0dWFsaXphdGlvbiB3aXRoIDEwLDAwMCBmaWxlcycsXFxuICAgIHBhcmFtZXRlcnM6IHtcXFwic3RvcnlTb3VyY2VcXFwiOntcXFwic291cmNlXFxcIjpcXFwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG5cXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDItVmlydHVhbGl6YXRpb24ubWQnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJzIgRmlsZSBCcm93c2VyIGV4YW1wbGVzfFZpcnR1YWxpemF0aW9uIHdpdGggMTAsMDAwIGZpbGVzJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IFZpcnR1YWxpemF0aW9uRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBmaWxlcyA9IFtdO1xcXFxuXFxcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDAwMDsgKytpKSB7XFxcXG4gICAgICAgIGZpbGVzLnB1c2goe1xcXFxuICAgICAgICAgICAgaWQ6IGBmaWxlLSR7aX1gLFxcXFxuICAgICAgICAgICAgbmFtZTogaSA/IGBDaHJvbWUgKCR7aX0pLmV4ZWAgOiAnQ2hyb21lLmV4ZScsXFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH1cXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcIjItZmlsZS1icm93c2VyLWV4YW1wbGVzLXZpcnR1YWxpemF0aW9uLXdpdGgtMTAtMDAwLWZpbGVzLS12aXJ0dWFsaXphdGlvbi1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzcsXFxcImxpbmVcXFwiOjIwfSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDZ9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozNyxcXFwibGluZVxcXCI6MjB9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDZ9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IFZpcnR1YWxpemF0aW9uRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgZmlsZXMgPSBbXTtcXG5cXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDAwMDsgKytpKSB7XFxuICAgICAgICBmaWxlcy5wdXNoKHtcXG4gICAgICAgICAgICBpZDogYGZpbGUtJHtpfWAsXFxuICAgICAgICAgICAgbmFtZTogaSA/IGBDaHJvbWUgKCR7aX0pLmV4ZWAgOiAnQ2hyb21lLmV4ZScsXFxuICAgICAgICB9KTtcXG4gICAgfVxcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCIsXCJsb2NhdGlvbnNNYXBcIjp7XCIyLWZpbGUtYnJvd3Nlci1leGFtcGxlcy12aXJ0dWFsaXphdGlvbi13aXRoLTEwLTAwMC1maWxlcy0tdmlydHVhbGl6YXRpb24tZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzcsXCJsaW5lXCI6Mjh9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo1NH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozNyxcImxpbmVcIjoyOH0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo1NH19fX0sXCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcblxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG5cXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDItVmlydHVhbGl6YXRpb24ubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcyIEZpbGUgQnJvd3NlciBleGFtcGxlc3xWaXJ0dWFsaXphdGlvbiB3aXRoIDEwLDAwMCBmaWxlcycsXFxuICAgIHBhcmFtZXRlcnM6IHtcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBWaXJ0dWFsaXphdGlvbkV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGZpbGVzID0gW107XFxuXFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwMDA7ICsraSkge1xcbiAgICAgICAgZmlsZXMucHVzaCh7XFxuICAgICAgICAgICAgaWQ6IGBmaWxlLSR7aX1gLFxcbiAgICAgICAgICAgIG5hbWU6IGkgPyBgQ2hyb21lICgke2l9KS5leGVgIDogJ0Nocm9tZS5leGUnLFxcbiAgICAgICAgfSk7XFxuICAgIH1cXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiLFwibG9jYXRpb25zTWFwXCI6e1wiMi1maWxlLWJyb3dzZXItZXhhbXBsZXMtdmlydHVhbGl6YXRpb24td2l0aC0xMC0wMDAtZmlsZXMtLXZpcnR1YWxpemF0aW9uLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjM3LFwibGluZVwiOjIwfSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6NDZ9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzcsXCJsaW5lXCI6MjB9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6NDZ9fX19LFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXG4gICAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBWaXJ0dWFsaXphdGlvbkV4YW1wbGUgPSAoKSA9PiB7XG4gICAgY29uc3QgZmlsZXMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwMDA7ICsraSkge1xuICAgICAgICBmaWxlcy5wdXNoKHtcbiAgICAgICAgICAgIGlkOiBgZmlsZS0ke2l9YCxcbiAgICAgICAgICAgIG5hbWU6IGkgPyBgQ2hyb21lICgke2l9KS5leGVgIDogJ0Nocm9tZS5leGUnLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IFwiVGhpcyBjb21wb25lbnQgdXNlcyBbYHJlYWN0LXZpcnR1YWxpemVkYF0oaHR0cHM6Ly9idmF1Z2huLmdpdGh1Yi5pby9yZWFjdC12aXJ0dWFsaXplZC8pLlxcblwiOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiV05NQVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcIjFJc1pcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCIrS1hPXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwidmJEd1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKShcInkyQWhcIik7IiwiXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBtZHggfSBmcm9tICdAbWR4LWpzL3JlYWN0J1xuXG4vKiBAanN4IG1keCAqL1xuXG5cbmNvbnN0IG1ha2VTaG9ydGNvZGUgPSBuYW1lID0+IGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpIHtcbiAgY29uc29sZS53YXJuKFwiQ29tcG9uZW50IFwiICsgbmFtZSArIFwiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGVcIilcbiAgcmV0dXJuIDxkaXYgey4uLnByb3BzfS8+XG59O1xuXG5jb25zdCBsYXlvdXRQcm9wcyA9IHtcbiAgXG59O1xuY29uc3QgTURYTGF5b3V0ID0gXCJ3cmFwcGVyXCJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoe1xuICBjb21wb25lbnRzLFxuICAuLi5wcm9wc1xufSkge1xuICByZXR1cm4gPE1EWExheW91dCB7Li4ubGF5b3V0UHJvcHN9IHsuLi5wcm9wc30gY29tcG9uZW50cz17Y29tcG9uZW50c30gbWR4VHlwZT1cIk1EWExheW91dFwiPlxuICAgIDxkaXYgc3R5bGU9e3tcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcidcbiAgICB9fT5cbiAgICA8aW1nIHNyYz1cIi4vQ2hvbmt5X2NsZWFyLnBuZ1wiIGFsdD1cIkNob25reSBsb2dvXCIgc3R5bGU9e3tcbiAgICAgICAgd2lkdGg6IDUwMFxuICAgICAgfX0gLz5cbiAgICA8YnIgLz5cbiAgICA8YSBocmVmPVwiaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY2hvbmt5XCIgdGFyZ2V0PVwiX2JsYW5rXCI+XG4gICAgICAgIDxpbWcgYWx0PVwiTlBNIHBhY2thZ2VcIiBzcmM9XCJodHRwczovL2ltZy5zaGllbGRzLmlvL25wbS92L2Nob25reS5zdmdcIiAvPlxuICAgIDwvYT5cbiAgICA8YSBocmVmPVwiaHR0cHM6Ly90bGRybGVnYWwuY29tL2xpY2Vuc2UvbWl0LWxpY2Vuc2VcIiBzdHlsZT17e1xuICAgICAgICBtYXJnaW5MZWZ0OiA1XG4gICAgICB9fSB0YXJnZXQ9XCJfYmxhbmtcIj5cbiAgICAgICAgPGltZyBhbHQ9XCJNSVQgbGljZW5zZVwiIHNyYz1cImh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vbnBtL2wvY2hvbmt5XCIgLz5cbiAgICA8L2E+XG4gICAgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2Nob25reVwiIHN0eWxlPXt7XG4gICAgICAgIG1hcmdpbkxlZnQ6IDVcbiAgICAgIH19IHRhcmdldD1cIl9ibGFua1wiPlxuICAgICAgICA8aW1nIGFsdD1cIk5QTSBkb3dubG9hZHNcIiBzcmM9XCJodHRwczovL2ltZy5zaGllbGRzLmlvL25wbS9kdC9jaG9ua3lcIiAvPlxuICAgIDwvYT5cbiAgICA8YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL1RpbWJvS1ovQ2hvbmt5XCIgc3R5bGU9e3tcbiAgICAgICAgbWFyZ2luTGVmdDogNVxuICAgICAgfX0gdGFyZ2V0PVwiX2JsYW5rXCI+XG4gICAgICAgIDxpbWcgYWx0PVwiR2l0SHViIHN0YXJzXCIgc3JjPVwiaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9naXRodWIvc3RhcnMvVGltYm9LWi9DaG9ua3lcIiAvPlxuICAgIDwvYT5cbiAgICA8YSBocmVmPVwiaHR0cHM6Ly9kaXNjb3JkLmdnL0hUNHR0ZFFcIiBzdHlsZT17e1xuICAgICAgICBtYXJnaW5MZWZ0OiA1XG4gICAgICB9fSB0YXJnZXQ9XCJfYmxhbmtcIj5cbiAgICAgICAgPGltZyBhbHQ9XCJDaGF0IG9uIERpc2NvcmRcIiBzcmM9XCJodHRwczovL2ltZy5zaGllbGRzLmlvL2Rpc2NvcmQvNjk2MDMzNjIxOTg2NzcwOTU3P2xhYmVsPUNoYXQlMjBvbiUyMERpc2NvcmRcIiAvPlxuICAgIDwvYT5cbiAgICA8YnIgLz5cbiAgICA8YnIgLz5cbiAgICA8YnIgLz5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwidW5zdGFibGUtd2FybmluZ1wiPlxuICAgICAgPGJsb2NrcXVvdGU+XG4gICAgICAgIDxwIHBhcmVudE5hbWU9XCJibG9ja3F1b3RlXCI+PHN0cm9uZyBwYXJlbnROYW1lPVwicFwiPntgU3RvcCByaWdodCB0aGVyZSFgfTwvc3Ryb25nPjwvcD5cbiAgICAgICAgPHAgcGFyZW50TmFtZT1cImJsb2NrcXVvdGVcIj57YFlvdSBhcmUgcmVhZGluZyB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgYW4gYH08c3Ryb25nIHBhcmVudE5hbWU9XCJwXCI+e2B1bnJlbGVhc2VkYH08L3N0cm9uZz57YCAxLnhcbnZlcnNpb24gb2YgQ2hvbmt5LiBUaGUgQVBJIGRlc2NyaWJlZCBoZXJlIGNhbiBjaGFuZ2UgLSBpdCB3aWxsIG5vdCBiZVxuZnJvemVuIHVudGlsIHRoZSBvZmZpY2lhbCAxLnggcmVsZWFzZS5gfTwvcD5cbiAgICAgICAgPHAgcGFyZW50TmFtZT1cImJsb2NrcXVvdGVcIj57YElmIHlvdSBuZWVkIHRvIHVzZSBDaG9ua3kgcmlnaHQgbm93LCB1c2UgdGhlIDAueCB2ZXJzaW9uIGZyb20gdGhlXG5gfTxhIHBhcmVudE5hbWU9XCJwXCIgey4uLntcbiAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHBzOi8vdGltYm9rei5naXRodWIuaW8vQ2hvbmt5L1wiLFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogXCJfYmxhbmtcIixcbiAgICAgICAgICAgIFwicmVsXCI6IFwibm9mb2xsb3cgbm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgICAgfX0+e2BEb2N1bWVudGF0aW9uIEluZGV4YH08L2E+e2AuYH08L3A+XG4gICAgICAgIDxwIHBhcmVudE5hbWU9XCJibG9ja3F1b3RlXCI+PHN0cm9uZyBwYXJlbnROYW1lPVwicFwiPntgV2FudCB0byByZXF1ZXN0IGEgZmVhdHVyZSBmb3IgMS54IG9yIHJlcG9ydCBhIDEueCBpc3N1ZT9gfTwvc3Ryb25nPntgIFBvc3QgaXQgaW5cbmB9PGEgcGFyZW50TmFtZT1cInBcIiB7Li4ue1xuICAgICAgICAgICAgXCJocmVmXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL1RpbWJvS1ovQ2hvbmt5L2lzc3Vlc1wiLFxuICAgICAgICAgICAgXCJ0YXJnZXRcIjogXCJfYmxhbmtcIixcbiAgICAgICAgICAgIFwicmVsXCI6IFwibm9mb2xsb3cgbm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgICAgfX0+e2BDaG9ua3kgR2l0SHViIGlzc3Vlc2B9PC9hPntgLmB9PC9wPlxuICAgICAgPC9ibG9ja3F1b3RlPlxuICAgIDwvZGl2PlxuICAgIDwvTURYTGF5b3V0Pjtcbn1cblxuO1xuTURYQ29udGVudC5pc01EWENvbXBvbmVudCA9IHRydWU7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxKSkoXCJKdFBmXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMSkpKFwiYXgwZlwiKTsiXSwic291cmNlUm9vdCI6IiJ9