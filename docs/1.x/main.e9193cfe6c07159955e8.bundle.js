/*! For license information please see main.e9193cfe6c07159955e8.bundle.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ERkP")},,function(module,exports){module.exports=storybook_docs_dll},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("1t7P")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ho0z")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("IAdD")},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"c",(function(){return FileBrowser_FileBrowser})),__webpack_require__.d(__webpack_exports__,"g",(function(){return FileToolbar})),__webpack_require__.d(__webpack_exports__,"f",(function(){return FileSearch_FileSearch})),__webpack_require__.d(__webpack_exports__,"e",(function(){return FileList})),__webpack_require__.d(__webpack_exports__,"a",(function(){return ChonkyActions})),__webpack_require__.d(__webpack_exports__,"d",(function(){return file_helper_FileHelper})),__webpack_require__.d(__webpack_exports__,"b",(function(){return ChonkyIconName}));__webpack_require__(4),__webpack_require__(13),__webpack_require__(24),__webpack_require__(14),__webpack_require__(29),__webpack_require__(16),__webpack_require__(20),__webpack_require__(18),__webpack_require__(23),__webpack_require__(5),__webpack_require__(6),__webpack_require__(12),__webpack_require__(25),__webpack_require__(19),__webpack_require__(21);var ChonkyIconName,SpecialAction,delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),dist=__webpack_require__(3);__webpack_require__(32),__webpack_require__(75);!function(ChonkyIconName){ChonkyIconName.loading="loading",ChonkyIconName.dropdown="dropdown",ChonkyIconName.dndDragging="dndDragging",ChonkyIconName.dndCanDrop="dndCanDrop",ChonkyIconName.dndCannotDrop="dndCannotDrop",ChonkyIconName.openFiles="openFiles",ChonkyIconName.openParentFolder="openParentFolder",ChonkyIconName.copy="copy",ChonkyIconName.search="search",ChonkyIconName.selectAllFiles="selectAllFiles",ChonkyIconName.clearSelection="clearSelection",ChonkyIconName.checkActive="checkActive",ChonkyIconName.checkInactive="checkInactive",ChonkyIconName.desc="desc",ChonkyIconName.asc="asc",ChonkyIconName.list="list",ChonkyIconName.folder="folder",ChonkyIconName.folderCreate="folderCreate",ChonkyIconName.folderOpen="folderOpen",ChonkyIconName.smallThumbnail="smallThumbnail",ChonkyIconName.largeThumbnail="largeThumbnail",ChonkyIconName.folderChainSeparator="folderChainSeparator",ChonkyIconName.download="download",ChonkyIconName.upload="upload",ChonkyIconName.trash="trash",ChonkyIconName.fallbackIcon="fallbackIcon",ChonkyIconName.symlink="symlink",ChonkyIconName.hidden="hidden",ChonkyIconName.file="file",ChonkyIconName.license="license",ChonkyIconName.code="code",ChonkyIconName.config="config",ChonkyIconName.model="model",ChonkyIconName.database="database",ChonkyIconName.text="text",ChonkyIconName.archive="archive",ChonkyIconName.image="image",ChonkyIconName.video="video",ChonkyIconName.info="info",ChonkyIconName.key="key",ChonkyIconName.lock="lock",ChonkyIconName.music="music",ChonkyIconName.terminal="terminal",ChonkyIconName.users="users",ChonkyIconName.linux="linux",ChonkyIconName.ubuntu="ubuntu",ChonkyIconName.windows="windows",ChonkyIconName.rust="rust",ChonkyIconName.python="python",ChonkyIconName.nodejs="nodejs",ChonkyIconName.php="php",ChonkyIconName.git="git",ChonkyIconName.adobe="adobe",ChonkyIconName.pdf="pdf",ChonkyIconName.excel="excel",ChonkyIconName.word="word",ChonkyIconName.flash="flash"}(ChonkyIconName||(ChonkyIconName={})),function(SpecialAction){SpecialAction.MouseClickFile="mouse_click_file",SpecialAction.KeyboardClickFile="keyboard_click_file",SpecialAction.OpenParentFolder="open_parent_folder",SpecialAction.OpenFolderChainFolder="open_folder_chain_folder",SpecialAction.ToggleSearchBar="toggle_search_bar",SpecialAction.SelectAllFiles="select_all_files",SpecialAction.ClearSelection="clear_selection",SpecialAction.DragNDropStart="drag_n_drop_start",SpecialAction.DragNDropEnd="drag_n_drop_end"}(SpecialAction||(SpecialAction={}));__webpack_require__(30);var dateformat=__webpack_require__(207),dateformat_default=__webpack_require__.n(dateformat),filesize_min=__webpack_require__(298),filesize_min_default=__webpack_require__.n(filesize_min);function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}var file_helper_FileHelper=function(){function FileHelper(){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,FileHelper)}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}(FileHelper,null,[{key:"isDirectory",value:function isDirectory(file){return!!file&&!0===file.isDir}},{key:"isHidden",value:function isHidden(file){return!!file&&!0===file.isHidden}},{key:"isSymlink",value:function isSymlink(file){return!!file&&!0===file.isSymlink}},{key:"isClickable",value:function isClickable(file){return!!file}},{key:"isOpenable",value:function isOpenable(file){return!!file&&!1!==file.openable}},{key:"isSelectable",value:function isSelectable(file){return!!file&&!1!==file.selectable}},{key:"isDraggable",value:function isDraggable(file){return!!file&&!1!==file.draggable}},{key:"isDroppable",value:function isDroppable(file){return!!file&&(!(!file.isDir||!1===file.droppable)||!0===file.droppable)}},{key:"getReadableFileSize",value:function getReadableFileSize(file){if(!file||"number"!=typeof file.size)return null;var size=file.size,sizeData=filesize_min_default()(size,{bits:!1,output:"object"});return"B"===sizeData.symbol?"".concat(Math.round(sizeData.value/10)/100," KB"):"KB"===sizeData.symbol?"".concat(Math.round(sizeData.value)," ").concat(sizeData.symbol):"".concat(sizeData.value," ").concat(sizeData.symbol)}},{key:"getReadableDate",value:function getReadableDate(file){if(!file||!(file.modDate instanceof Date||"string"==typeof file.modDate))return null;var date=file.modDate;return"string"==typeof date&&(date=new Date(date)),isNaN(date.getTime())?null:date.getFullYear()===(new Date).getFullYear()?dateformat_default()(date,"d mmmm, HH:MM"):dateformat_default()(date,"d mmm yyyy, HH:MM")}},{key:"getChildrenCount",value:function getChildrenCount(file){return file&&"number"==typeof file.childrenCount?file.childrenCount:null}}]),FileHelper}(),ChonkyActions={MoveFilesTo:{id:"move_files_to"},DuplicateFilesTo:{id:"duplicate_files_to"},OpenFiles:{id:"open_files",requiresSelection:!0,hotkeys:["enter"],fileFilter:file_helper_FileHelper.isOpenable,toolbarButton:{name:"Open selection",group:"Actions",dropdown:!0,icon:ChonkyIconName.openFiles}},OpenParentFolder:{id:"open_parent_folder",hotkeys:["backspace"],toolbarButton:{name:"Go up a directory",icon:ChonkyIconName.openParentFolder,iconOnly:!0},specialActionToDispatch:SpecialAction.OpenParentFolder},ToggleSearch:{id:"toggle_search",hotkeys:["ctrl+f"],toolbarButton:{name:"Search",icon:ChonkyIconName.search,iconOnly:!0},specialActionToDispatch:SpecialAction.ToggleSearchBar},SelectAllFiles:{id:"select_all_files",hotkeys:["ctrl+a"],toolbarButton:{name:"Select all files",group:"Actions",icon:ChonkyIconName.selectAllFiles,iconOnly:!0},specialActionToDispatch:SpecialAction.SelectAllFiles},ClearSelection:{id:"clear_selection",hotkeys:["escape"],toolbarButton:{name:"Clear selection",group:"Actions",icon:ChonkyIconName.clearSelection,iconOnly:!0},specialActionToDispatch:SpecialAction.ClearSelection},CopyFiles:{id:"copy_files",requiresSelection:!0,hotkeys:["ctrl+c"],toolbarButton:{name:"Copy selection",group:"Actions",dropdown:!0,icon:ChonkyIconName.copy}},CreateFolder:{id:"create_folder",toolbarButton:{name:"Create folder",tooltip:"Create a folder",icon:ChonkyIconName.folderCreate}},UploadFiles:{id:"upload_files",toolbarButton:{name:"Upload files",tooltip:"Upload files",icon:ChonkyIconName.upload}},DownloadFiles:{id:"download_files",requiresSelection:!0,toolbarButton:{name:"Download files",group:"Actions",tooltip:"Download files",dropdown:!0,icon:ChonkyIconName.download}},DeleteFiles:{id:"delete_files",requiresSelection:!0,hotkeys:["delete"],toolbarButton:{name:"Delete files",group:"Actions",tooltip:"Delete files",dropdown:!0,icon:ChonkyIconName.trash}}},DefaultFileActions=[ChonkyActions.MoveFilesTo,ChonkyActions.DuplicateFilesTo,ChonkyActions.OpenParentFolder,ChonkyActions.ToggleSearch,ChonkyActions.OpenFiles,ChonkyActions.SelectAllFiles,ChonkyActions.ClearSelection];__webpack_require__(35),__webpack_require__(22),__webpack_require__(39),__webpack_require__(26),__webpack_require__(163);function logger_defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}var Logger=function(){function Logger(){!function logger_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Logger)}return function logger_createClass(Constructor,protoProps,staticProps){return protoProps&&logger_defineProperties(Constructor.prototype,protoProps),staticProps&&logger_defineProperties(Constructor,staticProps),Constructor}(Logger,null,[{key:"error",value:function error(){for(var _console,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];(_console=console).error.apply(_console,["[Chonky runtime error]"].concat(args))}},{key:"warn",value:function warn(){for(var _console2,_len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++)args[_key2]=arguments[_key2];(_console2=console).warn.apply(_console2,["[Chonky runtime warning]"].concat(args))}},{key:"debug",value:function debug(){for(var _console3,_len3=arguments.length,args=new Array(_len3),_key3=0;_key3<_len3;_key3++)args[_key3]=arguments[_key3];(_console3=console).debug.apply(_console3,["[Chonky runtime debug]"].concat(args))}},{key:"formatBullets",value:function formatBullets(bullets){return"\n- ".concat(bullets.join("\n- "))}}]),Logger}();function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(iter))return Array.from(iter)}(arr)||_unsupportedIterableToArray(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}var isPlainObject=function isPlainObject(value){return"[object Object]"===Object.prototype.toString.call(value)},cleanupFileArray=function cleanupFileArray(fileArray,allowNull){var cleanFileArray,warningMessage=null,warningBullets=[];if(Array.isArray(fileArray)){for(var indicesToBeRemoved=new Set,seenIds={},duplicateIdSet=new Set,missingIdIndices=[],missingNameIndices=[],invalidTypeIndices=[],i=0;i<fileArray.length;++i){var file=fileArray[i];isPlainObject(file)?(file.id&&seenIds[file.id]?(duplicateIdSet.add(file.id),indicesToBeRemoved.add(i)):seenIds[file.id]=!0,file.name||(missingNameIndices.push(i),indicesToBeRemoved.add(i)),file.id||(missingIdIndices.push(i),indicesToBeRemoved.add(i))):null!==file&&(invalidTypeIndices.push(i),indicesToBeRemoved.add(i))}duplicateIdSet.size>0&&warningBullets.push("Some files have duplicate IDs. These IDs appeared multiple "+"times: ".concat(Array.from(duplicateIdSet))),missingIdIndices.length>0&&warningBullets.push('Some files are missing the "id" field. '+"Relevant file indices: ".concat(missingIdIndices.join(", "))),missingNameIndices.length>0&&warningBullets.push('Some files are missing the "name" field. '+"Relevant file indices: ".concat(missingNameIndices.join(", "))),invalidTypeIndices.length>0&&warningBullets.push('Some files have invalid type (they are neither a plain object nor "null"). '+"Relevant file indices: ".concat(invalidTypeIndices.join(", "))),indicesToBeRemoved.size>0?(cleanFileArray=fileArray.filter((function(value,index){return!indicesToBeRemoved.has(index)})),warningMessage="".concat(indicesToBeRemoved.size," offending ")+"file".concat(1===indicesToBeRemoved.size?" was":"s were"," ")+" removed from the array."):cleanFileArray=fileArray}else cleanFileArray=allowNull?null:[],allowNull&&null===fileArray||(warningMessage="Provided value was replaced "+"with ".concat(allowNull?"null":"empty array","."),warningBullets.push('Expected "files" to be an array, got type '+'"'.concat(_typeof(fileArray),'" instead (value: ').concat(fileArray,").")));return{cleanFileArray:cleanFileArray,warningMessage:warningMessage,warningBullets:warningBullets}},validation_useFileActionsValidation=function useFileActionsValidation(fileActions,defaultFileActions,includeDefaultFileActions){var extendedFileActions=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){if(!includeDefaultFileActions)return fileActions;var seenFileActionIds={};fileActions.map((function(action){action&&action.id&&(seenFileActionIds[action.id]=!0)}));var _step,extendedFileActions=_toConsumableArray(fileActions),_iterator=function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}(defaultFileActions);try{for(_iterator.s();!(_step=_iterator.n()).done;){var action=_step.value;seenFileActionIds[action.id]||extendedFileActions.push(action)}}catch(err){_iterator.e(err)}finally{_iterator.f()}return extendedFileActions}),[fileActions,defaultFileActions,includeDefaultFileActions]),_useMemo3=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var errorMessages=[],cleanFilesResult=cleanupFileActions(extendedFileActions);if(cleanFilesResult.warningMessage){var errorMessage='The "fileActions" prop passed to FileBrowser did not pass '+"validation. ".concat(cleanFilesResult.warningMessage," ")+"The following errors were encountered:";Logger.error(errorMessage,Logger.formatBullets(cleanFilesResult.warningBullets)),errorMessages.push({message:errorMessage,bullets:cleanFilesResult.warningBullets})}return{cleanFileActions:cleanFilesResult.cleanFileActions,errorMessages:errorMessages}}),[extendedFileActions]);return{cleanFileActions:_useMemo3.cleanFileActions,errorMessages:_useMemo3.errorMessages}},cleanupFileActions=function cleanupFileActions(fileActions){var cleanFileActions,warningMessage=null,warningBullets=[];if(Array.isArray(fileActions)){for(var indicesToBeRemoved=new Set,seenIds={},duplicateIdSet=new Set,missingIdIndices=[],invalidTypeIndices=[],i=0;i<fileActions.length;++i){var fileAction=fileActions[i];isPlainObject(fileAction)?(fileAction.id&&seenIds[fileAction.id]?(duplicateIdSet.add(fileAction.id),indicesToBeRemoved.add(i)):seenIds[fileAction.id]=!0,fileAction.id||(missingIdIndices.push(i),indicesToBeRemoved.add(i))):(invalidTypeIndices.push(i),indicesToBeRemoved.add(i))}duplicateIdSet.size>0&&warningBullets.push("Some file actions have duplicate IDs. These IDs appeared multiple "+"times: ".concat(Array.from(duplicateIdSet))),missingIdIndices.length>0&&warningBullets.push('Some file actions are missing the "id" field. '+"Relevant file indices: ".concat(missingIdIndices.join(", "))),invalidTypeIndices.length>0&&warningBullets.push("Some files actions have invalid type (they are not plain object). "+"Relevant file indices: ".concat(invalidTypeIndices.join(", "))),indicesToBeRemoved.size>0?(cleanFileActions=fileActions.filter((function(value,index){return!indicesToBeRemoved.has(index)})),warningMessage="".concat(indicesToBeRemoved.size," offending ")+"file action".concat(1===indicesToBeRemoved.size?" was":"s were"," ")+" removed from the array."):cleanFileActions=fileActions}else cleanFileActions=[],warningMessage="Provided value was replaced with an empty array.",warningBullets.push('Expected "fileActions" to be an array, got type '+'"'.concat(_typeof(fileActions),'" instead (value: ').concat(fileActions,")."));return{cleanFileActions:cleanFileActions,warningMessage:warningMessage,warningBullets:warningBullets}},enableDragAndDropState=Object(dist.atom)({key:"enableDragAndDropState",default:!1}),constants_NOOP_FUNCTION=function NOOP_FUNCTION(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];Logger.warn('The "NOOP_FUNCTION" from the constants module was called. This can indicate a bug in one of the components. Supplied args:',args)};__webpack_require__(55),__webpack_require__(125),__webpack_require__(108),__webpack_require__(10),__webpack_require__(126),__webpack_require__(127);function selection_typeof(obj){return(selection_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function _createSuperInternal(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==selection_typeof(call)&&"function"!=typeof call?function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}function selection_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function selection_defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function selection_createClass(Constructor,protoProps,staticProps){return protoProps&&selection_defineProperties(Constructor.prototype,protoProps),staticProps&&selection_defineProperties(Constructor,staticProps),Constructor}function selection_createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=selection_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e2){throw _e2},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e3){didErr=!0,err=_e3},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||selection_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function selection_unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return selection_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?selection_arrayLikeToArray(o,minLen):void 0}}function selection_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var selection_useSelectionModifiers=function useSelectionModifiers(disableSelection,setSelection){var selectFiles=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(fileIds){var reset=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];disableSelection||setSelection((function(selection){var _step,newSelection=reset?{}:Object.assign({},selection),_iterator=selection_createForOfIteratorHelper(fileIds);try{for(_iterator.s();!(_step=_iterator.n()).done;){newSelection[_step.value]=!0}}catch(err){_iterator.e(err)}finally{_iterator.f()}return newSelection}))}),[disableSelection,setSelection]),toggleSelection=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(fileId){var exclusive=arguments.length>1&&void 0!==arguments[1]&&arguments[1];disableSelection||setSelection((function(selection){var newSelection=exclusive?{}:Object.assign({},selection);return!0===selection[fileId]?delete newSelection[fileId]:newSelection[fileId]=!0,newSelection}))}),[disableSelection,setSelection]),clearSelection=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(){disableSelection||setSelection((function(oldSelection){return 0===Object.keys(oldSelection).length?oldSelection:{}}))}),[disableSelection,setSelection]);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return{selectFiles:selectFiles,toggleSelection:toggleSelection,clearSelection:clearSelection}}),[selectFiles,toggleSelection,clearSelection])},selection_SelectionHelper=function(){function SelectionHelper(){selection_classCallCheck(this,SelectionHelper)}return selection_createClass(SelectionHelper,null,[{key:"getSelectedFiles",value:function getSelectedFiles(files,selection){for(var selectedFiles=files.filter((function(file){return file_helper_FileHelper.isSelectable(file)&&!0===selection[file.id]})),_len=arguments.length,filters=new Array(_len>2?_len-2:0),_key=2;_key<_len;_key++)filters[_key-2]=arguments[_key];return filters.reduce((function(prevFiles,filter){return filter?prevFiles.filter(filter):prevFiles}),selectedFiles)}},{key:"getSelectionSize",value:function getSelectionSize(files,selection){for(var _len2=arguments.length,filters=new Array(_len2>2?_len2-2:0),_key2=2;_key2<_len2;_key2++)filters[_key2-2]=arguments[_key2];return SelectionHelper.getSelectedFiles.apply(SelectionHelper,[files,selection].concat(filters)).length}},{key:"isSelected",value:function isSelected(selection,file){return file_helper_FileHelper.isSelectable(file)&&!0===selection[file.id]}}]),SelectionHelper}(),UpdateableSelectionUtil=function(_SelectionUtil){!function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(UpdateableSelectionUtil,_SelectionUtil);var _super=_createSuper(UpdateableSelectionUtil);function UpdateableSelectionUtil(){return selection_classCallCheck(this,UpdateableSelectionUtil),_super.apply(this,arguments)}return selection_createClass(UpdateableSelectionUtil,[{key:"update",value:function update(){this.protectedUpdate.apply(this,arguments)}}]),UpdateableSelectionUtil}(function(){function SelectionUtil(){var files=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],selection=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};selection_classCallCheck(this,SelectionUtil),this.files=void 0,this.selection=void 0,this.protectedUpdate(files,selection)}return selection_createClass(SelectionUtil,[{key:"protectedUpdate",value:function protectedUpdate(files,selection){this.files=files,this.selection=selection}},{key:"getSelection",value:function getSelection(){return this.selection}},{key:"getSelectedFiles",value:function getSelectedFiles(){for(var _len3=arguments.length,filters=new Array(_len3),_key3=0;_key3<_len3;_key3++)filters[_key3]=arguments[_key3];return selection_SelectionHelper.getSelectedFiles.apply(selection_SelectionHelper,[this.files,this.selection].concat(filters))}},{key:"getSelectionSize",value:function getSelectionSize(){for(var _len4=arguments.length,filters=new Array(_len4),_key4=0;_key4<_len4;_key4++)filters[_key4]=arguments[_key4];return selection_SelectionHelper.getSelectionSize.apply(selection_SelectionHelper,[this.files,this.selection].concat(filters))}},{key:"isSelected",value:function isSelected(file){return selection_SelectionHelper.isSelected(this.selection,file)}}]),SelectionUtil}());function files_recoil_createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=function files_recoil_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return files_recoil_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return files_recoil_arrayLikeToArray(o,minLen)}(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function files_recoil_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var filesState=Object(dist.atom)({key:"filesState",default:[]}),folderChainState=Object(dist.atom)({key:"folderChainState",default:null}),parentFolderState=Object(dist.atom)({key:"parentFolderState",default:null}),fileMapState=Object(dist.selector)({key:"fileMapState",get:function get(_ref){var _step,fileMap={},_iterator=files_recoil_createForOfIteratorHelper((0,_ref.get)(filesState));try{for(_iterator.s();!(_step=_iterator.n()).done;){var file=_step.value;file&&(fileMap[file.id]=file)}}catch(err){_iterator.e(err)}finally{_iterator.f()}return fileMap}}),fileDataState=Object(dist.selectorFamily)({key:"fileDataState",get:function get(fileId){return function(_ref2){var get=_ref2.get;if(!fileId)return null;var file=get(fileMapState)[fileId];return null!=file?file:null}}}),selectionState=Object(dist.atom)({key:"selectionState",default:{}}),selectionModifiersState=Object(dist.atom)({key:"selectionModifiersState",default:{selectFiles:constants_NOOP_FUNCTION,toggleSelection:constants_NOOP_FUNCTION,clearSelection:constants_NOOP_FUNCTION}}),selectedFilesState=Object(dist.selector)({key:"selectedFilesState",get:function get(_ref){var _get=_ref.get,files=_get(filesState),selection=_get(selectionState);return selection_SelectionHelper.getSelectedFiles(files,selection)}}),selectionSizeState=Object(dist.selector)({key:"selectionSizeState",get:function get(_ref2){var selection=(0,_ref2.get)(selectionState),selectionSize=0;for(var fileId in selection)selection.hasOwnProperty(fileId)&&!0===selection[fileId]&&selectionSize++;return selectionSize}}),fileSelectedState=Object(dist.selectorFamily)({key:"fileSelectedState",get:function get(fileId){return function(_ref3){var get=_ref3.get;return!!fileId&&!0===get(selectionState)[fileId]}}}),fileActionsState=Object(dist.atom)({key:"fileActionsState",default:[]}),fileActionMapState=Object(dist.atom)({key:"fileActionMapState",default:{}}),dispatchFileActionState=Object(dist.atom)({key:"dispatchFileActionState",default:constants_NOOP_FUNCTION}),requestFileActionState=Object(dist.atom)({key:"requestFileActionState",default:constants_NOOP_FUNCTION}),doubleClickDelayState=Object(dist.atom)({key:"doubleClickDelayState",default:300}),fileActionDataState=Object(dist.selectorFamily)({key:"fileActionDataState",get:function get(fileActionId){return function(_ref){var get=_ref.get;if(!fileActionId)return null;var fileAction=get(fileActionMapState)[fileActionId];return null!=fileAction?fileAction:null}}}),fileActionSelectedFilesState=Object(dist.selectorFamily)({key:"fileActionSelectedFilesState",get:function get(fileActionId){return function(_ref2){var get=_ref2.get;if(!fileActionId)return[];var fileAction=get(fileActionMapState)[fileActionId];if(!fileAction)return[];var selectedFiles=get(selectedFilesState);return fileAction.fileFilter?selectedFiles.filter(fileAction.fileFilter):selectedFiles}}}),fileActionSelectedFilesCountState=Object(dist.selectorFamily)({key:"fileActionSelectedFilesCountState",get:function get(fileActionId){return function(_ref3){return(0,_ref3.get)(fileActionSelectedFilesState(fileActionId)).length}}}),classnames=__webpack_require__(53),classnames_default=__webpack_require__.n(classnames),es=__webpack_require__(155),ClickableWrapper_hooks_useKeyDownHandler=(__webpack_require__(111),function useKeyDownHandler(onKeyboardClick){return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){if(onKeyboardClick){var keyboardClickEvent={enterKey:"Enter"===event.nativeEvent.code,spaceKey:"Space"===event.nativeEvent.code,altKey:event.altKey,ctrlKey:event.ctrlKey,shiftKey:event.shiftKey};(keyboardClickEvent.spaceKey||keyboardClickEvent.enterKey)&&(event.preventDefault(),event.stopPropagation(),onKeyboardClick(keyboardClickEvent))}}),[onKeyboardClick])});try{ClickableWrapper_hooks_useKeyDownHandler.displayName="useKeyDownHandler",ClickableWrapper_hooks_useKeyDownHandler.__docgenInfo={description:"",displayName:"useKeyDownHandler",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/ClickableWrapper-hooks.tsx#useKeyDownHandler"]={docgenInfo:ClickableWrapper_hooks_useKeyDownHandler.__docgenInfo,name:"useKeyDownHandler",path:"src/components/internal/ClickableWrapper-hooks.tsx#useKeyDownHandler"})}catch(__react_docgen_typescript_loader_error){}var ClickableWrapper_ClickableWrapper=function ClickableWrapper(props){var children=props.children,WrapperTag=props.wrapperTag,passthroughProps=props.passthroughProps,onSingleClick=props.onSingleClick,onDoubleClick=props.onDoubleClick,onKeyboardClick=props.onKeyboardClick,handleClick=function useClickHandler(onSingleClick,onDoubleClick){var doubleClickDelay=Object(dist.useRecoilValue)(doubleClickDelayState),counter=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useRef)({clickCount:0,clickTimeout:null});return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){var mouseClickEvent={altKey:event.altKey,ctrlKey:event.ctrlKey,shiftKey:event.shiftKey};counter.current.clickCount++,1===counter.current.clickCount?(onSingleClick&&(event.preventDefault(),onSingleClick(mouseClickEvent)),counter.current.clickCount=1,counter.current.clickTimeout=setTimeout((function(){return counter.current.clickCount=0}),doubleClickDelay)):2===counter.current.clickCount&&(onDoubleClick&&(event.preventDefault(),onDoubleClick(mouseClickEvent)),"number"==typeof counter.current.clickTimeout&&(clearTimeout(counter.current.clickTimeout),counter.current.clickTimeout=null,counter.current.clickCount=0))}),[doubleClickDelay,onSingleClick,onDoubleClick,counter])}(onSingleClick,onDoubleClick),handleKeyDown=ClickableWrapper_hooks_useKeyDownHandler(onKeyboardClick),compProps={};(onSingleClick||onDoubleClick||onKeyboardClick)&&(compProps.onClick=handleClick,compProps.onKeyDown=handleKeyDown,compProps.tabIndex=0);var mergedProps=Object.assign({},compProps,passthroughProps);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(WrapperTag,mergedProps,children)};ClickableWrapper_ClickableWrapper.displayName="ClickableWrapper";try{ClickableWrapper_ClickableWrapper.displayName="ClickableWrapper",ClickableWrapper_ClickableWrapper.__docgenInfo={description:"",displayName:"ClickableWrapper",props:{wrapperTag:{defaultValue:null,description:"",name:"wrapperTag",required:!0,type:{name:"any"}},passthroughProps:{defaultValue:null,description:"",name:"passthroughProps",required:!1,type:{name:"any"}},onSingleClick:{defaultValue:null,description:"",name:"onSingleClick",required:!1,type:{name:"MouseClickEventHandler | undefined"}},onDoubleClick:{defaultValue:null,description:"",name:"onDoubleClick",required:!1,type:{name:"MouseClickEventHandler | undefined"}},onKeyboardClick:{defaultValue:null,description:"",name:"onKeyboardClick",required:!1,type:{name:"KeyboardClickEventHandler | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/ClickableWrapper.tsx#ClickableWrapper"]={docgenInfo:ClickableWrapper_ClickableWrapper.__docgenInfo,name:"ClickableWrapper",path:"src/components/internal/ClickableWrapper.tsx#ClickableWrapper"})}catch(__react_docgen_typescript_loader_error){}var exact_trie=__webpack_require__(303),exact_trie_default=__webpack_require__.n(exact_trie),memoizee=__webpack_require__(304);function file_icon_helper_slicedToArray(arr,i){return function file_icon_helper_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function file_icon_helper_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function file_icon_helper_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return file_icon_helper_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return file_icon_helper_arrayLikeToArray(o,minLen)}(arr,i)||function file_icon_helper_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function file_icon_helper_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var _IconMap,getIconTrie=__webpack_require__.n(memoizee)()((function(){for(var colourIndex=0,IconsToExtensions=[[ChonkyIconName.license,["license"]],[ChonkyIconName.config,["sfk","ini","yml","toml","iml"]],[ChonkyIconName.model,["3ds","obj","ply","fbx"]],[ChonkyIconName.database,["csv","json","sql","sqlite","sqlite3","npy","npz","rec","idx","hdf5"]],[ChonkyIconName.text,["txt","md"]],[ChonkyIconName.archive,["zip","rar","tar","tar.gz"]],[ChonkyIconName.image,ImageExtensions],[ChonkyIconName.video,VideoExtensions],[ChonkyIconName.code,["html","php","css","sass","scss","less","cpp","h","hpp","c","xml"]],[ChonkyIconName.info,["bib","readme","nfo"]],[ChonkyIconName.key,["pem","pub"]],[ChonkyIconName.lock,["lock","lock.json","shrinkwrap.json"]],[ChonkyIconName.music,AudioExtensions],[ChonkyIconName.terminal,["run","sh"]],[ChonkyIconName.trash,[".Trashes"]],[ChonkyIconName.users,["authors","contributors"]],[ChonkyIconName.linux,["AppImage"]],[ChonkyIconName.ubuntu,["deb"]],[ChonkyIconName.windows,["exe"]],[ChonkyIconName.rust,["rs","rlib"]],[ChonkyIconName.python,["py","ipynb"]],[ChonkyIconName.nodejs,["js","jsx","ts","tsx","d.ts"]],[ChonkyIconName.php,["php"]],[ChonkyIconName.git,[".gitignore"]],[ChonkyIconName.adobe,["psd"]],[ChonkyIconName.pdf,["pdf"]],[ChonkyIconName.excel,["xls","xlsx"]],[ChonkyIconName.word,["doc","docx","odt"]],[ChonkyIconName.flash,["swf"]]],exactTrie=new exact_trie_default.a({ignoreCase:!0}),_i=0,_IconsToExtensions=IconsToExtensions;_i<_IconsToExtensions.length;_i++)for(var _pair=file_icon_helper_slicedToArray(_IconsToExtensions[_i],2),icon=_pair[0],extensions=_pair[1],i=0;i<extensions.length;++i){var iconData={icon:icon,colorCode:(colourIndex+=5)%(ColorsLight.length-1)+1};exactTrie.put(extensions[i],iconData,!0)}return exactTrie})),VideoExtensions=["3g2","3gp","3gpp","asf","asx","avi","dvb","f4v","fli","flv","fvt","h261","h263","h264","jpgm","jpgv","jpm","m1v","m2v","m4u","m4v","mj2","mjp2","mk3d","mks","mkv","mng","mov","movie","mp4","mp4v","mpe","mpeg","mpg","mpg4","mxu","ogv","pyv","qt","smv","ts","uvh","uvm","uvp","uvs","uvu","uvv","uvvh","uvvm","uvvp","uvvs","uvvu","uvvv","viv","vob","webm","wm","wmv","wmx","wvx"],ImageExtensions=["3ds","apng","azv","bmp","bmp","btif","cgm","cmx","djv","djvu","drle","dwg","dxf","emf","exr","fbs","fh","fh4","fh5","fh7","fhc","fits","fpx","fst","g3","gif","heic","heics","heif","heifs","ico","ico","ief","jls","jng","jp2","jpe","jpeg","jpf","jpg","jpg2","jpm","jpx","jxr","ktx","mdi","mmr","npx","pbm","pct","pcx","pcx","pgm","pic","png","pnm","ppm","psd","pti","ras","rgb","rlc","sgi","sid","sub","svg","svgz","t38","tap","tfx","tga","tif","tiff","uvg","uvi","uvvg","uvvi","vtf","wbmp","wdp","webp","wmf","xbm","xif","xpm","xwd"],AudioExtensions=["3gpp","aac","adp","aif","aifc","aiff","au","caf","dra","dts","dtshd","ecelp4800","ecelp7470","ecelp9600","eol","flac","kar","lvp","m2a","m3a","m3u","m4a","m4a","mid","midi","mka","mp2","mp2a","mp3","mp3","mp4a","mpga","oga","ogg","pya","ra","ra","ram","rip","rmi","rmp","s3m","sil","snd","spx","uva","uvva","wav","wav","wav","wax","weba","wma","xm"],ColorsLight=["#bbbbbb","#d65c5c","#d6665c","#d6705c","#d67a5c","#d6855c","#d68f5c","#d6995c","#d6a35c","#d6ad5c","#d6b85c","#d6c25c","#d6cc5c","#d6d65c","#ccd65c","#c2d65c","#b8d65c","#add65c","#a3d65c","#99d65c","#8fd65c","#85d65c","#7ad65c","#70d65c","#66d65c","#5cd65c","#5cd666","#5cd670","#5cd67a","#5cd685","#5cd68f","#5cd699","#5cd6a3","#5cd6ad","#5cd6b8","#5cd6c2","#5cd6cc","#5cd6d6","#5cccd6","#5cc2d6","#5cb8d6","#5cadd6","#5ca3d6","#5c99d6","#5c8fd6","#5c85d6","#5c7ad6","#5c70d6","#5c66d6","#5c5cd6","#665cd6","#705cd6","#7a5cd6","#855cd6","#8f5cd6","#995cd6","#a35cd6","#ad5cd6","#b85cd6","#c25cd6","#cc5cd6","#d65cd6","#d65ccc","#d65cc2","#d65cb8","#d65cad","#d65ca3","#d65c99","#d65c8f","#d65c85","#d65c7a","#d65c70","#d65c66"],ColorsDark=["#777","#8f3d3d","#8f443d","#8f4b3d","#8f523d","#8f583d","#8f5f3d","#8f663d","#8f6d3d","#8f743d","#8f7a3d","#8f813d","#8f883d","#8f8f3d","#888f3d","#818f3d","#7a8f3d","#748f3d","#6d8f3d","#668f3d","#5f8f3d","#588f3d","#528f3d","#4b8f3d","#448f3d","#3d8f3d","#3d8f44","#3d8f4b","#3d8f52","#3d8f58","#3d8f5f","#3d8f66","#3d8f6d","#3d8f74","#3d8f7a","#3d8f81","#3d8f88","#3d8f8f","#3d888f","#3d818f","#3d7a8f","#3d748f","#3d6d8f","#3d668f","#3d5f8f","#3d588f","#3d528f","#3d4b8f","#3d448f","#3d3d8f","#443d8f","#4b3d8f","#523d8f","#583d8f","#5f3d8f","#663d8f","#6d3d8f","#743d8f","#7a3d8f","#813d8f","#883d8f","#8f3d8f","#8f3d88","#8f3d81","#8f3d7a","#8f3d74","#8f3d6d","#8f3d66","#8f3d5f","#8f3d58","#8f3d52","#8f3d4b","#8f3d44"],faAdobe=__webpack_require__(356),faGitAlt=__webpack_require__(355),faLinux=__webpack_require__(348),faNodeJs=__webpack_require__(353),faPhp=__webpack_require__(354),faPython=__webpack_require__(352),faRust=__webpack_require__(351),faUbuntu=__webpack_require__(349),faWindows=__webpack_require__(350),faArrowDown=__webpack_require__(209),faArrowUp=__webpack_require__(318),faBalanceScale=__webpack_require__(333),faBoxOpen=__webpack_require__(310),faCheckCircle=__webpack_require__(316),faChevronDown=__webpack_require__(307),faChevronRight=__webpack_require__(325),faCircle=__webpack_require__(317),faCircleNotch=__webpack_require__(306),faCogs=__webpack_require__(335),faCopy=__webpack_require__(312),faCubes=__webpack_require__(336),faDatabase=__webpack_require__(337),faDownload=__webpack_require__(326),faEraser=__webpack_require__(315),faExclamationTriangle=__webpack_require__(329),faExternalLinkAlt=__webpack_require__(330),faEyeSlash=__webpack_require__(331),faFile=__webpack_require__(332),faFileAlt=__webpack_require__(338),faFileArchive=__webpack_require__(339),faFileCode=__webpack_require__(334),faFileExcel=__webpack_require__(358),faFileImage=__webpack_require__(340),faFilePdf=__webpack_require__(357),faFileWord=__webpack_require__(359),faFilm=__webpack_require__(341),faFistRaised=__webpack_require__(308),faFolder=__webpack_require__(320),faFolderOpen=__webpack_require__(322),faFolderPlus=__webpack_require__(321),faInfoCircle=__webpack_require__(342),faKey=__webpack_require__(343),faLevelUpAlt=__webpack_require__(311),faList=__webpack_require__(319),faLock=__webpack_require__(344),faMusic=__webpack_require__(345),faObjectGroup=__webpack_require__(314),faRunning=__webpack_require__(360),faSearch=__webpack_require__(313),faTerminal=__webpack_require__(346),faTh=__webpack_require__(323),faThLarge=__webpack_require__(324),faTimes=__webpack_require__(309),faTrash=__webpack_require__(328),faUpload=__webpack_require__(327),faUsers=__webpack_require__(347),index_es=__webpack_require__(305);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var IconMap=(_defineProperty(_IconMap={},ChonkyIconName.loading,faCircleNotch.faCircleNotch),_defineProperty(_IconMap,ChonkyIconName.dropdown,faChevronDown.faChevronDown),_defineProperty(_IconMap,ChonkyIconName.dndDragging,faFistRaised.faFistRaised),_defineProperty(_IconMap,ChonkyIconName.dndCanDrop,faArrowDown.faArrowDown),_defineProperty(_IconMap,ChonkyIconName.dndCannotDrop,faTimes.faTimes),_defineProperty(_IconMap,ChonkyIconName.openFiles,faBoxOpen.faBoxOpen),_defineProperty(_IconMap,ChonkyIconName.openParentFolder,faLevelUpAlt.faLevelUpAlt),_defineProperty(_IconMap,ChonkyIconName.copy,faCopy.faCopy),_defineProperty(_IconMap,ChonkyIconName.search,faSearch.faSearch),_defineProperty(_IconMap,ChonkyIconName.selectAllFiles,faObjectGroup.faObjectGroup),_defineProperty(_IconMap,ChonkyIconName.clearSelection,faEraser.faEraser),_defineProperty(_IconMap,ChonkyIconName.checkActive,faCheckCircle.faCheckCircle),_defineProperty(_IconMap,ChonkyIconName.checkInactive,faCircle.faCircle),_defineProperty(_IconMap,ChonkyIconName.desc,faArrowDown.faArrowDown),_defineProperty(_IconMap,ChonkyIconName.asc,faArrowUp.faArrowUp),_defineProperty(_IconMap,ChonkyIconName.list,faList.faList),_defineProperty(_IconMap,ChonkyIconName.folder,faFolder.faFolder),_defineProperty(_IconMap,ChonkyIconName.folderCreate,faFolderPlus.faFolderPlus),_defineProperty(_IconMap,ChonkyIconName.folderOpen,faFolderOpen.faFolderOpen),_defineProperty(_IconMap,ChonkyIconName.smallThumbnail,faTh.faTh),_defineProperty(_IconMap,ChonkyIconName.largeThumbnail,faThLarge.faThLarge),_defineProperty(_IconMap,ChonkyIconName.folderChainSeparator,faChevronRight.faChevronRight),_defineProperty(_IconMap,ChonkyIconName.download,faDownload.faDownload),_defineProperty(_IconMap,ChonkyIconName.upload,faUpload.faUpload),_defineProperty(_IconMap,ChonkyIconName.trash,faTrash.faTrash),_defineProperty(_IconMap,ChonkyIconName.fallbackIcon,faExclamationTriangle.faExclamationTriangle),_defineProperty(_IconMap,ChonkyIconName.symlink,faExternalLinkAlt.faExternalLinkAlt),_defineProperty(_IconMap,ChonkyIconName.hidden,faEyeSlash.faEyeSlash),_defineProperty(_IconMap,ChonkyIconName.file,faFile.faFile),_defineProperty(_IconMap,ChonkyIconName.license,faBalanceScale.faBalanceScale),_defineProperty(_IconMap,ChonkyIconName.code,faFileCode.faFileCode),_defineProperty(_IconMap,ChonkyIconName.config,faCogs.faCogs),_defineProperty(_IconMap,ChonkyIconName.model,faCubes.faCubes),_defineProperty(_IconMap,ChonkyIconName.database,faDatabase.faDatabase),_defineProperty(_IconMap,ChonkyIconName.text,faFileAlt.faFileAlt),_defineProperty(_IconMap,ChonkyIconName.archive,faFileArchive.faFileArchive),_defineProperty(_IconMap,ChonkyIconName.image,faFileImage.faFileImage),_defineProperty(_IconMap,ChonkyIconName.video,faFilm.faFilm),_defineProperty(_IconMap,ChonkyIconName.info,faInfoCircle.faInfoCircle),_defineProperty(_IconMap,ChonkyIconName.key,faKey.faKey),_defineProperty(_IconMap,ChonkyIconName.lock,faLock.faLock),_defineProperty(_IconMap,ChonkyIconName.music,faMusic.faMusic),_defineProperty(_IconMap,ChonkyIconName.terminal,faTerminal.faTerminal),_defineProperty(_IconMap,ChonkyIconName.users,faUsers.faUsers),_defineProperty(_IconMap,ChonkyIconName.linux,faLinux.faLinux),_defineProperty(_IconMap,ChonkyIconName.ubuntu,faUbuntu.faUbuntu),_defineProperty(_IconMap,ChonkyIconName.windows,faWindows.faWindows),_defineProperty(_IconMap,ChonkyIconName.rust,faRust.faRust),_defineProperty(_IconMap,ChonkyIconName.python,faPython.faPython),_defineProperty(_IconMap,ChonkyIconName.nodejs,faNodeJs.faNodeJs),_defineProperty(_IconMap,ChonkyIconName.php,faPhp.faPhp),_defineProperty(_IconMap,ChonkyIconName.git,faGitAlt.faGitAlt),_defineProperty(_IconMap,ChonkyIconName.adobe,faAdobe.faAdobe),_defineProperty(_IconMap,ChonkyIconName.pdf,faFilePdf.faFilePdf),_defineProperty(_IconMap,ChonkyIconName.excel,faFileExcel.faFileExcel),_defineProperty(_IconMap,ChonkyIconName.word,faFileWord.faFileWord),_defineProperty(_IconMap,ChonkyIconName.flash,faRunning.faRunning),_IconMap),ChonkyIconFA=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var icon=props.icon,faProps=Object.assign({},props,{icon:IconMap[icon]?IconMap[icon]:IconMap.fallbackIcon});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(index_es.a,faProps)}));try{ChonkyIconFA.displayName="ChonkyIconFA",ChonkyIconFA.__docgenInfo={description:"",displayName:"ChonkyIconFA",props:{icon:{defaultValue:null,description:"",name:"icon",required:!0,type:{name:"string"}},spin:{defaultValue:null,description:"",name:"spin",required:!1,type:{name:"boolean | undefined"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string | undefined"}},color:{defaultValue:null,description:"",name:"color",required:!1,type:{name:"string | undefined"}},fixedWidth:{defaultValue:null,description:"",name:"fixedWidth",required:!1,type:{name:"boolean | undefined"}},size:{defaultValue:null,description:"",name:"size",required:!1,type:{name:'"xs" | "lg" | "sm" | undefined'}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/ChonkyIcon.tsx#ChonkyIconFA"]={docgenInfo:ChonkyIconFA.__docgenInfo,name:"ChonkyIconFA",path:"src/components/external/ChonkyIcon.tsx#ChonkyIconFA"})}catch(__react_docgen_typescript_loader_error){}var FileThumbnail=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var thumbnailUrl=props.thumbnailUrl,thumbnailStyle=thumbnailUrl?{backgroundImage:"url('".concat(thumbnailUrl,"')")}:{},className=classnames_default()({"chonky-file-thumbnail":!0,"chonky-file-thumbnail-hidden":!thumbnailUrl});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:className,style:thumbnailStyle})}));try{FileThumbnail.displayName="FileThumbnail",FileThumbnail.__docgenInfo={description:"",displayName:"FileThumbnail",props:{thumbnailUrl:{defaultValue:null,description:"",name:"thumbnailUrl",required:!0,type:{name:"Nullable<string>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/FileThumbnail.tsx#FileThumbnail"]={docgenInfo:FileThumbnail.__docgenInfo,name:"FileThumbnail",path:"src/components/internal/FileThumbnail.tsx#FileThumbnail"})}catch(__react_docgen_typescript_loader_error){}__webpack_require__(96);var path_browserify=__webpack_require__(361),path_browserify_default=__webpack_require__.n(path_browserify),thumbnailGeneratorState=Object(dist.atom)({key:"thumbnailGeneratorState",default:null}),TextPlaceholder=(__webpack_require__(742),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var placeholderLength=function getRandomInt(min,max){return min+Math.floor(Math.random()*Math.floor(max-min))}(props.minLength,props.maxLength),whitespace="&nbsp;".repeat(placeholderLength);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-text-placeholder",dangerouslySetInnerHTML:{__html:whitespace}})})));try{TextPlaceholder.displayName="TextPlaceholder",TextPlaceholder.__docgenInfo={description:"",displayName:"TextPlaceholder",props:{minLength:{defaultValue:null,description:"",name:"minLength",required:!0,type:{name:"number"}},maxLength:{defaultValue:null,description:"",name:"maxLength",required:!0,type:{name:"number"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/TextPlaceholder.tsx#TextPlaceholder"]={docgenInfo:TextPlaceholder.__docgenInfo,name:"TextPlaceholder",path:"src/components/external/TextPlaceholder.tsx#TextPlaceholder"})}catch(__react_docgen_typescript_loader_error){}var BaseFileEntry_hooks_useModifierIconComponents=function useModifierIconComponents(file){var modifierIcons=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var modifierIcons=[];return file_helper_FileHelper.isHidden(file)&&modifierIcons.push(ChonkyIconName.hidden),file_helper_FileHelper.isSymlink(file)&&modifierIcons.push(ChonkyIconName.symlink),modifierIcons}),[file]);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return modifierIcons.map((function(icon,index){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{key:"file-modifier-".concat(index),icon:icon})}))}),[modifierIcons])},BaseFileEntry_hooks_useFileNameComponent=function useFileNameComponent(file){return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){if(!file)return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(TextPlaceholder,{minLength:15,maxLength:20});var name,extension,_file$ext;file_helper_FileHelper.isDirectory(file)?(name=file.name,extension=" /"):(extension=null!==(_file$ext=file.ext)&&void 0!==_file$ext?_file$ext:path_browserify_default.a.extname(file.name),name=file.name.substr(0,file.name.length-extension.length));return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.Fragment,null,name,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-file-entry-description-title-extension"},extension))}),[file])};try{BaseFileEntry_hooks_useModifierIconComponents.displayName="useModifierIconComponents",BaseFileEntry_hooks_useModifierIconComponents.__docgenInfo={description:"",displayName:"useModifierIconComponents",props:{id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},name:{defaultValue:null,description:"",name:"name",required:!0,type:{name:"string"}},ext:{defaultValue:null,description:"",name:"ext",required:!1,type:{name:"string | undefined"}},isDir:{defaultValue:null,description:"",name:"isDir",required:!1,type:{name:"boolean | undefined"}},isHidden:{defaultValue:null,description:"",name:"isHidden",required:!1,type:{name:"boolean | undefined"}},isSymlink:{defaultValue:null,description:"",name:"isSymlink",required:!1,type:{name:"boolean | undefined"}},openable:{defaultValue:null,description:"",name:"openable",required:!1,type:{name:"boolean | undefined"}},selectable:{defaultValue:null,description:"",name:"selectable",required:!1,type:{name:"boolean | undefined"}},draggable:{defaultValue:null,description:"",name:"draggable",required:!1,type:{name:"boolean | undefined"}},droppable:{defaultValue:null,description:"",name:"droppable",required:!1,type:{name:"boolean | undefined"}},size:{defaultValue:null,description:"",name:"size",required:!1,type:{name:"number | undefined"}},modDate:{defaultValue:null,description:"",name:"modDate",required:!1,type:{name:"string | Date | undefined"}},childrenCount:{defaultValue:null,description:"",name:"childrenCount",required:!1,type:{name:"number | undefined"}},thumbnailUrl:{defaultValue:null,description:"",name:"thumbnailUrl",required:!1,type:{name:"string | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/file-entry/BaseFileEntry-hooks.tsx#useModifierIconComponents"]={docgenInfo:BaseFileEntry_hooks_useModifierIconComponents.__docgenInfo,name:"useModifierIconComponents",path:"src/components/file-entry/BaseFileEntry-hooks.tsx#useModifierIconComponents"})}catch(__react_docgen_typescript_loader_error){}try{BaseFileEntry_hooks_useFileNameComponent.displayName="useFileNameComponent",BaseFileEntry_hooks_useFileNameComponent.__docgenInfo={description:"",displayName:"useFileNameComponent",props:{id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},name:{defaultValue:null,description:"",name:"name",required:!0,type:{name:"string"}},ext:{defaultValue:null,description:"",name:"ext",required:!1,type:{name:"string | undefined"}},isDir:{defaultValue:null,description:"",name:"isDir",required:!1,type:{name:"boolean | undefined"}},isHidden:{defaultValue:null,description:"",name:"isHidden",required:!1,type:{name:"boolean | undefined"}},isSymlink:{defaultValue:null,description:"",name:"isSymlink",required:!1,type:{name:"boolean | undefined"}},openable:{defaultValue:null,description:"",name:"openable",required:!1,type:{name:"boolean | undefined"}},selectable:{defaultValue:null,description:"",name:"selectable",required:!1,type:{name:"boolean | undefined"}},draggable:{defaultValue:null,description:"",name:"draggable",required:!1,type:{name:"boolean | undefined"}},droppable:{defaultValue:null,description:"",name:"droppable",required:!1,type:{name:"boolean | undefined"}},size:{defaultValue:null,description:"",name:"size",required:!1,type:{name:"number | undefined"}},modDate:{defaultValue:null,description:"",name:"modDate",required:!1,type:{name:"string | Date | undefined"}},childrenCount:{defaultValue:null,description:"",name:"childrenCount",required:!1,type:{name:"number | undefined"}},thumbnailUrl:{defaultValue:null,description:"",name:"thumbnailUrl",required:!1,type:{name:"string | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/file-entry/BaseFileEntry-hooks.tsx#useFileNameComponent"]={docgenInfo:BaseFileEntry_hooks_useFileNameComponent.__docgenInfo,name:"useFileNameComponent",path:"src/components/file-entry/BaseFileEntry-hooks.tsx#useFileNameComponent"})}catch(__react_docgen_typescript_loader_error){}function BaseFileEntry_slicedToArray(arr,i){return function BaseFileEntry_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function BaseFileEntry_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function BaseFileEntry_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return BaseFileEntry_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return BaseFileEntry_arrayLikeToArray(o,minLen)}(arr,i)||function BaseFileEntry_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function BaseFileEntry_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var BaseFileEntry=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var file=props.file,selected=props.selected,style=props.style,dndIsDragging=props.dndIsDragging,dndIsOver=props.dndIsOver,dndCanDrop=props.dndCanDrop,_useState2=BaseFileEntry_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(null),2),thumbnailUrl=_useState2[0],setThumbnailUrl=_useState2[1],_useState4=BaseFileEntry_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(!1),2),thumbnailLoading=_useState4[0];!function useThumbnailUrl(file,setThumbnailUrl,setThumbnailLoading){var thumbnailGenerator=Object(dist.useRecoilValue)(thumbnailGeneratorState);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){var loadingCancelled=!1;return file&&(thumbnailGenerator?(setThumbnailLoading(!0),Promise.resolve().then((function(){return thumbnailGenerator(file)})).then((function(thumbnailUrl){loadingCancelled||(setThumbnailLoading(!1),thumbnailUrl&&"string"==typeof thumbnailUrl&&setThumbnailUrl(thumbnailUrl))})).catch((function(error){loadingCancelled||setThumbnailLoading(!1),Logger.error('User-defined "thumbnailGenerator" handler threw an error: '.concat(error.message))}))):file.thumbnailUrl&&setThumbnailUrl(file.thumbnailUrl)),function(){loadingCancelled=!0}}),[file,setThumbnailUrl,setThumbnailLoading,thumbnailGenerator])}(file,setThumbnailUrl,_useState4[1]);var iconData=function useIconData(file){return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){if(!file)return{icon:ChonkyIconName.loading,colorCode:0};if(!0===file.isDir)return{icon:ChonkyIconName.folder,colorCode:0};var match=getIconTrie().getWithCheckpoints(file.name,".",!0);return match||{icon:ChonkyIconName.file,colorCode:32}}),[file])}(file),backgroundColor=thumbnailUrl?ColorsDark[iconData.colorCode]:ColorsLight[iconData.colorCode],iconSpin=thumbnailLoading||!file,icon=thumbnailLoading?ChonkyIconName.loading:iconData.icon,dndIcon=function useDndIcon(selected,isDragging,isOver,canDrop){return isOver?canDrop&&!selected?ChonkyIconName.dndCanDrop:ChonkyIconName.dndCannotDrop:isDragging?ChonkyIconName.dndDragging:null}(selected,dndIsDragging,dndIsOver,dndCanDrop),modifierIconComponents=BaseFileEntry_hooks_useModifierIconComponents(file),fileNameComponent=BaseFileEntry_hooks_useFileNameComponent(file),className=classnames_default()({"chonky-file-entry":!0,"chonky-file-entry-directory":file_helper_FileHelper.isDirectory(file),"chonky-file-entry-selected":selected,"chonky-file-entry-dragging":dndIsDragging,"chonky-file-entry-drop-hovered":dndIsOver&&dndCanDrop});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:className,style:style},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-entry-inside"},dndIcon&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-entry-dnd-indicator"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:dndIcon})),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-entry-preview"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-details"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-details-inside"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-details-item"},file_helper_FileHelper.getReadableDate(file)),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-details-item"},file_helper_FileHelper.getReadableFileSize(file)))),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-icon"},file_helper_FileHelper.isDirectory(file)&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-icon-children-count"},file_helper_FileHelper.getChildrenCount(file)),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-icon-inside"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:icon,spin:iconSpin}))),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-selection"}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(FileThumbnail,{thumbnailUrl:thumbnailUrl}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-background",style:{backgroundColor:backgroundColor}})),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-entry-description"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-entry-description-title",title:file?file.name:void 0},modifierIconComponents.length>0&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-file-entry-description-title-modifiers"},modifierIconComponents),fileNameComponent))))}));try{BaseFileEntry.displayName="BaseFileEntry",BaseFileEntry.__docgenInfo={description:"",displayName:"BaseFileEntry",props:{file:{defaultValue:null,description:"",name:"file",required:!0,type:{name:"Nullable<FileData>"}},displayIndex:{defaultValue:null,description:"",name:"displayIndex",required:!0,type:{name:"number"}},selected:{defaultValue:null,description:"",name:"selected",required:!0,type:{name:"boolean"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties | undefined"}},dndIsDragging:{defaultValue:null,description:"",name:"dndIsDragging",required:!1,type:{name:"boolean | undefined"}},dndIsOver:{defaultValue:null,description:"",name:"dndIsOver",required:!1,type:{name:"boolean | undefined"}},dndCanDrop:{defaultValue:null,description:"",name:"dndCanDrop",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/file-entry/BaseFileEntry.tsx#BaseFileEntry"]={docgenInfo:BaseFileEntry.__docgenInfo,name:"BaseFileEntry",path:"src/components/file-entry/BaseFileEntry.tsx#BaseFileEntry"})}catch(__react_docgen_typescript_loader_error){}var dispatchSpecialActionState=Object(dist.atom)({key:"dispatchSpecialActionState",default:constants_NOOP_FUNCTION}),ClickableFileEntry=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var file=props.file,fileClickHandlers=function useFileClickHandlers(file,displayIndex){var dispatchSpecialAction=Object(dist.useRecoilValue)(dispatchSpecialActionState),onMouseClick=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event,clickType){file&&dispatchSpecialAction({actionId:SpecialAction.MouseClickFile,clickType:clickType,file:file,fileDisplayIndex:displayIndex,altKey:event.altKey,ctrlKey:event.ctrlKey,shiftKey:event.shiftKey})}),[file,displayIndex,dispatchSpecialAction]),onKeyboardClick=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){file&&dispatchSpecialAction({actionId:SpecialAction.KeyboardClickFile,file:file,fileDisplayIndex:displayIndex,enterKey:event.enterKey,spaceKey:event.spaceKey,altKey:event.altKey,ctrlKey:event.ctrlKey,shiftKey:event.shiftKey})}),[file,displayIndex,dispatchSpecialAction]);return{onSingleClick:Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){return onMouseClick(event,"single")}),[onMouseClick]),onDoubleClick:Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){return onMouseClick(event,"double")}),[onMouseClick]),onKeyboardClick:onKeyboardClick}}(file,props.displayIndex),wrapperProps=Object.assign({wrapperTag:"div",passthroughProps:{className:"chonky-file-entry-clickable-wrapper chonky-fill-parent"}},file_helper_FileHelper.isClickable(file)?fileClickHandlers:void 0);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ClickableWrapper_ClickableWrapper,wrapperProps,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(BaseFileEntry,props))}));try{ClickableFileEntry.displayName="ClickableFileEntry",ClickableFileEntry.__docgenInfo={description:"",displayName:"ClickableFileEntry",props:{file:{defaultValue:null,description:"",name:"file",required:!0,type:{name:"Nullable<FileData>"}},displayIndex:{defaultValue:null,description:"",name:"displayIndex",required:!0,type:{name:"number"}},selected:{defaultValue:null,description:"",name:"selected",required:!0,type:{name:"boolean"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties | undefined"}},dndIsDragging:{defaultValue:null,description:"",name:"dndIsDragging",required:!1,type:{name:"boolean | undefined"}},dndIsOver:{defaultValue:null,description:"",name:"dndIsOver",required:!1,type:{name:"boolean | undefined"}},dndCanDrop:{defaultValue:null,description:"",name:"dndCanDrop",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/file-entry/ClickableFileEntry.tsx#ClickableFileEntry"]={docgenInfo:ClickableFileEntry.__docgenInfo,name:"ClickableFileEntry",path:"src/components/file-entry/ClickableFileEntry.tsx#ClickableFileEntry"})}catch(__react_docgen_typescript_loader_error){}var useDrag=__webpack_require__(766),useDrop=__webpack_require__(767),getEmptyImage=__webpack_require__(293);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function DnDFileEntry_slicedToArray(arr,i){return function DnDFileEntry_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function DnDFileEntry_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function DnDFileEntry_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return DnDFileEntry_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return DnDFileEntry_arrayLikeToArray(o,minLen)}(arr,i)||function DnDFileEntry_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function DnDFileEntry_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var DnDFileEntry=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var file=props.file,dispatchSpecialAction=Object(dist.useRecoilValue)(dispatchSpecialActionState),canDrag=file_helper_FileHelper.isDraggable(file),onDragStart=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(){file_helper_FileHelper.isDraggable(file)&&dispatchSpecialAction({actionId:SpecialAction.DragNDropStart,dragSource:file})}),[dispatchSpecialAction,file]),onDragEnd=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(item,monitor){var dropResult=monitor.getDropResult();file_helper_FileHelper.isDraggable(file)&&dropResult&&dropResult.dropTarget&&dispatchSpecialAction({actionId:SpecialAction.DragNDropEnd,dragSource:file,dropTarget:dropResult.dropTarget,dropEffect:dropResult.dropEffect})}),[dispatchSpecialAction,file]),onDrop=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(item,monitor){if(monitor.canDrop())return{dropTarget:file}}),[file]),canDrop=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(item){var isSameFile=file&&item.file&&file.id===item.file.id;return file_helper_FileHelper.isDroppable(file)&&!isSameFile}),[file]),_useDrag2=DnDFileEntry_slicedToArray(Object(useDrag.a)({item:{type:"chonky-file-entry",file:file},canDrag:canDrag,begin:onDragStart,end:onDragEnd,collect:function collect(monitor){return{isDragging:monitor.isDragging()}}}),3),dndIsDragging=_useDrag2[0].isDragging,drag=_useDrag2[1],preview=_useDrag2[2],_useDrop2=DnDFileEntry_slicedToArray(Object(useDrop.a)({accept:"chonky-file-entry",drop:onDrop,canDrop:canDrop,collect:function collect(monitor){return{isOver:monitor.isOver(),canDrop:monitor.canDrop()}}}),2),_useDrop2$=_useDrop2[0],dndIsOver=_useDrop2$.isOver,dndCanDrop=_useDrop2$.canDrop,drop=_useDrop2[1];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){preview(Object(getEmptyImage.a)(),{captureDraggingState:!0})}),[preview]),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{ref:drop,className:"chonky-file-entry-droppable-wrapper chonky-fill-parent"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{ref:file_helper_FileHelper.isDraggable(file)?drag:null,className:"chonky-file-entry-draggable-wrapper chonky-fill-parent"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ClickableFileEntry,_extends({},props,{dndIsDragging:dndIsDragging,dndIsOver:dndIsOver,dndCanDrop:dndCanDrop}))))}));try{DnDFileEntry.displayName="DnDFileEntry",DnDFileEntry.__docgenInfo={description:"",displayName:"DnDFileEntry",props:{file:{defaultValue:null,description:"",name:"file",required:!0,type:{name:"Nullable<FileData>"}},displayIndex:{defaultValue:null,description:"",name:"displayIndex",required:!0,type:{name:"number"}},selected:{defaultValue:null,description:"",name:"selected",required:!0,type:{name:"boolean"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties | undefined"}},dndIsDragging:{defaultValue:null,description:"",name:"dndIsDragging",required:!1,type:{name:"boolean | undefined"}},dndIsOver:{defaultValue:null,description:"",name:"dndIsOver",required:!1,type:{name:"boolean | undefined"}},dndCanDrop:{defaultValue:null,description:"",name:"dndCanDrop",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/file-entry/DnDFileEntry.tsx#DnDFileEntry"]={docgenInfo:DnDFileEntry.__docgenInfo,name:"DnDFileEntry",path:"src/components/file-entry/DnDFileEntry.tsx#DnDFileEntry"})}catch(__react_docgen_typescript_loader_error){}var SmartFileEntry=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var fileId=props.fileId,displayIndex=props.displayIndex,entryProps={file:Object(dist.useRecoilValue)(fileDataState(fileId)),displayIndex:displayIndex,selected:Object(dist.useRecoilValue)(fileSelectedState(fileId))};return Object(dist.useRecoilValue)(enableDragAndDropState)?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(DnDFileEntry,entryProps):delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ClickableFileEntry,entryProps)}));try{SmartFileEntry.displayName="SmartFileEntry",SmartFileEntry.__docgenInfo={description:"",displayName:"SmartFileEntry",props:{fileId:{defaultValue:null,description:"",name:"fileId",required:!0,type:{name:"Nullable<string>"}},displayIndex:{defaultValue:null,description:"",name:"displayIndex",required:!0,type:{name:"number"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/file-entry/SmartFileEntry.tsx#SmartFileEntry"]={docgenInfo:SmartFileEntry.__docgenInfo,name:"SmartFileEntry",path:"src/components/file-entry/SmartFileEntry.tsx#SmartFileEntry"})}catch(__react_docgen_typescript_loader_error){}var DefaultEntrySize={width:165,height:130},FileList_virtualization_useEntryRenderer=function useEntryRenderer(files){return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(virtualKey,index,style,parent,gutterSize,lastRow,lastColumn){if("number"==typeof gutterSize&&(lastColumn||(style.width=style.width-gutterSize),style.height=style.height-gutterSize),lastRow&&(style.height=style.height-1),lastColumn&&(style.width=style.width-1),index>=files.length)return null;var file=files[index],key=file?file.id:"loading-file-".concat(virtualKey);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{key:key,className:"chonky-virtualization-wrapper",style:style},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(SmartFileEntry,{fileId:file?file.id:null,displayIndex:index}))}),[files])},_noContentRenderer=function noContentRenderer(height){var placeholderProps={className:classnames_default()({"chonky-file-list-notification":!0,"chonky-file-list-notification-empty":!0})};return"number"==typeof height&&(placeholderProps.style={height:height}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",placeholderProps,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-list-notification-content"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:ChonkyIconName.folderOpen}),"  Nothing to show"))};_noContentRenderer.displayName="noContentRenderer";var FileList_virtualization_useGridRenderer=function useGridRenderer(files,entrySize,entryRenderer,thumbsGridRef,fillParentContainer){return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(_ref){var width=_ref.width,height=_ref.height,isMobile=function isMobileDevice(){return void 0!==window.orientation||-1!==navigator.userAgent.indexOf("IEMobile")}(),gutter=isMobile?5:8,columnCountFloat=(width+gutter-(!fillParentContainer||isMobile?0:16))/(entrySize.width+gutter),columnCount=Math.max(1,Math.floor(columnCountFloat)),rowCount=Math.ceil(files.length/columnCount);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(es.b,{style:{minHeight:entrySize.height+10},ref:thumbsGridRef,cellRenderer:function cellRenderer(data){var index=data.rowIndex*columnCount+data.columnIndex;return entryRenderer(data.key,index,Object.assign({},data.style),data.parent,gutter,data.rowIndex===rowCount-1,data.columnIndex===columnCount-1)},noContentRenderer:function noContentRenderer(){return _noContentRenderer(entrySize.height)},rowCount:rowCount,columnCount:columnCount,columnWidth:function columnWidth(_ref2){return function getColWidth(index,columnCount,entrySize,gutterSize){return index===columnCount-1?entrySize.width:entrySize.width+gutterSize}(_ref2.index,columnCount,entrySize,gutter)},rowHeight:function rowHeight(_ref3){_ref3.index;return function getRowHeight(index,rowCount,entrySize,gutterSize){return entrySize.height+gutterSize}(0,0,entrySize,gutter)},overscanRowCount:2,width:width,containerStyle:{minHeight:50},height:"number"==typeof height?height:500,autoHeight:!fillParentContainer,tabIndex:null})}),[files,entrySize,entryRenderer,thumbsGridRef,fillParentContainer])};try{FileList_virtualization_useEntryRenderer.displayName="useEntryRenderer",FileList_virtualization_useEntryRenderer.__docgenInfo={description:"",displayName:"useEntryRenderer",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileList-virtualization.tsx#useEntryRenderer"]={docgenInfo:FileList_virtualization_useEntryRenderer.__docgenInfo,name:"useEntryRenderer",path:"src/components/external/FileList-virtualization.tsx#useEntryRenderer"})}catch(__react_docgen_typescript_loader_error){}try{noContentRenderer.displayName="noContentRenderer",noContentRenderer.__docgenInfo={description:"",displayName:"noContentRenderer",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileList-virtualization.tsx#noContentRenderer"]={docgenInfo:noContentRenderer.__docgenInfo,name:"noContentRenderer",path:"src/components/external/FileList-virtualization.tsx#noContentRenderer"})}catch(__react_docgen_typescript_loader_error){}var fileEntrySizeState=Object(dist.atom)({key:"fileEntrySizeState",default:DefaultEntrySize}),searchBarEnabledState=Object(dist.atom)({key:"searchBarEnabledState",default:!1}),searchBarVisibleState=Object(dist.atom)({key:"searchBarVisibleState",default:!1}),searchFilterState=Object(dist.atom)({key:"searchFilterState",default:""}),bluebird=__webpack_require__(154),bluebird_default=__webpack_require__.n(bluebird);function hooks_helpers_slicedToArray(arr,i){return function hooks_helpers_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function hooks_helpers_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function hooks_helpers_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return hooks_helpers_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return hooks_helpers_arrayLikeToArray(o,minLen)}(arr,i)||function hooks_helpers_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function hooks_helpers_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var hooks_helpers_useInstanceVariable=function useInstanceVariable(value){var ref=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useRef)(value);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){ref.current=value}),[ref,value]),ref},hooks_helpers_useClickListener=function useClickListener(params){var onClick=params.onClick,onInsideClick=params.onInsideClick,onOutsideClick=params.onOutsideClick,triggerComponentRef=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useRef)(null),clickListener=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){!triggerComponentRef.current||triggerComponentRef.current.contains(event.target)?onInsideClick&&onInsideClick(event):onOutsideClick&&onOutsideClick(event),onClick&&onClick(event)}),[onClick,onInsideClick,onOutsideClick,triggerComponentRef]);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){return document.addEventListener("mousedown",clickListener,!1),function(){document.removeEventListener("mousedown",clickListener,!1)}}),[clickListener]),triggerComponentRef},hooks_helpers_useRefCallbackWithErrorHandling=function useRefCallbackWithErrorHandling(callbackFunc,displayName){var callbackFuncRef=hooks_helpers_useInstanceVariable(callbackFunc);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(){try{callbackFuncRef.current.apply(callbackFuncRef,arguments)}catch(error){Logger.error("An error occurred inside ".concat(displayName,":"),error)}}),[callbackFuncRef,displayName])};function file_actions_createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=function file_actions_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return file_actions_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return file_actions_arrayLikeToArray(o,minLen)}(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function file_actions_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var file_actions_useFileActions=function useFileActions(fileActions,externalFileActonHandler){var setFileActions=Object(dist.useSetRecoilState)(fileActionsState),setFileActionMap=Object(dist.useSetRecoilState)(fileActionMapState);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){var _step,fileActionMap={},_iterator=file_actions_createForOfIteratorHelper(fileActions);try{for(_iterator.s();!(_step=_iterator.n()).done;){var action=_step.value;fileActionMap[action.id]=action}}catch(err){_iterator.e(err)}finally{_iterator.f()}setFileActions(fileActions),setFileActionMap(fileActionMap)}),[fileActions,setFileActions,setFileActionMap]);var internalFileActionDispatcher=function useInternalFileActionDispatcher(externalFileActonHandler){var externalFileActonHandlerRef=hooks_helpers_useInstanceVariable(externalFileActonHandler),fileActionMapRef=hooks_helpers_useInstanceVariable(Object(dist.useRecoilValue)(fileActionMapState));return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(actionData){Logger.debug("FILE ACTION DISPATCH:",actionData);var actionId=actionData.actionId,action=fileActionMapRef.current[actionId];action?function isFunction(value){return!!(value&&value.constructor&&value.call&&value.apply)}(externalFileActonHandlerRef.current)&&bluebird_default.a.resolve(externalFileActonHandlerRef.current(action,actionData)).catch((function(error){return Logger.error('User-defined "onAction" handler threw an error: '.concat(error.message))})):Logger.error('Internal components dispatched a "'.concat(actionId,'" file action, ')+"but such action was not registered.")}),[externalFileActonHandlerRef,fileActionMapRef])}(externalFileActonHandler),safeInternalFileActionDispatcher=hooks_helpers_useRefCallbackWithErrorHandling(internalFileActionDispatcher,"the internal file action requester"),setDispatchFileAction=Object(dist.useSetRecoilState)(dispatchFileActionState);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){return setDispatchFileAction((function(){return safeInternalFileActionDispatcher}))}),[safeInternalFileActionDispatcher,setDispatchFileAction]);var internalFileActionRequester=function useInternalFileActionRequester(){var fileActionMapRef=hooks_helpers_useInstanceVariable(Object(dist.useRecoilValue)(fileActionMapState)),dispatchFileActionRef=hooks_helpers_useInstanceVariable(Object(dist.useRecoilValue)(dispatchFileActionState)),dispatchSpecialActionRef=hooks_helpers_useInstanceVariable(Object(dist.useRecoilValue)(dispatchSpecialActionState)),filesRef=hooks_helpers_useInstanceVariable(Object(dist.useRecoilValue)(filesState)),selectionRef=hooks_helpers_useInstanceVariable(Object(dist.useRecoilValue)(selectionState));return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(fileActionId){Logger.debug("FILE ACTION REQUEST:",fileActionId);var action=fileActionMapRef.current[fileActionId];if(action){var selectedFilesForAction=action.requiresSelection?selection_SelectionHelper.getSelectedFiles(filesRef.current,selectionRef.current,action.fileFilter):void 0;if(!action.requiresSelection||selectedFilesForAction&&0!==selectedFilesForAction.length){var actionData={actionId:action.id,target:void 0,files:selectedFilesForAction};dispatchFileActionRef.current(actionData);var specialActionId=action.specialActionToDispatch;if(specialActionId)switch(specialActionId){case SpecialAction.OpenParentFolder:case SpecialAction.ToggleSearchBar:case SpecialAction.SelectAllFiles:case SpecialAction.ClearSelection:dispatchSpecialActionRef.current({actionId:specialActionId});break;default:Logger.warn('File action "'.concat(action.id,'" tried to dispatch a ')+'special action "'.concat(specialActionId,'", but that ')+"special action was not marked as simple. File actions can only trigger simple special actions.")}}else Logger.warn('Internal components requested the "'.concat(fileActionId,'" file ')+"action, but the selection for this action was empty. This might a bug in the code of the presentational components.")}else Logger.warn('Internal components requested the "'.concat(fileActionId,'" file ')+"action, but such action was not registered.")}),[fileActionMapRef,dispatchFileActionRef,dispatchSpecialActionRef,filesRef,selectionRef])}(),safeInternalFileActionRequester=hooks_helpers_useRefCallbackWithErrorHandling(internalFileActionRequester,"the internal file action requester"),setRequestFileAction=Object(dist.useSetRecoilState)(requestFileActionState);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){return setRequestFileAction((function(){return safeInternalFileActionRequester}))}),[safeInternalFileActionRequester,setRequestFileAction]),{internalFileActionDispatcher:internalFileActionDispatcher,internalFileActionRequester:internalFileActionRequester}},file_actions_useFileActionTrigger=function useFileActionTrigger(fileActionId){var requestFileAction=Object(dist.useRecoilValue)(requestFileActionState);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(){return requestFileAction(fileActionId)}),[fileActionId,requestFileAction])},file_actions_useFileActionModifiers=function useFileActionModifiers(fileActionId){var parentFolder=Object(dist.useRecoilValue)(parentFolderState),searchBarVisible=Object(dist.useRecoilValue)(searchBarVisibleState),action=Object(dist.useRecoilValue)(fileActionDataState(fileActionId)),actionSelectionEmpty=0===Object(dist.useRecoilValue)(fileActionSelectedFilesCountState(fileActionId));return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){if(!action)return{active:!1,disabled:!0};var active=action.id===ChonkyActions.ToggleSearch.id&&searchBarVisible,disabled=!!action.requiresSelection&&actionSelectionEmpty;return action.id===ChonkyActions.OpenParentFolder.id&&(disabled=disabled||!file_helper_FileHelper.isOpenable(parentFolder)),{active:active,disabled:disabled}}),[action,searchBarVisible,parentFolder,actionSelectionEmpty])},FuzzySearch=__webpack_require__(362);function special_actions_defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var special_actions_useSpecialFileActionHandlerMap=function useSpecialFileActionHandlerMap(selectionUtil,selectionModifiers){var _recoilFiles=Object(dist.useRecoilValue)(filesState),filesRef=hooks_helpers_useInstanceVariable(_recoilFiles),parentFolderRef=hooks_helpers_useInstanceVariable(Object(dist.useRecoilValue)(parentFolderState)),selectedFilesRef=hooks_helpers_useInstanceVariable(Object(dist.useRecoilValue)(selectedFilesState)),dispatchFileActionRef=hooks_helpers_useInstanceVariable(Object(dist.useRecoilValue)(dispatchFileActionState)),setSearchBarVisible=Object(dist.useSetRecoilState)(searchBarVisibleState),lastClickDisplayIndexRef=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useRef)(null);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){lastClickDisplayIndexRef.current=null}),[_recoilFiles]),Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var _ref2;return special_actions_defineProperty(_ref2={},SpecialAction.MouseClickFile,(function(data){if("double"===data.clickType)file_helper_FileHelper.isOpenable(data.file)&&dispatchFileActionRef.current({actionId:ChonkyActions.OpenFiles.id,target:data.file,files:[data.file]});else if(file_helper_FileHelper.isSelectable(data.file))if(data.ctrlKey)selectionModifiers.toggleSelection(data.file.id,!1),lastClickDisplayIndexRef.current=data.fileDisplayIndex;else if(data.shiftKey)if("number"==typeof lastClickDisplayIndexRef.current){var rangeStart=lastClickDisplayIndexRef.current,rangeEnd=data.fileDisplayIndex;if(rangeStart>rangeEnd){var _ref=[rangeEnd,rangeStart];rangeStart=_ref[0],rangeEnd=_ref[1]}var fileIds=filesRef.current.slice(rangeStart,rangeEnd+1).filter((function(file){return file_helper_FileHelper.isSelectable(file)})).map((function(file){return file.id}));selectionModifiers.selectFiles(fileIds,!0)}else selectionModifiers.toggleSelection(data.file.id,!1),lastClickDisplayIndexRef.current=data.fileDisplayIndex;else selectionModifiers.toggleSelection(data.file.id,!0),lastClickDisplayIndexRef.current=data.fileDisplayIndex;else data.ctrlKey||selectionModifiers.clearSelection(),lastClickDisplayIndexRef.current=data.fileDisplayIndex})),special_actions_defineProperty(_ref2,SpecialAction.KeyboardClickFile,(function(data){lastClickDisplayIndexRef.current=data.fileDisplayIndex,data.enterKey?0===selectedFilesRef.current.length&&dispatchFileActionRef.current({actionId:ChonkyActions.OpenFiles.id,target:data.file,files:[data.file]}):data.spaceKey&&file_helper_FileHelper.isSelectable(data.file)&&selectionModifiers.toggleSelection(data.file.id,data.ctrlKey)})),special_actions_defineProperty(_ref2,SpecialAction.OpenParentFolder,(function(){file_helper_FileHelper.isOpenable(parentFolderRef.current)?dispatchFileActionRef.current({actionId:ChonkyActions.OpenFiles.id,target:parentFolderRef.current,files:[parentFolderRef.current]}):Logger.warn('Special action "'.concat(SpecialAction.OpenParentFolder,'" was ')+"dispatched even though the parent folder is not openable. This indicates a bug in presentation components.")})),special_actions_defineProperty(_ref2,SpecialAction.OpenFolderChainFolder,(function(data){dispatchFileActionRef.current({actionId:ChonkyActions.OpenFiles.id,target:data.file,files:[data.file]})})),special_actions_defineProperty(_ref2,SpecialAction.ToggleSearchBar,(function(){setSearchBarVisible((function(visible){return!visible}))})),special_actions_defineProperty(_ref2,SpecialAction.SelectAllFiles,(function(){var fileIds=filesRef.current.filter((function(file){return file_helper_FileHelper.isSelectable(file)})).map((function(file){return file.id}));selectionModifiers.selectFiles(fileIds,!0)})),special_actions_defineProperty(_ref2,SpecialAction.ClearSelection,(function(){selectionModifiers.clearSelection()})),special_actions_defineProperty(_ref2,SpecialAction.DragNDropStart,(function(data){var file=data.dragSource;selectionUtil.isSelected(file)||(selectionModifiers.clearSelection(),file_helper_FileHelper.isSelectable(file)&&selectionModifiers.selectFiles([file.id]))})),special_actions_defineProperty(_ref2,SpecialAction.DragNDropEnd,(function(data){if(!selectionUtil.isSelected(data.dropTarget)){var selectedFiles=selectionUtil.getSelectedFiles(file_helper_FileHelper.isDraggable),droppedFiles=selectedFiles.length>0?selectedFiles:[data.dragSource];dispatchFileActionRef.current({actionId:"copy"===data.dropEffect?ChonkyActions.DuplicateFilesTo.id:ChonkyActions.MoveFilesTo.id,target:data.dropTarget,files:droppedFiles})}})),_ref2}),[selectionUtil,selectionModifiers,filesRef,parentFolderRef,selectedFilesRef,dispatchFileActionRef,setSearchBarVisible])};function ChonkyBusinessLogic_slicedToArray(arr,i){return function ChonkyBusinessLogic_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function ChonkyBusinessLogic_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function ChonkyBusinessLogic_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return ChonkyBusinessLogic_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ChonkyBusinessLogic_arrayLikeToArray(o,minLen)}(arr,i)||function ChonkyBusinessLogic_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ChonkyBusinessLogic_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var ChonkyBusinessLogic=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var files=props.files,folderChain=props.folderChain?props.folderChain:null,fileActions=props.fileActions?props.fileActions:[],onFileAction=props.onFileAction?props.onFileAction:null,thumbnailGenerator=props.thumbnailGenerator?props.thumbnailGenerator:null,doubleClickDelay="number"==typeof props.doubleClickDelay?props.doubleClickDelay:300,disableSelection=!!props.disableSelection,enableDragAndDrop=!!props.enableDragAndDrop,sortedFiles=files,filteredFiles=function useFileSearch(files){var searchFilter=Object(dist.useRecoilValue)(searchFilterState);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return searchFilter?new FuzzySearch.a(files.filter((function(f){return!!f})),["name"],{caseSensitive:!1,sort:!0}).search(searchFilter):files}),[files,searchFilter])}(sortedFiles),_useSelection=function useSelection(files,disableSelection){var _useState2=_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)({}),2),selection=_useState2[0],setSelection=_useState2[1],selectionSize=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return selection_SelectionHelper.getSelectionSize(files,selection)}),[files,selection]),selectionModifiers=selection_useSelectionModifiers(disableSelection,setSelection),selectionUtilRef=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useRef)(new UpdateableSelectionUtil(files,selection));return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){selectionUtilRef.current.update(files,selection)}),[files,selection]),{selection:selection,selectionSize:selectionSize,selectionUtilRef:selectionUtilRef,selectionModifiers:selectionModifiers}}(sortedFiles,disableSelection),selection=_useSelection.selection,selectionUtilRef=_useSelection.selectionUtilRef,selectionModifiers=_useSelection.selectionModifiers,setRecoilSelectionModifiers=Object(dist.useSetRecoilState)(selectionModifiersState);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){setRecoilSelectionModifiers(selectionModifiers)}),[selectionModifiers,setRecoilSelectionModifiers]),file_actions_useFileActions(fileActions,onFileAction),function useSpecialActionDispatcher(files,selection,selectionUtil,selectionModifiers){var specialActionHandlerMap=special_actions_useSpecialFileActionHandlerMap(selectionUtil,selectionModifiers),dispatchSpecialAction=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(actionData){Logger.debug("SPECIAL ACTION REQUEST:",actionData);var actionId=actionData.actionId,handler=specialActionHandlerMap[actionId];if(handler)try{handler(actionData)}catch(error){Logger.error('Handler for special action "'.concat(actionId,'" threw an error.'),error)}else Logger.error('Internal components dispatched a "'.concat(actionId,'" special action, ')+"but no internal handler is available to process it.")}),[specialActionHandlerMap]),setRecoilDispatchSpecialAction=Object(dist.useSetRecoilState)(dispatchSpecialActionState);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){setRecoilDispatchSpecialAction((function(){return dispatchSpecialAction}))}),[dispatchSpecialAction,setRecoilDispatchSpecialAction])}(0,0,selectionUtilRef.current,selectionModifiers);var setRecoilFiles=Object(dist.useSetRecoilState)(filesState);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){setRecoilFiles(filteredFiles)}),[filteredFiles,setRecoilFiles]);var setFolderChain=Object(dist.useSetRecoilState)(folderChainState),setParentFolder=Object(dist.useSetRecoilState)(parentFolderState);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){var parentFolder=folderChain&&folderChain.length>1?folderChain[(null==folderChain?void 0:folderChain.length)-2]:null;setFolderChain(folderChain),setParentFolder(parentFolder)}),[folderChain,setFolderChain,setParentFolder]);var setRecoilSelection=Object(dist.useSetRecoilState)(selectionState);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){setRecoilSelection(selection)}),[selection,setRecoilSelection]);var setRecoilThumbnailGenerator=Object(dist.useSetRecoilState)(thumbnailGeneratorState);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){setRecoilThumbnailGenerator((function(){return thumbnailGenerator}))}),[thumbnailGenerator,setRecoilThumbnailGenerator]);var setRecoilDoubleClickDelay=Object(dist.useSetRecoilState)(doubleClickDelayState);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){setRecoilDoubleClickDelay(doubleClickDelay)}),[doubleClickDelay,setRecoilDoubleClickDelay]);ChonkyBusinessLogic_slicedToArray(Object(dist.useRecoilState)(fileEntrySizeState),1);var setRecoilEnableDragAndDrop=Object(dist.useSetRecoilState)(enableDragAndDropState);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){setRecoilEnableDragAndDrop(enableDragAndDrop)}),[enableDragAndDrop,setRecoilEnableDragAndDrop]),null}));try{ChonkyBusinessLogic.displayName="ChonkyBusinessLogic",ChonkyBusinessLogic.__docgenInfo={description:"",displayName:"ChonkyBusinessLogic",props:{files:{defaultValue:null,description:"List of files that will be displayed in the main container. The provided value\n**must** be an array, where each element is either `null` or an object that\nsatisfies the `FileData` type. If an element is `null`, a loading placeholder\nwill be displayed in its place.",name:"files",required:!0,type:{name:"FileArray"}},folderChain:{defaultValue:null,description:"The current folder hierarchy. This should be an array of `files`, every\nelement should either be `null` or an object of `FileData` type. The first\nelement should represent the top-level directory, and the last element\nshould be the current folder.",name:"folderChain",required:!1,type:{name:"FileArray | null | undefined"}},fileActions:{defaultValue:null,description:"",name:"fileActions",required:!1,type:{name:"FileAction[] | undefined"}},onFileAction:{defaultValue:null,description:"",name:"onFileAction",required:!1,type:{name:"FileActionHandler | undefined"}},thumbnailGenerator:{defaultValue:null,description:"The function that determines the thumbnail image URL for a file. It gets a file object as the input, and\nshould return a `string` or `null`. It can also return a promise that resolves into a `string` or `null`.\n[See relevant section](#section-displaying-file-thumbnails).",name:"thumbnailGenerator",required:!1,type:{name:"ThumbnailGenerator | undefined"}},doubleClickDelay:{defaultValue:null,description:"Maximum delay between the two clicks in a double click, in milliseconds.",name:"doubleClickDelay",required:!1,type:{name:"number | undefined"}},disableSelection:{defaultValue:null,description:"The flag that completely disables file selection functionality. If any handlers depend on file selections, their\ninput will look like no files are selected.",name:"disableSelection",required:!1,type:{name:"boolean | undefined"}},disableDefaultFileActions:{defaultValue:null,description:"",name:"disableDefaultFileActions",required:!1,type:{name:"boolean | undefined"}},enableDragAndDrop:{defaultValue:null,description:"The flag that completely disables drag & drop functionality.\n[See relevant section](#section-managing-file-selection).",name:"enableDragAndDrop",required:!1,type:{name:"boolean | undefined"}},fillParentContainer:{defaultValue:null,description:"The flag that determines whether Chonky should fill the height parent container. When set to `true`, the maximum\nheight of the file browser will be limited to the height of the parent container, and scrollbar will be shown\nwhen necessary. When set to `false`, file browser height will be extended to display all files at the same time.",name:"fillParentContainer",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/ChonkyBusinessLogic.tsx#ChonkyBusinessLogic"]={docgenInfo:ChonkyBusinessLogic.__docgenInfo,name:"ChonkyBusinessLogic",path:"src/components/internal/ChonkyBusinessLogic.tsx#ChonkyBusinessLogic"})}catch(__react_docgen_typescript_loader_error){}var useDragLayer=__webpack_require__(765),layerStyles={position:"fixed",pointerEvents:"none",zIndex:100,left:0,top:0,width:"100%",height:"100%"},getItemStyles=function getItemStyles(initialCursorOffset,initialFileOffset,currentFileOffset){if(!initialCursorOffset||!initialFileOffset||!currentFileOffset)return{display:"none"};var x=initialCursorOffset.x+(currentFileOffset.x-initialFileOffset.x),y=initialCursorOffset.y+(currentFileOffset.y-initialFileOffset.y),transform="translate(".concat(x,"px, ").concat(y,"px)");return{transform:transform,WebkitTransform:transform}},DnDFileListDragLayer_DnDFileListDragLayer=function DnDFileListDragLayer(){var selectionSize=Object(dist.useRecoilValue)(selectionSizeState),_useDragLayer=Object(useDragLayer.a)((function(monitor){return{item:monitor.getItem(),itemType:monitor.getItemType(),initialCursorOffset:monitor.getInitialClientOffset(),initialFileOffset:monitor.getInitialSourceClientOffset(),currentFileOffset:monitor.getSourceClientOffset(),isDragging:monitor.isDragging()}})),itemType=_useDragLayer.itemType,item=_useDragLayer.item,initialCursorOffset=_useDragLayer.initialCursorOffset,initialFileOffset=_useDragLayer.initialFileOffset,currentFileOffset=_useDragLayer.currentFileOffset;return _useDragLayer.isDragging?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:layerStyles},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:getItemStyles(initialCursorOffset,initialFileOffset,currentFileOffset)},function renderItem(){if(item.file&&"chonky-file-entry"===itemType)return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-drag-preview"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("b",null,item.file.name),selectionSize>1&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.Fragment,null," and ",delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("strong",null,selectionSize-1," other file",selectionSize-1!=1?"s":"")))}())):null};DnDFileListDragLayer_DnDFileListDragLayer.displayName="DnDFileListDragLayer";try{DnDFileListDragLayer_DnDFileListDragLayer.displayName="DnDFileListDragLayer",DnDFileListDragLayer_DnDFileListDragLayer.__docgenInfo={description:"",displayName:"DnDFileListDragLayer",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/file-entry/DnDFileListDragLayer.tsx#DnDFileListDragLayer"]={docgenInfo:DnDFileListDragLayer_DnDFileListDragLayer.__docgenInfo,name:"DnDFileListDragLayer",path:"src/components/file-entry/DnDFileListDragLayer.tsx#DnDFileListDragLayer"})}catch(__react_docgen_typescript_loader_error){}var ErrorMessage=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var message=props.message,bullets=props.bullets,bulletList=null;if(bullets&&bullets.length>0){for(var items=[],i=0;i<bullets.length;++i)items.push(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("li",{key:"error-bullet-".concat(i)},bullets[i]));bulletList=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("ul",null,items)}return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-error"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-error-name"},"Chonky runtime error:")," ",message,bulletList)}));try{ErrorMessage.displayName="ErrorMessage",ErrorMessage.__docgenInfo={description:"",displayName:"ErrorMessage",props:{message:{defaultValue:null,description:"",name:"message",required:!0,type:{name:"string"}},bullets:{defaultValue:null,description:"",name:"bullets",required:!1,type:{name:"string[] | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/ErrorMessage.tsx#ErrorMessage"]={docgenInfo:ErrorMessage.__docgenInfo,name:"ErrorMessage",path:"src/components/internal/ErrorMessage.tsx#ErrorMessage"})}catch(__react_docgen_typescript_loader_error){}var hotkeys_esm=__webpack_require__(210),HotkeyListener=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var fileActionId=props.fileActionId,fileAction=Object(dist.useRecoilValue)(fileActionDataState(fileActionId)),requestFileAction=Object(dist.useRecoilValue)(requestFileActionState);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){if(fileAction&&fileAction.hotkeys&&0!==fileAction.hotkeys.length){var hotkeysStr=fileAction.hotkeys.join(","),hotkeyCallback=function hotkeyCallback(event){event.preventDefault(),requestFileAction(fileAction.id)};return Object(hotkeys_esm.a)(hotkeysStr,hotkeyCallback),function(){return hotkeys_esm.a.unbind(hotkeysStr,hotkeyCallback)}}}),[fileAction,requestFileAction]),null}));try{HotkeyListener.displayName="HotkeyListener",HotkeyListener.__docgenInfo={description:"",displayName:"HotkeyListener",props:{fileActionId:{defaultValue:null,description:"",name:"fileActionId",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/HotkeyListener.tsx#HotkeyListener"]={docgenInfo:HotkeyListener.__docgenInfo,name:"HotkeyListener",path:"src/components/internal/HotkeyListener.tsx#HotkeyListener"})}catch(__react_docgen_typescript_loader_error){}var ChonkyPresentationLayer_ChonkyPresentationLayer=function ChonkyPresentationLayer(props){var validationErrors=props.validationErrors,children=props.children,fileActions=Object(dist.useRecoilValue)(fileActionsState),selectionModifiers=Object(dist.useRecoilValue)(selectionModifiersState),enableDragAndDrop=Object(dist.useRecoilValue)(enableDragAndDropState),chonkyRootRef=hooks_helpers_useClickListener({onOutsideClick:selectionModifiers.clearSelection}),hotkeyListenerComponents=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return fileActions.map((function(action){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(HotkeyListener,{key:"file-action-listener-".concat(action.id),fileActionId:action.id})}))}),[fileActions]),validationErrorComponents=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return validationErrors.map((function(data,index){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ErrorMessage,{key:"error-message-".concat(index),message:data.message,bullets:data.bullets})}))}),[validationErrors]);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{ref:chonkyRootRef,className:"chonky-root chonky-no-select"},enableDragAndDrop&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(DnDFileListDragLayer_DnDFileListDragLayer,null),hotkeyListenerComponents,validationErrorComponents,children||null)};ChonkyPresentationLayer_ChonkyPresentationLayer.displayName="ChonkyPresentationLayer";try{ChonkyPresentationLayer_ChonkyPresentationLayer.displayName="ChonkyPresentationLayer",ChonkyPresentationLayer_ChonkyPresentationLayer.__docgenInfo={description:"",displayName:"ChonkyPresentationLayer",props:{validationErrors:{defaultValue:null,description:"",name:"validationErrors",required:!0,type:{name:"ErrorMessageData[]"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/ChonkyPresentationLayer.tsx#ChonkyPresentationLayer"]={docgenInfo:ChonkyPresentationLayer_ChonkyPresentationLayer.__docgenInfo,name:"ChonkyPresentationLayer",path:"src/components/internal/ChonkyPresentationLayer.tsx#ChonkyPresentationLayer"})}catch(__react_docgen_typescript_loader_error){}function FileBrowser_toConsumableArray(arr){return function FileBrowser_arrayWithoutHoles(arr){if(Array.isArray(arr))return FileBrowser_arrayLikeToArray(arr)}(arr)||function FileBrowser_iterableToArray(iter){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(iter))return Array.from(iter)}(arr)||function FileBrowser_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return FileBrowser_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return FileBrowser_arrayLikeToArray(o,minLen)}(arr)||function FileBrowser_nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function FileBrowser_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var FileBrowser_FileBrowser=function FileBrowser(props){var files=props.files,children=props.children,folderChain=props.folderChain?props.folderChain:null,fileActions=props.fileActions?props.fileActions:[],disableDefaultFileActions=!!props.disableDefaultFileActions,_useFileArrayValidati=function useFileArrayValidation(files,folderChain){var _useMemo=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var errorMessages=[],cleanFilesResult=cleanupFileArray(files,!1);if(cleanFilesResult.warningMessage){var errorMessage='The "files" prop passed to FileBrowser did not pass validation. '+"".concat(cleanFilesResult.warningMessage," ")+"The following errors were encountered:";Logger.error(errorMessage,Logger.formatBullets(cleanFilesResult.warningBullets)),errorMessages.push({message:errorMessage,bullets:cleanFilesResult.warningBullets})}return{cleanFiles:cleanFilesResult.cleanFileArray,errorMessages:errorMessages}}),[files]),cleanFiles=_useMemo.cleanFiles,filesErrorMessages=_useMemo.errorMessages,_useMemo2=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var errorMessages=[],cleanFolderChainResult=cleanupFileArray(folderChain,!0);if(cleanFolderChainResult.warningMessage){var errorMessage='The "folderChain" prop passed to FileBrowser did not pass validation. '+"".concat(cleanFolderChainResult.warningMessage," ")+"The following errors were encountered:";Logger.error(errorMessage,Logger.formatBullets(cleanFolderChainResult.warningBullets)),errorMessages.push({message:errorMessage,bullets:cleanFolderChainResult.warningBullets})}return{cleanFolderChain:cleanFolderChainResult.cleanFileArray,errorMessages:errorMessages}}),[folderChain]),cleanFolderChain=_useMemo2.cleanFolderChain,folderChainErrorMessages=_useMemo2.errorMessages;return{cleanFiles:cleanFiles,cleanFolderChain:cleanFolderChain,errorMessages:[].concat(_toConsumableArray(filesErrorMessages),_toConsumableArray(folderChainErrorMessages))}}(files,folderChain),cleanFiles=_useFileArrayValidati.cleanFiles,cleanFolderChain=_useFileArrayValidati.cleanFolderChain,fileArrayErrors=_useFileArrayValidati.errorMessages,_useFileActionsValida=validation_useFileActionsValidation(fileActions,DefaultFileActions,!disableDefaultFileActions),cleanFileActions=_useFileActionsValida.cleanFileActions,fileActionsErrors=_useFileActionsValida.errorMessages,validationErrors=[].concat(FileBrowser_toConsumableArray(fileArrayErrors),FileBrowser_toConsumableArray(fileActionsErrors)),businessLogicProps=Object.assign({},props,{files:cleanFiles,folderChain:cleanFolderChain,fileActions:cleanFileActions});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(dist.RecoilRoot,null,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyBusinessLogic,businessLogicProps),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyPresentationLayer_ChonkyPresentationLayer,{validationErrors:validationErrors},children))};FileBrowser_FileBrowser.displayName="FileBrowser";try{FileBrowser_FileBrowser.displayName="FileBrowser",FileBrowser_FileBrowser.__docgenInfo={description:"",displayName:"FileBrowser",props:{files:{defaultValue:null,description:"List of files that will be displayed in the main container. The provided value\n**must** be an array, where each element is either `null` or an object that\nsatisfies the `FileData` type. If an element is `null`, a loading placeholder\nwill be displayed in its place.",name:"files",required:!0,type:{name:"FileArray"}},folderChain:{defaultValue:null,description:"The current folder hierarchy. This should be an array of `files`, every\nelement should either be `null` or an object of `FileData` type. The first\nelement should represent the top-level directory, and the last element\nshould be the current folder.",name:"folderChain",required:!1,type:{name:"FileArray | null | undefined"}},fileActions:{defaultValue:null,description:"",name:"fileActions",required:!1,type:{name:"FileAction[] | undefined"}},onFileAction:{defaultValue:null,description:"",name:"onFileAction",required:!1,type:{name:"FileActionHandler | undefined"}},thumbnailGenerator:{defaultValue:null,description:"The function that determines the thumbnail image URL for a file. It gets a file object as the input, and\nshould return a `string` or `null`. It can also return a promise that resolves into a `string` or `null`.\n[See relevant section](#section-displaying-file-thumbnails).",name:"thumbnailGenerator",required:!1,type:{name:"ThumbnailGenerator | undefined"}},doubleClickDelay:{defaultValue:null,description:"Maximum delay between the two clicks in a double click, in milliseconds.",name:"doubleClickDelay",required:!1,type:{name:"number | undefined"}},disableSelection:{defaultValue:null,description:"The flag that completely disables file selection functionality. If any handlers depend on file selections, their\ninput will look like no files are selected.",name:"disableSelection",required:!1,type:{name:"boolean | undefined"}},disableDefaultFileActions:{defaultValue:null,description:"",name:"disableDefaultFileActions",required:!1,type:{name:"boolean | undefined"}},enableDragAndDrop:{defaultValue:null,description:"The flag that completely disables drag & drop functionality.\n[See relevant section](#section-managing-file-selection).",name:"enableDragAndDrop",required:!1,type:{name:"boolean | undefined"}},fillParentContainer:{defaultValue:null,description:"The flag that determines whether Chonky should fill the height parent container. When set to `true`, the maximum\nheight of the file browser will be limited to the height of the parent container, and scrollbar will be shown\nwhen necessary. When set to `false`, file browser height will be extended to display all files at the same time.",name:"fillParentContainer",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileBrowser.tsx#FileBrowser"]={docgenInfo:FileBrowser_FileBrowser.__docgenInfo,name:"FileBrowser",path:"src/components/external/FileBrowser.tsx#FileBrowser"})}catch(__react_docgen_typescript_loader_error){}var delegated_prop_typesfrom_dll_reference_storybook_docs_dll=__webpack_require__(9),delegated_prop_typesfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_prop_typesfrom_dll_reference_storybook_docs_dll);function FileToolbar_hooks_createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=function FileToolbar_hooks_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return FileToolbar_hooks_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return FileToolbar_hooks_arrayLikeToArray(o,minLen)}(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function FileToolbar_hooks_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var FileToolbar_hooks_useFolderChainComponent=function useFolderChainComponent(){var folderChain=Object(dist.useRecoilValue)(folderChainState),dispatchSpecialAction=Object(dist.useRecoilValue)(dispatchSpecialActionState);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){if(!folderChain)return folderChain;for(var comps=new Array(Math.max(0,2*folderChain.length-1)),_loop=function _loop(i){var file=folderChain[i],isLast=i===folderChain.length-1,j=2*i,compProps={key:"folder-chain-entry-".concat(j),className:classnames_default()({"chonky-folder-chain-entry":!0,"chonky-loading":!file})};file_helper_FileHelper.isOpenable(file)&&!isLast&&(compProps.onClick=function(){dispatchSpecialAction({actionId:SpecialAction.OpenFolderChainFolder,file:file})});var TagToUse=compProps.onClick?"button":"div";comps[j]=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(TagToUse,compProps,0===j&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-text-subtle-dark"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:ChonkyIconName.folder}),"  "),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-folder-chain-entry-name"},file?file.name:"Loading...")),isLast||(comps[j+1]=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{key:"folder-chain-separator-".concat(j),className:"chonky-folder-chain-separator"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:ChonkyIconName.folderChainSeparator,size:"xs"})))},i=0;i<folderChain.length;++i)_loop(i);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-folder-chain"},comps)}),[folderChain,dispatchSpecialAction])};try{FileToolbar_hooks_useFolderChainComponent.displayName="useFolderChainComponent",FileToolbar_hooks_useFolderChainComponent.__docgenInfo={description:"Generates folder chain HTML components for the `FileToolbar` component.",displayName:"useFolderChainComponent",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileToolbar-hooks.tsx#useFolderChainComponent"]={docgenInfo:FileToolbar_hooks_useFolderChainComponent.__docgenInfo,name:"useFolderChainComponent",path:"src/components/external/FileToolbar-hooks.tsx#useFolderChainComponent"})}catch(__react_docgen_typescript_loader_error){}var DropdownButton=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var text=props.text,tooltip=props.tooltip,icon=props.icon,onClick=props.onClick,disabled=props.disabled;return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("button",{className:"chonky-toolbar-dropdown-button",onClick:onClick,title:tooltip||text,disabled:!onClick||disabled},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-dropdown-button-icon"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:icon||ChonkyIconName.fallbackIcon,fixedWidth:!0})),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-dropdown-button-text"},text))})),DropdownButton_SmartDropdownButton=function SmartDropdownButton(props){var fileActionId=props.fileActionId,action=Object(dist.useRecoilValue)(fileActionDataState(fileActionId)),triggerAction=file_actions_useFileActionTrigger(fileActionId),disabled=file_actions_useFileActionModifiers(fileActionId).disabled;if(!action)return null;var button=action.toolbarButton;return button?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(DropdownButton,{text:button.name,tooltip:button.tooltip,icon:button.icon,onClick:triggerAction,disabled:disabled}):null};DropdownButton_SmartDropdownButton.displayName="SmartDropdownButton";try{DropdownButton.displayName="DropdownButton",DropdownButton.__docgenInfo={description:"",displayName:"DropdownButton",props:{text:{defaultValue:null,description:"",name:"text",required:!0,type:{name:"string"}},tooltip:{defaultValue:null,description:"",name:"tooltip",required:!1,type:{name:"string | undefined"}},icon:{defaultValue:null,description:"",name:"icon",required:!1,type:{name:"string | undefined"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"(() => void) | undefined"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/DropdownButton.tsx#DropdownButton"]={docgenInfo:DropdownButton.__docgenInfo,name:"DropdownButton",path:"src/components/external/DropdownButton.tsx#DropdownButton"})}catch(__react_docgen_typescript_loader_error){}try{DropdownButton_SmartDropdownButton.displayName="SmartDropdownButton",DropdownButton_SmartDropdownButton.__docgenInfo={description:"",displayName:"SmartDropdownButton",props:{fileActionId:{defaultValue:null,description:"",name:"fileActionId",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/DropdownButton.tsx#SmartDropdownButton"]={docgenInfo:DropdownButton_SmartDropdownButton.__docgenInfo,name:"SmartDropdownButton",path:"src/components/external/DropdownButton.tsx#SmartDropdownButton"})}catch(__react_docgen_typescript_loader_error){}var ToolbarButton=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var text=props.text,tooltip=props.tooltip,active=props.active,icon=props.icon,iconOnly=props.iconOnly,iconOnRight=props.iconOnRight,onClick=props.onClick,disabled=props.disabled,iconComponent=icon||iconOnly?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-button-icon"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:icon||ChonkyIconName.fallbackIcon,fixedWidth:!0})):null,className=classnames_default()({"chonky-toolbar-button":!0,"chonky-active":!!active});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("button",{className:className,onClick:onClick,title:tooltip||text,disabled:!onClick||disabled},!iconOnRight&&iconComponent,text&&!iconOnly&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-button-text"},text),iconOnRight&&iconComponent)})),SmartToolbarButton=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var fileActionId=props.fileActionId,action=Object(dist.useRecoilValue)(fileActionDataState(fileActionId)),triggerAction=file_actions_useFileActionTrigger(fileActionId),_useFileActionModifie=file_actions_useFileActionModifiers(fileActionId),active=_useFileActionModifie.active,disabled=_useFileActionModifie.disabled;if(!action)return null;var button=action.toolbarButton;return button?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ToolbarButton,{text:button.name,tooltip:button.tooltip,icon:button.icon,iconOnly:button.iconOnly,active:active,onClick:triggerAction,disabled:disabled}):null}));try{ToolbarButton.displayName="ToolbarButton",ToolbarButton.__docgenInfo={description:"",displayName:"ToolbarButton",props:{text:{defaultValue:null,description:"",name:"text",required:!0,type:{name:"string"}},tooltip:{defaultValue:null,description:"",name:"tooltip",required:!1,type:{name:"string | undefined"}},active:{defaultValue:null,description:"",name:"active",required:!1,type:{name:"boolean | undefined"}},icon:{defaultValue:null,description:"",name:"icon",required:!1,type:{name:"string | undefined"}},iconOnly:{defaultValue:null,description:"",name:"iconOnly",required:!1,type:{name:"boolean | undefined"}},iconOnRight:{defaultValue:null,description:"",name:"iconOnRight",required:!1,type:{name:"boolean | undefined"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"(() => void) | undefined"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/ToolbarButton.tsx#ToolbarButton"]={docgenInfo:ToolbarButton.__docgenInfo,name:"ToolbarButton",path:"src/components/external/ToolbarButton.tsx#ToolbarButton"})}catch(__react_docgen_typescript_loader_error){}try{SmartToolbarButton.displayName="SmartToolbarButton",SmartToolbarButton.__docgenInfo={description:"",displayName:"SmartToolbarButton",props:{fileActionId:{defaultValue:null,description:"",name:"fileActionId",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/ToolbarButton.tsx#SmartToolbarButton"]={docgenInfo:SmartToolbarButton.__docgenInfo,name:"SmartToolbarButton",path:"src/components/external/ToolbarButton.tsx#SmartToolbarButton"})}catch(__react_docgen_typescript_loader_error){}function Dropdown_slicedToArray(arr,i){return function Dropdown_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function Dropdown_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function Dropdown_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return Dropdown_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Dropdown_arrayLikeToArray(o,minLen)}(arr,i)||function Dropdown_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Dropdown_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var Dropdown=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var group=props.group,_useState2=Dropdown_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(!1),2),showDropdown=_useState2[0],setShowDropdown=_useState2[1],hideDropdown=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(){return setShowDropdown(!1)}),[setShowDropdown]),dropdownRef=hooks_helpers_useClickListener({onOutsideClick:hideDropdown}),triggerClick=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(){setShowDropdown(!0)}),[setShowDropdown]);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{ref:dropdownRef,className:"chonky-toolbar-dropdown"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ToolbarButton,{text:group.name,active:showDropdown,icon:ChonkyIconName.dropdown,iconOnRight:!0,onClick:triggerClick}),showDropdown&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-dropdown-content"},group.fileActionIds.map((function(actionId){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(DropdownButton_SmartDropdownButton,{key:"action-button-".concat(actionId),fileActionId:actionId})}))))}));try{Dropdown.displayName="Dropdown",Dropdown.__docgenInfo={description:"",displayName:"Dropdown",props:{group:{defaultValue:null,description:"",name:"group",required:!0,type:{name:"ActionGroupData"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/Dropdown.tsx#Dropdown"]={docgenInfo:Dropdown.__docgenInfo,name:"Dropdown",path:"src/components/external/Dropdown.tsx#Dropdown"})}catch(__react_docgen_typescript_loader_error){}var ToolbarButtonGroup=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var groupContents,group=props.group;return groupContents=group.dropdown?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(Dropdown,{group:group}):group.fileActionIds.map((function(actionId){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(SmartToolbarButton,{key:"action-button-".concat(actionId),fileActionId:actionId})})),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-button-group"},groupContents)}));try{ToolbarButtonGroup.displayName="ToolbarButtonGroup",ToolbarButtonGroup.__docgenInfo={description:"",displayName:"ToolbarButtonGroup",props:{group:{defaultValue:null,description:"",name:"group",required:!0,type:{name:"ActionGroupData"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/ToolbarButtonGroup.tsx#ToolbarButtonGroup"]={docgenInfo:ToolbarButtonGroup.__docgenInfo,name:"ToolbarButtonGroup",path:"src/components/external/ToolbarButtonGroup.tsx#ToolbarButtonGroup"})}catch(__react_docgen_typescript_loader_error){}var FileToolbar=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(){var searchBarEnabled=Object(dist.useRecoilValue)(searchBarEnabledState),folderChainComp=FileToolbar_hooks_useFolderChainComponent(),_useActionGroups=function useActionGroups(){var fileActions=Object(dist.useRecoilValue)(fileActionsState);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var _step,buttonGroups=[],buttonGroupMap={},openParentFolderButtonGroup=null,searchButtonGroup=null,_iterator=FileToolbar_hooks_createForOfIteratorHelper(fileActions);try{for(_iterator.s();!(_step=_iterator.n()).done;){var action=_step.value;if(action.toolbarButton){var button=action.toolbarButton,group=void 0;button.group?buttonGroupMap[button.group]?((group=buttonGroupMap[button.group]).dropdown=group.dropdown||button.dropdown,group.fileActionIds.push(action.id)):(group={name:button.group,dropdown:button.dropdown,fileActionIds:[action.id]},buttonGroups.push(group),buttonGroupMap[group.name]=group):(group={name:button.group,dropdown:button.dropdown,fileActionIds:[action.id]},action.id===ChonkyActions.OpenParentFolder.id?openParentFolderButtonGroup=group:action.id===ChonkyActions.ToggleSearch.id?searchButtonGroup=group:buttonGroups.push(group))}}}catch(err){_iterator.e(err)}finally{_iterator.f()}return{buttonGroups:buttonGroups,openParentFolderButtonGroup:openParentFolderButtonGroup,searchButtonGroup:searchButtonGroup}}),[fileActions])}(),buttonGroups=_useActionGroups.buttonGroups,openParentFolderButtonGroup=_useActionGroups.openParentFolderButtonGroup,searchButtonGroup=_useActionGroups.searchButtonGroup;return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-side chonky-toolbar-side-left"},openParentFolderButtonGroup&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ToolbarButtonGroup,{group:openParentFolderButtonGroup}),folderChainComp),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-side chonky-toolbar-side-right"},buttonGroups.map((function(group,index){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ToolbarButtonGroup,{key:"button-group-".concat(group.name?group.name:index),group:group})})),searchBarEnabled&&searchButtonGroup&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ToolbarButtonGroup,{group:searchButtonGroup})))}));FileToolbar.propTypes={folderChain:delegated_prop_typesfrom_dll_reference_storybook_docs_dll_default.a.arrayOf(delegated_prop_typesfrom_dll_reference_storybook_docs_dll_default.a.oneOfType([delegated_prop_typesfrom_dll_reference_storybook_docs_dll_default.a.string.isRequired,delegated_prop_typesfrom_dll_reference_storybook_docs_dll_default.a.oneOf([null]).isRequired]))};try{FileToolbar.displayName="FileToolbar",FileToolbar.__docgenInfo={description:"",displayName:"FileToolbar",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileToolbar.tsx#FileToolbar"]={docgenInfo:FileToolbar.__docgenInfo,name:"FileToolbar",path:"src/components/external/FileToolbar.tsx#FileToolbar"})}catch(__react_docgen_typescript_loader_error){}__webpack_require__(97);function FileSearch_slicedToArray(arr,i){return function FileSearch_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function FileSearch_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function FileSearch_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return FileSearch_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return FileSearch_arrayLikeToArray(o,minLen)}(arr,i)||function FileSearch_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function FileSearch_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var FileSearch_FileSearch=function FileSearch(){var setSearchBarEnabled=Object(dist.useSetRecoilState)(searchBarEnabledState),searchBarVisible=Object(dist.useRecoilValue)(searchBarVisibleState),_useRecoilState2=FileSearch_slicedToArray(Object(dist.useRecoilState)(searchFilterState),2),globalSearchFilter=_useRecoilState2[0],setGlobalSearchFilter=_useRecoilState2[1];Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){return setSearchBarEnabled(!0),function(){return setSearchBarEnabled(!1)}}),[setSearchBarEnabled]);var _useState2=FileSearch_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(!1),2),showLoadingIndicator=_useState2[0],setShowLoadingIndicator=_useState2[1],_useState4=FileSearch_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(globalSearchFilter),2),localFilter=_useState4[0],setLocalFilter=_useState4[1],_useDebounce2=FileSearch_slicedToArray(function useDebounce(value,delay){var _useState2=hooks_helpers_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(value),2),debouncedValue=_useState2[0],setDebouncedValue=_useState2[1];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){var handler=setTimeout((function(){setDebouncedValue(value)}),delay);return function(){clearTimeout(handler)}}),[value,delay]),[debouncedValue,setDebouncedValue]}(localFilter,500),2),debouncedFilter=_useDebounce2[0],setDebouncedFilter=_useDebounce2[1];Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){setShowLoadingIndicator(!1);var trimmedFilter=debouncedFilter.trim();setGlobalSearchFilter(trimmedFilter)}),[debouncedFilter,setShowLoadingIndicator,setGlobalSearchFilter]);var inputRef=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.useRef(null);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){searchBarVisible?inputRef.current&&inputRef.current.focus():(setShowLoadingIndicator(!1),setLocalFilter(""),setDebouncedFilter(""))}),[inputRef,searchBarVisible,setShowLoadingIndicator,setLocalFilter,setDebouncedFilter]);var handleInputChange=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){setShowLoadingIndicator(!0),setLocalFilter(event.target.value)}),[setShowLoadingIndicator,setLocalFilter]),className=classnames_default()({"chonky-file-search":!0,"chonky-file-search-hidden":!searchBarVisible});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:className},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-search-input-group"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("label",{htmlFor:"chonky-file-search"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:ChonkyIconName.search,fixedWidth:!0})),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("input",{ref:inputRef,type:"text",id:"chonky-file-search",value:localFilter,placeholder:"Type to search...",onChange:handleInputChange}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-search-input-group-loading"},showLoadingIndicator&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-file-search-input-group-loading-indicator"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:ChonkyIconName.loading,spin:!0})))))};FileSearch_FileSearch.displayName="FileSearch";try{FileSearch_FileSearch.displayName="FileSearch",FileSearch_FileSearch.__docgenInfo={description:"",displayName:"FileSearch",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileSearch.tsx#FileSearch"]={docgenInfo:FileSearch_FileSearch.__docgenInfo,name:"FileSearch",path:"src/components/external/FileSearch.tsx#FileSearch"})}catch(__react_docgen_typescript_loader_error){}var FileList=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(){var files=Object(dist.useRecoilValue)(filesState),entrySize=Object(dist.useRecoilValue)(fileEntrySizeState),entryRenderer=FileList_virtualization_useEntryRenderer(files),thumbsGridRef=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useRef)(),gridRenderer=FileList_virtualization_useGridRenderer(files,entrySize,entryRenderer,thumbsGridRef,!0);if(!files){var errorMessage="".concat(FileList.name,' cannot find the "files" array via React context. This ')+"happens when ".concat(FileList.name,' is placed outside of "FileBrowser"')+"component.";return Logger.error(errorMessage),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ErrorMessage,{message:errorMessage})}return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-list",style:{minHeight:entrySize.height}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(es.a,{disableHeight:!1},gridRenderer))}));try{FileList.displayName="FileList",FileList.__docgenInfo={description:"",displayName:"FileList",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileList.tsx#FileList"]={docgenInfo:FileList.__docgenInfo,name:"FileList",path:"src/components/external/FileList.tsx#FileList"})}catch(__react_docgen_typescript_loader_error){}__webpack_require__(148),__webpack_require__(107),__webpack_require__(294),__webpack_require__(295)},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return StoryCategories})),__webpack_require__.d(__webpack_exports__,"b",(function(){return story_helpers_createDocsObject})),__webpack_require__.d(__webpack_exports__,"c",(function(){return story_helpers_showActionNotification}));__webpack_require__(4),__webpack_require__(13),__webpack_require__(24),__webpack_require__(14),__webpack_require__(73),__webpack_require__(29),__webpack_require__(22),__webpack_require__(16),__webpack_require__(20),__webpack_require__(39),__webpack_require__(26),__webpack_require__(18),__webpack_require__(23),__webpack_require__(5),__webpack_require__(6),__webpack_require__(12),__webpack_require__(32),__webpack_require__(25),__webpack_require__(19),__webpack_require__(97),__webpack_require__(21),__webpack_require__(613),__webpack_require__(615),__webpack_require__(617);var StoryCategories,blocks=__webpack_require__(40),utils=__webpack_require__(94),dist=__webpack_require__(52),lib_noty=__webpack_require__(296),lib_noty_default=__webpack_require__.n(lib_noty),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),DndProvider=__webpack_require__(764),esm=__webpack_require__(204);function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}!function(StoryCategories){StoryCategories.Welcome="1) Welcome",StoryCategories.Demos="2) Demos",StoryCategories.FileBrowserBasics="3) File Browser basics",StoryCategories.FileBrowserExamples="4) File Browser examples",StoryCategories.ApiReference="5) API Reference"}(StoryCategories||(StoryCategories={}));var story_helpers_createDocsObject=function createDocsObject(params){var markdown=params.markdown;return{page:function page(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.Fragment,null,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(DndProvider.a,{backend:esm.a},story_helpers_parseMarkdown('<div class="unstable-warning">\n\n> Chonky `1.x` is still in beta. If you found a bug or want to request a feature, please\n> [create an issue](https://github.com/TimboKZ/Chonky/issues) on GitHub.\n\n</div>\n'),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(blocks.Title,null),story_helpers_parseMarkdown(markdown),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(story_helpers_CustomPrimary,null),story_helpers_parseMarkdown("### A note about live examples...\n\nAll live examples are written in Typescript. All components and types are imported\nfrom the `chonky` package, e.g.:\n\n```ts\nimport 'chonky/style/main.css';\nimport { FileBrowser, FileToolbar, FileList, FileData } from 'chonky';\n```\n\nThe only exception is the `showActionNotification()` function, which calls\n[the Noty notification library](https://ned.im/noty/) (not packaged with Chonky). To\nrun the examples locally, you can replace `showActionNotification()` with\n`console.log()`.\n")))}}},story_helpers_CustomPrimary=function CustomPrimary(_ref){var story,name=_ref.name,context=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(blocks.DocsContext),componentStories=Object(utils.getDocsStories)(context);return componentStories&&(story=name?componentStories.find((function(s){return s.name===name})):componentStories[0]),story?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(blocks.DocsStory,_extends({},story,{expanded:!1})):null},story_helpers_parseMarkdown=function parseMarkdown(markdown){var _step,occurrences=[],_iterator=function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e2){throw _e2},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e3){didErr=!0,err=_e3},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}(getIndicesOf("```",markdown));try{for(_iterator.s();!(_step=_iterator.n()).done;){var index=_step.value,lineEnd=markdown.indexOf("\n",index),line=markdown.substring(index,lineEnd).trim(),opening_matches=/^```([a-z-]+)(\s+{.*?})?$/i.exec(line);if(opening_matches){var _opening_matches=_slicedToArray(opening_matches,3),language=_opening_matches[1],jsonConfig=_opening_matches[2];occurrences.push({type:"start",language:language,jsonConfig:jsonConfig,markdownEnd:index,codeStart:lineEnd+1})}else/^```$/i.exec(line)&&occurrences.push({type:"end",codeEnd:index,markdownStart:lineEnd+1})}}catch(err){_iterator.e(err)}finally{_iterator.f()}for(var components=[],markdownStart=0,i=0;i<occurrences.length-1;++i){var start=occurrences[i],end=occurrences[i+1];if("start"===start.type&&"end"===end.type){i+=1;var mdSlice=markdown.substring(markdownStart,start.markdownEnd),codeSlice=markdown.substring(start.codeStart,end.codeEnd);components.push(story_helpers_prepareMarkdownComp(i,mdSlice)),components.push(story_helpers_prepareCodeComp(i,start.language,codeSlice,start.jsonConfig)),markdownStart=end.markdownStart}}return components.push(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(blocks.Description,{key:"markdown-last",markdown:markdown.substring(markdownStart)})),components},story_helpers_prepareMarkdownComp=function prepareMarkdownComp(index,markdown){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(blocks.Description,{key:"md-".concat(index),markdown:markdown})};story_helpers_prepareMarkdownComp.displayName="prepareMarkdownComp";var story_helpers_prepareCodeComp=function prepareCodeComp(index,language,code,jsonConfig){var displayCode,key="code-".concat(2*index+1);return displayCode=jsonConfig?"Sorry, JSON config loading is currently not supported. "+"\nYour config: ".concat(jsonConfig):code,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(dist.Source,{key:key,language:language,code:displayCode})};story_helpers_prepareCodeComp.displayName="prepareCodeComp";var getIndicesOf=function getIndicesOf(needle,haystack){var index,searchStrLen=needle.length;if(0==searchStrLen)return[];for(var startIndex=0,indices=[];(index=haystack.indexOf(needle,startIndex))>-1;)indices.push(index),startIndex=index+searchStrLen;return indices},story_helpers_showActionNotification=function showActionNotification(params){var action=params.action,data=params.data,textParts=[];if(textParts.push("<b>Action:</b> ".concat(action.id)),data.target&&textParts.push("<b>Target:</b> <code>".concat(data.target.name,"</code>")),data.files){var fileComps=data.files.map((function(f){return f.name})).map((function(name){return"<code>".concat(name,"</code>")})),fileCount=fileComps.length,fileTitle="".concat(fileCount," ").concat(1===fileCount?"file":"files",":");textParts.push("<b>".concat(fileTitle,"</b> [").concat(fileComps.join(", "),"]"))}var text=textParts.join("<br/>");new lib_noty_default.a({text:text,type:"success",theme:"relax",timeout:3e3}).show()};try{story_helpers_createDocsObject.displayName="createDocsObject",story_helpers_createDocsObject.__docgenInfo={description:"",displayName:"createDocsObject",props:{markdown:{defaultValue:null,description:"",name:"markdown",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/story-helpers.tsx#createDocsObject"]={docgenInfo:story_helpers_createDocsObject.__docgenInfo,name:"createDocsObject",path:"stories/story-helpers.tsx#createDocsObject"})}catch(__react_docgen_typescript_loader_error){}try{story_helpers_CustomPrimary.displayName="CustomPrimary",story_helpers_CustomPrimary.__docgenInfo={description:"",displayName:"CustomPrimary",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/story-helpers.tsx#CustomPrimary"]={docgenInfo:story_helpers_CustomPrimary.__docgenInfo,name:"CustomPrimary",path:"stories/story-helpers.tsx#CustomPrimary"})}catch(__react_docgen_typescript_loader_error){}try{story_helpers_showActionNotification.displayName="showActionNotification",story_helpers_showActionNotification.__docgenInfo={description:"",displayName:"showActionNotification",props:{action:{defaultValue:null,description:"",name:"action",required:!0,type:{name:"FileAction"}},data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"FileActionData"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/story-helpers.tsx#showActionNotification"]={docgenInfo:story_helpers_showActionNotification.__docgenInfo,name:"showActionNotification",path:"stories/story-helpers.tsx#showActionNotification"})}catch(__react_docgen_typescript_loader_error){}},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("aWzz")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("+KXO")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("7x/C")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("jQ/y")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("2G9S")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("plBw")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("M+/F")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("87if")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("lTEL")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("kYxP")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("vrRf")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("cARO")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("aLgo")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("DZ+c")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("z84I")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("hCOa")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("UvmB")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("KqXw")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("LW0h")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("NyMY")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("aokA")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("7xRU")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("lN5B")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("MvUL")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("jwue")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("+oxZ")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Ysgh")},function(module,exports,__webpack_require__){var api=__webpack_require__(139),content=__webpack_require__(748);"string"==typeof(content=content.__esModule?content.default:content)&&(content=[[module.i,content,""]]);var options={insert:"head",singleton:!1};api(content,options);module.exports=content.locals||{}},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("EgRP")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("KOtZ")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("yH/f")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("fRV1")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("HUCg")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Yct5")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("jQ3i")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("1Iuc")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("7nmT")},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return MDXContent}));__webpack_require__(4),__webpack_require__(22),__webpack_require__(6),__webpack_require__(10),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",{style:{textAlign:"center"}},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{src:"./Chonky_clear.png",alt:"Chonky logo",style:{width:500}}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",{href:"https://www.npmjs.com/package/chonky",target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{alt:"NPM package",src:"https://img.shields.io/npm/v/chonky.svg"})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",{href:"https://tldrlegal.com/license/mit-license",style:{marginLeft:5},target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{alt:"MIT license",src:"https://img.shields.io/npm/l/chonky"})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",{href:"https://www.npmjs.com/package/chonky",style:{marginLeft:5},target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{alt:"NPM downloads",src:"https://img.shields.io/npm/dt/chonky"})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",{href:"https://github.com/TimboKZ/Chonky",style:{marginLeft:5},target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{alt:"GitHub stars",src:"https://img.shields.io/github/stars/TimboKZ/Chonky"})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",{href:"https://discord.gg/4HJaFn9",style:{marginLeft:5},target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{alt:"Chat on Discord",src:"https://img.shields.io/discord/696033621986770957?label=Chat%20on%20Discord"})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null)),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",{class:"unstable-warning"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("blockquote",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",{parentName:"blockquote"},"Chonky ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"p"},"1.x")," is still in beta. If you found a bug or want to request a feature, please\n",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"p"},{href:"https://github.com/TimboKZ/Chonky/issues",target:"_blank",rel:"nofollow noopener noreferrer"}),"create an issue")," on GitHub."))))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("A3UQ")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("hBpG")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("x4t0")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("LJOr")},,,,function(module){module.exports=JSON.parse('{"rootFolderId":"e598a85f843c","fileMap":{"e598a85f843c":{"id":"e598a85f843c","name":"Chonky Source Code","isDir":true,"modDate":"2020-06-26T15:21:14.838Z","childrenIds":["9514a3d74d57","ed918037b975","66a43bf5cc8e","bfd2d437f45d","c21e08daf308","e4820c1b4ffb","0729af954fe6","a1361e98e01d","12dd195bb146","f4a747f4304b","bf3277c59175","24c33e69f0f1","a3a6f4860f0a","3710ab721ac1","ed2b6126cf96","da51714da4cb","c58b591bd793","eca6a4fd0d17","d14aa4c43d90"],"childrenCount":19},"9514a3d74d57":{"id":"9514a3d74d57","name":".eslintrc.js","isHidden":true,"size":2293,"modDate":"2020-06-21T17:59:01.227Z","parentId":"e598a85f843c"},"ed918037b975":{"id":"ed918037b975","name":".gitignore","isHidden":true,"size":347,"modDate":"2020-06-12T14:19:32.296Z","parentId":"e598a85f843c"},"66a43bf5cc8e":{"id":"66a43bf5cc8e","name":".idea","isDir":true,"isHidden":true,"modDate":"2020-06-13T12:43:14.712Z","parentId":"e598a85f843c","childrenIds":["8d6ce0b0a6dd","a34370531a44","a66ae2d0a6c4","6a6c981f3e92","4f75cddd4e84","dd2acebd398d","13a987e2d8a0","0d692935bc2c","5347429384da","86115376bf15"],"childrenCount":10},"8d6ce0b0a6dd":{"id":"8d6ce0b0a6dd","name":"Chonky.iml","size":611,"modDate":"2020-06-14T01:22:30.528Z","parentId":"66a43bf5cc8e"},"a34370531a44":{"id":"a34370531a44","name":"codeStyles","isDir":true,"modDate":"2020-06-12T17:58:12.380Z","parentId":"66a43bf5cc8e","childrenIds":["33ee85cd3229"],"childrenCount":1},"33ee85cd3229":{"id":"33ee85cd3229","name":"codeStyleConfig.xml","size":149,"modDate":"2020-06-12T17:58:12.376Z","parentId":"a34370531a44"},"a66ae2d0a6c4":{"id":"a66ae2d0a6c4","name":"dictionaries","isDir":true,"modDate":"2020-06-12T15:58:35.331Z","parentId":"66a43bf5cc8e","childrenIds":["aa766b7e0976"],"childrenCount":1},"aa766b7e0976":{"id":"aa766b7e0976","name":"euql1n.xml","size":438,"modDate":"2020-06-26T15:21:51.690Z","parentId":"a66ae2d0a6c4"},"6a6c981f3e92":{"id":"6a6c981f3e92","name":"inspectionProfiles","isDir":true,"modDate":"2020-06-12T14:29:23.871Z","parentId":"66a43bf5cc8e","childrenIds":["a38e4ef2445a"],"childrenCount":1},"a38e4ef2445a":{"id":"a38e4ef2445a","name":"Project_Default.xml","size":751,"modDate":"2020-06-13T13:21:28.855Z","parentId":"6a6c981f3e92"},"4f75cddd4e84":{"id":"4f75cddd4e84","name":"jsLibraryMappings.xml","size":201,"modDate":"2020-06-14T01:22:30.532Z","parentId":"66a43bf5cc8e"},"dd2acebd398d":{"id":"dd2acebd398d","name":"misc.xml","size":174,"modDate":"2020-06-12T16:11:09.680Z","parentId":"66a43bf5cc8e"},"13a987e2d8a0":{"id":"13a987e2d8a0","name":"modules.xml","size":264,"modDate":"2020-06-12T14:20:32.603Z","parentId":"66a43bf5cc8e"},"0d692935bc2c":{"id":"0d692935bc2c","name":"vcs.xml","size":180,"modDate":"2020-06-12T14:38:57.574Z","parentId":"66a43bf5cc8e"},"5347429384da":{"id":"5347429384da","name":"watcherTasks.xml","size":1999,"modDate":"2020-06-14T01:04:10.509Z","parentId":"66a43bf5cc8e"},"86115376bf15":{"id":"86115376bf15","name":"workspace.xml","size":18623,"modDate":"2020-06-26T18:08:22.280Z","parentId":"66a43bf5cc8e"},"bfd2d437f45d":{"id":"bfd2d437f45d","name":".npmignore","isHidden":true,"size":93,"modDate":"2020-06-20T12:26:47.289Z","parentId":"e598a85f843c"},"c21e08daf308":{"id":"c21e08daf308","name":".prettierrc.js","isHidden":true,"size":144,"modDate":"2020-06-12T20:28:03.230Z","parentId":"e598a85f843c"},"e4820c1b4ffb":{"id":"e4820c1b4ffb","name":".storybook","isDir":true,"isHidden":true,"modDate":"2020-06-18T00:09:38.460Z","parentId":"e598a85f843c","childrenIds":["a2c867cfe659","15f87fcc0439","79ebc02f0a8e","eac842b85a33","db4896af3712","f701cec28026"],"childrenCount":6},"a2c867cfe659":{"id":"a2c867cfe659","name":"chonky-theme.js","size":241,"modDate":"2020-06-12T21:38:02.557Z","parentId":"e4820c1b4ffb"},"15f87fcc0439":{"id":"15f87fcc0439","name":"main.js","size":907,"modDate":"2020-06-26T15:20:12.315Z","parentId":"e4820c1b4ffb"},"79ebc02f0a8e":{"id":"79ebc02f0a8e","name":"manager-head.html","size":223,"modDate":"2020-06-14T03:01:32.472Z","parentId":"e4820c1b4ffb"},"eac842b85a33":{"id":"eac842b85a33","name":"manager.js","size":134,"modDate":"2020-06-12T21:52:13.495Z","parentId":"e4820c1b4ffb"},"db4896af3712":{"id":"db4896af3712","name":"preview-body.html","size":485,"modDate":"2020-06-18T00:13:22.493Z","parentId":"e4820c1b4ffb"},"f701cec28026":{"id":"f701cec28026","name":"preview.js","size":0,"modDate":"2020-06-13T01:23:58.927Z","parentId":"e4820c1b4ffb"},"0729af954fe6":{"id":"0729af954fe6","name":".travis.yml","isHidden":true,"size":314,"modDate":"2020-06-21T19:47:33.471Z","parentId":"e598a85f843c"},"a1361e98e01d":{"id":"a1361e98e01d","name":"LICENSE","size":1073,"modDate":"2020-06-12T13:57:59.718Z","parentId":"e598a85f843c"},"12dd195bb146":{"id":"12dd195bb146","name":"README.md","size":2363,"modDate":"2020-06-26T13:37:22.173Z","parentId":"e598a85f843c"},"f4a747f4304b":{"id":"f4a747f4304b","name":"assets","isDir":true,"modDate":"2020-06-14T17:38:06.097Z","parentId":"e598a85f843c","childrenIds":["1b13ddd3d93d","7823b7d6a042","b3a0f9277b35","87ee3052e8b1","001a0ad16eca","d4e9c7de41cf"],"childrenCount":6},"1b13ddd3d93d":{"id":"1b13ddd3d93d","name":"Chonky.jpg","size":15357,"modDate":"2020-06-12T20:28:03.230Z","parentId":"f4a747f4304b"},"7823b7d6a042":{"id":"7823b7d6a042","name":"Chonky_clear.png","size":44584,"modDate":"2020-06-12T20:28:03.230Z","parentId":"f4a747f4304b"},"b3a0f9277b35":{"id":"b3a0f9277b35","name":"Chonky_preview.jpg","size":116385,"modDate":"2020-06-12T20:28:03.230Z","parentId":"f4a747f4304b"},"87ee3052e8b1":{"id":"87ee3052e8b1","name":"Lenna.png","size":88235,"modDate":"2020-06-14T17:38:06.097Z","parentId":"f4a747f4304b"},"001a0ad16eca":{"id":"001a0ad16eca","name":"favicon.png","size":1977,"modDate":"2020-06-12T20:28:03.230Z","parentId":"f4a747f4304b"},"d4e9c7de41cf":{"id":"d4e9c7de41cf","name":"thumbnails","isDir":true,"modDate":"2020-06-12T20:28:03.230Z","parentId":"f4a747f4304b","childrenIds":["e8d816cde4da","ea36bcecfa6c","be9f980c918f","1a9ff633d40a","ec24f5bfdcda","16330668e816","f24e2b143a3a","aeb08813d28a","1c646b76c839","46baab60ee58","8fa9be799acc"],"childrenCount":11},"e8d816cde4da":{"id":"e8d816cde4da","name":"Chonky.jpg","size":2736,"modDate":"2020-06-12T20:28:03.230Z","parentId":"d4e9c7de41cf"},"ea36bcecfa6c":{"id":"ea36bcecfa6c","name":"Chonky_clear.jpg","size":2492,"modDate":"2020-06-12T20:28:03.230Z","parentId":"d4e9c7de41cf"},"be9f980c918f":{"id":"be9f980c918f","name":"Chonky_preview.jpg","size":9847,"modDate":"2020-06-12T20:28:03.230Z","parentId":"d4e9c7de41cf"},"1a9ff633d40a":{"id":"1a9ff633d40a","name":"Kyoto Station.jpg","size":28301,"modDate":"2020-06-12T20:28:03.230Z","parentId":"d4e9c7de41cf"},"ec24f5bfdcda":{"id":"ec24f5bfdcda","name":"Kyoto Vibes.jpg","size":20905,"modDate":"2020-06-12T20:28:03.230Z","parentId":"d4e9c7de41cf"},"16330668e816":{"id":"16330668e816","name":"Kyoto.jpg","size":18533,"modDate":"2020-06-12T20:28:03.230Z","parentId":"d4e9c7de41cf"},"f24e2b143a3a":{"id":"f24e2b143a3a","name":"Little Japanese neighborhood.jpg","size":16613,"modDate":"2020-06-12T20:28:03.230Z","parentId":"d4e9c7de41cf"},"aeb08813d28a":{"id":"aeb08813d28a","name":"Mt. Fuji.jpg","size":9308,"modDate":"2020-06-12T20:28:03.230Z","parentId":"d4e9c7de41cf"},"1c646b76c839":{"id":"1c646b76c839","name":"Tokyo Skytree.jpg","size":26430,"modDate":"2020-06-12T20:28:03.230Z","parentId":"d4e9c7de41cf"},"46baab60ee58":{"id":"46baab60ee58","name":"Yoshinoyama.jpg","size":14477,"modDate":"2020-06-12T20:28:03.230Z","parentId":"d4e9c7de41cf"},"8fa9be799acc":{"id":"8fa9be799acc","name":"favicon.jpg","size":5598,"modDate":"2020-06-12T20:28:03.230Z","parentId":"d4e9c7de41cf"},"bf3277c59175":{"id":"bf3277c59175","name":"jest.config.js","size":447,"modDate":"2020-06-21T19:53:12.354Z","parentId":"e598a85f843c"},"24c33e69f0f1":{"id":"24c33e69f0f1","name":"package-lock.json","size":890944,"modDate":"2020-06-26T15:21:14.838Z","parentId":"e598a85f843c"},"a3a6f4860f0a":{"id":"a3a6f4860f0a","name":"package.json","size":3634,"modDate":"2020-06-26T15:21:14.066Z","parentId":"e598a85f843c"},"3710ab721ac1":{"id":"3710ab721ac1","name":"src","isDir":true,"modDate":"2020-06-22T00:04:40.321Z","parentId":"e598a85f843c","childrenIds":["54610aa4ba87","020abeee6c77","74bb440256a8","6debd6f88a8c","65b108840862"],"childrenCount":5},"54610aa4ba87":{"id":"54610aa4ba87","name":"components","isDir":true,"modDate":"2020-06-22T01:58:22.864Z","parentId":"3710ab721ac1","childrenIds":["193c316d82f3","71b959393742","ab92d3babbb2"],"childrenCount":3},"193c316d82f3":{"id":"193c316d82f3","name":"external","isDir":true,"modDate":"2020-06-21T17:18:04.706Z","parentId":"54610aa4ba87","childrenIds":["4c05aa3aa10b","8ac5e2fa2d52","afb508669d8e","7d12c006d8f2","019a818f0414","ac38e4f37657","dd62fd2bc9eb","b7f5121e6bde","9beefc08b677","bde70304d1c0","46b632b342f5","37d600dc0500"],"childrenCount":12},"4c05aa3aa10b":{"id":"4c05aa3aa10b","name":"ChonkyIcon.tsx","size":7313,"modDate":"2020-06-26T13:55:35.194Z","parentId":"193c316d82f3"},"8ac5e2fa2d52":{"id":"8ac5e2fa2d52","name":"Dropdown.tsx","size":1700,"modDate":"2020-06-22T21:21:11.463Z","parentId":"193c316d82f3"},"afb508669d8e":{"id":"afb508669d8e","name":"DropdownButton.tsx","size":2028,"modDate":"2020-06-22T21:47:58.000Z","parentId":"193c316d82f3"},"7d12c006d8f2":{"id":"7d12c006d8f2","name":"FileBrowser.tsx","size":1960,"modDate":"2020-06-23T23:23:22.594Z","parentId":"193c316d82f3"},"019a818f0414":{"id":"019a818f0414","name":"FileList-virtualization.tsx","size":5858,"modDate":"2020-06-22T02:03:52.171Z","parentId":"193c316d82f3"},"ac38e4f37657":{"id":"ac38e4f37657","name":"FileList.tsx","size":1757,"modDate":"2020-06-22T00:50:24.841Z","parentId":"193c316d82f3"},"dd62fd2bc9eb":{"id":"dd62fd2bc9eb","name":"FileSearch.tsx","size":3848,"modDate":"2020-06-22T01:34:13.776Z","parentId":"193c316d82f3"},"b7f5121e6bde":{"id":"b7f5121e6bde","name":"FileToolbar-hooks.tsx","size":5550,"modDate":"2020-06-24T00:11:38.672Z","parentId":"193c316d82f3"},"9beefc08b677":{"id":"9beefc08b677","name":"FileToolbar.tsx","size":1750,"modDate":"2020-06-23T23:28:59.186Z","parentId":"193c316d82f3"},"bde70304d1c0":{"id":"bde70304d1c0","name":"TextPlaceholder.tsx","size":752,"modDate":"2020-06-16T20:59:09.219Z","parentId":"193c316d82f3"},"46b632b342f5":{"id":"46b632b342f5","name":"ToolbarButton.tsx","size":2581,"modDate":"2020-06-22T21:47:56.816Z","parentId":"193c316d82f3"},"37d600dc0500":{"id":"37d600dc0500","name":"ToolbarButtonGroup.tsx","size":1002,"modDate":"2020-06-22T21:21:11.459Z","parentId":"193c316d82f3"},"71b959393742":{"id":"71b959393742","name":"file-entry","isDir":true,"modDate":"2020-06-22T01:58:57.755Z","parentId":"54610aa4ba87","childrenIds":["1a524404e402","b07e8d67b2a4","3dd2112ff49b","f072f39b6113","5dd802ad72dc","e629bdc5d52c","6f5f4ce265c6"],"childrenCount":7},"1a524404e402":{"id":"1a524404e402","name":"BaseFileEntry-hooks.tsx","size":3790,"modDate":"2020-06-26T14:33:15.982Z","parentId":"71b959393742"},"b07e8d67b2a4":{"id":"b07e8d67b2a4","name":"BaseFileEntry.tsx","size":4531,"modDate":"2020-06-26T15:17:04.226Z","parentId":"71b959393742"},"3dd2112ff49b":{"id":"3dd2112ff49b","name":"ClickableFileEntry-hooks.tsx","size":2216,"modDate":"2020-06-26T15:28:51.732Z","parentId":"71b959393742"},"f072f39b6113":{"id":"f072f39b6113","name":"ClickableFileEntry.tsx","size":920,"modDate":"2020-06-26T15:28:51.728Z","parentId":"71b959393742"},"5dd802ad72dc":{"id":"5dd802ad72dc","name":"DnDFileEntry.tsx","size":4246,"modDate":"2020-06-22T02:25:05.108Z","parentId":"71b959393742"},"e629bdc5d52c":{"id":"e629bdc5d52c","name":"DnDFileListDragLayer.tsx","size":2860,"modDate":"2020-06-22T01:58:36.907Z","parentId":"71b959393742"},"6f5f4ce265c6":{"id":"6f5f4ce265c6","name":"SmartFileEntry.tsx","size":1221,"modDate":"2020-06-22T02:21:47.131Z","parentId":"71b959393742"},"ab92d3babbb2":{"id":"ab92d3babbb2","name":"internal","isDir":true,"modDate":"2020-06-24T22:35:53.173Z","parentId":"54610aa4ba87","childrenIds":["ec11785e95ff","964bfaf958fa","1281b1fd233e","baa14f293e18","8081a927a7e5","40ef8217a3fa","7d9bfc8a2631"],"childrenCount":7},"ec11785e95ff":{"id":"ec11785e95ff","name":"ChonkyBusinessLogic.tsx","size":4388,"modDate":"2020-06-24T00:16:13.521Z","parentId":"ab92d3babbb2"},"964bfaf958fa":{"id":"964bfaf958fa","name":"ChonkyPresentationLayer.tsx","size":2278,"modDate":"2020-06-24T22:42:08.235Z","parentId":"ab92d3babbb2"},"1281b1fd233e":{"id":"1281b1fd233e","name":"ClickableWrapper-hooks.tsx","size":2843,"modDate":"2020-06-22T00:55:27.653Z","parentId":"ab92d3babbb2"},"baa14f293e18":{"id":"baa14f293e18","name":"ClickableWrapper.tsx","size":1643,"modDate":"2020-06-21T00:01:01.841Z","parentId":"ab92d3babbb2"},"8081a927a7e5":{"id":"8081a927a7e5","name":"ErrorMessage.tsx","size":689,"modDate":"2020-06-13T20:05:05.310Z","parentId":"ab92d3babbb2"},"40ef8217a3fa":{"id":"40ef8217a3fa","name":"FileThumbnail.tsx","size":711,"modDate":"2020-06-24T22:35:53.353Z","parentId":"ab92d3babbb2"},"7d9bfc8a2631":{"id":"7d9bfc8a2631","name":"HotkeyListener.tsx","size":1174,"modDate":"2020-06-24T23:37:18.194Z","parentId":"ab92d3babbb2"},"020abeee6c77":{"id":"020abeee6c77","name":"index.ts","size":1438,"modDate":"2020-06-23T23:23:22.606Z","parentId":"3710ab721ac1"},"74bb440256a8":{"id":"74bb440256a8","name":"recoil","isDir":true,"modDate":"2020-06-22T01:44:07.300Z","parentId":"3710ab721ac1","childrenIds":["d47280d37e7d","4221309128f9","0185deaabeed","fc2391af492d","e692fa33b2a8","f60c6e53c09c","555abc645c09","285a67cb5c09","634d460386d6"],"childrenCount":9},"d47280d37e7d":{"id":"d47280d37e7d","name":"drag-and-drop.recoil.ts","size":162,"modDate":"2020-06-22T00:48:27.651Z","parentId":"74bb440256a8"},"4221309128f9":{"id":"4221309128f9","name":"errors.recoil.ts","size":230,"modDate":"2020-06-22T01:46:33.614Z","parentId":"74bb440256a8"},"0185deaabeed":{"id":"0185deaabeed","name":"file-actions.recoil.ts","size":2496,"modDate":"2020-06-23T23:32:26.896Z","parentId":"74bb440256a8"},"fc2391af492d":{"id":"fc2391af492d","name":"file-list.recoil.ts","size":318,"modDate":"2020-06-22T00:49:59.282Z","parentId":"74bb440256a8"},"e692fa33b2a8":{"id":"e692fa33b2a8","name":"files.recoil.ts","size":1151,"modDate":"2020-06-24T00:16:14.577Z","parentId":"74bb440256a8"},"f60c6e53c09c":{"id":"f60c6e53c09c","name":"search.recoil.ts","size":372,"modDate":"2020-06-22T01:26:58.382Z","parentId":"74bb440256a8"},"555abc645c09":{"id":"555abc645c09","name":"selection.recoil.ts","size":1822,"modDate":"2020-06-22T22:08:00.910Z","parentId":"74bb440256a8"},"285a67cb5c09":{"id":"285a67cb5c09","name":"special-actions.recoil.ts","size":336,"modDate":"2020-06-22T01:12:21.006Z","parentId":"74bb440256a8"},"634d460386d6":{"id":"634d460386d6","name":"thumbnails.recoil.ts","size":283,"modDate":"2020-06-22T00:57:05.276Z","parentId":"74bb440256a8"},"6debd6f88a8c":{"id":"6debd6f88a8c","name":"types","isDir":true,"modDate":"2020-06-22T22:32:44.124Z","parentId":"3710ab721ac1","childrenIds":["aa90ea453dee","0a0e53bef8b5","984a55fd2c4b","be97535c9514","8c4f72c6fcc6","2db78405614d","ac75f5a6538d","6f566aee5d20","c614fbcdafc0","897b0026e553"],"childrenCount":10},"aa90ea453dee":{"id":"aa90ea453dee","name":"file-actions.types.ts","size":1616,"modDate":"2020-06-23T23:14:24.939Z","parentId":"6debd6f88a8c"},"0a0e53bef8b5":{"id":"0a0e53bef8b5","name":"file-browser.types.ts","size":2315,"modDate":"2020-06-24T00:35:18.809Z","parentId":"6debd6f88a8c"},"984a55fd2c4b":{"id":"984a55fd2c4b","name":"file-list-view.types.ts","size":130,"modDate":"2020-06-21T00:14:30.209Z","parentId":"6debd6f88a8c"},"be97535c9514":{"id":"be97535c9514","name":"files.types.ts","size":1272,"modDate":"2020-06-26T15:11:25.134Z","parentId":"6debd6f88a8c"},"8c4f72c6fcc6":{"id":"8c4f72c6fcc6","name":"icons.types.ts","size":1822,"modDate":"2020-06-26T13:55:35.198Z","parentId":"6debd6f88a8c"},"2db78405614d":{"id":"2db78405614d","name":"react.types.ts","size":103,"modDate":"2020-06-21T17:57:14.940Z","parentId":"6debd6f88a8c"},"ac75f5a6538d":{"id":"ac75f5a6538d","name":"selection.types.ts","size":380,"modDate":"2020-06-21T16:44:16.545Z","parentId":"6debd6f88a8c"},"6f566aee5d20":{"id":"6f566aee5d20","name":"special-actions.types.ts","size":2054,"modDate":"2020-06-26T16:21:23.796Z","parentId":"6debd6f88a8c"},"c614fbcdafc0":{"id":"c614fbcdafc0","name":"thumbnails.types.ts","size":180,"modDate":"2020-06-21T00:39:18.556Z","parentId":"6debd6f88a8c"},"897b0026e553":{"id":"897b0026e553","name":"validation.types.ts","size":82,"modDate":"2020-06-21T19:57:23.562Z","parentId":"6debd6f88a8c"},"65b108840862":{"id":"65b108840862","name":"util","isDir":true,"modDate":"2020-06-26T15:43:47.000Z","parentId":"3710ab721ac1","childrenIds":["b2a42542a20e","4798d4b59e8e","41fa3f5d488b","685e22b1d976","ca5eb3b982dc","a9ee1b82aad5","eb0e1f8c6642","232f1e4d8fda","038f9f4d5117","54b5be82b9f3","2776e4d24f03","208bcd1a24f0","877787c01d44"],"childrenCount":13},"b2a42542a20e":{"id":"b2a42542a20e","name":"constants.ts","size":559,"modDate":"2020-06-24T00:05:15.992Z","parentId":"65b108840862"},"4798d4b59e8e":{"id":"4798d4b59e8e","name":"context.ts","size":1228,"modDate":"2020-06-22T01:13:30.605Z","parentId":"65b108840862"},"41fa3f5d488b":{"id":"41fa3f5d488b","name":"file-action-handlers.ts","size":5837,"modDate":"2020-06-26T16:20:03.181Z","parentId":"65b108840862"},"685e22b1d976":{"id":"685e22b1d976","name":"file-actions-definitions.ts","size":3558,"modDate":"2020-06-26T16:19:23.658Z","parentId":"65b108840862"},"ca5eb3b982dc":{"id":"ca5eb3b982dc","name":"file-actions.ts","size":4384,"modDate":"2020-06-23T23:32:24.984Z","parentId":"65b108840862"},"a9ee1b82aad5":{"id":"a9ee1b82aad5","name":"file-helper.ts","size":2776,"modDate":"2020-06-26T15:21:56.454Z","parentId":"65b108840862"},"eb0e1f8c6642":{"id":"eb0e1f8c6642","name":"file-icon-helper.ts","size":8391,"modDate":"2020-06-21T19:21:39.181Z","parentId":"65b108840862"},"232f1e4d8fda":{"id":"232f1e4d8fda","name":"hooks-helpers.ts","size":2861,"modDate":"2020-06-23T23:36:05.982Z","parentId":"65b108840862"},"038f9f4d5117":{"id":"038f9f4d5117","name":"logger.ts","size":617,"modDate":"2020-06-24T00:22:33.313Z","parentId":"65b108840862"},"54b5be82b9f3":{"id":"54b5be82b9f3","name":"search.ts","size":686,"modDate":"2020-06-23T22:01:38.605Z","parentId":"65b108840862"},"2776e4d24f03":{"id":"2776e4d24f03","name":"selection.ts","size":5872,"modDate":"2020-06-23T21:55:43.856Z","parentId":"65b108840862"},"208bcd1a24f0":{"id":"208bcd1a24f0","name":"special-actions.ts","size":10774,"modDate":"2020-06-26T16:22:47.367Z","parentId":"65b108840862"},"877787c01d44":{"id":"877787c01d44","name":"validation.ts","size":12208,"modDate":"2020-06-24T22:29:27.237Z","parentId":"65b108840862"},"ed2b6126cf96":{"id":"ed2b6126cf96","name":"stories","isDir":true,"modDate":"2020-06-26T15:18:19.261Z","parentId":"e598a85f843c","childrenIds":["9fbb2ba57ac6","8a848d0fb974","c526d68e6a62","37bb84fe14e1","e6dc184bb70a","bcfd4e35e859","26f3ad90e8d2","2794f41fe1f8","8a276f11bab4","c89cb3f09718","ff851d69eab4","24798b11527f","2ca5e6578c1e"],"childrenCount":13},"9fbb2ba57ac6":{"id":"9fbb2ba57ac6","name":"00-Welcome","isDir":true,"modDate":"2020-06-26T18:11:16.269Z","parentId":"ed2b6126cf96","childrenIds":["320d8b55fce0","380693e1beb5","65c17f188e8a","3dfb26fce054","49389dabb37c","a4ba117b351f"],"childrenCount":6},"320d8b55fce0":{"id":"320d8b55fce0","name":"01-Welcome.stories.mdx","size":458,"modDate":"2020-06-26T17:09:23.239Z","parentId":"9fbb2ba57ac6"},"380693e1beb5":{"id":"380693e1beb5","name":"02-Features.stories.mdx","size":1945,"modDate":"2020-06-26T16:37:15.094Z","parentId":"9fbb2ba57ac6"},"65c17f188e8a":{"id":"65c17f188e8a","name":"03-Installation.stories.mdx","size":1008,"modDate":"2020-06-26T11:14:08.948Z","parentId":"9fbb2ba57ac6"},"3dfb26fce054":{"id":"3dfb26fce054","name":"04-Immutability.stories.mdx","size":279,"modDate":"2020-06-21T15:06:47.405Z","parentId":"9fbb2ba57ac6"},"49389dabb37c":{"id":"49389dabb37c","name":"FullDemo.tsx","size":1334,"modDate":"2020-06-26T18:16:36.852Z","parentId":"9fbb2ba57ac6"},"a4ba117b351f":{"id":"a4ba117b351f","name":"chonky_source.fs_map.json","size":27151,"modDate":"2020-06-26T18:11:16.269Z","parentId":"9fbb2ba57ac6"},"8a848d0fb974":{"id":"8a848d0fb974","name":"01-File-Browser-basics","isDir":true,"modDate":"2020-06-17T21:00:19.424Z","parentId":"ed2b6126cf96","childrenIds":["3d93df3ad263","b47a164b8a56","9f4ce9a82dad","a30e2dcc608a","37c61583b752","4f8367fc84bf","945042056249","3c49ac846047","d094fb91b0e3","85f2d6b0f489","7d39f60b1526","d92f3337787e","28a22988246d","7d9d7ffb4926"],"childrenCount":14},"3d93df3ad263":{"id":"3d93df3ad263","name":"01-Component-hierarchy.md","size":1135,"modDate":"2020-06-24T22:34:18.082Z","parentId":"8a848d0fb974"},"b47a164b8a56":{"id":"b47a164b8a56","name":"01-Component-hierarchy.stories.tsx","size":1275,"modDate":"2020-06-21T12:47:12.836Z","parentId":"8a848d0fb974"},"9f4ce9a82dad":{"id":"9f4ce9a82dad","name":"02-Displaying-files.md","size":3481,"modDate":"2020-06-26T15:35:26.602Z","parentId":"8a848d0fb974"},"a30e2dcc608a":{"id":"a30e2dcc608a","name":"02-Displaying-files.stories.tsx","size":2546,"modDate":"2020-06-26T15:12:08.238Z","parentId":"8a848d0fb974"},"37c61583b752":{"id":"37c61583b752","name":"03-Specifying-folder.md","size":1101,"modDate":"2020-06-21T14:58:32.883Z","parentId":"8a848d0fb974"},"4f8367fc84bf":{"id":"4f8367fc84bf","name":"03-Specifying-folder.stories.tsx","size":1612,"modDate":"2020-06-21T15:05:06.082Z","parentId":"8a848d0fb974"},"945042056249":{"id":"945042056249","name":"04-Actions.md","size":1515,"modDate":"2020-06-21T00:39:29.515Z","parentId":"8a848d0fb974"},"3c49ac846047":{"id":"3c49ac846047","name":"04-Actions.stories.tsx","size":1928,"modDate":"2020-06-21T00:39:29.535Z","parentId":"8a848d0fb974"},"d094fb91b0e3":{"id":"d094fb91b0e3","name":"05-Custom-actions.md","size":2933,"modDate":"2020-06-21T14:17:04.848Z","parentId":"8a848d0fb974"},"85f2d6b0f489":{"id":"85f2d6b0f489","name":"05-Custom-actions.stories.tsx","size":1848,"modDate":"2020-06-21T19:52:42.198Z","parentId":"8a848d0fb974"},"7d39f60b1526":{"id":"7d39f60b1526","name":"06-Thumbnails.md","size":22,"modDate":"2020-06-15T23:35:15.321Z","parentId":"8a848d0fb974"},"d92f3337787e":{"id":"d92f3337787e","name":"06-Thumbnails.stories.tsx","size":1817,"modDate":"2020-06-16T00:29:03.595Z","parentId":"8a848d0fb974"},"28a22988246d":{"id":"28a22988246d","name":"07-Drag-n-drop.md","size":1062,"modDate":"2020-06-16T00:11:27.026Z","parentId":"8a848d0fb974"},"7d9d7ffb4926":{"id":"7d9d7ffb4926","name":"07-Drag-n-drop.stories.tsx","size":1388,"modDate":"2020-06-16T00:29:21.407Z","parentId":"8a848d0fb974"},"c526d68e6a62":{"id":"c526d68e6a62","name":"02-File-Browser-advanced","isDir":true,"modDate":"2020-06-21T20:37:53.720Z","parentId":"ed2b6126cf96","childrenIds":["69e2bf9599f8","c5b0147e8c5b","5a704d79c3ab","a087538f6b4f","d3470229edaf","fa11b3d4e9f3","f61328883ab6"],"childrenCount":7},"69e2bf9599f8":{"id":"69e2bf9599f8","name":"01-Invalid-props.md","size":313,"modDate":"2020-06-13T02:59:08.560Z","parentId":"c526d68e6a62"},"c5b0147e8c5b":{"id":"c5b0147e8c5b","name":"01-Invalid-props.stories.tsx","size":1437,"modDate":"2020-06-22T01:57:42.756Z","parentId":"c526d68e6a62"},"5a704d79c3ab":{"id":"5a704d79c3ab","name":"02-Virtualization.md","size":89,"modDate":"2020-06-13T03:20:21.046Z","parentId":"c526d68e6a62"},"a087538f6b4f":{"id":"a087538f6b4f","name":"02-Virtualization.stories.tsx","size":1317,"modDate":"2020-06-22T00:08:15.722Z","parentId":"c526d68e6a62"},"d3470229edaf":{"id":"d3470229edaf","name":"03-Disable-default-actions.md","size":1262,"modDate":"2020-06-21T20:47:48.716Z","parentId":"c526d68e6a62"},"fa11b3d4e9f3":{"id":"fa11b3d4e9f3","name":"03-Disable-default-actions.stories.tsx","size":1656,"modDate":"2020-06-24T22:30:54.944Z","parentId":"c526d68e6a62"},"f61328883ab6":{"id":"f61328883ab6","name":"index.ts","size":53,"modDate":"2020-06-13T02:56:36.099Z","parentId":"c526d68e6a62"},"37bb84fe14e1":{"id":"37bb84fe14e1","name":"03-API-Reference","isDir":true,"modDate":"2020-06-16T23:42:02.400Z","parentId":"ed2b6126cf96","childrenIds":["af078b89f10e"],"childrenCount":1},"af078b89f10e":{"id":"af078b89f10e","name":"02-Built-in-actions.stories.mdx","size":408,"modDate":"2020-06-16T23:45:11.341Z","parentId":"37bb84fe14e1"},"e6dc184bb70a":{"id":"e6dc184bb70a","name":"Chonky-header.mdx","size":1740,"modDate":"2020-06-26T15:35:53.282Z","parentId":"ed2b6126cf96"},"bcfd4e35e859":{"id":"bcfd4e35e859","name":"Live-examples.md","size":517,"modDate":"2020-06-16T00:30:43.742Z","parentId":"ed2b6126cf96"},"26f3ad90e8d2":{"id":"26f3ad90e8d2","name":"Unstable-warning.md","size":493,"modDate":"2020-06-26T15:41:17.962Z","parentId":"ed2b6126cf96"},"2794f41fe1f8":{"id":"2794f41fe1f8","name":"markdown.d.ts","size":140,"modDate":"2020-06-13T03:01:56.018Z","parentId":"ed2b6126cf96"},"8a276f11bab4":{"id":"8a276f11bab4","name":"story-helpers.tsx","size":5362,"modDate":"2020-06-21T19:27:47.004Z","parentId":"ed2b6126cf96"},"c89cb3f09718":{"id":"c89cb3f09718","name":"storybook.css","size":1689,"modDate":"2020-06-21T13:57:02.094Z","parentId":"ed2b6126cf96"},"ff851d69eab4":{"id":"ff851d69eab4","name":"storybook.css.map","size":413,"modDate":"2020-06-21T13:57:02.094Z","parentId":"ed2b6126cf96"},"24798b11527f":{"id":"24798b11527f","name":"storybook.scss","size":1787,"modDate":"2020-06-21T13:57:01.774Z","parentId":"ed2b6126cf96"},"2ca5e6578c1e":{"id":"2ca5e6578c1e","name":"tsconfig.json","size":214,"modDate":"2020-06-21T19:53:12.206Z","parentId":"ed2b6126cf96"},"da51714da4cb":{"id":"da51714da4cb","name":"style","isDir":true,"modDate":"2020-06-18T00:35:58.421Z","parentId":"e598a85f843c","childrenIds":["a9ce520a5b0c","6c526e56e87a","8532e9041309","0cdb99592058","132999c90c29","74b709848c73","416f17ff9ff3","d6bc6238e1fb","53706ac5ca55","0879236d82b3","81fd03ad4d32"],"childrenCount":11},"a9ce520a5b0c":{"id":"a9ce520a5b0c","name":"_file-entry.scss","size":5517,"modDate":"2020-06-26T15:15:47.851Z","parentId":"da51714da4cb"},"6c526e56e87a":{"id":"6c526e56e87a","name":"_file-list.scss","size":401,"modDate":"2020-06-21T01:11:21.072Z","parentId":"da51714da4cb"},"8532e9041309":{"id":"8532e9041309","name":"_file-search.scss","size":1384,"modDate":"2020-06-21T17:20:47.031Z","parentId":"da51714da4cb"},"0cdb99592058":{"id":"0cdb99592058","name":"_file-toolbar-buttons.scss","size":3197,"modDate":"2020-06-20T00:26:05.197Z","parentId":"da51714da4cb"},"132999c90c29":{"id":"132999c90c29","name":"_file-toolbar.scss","size":2552,"modDate":"2020-06-20T00:17:38.792Z","parentId":"da51714da4cb"},"74b709848c73":{"id":"74b709848c73","name":"_shared.scss","size":2005,"modDate":"2020-06-26T11:25:11.323Z","parentId":"da51714da4cb"},"416f17ff9ff3":{"id":"416f17ff9ff3","name":"_text-placeholder.scss","size":462,"modDate":"2020-06-16T21:02:53.404Z","parentId":"da51714da4cb"},"d6bc6238e1fb":{"id":"d6bc6238e1fb","name":"_util.scss","size":3487,"modDate":"2020-06-26T15:00:35.547Z","parentId":"da51714da4cb"},"53706ac5ca55":{"id":"53706ac5ca55","name":"main.css","size":14696,"modDate":"2020-06-26T15:15:48.303Z","parentId":"da51714da4cb"},"0879236d82b3":{"id":"0879236d82b3","name":"main.css.map","size":3751,"modDate":"2020-06-26T15:15:48.303Z","parentId":"da51714da4cb"},"81fd03ad4d32":{"id":"81fd03ad4d32","name":"main.scss","size":184,"modDate":"2020-06-18T00:36:05.641Z","parentId":"da51714da4cb"},"c58b591bd793":{"id":"c58b591bd793","name":"test","isDir":true,"modDate":"2020-06-21T18:35:39.636Z","parentId":"e598a85f843c","childrenIds":["867012021ee7"],"childrenCount":1},"867012021ee7":{"id":"867012021ee7","name":"storyshots.test.ts","size":112,"modDate":"2020-06-21T18:35:44.780Z","parentId":"c58b591bd793"},"eca6a4fd0d17":{"id":"eca6a4fd0d17","name":"tsconfig.json","size":676,"modDate":"2020-06-21T18:58:50.480Z","parentId":"e598a85f843c"},"d14aa4c43d90":{"id":"d14aa4c43d90","name":"typedoc.js","size":171,"modDate":"2020-06-17T22:25:27.884Z","parentId":"e598a85f843c"}}}')},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("WNMA")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("1IsZ")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ZVkB")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("vbDw")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("y2Ah")},,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("JtPf")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("tVqn")},,,,,,,,,,function(module,exports){},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("5o43")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ax0f")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("sVFb")},,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("/Qos")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("j4Sf")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("LUwd")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("OZaJ")},,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("F63i")},,,,,,,,,,,,,function(module,exports){},,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("3yYM")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("aYSr")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("P2aG")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("DfhM")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("LqLs")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("pu3o")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("6U7i")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Cm4o")},,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("GFpt")},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("+kY7")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("5BYb")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("5878")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("m9LP")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("l1C2")},,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("CUMQ")},,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("3voH")},,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("cww3")},,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("N4z3")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("1Mu/")},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports){},function(module,exports){},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){__webpack_require__(364),__webpack_require__(389),__webpack_require__(390),__webpack_require__(430),__webpack_require__(560),__webpack_require__(599),__webpack_require__(604),module.exports=__webpack_require__(611)},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ARua")},,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("9JhN")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("PjZX")},,,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(213)},,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("JY+C")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ZUdG")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("PuIx")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("tQbP")},,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("dSaG")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("hQin")},,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("LJ7e")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("I2fK")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("DY47")},,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("3kp9")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("/bc2")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("/JuR")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("+Bxv")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("muFx")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Wci6")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("WoRU")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("o3fS")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("JmTi")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("xaiR")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("SlD/")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Monn")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("iKE+")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("fmNP")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("uFXj")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("V0IW")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("OCSl")},,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("kA4r")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Blm6")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ssvU")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("lZm3")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Ee2X")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("b2e3")},,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("maj8")},,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("H87J")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("S3pA")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("O1Sc")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("zF5n")},,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("kvVz")},,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("tJVe")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("nuol")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("PjJO")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("DpO5")},,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Kkar")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("2q8g")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("nDih")},,,,,,,,,,function(module,exports,__webpack_require__){"use strict";__webpack_require__(4),__webpack_require__(35),__webpack_require__(48),__webpack_require__(54),__webpack_require__(30),__webpack_require__(605),__webpack_require__(607),__webpack_require__(10),__webpack_require__(49);var _clientApi=__webpack_require__(61),_clientLogger=__webpack_require__(41),_configFilename=__webpack_require__(610);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(_configFilename.args||_configFilename.argTypes)&&_clientLogger.logger.warn("Invalid args/argTypes in config, ignoring.",JSON.stringify({args:_configFilename.args,argTypes:_configFilename.argTypes})),_configFilename.decorators&&_configFilename.decorators.forEach((function(decorator){return(0,_clientApi.addDecorator)(decorator)})),(_configFilename.parameters||_configFilename.globalArgs||_configFilename.globalArgTypes)&&(0,_clientApi.addParameters)(_objectSpread(_objectSpread({},_configFilename.parameters),{},{globalArgs:_configFilename.globalArgs,globalArgTypes:_configFilename.globalArgTypes})),_configFilename.argTypesEnhancers&&_configFilename.argTypesEnhancers.forEach((function(enhancer){return(0,_clientApi.addArgTypesEnhancer)(enhancer)}))},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ct80")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("oD4t")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("2sZ7")},function(module,exports){},function(module,exports,__webpack_require__){"use strict";(function(module){var _framework=__webpack_require__(213);module._StorybookPreserveDecorators=!0,(0,_framework.configure)([__webpack_require__(612)],module)}).call(this,__webpack_require__(158)(module))},function(module,exports,__webpack_require__){var map={"./01-Welcome/01-Welcome.stories.mdx":750,"./01-Welcome/02-Features.stories.mdx":745,"./01-Welcome/03-Installation.stories.mdx":746,"./01-Welcome/04-Immutability.stories.mdx":747,"./02-Demos/01-File-Browser-demo.stories.tsx":751,"./03-File-Browser-basics/01-Component-hierarchy.stories.tsx":752,"./03-File-Browser-basics/02-Displaying-files.stories.tsx":753,"./03-File-Browser-basics/03-Specifying-folder.stories.tsx":754,"./03-File-Browser-basics/04-File-actions.stories.tsx":755,"./03-File-Browser-basics/05-File-action-handler.stories.tsx":756,"./03-File-Browser-basics/06-Custom-actions.stories.tsx":757,"./03-File-Browser-basics/07-Thumbnails.stories.tsx":758,"./03-File-Browser-basics/08-Drag-n-drop.stories.tsx":759,"./04-File-Browser-advanced/01-Invalid-props.stories.tsx":760,"./04-File-Browser-advanced/02-Virtualization.stories.tsx":761,"./04-File-Browser-advanced/03-Disable-default-actions.stories.tsx":762,"./05-API-Reference/02-Built-in-actions.stories.mdx":749};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=612},,,,,function(module,exports,__webpack_require__){var api=__webpack_require__(139),content=__webpack_require__(618);"string"==typeof(content=content.__esModule?content.default:content)&&(content=[[module.i,content,""]]);var options={insert:"head",singleton:!1};api(content,options);module.exports=content.locals||{}},function(module,exports,__webpack_require__){(exports=__webpack_require__(140)(!1)).push([module.i,'.sbdocs-content .sbdocs-p, .sbdocs-content .sbdocs-p *,\n.sbdocs-content .sbdocs-ul,\n.sbdocs-content .sbdocs-ul *,\n.sbdocs-content .sbdocs-ol,\n.sbdocs-content .sbdocs-ol * {\n  line-height: 25px !important;\n  font-size: 17px !important;\n}\n.sbdocs-content .sbdocs-p code,\n.sbdocs-content .sbdocs-ul code,\n.sbdocs-content .sbdocs-ol code {\n  padding: 0 5px !important;\n  font-size: 14px !important;\n}\n.sbdocs-content .sbdocs-h2 {\n  margin-top: 40px !important;\n}\n\n.sbdocs-preview {\n  border: solid 3px #09f !important;\n  margin: 50px 0 40px 0 !important;\n  border-radius: 3px !important;\n  position: relative !important;\n  overflow: visible !important;\n}\n.sbdocs-preview:before {\n  border-top-right-radius: 3px;\n  border-top-left-radius: 3px;\n  font-family: sans-serif;\n  content: "Live Example";\n  background-color: #09f;\n  position: absolute;\n  margin-left: -3px;\n  margin-top: -25px;\n  font-weight: bold;\n  line-height: 25px;\n  font-size: 14px;\n  padding: 0 8px;\n  display: block;\n  height: 25px;\n  color: #fff;\n}\n.sbdocs-preview > div:first-child > div:first-child {\n  padding: 10px 10px 30px 10px !important;\n  margin: 0 !important;\n  overflow: visible !important;\n}\n\n.noty_bar {\n  line-height: 24px;\n}\n.noty_bar code {\n  background-color: rgba(255, 255, 255, 0.7);\n  display: inline-block;\n  border-radius: 4px;\n  line-height: 20px;\n  padding: 0 4px;\n}\n\n.unstable-warning blockquote {\n  background-color: #fde0e0;\n  border-color: #9e0808;\n  margin-bottom: 40px;\n  padding: 20px 30px;\n}\n\n.live-example-action {\n  font-family: sans-serif !important;\n  font-size: 1.2em !important;\n  margin-bottom: 16px;\n  text-align: center;\n  color: #5f0707;\n}\n',""]),module.exports=exports},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("i7Kn")},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(4),__webpack_require__(22),__webpack_require__(6),__webpack_require__(10),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(40),_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(69),_story_helpers__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(8);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Meta=function makeShortcode(name){return function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",props)}}("Meta"),layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(Meta,{title:"".concat(_story_helpers__WEBPACK_IMPORTED_MODULE_8__.a.Welcome,"|Chonky features"),mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__.a,{mdxType:"ChonkyHeader"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"chonky-features"},"Chonky features:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("blockquote",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",{parentName:"blockquote"},"Want to request a feature? Post a feature request in Chonky's\n",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"p"},{href:"https://github.com/TimboKZ/Chonky/issues",target:"_blank",rel:"nofollow noopener noreferrer"}),"GitHub issues"),".")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("ul",{className:"contains-task-list"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Backend-agnostic - files can come from any source (remote server, S3, virtual FS)."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports text search."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports drag & drop."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","Mobile-friendly design."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports image thumbnails."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports keyboard shortcuts."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports common and custom file actions."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","Supports ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("em",{parentName:"li"},"detailed list")," and ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("em",{parentName:"li"},"thumbnails")," views."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Provides unique icons for each file extension."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports file selections (excluding drag selection, ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("em",{parentName:"li"},"for now"),")."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports loading animations and async thumbnail generation."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Performs well with large file collections thanks to\n",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"li"},{href:"https://github.com/bvaughn/react-virtualized",target:"_blank",rel:"nofollow noopener noreferrer"}),"virtualization"),".")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h2",{id:"notes-about-1x"},"Notes about 1.x"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"Chonky ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"li"},"1.x")," is a complete rewrite of ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"li"},"0.x"),", now using hooks under the hood!"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"Internal state management is done using ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"li"},{href:"https://recoiljs.org/",target:"_blank",rel:"nofollow noopener noreferrer"}),"Recoil"),".")))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"".concat(_story_helpers__WEBPACK_IMPORTED_MODULE_8__.a.Welcome,"|Chonky features"),includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(4),__webpack_require__(22),__webpack_require__(6),__webpack_require__(10),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(40),_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(69),_story_helpers__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(8);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Meta=function makeShortcode(name){return function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",props)}}("Meta"),layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(Meta,{title:"".concat(_story_helpers__WEBPACK_IMPORTED_MODULE_8__.a.Welcome,"|Installation & usage"),mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__.a,{mdxType:"ChonkyHeader"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"installation"},"Installation"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Add Chonky to your NPM project:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("code",_extends({parentName:"pre"},{className:"language-shell"}),'# Use "beta" tag to install the 1.x version:\nnpm install chonky@beta\n')),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Then, import relevant components and styles:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("code",_extends({parentName:"pre"},{className:"language-js"}),"import 'chonky/style/main.css';\nimport { FileBrowser, FileList } from 'chonky';\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"And you're good to go! Check other sections in the documentation to see how Chonky\ncomponents can be used."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h3",{id:"usage-with-typescript"},"Usage with Typescript"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Chonky was built using Typescript. As such, many of the internal types and interfaces\nare exported. Some types are generic, to make it easier for you to integrate Chonky\ninto you Typescript package."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"If you're also using Typescript, you can add Chonky types to your project using\nstandard\nimports:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("code",_extends({parentName:"pre"},{className:"language-ts"}),"// FileArray is a TS type\nimport { FileArray } from 'chonky';\n\nconst myFiles: FileArray = [\n    {\n        id: 'abD3',\n        name: 'README.txt',\n    },\n    null,\n];\n")))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"".concat(_story_helpers__WEBPACK_IMPORTED_MODULE_8__.a.Welcome,"|Installation & usage"),includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(4),__webpack_require__(22),__webpack_require__(6),__webpack_require__(10),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(40),_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(69),_story_helpers__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(8);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Meta=function makeShortcode(name){return function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",props)}}("Meta"),layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(Meta,{title:"".concat(_story_helpers__WEBPACK_IMPORTED_MODULE_8__.a.Welcome,"|Immutability"),mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__.a,{mdxType:"ChonkyHeader"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"immutability-in-chonky"},"Immutability in Chonky"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"TODO explain:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"Chonky assumes data is immutable to be performant."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"Link to Redux docs."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"Examples of common beginner problems?")))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"".concat(_story_helpers__WEBPACK_IMPORTED_MODULE_8__.a.Welcome,"|Immutability"),includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},function(module,exports,__webpack_require__){(exports=__webpack_require__(140)(!1)).push([module.i,'.chonky-fill-parent {\n  height: 100%;\n}\n\n.chonky-no-select {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n.chonky-root {\n  border: solid 1px #e4e4e4;\n  border-radius: 4px;\n  padding: 7.5px;\n  touch-action: manipulation;\n  font-size: 15px;\n  font-family: sans-serif;\n  flex-direction: column;\n  position: relative;\n  text-align: left;\n  display: flex;\n  height: 100%;\n}\n\n.chonky-error {\n  border: solid 1px rgba(108, 72, 72, 0.11);\n  margin-bottom: 7.5px;\n  border-radius: 4px;\n  background-color: #fdebeb;\n  font-family: sans-serif;\n  color: #8e2121;\n  padding: 1em;\n}\n.chonky-error-name {\n  opacity: 0.5;\n}\n.chonky-error ul {\n  padding-top: 0.1em;\n  margin: 0;\n}\n.chonky-error li {\n  margin-top: 0.5em;\n}\n\n.chonky-tooltip {\n  position: relative;\n}\n.chonky-tooltip:hover::before, .chonky-tooltip:hover::after, .chonky-tooltip:focus::before, .chonky-tooltip:focus::after, .chonky-tooltip:active::before, .chonky-tooltip:active::after {\n  display: block;\n  opacity: 1;\n}\n.chonky-tooltip::before, .chonky-tooltip::after {\n  transition: opacity 100ms ease-in-out;\n  pointer-events: none;\n  position: absolute;\n  display: none;\n  z-index: 9999;\n  bottom: 100%;\n  opacity: 0;\n  left: 50%;\n}\n.chonky-tooltip::before {\n  transform: translateX(-75%);\n  background-color: rgba(0, 0, 0, 0.8);\n  border-radius: 2px;\n  content: attr(data-tooltip);\n  padding: 0.4em 0.5em;\n  white-space: nowrap;\n  margin-bottom: 6px;\n  line-height: 1em;\n  color: #fff;\n  font-size: 0.8em;\n  height: 1em;\n}\n.chonky-tooltip::after {\n  transform: translateX(-50%) rotate(45deg);\n  border: solid 2px rgba(0, 0, 0, 0.8);\n  border-left-color: transparent;\n  border-top-color: transparent;\n  margin-bottom: 4px;\n  content: "";\n}\n\n.chonky-text-placeholder {\n  -webkit-animation: loading-placeholder 1.5s infinite linear;\n  animation: loading-placeholder 1.5s infinite linear;\n  background-color: #ccc;\n  white-space: nowrap;\n  border-radius: 4px;\n  overflow: hidden;\n  min-width: 20px;\n  max-width: 40%;\n}\n@-webkit-keyframes loading-placeholder {\n  0% {\n    opacity: 0.2;\n  }\n  50% {\n    opacity: 0.4;\n  }\n  100% {\n    opacity: 0.2;\n  }\n}\n@keyframes loading-placeholder {\n  0% {\n    opacity: 0.2;\n  }\n  50% {\n    opacity: 0.4;\n  }\n  100% {\n    opacity: 0.2;\n  }\n}\n\n.chonky-toolbar {\n  justify-content: space-between;\n  flex-wrap: wrap-reverse;\n  flex-direction: row;\n  display: flex;\n}\n.chonky-toolbar-side {\n  margin-bottom: 7.5px;\n  flex-direction: row;\n  padding-bottom: 0;\n  display: flex;\n  flex-grow: 1;\n}\n.chonky-toolbar-side-left {\n  flex-grow: 10000;\n}\n.chonky-toolbar-side-right {\n  justify-content: space-between;\n}\n.chonky-toolbar-side-inside {\n  flex-direction: row;\n  display: flex;\n}\n.chonky-toolbar-side-inside > * {\n  vertical-align: middle;\n  display: inline-block;\n}\n@media screen and (max-width: 400px) {\n  .chonky-toolbar {\n    flex-direction: column-reverse;\n  }\n  .chonky-side-right {\n    justify-content: space-between;\n  }\n}\n.chonky-folder-chain-entry, .chonky-folder-chain-separator {\n  vertical-align: middle;\n  display: inline-block;\n}\n.chonky-folder-chain-entry {\n  background: none;\n  cursor: pointer;\n  color: inherit;\n  font: inherit;\n  border: none;\n  padding: 0;\n  transition: background-color 100ms ease-in-out;\n  border-radius: 4px;\n  border: solid 1px transparent;\n  line-height: 28px;\n  padding: 0 0.3em !important;\n  height: 28px;\n  box-sizing: border-box;\n}\n@media screen and (max-width: 400px) {\n  .chonky-folder-chain-entry {\n    line-height: 1.7em;\n    height: 1.7em;\n  }\n}\n.chonky-folder-chain-entry:last-child .chonky-folder-chain-entry-name {\n  -webkit-text-decoration: underline #bbb;\n          text-decoration: underline #bbb;\n}\n.chonky-folder-chain-entry.chonky-loading {\n  font-style: italic;\n  color: #bbb;\n}\ndiv.chonky-folder-chain-entry {\n  cursor: default;\n}\n\nbutton.chonky-folder-chain-entry:hover {\n  background-color: #f5f5f5;\n}\nbutton.chonky-folder-chain-entry:active {\n  border-color: #ccc;\n}\n\n.chonky-folder-chain-separator {\n  line-height: 28px;\n  height: 28px;\n  color: #bbb;\n  padding: 0 0.1em;\n}\n@media screen and (max-width: 400px) {\n  .chonky-folder-chain-separator {\n    line-height: 1.7em;\n    height: 1.7em;\n    padding: 0 0.1em;\n  }\n}\n\n.chonky-toolbar-button-group .chonky-toolbar-button {\n  border-radius: 0;\n}\n.chonky-toolbar-button-group .chonky-toolbar-button:first-of-type {\n  border-bottom-left-radius: 4px;\n  border-top-left-radius: 4px;\n}\n.chonky-toolbar-button-group .chonky-toolbar-button:last-of-type {\n  border-bottom-right-radius: 4px;\n  border-top-right-radius: 4px;\n}\n.chonky-toolbar-button-group .chonky-toolbar-button:focus {\n  z-index: 15;\n}\n.chonky-toolbar-button-group .chonky-toolbar-button:not(:first-child) {\n  margin-left: -1px;\n}\n\n.chonky-toolbar-button {\n  transition: background-color 100ms ease-in-out;\n  background: none;\n  cursor: pointer;\n  color: inherit;\n  font: inherit;\n  border: none;\n  padding: 0;\n  line-height: 26px;\n  border-radius: 4px;\n  border: solid 1px transparent;\n  min-width: 28px;\n  height: 28px;\n  vertical-align: middle;\n  box-sizing: border-box;\n  flex-direction: row;\n  text-align: center;\n  position: relative;\n  z-index: 10;\n}\n.chonky-toolbar-button-icon, .chonky-toolbar-button-text {\n  display: inline-block;\n}\n.chonky-toolbar-button-icon {\n  min-width: 28px;\n}\n.chonky-toolbar-button-text {\n  padding-right: 10px;\n  padding-left: 10px;\n}\n.chonky-toolbar-button-icon + .chonky-toolbar-button-text {\n  padding-left: 0 !important;\n}\n.chonky-toolbar-button-text + .chonky-toolbar-button-icon {\n  margin-left: -10px !important;\n}\n@media screen and (max-width: 400px) {\n  .chonky-toolbar-button {\n    line-height: 1.7em;\n    min-width: 1.7em;\n    height: 1.7em;\n  }\n  .chonky-toolbar-button-icon {\n    min-width: 1.7em;\n  }\n}\n.chonky-toolbar-button.chonky-active {\n  color: #09f;\n  z-index: 93;\n}\n.chonky-toolbar-button:hover {\n  background-color: #f5f5f5;\n  z-index: 92;\n}\n.chonky-toolbar-button:active {\n  border-color: #ccc;\n}\n.chonky-toolbar-button > span {\n  padding: 6px;\n  border-color: #ccc;\n  white-space: nowrap;\n}\n.chonky-toolbar-button[disabled] {\n  color: #bbb !important;\n  pointer-events: none;\n}\n\n.chonky-toolbar-dropdown {\n  position: relative;\n}\n.chonky-toolbar-dropdown .chonky-toolbar-button-icon {\n  font-size: 0.8em;\n}\n.chonky-toolbar-dropdown-content {\n  margin-top: 2.5px;\n  border: solid 1px #ccc;\n  border-radius: 4px;\n  background-color: #fff;\n  flex-direction: column;\n  position: absolute;\n  display: flex;\n  z-index: 70;\n  right: 0;\n}\n.chonky-toolbar-dropdown-button {\n  transition: background-color 100ms ease-in-out;\n  background: none;\n  cursor: pointer;\n  color: inherit;\n  font: inherit;\n  border: none;\n  padding: 0;\n  line-height: 29.9px;\n  border-bottom: solid 1px #ccc;\n  height: 32.2px;\n  white-space: nowrap;\n  text-align: left;\n  display: flex;\n}\n.chonky-toolbar-dropdown-button-icon {\n  padding-left: 7.5px;\n  opacity: 0.5;\n}\n.chonky-toolbar-dropdown-button-text {\n  padding-right: 7.5px;\n  padding-left: 7.5px;\n}\n.chonky-toolbar-dropdown-button[disabled] {\n  color: #bbb !important;\n  pointer-events: none;\n}\n.chonky-toolbar-dropdown-button:hover {\n  background-color: #f5f5f5;\n}\n\n.chonky-file-search {\n  transition: height 100ms ease-in-out;\n  margin-bottom: 7.5px;\n  margin-top: -7.5px;\n  height: 28px;\n  opacity: 1;\n}\n.chonky-file-search-hidden {\n  height: 0 !important;\n  opacity: 0 !important;\n}\n\n.chonky-file-search-input-group label,\n.chonky-file-search-input-group input {\n  line-height: 26px;\n  height: 28px;\n  box-sizing: border-box;\n  display: inline-block;\n  vertical-align: top;\n  font-size: inherit;\n  padding: 0;\n  margin: 0;\n}\n.chonky-file-search-input-group label {\n  background-color: transparent;\n  padding: 0 5px;\n  color: #666;\n  margin: 1px 0 0 2px;\n  border-right: none;\n  position: absolute;\n}\n.chonky-file-search-input-group input {\n  padding-left: 30px;\n  border: solid 1px #e4e4e4;\n  border-radius: 4px;\n  padding-right: 5px;\n}\n.chonky-file-search-input-group-loading {\n  line-height: 30.8px;\n  height: 28px;\n  width: 28px;\n  box-sizing: border-box;\n  display: inline-block;\n  text-align: center;\n  color: #bbb;\n}\n\n.chonky-file-list {\n  flex: 1 1;\n}\n.chonky-file-list-notification {\n  text-align: center;\n  position: relative;\n}\n.chonky-file-list-notification-empty {\n  color: #bbb;\n  font-size: 1.2em;\n}\n.chonky-file-list-notification-content {\n  transform: translateX(-50%) translateY(-50%);\n  position: absolute;\n  left: 50%;\n  top: 50%;\n}\n\n.chonky-file-entry-clickable-wrapper {\n  outline: none !important;\n  position: relative;\n}\n.chonky-file-entry-clickable-wrapper:focus .chonky-file-entry-inside:before {\n  box-shadow: inset 0 0 0 2px #000 !important;\n}\n.chonky-file-entry-clickable-wrapper:focus .chonky-file-entry-description {\n  border-top-color: #000 !important;\n}\n.chonky-file-entry-clickable-wrapper:focus .chonky-file-icon-inside {\n  color: #000;\n}\n\n.chonky-file-drag-preview {\n  padding: 7.5px 10px;\n  box-shadow: 2px 2px 5px #888;\n  border-radius: 2px;\n  border: solid 2px #09f;\n  background-color: #f5f5f5;\n  display: inline-block;\n}\n\n.chonky-file-entry {\n  border: solid 1px #e4e4e4;\n  border-radius: 2px;\n  box-sizing: border-box;\n  overflow: hidden;\n  height: 100%;\n}\n.chonky-file-entry-inside {\n  box-sizing: border-box;\n  flex-direction: column;\n  display: flex;\n  height: 100%;\n}\n.chonky-file-entry-inside:before {\n  border-radius: 4px;\n  position: absolute;\n  display: block;\n  z-index: 999;\n  content: "";\n  bottom: 0;\n  right: 0;\n  left: 0;\n  top: 0;\n}\n.chonky-file-entry-dnd-indicator {\n  box-sizing: border-box;\n  position: absolute;\n  font-size: 1.2em;\n  opacity: 0.6;\n  padding: 6px;\n  z-index: 80;\n  left: 1px;\n  top: 1px;\n}\n.chonky-file-entry-dnd-indicator:before {\n  border-bottom: 50px solid transparent;\n  border-left: 50px solid #fff;\n  position: absolute;\n  content: "";\n  z-index: -1;\n  height: 0;\n  width: 0;\n  left: 0;\n  top: 0;\n}\n.chonky-file-entry-preview {\n  background-color: #fff;\n  position: relative;\n  overflow: hidden;\n  flex-grow: 1;\n}\n.chonky-file-entry-description {\n  border-top: solid 2px transparent;\n  background-color: #fff;\n  font-size: 14px;\n  padding: 3px 5px 5px 5px;\n}\n.chonky-file-entry-description-title {\n  position: relative;\n}\n.chonky-file-entry-description-title-modifiers {\n  margin-right: 5px;\n  position: relative;\n  color: #bbb;\n  font-size: 0.75em;\n  top: -2px;\n}\n.chonky-file-entry-description-title-extension {\n  color: #666;\n}\n.chonky-file-entry-directory .chonky-file-entry-description-title-extension {\n  color: #bbb;\n}\n\n.chonky-file-entry-selected .chonky-file-entry-inside:before {\n  box-shadow: inset 0 0 0 2px #33adff !important;\n}\n.chonky-file-entry-selected .chonky-file-entry-description {\n  border-top-color: #33adff !important;\n}\n.chonky-file-entry-selected .chonky-file-selection {\n  opacity: 1 !important;\n}\n.chonky-file-entry-dragging .chonky-file-background {\n  opacity: 0.3 !important;\n}\n.chonky-file-entry-drop-hovered .chonky-file-background {\n  opacity: 1 !important;\n}\n\n.chonky-file-icon, .chonky-file-details, .chonky-file-selection, .chonky-file-thumbnail, .chonky-file-background {\n  position: absolute;\n  display: block;\n  height: 100%;\n  width: 100%;\n  left: 0;\n  top: 0;\n}\n.chonky-file-details {\n  z-index: 50;\n}\n.chonky-file-details-inside {\n  justify-content: space-between;\n  font-size: 10px;\n  box-sizing: border-box;\n  position: absolute;\n  display: flex;\n  width: 100%;\n  bottom: 0;\n}\n.chonky-file-details-item {\n  transition: opacity 100ms ease-in-out;\n  padding: 5px;\n  color: #000;\n  opacity: 0.2;\n}\n.chonky-file-entry:hover .chonky-file-details-item {\n  opacity: 0.75;\n}\n\n.chonky-file-icon {\n  z-index: 40;\n}\n.chonky-file-icon-children-count, .chonky-file-icon-inside {\n  transform: translateX(-50%) translateY(-50%);\n  text-align: center;\n  position: absolute;\n  display: block;\n  left: 50%;\n  top: 50%;\n}\n.chonky-file-icon-children-count {\n  color: #bbb;\n  font-size: 0.7em;\n  z-index: 10;\n}\n.chonky-file-icon-inside {\n  font-size: 2.2em;\n  color: #fff;\n  z-index: 5;\n}\n.chonky-file-selection {\n  z-index: 30;\n  background: repeating-linear-gradient(45deg, rgba(0, 153, 255, 0.14), rgba(0, 153, 255, 0.14) 10px, rgba(0, 153, 255, 0.2) 10px, rgba(0, 153, 255, 0.2) 20px);\n  background-color: rgba(0, 153, 255, 0.14);\n  opacity: 0;\n}\n.chonky-file-thumbnail {\n  z-index: 20;\n  transition: opacity 100ms ease-in-out;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: contain;\n  opacity: 1;\n}\n.chonky-file-thumbnail-hidden {\n  opacity: 0;\n}\n.chonky-file-background {\n  z-index: 10;\n  transition: opacity 100ms ease-in-out;\n  opacity: 0.5;\n}\n.chonky-file-entry:hover .chonky-file-background {\n  opacity: 0.6;\n}\n',""]),module.exports=exports},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(4),__webpack_require__(22),__webpack_require__(6),__webpack_require__(10),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(40),_story_helpers__WEBPACK_IMPORTED_MODULE_8__=(__webpack_require__(69),__webpack_require__(8));function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Meta=function makeShortcode(name){return function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",props)}}("Meta"),layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(Meta,{title:"".concat(_story_helpers__WEBPACK_IMPORTED_MODULE_8__.a.ApiReference,"|Built-in file actions"),mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"built-in-file-actions"},"Built-in file actions"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Explain ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"p"},"ChonkyActions")," map."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h2",{id:"how-to-use-file-actions"},"How to use file actions"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h2",{id:"list-of-built-in-file-actions"},"List of built-in file actions"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h3",{id:"openfiles"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"h3"},"OpenFiles")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"p"},"data.files")," will always be set, but ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"p"},"data.target")," can sometimes be undefined. For\nexample, when the user clicks ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"p"},"Actions -> Open selection"),", target will be undefined."))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"".concat(_story_helpers__WEBPACK_IMPORTED_MODULE_8__.a.ApiReference,"|Built-in file actions"),includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(4),__webpack_require__(22),__webpack_require__(6),__webpack_require__(10);var delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),esm=__webpack_require__(1),blocks=__webpack_require__(40),Chonky_header=__webpack_require__(69),story_helpers=__webpack_require__(8),src=(__webpack_require__(13),__webpack_require__(24),__webpack_require__(29),__webpack_require__(16),__webpack_require__(20),__webpack_require__(26),__webpack_require__(18),__webpack_require__(23),__webpack_require__(5),__webpack_require__(30),__webpack_require__(12),__webpack_require__(25),__webpack_require__(19),__webpack_require__(21),__webpack_require__(7)),chonky_source_fs_map=__webpack_require__(79);function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var Demo_Demo=function Demo(){var _useState2=_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(rootDemoFolder.id),2),currentFolderId=_useState2[0],setCurrentFolderId=_useState2[1],files=Demo_useFiles(currentFolderId),folderChain=Demo_useFolderChain(currentFolderId),handleFileAction=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(action,actionData){if(action.id===src.a.OpenFiles.id){var targetFile=null;if(actionData.target?targetFile=actionData.target:actionData.files&&1===actionData.files.length&&(targetFile=actionData.files[0]),targetFile&&src.d.isDirectory(targetFile))return void setCurrentFolderId(targetFile.id)}Object(story_helpers.c)({action:action,data:actionData})}),[setCurrentFolderId]);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:600}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:files,folderChain:folderChain,onFileAction:handleFileAction},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.g,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null)))};Demo_Demo.displayName="Demo";var rootDemoFolder={id:"qwerty123456",name:"Chonky Demo",isDir:!0,childrenIds:[chonky_source_fs_map.rootFolderId]},demoFileMap=Object.assign(function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}({},rootDemoFolder.id,rootDemoFolder),chonky_source_fs_map.fileMap);demoFileMap[chonky_source_fs_map.rootFolderId].parentId=rootDemoFolder.id;var Demo_useFiles=function useFiles(currentFolderId){return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var currentFolder=demoFileMap[currentFolderId];return currentFolder.childrenIds?currentFolder.childrenIds.map((function(fileId){var file=demoFileMap[fileId];return file||null})):[]}),[currentFolderId])},Demo_useFolderChain=function useFolderChain(currentFolderId){return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){for(var currentFolder=demoFileMap[currentFolderId],folderChain=[currentFolder],parentId=currentFolder.parentId;parentId;){var parentFile=demoFileMap[parentId];parentFile?(folderChain.unshift(parentFile),parentId=parentFile.parentId):parentId=null}return folderChain}),[currentFolderId])};try{Demo_Demo.displayName="Demo",Demo_Demo.__docgenInfo={description:"",displayName:"Demo",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/01-Welcome/Demo.tsx#Demo"]={docgenInfo:Demo_Demo.__docgenInfo,name:"Demo",path:"stories/01-Welcome/Demo.tsx#Demo"})}catch(__react_docgen_typescript_loader_error){}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Meta=function makeShortcode(name){return function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),Object(esm.mdx)("div",props)}}("Meta"),layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(esm.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(esm.mdx)(Meta,{title:"".concat(story_helpers.a.Welcome,"|Introduction"),mdxType:"Meta"}),Object(esm.mdx)(Chonky_header.a,{mdxType:"ChonkyHeader"}),Object(esm.mdx)("h1",{id:"introduction"},"Introduction"),Object(esm.mdx)("p",null,Object(esm.mdx)("strong",{parentName:"p"},"Chonky is a file browser component for React.")," It tries to recreate the native file\nbrowsing experience in your browser. Chonky supports drag & drop, file selection,\nimage thumbnails, and much more!"),Object(esm.mdx)("p",null,Object(esm.mdx)("a",_extends({parentName:"p"},{href:"https://github.com/TimboKZ/Chonky",target:"_blank",rel:"nofollow noopener noreferrer"}),Object(esm.mdx)("strong",{parentName:"a"},"View on Github"))),Object(esm.mdx)("br",null),Object(esm.mdx)("br",null),Object(esm.mdx)("h1",{id:"philosophy"},"Philosophy"),Object(esm.mdx)("p",null,"Please read this section to understand what Chonky is and is not."),Object(esm.mdx)("br",null),Object(esm.mdx)("h3",{id:"1-chonky-is-the-presentation-layer"},"1. Chonky is the presentation layer."),Object(esm.mdx)("p",null,"Chonky takes a list of files and shows them to the user. It does not and should not\nknow where the files came from, nor should it now how file operations are carried out."),Object(esm.mdx)("br",null),Object(esm.mdx)("h3",{id:"2-chonky-is-filesystem-agnostic"},"2. Chonky is filesystem-agnostic."),Object(esm.mdx)("p",null,"Chonky tries to stay ",Object(esm.mdx)("strong",{parentName:"p"},"unopinionated")," when it comes to interactions with the file\nsystem (FS)."),Object(esm.mdx)("br",null),Object(esm.mdx)("h3",{id:"3-developing-file-browsers-is-hard-each-use-case-is-unique"},"3. Developing file browsers is hard. Each use case is unique."),Object(esm.mdx)("p",null,"At the same time, Chonky tries to cover all possible interactions with the user. This includes support for keyboard\nnavigation and common keyboard shortcuts, support for file selections, drag & drop, different file views, and much more."),Object(esm.mdx)("br",null),Object(esm.mdx)("br",null),Object(esm.mdx)("br",null),Object(esm.mdx)("br",null)," ")}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"".concat(story_helpers.a.Welcome,"|Introduction"),includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(esm.mdx)(blocks.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(esm.mdx)(MDXContent,null))}});__webpack_exports__.default=componentMeta},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"FileBrowserDemo",(function(){return _01_File_Browser_demo_stories_FileBrowserDemo}));__webpack_require__(4),__webpack_require__(13),__webpack_require__(24),__webpack_require__(14),__webpack_require__(29),__webpack_require__(16),__webpack_require__(20),__webpack_require__(26),__webpack_require__(18),__webpack_require__(23),__webpack_require__(5),__webpack_require__(6),__webpack_require__(30),__webpack_require__(12),__webpack_require__(25),__webpack_require__(19),__webpack_require__(21),__webpack_require__(51);var _parameters,src=__webpack_require__(7),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(8),chonky_source_fs_map=__webpack_require__(79);function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var category=story_helpers.a.Demos,_01_File_Browser_demo_stories_FileBrowserDemo=(__webpack_exports__.default={title:"".concat(category,"|").concat("File Browser demo"),parameters:(_parameters={storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import \'chonky/style/main.css\';\\n\\nimport {\\n    ChonkyActions,\\n    FileActionHandler,\\n    FileArray,\\n    FileBrowser,\\n    FileData,\\n    FileHelper,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from \'chonky\';\\nimport React, { useCallback, useMemo, useState } from \'react\';\\nimport { Nullable } from \'tsdef\';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories,\\n} from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./01-File-Browser-demo.md\';\\nimport ChonkySourceCodeFsMap from \'./chonky_source.fs_map.json\';\\n\\nconst category = StoryCategories.Demos;\\nconst title = \'File Browser demo\';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const FileBrowserDemo: React.FC = () => {\\n    const [currentFolderId, setCurrentFolderId] = useState(rootDemoFolder.id);\\n\\n    const files = useFiles(currentFolderId);\\n    const folderChain = useFolderChain(currentFolderId);\\n\\n    const handleFileAction = useCallback<FileActionHandler>(\\n        (action, actionData) => {\\n            if (action.id === ChonkyActions.OpenFiles.id) {\\n                let targetFile: Nullable<FileData> = null;\\n                if (actionData.target) {\\n                    targetFile = actionData.target;\\n                } else if (actionData.files && actionData.files.length === 1) {\\n                    targetFile = actionData.files[0];\\n                }\\n\\n                if (targetFile && FileHelper.isDirectory(targetFile)) {\\n                    setCurrentFolderId(targetFile.id);\\n                    return;\\n                }\\n            }\\n\\n            showActionNotification({ action, data: actionData });\\n        },\\n        [setCurrentFolderId]\\n    );\\n\\n    return (\\n        <div style={{ height: 600 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\\nconst rootDemoFolder = {\\n    id: \'qwerty123456\',\\n    name: \'Chonky Demo\',\\n    isDir: true,\\n    childrenIds: [ChonkySourceCodeFsMap.rootFolderId],\\n};\\nconst demoFileMap = {\\n    [rootDemoFolder.id]: rootDemoFolder,\\n    ...ChonkySourceCodeFsMap.fileMap,\\n};\\ndemoFileMap[ChonkySourceCodeFsMap.rootFolderId].parentId = rootDemoFolder.id;\\n\\nconst useFiles = (currentFolderId: string): FileArray => {\\n    return useMemo(() => {\\n        const currentFolder = demoFileMap[currentFolderId];\\n        const files = !currentFolder.childrenIds\\n            ? []\\n            : currentFolder.childrenIds.map((fileId) => {\\n                  const file = demoFileMap[fileId];\\n                  return file ? file : null;\\n              });\\n        return files;\\n    }, [currentFolderId]);\\n};\\n\\nconst useFolderChain = (currentFolderId: string): FileArray => {\\n    return useMemo(() => {\\n        const currentFolder = demoFileMap[currentFolderId];\\n\\n        const folderChain = [currentFolder];\\n\\n        let parentId = currentFolder.parentId;\\n        while (parentId) {\\n            const parentFile = demoFileMap[parentId];\\n            if (parentFile) {\\n                folderChain.unshift(parentFile);\\n                parentId = parentFile.parentId;\\n            } else {\\n                parentId = null;\\n            }\\n        }\\n\\n        return folderChain;\\n    }, [currentFolderId]);\\n};\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"file-browser-demo":{"startLoc":{"col":41,"line":38},"endLoc":{"col":1,"line":79},"startBody":{"col":41,"line":38},"endBody":{"col":1,"line":79}}};\n    \nimport \'chonky/style/main.css\';\n\nimport {\n    ChonkyActions,\n    FileActionHandler,\n    FileArray,\n    FileBrowser,\n    FileData,\n    FileHelper,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from \'chonky\';\nimport React, { useCallback, useMemo, useState } from \'react\';\nimport { Nullable } from \'tsdef\';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories,\n} from \'../story-helpers\';\n// @ts-ignore\n\nimport markdown from \'./01-File-Browser-demo.md\';\nimport ChonkySourceCodeFsMap from \'./chonky_source.fs_map.json\';\n\nconst category = StoryCategories.Demos;\nconst title = \'File Browser demo\';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {"storySource":{"source":"import \'chonky/style/main.css\';\\n\\nimport {\\n    ChonkyActions,\\n    FileActionHandler,\\n    FileArray,\\n    FileBrowser,\\n    FileData,\\n    FileHelper,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from \'chonky\';\\nimport React, { useCallback, useMemo, useState } from \'react\';\\nimport { Nullable } from \'tsdef\';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories,\\n} from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./01-File-Browser-demo.md\';\\nimport ChonkySourceCodeFsMap from \'./chonky_source.fs_map.json\';\\n\\nconst category = StoryCategories.Demos;\\nconst title = \'File Browser demo\';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const FileBrowserDemo: React.FC = () => {\\n    const [currentFolderId, setCurrentFolderId] = useState(rootDemoFolder.id);\\n\\n    const files = useFiles(currentFolderId);\\n    const folderChain = useFolderChain(currentFolderId);\\n\\n    const handleFileAction = useCallback<FileActionHandler>(\\n        (action, actionData) => {\\n            if (action.id === ChonkyActions.OpenFiles.id) {\\n                let targetFile: Nullable<FileData> = null;\\n                if (actionData.target) {\\n                    targetFile = actionData.target;\\n                } else if (actionData.files && actionData.files.length === 1) {\\n                    targetFile = actionData.files[0];\\n                }\\n\\n                if (targetFile && FileHelper.isDirectory(targetFile)) {\\n                    setCurrentFolderId(targetFile.id);\\n                    return;\\n                }\\n            }\\n\\n            showActionNotification({ action, data: actionData });\\n        },\\n        [setCurrentFolderId]\\n    );\\n\\n    return (\\n        <div style={{ height: 600 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\\nconst rootDemoFolder = {\\n    id: \'qwerty123456\',\\n    name: \'Chonky Demo\',\\n    isDir: true,\\n    childrenIds: [ChonkySourceCodeFsMap.rootFolderId],\\n};\\nconst demoFileMap = {\\n    [rootDemoFolder.id]: rootDemoFolder,\\n    ...ChonkySourceCodeFsMap.fileMap,\\n};\\ndemoFileMap[ChonkySourceCodeFsMap.rootFolderId].parentId = rootDemoFolder.id;\\n\\nconst useFiles = (currentFolderId: string): FileArray => {\\n    return useMemo(() => {\\n        const currentFolder = demoFileMap[currentFolderId];\\n        const files = !currentFolder.childrenIds\\n            ? []\\n            : currentFolder.childrenIds.map((fileId) => {\\n                  const file = demoFileMap[fileId];\\n                  return file ? file : null;\\n              });\\n        return files;\\n    }, [currentFolderId]);\\n};\\n\\nconst useFolderChain = (currentFolderId: string): FileArray => {\\n    return useMemo(() => {\\n        const currentFolder = demoFileMap[currentFolderId];\\n\\n        const folderChain = [currentFolder];\\n\\n        let parentId = currentFolder.parentId;\\n        while (parentId) {\\n            const parentFile = demoFileMap[parentId];\\n            if (parentFile) {\\n                folderChain.unshift(parentFile);\\n                parentId = parentFile.parentId;\\n            } else {\\n                parentId = null;\\n            }\\n        }\\n\\n        return folderChain;\\n    }, [currentFolderId]);\\n};\\n","locationsMap":{"file-browser-demo":{"startLoc":{"col":41,"line":38},"endLoc":{"col":1,"line":79},"startBody":{"col":41,"line":38},"endBody":{"col":1,"line":79}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const FileBrowserDemo: React.FC = () => {\n    const [currentFolderId, setCurrentFolderId] = useState(rootDemoFolder.id);\n\n    const files = useFiles(currentFolderId);\n    const folderChain = useFolderChain(currentFolderId);\n\n    const handleFileAction = useCallback<FileActionHandler>(\n        (action, actionData) => {\n            if (action.id === ChonkyActions.OpenFiles.id) {\n                let targetFile: Nullable<FileData> = null;\n                if (actionData.target) {\n                    targetFile = actionData.target;\n                } else if (actionData.files && actionData.files.length === 1) {\n                    targetFile = actionData.files[0];\n                }\n\n                if (targetFile && FileHelper.isDirectory(targetFile)) {\n                    setCurrentFolderId(targetFile.id);\n                    return;\n                }\n            }\n\n            showActionNotification({ action, data: actionData });\n        },\n        [setCurrentFolderId]\n    );\n\n    return (\n        <div style={{ height: 600 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n\nconst rootDemoFolder = {\n    id: \'qwerty123456\',\n    name: \'Chonky Demo\',\n    isDir: true,\n    childrenIds: [ChonkySourceCodeFsMap.rootFolderId],\n};\nconst demoFileMap = {\n    [rootDemoFolder.id]: rootDemoFolder,\n    ...ChonkySourceCodeFsMap.fileMap,\n};\ndemoFileMap[ChonkySourceCodeFsMap.rootFolderId].parentId = rootDemoFolder.id;\n\nconst useFiles = (currentFolderId: string): FileArray => {\n    return useMemo(() => {\n        const currentFolder = demoFileMap[currentFolderId];\n        const files = !currentFolder.childrenIds\n            ? []\n            : currentFolder.childrenIds.map((fileId) => {\n                  const file = demoFileMap[fileId];\n                  return file ? file : null;\n              });\n        return files;\n    }, [currentFolderId]);\n};\n\nconst useFolderChain = (currentFolderId: string): FileArray => {\n    return useMemo(() => {\n        const currentFolder = demoFileMap[currentFolderId];\n\n        const folderChain = [currentFolder];\n\n        let parentId = currentFolder.parentId;\n        while (parentId) {\n            const parentFile = demoFileMap[parentId];\n            if (parentFile) {\n                folderChain.unshift(parentFile);\n                parentId = parentFile.parentId;\n            } else {\n                parentId = null;\n            }\n        }\n\n        return folderChain;\n    }, [currentFolderId]);\n};\n',locationsMap:{"file-browser-demo":{startLoc:{col:41,line:46},endLoc:{col:1,line:87},startBody:{col:41,line:46},endBody:{col:1,line:87}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    ChonkyActions,\n    FileActionHandler,\n    FileArray,\n    FileBrowser,\n    FileData,\n    FileHelper,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { Nullable } from 'tsdef';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories,\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './01-File-Browser-demo.md';\nimport ChonkySourceCodeFsMap from './chonky_source.fs_map.json';\n\nconst category = StoryCategories.Demos;\nconst title = 'File Browser demo';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const FileBrowserDemo: React.FC = () => {\n    const [currentFolderId, setCurrentFolderId] = useState(rootDemoFolder.id);\n\n    const files = useFiles(currentFolderId);\n    const folderChain = useFolderChain(currentFolderId);\n\n    const handleFileAction = useCallback<FileActionHandler>(\n        (action, actionData) => {\n            if (action.id === ChonkyActions.OpenFiles.id) {\n                let targetFile: Nullable<FileData> = null;\n                if (actionData.target) {\n                    targetFile = actionData.target;\n                } else if (actionData.files && actionData.files.length === 1) {\n                    targetFile = actionData.files[0];\n                }\n\n                if (targetFile && FileHelper.isDirectory(targetFile)) {\n                    setCurrentFolderId(targetFile.id);\n                    return;\n                }\n            }\n\n            showActionNotification({ action, data: actionData });\n        },\n        [setCurrentFolderId]\n    );\n\n    return (\n        <div style={{ height: 600 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n\nconst rootDemoFolder = {\n    id: 'qwerty123456',\n    name: 'Chonky Demo',\n    isDir: true,\n    childrenIds: [ChonkySourceCodeFsMap.rootFolderId],\n};\nconst demoFileMap = {\n    [rootDemoFolder.id]: rootDemoFolder,\n    ...ChonkySourceCodeFsMap.fileMap,\n};\ndemoFileMap[ChonkySourceCodeFsMap.rootFolderId].parentId = rootDemoFolder.id;\n\nconst useFiles = (currentFolderId: string): FileArray => {\n    return useMemo(() => {\n        const currentFolder = demoFileMap[currentFolderId];\n        const files = !currentFolder.childrenIds\n            ? []\n            : currentFolder.childrenIds.map((fileId) => {\n                  const file = demoFileMap[fileId];\n                  return file ? file : null;\n              });\n        return files;\n    }, [currentFolderId]);\n};\n\nconst useFolderChain = (currentFolderId: string): FileArray => {\n    return useMemo(() => {\n        const currentFolder = demoFileMap[currentFolderId];\n\n        const folderChain = [currentFolder];\n\n        let parentId = currentFolder.parentId;\n        while (parentId) {\n            const parentFile = demoFileMap[parentId];\n            if (parentFile) {\n                folderChain.unshift(parentFile);\n                parentId = parentFile.parentId;\n            } else {\n                parentId = null;\n            }\n        }\n\n        return folderChain;\n    }, [currentFolderId]);\n};\n",locationsMap:{"file-browser-demo":{startLoc:{col:41,line:38},endLoc:{col:1,line:79},startBody:{col:41,line:38},endBody:{col:1,line:79}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.b)({markdown:"Check out the demo below to see what Chonky can do. Things to try:\n\n-   Try opening files and entering folders.\n-   Try keyboard navigation - use `Tab`, `Space` and `Enter` keys.\n-   Try selecting files by clicking on them or pressing `Ctrl+A`.\n-   Try dragging & dropping files.\n\nYou can find the full source code of the demo below\n[on GitHub](https://github.com/TimboKZ/Chonky/blob/1.x/stories/02-Demos/01-File-Browser-demo.stories.tsx)\n.\n"})),_parameters)},function FileBrowserDemo(){var _useState2=_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(rootDemoFolder.id),2),currentFolderId=_useState2[0],setCurrentFolderId=_useState2[1],files=_01_File_Browser_demo_stories_useFiles(currentFolderId),folderChain=_01_File_Browser_demo_stories_useFolderChain(currentFolderId),handleFileAction=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(action,actionData){if(action.id===src.a.OpenFiles.id){var targetFile=null;if(actionData.target?targetFile=actionData.target:actionData.files&&1===actionData.files.length&&(targetFile=actionData.files[0]),targetFile&&src.d.isDirectory(targetFile))return void setCurrentFolderId(targetFile.id)}Object(story_helpers.c)({action:action,data:actionData})}),[setCurrentFolderId]);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:600}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:files,folderChain:folderChain,onFileAction:handleFileAction,enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.g,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null)))});_01_File_Browser_demo_stories_FileBrowserDemo.displayName="FileBrowserDemo";var rootDemoFolder={id:"qwerty123456",name:"Chonky Demo",isDir:!0,childrenIds:[chonky_source_fs_map.rootFolderId]},demoFileMap=Object.assign(_defineProperty({},rootDemoFolder.id,rootDemoFolder),chonky_source_fs_map.fileMap);demoFileMap[chonky_source_fs_map.rootFolderId].parentId=rootDemoFolder.id;var _01_File_Browser_demo_stories_useFiles=function useFiles(currentFolderId){return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var currentFolder=demoFileMap[currentFolderId];return currentFolder.childrenIds?currentFolder.childrenIds.map((function(fileId){var file=demoFileMap[fileId];return file||null})):[]}),[currentFolderId])},_01_File_Browser_demo_stories_useFolderChain=function useFolderChain(currentFolderId){return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){for(var currentFolder=demoFileMap[currentFolderId],folderChain=[currentFolder],parentId=currentFolder.parentId;parentId;){var parentFile=demoFileMap[parentId];parentFile?(folderChain.unshift(parentFile),parentId=parentFile.parentId):parentId=null}return folderChain}),[currentFolderId])};try{_01_File_Browser_demo_stories_FileBrowserDemo.displayName="FileBrowserDemo",_01_File_Browser_demo_stories_FileBrowserDemo.__docgenInfo={description:"",displayName:"FileBrowserDemo",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/02-Demos/01-File-Browser-demo.stories.tsx#FileBrowserDemo"]={docgenInfo:_01_File_Browser_demo_stories_FileBrowserDemo.__docgenInfo,name:"FileBrowserDemo",path:"stories/02-Demos/01-File-Browser-demo.stories.tsx#FileBrowserDemo"})}catch(__react_docgen_typescript_loader_error){}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ComponentHierarchyExample",(function(){return _01_Component_hierarchy_stories_ComponentHierarchyExample}));__webpack_require__(14),__webpack_require__(30);var _parameters,src=__webpack_require__(7),delegated_reactfrom_dll_reference_storybook_docs_dll=(__webpack_require__(51),__webpack_require__(0)),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(8);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var category=story_helpers.a.FileBrowserBasics,_01_Component_hierarchy_stories_ComponentHierarchyExample=(__webpack_exports__.default={title:"".concat(category,"|").concat("Component hierarchy"),parameters:(_parameters={storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import {\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from \'chonky\';\\nimport \'chonky/style/main.css\';\\nimport React from \'react\';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories,\\n} from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./01-Component-hierarchy.md\';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = \'Component hierarchy\';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ComponentHierarchyExample = () => {\\n    const folderChain = [{ id: \'xASw\', name: \'Chonky Demo Folder\', isDir: true }];\\n    const files = [{ id: \'bEfX\', name: \'Demo.ts\' }];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"component-hierarchy-example":{"startLoc":{"col":41,"line":32},"endLoc":{"col":1,"line":54},"startBody":{"col":41,"line":32},"endBody":{"col":1,"line":54}}};\n    \nimport {\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from \'chonky\';\nimport \'chonky/style/main.css\';\nimport React from \'react\';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories,\n} from \'../story-helpers\';\n// @ts-ignore\n\nimport markdown from \'./01-Component-hierarchy.md\';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = \'Component hierarchy\';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {"storySource":{"source":"import {\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from \'chonky\';\\nimport \'chonky/style/main.css\';\\nimport React from \'react\';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories,\\n} from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./01-Component-hierarchy.md\';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = \'Component hierarchy\';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ComponentHierarchyExample = () => {\\n    const folderChain = [{ id: \'xASw\', name: \'Chonky Demo Folder\', isDir: true }];\\n    const files = [{ id: \'bEfX\', name: \'Demo.ts\' }];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n","locationsMap":{"component-hierarchy-example":{"startLoc":{"col":41,"line":32},"endLoc":{"col":1,"line":54},"startBody":{"col":41,"line":32},"endBody":{"col":1,"line":54}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ComponentHierarchyExample = () => {\n    const folderChain = [{ id: \'xASw\', name: \'Chonky Demo Folder\', isDir: true }];\n    const files = [{ id: \'bEfX\', name: \'Demo.ts\' }];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n',locationsMap:{"component-hierarchy-example":{startLoc:{col:41,line:40},endLoc:{col:1,line:62},startBody:{col:41,line:40},endBody:{col:1,line:62}}}}},_defineProperty(_parameters,"storySource",{source:"import {\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport 'chonky/style/main.css';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories,\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './01-Component-hierarchy.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Component hierarchy';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ComponentHierarchyExample = () => {\n    const folderChain = [{ id: 'xASw', name: 'Chonky Demo Folder', isDir: true }];\n    const files = [{ id: 'bEfX', name: 'Demo.ts' }];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"component-hierarchy-example":{startLoc:{col:41,line:32},endLoc:{col:1,line:54},startBody:{col:41,line:32},endBody:{col:1,line:54}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.b)({markdown:"Chonky includes several major components - `FileBrowser`, `FileList`, `FileToolbar`,\nand some others.\n\n`FileBrowser` is the most important component. In your code, it should wrap\nall other Chonky components:\n\n```tsx\n<FileBrowser files={[]}>\n    <FileToolbar />\n    <FileSearch />\n    <FileList />\n</FileBrowser>\n```\n\nThis is because `FileBrowser` is responsible for providing the configuration and\nrelevant React contexts to all the children Chonky components. It also the component\nthat you will be passing all of your props too.\n\n`FileBrowser` is also the only required component - all others, such as `FileList`,\nare optional. For example, if you're only interested in displaying files, but don't\nneed to the toolbar, you could use the following hierarchy:\n\n```tsx\n<FileBrowser files={[]}>\n    <FileList />\n</FileBrowser>\n```\n\nOr, if you're a power user, and you want to use a custom implementation of the file\nlist by consuming Chonky's [Recoil atoms](https://recoiljs.org/) directly, you could\nuse something like:\n\n```tsx\n<FileBrowser files={[]}>\n    <FileToolbar />\n    <FileSearch />\n    <MyCustomFileList />\n</FileBrowser>\n```\n"})),_parameters)},function ComponentHierarchyExample(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[{id:"bEfX",name:"Demo.ts"}],folderChain:[{id:"xASw",name:"Chonky Demo Folder",isDir:!0}],onFileAction:function handleFileAction(action,data){Object(story_helpers.c)({action:action,data:data})},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.g,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null)))});_01_Component_hierarchy_stories_ComponentHierarchyExample.displayName="ComponentHierarchyExample"},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"FilesArrayExample",(function(){return _02_Displaying_files_stories_FilesArrayExample}));__webpack_require__(14),__webpack_require__(23),__webpack_require__(30),__webpack_require__(51);var _parameters,src=__webpack_require__(7),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(8);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var category=story_helpers.a.FileBrowserBasics,_02_Displaying_files_stories_FilesArrayExample=(__webpack_exports__.default={title:"".concat(category,"|").concat("Displaying files"),parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileArray,\\n    FileBrowser,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories,\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './02-Displaying-files.md';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = 'Displaying files';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const FilesArrayExample = () => {\\n    const files: FileArray = [\\n        null, // Loading animation will be shown for this file\\n        null,\\n        {\\n            id: 'nTe',\\n            name: 'Normal file.yaml',\\n            size: 890,\\n            modDate: new Date('2012-01-01'),\\n        },\\n        {\\n            id: 'zxc',\\n            name: 'Hidden file.mp4',\\n            isHidden: true,\\n            size: 890,\\n        },\\n        {\\n            id: 'bnm',\\n            name: 'Normal folder',\\n            isDir: true,\\n            childrenCount: 12,\\n        },\\n        {\\n            id: 'vfr',\\n            name: 'Symlink folder',\\n            isDir: true,\\n            isSymlink: true,\\n            childrenCount: 0,\\n        },\\n        {\\n            id: 'qwe',\\n            name: 'Not selectable.tar.gz',\\n            ext: '.tar.gz', // Custom extension\\n            selectable: false, // Disable selection\\n            size: 54300000000,\\n            modDate: new Date(),\\n        },\\n        {\\n            id: 'rty',\\n            name: 'Not openable.pem',\\n            openable: false, // Prevent opening\\n            size: 100000000,\\n        },\\n        {\\n            id: 'btj',\\n            name: 'Not draggable.csv',\\n            draggable: false, // Prevent this files from being dragged\\n        },\\n        {\\n            id: 'upq',\\n            name: 'Not droppable',\\n            isDir: true,\\n            droppable: false, // Prevent files from being dropped into this folder\\n        },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"files-array-example\":{\"startLoc\":{\"col\":33,\"line\":34},\"endLoc\":{\"col\":1,\"line\":107},\"startBody\":{\"col\":33,\"line\":34},\"endBody\":{\"col\":1,\"line\":107}}};\n    \nimport 'chonky/style/main.css';\n\nimport {\n    FileAction,\n    FileActionData,\n    FileArray,\n    FileBrowser,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories,\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './02-Displaying-files.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Displaying files';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileArray,\\n    FileBrowser,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories,\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './02-Displaying-files.md';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = 'Displaying files';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const FilesArrayExample = () => {\\n    const files: FileArray = [\\n        null, // Loading animation will be shown for this file\\n        null,\\n        {\\n            id: 'nTe',\\n            name: 'Normal file.yaml',\\n            size: 890,\\n            modDate: new Date('2012-01-01'),\\n        },\\n        {\\n            id: 'zxc',\\n            name: 'Hidden file.mp4',\\n            isHidden: true,\\n            size: 890,\\n        },\\n        {\\n            id: 'bnm',\\n            name: 'Normal folder',\\n            isDir: true,\\n            childrenCount: 12,\\n        },\\n        {\\n            id: 'vfr',\\n            name: 'Symlink folder',\\n            isDir: true,\\n            isSymlink: true,\\n            childrenCount: 0,\\n        },\\n        {\\n            id: 'qwe',\\n            name: 'Not selectable.tar.gz',\\n            ext: '.tar.gz', // Custom extension\\n            selectable: false, // Disable selection\\n            size: 54300000000,\\n            modDate: new Date(),\\n        },\\n        {\\n            id: 'rty',\\n            name: 'Not openable.pem',\\n            openable: false, // Prevent opening\\n            size: 100000000,\\n        },\\n        {\\n            id: 'btj',\\n            name: 'Not draggable.csv',\\n            draggable: false, // Prevent this files from being dragged\\n        },\\n        {\\n            id: 'upq',\\n            name: 'Not droppable',\\n            isDir: true,\\n            droppable: false, // Prevent files from being dropped into this folder\\n        },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"files-array-example\":{\"startLoc\":{\"col\":33,\"line\":34},\"endLoc\":{\"col\":1,\"line\":107},\"startBody\":{\"col\":33,\"line\":34},\"endBody\":{\"col\":1,\"line\":107}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const FilesArrayExample = () => {\n    const files: FileArray = [\n        null, // Loading animation will be shown for this file\n        null,\n        {\n            id: 'nTe',\n            name: 'Normal file.yaml',\n            size: 890,\n            modDate: new Date('2012-01-01'),\n        },\n        {\n            id: 'zxc',\n            name: 'Hidden file.mp4',\n            isHidden: true,\n            size: 890,\n        },\n        {\n            id: 'bnm',\n            name: 'Normal folder',\n            isDir: true,\n            childrenCount: 12,\n        },\n        {\n            id: 'vfr',\n            name: 'Symlink folder',\n            isDir: true,\n            isSymlink: true,\n            childrenCount: 0,\n        },\n        {\n            id: 'qwe',\n            name: 'Not selectable.tar.gz',\n            ext: '.tar.gz', // Custom extension\n            selectable: false, // Disable selection\n            size: 54300000000,\n            modDate: new Date(),\n        },\n        {\n            id: 'rty',\n            name: 'Not openable.pem',\n            openable: false, // Prevent opening\n            size: 100000000,\n        },\n        {\n            id: 'btj',\n            name: 'Not draggable.csv',\n            draggable: false, // Prevent this files from being dragged\n        },\n        {\n            id: 'upq',\n            name: 'Not droppable',\n            isDir: true,\n            droppable: false, // Prevent files from being dropped into this folder\n        },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"files-array-example":{startLoc:{col:33,line:42},endLoc:{col:1,line:115},startBody:{col:33,line:42},endBody:{col:1,line:115}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    FileAction,\n    FileActionData,\n    FileArray,\n    FileBrowser,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories,\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './02-Displaying-files.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Displaying files';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const FilesArrayExample = () => {\n    const files: FileArray = [\n        null, // Loading animation will be shown for this file\n        null,\n        {\n            id: 'nTe',\n            name: 'Normal file.yaml',\n            size: 890,\n            modDate: new Date('2012-01-01'),\n        },\n        {\n            id: 'zxc',\n            name: 'Hidden file.mp4',\n            isHidden: true,\n            size: 890,\n        },\n        {\n            id: 'bnm',\n            name: 'Normal folder',\n            isDir: true,\n            childrenCount: 12,\n        },\n        {\n            id: 'vfr',\n            name: 'Symlink folder',\n            isDir: true,\n            isSymlink: true,\n            childrenCount: 0,\n        },\n        {\n            id: 'qwe',\n            name: 'Not selectable.tar.gz',\n            ext: '.tar.gz', // Custom extension\n            selectable: false, // Disable selection\n            size: 54300000000,\n            modDate: new Date(),\n        },\n        {\n            id: 'rty',\n            name: 'Not openable.pem',\n            openable: false, // Prevent opening\n            size: 100000000,\n        },\n        {\n            id: 'btj',\n            name: 'Not draggable.csv',\n            draggable: false, // Prevent this files from being dragged\n        },\n        {\n            id: 'upq',\n            name: 'Not droppable',\n            isDir: true,\n            droppable: false, // Prevent files from being dropped into this folder\n        },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"files-array-example":{startLoc:{col:33,line:34},endLoc:{col:1,line:107},startBody:{col:33,line:34},endBody:{col:1,line:107}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.b)({markdown:"The `FileBrowser` component has only one required prop - the `files` array:\n\n```tsx\nconst FilesExample = () => {\n    const files = [\n        null, // Will show loading animation\n        { id: 'xWbZ', name: 'Instructions.txt' },\n        { id: 'xWbZ', name: 'Tools', isDir: true },\n    ];\n\n    return (\n        <FileBrowser files={files}>\n            <FileToolbar />\n            <FileSearch />\n            <FileList />\n        </FileBrowser>\n    );\n};\n```\n\nThis array describes the files that Chonky should show to the user. It can contain\nfile descriptions (as plain JavaScript objects) and `null` values. `null` values\nindicate \"loading\" files - a loading placeholder animation will be shown in their place.\n\n## The `FileData` type\n\nFormally, the Typescript type for the `files` array is:\n\n```ts\ntype FileArray = Nullable<FileData>[];\n// i.e. Array of nulls and `FileData` objects mixed together\n```\n\nThe `FileData` type is shown below. It might look intimidating, but please note that\n`id` and `name` are the only 2 required fields. All other fields are optional, and\nare there to give you more control over how Chonky displays your files.\n\n```ts\nexport interface FileData {\n    id: string; // (Required) String that uniquely identifies the file\n\n    name: string; // (Required) Full name, e.g. `MyImage.jpg`\n    ext?: string; // File extension, e.g. `.jpg`\n\n    isDir?: boolean; // Is a directory, default: false\n    isHidden?: boolean; // Is a hidden file, default: false\n    isSymlink?: boolean; // Is a symlink, default: false\n    openable?: boolean; // Can be opened, default: true\n    selectable?: boolean; // Can be selected, default: true\n    draggable?: boolean; // Can be dragged, default: true\n    droppable?: boolean; // Can have files dropped into it, default: true\n\n    size?: number; // File size in bytes\n    modDate?: Date | string; // Last change date (or its string representation)\n    childrenCount?: number; // Number of files inside of a folder (only for folders)\n\n    thumbnailUrl?: string; // Automatically load thumbnail from here\n\n    [property: string]: any; // Any other user-defined property\n}\n```\n\n<span style=\"color: red; font-weight: bold;\">\nIt is very important that file IDs are unique:\n</span>\n\n> If file IDs are not unique, the consequences can be dire - for example, your user can\n> accidentally delete the wrong file. Chonky tries to protect you by scanning the files\n> array for duplicate IDs, but you should put some extra checks in your code too. You\n> can never be too safe.\n\nApart from the above, there are a few other details you should know about:\n\n-   `files` array should be **immutable**. If you're following the best Redux practices,\n    you're good. If you don't know what immutability is, please read the\n    _Immutability_ section from the sidebar. This is important.\n-   The file extension is automatically extracted from the `name` field, so you don't\n    need to provide an `ext` field yourself. In the rare case where the automatic\n    extension detection fails (for example: `file.tar.gz`), you can provide the `ext`\n    field explicitly. Please make sure extension is included in both `name` and `ext`,\n    e.g. `{id: 'AsVz', name: 'file.tar.gz', ext: '.tar.gz'}`.\n\n## Example file array\n\nThe _Live Example_ below tries to show case all different file configurations. Try\nperforming different actions (selections, drag & drop) and see how each file reacts.\nClick on `Show code` at the bottom to see the file array definition.\n"})),_parameters)},function FilesArrayExample(){var files=[null,null,{id:"nTe",name:"Normal file.yaml",size:890,modDate:new Date("2012-01-01")},{id:"zxc",name:"Hidden file.mp4",isHidden:!0,size:890},{id:"bnm",name:"Normal folder",isDir:!0,childrenCount:12},{id:"vfr",name:"Symlink folder",isDir:!0,isSymlink:!0,childrenCount:0},{id:"qwe",name:"Not selectable.tar.gz",ext:".tar.gz",selectable:!1,size:543e8,modDate:new Date},{id:"rty",name:"Not openable.pem",openable:!1,size:1e8},{id:"btj",name:"Not draggable.csv",draggable:!1},{id:"upq",name:"Not droppable",isDir:!0,droppable:!1}];return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:files,onFileAction:function handleFileAction(action,data){Object(story_helpers.c)({action:action,data:data})},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.g,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null)))});_02_Displaying_files_stories_FilesArrayExample.displayName="FilesArrayExample"},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"FolderChainExample",(function(){return _03_Specifying_folder_stories_FolderChainExample}));__webpack_require__(14),__webpack_require__(30),__webpack_require__(51);var _parameters,src=__webpack_require__(7),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(8);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var category=story_helpers.a.FileBrowserBasics,_03_Specifying_folder_stories_FolderChainExample=(__webpack_exports__.default={title:"".concat(category,"|").concat("Specifying current folder"),parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories,\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './03-Specifying-folder.md';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = 'Specifying current folder';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const FolderChainExample = () => {\\n    const folderChain = [\\n        {\\n            id: 'gM5tTe',\\n            name: 'My Documents',\\n            isDir: true,\\n        },\\n        {\\n            id: 'mTxYeA',\\n            name: 'Not Openable',\\n            isDir: true,\\n            openable: false, // This button will not be clickable\\n        },\\n        null, // Loading animation will be shown for this file\\n        {\\n            id: 'vxWtA',\\n            name: 'Unity Projects',\\n            isDir: true,\\n        },\\n        {\\n            id: 'mT7Et',\\n            name: 'Good Projects',\\n            isDir: true,\\n        },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={[]}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"folder-chain-example\":{\"startLoc\":{\"col\":34,\"line\":26},\"endLoc\":{\"col\":1,\"line\":68},\"startBody\":{\"col\":34,\"line\":26},\"endBody\":{\"col\":1,\"line\":68}}};\n    \nimport 'chonky/style/main.css';\n\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories,\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './03-Specifying-folder.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Specifying current folder';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories,\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './03-Specifying-folder.md';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = 'Specifying current folder';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const FolderChainExample = () => {\\n    const folderChain = [\\n        {\\n            id: 'gM5tTe',\\n            name: 'My Documents',\\n            isDir: true,\\n        },\\n        {\\n            id: 'mTxYeA',\\n            name: 'Not Openable',\\n            isDir: true,\\n            openable: false, // This button will not be clickable\\n        },\\n        null, // Loading animation will be shown for this file\\n        {\\n            id: 'vxWtA',\\n            name: 'Unity Projects',\\n            isDir: true,\\n        },\\n        {\\n            id: 'mT7Et',\\n            name: 'Good Projects',\\n            isDir: true,\\n        },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={[]}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"folder-chain-example\":{\"startLoc\":{\"col\":34,\"line\":26},\"endLoc\":{\"col\":1,\"line\":68},\"startBody\":{\"col\":34,\"line\":26},\"endBody\":{\"col\":1,\"line\":68}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const FolderChainExample = () => {\n    const folderChain = [\n        {\n            id: 'gM5tTe',\n            name: 'My Documents',\n            isDir: true,\n        },\n        {\n            id: 'mTxYeA',\n            name: 'Not Openable',\n            isDir: true,\n            openable: false, // This button will not be clickable\n        },\n        null, // Loading animation will be shown for this file\n        {\n            id: 'vxWtA',\n            name: 'Unity Projects',\n            isDir: true,\n        },\n        {\n            id: 'mT7Et',\n            name: 'Good Projects',\n            isDir: true,\n        },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={[]}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"folder-chain-example":{startLoc:{col:34,line:34},endLoc:{col:1,line:76},startBody:{col:34,line:34},endBody:{col:1,line:76}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories,\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './03-Specifying-folder.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Specifying current folder';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const FolderChainExample = () => {\n    const folderChain = [\n        {\n            id: 'gM5tTe',\n            name: 'My Documents',\n            isDir: true,\n        },\n        {\n            id: 'mTxYeA',\n            name: 'Not Openable',\n            isDir: true,\n            openable: false, // This button will not be clickable\n        },\n        null, // Loading animation will be shown for this file\n        {\n            id: 'vxWtA',\n            name: 'Unity Projects',\n            isDir: true,\n        },\n        {\n            id: 'mT7Et',\n            name: 'Good Projects',\n            isDir: true,\n        },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={[]}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"folder-chain-example":{startLoc:{col:34,line:26},endLoc:{col:1,line:68},startBody:{col:34,line:26},endBody:{col:1,line:68}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.b)({markdown:"Like any other file browser, Chonky can display the path to the current folder in the\ntoolbar above the files. To enable this functionality, you will need to add the\n`<FileToolbar />` to your component and pass the `folderChain` array to `FileBrowser`:\n\n```tsx\nconst FolderChainExample = () => {\n    const folderChain = [{ id: 'gMTe', name: 'My Documents', isDir: true }];\n\n    return (\n        <FileBrowser files={[]} folderChain={folderChain}>\n            <FileToolbar /> {/* <----- */}\n            <FileList />\n        </FileBrowser>\n    );\n};\n```\n\nFolder chain follows the exact same rules as the `files` array described in\n_Displaying files_ section. It can also contain `null` values to indicate loading\nfiles, and the objects inside it should follow the `FileData` type.\n\nSome notes:\n\n-   The files in the `folderChain` array don't need to have `isDir` set to `true`.\n-   Clicking on an item in the folder chain will open it, unless it is `null` or has\n    `openable` set to false.\n-   The \"Go up a directory\" button only works when the second-to-last file in the\n    folder chain is openable.\n"})),_parameters)},function FolderChainExample(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[],folderChain:[{id:"gM5tTe",name:"My Documents",isDir:!0},{id:"mTxYeA",name:"Not Openable",isDir:!0,openable:!1},null,{id:"vxWtA",name:"Unity Projects",isDir:!0},{id:"mT7Et",name:"Good Projects",isDir:!0}],onFileAction:function handleFileAction(action,data){Object(story_helpers.c)({action:action,data:data})}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.g,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null)))});_03_Specifying_folder_stories_FolderChainExample.displayName="FolderChainExample"},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ActionsExample",(function(){return _04_File_actions_stories_ActionsExample}));__webpack_require__(14),__webpack_require__(30),__webpack_require__(51);var _parameters,src=__webpack_require__(7),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(8);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var category=story_helpers.a.FileBrowserBasics,_04_File_actions_stories_ActionsExample=(__webpack_exports__.default={title:"".concat(category,"|").concat("Using file actions"),parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyActions,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './04-File-actions.md';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = 'Using file actions';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ActionsExample = () => {\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        // Log action to console\\n        \\n        console.log('\\\\nAction object:', action, '\\\\nAction data:', data);\\n\\n        showActionNotification({ action, data });\\n    };\\n\\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'hunter2', name: 'Password.txt' },\\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\\n    ];\\n\\n    const fileActions = [\\n        ChonkyActions.CreateFolder, // Adds a button to the toolbar\\n        ChonkyActions.UploadFiles, // Adds a button\\n        ChonkyActions.DownloadFiles, // Adds a button\\n        ChonkyActions.CopyFiles, // Adds a button and a shortcut: Ctrl+C\\n        ChonkyActions.DeleteFiles, // Adds a button and a shortcut: Delete\\n    ];\\n\\n    return (\\n        <div className=\\\"live-example\\\" style={{ height: 500 }}>\\n            <div className=\\\"live-example-action\\\">\\n                <strong>Check your browser console for logged actions!</strong>\\n            </div>\\n\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                fileActions={fileActions}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"actions-example\":{\"startLoc\":{\"col\":30,\"line\":33},\"endLoc\":{\"col\":1,\"line\":75},\"startBody\":{\"col\":30,\"line\":33},\"endBody\":{\"col\":1,\"line\":75}}};\n    \nimport 'chonky/style/main.css';\n\nimport {\n    ChonkyActions,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './04-File-actions.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Using file actions';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyActions,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './04-File-actions.md';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = 'Using file actions';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ActionsExample = () => {\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        // Log action to console\\n        \\n        console.log('\\\\nAction object:', action, '\\\\nAction data:', data);\\n\\n        showActionNotification({ action, data });\\n    };\\n\\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'hunter2', name: 'Password.txt' },\\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\\n    ];\\n\\n    const fileActions = [\\n        ChonkyActions.CreateFolder, // Adds a button to the toolbar\\n        ChonkyActions.UploadFiles, // Adds a button\\n        ChonkyActions.DownloadFiles, // Adds a button\\n        ChonkyActions.CopyFiles, // Adds a button and a shortcut: Ctrl+C\\n        ChonkyActions.DeleteFiles, // Adds a button and a shortcut: Delete\\n    ];\\n\\n    return (\\n        <div className=\\\"live-example\\\" style={{ height: 500 }}>\\n            <div className=\\\"live-example-action\\\">\\n                <strong>Check your browser console for logged actions!</strong>\\n            </div>\\n\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                fileActions={fileActions}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"actions-example\":{\"startLoc\":{\"col\":30,\"line\":33},\"endLoc\":{\"col\":1,\"line\":75},\"startBody\":{\"col\":30,\"line\":33},\"endBody\":{\"col\":1,\"line\":75}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ActionsExample = () => {\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        // Log action to console\n        \n        console.log('\\nAction object:', action, '\\nAction data:', data);\n\n        showActionNotification({ action, data });\n    };\n\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'hunter2', name: 'Password.txt' },\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\n    ];\n\n    const fileActions = [\n        ChonkyActions.CreateFolder, // Adds a button to the toolbar\n        ChonkyActions.UploadFiles, // Adds a button\n        ChonkyActions.DownloadFiles, // Adds a button\n        ChonkyActions.CopyFiles, // Adds a button and a shortcut: Ctrl+C\n        ChonkyActions.DeleteFiles, // Adds a button and a shortcut: Delete\n    ];\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <div className=\"live-example-action\">\n                <strong>Check your browser console for logged actions!</strong>\n            </div>\n\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                fileActions={fileActions}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"actions-example":{startLoc:{col:30,line:41},endLoc:{col:1,line:83},startBody:{col:30,line:41},endBody:{col:1,line:83}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    ChonkyActions,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './04-File-actions.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Using file actions';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ActionsExample = () => {\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        // Log action to console\n        \n        console.log('\\nAction object:', action, '\\nAction data:', data);\n\n        showActionNotification({ action, data });\n    };\n\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'hunter2', name: 'Password.txt' },\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\n    ];\n\n    const fileActions = [\n        ChonkyActions.CreateFolder, // Adds a button to the toolbar\n        ChonkyActions.UploadFiles, // Adds a button\n        ChonkyActions.DownloadFiles, // Adds a button\n        ChonkyActions.CopyFiles, // Adds a button and a shortcut: Ctrl+C\n        ChonkyActions.DeleteFiles, // Adds a button and a shortcut: Delete\n    ];\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <div className=\"live-example-action\">\n                <strong>Check your browser console for logged actions!</strong>\n            </div>\n\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                fileActions={fileActions}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"actions-example":{startLoc:{col:30,line:33},endLoc:{col:1,line:75},startBody:{col:30,line:33},endBody:{col:1,line:75}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.b)({markdown:'Every application using Chonky will be different. Some will require a feature to\nupload files, other will need to support cutting & pasting. Bottom line -\nrequirements will differ! Chonky tries to address this problem using **File Actions**\nand **_The_ Action Handler**. This section covers file actions, and the next section,\n_Defining an action handler_, covers the action handler itself.\n\n## File actions\n\n**File Actions** are a pretty broad concept in the Chonky framework. At their essence,\nthey describe what file operations the user can carry out. Through additional\nconfiguration, file actions can be used to define **toolbar buttons** and\n**keyboard shortcuts**. Here are some examples of file actions:\n\n-   **Deleting files.** You can create a file action that will add a `Delete` button\n    to the toolbar. You can also make it so the action is triggered when the user\n    presses `Delete` on their keyboard. The action will only work when one or more\n    files are selected.\n-   **Upload files.** You could define an action that would add an `Upload files`\n    button to the toolbar. The button will always be enabled, regardless of file\n    selection.\n\nFor your convenience, Chonky package includes definitions for many common file\nactions, including the ones described above. You can import them from the package as\n`ChonkyActions`, and access specific actions like this: `ChonkyActions.DeleteFiles`.\nYou can find the full list of pre-defined actions\n[on GitHub](https://github.com/TimboKZ/Chonky/blob/1.x/src/util/file-actions-definitions.ts).\n\nInternally, Chonky enables some basic actions by default. These include "Open\nFiles", "Select All Files", "Clear Selection" and several others. You can see the\nfull list of default actions in the link above.\n\n## Passing file actions to `FileBrowser`\n\nAction definitions have to be passed to the `FileBrowser` component via the\n`fileActions` props. The snippet below shows how you could enable some of the\npredefined file actions.\n\n```tsx\nimport { FileBrowser, FileList, FileToolbar, ChonkyActions } from \'chonky\';\n\nexport const MyComponent = () => {\n    const fileActions = [\n        ChonkyActions.CreateFolder, // Adds a button to the toolbar\n        ChonkyActions.UploadFiles, // Adds a button\n        ChonkyActions.DownloadFiles, // Adds a button\n        ChonkyActions.CopyFiles, // Adds a button and a shortcut: Ctrl+C\n        ChonkyActions.DeleteFiles, // Adds a button and a shortcut: Delete\n    ];\n\n    return (\n        <FileBrowser files={[]} fileActions={fileActions}>\n            <FileToolbar />\n            <FileSearch />\n            <FileList />\n        </FileBrowser>\n    );\n};\n```\n\nThe _Live Example_ below show the result of running the code from above. Note the\nextra buttons in the toolbar and the new shortcuts that now work - `Ctrl+C` and\n`Delete`.\n'})),_parameters)},function ActionsExample(){var fileActions=[src.a.CreateFolder,src.a.UploadFiles,src.a.DownloadFiles,src.a.CopyFiles,src.a.DeleteFiles];return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"live-example",style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"live-example-action"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("strong",null,"Check your browser console for logged actions!")),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[{id:"mHe4A1",name:"Meaning of life.txt",size:31415},{id:"hunter2",name:"Password.txt"},{id:"bEf24q",name:"Drag & drop files here",isDir:!0}],folderChain:[{id:"gBt4z3",name:"My Documents",isDir:!0}],fileActions:fileActions,onFileAction:function handleFileAction(action,data){console.log("\nAction object:",action,"\nAction data:",data),Object(story_helpers.c)({action:action,data:data})},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.g,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null)))});_04_File_actions_stories_ActionsExample.displayName="ActionsExample"},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ActionsExample",(function(){return _05_File_action_handler_stories_ActionsExample}));__webpack_require__(14),__webpack_require__(30),__webpack_require__(51);var _parameters,src=__webpack_require__(7),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(8);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var category=story_helpers.a.FileBrowserBasics,_05_File_action_handler_stories_ActionsExample=(__webpack_exports__.default={title:"".concat(category,"|").concat("Defining an action handler"),parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyActions,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './05-File-action-handler.md';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = 'Defining an action handler';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ActionsExample = () => {\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        // Log action to console\\n        \\n        console.log('\\\\nAction object:', action, '\\\\nAction data:', data);\\n\\n        showActionNotification({ action, data });\\n    };\\n\\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'hunter2', name: 'Password.txt' },\\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\\n    ];\\n\\n    const fileActions = [\\n        ChonkyActions.CreateFolder,\\n        ChonkyActions.UploadFiles,\\n        ChonkyActions.DownloadFiles,\\n        ChonkyActions.CopyFiles,\\n    ];\\n\\n    return (\\n        <div className=\\\"live-example\\\" style={{ height: 500 }}>\\n            <div className=\\\"live-example-action\\\">\\n                <strong>Check your browser console for logged actions!</strong>\\n            </div>\\n\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                fileActions={fileActions}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"actions-example\":{\"startLoc\":{\"col\":30,\"line\":33},\"endLoc\":{\"col\":1,\"line\":74},\"startBody\":{\"col\":30,\"line\":33},\"endBody\":{\"col\":1,\"line\":74}}};\n    \nimport 'chonky/style/main.css';\n\nimport {\n    ChonkyActions,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './05-File-action-handler.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Defining an action handler';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyActions,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './05-File-action-handler.md';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = 'Defining an action handler';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ActionsExample = () => {\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        // Log action to console\\n        \\n        console.log('\\\\nAction object:', action, '\\\\nAction data:', data);\\n\\n        showActionNotification({ action, data });\\n    };\\n\\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'hunter2', name: 'Password.txt' },\\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\\n    ];\\n\\n    const fileActions = [\\n        ChonkyActions.CreateFolder,\\n        ChonkyActions.UploadFiles,\\n        ChonkyActions.DownloadFiles,\\n        ChonkyActions.CopyFiles,\\n    ];\\n\\n    return (\\n        <div className=\\\"live-example\\\" style={{ height: 500 }}>\\n            <div className=\\\"live-example-action\\\">\\n                <strong>Check your browser console for logged actions!</strong>\\n            </div>\\n\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                fileActions={fileActions}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"actions-example\":{\"startLoc\":{\"col\":30,\"line\":33},\"endLoc\":{\"col\":1,\"line\":74},\"startBody\":{\"col\":30,\"line\":33},\"endBody\":{\"col\":1,\"line\":74}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ActionsExample = () => {\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        // Log action to console\n        \n        console.log('\\nAction object:', action, '\\nAction data:', data);\n\n        showActionNotification({ action, data });\n    };\n\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'hunter2', name: 'Password.txt' },\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\n    ];\n\n    const fileActions = [\n        ChonkyActions.CreateFolder,\n        ChonkyActions.UploadFiles,\n        ChonkyActions.DownloadFiles,\n        ChonkyActions.CopyFiles,\n    ];\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <div className=\"live-example-action\">\n                <strong>Check your browser console for logged actions!</strong>\n            </div>\n\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                fileActions={fileActions}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"actions-example":{startLoc:{col:30,line:41},endLoc:{col:1,line:82},startBody:{col:30,line:41},endBody:{col:1,line:82}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    ChonkyActions,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './05-File-action-handler.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Defining an action handler';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ActionsExample = () => {\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        // Log action to console\n        \n        console.log('\\nAction object:', action, '\\nAction data:', data);\n\n        showActionNotification({ action, data });\n    };\n\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'hunter2', name: 'Password.txt' },\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\n    ];\n\n    const fileActions = [\n        ChonkyActions.CreateFolder,\n        ChonkyActions.UploadFiles,\n        ChonkyActions.DownloadFiles,\n        ChonkyActions.CopyFiles,\n    ];\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <div className=\"live-example-action\">\n                <strong>Check your browser console for logged actions!</strong>\n            </div>\n\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                fileActions={fileActions}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"actions-example":{startLoc:{col:30,line:33},endLoc:{col:1,line:74},startBody:{col:30,line:33},endBody:{col:1,line:74}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.b)({markdown:"An **Action Handler** is a function that is called every time a file action is\ndispatched. You can pass your handler to `FileBrowser` via the `onFileAction` prop:\n\n```tsx\nexport const ActionsExample = () => {\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        console.log('Action definition:', action);\n        console.log('Action data:', data);\n    };\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <FileBrowser files={[]} onFileAction={handleFileAction}>\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n```\n\n**All** of the file actions will be sent to your action handler. It is normal to\nignore most of the actions and only handle the ones you're interested in.\n\nAs you can see from the example, your action handler will get 2 parameters - a\n`FileAction` object and a `FileActionData` object. The first object, `FileAction`, is\njust the action definition. You can read sections _Using file actions_ and\n_Custom file actions_ to find out more. The second object, `FileActionData`, contains\ninformation about the files related to the action dispatch. The formal type is:\n\n```ts\ninterface FileActionData {\n    actionId: string;\n    target?: Readonly<FileData>;\n    files?: ReadonlyArray<Readonly<FileData>>;\n}\n```\n\n`actionId` will always be set, but `target` and `files` might not be present,\ndepending on the action. You can play around with the default actions to understand\nwhen each field is provided and when it is not.\n\n## Ignoring actions\n\nIgnoring actions is very simple - you just create an `if-else` or `switch` clause and\nconditionally only catch actions you're interested in. For example, if you only want\nto handle \"Open Files\" action, you would do.\n\n```ts\nimport { FileAction, FileActionData, ChonkyActions } from 'chonky';\n\nconst handleFileAction = (action: FileAction, data: FileActionData) => {\n    if (action.id === ChonkyActions.OpenFiles.id) {\n        console.log('The following files were opened:', action.files);\n    } else {\n        // Do nothing.\n    }\n};\n```\n"})),_parameters)},function ActionsExample(){var fileActions=[src.a.CreateFolder,src.a.UploadFiles,src.a.DownloadFiles,src.a.CopyFiles];return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"live-example",style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"live-example-action"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("strong",null,"Check your browser console for logged actions!")),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[{id:"mHe4A1",name:"Meaning of life.txt",size:31415},{id:"hunter2",name:"Password.txt"},{id:"bEf24q",name:"Drag & drop files here",isDir:!0}],folderChain:[{id:"gBt4z3",name:"My Documents",isDir:!0}],fileActions:fileActions,onFileAction:function handleFileAction(action,data){console.log("\nAction object:",action,"\nAction data:",data),Object(story_helpers.c)({action:action,data:data})},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.g,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null)))});_05_File_action_handler_stories_ActionsExample.displayName="ActionsExample"},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"CustomActionsExample",(function(){return _06_Custom_actions_stories_CustomActionsExample}));__webpack_require__(14),__webpack_require__(5),__webpack_require__(30),__webpack_require__(256),__webpack_require__(51);var _parameters,src=__webpack_require__(7),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(8);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var category=story_helpers.a.FileBrowserBasics,_06_Custom_actions_stories_CustomActionsExample=(__webpack_exports__.default={title:"".concat(category,"|").concat("Custom file actions"),parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyIconName,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileData,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './06-Custom-actions.md';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = 'Custom file actions';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const CustomActionsExample = () => {\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    const downloadPsdAction: FileAction = {\\n        id: 'download_psd',\\n        requiresSelection: true,\\n        fileFilter: (file: FileData) => file.name.endsWith('.psd'),\\n        hotkeys: ['ctrl+q'],\\n        toolbarButton: {\\n            name: 'Download Photoshop files',\\n            icon: ChonkyIconName.download,\\n        },\\n    };\\n\\n    const customFileActions = [downloadPsdAction];\\n    const files = [\\n        { id: 'xVdE', name: 'Flowers.psd' },\\n        { id: 'bTeX', name: 'Mountains.psd' },\\n        { id: 'mGeX', name: 'Sky.psd' },\\n        { id: 'mFte', name: 'Stars.psd' },\\n        { id: 'tLwZ', name: 'Parser.rs' },\\n        { id: 'mGrQ', name: 'package.json' },\\n    ];\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                fileActions={customFileActions}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"custom-actions-example\":{\"startLoc\":{\"col\":36,\"line\":35},\"endLoc\":{\"col\":1,\"line\":75},\"startBody\":{\"col\":36,\"line\":35},\"endBody\":{\"col\":1,\"line\":75}}};\n    \nimport 'chonky/style/main.css';\n\nimport {\n    ChonkyIconName,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileData,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './06-Custom-actions.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Custom file actions';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyIconName,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileData,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './06-Custom-actions.md';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = 'Custom file actions';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const CustomActionsExample = () => {\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    const downloadPsdAction: FileAction = {\\n        id: 'download_psd',\\n        requiresSelection: true,\\n        fileFilter: (file: FileData) => file.name.endsWith('.psd'),\\n        hotkeys: ['ctrl+q'],\\n        toolbarButton: {\\n            name: 'Download Photoshop files',\\n            icon: ChonkyIconName.download,\\n        },\\n    };\\n\\n    const customFileActions = [downloadPsdAction];\\n    const files = [\\n        { id: 'xVdE', name: 'Flowers.psd' },\\n        { id: 'bTeX', name: 'Mountains.psd' },\\n        { id: 'mGeX', name: 'Sky.psd' },\\n        { id: 'mFte', name: 'Stars.psd' },\\n        { id: 'tLwZ', name: 'Parser.rs' },\\n        { id: 'mGrQ', name: 'package.json' },\\n    ];\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                fileActions={customFileActions}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"custom-actions-example\":{\"startLoc\":{\"col\":36,\"line\":35},\"endLoc\":{\"col\":1,\"line\":75},\"startBody\":{\"col\":36,\"line\":35},\"endBody\":{\"col\":1,\"line\":75}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const CustomActionsExample = () => {\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    const downloadPsdAction: FileAction = {\n        id: 'download_psd',\n        requiresSelection: true,\n        fileFilter: (file: FileData) => file.name.endsWith('.psd'),\n        hotkeys: ['ctrl+q'],\n        toolbarButton: {\n            name: 'Download Photoshop files',\n            icon: ChonkyIconName.download,\n        },\n    };\n\n    const customFileActions = [downloadPsdAction];\n    const files = [\n        { id: 'xVdE', name: 'Flowers.psd' },\n        { id: 'bTeX', name: 'Mountains.psd' },\n        { id: 'mGeX', name: 'Sky.psd' },\n        { id: 'mFte', name: 'Stars.psd' },\n        { id: 'tLwZ', name: 'Parser.rs' },\n        { id: 'mGrQ', name: 'package.json' },\n    ];\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                fileActions={customFileActions}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"custom-actions-example":{startLoc:{col:36,line:43},endLoc:{col:1,line:83},startBody:{col:36,line:43},endBody:{col:1,line:83}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    ChonkyIconName,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileData,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './06-Custom-actions.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Custom file actions';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const CustomActionsExample = () => {\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    const downloadPsdAction: FileAction = {\n        id: 'download_psd',\n        requiresSelection: true,\n        fileFilter: (file: FileData) => file.name.endsWith('.psd'),\n        hotkeys: ['ctrl+q'],\n        toolbarButton: {\n            name: 'Download Photoshop files',\n            icon: ChonkyIconName.download,\n        },\n    };\n\n    const customFileActions = [downloadPsdAction];\n    const files = [\n        { id: 'xVdE', name: 'Flowers.psd' },\n        { id: 'bTeX', name: 'Mountains.psd' },\n        { id: 'mGeX', name: 'Sky.psd' },\n        { id: 'mFte', name: 'Stars.psd' },\n        { id: 'tLwZ', name: 'Parser.rs' },\n        { id: 'mGrQ', name: 'package.json' },\n    ];\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                fileActions={customFileActions}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"custom-actions-example":{startLoc:{col:36,line:35},endLoc:{col:1,line:75},startBody:{col:36,line:35},endBody:{col:1,line:75}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.b)({markdown:"This section describes how you can define your own action. After you read the\ndocumentation on this page, it is strongly recommended that you also study\n[the predefined Chonky file actions](https://github.com/TimboKZ/Chonky/blob/1.x/src/util/file-actions-definitions.ts)\nto understand how they work.\n\nThe definition of a file action is a plain JavaScript object that satisfies the\ninterface below.\n\n```ts\nexport interface FileAction {\n    id: string; // Unique action ID\n    metadata?: any; // Any user-defined value\n    requiresSelection?: boolean; // Requires selection of 1+ files\n    fileFilter?: FileFilter; // Used to filter the files array\n\n    hotkeys?: readonly string[]; // Hotkeys using `hotkey-js` notation\n    toolbarButton?: ToolbarButtonData; // Description below\n\n    // Special action that should be dispatched on activation of this action. This\n    // is used by Chonky internally, keep it `undefined` unless you know what you're\n    // doing.\n    specialActionToDispatch?: SpecialAction;\n}\n\n// Where...\ntype FileFilter = (file: Nullable<FileData>) => boolean;\n\n// ...and...\ninterface ToolbarButtonData {\n    name: string; // Button name\n    group?: string; // Group to add the button to\n    dropdown?: boolean; // Whether to display group as dropdown\n    tooltip?: string; // Help tooltip text\n    icon?: ChonkyIconName | string; // Icon name\n    iconOnly?: boolean; // Whether to only display the icon\n}\n```\n\n-   All action IDs should be unique.\n-   Enabling `requiresSelection` flag means the action will only be triggered when\n    one or more files are selected. Setting the `fileFilter` will apply the filter to\n    the list of selected files to check if the action can be applied.\n-   The `hotkeys` field should be an array of hotkeys following the\n    [hotkeys-js](https://github.com/TimboKZ/Chonky/blob/1.x/src/util/file-actions-definitions.ts)\n    notation.\n-   `toolbarButton` field determines whether the action should appear in the toolbar,\n    and how the button will look.\n-   To combine several action buttons into a toolbar, specify the same `group` for\n    them and set `dropdown` to true.\n-   If one of the actions in a group includes `dropdown: true`, all actions in that\n    group will be shown as a dropdown.\n\n## Example custom action: \"Download Photoshop files\"\n\nLet's define a custom action that will download the selected Photoshop `.psd` files.\nWe will add a button to the toolbar and a shortcut, `Ctrl+Q`. First, we define the\nfile action object:\n\n```tsx\nimport { FileData, FileAction, ChonkyIconName } from 'chonky';\n\nconst downloadPsdAction: FileAction = {\n    id: 'download_psd',\n    requiresSelection: true,\n    fileFilter: (file: FileData) => file.name.endsWith('.psd'),\n    hotkeys: ['ctrl+q'],\n    toolbarButton: {\n        name: 'Download Photoshop files',\n        icon: ChonkyIconName.download,\n    },\n};\n```\n\nNext, we need to pass this custom action to `FileBrowser`, along with some files:\n\n```tsx\nexport const CustomActionsExample = () => {\n    const customFileActions = [downloadPsdAction]; // <-----\n    const files = [\n        { id: 'xVdE', name: 'Flowers.psd' },\n        { id: 'bTeX', name: 'Mountains.psd' },\n        { id: 'mGeX', name: 'Sky.psd' },\n        { id: 'mFte', name: 'Stars.psd' },\n        { id: 'tLwZ', name: 'Parser.rs' },\n        { id: 'mGrQ', name: 'package.json' },\n    ];\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser files={files} fileActions={customFileActions /* <---- */}>\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n```\n\nYou can see the outcome in the live example below. Note how the button only becomes\nenabled when you select some `.psd` files. Also, when you click \"Download Photoshop\nfiles\", the action popup only includes `.psd` files. After you make your selection,\nyou can also press `Ctrl+Q` to make your selection.\n"})),_parameters)},function CustomActionsExample(){var customFileActions=[{id:"download_psd",requiresSelection:!0,fileFilter:function fileFilter(file){return file.name.endsWith(".psd")},hotkeys:["ctrl+q"],toolbarButton:{name:"Download Photoshop files",icon:src.b.download}}];return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[{id:"xVdE",name:"Flowers.psd"},{id:"bTeX",name:"Mountains.psd"},{id:"mGeX",name:"Sky.psd"},{id:"mFte",name:"Stars.psd"},{id:"tLwZ",name:"Parser.rs"},{id:"mGrQ",name:"package.json"}],onFileAction:function handleFileAction(action,data){Object(story_helpers.c)({action:action,data:data})},fileActions:customFileActions,enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.g,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null)))});_06_Custom_actions_stories_CustomActionsExample.displayName="CustomActionsExample"},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ActionsExample",(function(){return _07_Thumbnails_stories_ActionsExample}));__webpack_require__(14),__webpack_require__(30),__webpack_require__(111),__webpack_require__(51);var _parameters,bluebird=__webpack_require__(154),bluebird_default=__webpack_require__.n(bluebird),src=__webpack_require__(7),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(8);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var category=story_helpers.a.FileBrowserBasics,_07_Thumbnails_stories_ActionsExample=(__webpack_exports__.default={title:"".concat(category,"|").concat("File thumbnails"),parameters:(_parameters={storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import \'chonky/style/main.css\';\\n\\nimport Promise from \'bluebird\';\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileData,\\n    FileList,\\n    FileToolbar,\\n} from \'chonky\';\\nimport React from \'react\';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories\\n} from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./07-Thumbnails.md\';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = \'File thumbnails\';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ActionsExample = () => {\\n    const thumbnailGenerator = (file: FileData & { delay: number }) => {\\n        return new Promise((resolve) => {\\n            // Delay loading by `file.delay` seconds to simulate thumb generation.\\n            setTimeout(() => resolve(\'./Lenna.png\'), file.delay * 1000);\\n        });\\n    };\\n\\n    const folderChain = [{ id: \'gBt4z3\', name: \'My Pictures\', isDir: true }];\\n    const files: FileData[] = [];\\n    for (let i = 0; i < 20; ++i) {\\n        const delay = i * 2;\\n        files.push({\\n            id: `image-${i}`,\\n            name: `Delay - ${delay} seconds.jpg`,\\n            delay: delay,\\n        });\\n    }\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div className=\\"live-example\\" style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                thumbnailGenerator={thumbnailGenerator} // <----\\n                enableDragAndDrop={true}\\n                onFileAction={handleFileAction}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"actions-example":{"startLoc":{"col":30,"line":34},"endLoc":{"col":1,"line":71},"startBody":{"col":30,"line":34},"endBody":{"col":1,"line":71}}};\n    \nimport \'chonky/style/main.css\';\n\nimport Promise from \'bluebird\';\nimport {\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileData,\n    FileList,\n    FileToolbar,\n} from \'chonky\';\nimport React from \'react\';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories\n} from \'../story-helpers\';\n// @ts-ignore\n\nimport markdown from \'./07-Thumbnails.md\';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = \'File thumbnails\';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {"storySource":{"source":"import \'chonky/style/main.css\';\\n\\nimport Promise from \'bluebird\';\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileData,\\n    FileList,\\n    FileToolbar,\\n} from \'chonky\';\\nimport React from \'react\';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories\\n} from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./07-Thumbnails.md\';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = \'File thumbnails\';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ActionsExample = () => {\\n    const thumbnailGenerator = (file: FileData & { delay: number }) => {\\n        return new Promise((resolve) => {\\n            // Delay loading by `file.delay` seconds to simulate thumb generation.\\n            setTimeout(() => resolve(\'./Lenna.png\'), file.delay * 1000);\\n        });\\n    };\\n\\n    const folderChain = [{ id: \'gBt4z3\', name: \'My Pictures\', isDir: true }];\\n    const files: FileData[] = [];\\n    for (let i = 0; i < 20; ++i) {\\n        const delay = i * 2;\\n        files.push({\\n            id: `image-${i}`,\\n            name: `Delay - ${delay} seconds.jpg`,\\n            delay: delay,\\n        });\\n    }\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div className=\\"live-example\\" style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                thumbnailGenerator={thumbnailGenerator} // <----\\n                enableDragAndDrop={true}\\n                onFileAction={handleFileAction}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n","locationsMap":{"actions-example":{"startLoc":{"col":30,"line":34},"endLoc":{"col":1,"line":71},"startBody":{"col":30,"line":34},"endBody":{"col":1,"line":71}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ActionsExample = () => {\n    const thumbnailGenerator = (file: FileData & { delay: number }) => {\n        return new Promise((resolve) => {\n            // Delay loading by `file.delay` seconds to simulate thumb generation.\n            setTimeout(() => resolve(\'./Lenna.png\'), file.delay * 1000);\n        });\n    };\n\n    const folderChain = [{ id: \'gBt4z3\', name: \'My Pictures\', isDir: true }];\n    const files: FileData[] = [];\n    for (let i = 0; i < 20; ++i) {\n        const delay = i * 2;\n        files.push({\n            id: `image-${i}`,\n            name: `Delay - ${delay} seconds.jpg`,\n            delay: delay,\n        });\n    }\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div className="live-example" style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                thumbnailGenerator={thumbnailGenerator} // <----\n                enableDragAndDrop={true}\n                onFileAction={handleFileAction}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n',locationsMap:{"actions-example":{startLoc:{col:30,line:42},endLoc:{col:1,line:79},startBody:{col:30,line:42},endBody:{col:1,line:79}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport Promise from 'bluebird';\nimport {\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileData,\n    FileList,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './07-Thumbnails.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'File thumbnails';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ActionsExample = () => {\n    const thumbnailGenerator = (file: FileData & { delay: number }) => {\n        return new Promise((resolve) => {\n            // Delay loading by `file.delay` seconds to simulate thumb generation.\n            setTimeout(() => resolve('./Lenna.png'), file.delay * 1000);\n        });\n    };\n\n    const folderChain = [{ id: 'gBt4z3', name: 'My Pictures', isDir: true }];\n    const files: FileData[] = [];\n    for (let i = 0; i < 20; ++i) {\n        const delay = i * 2;\n        files.push({\n            id: `image-${i}`,\n            name: `Delay - ${delay} seconds.jpg`,\n            delay: delay,\n        });\n    }\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                thumbnailGenerator={thumbnailGenerator} // <----\n                enableDragAndDrop={true}\n                onFileAction={handleFileAction}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"actions-example":{startLoc:{col:30,line:34},endLoc:{col:1,line:71},startBody:{col:30,line:34},endBody:{col:1,line:71}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.b)({markdown:"File thumbnails, woo!\n"})),_parameters)},function ActionsExample(){for(var files=[],i=0;i<20;++i){var delay=2*i;files.push({id:"image-".concat(i),name:"Delay - ".concat(delay," seconds.jpg"),delay:delay})}return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"live-example",style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:files,folderChain:[{id:"gBt4z3",name:"My Pictures",isDir:!0}],thumbnailGenerator:function thumbnailGenerator(file){return new bluebird_default.a((function(resolve){setTimeout((function(){return resolve("./Lenna.png")}),1e3*file.delay)}))},enableDragAndDrop:!0,onFileAction:function handleFileAction(action,data){Object(story_helpers.c)({action:action,data:data})}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.g,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null)))});_07_Thumbnails_stories_ActionsExample.displayName="ActionsExample"},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"DragNDropExample",(function(){return _08_Drag_n_drop_stories_DragNDropExample}));__webpack_require__(14),__webpack_require__(30),__webpack_require__(51);var _parameters,src=__webpack_require__(7),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(8);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var category=story_helpers.a.FileBrowserBasics,_08_Drag_n_drop_stories_DragNDropExample=(__webpack_exports__.default={title:"".concat(category,"|").concat("Enabling drag & drop"),parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories,\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './08-Drag-n-drop.md';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = 'Enabling drag & drop';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const DragNDropExample = () => {\\n    const folderChain = [\\n        { id: 'gBt4z3', name: 'My Documents', isDir: true },\\n        { id: 'gM5tTe', name: 'Other', isDir: true },\\n    ];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'yt43Ax', name: 'SCP-3930 Photos', isDir: true },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div className=\\\"live-example\\\" style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"drag-n-drop-example\":{\"startLoc\":{\"col\":32,\"line\":26},\"endLoc\":{\"col\":1,\"line\":53},\"startBody\":{\"col\":32,\"line\":26},\"endBody\":{\"col\":1,\"line\":53}}};\n    \nimport 'chonky/style/main.css';\n\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories,\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './08-Drag-n-drop.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Enabling drag & drop';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories,\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './08-Drag-n-drop.md';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = 'Enabling drag & drop';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const DragNDropExample = () => {\\n    const folderChain = [\\n        { id: 'gBt4z3', name: 'My Documents', isDir: true },\\n        { id: 'gM5tTe', name: 'Other', isDir: true },\\n    ];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'yt43Ax', name: 'SCP-3930 Photos', isDir: true },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div className=\\\"live-example\\\" style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"drag-n-drop-example\":{\"startLoc\":{\"col\":32,\"line\":26},\"endLoc\":{\"col\":1,\"line\":53},\"startBody\":{\"col\":32,\"line\":26},\"endBody\":{\"col\":1,\"line\":53}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const DragNDropExample = () => {\n    const folderChain = [\n        { id: 'gBt4z3', name: 'My Documents', isDir: true },\n        { id: 'gM5tTe', name: 'Other', isDir: true },\n    ];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'yt43Ax', name: 'SCP-3930 Photos', isDir: true },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"drag-n-drop-example":{startLoc:{col:32,line:34},endLoc:{col:1,line:61},startBody:{col:32,line:34},endBody:{col:1,line:61}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories,\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './08-Drag-n-drop.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Enabling drag & drop';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const DragNDropExample = () => {\n    const folderChain = [\n        { id: 'gBt4z3', name: 'My Documents', isDir: true },\n        { id: 'gM5tTe', name: 'Other', isDir: true },\n    ];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'yt43Ax', name: 'SCP-3930 Photos', isDir: true },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"drag-n-drop-example":{startLoc:{col:32,line:26},endLoc:{col:1,line:53},startBody:{col:32,line:26},endBody:{col:1,line:53}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.b)({markdown:"You might notice that drag & drop does not work out-of-the-box in Chonky. This is\nbecause Chonky uses [react-dnd](https://react-dnd.github.io/react-dnd/) library to\nhandle drag & drop, which is not turned by default.\n\nTo enable drag & drop, you will need to wrap your application root with the\n`<DndProvider>` component from react-dnd:\n\n```tsx\nimport React, { ReactDOM } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nReactDOM.render(\n    <DndProvider backend={HTML5Backend}>\n        <App />\n    </DndProvider>,\n    document.getElementById('app')\n);\n```\n\nNext, enable drag & drop in your `<FileBrowser>`:\n\n```tsx\n<FileBrowser\n    files={files}\n    enableDragAndDrop={true} // <----\n>\n    <FileToolbar />\n    <FileList />\n</FileBrowser>\n```\n\nOnce you do this, drag & drop should start working in all Chonky instances. FYI, you\ndon't have to use `HTML5Backend`, you can replace it with any backend you want. Consult\n[react-dnd docs](https://react-dnd.github.io/react-dnd/docs/overview) for details.\n"})),_parameters)},function DragNDropExample(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"live-example",style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[{id:"mHe4A1",name:"Meaning of life.txt",size:31415},{id:"yt43Ax",name:"SCP-3930 Photos",isDir:!0}],folderChain:[{id:"gBt4z3",name:"My Documents",isDir:!0},{id:"gM5tTe",name:"Other",isDir:!0}],onFileAction:function handleFileAction(action,data){Object(story_helpers.c)({action:action,data:data})},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.g,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null)))});_08_Drag_n_drop_stories_DragNDropExample.displayName="DragNDropExample"},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"InvalidPropsExample",(function(){return _01_Invalid_props_stories_InvalidPropsExample}));__webpack_require__(14),__webpack_require__(30),__webpack_require__(51);var _parameters,src=__webpack_require__(7),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(8);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var category=story_helpers.a.FileBrowserExamples,_01_Invalid_props_stories_InvalidPropsExample=(__webpack_exports__.default={title:"".concat(category,"|").concat("Passing invalid props"),parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport { FileBrowser, FileList, FileToolbar } from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, StoryCategories } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './01-Invalid-props.md';\\n\\nconst category = StoryCategories.FileBrowserExamples;\\nconst title = 'Passing invalid props';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const InvalidPropsExample = () => {\\n    const badFiles = [\\n        12312, // Not an object or `null`!\\n        {}, // Missing all required fields!\\n        { id: '2xf4' }, // Missing some required fields!\\n        { id: '2xf4', name: 'Some other file!' }, // Duplicate ID!\\n\\n        { id: 'xbAr', name: 'Good file.txt' }, // Good file!\\n    ];\\n    const badFolderChain = [\\n        12312, // Not an object or `null`!\\n        { id: 'bRyH', name: 'Good folder', isDir: true },\\n        { id: 'bMgR', name: 'Good folder #2', isDir: true },\\n    ];\\n    const badFileActions = [{ id: 'duplicate_files' }, { id: 'duplicate_files' }];\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={badFiles as any}\\n                folderChain={badFolderChain as any}\\n                fileActions={badFileActions}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"invalid-props-example\":{\"startLoc\":{\"col\":35,\"line\":22},\"endLoc\":{\"col\":1,\"line\":50},\"startBody\":{\"col\":35,\"line\":22},\"endBody\":{\"col\":1,\"line\":50}}};\n    \nimport 'chonky/style/main.css';\n\nimport { FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, StoryCategories } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './01-Invalid-props.md';\n\nconst category = StoryCategories.FileBrowserExamples;\nconst title = 'Passing invalid props';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport { FileBrowser, FileList, FileToolbar } from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, StoryCategories } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './01-Invalid-props.md';\\n\\nconst category = StoryCategories.FileBrowserExamples;\\nconst title = 'Passing invalid props';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const InvalidPropsExample = () => {\\n    const badFiles = [\\n        12312, // Not an object or `null`!\\n        {}, // Missing all required fields!\\n        { id: '2xf4' }, // Missing some required fields!\\n        { id: '2xf4', name: 'Some other file!' }, // Duplicate ID!\\n\\n        { id: 'xbAr', name: 'Good file.txt' }, // Good file!\\n    ];\\n    const badFolderChain = [\\n        12312, // Not an object or `null`!\\n        { id: 'bRyH', name: 'Good folder', isDir: true },\\n        { id: 'bMgR', name: 'Good folder #2', isDir: true },\\n    ];\\n    const badFileActions = [{ id: 'duplicate_files' }, { id: 'duplicate_files' }];\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={badFiles as any}\\n                folderChain={badFolderChain as any}\\n                fileActions={badFileActions}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"invalid-props-example\":{\"startLoc\":{\"col\":35,\"line\":22},\"endLoc\":{\"col\":1,\"line\":50},\"startBody\":{\"col\":35,\"line\":22},\"endBody\":{\"col\":1,\"line\":50}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const InvalidPropsExample = () => {\n    const badFiles = [\n        12312, // Not an object or `null`!\n        {}, // Missing all required fields!\n        { id: '2xf4' }, // Missing some required fields!\n        { id: '2xf4', name: 'Some other file!' }, // Duplicate ID!\n\n        { id: 'xbAr', name: 'Good file.txt' }, // Good file!\n    ];\n    const badFolderChain = [\n        12312, // Not an object or `null`!\n        { id: 'bRyH', name: 'Good folder', isDir: true },\n        { id: 'bMgR', name: 'Good folder #2', isDir: true },\n    ];\n    const badFileActions = [{ id: 'duplicate_files' }, { id: 'duplicate_files' }];\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={badFiles as any}\n                folderChain={badFolderChain as any}\n                fileActions={badFileActions}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"invalid-props-example":{startLoc:{col:35,line:30},endLoc:{col:1,line:58},startBody:{col:35,line:30},endBody:{col:1,line:58}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport { FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, StoryCategories } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './01-Invalid-props.md';\n\nconst category = StoryCategories.FileBrowserExamples;\nconst title = 'Passing invalid props';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const InvalidPropsExample = () => {\n    const badFiles = [\n        12312, // Not an object or `null`!\n        {}, // Missing all required fields!\n        { id: '2xf4' }, // Missing some required fields!\n        { id: '2xf4', name: 'Some other file!' }, // Duplicate ID!\n\n        { id: 'xbAr', name: 'Good file.txt' }, // Good file!\n    ];\n    const badFolderChain = [\n        12312, // Not an object or `null`!\n        { id: 'bRyH', name: 'Good folder', isDir: true },\n        { id: 'bMgR', name: 'Good folder #2', isDir: true },\n    ];\n    const badFileActions = [{ id: 'duplicate_files' }, { id: 'duplicate_files' }];\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={badFiles as any}\n                folderChain={badFolderChain as any}\n                fileActions={badFileActions}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"invalid-props-example":{startLoc:{col:35,line:22},endLoc:{col:1,line:50},startBody:{col:35,line:22},endBody:{col:1,line:50}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.b)({markdown:"Where possible, Chonky tries to report errors when they arise. For example,\n`FileBrowser` component expects its `files` prop to be an array. If you pass some\ninvalid value instead, e.g. `null`, you will see an error component being rendered\ninstead of the file browser. Same error will also be logged to console.\n"})),_parameters)},function InvalidPropsExample(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[12312,{},{id:"2xf4"},{id:"2xf4",name:"Some other file!"},{id:"xbAr",name:"Good file.txt"}],folderChain:[12312,{id:"bRyH",name:"Good folder",isDir:!0},{id:"bMgR",name:"Good folder #2",isDir:!0}],fileActions:[{id:"duplicate_files"},{id:"duplicate_files"}]},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.g,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null)))});_01_Invalid_props_stories_InvalidPropsExample.displayName="InvalidPropsExample"},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"VirtualizationExample",(function(){return _02_Virtualization_stories_VirtualizationExample}));__webpack_require__(14),__webpack_require__(30),__webpack_require__(51);var _parameters,src=__webpack_require__(7),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(8);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var category=story_helpers.a.FileBrowserExamples,_02_Virtualization_stories_VirtualizationExample=(__webpack_exports__.default={title:"".concat(category,"|").concat("Virtualization with 10,000 files"),parameters:(_parameters={storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import \'chonky/style/main.css\';\\n\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileData,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from \'chonky\';\\nimport React from \'react\';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories\\n} from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./02-Virtualization.md\';\\n\\nconst category = StoryCategories.FileBrowserExamples;\\nconst title = \'Virtualization with 10,000 files\';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const VirtualizationExample = () => {\\n    const files: FileData[] = [];\\n\\n    for (let i = 0; i < 10000; ++i) {\\n        files.push({\\n            id: `file-${i}`,\\n            name: i ? `Chrome (${i}).exe` : \'Chrome.exe\',\\n        });\\n    }\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"virtualization-example":{"startLoc":{"col":37,"line":34},"endLoc":{"col":1,"line":61},"startBody":{"col":37,"line":34},"endBody":{"col":1,"line":61}}};\n    \nimport \'chonky/style/main.css\';\n\nimport {\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileData,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from \'chonky\';\nimport React from \'react\';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories\n} from \'../story-helpers\';\n// @ts-ignore\n\nimport markdown from \'./02-Virtualization.md\';\n\nconst category = StoryCategories.FileBrowserExamples;\nconst title = \'Virtualization with 10,000 files\';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {"storySource":{"source":"import \'chonky/style/main.css\';\\n\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileData,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from \'chonky\';\\nimport React from \'react\';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories\\n} from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./02-Virtualization.md\';\\n\\nconst category = StoryCategories.FileBrowserExamples;\\nconst title = \'Virtualization with 10,000 files\';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const VirtualizationExample = () => {\\n    const files: FileData[] = [];\\n\\n    for (let i = 0; i < 10000; ++i) {\\n        files.push({\\n            id: `file-${i}`,\\n            name: i ? `Chrome (${i}).exe` : \'Chrome.exe\',\\n        });\\n    }\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n","locationsMap":{"virtualization-example":{"startLoc":{"col":37,"line":34},"endLoc":{"col":1,"line":61},"startBody":{"col":37,"line":34},"endBody":{"col":1,"line":61}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const VirtualizationExample = () => {\n    const files: FileData[] = [];\n\n    for (let i = 0; i < 10000; ++i) {\n        files.push({\n            id: `file-${i}`,\n            name: i ? `Chrome (${i}).exe` : \'Chrome.exe\',\n        });\n    }\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n',locationsMap:{"virtualization-example":{startLoc:{col:37,line:42},endLoc:{col:1,line:69},startBody:{col:37,line:42},endBody:{col:1,line:69}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileData,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './02-Virtualization.md';\n\nconst category = StoryCategories.FileBrowserExamples;\nconst title = 'Virtualization with 10,000 files';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const VirtualizationExample = () => {\n    const files: FileData[] = [];\n\n    for (let i = 0; i < 10000; ++i) {\n        files.push({\n            id: `file-${i}`,\n            name: i ? `Chrome (${i}).exe` : 'Chrome.exe',\n        });\n    }\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"virtualization-example":{startLoc:{col:37,line:34},endLoc:{col:1,line:61},startBody:{col:37,line:34},endBody:{col:1,line:61}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.b)({markdown:"This component uses [`react-virtualized`](https://bvaughn.github.io/react-virtualized/).\n"})),_parameters)},function VirtualizationExample(){for(var files=[],i=0;i<1e4;++i)files.push({id:"file-".concat(i),name:i?"Chrome (".concat(i,").exe"):"Chrome.exe"});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:files,onFileAction:function handleFileAction(action,data){Object(story_helpers.c)({action:action,data:data})},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.g,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null)))});_02_Virtualization_stories_VirtualizationExample.displayName="VirtualizationExample"},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"DisableExample",(function(){return _03_Disable_default_actions_stories_DisableExample}));__webpack_require__(14),__webpack_require__(6),__webpack_require__(30),__webpack_require__(51);var _parameters,src=__webpack_require__(7),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(8);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var category=story_helpers.a.FileBrowserExamples,_03_Disable_default_actions_stories_DisableExample=(__webpack_exports__.default={title:"".concat(category,"|").concat("Disabling default file actions"),parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyActions,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './03-Disable-default-actions.md';\\n\\nconst category = StoryCategories.FileBrowserExamples;\\nconst title = 'Disabling default file actions';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const DisableExample = () => {\\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'hunter2', name: 'Password.txt' },\\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    const fileActions: FileAction[] = [\\n        {\\n            ...ChonkyActions.OpenFiles,\\n            toolbarButton: undefined,\\n        },\\n    ];\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                fileActions={fileActions}\\n                disableDefaultFileActions={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"disable-example\":{\"startLoc\":{\"col\":30,\"line\":34},\"endLoc\":{\"col\":1,\"line\":68},\"startBody\":{\"col\":30,\"line\":34},\"endBody\":{\"col\":1,\"line\":68}}};\n    \nimport 'chonky/style/main.css';\n\nimport {\n    ChonkyActions,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './03-Disable-default-actions.md';\n\nconst category = StoryCategories.FileBrowserExamples;\nconst title = 'Disabling default file actions';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyActions,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './03-Disable-default-actions.md';\\n\\nconst category = StoryCategories.FileBrowserExamples;\\nconst title = 'Disabling default file actions';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const DisableExample = () => {\\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'hunter2', name: 'Password.txt' },\\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    const fileActions: FileAction[] = [\\n        {\\n            ...ChonkyActions.OpenFiles,\\n            toolbarButton: undefined,\\n        },\\n    ];\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                fileActions={fileActions}\\n                disableDefaultFileActions={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"disable-example\":{\"startLoc\":{\"col\":30,\"line\":34},\"endLoc\":{\"col\":1,\"line\":68},\"startBody\":{\"col\":30,\"line\":34},\"endBody\":{\"col\":1,\"line\":68}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const DisableExample = () => {\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'hunter2', name: 'Password.txt' },\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    const fileActions: FileAction[] = [\n        {\n            ...ChonkyActions.OpenFiles,\n            toolbarButton: undefined,\n        },\n    ];\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                fileActions={fileActions}\n                disableDefaultFileActions={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"disable-example":{startLoc:{col:30,line:42},endLoc:{col:1,line:76},startBody:{col:30,line:42},endBody:{col:1,line:76}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    ChonkyActions,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './03-Disable-default-actions.md';\n\nconst category = StoryCategories.FileBrowserExamples;\nconst title = 'Disabling default file actions';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const DisableExample = () => {\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'hunter2', name: 'Password.txt' },\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    const fileActions: FileAction[] = [\n        {\n            ...ChonkyActions.OpenFiles,\n            toolbarButton: undefined,\n        },\n    ];\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                fileActions={fileActions}\n                disableDefaultFileActions={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"disable-example":{startLoc:{col:30,line:34},endLoc:{col:1,line:68},startBody:{col:30,line:34},endBody:{col:1,line:68}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.b)({markdown:'As discussed in the _Using file actions_ section, Chonky specifies some default file\nactions, such as "Open selection" and "Go up a directory" actions/buttons. If you\nwant to disable all default functionality and only use custom function, you can pass\nthe `disableDefaultFileActions` prop to `FileBrowser`.\n\nFor example, imagine we want to disable all Chonky file actions except for one -\n`open_files`. And even for `open_files`, we want to hide the menu button so that you\ncan only open files by double clicking them. We do this by disabling all file actions,\nand re-enabling a customised version of `open_files`:\n\n```tsx\nexport const DisableExample = () => {\n    const fileActions: FileAction[] = [\n        {\n            id: ChonkyActions.OpenFiles.id,\n        },\n    ];\n\n    return (\n        <FileBrowser disableDefaultFileActions={true} fileActions={fileActions}>\n            <FileToolbar />\n            <FileSearch />\n            <FileList />\n        </FileBrowser>\n    );\n};\n```\n\nYou can see the outcome in the _Live Example_ below. Note that there are no buttons\nin the toolbar, unlike all other examples in the documentation. Also, note that,\nbecause we re-enabled `open_files` manually, you can still open files, but now\nwithout the button in the menu.\n'})),_parameters)},function DisableExample(){var fileActions=[Object.assign({},src.a.OpenFiles,{toolbarButton:void 0})];return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[{id:"mHe4A1",name:"Meaning of life.txt",size:31415},{id:"hunter2",name:"Password.txt"},{id:"bEf24q",name:"Drag & drop files here",isDir:!0}],folderChain:[{id:"gBt4z3",name:"My Documents",isDir:!0}],onFileAction:function handleFileAction(action,data){Object(story_helpers.c)({action:action,data:data})},fileActions:fileActions,disableDefaultFileActions:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.g,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null)))});_03_Disable_default_actions_stories_DisableExample.displayName="DisableExample"}],[[363,1,2]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3QvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJzdG9yeWJvb2tfZG9jc19kbGxcIiIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmFzc2lnbi5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy8uL3NyYy90eXBlcy9pY29ucy50eXBlcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHlwZXMvc3BlY2lhbC1hY3Rpb25zLnR5cGVzLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlsL2ZpbGUtaGVscGVyLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlsL2ZpbGUtYWN0aW9ucy1kZWZpbml0aW9ucy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbC9sb2dnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWwvdmFsaWRhdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVjb2lsL2RyYWctYW5kLWRyb3AucmVjb2lsLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlsL2NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbC9zZWxlY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlY29pbC9maWxlcy5yZWNvaWwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlY29pbC9zZWxlY3Rpb24ucmVjb2lsLnRzIiwid2VicGFjazovLy8uL3NyYy9yZWNvaWwvZmlsZS1hY3Rpb25zLnJlY29pbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9pbnRlcm5hbC9DbGlja2FibGVXcmFwcGVyLWhvb2tzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9pbnRlcm5hbC9DbGlja2FibGVXcmFwcGVyLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbC9maWxlLWljb24taGVscGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2V4dGVybmFsL0Nob25reUljb24udHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2ludGVybmFsL0ZpbGVUaHVtYm5haWwudHN4Iiwid2VicGFjazovLy8uL3NyYy9yZWNvaWwvdGh1bWJuYWlscy5yZWNvaWwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZXh0ZXJuYWwvVGV4dFBsYWNlaG9sZGVyLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9maWxlLWVudHJ5L0Jhc2VGaWxlRW50cnktaG9va3MudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2ZpbGUtZW50cnkvQmFzZUZpbGVFbnRyeS50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlY29pbC9zcGVjaWFsLWFjdGlvbnMucmVjb2lsLnRzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2ZpbGUtZW50cnkvQ2xpY2thYmxlRmlsZUVudHJ5LnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9maWxlLWVudHJ5L0NsaWNrYWJsZUZpbGVFbnRyeS1ob29rcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZmlsZS1lbnRyeS9EbkRGaWxlRW50cnkudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2ZpbGUtZW50cnkvU21hcnRGaWxlRW50cnkudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2V4dGVybmFsL0ZpbGVMaXN0LXZpcnR1YWxpemF0aW9uLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvcmVjb2lsL2ZpbGUtbGlzdC5yZWNvaWwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlY29pbC9zZWFyY2gucmVjb2lsLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlsL2hvb2tzLWhlbHBlcnMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWwvZmlsZS1hY3Rpb25zLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlsL2ZpbGUtYWN0aW9uLWhhbmRsZXJzLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlsL3NwZWNpYWwtYWN0aW9ucy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9pbnRlcm5hbC9DaG9ua3lCdXNpbmVzc0xvZ2ljLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbC9zZWFyY2gudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZmlsZS1lbnRyeS9EbkRGaWxlTGlzdERyYWdMYXllci50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaW50ZXJuYWwvRXJyb3JNZXNzYWdlLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9pbnRlcm5hbC9Ib3RrZXlMaXN0ZW5lci50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaW50ZXJuYWwvQ2hvbmt5UHJlc2VudGF0aW9uTGF5ZXIudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2V4dGVybmFsL0ZpbGVCcm93c2VyLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9leHRlcm5hbC9GaWxlVG9vbGJhci1ob29rcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZXh0ZXJuYWwvRHJvcGRvd25CdXR0b24udHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2V4dGVybmFsL1Rvb2xiYXJCdXR0b24udHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2V4dGVybmFsL0Ryb3Bkb3duLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9leHRlcm5hbC9Ub29sYmFyQnV0dG9uR3JvdXAudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2V4dGVybmFsL0ZpbGVUb29sYmFyLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9leHRlcm5hbC9GaWxlU2VhcmNoLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9leHRlcm5hbC9GaWxlTGlzdC50c3giLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy9zdG9yeS1oZWxwZXJzLnRzeCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzL1Vuc3RhYmxlLXdhcm5pbmcubWQiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy9MaXZlLWV4YW1wbGVzLm1kIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9wcm9wLXR5cGVzL2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmlzLWFycmF5LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvci5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8tc3RyaW5nLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuaXRlcmF0b3IuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9nbG9iYWwvd2luZG93LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9wb2xpc2hlZC9kaXN0L3BvbGlzaGVkLmVzbS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vLi9zdHlsZS9tYWluLmNzcz83Y2JiIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5mcmVlemUuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vd2VicGFjay9idWlsZGluL2dsb2JhbC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC1saWZlY3ljbGVzLWNvbXBhdC9yZWFjdC1saWZlY3ljbGVzLWNvbXBhdC5lcy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9Ac3Rvcnlib29rL2NzZi9kaXN0L2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmJvbGQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3QtZG9tL2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy9DaG9ua3ktaGVhZGVyLm1keCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vdHMtZGVkZW50L2Rpc3QvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNlYXJjaC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudmFsdWVzLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZW50cmllcy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9tZW1vaXplcmlmaWMvbWVtb2l6ZXJpZmljLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2xvZGFzaC9tYXBWYWx1ZXMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9leHBvcnQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmNyZWF0ZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuY29uc3RydWN0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3Byb2Nlc3MvYnJvd3Nlci5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vd2VicGFjay9idWlsZGluL21vZHVsZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi91dGlsLWRlcHJlY2F0ZS9icm93c2VyLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5ldmVyeS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc2V0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3FzL2xpYi9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy93ZWIudXJsLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvbWUuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLmJpbmQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLm1hcC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9AZW1vdGlvbi9jb3JlL2Rpc3QvY29yZS5icm93c2VyLmVzbS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9tYXJrZG93bi10by1qc3gvZGlzdC9lc20uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vYWlyYm5iLWpzLXNoaW1zL2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9wYXRoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vLy4vLnN0b3J5Ym9vay9zdG9yeWJvb2staW5pdC1mcmFtZXdvcmstZW50cnkuanMiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy53ZWFrLW1hcC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9sb2Rhc2gvbWVyZ2VXaXRoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zb3J0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi90ZWxlanNvbi9kaXN0L2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL0BlbW90aW9uL3N0eWxlZC9kaXN0L3N0eWxlZC5icm93c2VyLmVzbS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9lbW90aW9uLXRoZW1pbmcvZGlzdC9lbW90aW9uLXRoZW1pbmcuYnJvd3Nlci5lc20uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vQGVtb3Rpb24vaXMtcHJvcC12YWxpZC9kaXN0L2lzLXByb3AtdmFsaWQuYnJvd3Nlci5lc20uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vZGVlcC1vYmplY3QtZGlmZi9kaXN0L2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3JlYWN0LXN5bnRheC1oaWdobGlnaHRlci9kaXN0L2Nqcy9sYW5ndWFnZXMvcHJpc20vanN4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3JlYWN0LXN5bnRheC1oaWdobGlnaHRlci9kaXN0L2Nqcy9sYW5ndWFnZXMvcHJpc20vYmFzaC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXIvZGlzdC9janMvbGFuZ3VhZ2VzL3ByaXNtL2Nzcy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXIvZGlzdC9janMvbGFuZ3VhZ2VzL3ByaXNtL2pzb24uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvY2pzL2xhbmd1YWdlcy9wcmlzbS9tYXJrdXAuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvY2pzL2xhbmd1YWdlcy9wcmlzbS9tYXJrZG93bi5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXIvZGlzdC9janMvbGFuZ3VhZ2VzL3ByaXNtL3lhbWwuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvY2pzL2xhbmd1YWdlcy9wcmlzbS90c3guanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvY2pzL2xhbmd1YWdlcy9wcmlzbS90eXBlc2NyaXB0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3JlYWN0LXN5bnRheC1oaWdobGlnaHRlci9kaXN0L2VzbS9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXIvZGlzdC9janMvY3JlYXRlLWVsZW1lbnQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5jb25zdHJ1Y3Rvci5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9vdmVybGF5c2Nyb2xsYmFycy9qcy9PdmVybGF5U2Nyb2xsYmFycy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNtYWxsLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3JlYWN0LXRleHRhcmVhLWF1dG9zaXplL2Rpc3QvcmVhY3QtdGV4dGFyZWEtYXV0b3NpemUuYnJvd3Nlci5lc20uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3QtcG9wcGVyLXRvb2x0aXAvZGlzdC9lc20vcmVhY3QtcG9wcGVyLXRvb2x0aXAuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3QtY29sb3IvbGliL2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5wYXJzZS1pbnQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5pcy1uYW4uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnBhcnNlLWZsb2F0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vZmFzdC1kZWVwLWVxdWFsL2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL29iamVjdC1hc3NpZ24vaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbG9kYXNoL19hcnJheU1hcC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9sb2Rhc2gvX2Jhc2VJdGVyYXRlZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9sb2Rhc2gvX2Jhc2VQaWNrQnkuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbG9kYXNoL19nZXRBbGxLZXlzSW4uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3QtaXMvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvdG8tbGVuZ3RoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL25vdC1hLXJlZ2V4cC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2xvZGFzaC9pc1BsYWluT2JqZWN0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2xvZGFzaC9pc0Z1bmN0aW9uLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2xvZGFzaC9pc1N0cmluZy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy8uLy5zdG9yeWJvb2svcHJldmlldy5qcy1nZW5lcmF0ZWQtY29uZmlnLWVudHJ5LmpzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9mYWlscy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9vd24ta2V5cy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHkuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vLi8uc3Rvcnlib29rL2dlbmVyYXRlZC1zdG9yaWVzLWVudHJ5LmpzIiwid2VicGFjazovLy9cXC4pLioiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy9zdG9yeWJvb2suY3NzPzdhMGMiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy9zdG9yeWJvb2suY3NzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy90by1pbnRlZ2VyLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wMS1XZWxjb21lLzAyLUZlYXR1cmVzLnN0b3JpZXMubWR4Iiwid2VicGFjazovLy8uL3N0b3JpZXMvMDEtV2VsY29tZS8wMy1JbnN0YWxsYXRpb24uc3Rvcmllcy5tZHgiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wMS1XZWxjb21lLzA0LUltbXV0YWJpbGl0eS5zdG9yaWVzLm1keCIsIndlYnBhY2s6Ly8vLi9zdHlsZS9tYWluLmNzcyIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzLzA1LUFQSS1SZWZlcmVuY2UvMDItQnVpbHQtaW4tYWN0aW9ucy5zdG9yaWVzLm1keCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzLzAxLVdlbGNvbWUvRGVtby50c3giLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wMS1XZWxjb21lLzAxLVdlbGNvbWUuc3Rvcmllcy5tZHgiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wMi1EZW1vcy8wMS1GaWxlLUJyb3dzZXItZGVtby5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzLzAyLURlbW9zLzAxLUZpbGUtQnJvd3Nlci1kZW1vLm1kIiwid2VicGFjazovLy8uL3N0b3JpZXMvMDMtRmlsZS1Ccm93c2VyLWJhc2ljcy8wMS1Db21wb25lbnQtaGllcmFyY2h5LnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3N0b3JpZXMvMDMtRmlsZS1Ccm93c2VyLWJhc2ljcy8wMS1Db21wb25lbnQtaGllcmFyY2h5Lm1kIiwid2VicGFjazovLy8uL3N0b3JpZXMvMDMtRmlsZS1Ccm93c2VyLWJhc2ljcy8wMi1EaXNwbGF5aW5nLWZpbGVzLnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3N0b3JpZXMvMDMtRmlsZS1Ccm93c2VyLWJhc2ljcy8wMi1EaXNwbGF5aW5nLWZpbGVzLm1kIiwid2VicGFjazovLy8uL3N0b3JpZXMvMDMtRmlsZS1Ccm93c2VyLWJhc2ljcy8wMy1TcGVjaWZ5aW5nLWZvbGRlci5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzLzAzLUZpbGUtQnJvd3Nlci1iYXNpY3MvMDMtU3BlY2lmeWluZy1mb2xkZXIubWQiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wMy1GaWxlLUJyb3dzZXItYmFzaWNzLzA0LUZpbGUtYWN0aW9ucy5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzLzAzLUZpbGUtQnJvd3Nlci1iYXNpY3MvMDQtRmlsZS1hY3Rpb25zLm1kIiwid2VicGFjazovLy8uL3N0b3JpZXMvMDMtRmlsZS1Ccm93c2VyLWJhc2ljcy8wNS1GaWxlLWFjdGlvbi1oYW5kbGVyLnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3N0b3JpZXMvMDMtRmlsZS1Ccm93c2VyLWJhc2ljcy8wNS1GaWxlLWFjdGlvbi1oYW5kbGVyLm1kIiwid2VicGFjazovLy8uL3N0b3JpZXMvMDMtRmlsZS1Ccm93c2VyLWJhc2ljcy8wNi1DdXN0b20tYWN0aW9ucy5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzLzAzLUZpbGUtQnJvd3Nlci1iYXNpY3MvMDYtQ3VzdG9tLWFjdGlvbnMubWQiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wMy1GaWxlLUJyb3dzZXItYmFzaWNzLzA3LVRodW1ibmFpbHMuc3Rvcmllcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wMy1GaWxlLUJyb3dzZXItYmFzaWNzLzA3LVRodW1ibmFpbHMubWQiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wMy1GaWxlLUJyb3dzZXItYmFzaWNzLzA4LURyYWctbi1kcm9wLnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3N0b3JpZXMvMDMtRmlsZS1Ccm93c2VyLWJhc2ljcy8wOC1EcmFnLW4tZHJvcC5tZCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzLzA0LUZpbGUtQnJvd3Nlci1hZHZhbmNlZC8wMS1JbnZhbGlkLXByb3BzLnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3N0b3JpZXMvMDQtRmlsZS1Ccm93c2VyLWFkdmFuY2VkLzAxLUludmFsaWQtcHJvcHMubWQiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wNC1GaWxlLUJyb3dzZXItYWR2YW5jZWQvMDItVmlydHVhbGl6YXRpb24uc3Rvcmllcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wNC1GaWxlLUJyb3dzZXItYWR2YW5jZWQvMDItVmlydHVhbGl6YXRpb24ubWQiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wNC1GaWxlLUJyb3dzZXItYWR2YW5jZWQvMDMtRGlzYWJsZS1kZWZhdWx0LWFjdGlvbnMuc3Rvcmllcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wNC1GaWxlLUJyb3dzZXItYWR2YW5jZWQvMDMtRGlzYWJsZS1kZWZhdWx0LWFjdGlvbnMubWQiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJzdG9yeWJvb2tfZG9jc19kbGwiLCJDaG9ua3lJY29uTmFtZSIsIlNwZWNpYWxBY3Rpb24iLCJGaWxlSGVscGVyIiwiZmlsZSIsImlzRGlyIiwiaXNIaWRkZW4iLCJpc1N5bWxpbmsiLCJvcGVuYWJsZSIsInNlbGVjdGFibGUiLCJkcmFnZ2FibGUiLCJkcm9wcGFibGUiLCJzaXplIiwic2l6ZURhdGEiLCJmaWxlc2l6ZSIsImJpdHMiLCJvdXRwdXQiLCJzeW1ib2wiLCJNYXRoIiwicm91bmQiLCJ2YWx1ZSIsIm1vZERhdGUiLCJEYXRlIiwiZGF0ZSIsImlzTmFOIiwiZ2V0VGltZSIsImdldEZ1bGxZZWFyIiwiZGF0ZUZvcm1hdCIsImNoaWxkcmVuQ291bnQiLCJDaG9ua3lBY3Rpb25zIiwiTW92ZUZpbGVzVG8iLCJpZCIsIkR1cGxpY2F0ZUZpbGVzVG8iLCJPcGVuRmlsZXMiLCJyZXF1aXJlc1NlbGVjdGlvbiIsImhvdGtleXMiLCJmaWxlRmlsdGVyIiwiaXNPcGVuYWJsZSIsInRvb2xiYXJCdXR0b24iLCJuYW1lIiwiZ3JvdXAiLCJkcm9wZG93biIsImljb24iLCJvcGVuRmlsZXMiLCJPcGVuUGFyZW50Rm9sZGVyIiwib3BlblBhcmVudEZvbGRlciIsImljb25Pbmx5Iiwic3BlY2lhbEFjdGlvblRvRGlzcGF0Y2giLCJUb2dnbGVTZWFyY2giLCJzZWFyY2giLCJUb2dnbGVTZWFyY2hCYXIiLCJTZWxlY3RBbGxGaWxlcyIsInNlbGVjdEFsbEZpbGVzIiwiQ2xlYXJTZWxlY3Rpb24iLCJjbGVhclNlbGVjdGlvbiIsIkNvcHlGaWxlcyIsImNvcHkiLCJDcmVhdGVGb2xkZXIiLCJ0b29sdGlwIiwiZm9sZGVyQ3JlYXRlIiwiVXBsb2FkRmlsZXMiLCJ1cGxvYWQiLCJEb3dubG9hZEZpbGVzIiwiZG93bmxvYWQiLCJEZWxldGVGaWxlcyIsInRyYXNoIiwiRGVmYXVsdEZpbGVBY3Rpb25zIiwiTG9nZ2VyIiwiYXJncyIsImNvbnNvbGUiLCJlcnJvciIsIndhcm4iLCJkZWJ1ZyIsImJ1bGxldHMiLCJqb2luIiwiaXNQbGFpbk9iamVjdCIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsImNsZWFudXBGaWxlQXJyYXkiLCJmaWxlQXJyYXkiLCJhbGxvd051bGwiLCJjbGVhbkZpbGVBcnJheSIsIndhcm5pbmdNZXNzYWdlIiwid2FybmluZ0J1bGxldHMiLCJBcnJheSIsImlzQXJyYXkiLCJpbmRpY2VzVG9CZVJlbW92ZWQiLCJTZXQiLCJzZWVuSWRzIiwiZHVwbGljYXRlSWRTZXQiLCJtaXNzaW5nSWRJbmRpY2VzIiwibWlzc2luZ05hbWVJbmRpY2VzIiwiaW52YWxpZFR5cGVJbmRpY2VzIiwiaSIsImxlbmd0aCIsImFkZCIsInB1c2giLCJmcm9tIiwiZmlsdGVyIiwiaW5kZXgiLCJoYXMiLCJ1c2VGaWxlQWN0aW9uc1ZhbGlkYXRpb24iLCJmaWxlQWN0aW9ucyIsImRlZmF1bHRGaWxlQWN0aW9ucyIsImluY2x1ZGVEZWZhdWx0RmlsZUFjdGlvbnMiLCJleHRlbmRlZEZpbGVBY3Rpb25zIiwidXNlTWVtbyIsInNlZW5GaWxlQWN0aW9uSWRzIiwibWFwIiwiYWN0aW9uIiwiZXJyb3JNZXNzYWdlcyIsImNsZWFuRmlsZXNSZXN1bHQiLCJjbGVhbnVwRmlsZUFjdGlvbnMiLCJlcnJvck1lc3NhZ2UiLCJmb3JtYXRCdWxsZXRzIiwibWVzc2FnZSIsImNsZWFuRmlsZUFjdGlvbnMiLCJmaWxlQWN0aW9uIiwiZW5hYmxlRHJhZ0FuZERyb3BTdGF0ZSIsImF0b20iLCJrZXkiLCJkZWZhdWx0IiwiTk9PUF9GVU5DVElPTiIsInVzZVNlbGVjdGlvbk1vZGlmaWVycyIsImRpc2FibGVTZWxlY3Rpb24iLCJzZXRTZWxlY3Rpb24iLCJzZWxlY3RGaWxlcyIsInVzZUNhbGxiYWNrIiwiZmlsZUlkcyIsInJlc2V0Iiwic2VsZWN0aW9uIiwibmV3U2VsZWN0aW9uIiwidG9nZ2xlU2VsZWN0aW9uIiwiZmlsZUlkIiwiZXhjbHVzaXZlIiwib2xkU2VsZWN0aW9uIiwia2V5cyIsIlNlbGVjdGlvbkhlbHBlciIsImZpbGVzIiwic2VsZWN0ZWRGaWxlcyIsImlzU2VsZWN0YWJsZSIsImZpbHRlcnMiLCJyZWR1Y2UiLCJwcmV2RmlsZXMiLCJnZXRTZWxlY3RlZEZpbGVzIiwiVXBkYXRlYWJsZVNlbGVjdGlvblV0aWwiLCJ0aGlzIiwicHJvdGVjdGVkVXBkYXRlIiwiZ2V0U2VsZWN0aW9uU2l6ZSIsImlzU2VsZWN0ZWQiLCJmaWxlc1N0YXRlIiwiZm9sZGVyQ2hhaW5TdGF0ZSIsInBhcmVudEZvbGRlclN0YXRlIiwiZmlsZU1hcFN0YXRlIiwic2VsZWN0b3IiLCJnZXQiLCJmaWxlTWFwIiwiZmlsZURhdGFTdGF0ZSIsInNlbGVjdG9yRmFtaWx5Iiwic2VsZWN0aW9uU3RhdGUiLCJzZWxlY3Rpb25Nb2RpZmllcnNTdGF0ZSIsInNlbGVjdGVkRmlsZXNTdGF0ZSIsInNlbGVjdGlvblNpemVTdGF0ZSIsInNlbGVjdGlvblNpemUiLCJoYXNPd25Qcm9wZXJ0eSIsImZpbGVTZWxlY3RlZFN0YXRlIiwiZmlsZUFjdGlvbnNTdGF0ZSIsImZpbGVBY3Rpb25NYXBTdGF0ZSIsImRpc3BhdGNoRmlsZUFjdGlvblN0YXRlIiwicmVxdWVzdEZpbGVBY3Rpb25TdGF0ZSIsImRvdWJsZUNsaWNrRGVsYXlTdGF0ZSIsImZpbGVBY3Rpb25EYXRhU3RhdGUiLCJmaWxlQWN0aW9uSWQiLCJmaWxlQWN0aW9uU2VsZWN0ZWRGaWxlc1N0YXRlIiwiZmlsZUFjdGlvblNlbGVjdGVkRmlsZXNDb3VudFN0YXRlIiwidXNlS2V5RG93bkhhbmRsZXIiLCJvbktleWJvYXJkQ2xpY2siLCJldmVudCIsImtleWJvYXJkQ2xpY2tFdmVudCIsImVudGVyS2V5IiwibmF0aXZlRXZlbnQiLCJjb2RlIiwic3BhY2VLZXkiLCJhbHRLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsIkNsaWNrYWJsZVdyYXBwZXIiLCJwcm9wcyIsImNoaWxkcmVuIiwiV3JhcHBlclRhZyIsIndyYXBwZXJUYWciLCJwYXNzdGhyb3VnaFByb3BzIiwib25TaW5nbGVDbGljayIsIm9uRG91YmxlQ2xpY2siLCJoYW5kbGVDbGljayIsInVzZUNsaWNrSGFuZGxlciIsImRvdWJsZUNsaWNrRGVsYXkiLCJ1c2VSZWNvaWxWYWx1ZSIsImNvdW50ZXIiLCJ1c2VSZWYiLCJjbGlja0NvdW50IiwiY2xpY2tUaW1lb3V0IiwibW91c2VDbGlja0V2ZW50IiwiY3VycmVudCIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJoYW5kbGVLZXlEb3duIiwiY29tcFByb3BzIiwib25DbGljayIsIm9uS2V5RG93biIsInRhYkluZGV4IiwibWVyZ2VkUHJvcHMiLCJnZXRJY29uVHJpZSIsIm1lbW9pemUiLCJjb2xvdXJJbmRleCIsIkljb25zVG9FeHRlbnNpb25zIiwibGljZW5zZSIsImNvbmZpZyIsIm1vZGVsIiwiZGF0YWJhc2UiLCJ0ZXh0IiwiYXJjaGl2ZSIsImltYWdlIiwiSW1hZ2VFeHRlbnNpb25zIiwidmlkZW8iLCJWaWRlb0V4dGVuc2lvbnMiLCJpbmZvIiwibG9jayIsIm11c2ljIiwiQXVkaW9FeHRlbnNpb25zIiwidGVybWluYWwiLCJ1c2VycyIsImxpbnV4IiwidWJ1bnR1Iiwid2luZG93cyIsInJ1c3QiLCJweXRob24iLCJub2RlanMiLCJwaHAiLCJnaXQiLCJhZG9iZSIsInBkZiIsImV4Y2VsIiwid29yZCIsImZsYXNoIiwiZXhhY3RUcmllIiwiRXhhY3RUcmllIiwiaWdub3JlQ2FzZSIsImV4dGVuc2lvbnMiLCJpY29uRGF0YSIsImNvbG9yQ29kZSIsIkNvbG9yc0xpZ2h0IiwicHV0IiwiQ29sb3JzRGFyayIsIkljb25NYXAiLCJsb2FkaW5nIiwiZmFDaXJjbGVOb3RjaCIsImZhQ2hldnJvbkRvd24iLCJkbmREcmFnZ2luZyIsImZhRmlzdFJhaXNlZCIsImRuZENhbkRyb3AiLCJmYUFycm93RG93biIsImRuZENhbm5vdERyb3AiLCJmYVRpbWVzIiwiZmFCb3hPcGVuIiwiZmFMZXZlbFVwQWx0IiwiZmFDb3B5IiwiZmFTZWFyY2giLCJmYU9iamVjdEdyb3VwIiwiZmFFcmFzZXIiLCJjaGVja0FjdGl2ZSIsImZhQ2hlY2tDaXJjbGUiLCJjaGVja0luYWN0aXZlIiwiZmFDaXJjbGUiLCJkZXNjIiwiYXNjIiwiZmFBcnJvd1VwIiwibGlzdCIsImZhTGlzdCIsImZvbGRlciIsImZhRm9sZGVyIiwiZmFGb2xkZXJQbHVzIiwiZm9sZGVyT3BlbiIsImZhRm9sZGVyT3BlbiIsInNtYWxsVGh1bWJuYWlsIiwiZmFUaCIsImxhcmdlVGh1bWJuYWlsIiwiZmFUaExhcmdlIiwiZm9sZGVyQ2hhaW5TZXBhcmF0b3IiLCJmYUNoZXZyb25SaWdodCIsImZhRG93bmxvYWQiLCJmYVVwbG9hZCIsImZhVHJhc2giLCJmYWxsYmFja0ljb24iLCJmYUV4Y2xhbWF0aW9uVHJpYW5nbGUiLCJzeW1saW5rIiwiZmFFeHRlcm5hbExpbmtBbHQiLCJoaWRkZW4iLCJmYUV5ZVNsYXNoIiwiZmFGaWxlIiwiZmFCYWxhbmNlU2NhbGUiLCJmYUZpbGVDb2RlIiwiZmFDb2dzIiwiZmFDdWJlcyIsImZhRGF0YWJhc2UiLCJmYUZpbGVBbHQiLCJmYUZpbGVBcmNoaXZlIiwiZmFGaWxlSW1hZ2UiLCJmYUZpbG0iLCJmYUluZm9DaXJjbGUiLCJmYUtleSIsImZhTG9jayIsImZhTXVzaWMiLCJmYVRlcm1pbmFsIiwiZmFVc2VycyIsImZhTGludXgiLCJmYVVidW50dSIsImZhV2luZG93cyIsImZhUnVzdCIsImZhUHl0aG9uIiwiZmFOb2RlSnMiLCJmYVBocCIsImZhR2l0QWx0IiwiZmFBZG9iZSIsImZhRmlsZVBkZiIsImZhRmlsZUV4Y2VsIiwiZmFGaWxlV29yZCIsImZhUnVubmluZyIsIkNob25reUljb25GQSIsIlJlYWN0IiwibWVtbyIsImZhUHJvcHMiLCJGaWxlVGh1bWJuYWlsIiwidGh1bWJuYWlsVXJsIiwidGh1bWJuYWlsU3R5bGUiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJjbGFzc05hbWUiLCJjIiwic3R5bGUiLCJ0aHVtYm5haWxHZW5lcmF0b3JTdGF0ZSIsIlRleHRQbGFjZWhvbGRlciIsInBsYWNlaG9sZGVyTGVuZ3RoIiwiZ2V0UmFuZG9tSW50IiwibWluIiwibWF4IiwiZmxvb3IiLCJyYW5kb20iLCJtaW5MZW5ndGgiLCJtYXhMZW5ndGgiLCJ3aGl0ZXNwYWNlIiwicmVwZWF0IiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJ1c2VNb2RpZmllckljb25Db21wb25lbnRzIiwibW9kaWZpZXJJY29ucyIsInVzZUZpbGVOYW1lQ29tcG9uZW50IiwiZXh0ZW5zaW9uIiwiaXNEaXJlY3RvcnkiLCJleHQiLCJwYXRoIiwiZXh0bmFtZSIsInN1YnN0ciIsIkJhc2VGaWxlRW50cnkiLCJzZWxlY3RlZCIsImRuZElzRHJhZ2dpbmciLCJkbmRJc092ZXIiLCJ1c2VTdGF0ZSIsInNldFRodW1ibmFpbFVybCIsInRodW1ibmFpbExvYWRpbmciLCJ1c2VUaHVtYm5haWxVcmwiLCJzZXRUaHVtYm5haWxMb2FkaW5nIiwidGh1bWJuYWlsR2VuZXJhdG9yIiwidXNlRWZmZWN0IiwibG9hZGluZ0NhbmNlbGxlZCIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsInVzZUljb25EYXRhIiwibWF0Y2giLCJnZXRXaXRoQ2hlY2twb2ludHMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJpY29uU3BpbiIsImRuZEljb24iLCJ1c2VEbmRJY29uIiwiaXNEcmFnZ2luZyIsImlzT3ZlciIsImNhbkRyb3AiLCJtb2RpZmllckljb25Db21wb25lbnRzIiwiZmlsZU5hbWVDb21wb25lbnQiLCJnZXRSZWFkYWJsZURhdGUiLCJnZXRSZWFkYWJsZUZpbGVTaXplIiwiZ2V0Q2hpbGRyZW5Db3VudCIsInNwaW4iLCJ0aXRsZSIsInVuZGVmaW5lZCIsImRpc3BhdGNoU3BlY2lhbEFjdGlvblN0YXRlIiwiQ2xpY2thYmxlRmlsZUVudHJ5IiwiZmlsZUNsaWNrSGFuZGxlcnMiLCJ1c2VGaWxlQ2xpY2tIYW5kbGVycyIsImRpc3BsYXlJbmRleCIsImRpc3BhdGNoU3BlY2lhbEFjdGlvbiIsIm9uTW91c2VDbGljayIsImNsaWNrVHlwZSIsImFjdGlvbklkIiwiTW91c2VDbGlja0ZpbGUiLCJmaWxlRGlzcGxheUluZGV4IiwiS2V5Ym9hcmRDbGlja0ZpbGUiLCJ3cmFwcGVyUHJvcHMiLCJpc0NsaWNrYWJsZSIsIkRuREZpbGVFbnRyeSIsImNhbkRyYWciLCJpc0RyYWdnYWJsZSIsIm9uRHJhZ1N0YXJ0IiwiRHJhZ05Ecm9wU3RhcnQiLCJkcmFnU291cmNlIiwib25EcmFnRW5kIiwiaXRlbSIsIm1vbml0b3IiLCJkcm9wUmVzdWx0IiwiZ2V0RHJvcFJlc3VsdCIsImRyb3BUYXJnZXQiLCJEcmFnTkRyb3BFbmQiLCJkcm9wRWZmZWN0Iiwib25Ecm9wIiwiaXNTYW1lRmlsZSIsImlzRHJvcHBhYmxlIiwidXNlRHJhZyIsInR5cGUiLCJiZWdpbiIsImVuZCIsImNvbGxlY3QiLCJkcmFnIiwicHJldmlldyIsInVzZURyb3AiLCJhY2NlcHQiLCJkcm9wIiwiZ2V0RW1wdHlJbWFnZSIsImNhcHR1cmVEcmFnZ2luZ1N0YXRlIiwicmVmIiwiU21hcnRGaWxlRW50cnkiLCJlbnRyeVByb3BzIiwiRGVmYXVsdEVudHJ5U2l6ZSIsIndpZHRoIiwiaGVpZ2h0IiwidXNlRW50cnlSZW5kZXJlciIsInZpcnR1YWxLZXkiLCJwYXJlbnQiLCJndXR0ZXJTaXplIiwibGFzdFJvdyIsImxhc3RDb2x1bW4iLCJub0NvbnRlbnRSZW5kZXJlciIsInBsYWNlaG9sZGVyUHJvcHMiLCJ1c2VHcmlkUmVuZGVyZXIiLCJlbnRyeVNpemUiLCJlbnRyeVJlbmRlcmVyIiwidGh1bWJzR3JpZFJlZiIsImZpbGxQYXJlbnRDb250YWluZXIiLCJpc01vYmlsZSIsImlzTW9iaWxlRGV2aWNlIiwid2luZG93Iiwib3JpZW50YXRpb24iLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpbmRleE9mIiwiZ3V0dGVyIiwiY29sdW1uQ291bnRGbG9hdCIsImNvbHVtbkNvdW50Iiwicm93Q291bnQiLCJjZWlsIiwibWluSGVpZ2h0IiwiY2VsbFJlbmRlcmVyIiwiZGF0YSIsInJvd0luZGV4IiwiY29sdW1uSW5kZXgiLCJjb2x1bW5XaWR0aCIsImdldENvbFdpZHRoIiwicm93SGVpZ2h0IiwiZ2V0Um93SGVpZ2h0Iiwib3ZlcnNjYW5Sb3dDb3VudCIsImNvbnRhaW5lclN0eWxlIiwiYXV0b0hlaWdodCIsImZpbGVFbnRyeVNpemVTdGF0ZSIsInNlYXJjaEJhckVuYWJsZWRTdGF0ZSIsInNlYXJjaEJhclZpc2libGVTdGF0ZSIsInNlYXJjaEZpbHRlclN0YXRlIiwidXNlSW5zdGFuY2VWYXJpYWJsZSIsInVzZUNsaWNrTGlzdGVuZXIiLCJwYXJhbXMiLCJvbkluc2lkZUNsaWNrIiwib25PdXRzaWRlQ2xpY2siLCJ0cmlnZ2VyQ29tcG9uZW50UmVmIiwiY2xpY2tMaXN0ZW5lciIsImNvbnRhaW5zIiwidGFyZ2V0IiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInVzZVJlZkNhbGxiYWNrV2l0aEVycm9ySGFuZGxpbmciLCJjYWxsYmFja0Z1bmMiLCJkaXNwbGF5TmFtZSIsImNhbGxiYWNrRnVuY1JlZiIsInVzZUZpbGVBY3Rpb25zIiwiZXh0ZXJuYWxGaWxlQWN0b25IYW5kbGVyIiwic2V0RmlsZUFjdGlvbnMiLCJ1c2VTZXRSZWNvaWxTdGF0ZSIsInNldEZpbGVBY3Rpb25NYXAiLCJmaWxlQWN0aW9uTWFwIiwiaW50ZXJuYWxGaWxlQWN0aW9uRGlzcGF0Y2hlciIsInVzZUludGVybmFsRmlsZUFjdGlvbkRpc3BhdGNoZXIiLCJleHRlcm5hbEZpbGVBY3RvbkhhbmRsZXJSZWYiLCJmaWxlQWN0aW9uTWFwUmVmIiwiYWN0aW9uRGF0YSIsImlzRnVuY3Rpb24iLCJjb25zdHJ1Y3RvciIsImFwcGx5Iiwic2FmZUludGVybmFsRmlsZUFjdGlvbkRpc3BhdGNoZXIiLCJzZXREaXNwYXRjaEZpbGVBY3Rpb24iLCJpbnRlcm5hbEZpbGVBY3Rpb25SZXF1ZXN0ZXIiLCJ1c2VJbnRlcm5hbEZpbGVBY3Rpb25SZXF1ZXN0ZXIiLCJkaXNwYXRjaEZpbGVBY3Rpb25SZWYiLCJkaXNwYXRjaFNwZWNpYWxBY3Rpb25SZWYiLCJmaWxlc1JlZiIsInNlbGVjdGlvblJlZiIsInNlbGVjdGVkRmlsZXNGb3JBY3Rpb24iLCJzcGVjaWFsQWN0aW9uSWQiLCJzYWZlSW50ZXJuYWxGaWxlQWN0aW9uUmVxdWVzdGVyIiwic2V0UmVxdWVzdEZpbGVBY3Rpb24iLCJ1c2VGaWxlQWN0aW9uVHJpZ2dlciIsInJlcXVlc3RGaWxlQWN0aW9uIiwidXNlRmlsZUFjdGlvbk1vZGlmaWVycyIsInBhcmVudEZvbGRlciIsInNlYXJjaEJhclZpc2libGUiLCJhY3Rpb25TZWxlY3Rpb25FbXB0eSIsImFjdGl2ZSIsImRpc2FibGVkIiwidXNlU3BlY2lhbEZpbGVBY3Rpb25IYW5kbGVyTWFwIiwic2VsZWN0aW9uVXRpbCIsInNlbGVjdGlvbk1vZGlmaWVycyIsIl9yZWNvaWxGaWxlcyIsInBhcmVudEZvbGRlclJlZiIsInNlbGVjdGVkRmlsZXNSZWYiLCJzZXRTZWFyY2hCYXJWaXNpYmxlIiwibGFzdENsaWNrRGlzcGxheUluZGV4UmVmIiwicmFuZ2VTdGFydCIsInJhbmdlRW5kIiwic2xpY2UiLCJPcGVuRm9sZGVyQ2hhaW5Gb2xkZXIiLCJ2aXNpYmxlIiwiZHJvcHBlZEZpbGVzIiwiQ2hvbmt5QnVzaW5lc3NMb2dpYyIsImZvbGRlckNoYWluIiwib25GaWxlQWN0aW9uIiwiZW5hYmxlRHJhZ0FuZERyb3AiLCJzb3J0ZWRGaWxlcyIsImZpbHRlcmVkRmlsZXMiLCJ1c2VGaWxlU2VhcmNoIiwic2VhcmNoRmlsdGVyIiwiRnV6enlTZWFyY2giLCJmIiwiY2FzZVNlbnNpdGl2ZSIsInNvcnQiLCJ1c2VTZWxlY3Rpb24iLCJzZWxlY3Rpb25VdGlsUmVmIiwidXBkYXRlIiwic2V0UmVjb2lsU2VsZWN0aW9uTW9kaWZpZXJzIiwidXNlU3BlY2lhbEFjdGlvbkRpc3BhdGNoZXIiLCJzcGVjaWFsQWN0aW9uSGFuZGxlck1hcCIsImhhbmRsZXIiLCJzZXRSZWNvaWxEaXNwYXRjaFNwZWNpYWxBY3Rpb24iLCJzZXRSZWNvaWxGaWxlcyIsInNldEZvbGRlckNoYWluIiwic2V0UGFyZW50Rm9sZGVyIiwic2V0UmVjb2lsU2VsZWN0aW9uIiwic2V0UmVjb2lsVGh1bWJuYWlsR2VuZXJhdG9yIiwic2V0UmVjb2lsRG91YmxlQ2xpY2tEZWxheSIsInVzZVJlY29pbFN0YXRlIiwic2V0UmVjb2lsRW5hYmxlRHJhZ0FuZERyb3AiLCJsYXllclN0eWxlcyIsInBvc2l0aW9uIiwicG9pbnRlckV2ZW50cyIsInpJbmRleCIsImxlZnQiLCJ0b3AiLCJnZXRJdGVtU3R5bGVzIiwiaW5pdGlhbEN1cnNvck9mZnNldCIsImluaXRpYWxGaWxlT2Zmc2V0IiwiY3VycmVudEZpbGVPZmZzZXQiLCJkaXNwbGF5IiwieCIsInkiLCJ0cmFuc2Zvcm0iLCJXZWJraXRUcmFuc2Zvcm0iLCJEbkRGaWxlTGlzdERyYWdMYXllciIsInVzZURyYWdMYXllciIsImdldEl0ZW0iLCJpdGVtVHlwZSIsImdldEl0ZW1UeXBlIiwiZ2V0SW5pdGlhbENsaWVudE9mZnNldCIsImdldEluaXRpYWxTb3VyY2VDbGllbnRPZmZzZXQiLCJnZXRTb3VyY2VDbGllbnRPZmZzZXQiLCJyZW5kZXJJdGVtIiwiRXJyb3JNZXNzYWdlIiwiYnVsbGV0TGlzdCIsIml0ZW1zIiwiSG90a2V5TGlzdGVuZXIiLCJob3RrZXlzU3RyIiwiaG90a2V5Q2FsbGJhY2siLCJ1bmJpbmQiLCJDaG9ua3lQcmVzZW50YXRpb25MYXllciIsInZhbGlkYXRpb25FcnJvcnMiLCJjaG9ua3lSb290UmVmIiwiaG90a2V5TGlzdGVuZXJDb21wb25lbnRzIiwidmFsaWRhdGlvbkVycm9yQ29tcG9uZW50cyIsIkZpbGVCcm93c2VyIiwiZGlzYWJsZURlZmF1bHRGaWxlQWN0aW9ucyIsInVzZUZpbGVBcnJheVZhbGlkYXRpb24iLCJjbGVhbkZpbGVzIiwiZmlsZXNFcnJvck1lc3NhZ2VzIiwiY2xlYW5Gb2xkZXJDaGFpblJlc3VsdCIsImNsZWFuRm9sZGVyQ2hhaW4iLCJmb2xkZXJDaGFpbkVycm9yTWVzc2FnZXMiLCJmaWxlQXJyYXlFcnJvcnMiLCJmaWxlQWN0aW9uc0Vycm9ycyIsImJ1c2luZXNzTG9naWNQcm9wcyIsInVzZUZvbGRlckNoYWluQ29tcG9uZW50IiwiY29tcHMiLCJpc0xhc3QiLCJqIiwiVGFnVG9Vc2UiLCJEcm9wZG93bkJ1dHRvbiIsImZpeGVkV2lkdGgiLCJTbWFydERyb3Bkb3duQnV0dG9uIiwidHJpZ2dlckFjdGlvbiIsImJ1dHRvbiIsIlRvb2xiYXJCdXR0b24iLCJpY29uT25SaWdodCIsImljb25Db21wb25lbnQiLCJTbWFydFRvb2xiYXJCdXR0b24iLCJEcm9wZG93biIsInNob3dEcm9wZG93biIsInNldFNob3dEcm9wZG93biIsImhpZGVEcm9wZG93biIsImRyb3Bkb3duUmVmIiwidHJpZ2dlckNsaWNrIiwiZmlsZUFjdGlvbklkcyIsIlRvb2xiYXJCdXR0b25Hcm91cCIsImdyb3VwQ29udGVudHMiLCJGaWxlVG9vbGJhciIsInNlYXJjaEJhckVuYWJsZWQiLCJmb2xkZXJDaGFpbkNvbXAiLCJ1c2VBY3Rpb25Hcm91cHMiLCJidXR0b25Hcm91cHMiLCJidXR0b25Hcm91cE1hcCIsIm9wZW5QYXJlbnRGb2xkZXJCdXR0b25Hcm91cCIsInNlYXJjaEJ1dHRvbkdyb3VwIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYXJyYXlPZiIsIm9uZU9mVHlwZSIsInN0cmluZyIsImlzUmVxdWlyZWQiLCJvbmVPZiIsIkZpbGVTZWFyY2giLCJzZXRTZWFyY2hCYXJFbmFibGVkIiwiZ2xvYmFsU2VhcmNoRmlsdGVyIiwic2V0R2xvYmFsU2VhcmNoRmlsdGVyIiwic2hvd0xvYWRpbmdJbmRpY2F0b3IiLCJzZXRTaG93TG9hZGluZ0luZGljYXRvciIsImxvY2FsRmlsdGVyIiwic2V0TG9jYWxGaWx0ZXIiLCJ1c2VEZWJvdW5jZSIsImRlbGF5IiwiZGVib3VuY2VkVmFsdWUiLCJzZXREZWJvdW5jZWRWYWx1ZSIsImRlYm91bmNlZEZpbHRlciIsInNldERlYm91bmNlZEZpbHRlciIsInRyaW1tZWRGaWx0ZXIiLCJ0cmltIiwiaW5wdXRSZWYiLCJmb2N1cyIsImhhbmRsZUlucHV0Q2hhbmdlIiwiaHRtbEZvciIsInBsYWNlaG9sZGVyIiwib25DaGFuZ2UiLCJGaWxlTGlzdCIsImdyaWRSZW5kZXJlciIsImRpc2FibGVIZWlnaHQiLCJTdG9yeUNhdGVnb3JpZXMiLCJjcmVhdGVEb2NzT2JqZWN0IiwibWFya2Rvd24iLCJwYWdlIiwiRnJhZ21lbnQiLCJEbmRQcm92aWRlciIsImJhY2tlbmQiLCJIVE1MNUJhY2tlbmQiLCJwYXJzZU1hcmtkb3duIiwiQ3VzdG9tUHJpbWFyeSIsInN0b3J5IiwiY29udGV4dCIsInVzZUNvbnRleHQiLCJEb2NzQ29udGV4dCIsImNvbXBvbmVudFN0b3JpZXMiLCJnZXREb2NzU3RvcmllcyIsImZpbmQiLCJzIiwiZXhwYW5kZWQiLCJvY2N1cnJlbmNlcyIsImdldEluZGljZXNPZiIsImxpbmVFbmQiLCJsaW5lIiwic3Vic3RyaW5nIiwib3BlbmluZ19tYXRjaGVzIiwiZXhlYyIsImxhbmd1YWdlIiwianNvbkNvbmZpZyIsIm1hcmtkb3duRW5kIiwiY29kZVN0YXJ0IiwiY29kZUVuZCIsIm1hcmtkb3duU3RhcnQiLCJjb21wb25lbnRzIiwic3RhcnQiLCJtZFNsaWNlIiwiY29kZVNsaWNlIiwicHJlcGFyZU1hcmtkb3duQ29tcCIsInByZXBhcmVDb2RlQ29tcCIsImRpc3BsYXlDb2RlIiwibmVlZGxlIiwiaGF5c3RhY2siLCJzZWFyY2hTdHJMZW4iLCJzdGFydEluZGV4IiwiaW5kaWNlcyIsInNob3dBY3Rpb25Ob3RpZmljYXRpb24iLCJ0ZXh0UGFydHMiLCJmaWxlQ29tcHMiLCJmaWxlQ291bnQiLCJmaWxlVGl0bGUiLCJOb3R5IiwidGhlbWUiLCJ0aW1lb3V0Iiwic2hvdyIsImFwaSIsImNvbnRlbnQiLCJfX2VzTW9kdWxlIiwib3B0aW9ucyIsImxvY2FscyIsImxheW91dFByb3BzIiwiTURYQ29udGVudCIsIm1keFR5cGUiLCJ0ZXh0QWxpZ24iLCJzcmMiLCJhbHQiLCJocmVmIiwibWFyZ2luTGVmdCIsImNsYXNzIiwicGFyZW50TmFtZSIsImlzTURYQ29tcG9uZW50IiwiX2NsaWVudEFwaSIsInJlcXVpcmUiLCJfY2xpZW50TG9nZ2VyIiwiX2NvbmZpZ0ZpbGVuYW1lIiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9scyIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwic291cmNlIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFyZ1R5cGVzIiwibG9nZ2VyIiwiSlNPTiIsInN0cmluZ2lmeSIsImRlY29yYXRvcnMiLCJkZWNvcmF0b3IiLCJhZGREZWNvcmF0b3IiLCJwYXJhbWV0ZXJzIiwiZ2xvYmFsQXJncyIsImdsb2JhbEFyZ1R5cGVzIiwiYWRkUGFyYW1ldGVycyIsImFyZ1R5cGVzRW5oYW5jZXJzIiwiZW5oYW5jZXIiLCJhZGRBcmdUeXBlc0VuaGFuY2VyIiwiX2ZyYW1ld29yayIsIl9TdG9yeWJvb2tQcmVzZXJ2ZURlY29yYXRvcnMiLCJjb25maWd1cmUiLCJ3ZWJwYWNrQ29udGV4dCIsInJlcSIsIndlYnBhY2tDb250ZXh0UmVzb2x2ZSIsIm8iLCJlIiwiRXJyb3IiLCJ3ZWJwYWNrQ29udGV4dEtleXMiLCJfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18iLCJNZXRhIiwibWFrZVNob3J0Y29kZSIsIk1EWERlZmF1bHRTaG9ydGNvZGUiLCJXZWxjb21lIiwiX19wYWdlIiwiZG9jc09ubHkiLCJjb21wb25lbnRNZXRhIiwiaW5jbHVkZVN0b3JpZXMiLCJtZHhTdG9yeU5hbWVUb0tleSIsImRvY3MiLCJtZHhDb21wb25lbnRNZXRhIiwiQXBpUmVmZXJlbmNlIiwiRGVtbyIsInJvb3REZW1vRm9sZGVyIiwiY3VycmVudEZvbGRlcklkIiwic2V0Q3VycmVudEZvbGRlcklkIiwidXNlRmlsZXMiLCJ1c2VGb2xkZXJDaGFpbiIsImhhbmRsZUZpbGVBY3Rpb24iLCJ0YXJnZXRGaWxlIiwiY2hpbGRyZW5JZHMiLCJDaG9ua3lTb3VyY2VDb2RlRnNNYXAiLCJyb290Rm9sZGVySWQiLCJkZW1vRmlsZU1hcCIsInBhcmVudElkIiwiY3VycmVudEZvbGRlciIsInBhcmVudEZpbGUiLCJ1bnNoaWZ0IiwiY2F0ZWdvcnkiLCJEZW1vcyIsIkZpbGVCcm93c2VyRGVtbyIsIkZpbGVCcm93c2VyQmFzaWNzIiwiQ29tcG9uZW50SGllcmFyY2h5RXhhbXBsZSIsIkZpbGVzQXJyYXlFeGFtcGxlIiwiRm9sZGVyQ2hhaW5FeGFtcGxlIiwiQWN0aW9uc0V4YW1wbGUiLCJsb2ciLCJDdXN0b21BY3Rpb25zRXhhbXBsZSIsImN1c3RvbUZpbGVBY3Rpb25zIiwiZW5kc1dpdGgiLCJEcmFnTkRyb3BFeGFtcGxlIiwiRmlsZUJyb3dzZXJFeGFtcGxlcyIsIkludmFsaWRQcm9wc0V4YW1wbGUiLCJWaXJ0dWFsaXphdGlvbkV4YW1wbGUiLCJEaXNhYmxlRXhhbXBsZSJdLCJtYXBwaW5ncyI6IjtzR0FBQUEsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsMEJDQTFDRixPQUFPQyxRQUFVRSxvQiw4Q0NBakJILE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxrZ0NDQTlCRSxlQ0VBQyxjLDJTREZBRCwrQixrQkFBQUEsZSxvQkFBQUEsZSwwQkFBQUEsZSx3QkFBQUEsZSw4QkFBQUEsZSxz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QSxNQUNBLE1BQ0EsS0FDQSxNQUNBLEtBQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsT0FDQSxPQUNBLE9BQ0EsT0FDQSxPQUNBLE9BQ0EsTUFDQSxNQUNBLE9BQ0EsS0FDQSxNQUNBLE1BQ0EsT0FFU0YsZ0JBQTRCLENBQ3JDLE1BQ0EsT0FDQSxNQUNBLE1BQ0EsTUFDQSxPQUNBLE1BQ0EsTUFDQSxNQUNBLE9BQ0EsT0FDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsS0FDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE9BQ0EsTUFDQSxNQUNBLEtBQ0EsTUFDQSxPQUNBLFFBQ0EsT0FDQSxRQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsT0FDQSxNQUNBLE1BQ0EsT0FDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE9BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE9BQ0EsTUFDQSxNQUNBLE9BQ0EsT0FDQSxNQUNBLE9BQ0EsTUFDQSxPQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsT0FFU00sZ0JBQTRCLENBQ3JDLE9BQ0EsTUFDQSxNQUNBLE1BQ0EsT0FDQSxPQUNBLEtBQ0EsTUFDQSxNQUNBLE1BQ0EsUUFDQSxZQUNBLFlBQ0EsWUFDQSxNQUNBLE9BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE9BQ0EsTUFDQSxNQUNBLE9BQ0EsTUFDQSxNQUNBLE9BQ0EsT0FDQSxNQUNBLE1BQ0EsTUFDQSxLQUNBLEtBQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsT0FDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE9BQ0EsTUFDQSxNQUVTc0IsWUFBd0IsQ0FDakMsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxV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b0JBQW9CLEVBQXJCLENBQXlCLFMsOENDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsOENDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyw4Q0NBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUywrQ0NBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsOENDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUywrQ0NBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDhDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLCtDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsK0NDQTFDRixPQUFPQyxRQUFX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QXlCLFMsNkNDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyx3RENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaUZDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyw4Q0NBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMseURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxvRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDRGQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUywrQ0NBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyx5RENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDZFQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsOENDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUywrQ0NBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLCtDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsZ0RDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxxRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDREQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsb0RDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxrRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMseWNDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2RENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsNEVDQTFDLHFFLGtEQ0FBRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxnRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsOENDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyx1RENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsOERDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyw4Q0NBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsa0RDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxnRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsOENDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGdEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsK0NDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLHFFQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsOENDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0YsT0FBT0MsUUFBV0Ms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LENBQUMsSUFBTSxFQUFFLEtBQU8sUUFBbDFQLG1DQUNBbEcsd0JBQWlCLENBQUVDLFNDN0NsQixveENENENELGNBS2dCLFNBQWpCK0osaUJBQ1QsSUFXTTV1QixZQUE0QixDQUFDLE9BQUQsVUFFdkIzRSxNQUFjSSxVQUZTLENBRzFCSyxtQkFBZXdXLEtBSXZCLE9BQ0ksb0ZBQUt4RCxNQUFPLENBQUV5RyxPQUFRLE1BQ2xCLDZFQUFDLE1BQUQsQ0FDSW5ULE1BcEJFLENBQ1YsQ0FBRTdHLEdBQUksU0FBVVEsS0FBTSxzQkFBdUIzQixLQUFNLE9BQ25ELENBQUVtQixHQUFJLFVBQVdRLEtBQU0sZ0JBQ3ZCLENBQUVSLEdBQUksU0FBVVEsS0FBTSx5QkFBMEJsQyxPQUFPLElBa0IvQ3FpQixZQXRCUSxDQUFDLENBQUUzZ0IsR0FBSSxTQUFVUSxLQUFNLGVBQWdCbEMsT0FBTyxJQXVCdERzaUIsYUFoQmEsU0FBbkIrUSxpQkFBb0Izc0IsT0FBb0I0VyxNQUMxQ29RLHdCQUF1QixDQUFFaG5CLGNBQVE0VyxhQWdCekJuWCxZQUFhQSxZQUNia2dCLDJCQUEyQixHQUUzQiw2RUFBQyxNQUFELE1BQ0EsNkVBQUMsTUFBRCxNQUNBLDZFQUFDLE1BQUQsVUE5QkgwTyxtRCIsImZpbGUiOiJtYWluLmU5MTkzY2ZlNmMwNzE1OTk1NWU4LmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiRVJrUFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHN0b3J5Ym9va19kb2NzX2RsbDsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIjF0N1BcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJobzB6XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiSUFkRFwiKTsiLCJleHBvcnQgZW51bSBDaG9ua3lJY29uTmFtZSB7XG4gICAgLy8gTWlzY1xuICAgIGxvYWRpbmcgPSAnbG9hZGluZycsXG4gICAgZHJvcGRvd24gPSAnZHJvcGRvd24nLFxuXG4gICAgLy8gRmlsZSBBY3Rpb25zOiBEcmFnICYgZHJvcFxuICAgIGRuZERyYWdnaW5nID0gJ2RuZERyYWdnaW5nJyxcbiAgICBkbmRDYW5Ecm9wID0gJ2RuZENhbkRyb3AnLFxuICAgIGRuZENhbm5vdERyb3AgPSAnZG5kQ2Fubm90RHJvcCcsXG5cbiAgICAvLyBGaWxlIEFjdGlvbnM6IEZpbGUgb3BlcmF0aW9uc1xuICAgIG9wZW5GaWxlcyA9ICdvcGVuRmlsZXMnLFxuICAgIG9wZW5QYXJlbnRGb2xkZXIgPSAnb3BlblBhcmVudEZvbGRlcicsXG4gICAgY29weSA9ICdjb3B5JyxcbiAgICBzZWFyY2ggPSAnc2VhcmNoJyxcbiAgICBzZWxlY3RBbGxGaWxlcyA9ICdzZWxlY3RBbGxGaWxlcycsXG4gICAgY2xlYXJTZWxlY3Rpb24gPSAnY2xlYXJTZWxlY3Rpb24nLFxuXG4gICAgLy8gRmlsZSBBY3Rpb25zOiBVbnNvcnRlZFxuICAgIGNoZWNrQWN0aXZlID0gJ2NoZWNrQWN0aXZlJyxcbiAgICBjaGVja0luYWN0aXZlID0gJ2NoZWNrSW5hY3RpdmUnLFxuICAgIGRlc2MgPSAnZGVzYycsXG4gICAgYXNjID0gJ2FzYycsXG4gICAgbGlzdCA9ICdsaXN0JyxcbiAgICBmb2xkZXIgPSAnZm9sZGVyJyxcbiAgICBmb2xkZXJDcmVhdGUgPSAnZm9sZGVyQ3JlYXRlJyxcbiAgICBmb2xkZXJPcGVuID0gJ2ZvbGRlck9wZW4nLFxuICAgIHNtYWxsVGh1bWJuYWlsID0gJ3NtYWxsVGh1bWJuYWlsJyxcbiAgICBsYXJnZVRodW1ibmFpbCA9ICdsYXJnZVRodW1ibmFpbCcsXG4gICAgZm9sZGVyQ2hhaW5TZXBhcmF0b3IgPSAnZm9sZGVyQ2hhaW5TZXBhcmF0b3InLFxuICAgIGRvd25sb2FkID0gJ2Rvd25sb2FkJyxcbiAgICB1cGxvYWQgPSAndXBsb2FkJyxcbiAgICB0cmFzaCA9ICd0cmFzaCcsXG4gICAgZmFsbGJhY2tJY29uID0gJ2ZhbGxiYWNrSWNvbicsXG5cbiAgICAvLyBGaWxlIG1vZGlmaWVyc1xuICAgIHN5bWxpbmsgPSAnc3ltbGluaycsXG4gICAgaGlkZGVuID0gJ2hpZGRlbicsXG5cbiAgICAvLyBHZW5lcmljIGZpbGUgdHlwZXNcbiAgICBmaWxlID0gJ2ZpbGUnLFxuICAgIGxpY2Vuc2UgPSAnbGljZW5zZScsXG4gICAgY29kZSA9ICdjb2RlJyxcbiAgICBjb25maWcgPSAnY29uZmlnJyxcbiAgICBtb2RlbCA9ICdtb2RlbCcsXG4gICAgZGF0YWJhc2UgPSAnZGF0YWJhc2UnLFxuICAgIHRleHQgPSAndGV4dCcsXG4gICAgYXJjaGl2ZSA9ICdhcmNoaXZlJyxcbiAgICBpbWFnZSA9ICdpbWFnZScsXG4gICAgdmlkZW8gPSAndmlkZW8nLFxuICAgIGluZm8gPSAnaW5mbycsXG4gICAga2V5ID0gJ2tleScsXG4gICAgbG9jayA9ICdsb2NrJyxcbiAgICBtdXNpYyA9ICdtdXNpYycsXG4gICAgdGVybWluYWwgPSAndGVybWluYWwnLFxuICAgIHVzZXJzID0gJ3VzZXJzJyxcblxuICAgIC8vIE9TIGZpbGUgdHlwZXNcbiAgICBsaW51eCA9ICdsaW51eCcsXG4gICAgdWJ1bnR1ID0gJ3VidW50dScsXG4gICAgd2luZG93cyA9ICd3aW5kb3dzJyxcblxuICAgIC8vIFByb2dyYW1taW5nIGxhbmd1YWdlIGZpbGUgdHlwZXNcbiAgICBydXN0ID0gJ3J1c3QnLFxuICAgIHB5dGhvbiA9ICdweXRob24nLFxuICAgIG5vZGVqcyA9ICdub2RlanMnLFxuICAgIHBocCA9ICdwaHAnLFxuXG4gICAgLy8gRGV2ZWxvcG1lbnQgdG9vbHMgZmlsZSB0eXBlc1xuICAgIGdpdCA9ICdnaXQnLFxuXG4gICAgLy8gQnJhbmRzIGZpbGUgdHlwZXNcbiAgICBhZG9iZSA9ICdhZG9iZScsXG5cbiAgICAvLyBPdGhlciBwcm9ncmFtIGZpbGUgdHlwZXNcbiAgICBwZGYgPSAncGRmJyxcbiAgICBleGNlbCA9ICdleGNlbCcsXG4gICAgd29yZCA9ICd3b3JkJyxcbiAgICBmbGFzaCA9ICdmbGFzaCcsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZUljb25EYXRhIHtcbiAgICBpY29uOiBDaG9ua3lJY29uTmFtZSB8IHN0cmluZztcbiAgICBjb2xvckNvZGU6IG51bWJlcjtcbn1cbiIsImltcG9ydCB7IEZpbGVEYXRhIH0gZnJvbSAnLi9maWxlcy50eXBlcyc7XG5cbmV4cG9ydCBlbnVtIFNwZWNpYWxBY3Rpb24ge1xuICAgIE1vdXNlQ2xpY2tGaWxlID0gJ21vdXNlX2NsaWNrX2ZpbGUnLFxuICAgIEtleWJvYXJkQ2xpY2tGaWxlID0gJ2tleWJvYXJkX2NsaWNrX2ZpbGUnLFxuXG4gICAgT3BlblBhcmVudEZvbGRlciA9ICdvcGVuX3BhcmVudF9mb2xkZXInLFxuICAgIE9wZW5Gb2xkZXJDaGFpbkZvbGRlciA9ICdvcGVuX2ZvbGRlcl9jaGFpbl9mb2xkZXInLFxuICAgIFRvZ2dsZVNlYXJjaEJhciA9ICd0b2dnbGVfc2VhcmNoX2JhcicsXG5cbiAgICBTZWxlY3RBbGxGaWxlcyA9ICdzZWxlY3RfYWxsX2ZpbGVzJyxcbiAgICBDbGVhclNlbGVjdGlvbiA9ICdjbGVhcl9zZWxlY3Rpb24nLFxuXG4gICAgRHJhZ05Ecm9wU3RhcnQgPSAnZHJhZ19uX2Ryb3Bfc3RhcnQnLFxuICAgIERyYWdORHJvcEVuZCA9ICdkcmFnX25fZHJvcF9lbmQnLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNwZWNpYWxGaWxlTW91c2VDbGlja0FjdGlvbiB7XG4gICAgYWN0aW9uSWQ6IFNwZWNpYWxBY3Rpb24uTW91c2VDbGlja0ZpbGU7XG4gICAgZmlsZTogRmlsZURhdGE7XG4gICAgZmlsZURpc3BsYXlJbmRleDogbnVtYmVyO1xuICAgIGFsdEtleTogYm9vbGVhbjtcbiAgICBjdHJsS2V5OiBib29sZWFuO1xuICAgIHNoaWZ0S2V5OiBib29sZWFuO1xuICAgIGNsaWNrVHlwZTogJ3NpbmdsZScgfCAnZG91YmxlJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTcGVjaWFsRmlsZUtleWJvYXJkQ2xpY2tBY3Rpb24ge1xuICAgIGFjdGlvbklkOiBTcGVjaWFsQWN0aW9uLktleWJvYXJkQ2xpY2tGaWxlO1xuICAgIGZpbGU6IEZpbGVEYXRhO1xuICAgIGZpbGVEaXNwbGF5SW5kZXg6IG51bWJlcjtcbiAgICBlbnRlcktleTogYm9vbGVhbjtcbiAgICBzcGFjZUtleTogYm9vbGVhbjtcbiAgICBhbHRLZXk6IGJvb2xlYW47XG4gICAgY3RybEtleTogYm9vbGVhbjtcbiAgICBzaGlmdEtleTogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTcGVjaWFsT3BlbkZvbGRlckNoYWluRm9sZGVyQWN0aW9uIHtcbiAgICBhY3Rpb25JZDogU3BlY2lhbEFjdGlvbi5PcGVuRm9sZGVyQ2hhaW5Gb2xkZXI7XG4gICAgZmlsZTogRmlsZURhdGE7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3BlY2lhbERyYWdORHJvcFN0YXJ0QWN0aW9uIHtcbiAgICBhY3Rpb25JZDogU3BlY2lhbEFjdGlvbi5EcmFnTkRyb3BTdGFydDtcbiAgICBkcmFnU291cmNlOiBGaWxlRGF0YTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTcGVjaWFsRHJhZ05Ecm9wRW5kQWN0aW9uIHtcbiAgICBhY3Rpb25JZDogU3BlY2lhbEFjdGlvbi5EcmFnTkRyb3BFbmQ7XG4gICAgZHJhZ1NvdXJjZTogRmlsZURhdGE7XG4gICAgZHJvcFRhcmdldDogRmlsZURhdGE7XG4gICAgZHJvcEVmZmVjdDogJ21vdmUnIHwgJ2NvcHknO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNwZWNpYWxTaW1wbGVBY3Rpb24ge1xuICAgIGFjdGlvbklkOlxuICAgICAgICB8IFNwZWNpYWxBY3Rpb24uT3BlblBhcmVudEZvbGRlclxuICAgICAgICB8IFNwZWNpYWxBY3Rpb24uVG9nZ2xlU2VhcmNoQmFyXG4gICAgICAgIHwgU3BlY2lhbEFjdGlvbi5TZWxlY3RBbGxGaWxlc1xuICAgICAgICB8IFNwZWNpYWxBY3Rpb24uQ2xlYXJTZWxlY3Rpb247XG59XG5cbmV4cG9ydCB0eXBlIFNwZWNpYWxBY3Rpb25EYXRhID1cbiAgICB8IFNwZWNpYWxGaWxlTW91c2VDbGlja0FjdGlvblxuICAgIHwgU3BlY2lhbEZpbGVLZXlib2FyZENsaWNrQWN0aW9uXG4gICAgfCBTcGVjaWFsT3BlbkZvbGRlckNoYWluRm9sZGVyQWN0aW9uXG4gICAgfCBTcGVjaWFsRHJhZ05Ecm9wU3RhcnRBY3Rpb25cbiAgICB8IFNwZWNpYWxEcmFnTkRyb3BFbmRBY3Rpb25cbiAgICB8IFNwZWNpYWxTaW1wbGVBY3Rpb247XG5cbmV4cG9ydCB0eXBlIEludGVybmFsU3BlY2lhbEFjdGlvbkRpc3BhdGNoZXIgPSAoYWN0aW9uRGF0YTogU3BlY2lhbEFjdGlvbkRhdGEpID0+IHZvaWQ7XG5cbmV4cG9ydCB0eXBlIFNwZWNpYWxBY3Rpb25IYW5kbGVyTWFwID0ge1xuICAgIFthY3Rpb25JZCBpbiBTcGVjaWFsQWN0aW9uXTogKGRhdGE6IFNwZWNpYWxBY3Rpb25EYXRhKSA9PiB2b2lkO1xufTtcbiIsImltcG9ydCBkYXRlRm9ybWF0IGZyb20gJ2RhdGVmb3JtYXQnO1xuaW1wb3J0IGZpbGVzaXplIGZyb20gJ2ZpbGVzaXplJztcbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAndHNkZWYnO1xuXG5pbXBvcnQgeyBGaWxlRGF0YSB9IGZyb20gJy4uL3R5cGVzL2ZpbGVzLnR5cGVzJztcblxuZXhwb3J0IGNsYXNzIEZpbGVIZWxwZXIge1xuICAgIHB1YmxpYyBzdGF0aWMgaXNEaXJlY3RvcnkoZmlsZTogTnVsbGFibGU8RmlsZURhdGE+KTogZmlsZSBpcyBGaWxlRGF0YSB7XG4gICAgICAgIC8vIE5vdCBhIGRpcmVjdG9yeSBieSBkZWZhdWx0XG4gICAgICAgIHJldHVybiAhIWZpbGUgJiYgZmlsZS5pc0RpciA9PT0gdHJ1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGlzSGlkZGVuKGZpbGU6IE51bGxhYmxlPEZpbGVEYXRhPik6IGZpbGUgaXMgRmlsZURhdGEge1xuICAgICAgICAvLyBOb3QgaGlkZGVuIGJ5IGRlZmF1bHRcbiAgICAgICAgcmV0dXJuICEhZmlsZSAmJiBmaWxlLmlzSGlkZGVuID09PSB0cnVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgaXNTeW1saW5rKGZpbGU6IE51bGxhYmxlPEZpbGVEYXRhPik6IGZpbGUgaXMgRmlsZURhdGEge1xuICAgICAgICAvLyBOb3QgYSBzeW1saW5rIGJ5IGRlZmF1bHRcbiAgICAgICAgcmV0dXJuICEhZmlsZSAmJiBmaWxlLmlzU3ltbGluayA9PT0gdHJ1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGlzQ2xpY2thYmxlKGZpbGU6IE51bGxhYmxlPEZpbGVEYXRhPik6IGZpbGUgaXMgRmlsZURhdGEge1xuICAgICAgICAvLyBDbGlja2FibGUgYnkgZGVmYXVsdFxuICAgICAgICByZXR1cm4gISFmaWxlO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgaXNPcGVuYWJsZShmaWxlOiBOdWxsYWJsZTxGaWxlRGF0YT4pOiBmaWxlIGlzIEZpbGVEYXRhIHtcbiAgICAgICAgLy8gT3BlbmFibGUgYnkgZGVmYXVsdFxuICAgICAgICByZXR1cm4gISFmaWxlICYmIGZpbGUub3BlbmFibGUgIT09IGZhbHNlO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgaXNTZWxlY3RhYmxlKGZpbGU6IE51bGxhYmxlPEZpbGVEYXRhPik6IGZpbGUgaXMgRmlsZURhdGEge1xuICAgICAgICAvLyBTZWxlY3RhYmxlIGJ5IGRlZmF1bHRcbiAgICAgICAgcmV0dXJuICEhZmlsZSAmJiBmaWxlLnNlbGVjdGFibGUgIT09IGZhbHNlO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgaXNEcmFnZ2FibGUoZmlsZTogTnVsbGFibGU8RmlsZURhdGE+KTogZmlsZSBpcyBGaWxlRGF0YSB7XG4gICAgICAgIC8vIEZpbGUgJiBmb2xkZXJzIGFyZSBkcmFnZ2FibGUgYnkgZGVmYXVsdCwgYG51bGxgIGlzIG5vdFxuICAgICAgICByZXR1cm4gISFmaWxlICYmIGZpbGUuZHJhZ2dhYmxlICE9PSBmYWxzZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGlzRHJvcHBhYmxlKGZpbGU6IE51bGxhYmxlPEZpbGVEYXRhPik6IGZpbGUgaXMgRmlsZURhdGEge1xuICAgICAgICAvLyBGb2xkZXJzIGFyZSBkcm9wcGFibGUgYnkgZGVmYXVsdCwgZmlsZXMgYXJlIG5vdFxuICAgICAgICBpZiAoIWZpbGUpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGZpbGUuaXNEaXIgJiYgZmlsZS5kcm9wcGFibGUgIT09IGZhbHNlKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZpbGUuZHJvcHBhYmxlID09PSB0cnVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0UmVhZGFibGVGaWxlU2l6ZShmaWxlOiBOdWxsYWJsZTxGaWxlRGF0YT4pOiBOdWxsYWJsZTxzdHJpbmc+IHtcbiAgICAgICAgaWYgKCFmaWxlIHx8IHR5cGVvZiBmaWxlLnNpemUgIT09ICdudW1iZXInKSByZXR1cm4gbnVsbDtcblxuICAgICAgICBjb25zdCBzaXplID0gZmlsZS5zaXplO1xuICAgICAgICBjb25zdCBzaXplRGF0YSA9IGZpbGVzaXplKHNpemUsIHsgYml0czogZmFsc2UsIG91dHB1dDogJ29iamVjdCcgfSkgYXMgYW55O1xuICAgICAgICBpZiAoc2l6ZURhdGEuc3ltYm9sID09PSAnQicpIHtcbiAgICAgICAgICAgIHJldHVybiBgJHtNYXRoLnJvdW5kKHNpemVEYXRhLnZhbHVlIC8gMTApIC8gMTAwLjB9IEtCYDtcbiAgICAgICAgfSBlbHNlIGlmIChzaXplRGF0YS5zeW1ib2wgPT09ICdLQicpIHtcbiAgICAgICAgICAgIHJldHVybiBgJHtNYXRoLnJvdW5kKHNpemVEYXRhLnZhbHVlKX0gJHtzaXplRGF0YS5zeW1ib2x9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7c2l6ZURhdGEudmFsdWV9ICR7c2l6ZURhdGEuc3ltYm9sfWA7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBnZXRSZWFkYWJsZURhdGUoZmlsZTogTnVsbGFibGU8RmlsZURhdGE+KTogTnVsbGFibGU8c3RyaW5nPiB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICFmaWxlIHx8XG4gICAgICAgICAgICAhKGZpbGUubW9kRGF0ZSBpbnN0YW5jZW9mIERhdGUgfHwgdHlwZW9mIGZpbGUubW9kRGF0ZSA9PT0gJ3N0cmluZycpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb252ZXJ0IHN0cmluZyBkYXRlIGludG8gYSBkYXRlIG9iamVjdFxuICAgICAgICBsZXQgZGF0ZSA9IGZpbGUubW9kRGF0ZTtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ29uZmlybSB0aGF0IHdlIGhhdmUgYSB2YWxpZCBkYXRlXG4gICAgICAgIGlmIChpc05hTihkYXRlLmdldFRpbWUoKSkpIHJldHVybiBudWxsO1xuXG4gICAgICAgIGNvbnN0IGN1cnJlbnRZZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpID09PSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgIGlmIChjdXJyZW50WWVhcikgcmV0dXJuIGRhdGVGb3JtYXQoZGF0ZSwgJ2QgbW1tbSwgSEg6TU0nKTtcbiAgICAgICAgcmV0dXJuIGRhdGVGb3JtYXQoZGF0ZSwgJ2QgbW1tIHl5eXksIEhIOk1NJyk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBnZXRDaGlsZHJlbkNvdW50KGZpbGU6IE51bGxhYmxlPEZpbGVEYXRhPik6IE51bGxhYmxlPG51bWJlcj4ge1xuICAgICAgICBpZiAoIWZpbGUgfHwgdHlwZW9mIGZpbGUuY2hpbGRyZW5Db3VudCAhPT0gJ251bWJlcicpIHJldHVybiBudWxsO1xuXG4gICAgICAgIHJldHVybiBmaWxlLmNoaWxkcmVuQ291bnQ7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRmlsZUFjdGlvbiB9IGZyb20gJy4uL3R5cGVzL2ZpbGUtYWN0aW9ucy50eXBlcyc7XG5pbXBvcnQgeyBDaG9ua3lJY29uTmFtZSB9IGZyb20gJy4uL3R5cGVzL2ljb25zLnR5cGVzJztcbmltcG9ydCB7IFNwZWNpYWxBY3Rpb24gfSBmcm9tICcuLi90eXBlcy9zcGVjaWFsLWFjdGlvbnMudHlwZXMnO1xuaW1wb3J0IHsgRmlsZUhlbHBlciB9IGZyb20gJy4vZmlsZS1oZWxwZXInO1xuXG5leHBvcnQgY29uc3QgQ2hvbmt5QWN0aW9ucyA9IHtcbiAgICAvLyBBY3Rpb25zIHRyaWdnZXJlZCBieSBkcmFnICYgZHJvcFxuICAgIE1vdmVGaWxlc1RvOiB7XG4gICAgICAgIGlkOiAnbW92ZV9maWxlc190bycsXG4gICAgfSxcbiAgICBEdXBsaWNhdGVGaWxlc1RvOiB7XG4gICAgICAgIGlkOiAnZHVwbGljYXRlX2ZpbGVzX3RvJyxcbiAgICB9LFxuXG4gICAgLy8gTW9zdCBpbXBvcnRhbnQgYWN0aW9uIG9mIGFsbCAtIG9wZW5pbmcgZmlsZXMhXG4gICAgT3BlbkZpbGVzOiB7XG4gICAgICAgIGlkOiAnb3Blbl9maWxlcycsXG4gICAgICAgIHJlcXVpcmVzU2VsZWN0aW9uOiB0cnVlLFxuICAgICAgICBob3RrZXlzOiBbJ2VudGVyJ10sXG4gICAgICAgIGZpbGVGaWx0ZXI6IEZpbGVIZWxwZXIuaXNPcGVuYWJsZSxcbiAgICAgICAgdG9vbGJhckJ1dHRvbjoge1xuICAgICAgICAgICAgbmFtZTogJ09wZW4gc2VsZWN0aW9uJyxcbiAgICAgICAgICAgIGdyb3VwOiAnQWN0aW9ucycsXG4gICAgICAgICAgICBkcm9wZG93bjogdHJ1ZSxcbiAgICAgICAgICAgIGljb246IENob25reUljb25OYW1lLm9wZW5GaWxlcyxcbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgLy8gVG9vbGJhciByZWxhdGVkIGFjdGlvblxuICAgIE9wZW5QYXJlbnRGb2xkZXI6IHtcbiAgICAgICAgaWQ6ICdvcGVuX3BhcmVudF9mb2xkZXInLFxuICAgICAgICBob3RrZXlzOiBbJ2JhY2tzcGFjZSddLFxuICAgICAgICB0b29sYmFyQnV0dG9uOiB7XG4gICAgICAgICAgICBuYW1lOiAnR28gdXAgYSBkaXJlY3RvcnknLFxuICAgICAgICAgICAgaWNvbjogQ2hvbmt5SWNvbk5hbWUub3BlblBhcmVudEZvbGRlcixcbiAgICAgICAgICAgIGljb25Pbmx5OiB0cnVlLFxuICAgICAgICB9LFxuXG4gICAgICAgIHNwZWNpYWxBY3Rpb25Ub0Rpc3BhdGNoOiBTcGVjaWFsQWN0aW9uLk9wZW5QYXJlbnRGb2xkZXIsXG4gICAgfSxcbiAgICBUb2dnbGVTZWFyY2g6IHtcbiAgICAgICAgaWQ6ICd0b2dnbGVfc2VhcmNoJyxcbiAgICAgICAgaG90a2V5czogWydjdHJsK2YnXSxcbiAgICAgICAgdG9vbGJhckJ1dHRvbjoge1xuICAgICAgICAgICAgbmFtZTogJ1NlYXJjaCcsXG4gICAgICAgICAgICBpY29uOiBDaG9ua3lJY29uTmFtZS5zZWFyY2gsXG4gICAgICAgICAgICBpY29uT25seTogdHJ1ZSxcbiAgICAgICAgfSxcblxuICAgICAgICBzcGVjaWFsQWN0aW9uVG9EaXNwYXRjaDogU3BlY2lhbEFjdGlvbi5Ub2dnbGVTZWFyY2hCYXIsXG4gICAgfSxcblxuICAgIC8vIEFjdGlvbnMgcmVsYXRlZCB0byBzZWxlY3Rpb25cbiAgICBTZWxlY3RBbGxGaWxlczoge1xuICAgICAgICBpZDogJ3NlbGVjdF9hbGxfZmlsZXMnLFxuICAgICAgICBob3RrZXlzOiBbJ2N0cmwrYSddLFxuICAgICAgICB0b29sYmFyQnV0dG9uOiB7XG4gICAgICAgICAgICBuYW1lOiAnU2VsZWN0IGFsbCBmaWxlcycsXG4gICAgICAgICAgICBncm91cDogJ0FjdGlvbnMnLFxuICAgICAgICAgICAgaWNvbjogQ2hvbmt5SWNvbk5hbWUuc2VsZWN0QWxsRmlsZXMsXG4gICAgICAgICAgICBpY29uT25seTogdHJ1ZSxcbiAgICAgICAgfSxcblxuICAgICAgICBzcGVjaWFsQWN0aW9uVG9EaXNwYXRjaDogU3BlY2lhbEFjdGlvbi5TZWxlY3RBbGxGaWxlcyxcbiAgICB9LFxuICAgIENsZWFyU2VsZWN0aW9uOiB7XG4gICAgICAgIGlkOiAnY2xlYXJfc2VsZWN0aW9uJyxcbiAgICAgICAgaG90a2V5czogWydlc2NhcGUnXSxcbiAgICAgICAgdG9vbGJhckJ1dHRvbjoge1xuICAgICAgICAgICAgbmFtZTogJ0NsZWFyIHNlbGVjdGlvbicsXG4gICAgICAgICAgICBncm91cDogJ0FjdGlvbnMnLFxuICAgICAgICAgICAgaWNvbjogQ2hvbmt5SWNvbk5hbWUuY2xlYXJTZWxlY3Rpb24sXG4gICAgICAgICAgICBpY29uT25seTogdHJ1ZSxcbiAgICAgICAgfSxcblxuICAgICAgICBzcGVjaWFsQWN0aW9uVG9EaXNwYXRjaDogU3BlY2lhbEFjdGlvbi5DbGVhclNlbGVjdGlvbixcbiAgICB9LFxuXG4gICAgLy8gT3B0aW9uYWwgYWN0aW9uc1xuICAgIENvcHlGaWxlczoge1xuICAgICAgICBpZDogJ2NvcHlfZmlsZXMnLFxuICAgICAgICByZXF1aXJlc1NlbGVjdGlvbjogdHJ1ZSxcbiAgICAgICAgaG90a2V5czogWydjdHJsK2MnXSxcbiAgICAgICAgdG9vbGJhckJ1dHRvbjoge1xuICAgICAgICAgICAgbmFtZTogJ0NvcHkgc2VsZWN0aW9uJyxcbiAgICAgICAgICAgIGdyb3VwOiAnQWN0aW9ucycsXG4gICAgICAgICAgICBkcm9wZG93bjogdHJ1ZSxcbiAgICAgICAgICAgIGljb246IENob25reUljb25OYW1lLmNvcHksXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBDcmVhdGVGb2xkZXI6IHtcbiAgICAgICAgaWQ6ICdjcmVhdGVfZm9sZGVyJyxcbiAgICAgICAgdG9vbGJhckJ1dHRvbjoge1xuICAgICAgICAgICAgbmFtZTogJ0NyZWF0ZSBmb2xkZXInLFxuICAgICAgICAgICAgdG9vbHRpcDogJ0NyZWF0ZSBhIGZvbGRlcicsXG4gICAgICAgICAgICBpY29uOiBDaG9ua3lJY29uTmFtZS5mb2xkZXJDcmVhdGUsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBVcGxvYWRGaWxlczoge1xuICAgICAgICBpZDogJ3VwbG9hZF9maWxlcycsXG4gICAgICAgIHRvb2xiYXJCdXR0b246IHtcbiAgICAgICAgICAgIG5hbWU6ICdVcGxvYWQgZmlsZXMnLFxuICAgICAgICAgICAgdG9vbHRpcDogJ1VwbG9hZCBmaWxlcycsXG4gICAgICAgICAgICBpY29uOiBDaG9ua3lJY29uTmFtZS51cGxvYWQsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBEb3dubG9hZEZpbGVzOiB7XG4gICAgICAgIGlkOiAnZG93bmxvYWRfZmlsZXMnLFxuICAgICAgICByZXF1aXJlc1NlbGVjdGlvbjogdHJ1ZSxcbiAgICAgICAgdG9vbGJhckJ1dHRvbjoge1xuICAgICAgICAgICAgbmFtZTogJ0Rvd25sb2FkIGZpbGVzJyxcbiAgICAgICAgICAgIGdyb3VwOiAnQWN0aW9ucycsXG4gICAgICAgICAgICB0b29sdGlwOiAnRG93bmxvYWQgZmlsZXMnLFxuICAgICAgICAgICAgZHJvcGRvd246IHRydWUsXG4gICAgICAgICAgICBpY29uOiBDaG9ua3lJY29uTmFtZS5kb3dubG9hZCxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIERlbGV0ZUZpbGVzOiB7XG4gICAgICAgIGlkOiAnZGVsZXRlX2ZpbGVzJyxcbiAgICAgICAgcmVxdWlyZXNTZWxlY3Rpb246IHRydWUsXG4gICAgICAgIGhvdGtleXM6IFsnZGVsZXRlJ10sXG4gICAgICAgIHRvb2xiYXJCdXR0b246IHtcbiAgICAgICAgICAgIG5hbWU6ICdEZWxldGUgZmlsZXMnLFxuICAgICAgICAgICAgZ3JvdXA6ICdBY3Rpb25zJyxcbiAgICAgICAgICAgIHRvb2x0aXA6ICdEZWxldGUgZmlsZXMnLFxuICAgICAgICAgICAgZHJvcGRvd246IHRydWUsXG4gICAgICAgICAgICBpY29uOiBDaG9ua3lJY29uTmFtZS50cmFzaCxcbiAgICAgICAgfSxcbiAgICB9LFxufSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IERlZmF1bHRGaWxlQWN0aW9uczogRmlsZUFjdGlvbltdID0gW1xuICAgIENob25reUFjdGlvbnMuTW92ZUZpbGVzVG8sXG4gICAgQ2hvbmt5QWN0aW9ucy5EdXBsaWNhdGVGaWxlc1RvLFxuXG4gICAgQ2hvbmt5QWN0aW9ucy5PcGVuUGFyZW50Rm9sZGVyLFxuICAgIENob25reUFjdGlvbnMuVG9nZ2xlU2VhcmNoLFxuXG4gICAgQ2hvbmt5QWN0aW9ucy5PcGVuRmlsZXMsXG4gICAgQ2hvbmt5QWN0aW9ucy5TZWxlY3RBbGxGaWxlcyxcbiAgICBDaG9ua3lBY3Rpb25zLkNsZWFyU2VsZWN0aW9uLFxuXTtcbiIsImV4cG9ydCBjbGFzcyBMb2dnZXIge1xuICAgIHB1YmxpYyBzdGF0aWMgZXJyb3IoLi4uYXJnczogYW55W10pOiB2b2lkIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS5lcnJvcignW0Nob25reSBydW50aW1lIGVycm9yXScsIC4uLmFyZ3MpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgd2FybiguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oJ1tDaG9ua3kgcnVudGltZSB3YXJuaW5nXScsIC4uLmFyZ3MpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZGVidWcoLi4uYXJnczogYW55W10pOiB2b2lkIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS5kZWJ1ZygnW0Nob25reSBydW50aW1lIGRlYnVnXScsIC4uLmFyZ3MpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZm9ybWF0QnVsbGV0cyhidWxsZXRzOiBzdHJpbmdbXSk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgXFxuLSAke2J1bGxldHMuam9pbignXFxuLSAnKX1gO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBBbnlPYmplY3RXaXRoU3RyaW5nS2V5cywgTnVsbGFibGUgfSBmcm9tICd0c2RlZic7XG5cbmltcG9ydCB7IEZpbGVBY3Rpb24gfSBmcm9tICcuLi90eXBlcy9maWxlLWFjdGlvbnMudHlwZXMnO1xuaW1wb3J0IHsgRmlsZUFycmF5IH0gZnJvbSAnLi4vdHlwZXMvZmlsZXMudHlwZXMnO1xuaW1wb3J0IHsgRXJyb3JNZXNzYWdlRGF0YSB9IGZyb20gJy4uL3R5cGVzL3ZhbGlkYXRpb24udHlwZXMnO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXInO1xuXG5leHBvcnQgY29uc3QgaXNQbGFpbk9iamVjdCA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgb2JqZWN0ID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59O1xuZXhwb3J0IGNvbnN0IGlzRnVuY3Rpb24gPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIEZ1bmN0aW9uID0+IHtcbiAgICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY2FsbCAmJiB2YWx1ZS5hcHBseSk7XG59O1xuXG5leHBvcnQgY29uc3QgaXNNb2JpbGVEZXZpY2UgPSAoKSA9PiB7XG4gICAgLy8gbm9pbnNwZWN0aW9uIEpTRGVwcmVjYXRlZFN5bWJvbHNcbiAgICByZXR1cm4gKFxuICAgICAgICB0eXBlb2Ygd2luZG93Lm9yaWVudGF0aW9uICE9PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0lFTW9iaWxlJykgIT09IC0xXG4gICAgKTtcbn07XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiB2YWxpZGF0ZXMgdGhlIHVzZXItcHJvdmlkZWQgZmlsZXMgYXJyYXkuIEl0IGNoZWNrcyB0aGUgZm9sbG93aW5nXG4gKiBjcml0ZXJpYTpcbiAqIC0gYGZpbGVzYCBpcyBub3QgYW4gYXJyYXlcbiAqIC0gdGhlcmUgYXJlIGR1cGxpY2F0ZSBmaWxlIElEc1xuICogLSBzb21lIGZpbGVzIGFyZSBtaXNzaW5nIGBpZGAgZmllbGRcbiAqIC0gc29tZSBmaWxlcyBhcmUgbWlzc2luZyBgbmFtZWAgZmllbGRcbiAqIC0gc29tZSBmaWxlcyBoYXZlIGludmFsaWQgdHlwZSAodGhleSBhcmUgbmVpdGhlciBhbiBvYmplY3Qgbm9yIGBudWxsYClcbiAqL1xuZXhwb3J0IGNvbnN0IGNsZWFudXBGaWxlQXJyYXkgPSA8QWxsb3dOdWxsIGV4dGVuZHMgYm9vbGVhbj4oXG4gICAgZmlsZUFycmF5OiBBbGxvd051bGwgZXh0ZW5kcyBmYWxzZSA/IEZpbGVBcnJheSA6IE51bGxhYmxlPEZpbGVBcnJheT4sXG4gICAgYWxsb3dOdWxsOiBBbGxvd051bGxcbik6IHtcbiAgICBjbGVhbkZpbGVBcnJheTogQWxsb3dOdWxsIGV4dGVuZHMgZmFsc2UgPyBGaWxlQXJyYXkgOiBOdWxsYWJsZTxGaWxlQXJyYXk+O1xuICAgIHdhcm5pbmdNZXNzYWdlOiBOdWxsYWJsZTxzdHJpbmc+O1xuICAgIHdhcm5pbmdCdWxsZXRzOiBzdHJpbmdbXTtcbn0gPT4ge1xuICAgIGxldCBjbGVhbkZpbGVBcnJheTogQWxsb3dOdWxsIGV4dGVuZHMgZmFsc2UgPyBGaWxlQXJyYXkgOiBOdWxsYWJsZTxGaWxlQXJyYXk+O1xuICAgIGxldCB3YXJuaW5nTWVzc2FnZSA9IG51bGw7XG4gICAgY29uc3Qgd2FybmluZ0J1bGxldHMgPSBbXTtcblxuICAgIGlmICghQXJyYXkuaXNBcnJheShmaWxlQXJyYXkpKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY2xlYW5GaWxlQXJyYXkgPSBhbGxvd051bGwgPyBudWxsIDogW107XG4gICAgICAgIGlmICghYWxsb3dOdWxsIHx8IGZpbGVBcnJheSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgd2FybmluZ01lc3NhZ2UgPVxuICAgICAgICAgICAgICAgIGBQcm92aWRlZCB2YWx1ZSB3YXMgcmVwbGFjZWQgYCArXG4gICAgICAgICAgICAgICAgYHdpdGggJHthbGxvd051bGwgPyAnbnVsbCcgOiAnZW1wdHkgYXJyYXknfS5gO1xuICAgICAgICAgICAgd2FybmluZ0J1bGxldHMucHVzaChcbiAgICAgICAgICAgICAgICBgRXhwZWN0ZWQgXCJmaWxlc1wiIHRvIGJlIGFuIGFycmF5LCBnb3QgdHlwZSBgICtcbiAgICAgICAgICAgICAgICAgICAgYFwiJHt0eXBlb2YgZmlsZUFycmF5fVwiIGluc3RlYWQgKHZhbHVlOiAke2ZpbGVBcnJheX0pLmBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBpbmRpY2VzVG9CZVJlbW92ZWQgPSBuZXcgU2V0PG51bWJlcj4oKTtcblxuICAgICAgICBjb25zdCBzZWVuSWRzID0ge307XG4gICAgICAgIGNvbnN0IGR1cGxpY2F0ZUlkU2V0ID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gICAgICAgIGNvbnN0IG1pc3NpbmdJZEluZGljZXMgPSBbXTtcbiAgICAgICAgY29uc3QgbWlzc2luZ05hbWVJbmRpY2VzID0gW107XG4gICAgICAgIGNvbnN0IGludmFsaWRUeXBlSW5kaWNlcyA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsZUFycmF5Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlID0gZmlsZUFycmF5W2ldO1xuXG4gICAgICAgICAgICBpZiAoaXNQbGFpbk9iamVjdChmaWxlKSkge1xuICAgICAgICAgICAgICAgIGlmIChmaWxlLmlkICYmIHNlZW5JZHNbZmlsZS5pZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgZHVwbGljYXRlSWRTZXQuYWRkKGZpbGUuaWQpO1xuICAgICAgICAgICAgICAgICAgICBpbmRpY2VzVG9CZVJlbW92ZWQuYWRkKGkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlZW5JZHNbZmlsZS5pZF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghZmlsZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIG1pc3NpbmdOYW1lSW5kaWNlcy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgICAgICBpbmRpY2VzVG9CZVJlbW92ZWQuYWRkKGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWZpbGUuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbWlzc2luZ0lkSW5kaWNlcy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgICAgICBpbmRpY2VzVG9CZVJlbW92ZWQuYWRkKGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlsZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGludmFsaWRUeXBlSW5kaWNlcy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgIGluZGljZXNUb0JlUmVtb3ZlZC5hZGQoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZHVwbGljYXRlSWRTZXQuc2l6ZSA+IDApIHtcbiAgICAgICAgICAgIHdhcm5pbmdCdWxsZXRzLnB1c2goXG4gICAgICAgICAgICAgICAgYFNvbWUgZmlsZXMgaGF2ZSBkdXBsaWNhdGUgSURzLiBUaGVzZSBJRHMgYXBwZWFyZWQgbXVsdGlwbGUgYCArXG4gICAgICAgICAgICAgICAgICAgIGB0aW1lczogJHtBcnJheS5mcm9tKGR1cGxpY2F0ZUlkU2V0KX1gXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtaXNzaW5nSWRJbmRpY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHdhcm5pbmdCdWxsZXRzLnB1c2goXG4gICAgICAgICAgICAgICAgYFNvbWUgZmlsZXMgYXJlIG1pc3NpbmcgdGhlIFwiaWRcIiBmaWVsZC4gYCArXG4gICAgICAgICAgICAgICAgICAgIGBSZWxldmFudCBmaWxlIGluZGljZXM6ICR7bWlzc2luZ0lkSW5kaWNlcy5qb2luKCcsICcpfWBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pc3NpbmdOYW1lSW5kaWNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB3YXJuaW5nQnVsbGV0cy5wdXNoKFxuICAgICAgICAgICAgICAgIGBTb21lIGZpbGVzIGFyZSBtaXNzaW5nIHRoZSBcIm5hbWVcIiBmaWVsZC4gYCArXG4gICAgICAgICAgICAgICAgICAgIGBSZWxldmFudCBmaWxlIGluZGljZXM6ICR7bWlzc2luZ05hbWVJbmRpY2VzLmpvaW4oJywgJyl9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW52YWxpZFR5cGVJbmRpY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHdhcm5pbmdCdWxsZXRzLnB1c2goXG4gICAgICAgICAgICAgICAgYFNvbWUgZmlsZXMgaGF2ZSBpbnZhbGlkIHR5cGUgKHRoZXkgYXJlIG5laXRoZXIgYSBwbGFpbiBvYmplY3Qgbm9yIFwibnVsbFwiKS4gYCArXG4gICAgICAgICAgICAgICAgICAgIGBSZWxldmFudCBmaWxlIGluZGljZXM6ICR7aW52YWxpZFR5cGVJbmRpY2VzLmpvaW4oJywgJyl9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmRpY2VzVG9CZVJlbW92ZWQuc2l6ZSA+IDApIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGNsZWFuRmlsZUFycmF5ID0gZmlsZUFycmF5LmZpbHRlcihcbiAgICAgICAgICAgICAgICAodmFsdWUsIGluZGV4KSA9PiAhaW5kaWNlc1RvQmVSZW1vdmVkLmhhcyhpbmRleClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB3YXJuaW5nTWVzc2FnZSA9XG4gICAgICAgICAgICAgICAgYCR7aW5kaWNlc1RvQmVSZW1vdmVkLnNpemV9IG9mZmVuZGluZyBgICtcbiAgICAgICAgICAgICAgICBgZmlsZSR7aW5kaWNlc1RvQmVSZW1vdmVkLnNpemUgPT09IDEgPyAnIHdhcycgOiAncyB3ZXJlJ30gYCArXG4gICAgICAgICAgICAgICAgYCByZW1vdmVkIGZyb20gdGhlIGFycmF5LmA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjbGVhbkZpbGVBcnJheSA9IGZpbGVBcnJheTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7IGNsZWFuRmlsZUFycmF5LCB3YXJuaW5nTWVzc2FnZSwgd2FybmluZ0J1bGxldHMgfTtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VGaWxlQXJyYXlWYWxpZGF0aW9uID0gKFxuICAgIGZpbGVzOiBGaWxlQXJyYXksXG4gICAgZm9sZGVyQ2hhaW46IE51bGxhYmxlPEZpbGVBcnJheT5cbik6IHtcbiAgICBjbGVhbkZpbGVzOiBGaWxlQXJyYXk7XG4gICAgY2xlYW5Gb2xkZXJDaGFpbjogTnVsbGFibGU8RmlsZUFycmF5PjtcbiAgICBlcnJvck1lc3NhZ2VzOiBFcnJvck1lc3NhZ2VEYXRhW107XG59ID0+IHtcbiAgICBjb25zdCB7IGNsZWFuRmlsZXMsIGVycm9yTWVzc2FnZXM6IGZpbGVzRXJyb3JNZXNzYWdlcyB9ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZXM6IEVycm9yTWVzc2FnZURhdGFbXSA9IFtdO1xuXG4gICAgICAgIGNvbnN0IGNsZWFuRmlsZXNSZXN1bHQgPSBjbGVhbnVwRmlsZUFycmF5KGZpbGVzLCBmYWxzZSk7XG4gICAgICAgIGlmIChjbGVhbkZpbGVzUmVzdWx0Lndhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPVxuICAgICAgICAgICAgICAgIGBUaGUgXCJmaWxlc1wiIHByb3AgcGFzc2VkIHRvIEZpbGVCcm93c2VyIGRpZCBub3QgcGFzcyB2YWxpZGF0aW9uLiBgICtcbiAgICAgICAgICAgICAgICBgJHtjbGVhbkZpbGVzUmVzdWx0Lndhcm5pbmdNZXNzYWdlfSBgICtcbiAgICAgICAgICAgICAgICBgVGhlIGZvbGxvd2luZyBlcnJvcnMgd2VyZSBlbmNvdW50ZXJlZDpgO1xuICAgICAgICAgICAgTG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgICAgICBMb2dnZXIuZm9ybWF0QnVsbGV0cyhjbGVhbkZpbGVzUmVzdWx0Lndhcm5pbmdCdWxsZXRzKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JNZXNzYWdlLFxuICAgICAgICAgICAgICAgIGJ1bGxldHM6IGNsZWFuRmlsZXNSZXN1bHQud2FybmluZ0J1bGxldHMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjbGVhbkZpbGVzOiBjbGVhbkZpbGVzUmVzdWx0LmNsZWFuRmlsZUFycmF5LFxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlcyxcbiAgICAgICAgfTtcbiAgICB9LCBbZmlsZXNdKTtcblxuICAgIGNvbnN0IHtcbiAgICAgICAgY2xlYW5Gb2xkZXJDaGFpbixcbiAgICAgICAgZXJyb3JNZXNzYWdlczogZm9sZGVyQ2hhaW5FcnJvck1lc3NhZ2VzLFxuICAgIH0gPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlczogRXJyb3JNZXNzYWdlRGF0YVtdID0gW107XG5cbiAgICAgICAgY29uc3QgY2xlYW5Gb2xkZXJDaGFpblJlc3VsdCA9IGNsZWFudXBGaWxlQXJyYXkoZm9sZGVyQ2hhaW4sIHRydWUpO1xuICAgICAgICBpZiAoY2xlYW5Gb2xkZXJDaGFpblJlc3VsdC53YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID1cbiAgICAgICAgICAgICAgICBgVGhlIFwiZm9sZGVyQ2hhaW5cIiBwcm9wIHBhc3NlZCB0byBGaWxlQnJvd3NlciBkaWQgbm90IHBhc3MgdmFsaWRhdGlvbi4gYCArXG4gICAgICAgICAgICAgICAgYCR7Y2xlYW5Gb2xkZXJDaGFpblJlc3VsdC53YXJuaW5nTWVzc2FnZX0gYCArXG4gICAgICAgICAgICAgICAgYFRoZSBmb2xsb3dpbmcgZXJyb3JzIHdlcmUgZW5jb3VudGVyZWQ6YDtcbiAgICAgICAgICAgIExvZ2dlci5lcnJvcihcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgTG9nZ2VyLmZvcm1hdEJ1bGxldHMoY2xlYW5Gb2xkZXJDaGFpblJlc3VsdC53YXJuaW5nQnVsbGV0cylcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgICAgICBidWxsZXRzOiBjbGVhbkZvbGRlckNoYWluUmVzdWx0Lndhcm5pbmdCdWxsZXRzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2xlYW5Gb2xkZXJDaGFpbjogY2xlYW5Gb2xkZXJDaGFpblJlc3VsdC5jbGVhbkZpbGVBcnJheSxcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZXMsXG4gICAgICAgIH07XG4gICAgfSwgW2ZvbGRlckNoYWluXSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBjbGVhbkZpbGVzLFxuICAgICAgICBjbGVhbkZvbGRlckNoYWluLFxuICAgICAgICBlcnJvck1lc3NhZ2VzOiBbLi4uZmlsZXNFcnJvck1lc3NhZ2VzLCAuLi5mb2xkZXJDaGFpbkVycm9yTWVzc2FnZXNdLFxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3QgdXNlRmlsZUFjdGlvbnNWYWxpZGF0aW9uID0gKFxuICAgIGZpbGVBY3Rpb25zOiBGaWxlQWN0aW9uW10sXG4gICAgZGVmYXVsdEZpbGVBY3Rpb25zOiBGaWxlQWN0aW9uW10sXG4gICAgaW5jbHVkZURlZmF1bHRGaWxlQWN0aW9uczogYm9vbGVhblxuKToge1xuICAgIGNsZWFuRmlsZUFjdGlvbnM6IEZpbGVBY3Rpb25bXTtcbiAgICBlcnJvck1lc3NhZ2VzOiBFcnJvck1lc3NhZ2VEYXRhW107XG59ID0+IHtcbiAgICAvLyA9PT0gTWVyZ2UgdXNlci1wcm92aWRlZCBhbmQgZGVmYXVsdCBmaWxlIGFjdGlvbnMgKGlmIGRlZmF1bHQgYWN0aW9ucyBhcmUgZW5hYmxlZClcbiAgICBjb25zdCBleHRlbmRlZEZpbGVBY3Rpb25zID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIGlmICghaW5jbHVkZURlZmF1bHRGaWxlQWN0aW9ucykgcmV0dXJuIGZpbGVBY3Rpb25zO1xuXG4gICAgICAgIC8vIEFkZCBkZWZhdWx0IGZpbGUgYWN0aW9ucyBpZiBubyBhY3Rpb25zIHdpdGggdGhlIHNhbWUgSURzIGFyZSBwcmVzZW50XG4gICAgICAgIGNvbnN0IHNlZW5GaWxlQWN0aW9uSWRzOiBBbnlPYmplY3RXaXRoU3RyaW5nS2V5cyA9IHt9O1xuICAgICAgICBmaWxlQWN0aW9ucy5tYXAoKGFjdGlvbikgPT4ge1xuICAgICAgICAgICAgaWYgKGFjdGlvbiAmJiBhY3Rpb24uaWQpIHNlZW5GaWxlQWN0aW9uSWRzW2FjdGlvbi5pZF0gPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgZXh0ZW5kZWRGaWxlQWN0aW9uczogRmlsZUFjdGlvbltdID0gWy4uLmZpbGVBY3Rpb25zXTtcbiAgICAgICAgZm9yIChjb25zdCBhY3Rpb24gb2YgZGVmYXVsdEZpbGVBY3Rpb25zKSB7XG4gICAgICAgICAgICBpZiAoc2VlbkZpbGVBY3Rpb25JZHNbYWN0aW9uLmlkXSkgY29udGludWU7XG4gICAgICAgICAgICBleHRlbmRlZEZpbGVBY3Rpb25zLnB1c2goYWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXh0ZW5kZWRGaWxlQWN0aW9ucztcbiAgICB9LCBbZmlsZUFjdGlvbnMsIGRlZmF1bHRGaWxlQWN0aW9ucywgaW5jbHVkZURlZmF1bHRGaWxlQWN0aW9uc10pO1xuXG4gICAgLy8gPT09IFZhbGlkYXRlIHRoZSBleHRlbmRlZCBmaWxlIGFjdGlvbiBhcnJheVxuICAgIGNvbnN0IHsgY2xlYW5GaWxlQWN0aW9ucywgZXJyb3JNZXNzYWdlczogZmlsZXNFcnJvck1lc3NhZ2VzIH0gPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlczogRXJyb3JNZXNzYWdlRGF0YVtdID0gW107XG5cbiAgICAgICAgY29uc3QgY2xlYW5GaWxlc1Jlc3VsdCA9IGNsZWFudXBGaWxlQWN0aW9ucyhleHRlbmRlZEZpbGVBY3Rpb25zKTtcbiAgICAgICAgaWYgKGNsZWFuRmlsZXNSZXN1bHQud2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9XG4gICAgICAgICAgICAgICAgYFRoZSBcImZpbGVBY3Rpb25zXCIgcHJvcCBwYXNzZWQgdG8gRmlsZUJyb3dzZXIgZGlkIG5vdCBwYXNzIGAgK1xuICAgICAgICAgICAgICAgIGB2YWxpZGF0aW9uLiAke2NsZWFuRmlsZXNSZXN1bHQud2FybmluZ01lc3NhZ2V9IGAgK1xuICAgICAgICAgICAgICAgIGBUaGUgZm9sbG93aW5nIGVycm9ycyB3ZXJlIGVuY291bnRlcmVkOmA7XG4gICAgICAgICAgICBMb2dnZXIuZXJyb3IoXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlLFxuICAgICAgICAgICAgICAgIExvZ2dlci5mb3JtYXRCdWxsZXRzKGNsZWFuRmlsZXNSZXN1bHQud2FybmluZ0J1bGxldHMpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgYnVsbGV0czogY2xlYW5GaWxlc1Jlc3VsdC53YXJuaW5nQnVsbGV0cyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNsZWFuRmlsZUFjdGlvbnM6IGNsZWFuRmlsZXNSZXN1bHQuY2xlYW5GaWxlQWN0aW9ucyxcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZXMsXG4gICAgICAgIH07XG4gICAgfSwgW2V4dGVuZGVkRmlsZUFjdGlvbnNdKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGNsZWFuRmlsZUFjdGlvbnMsXG4gICAgICAgIGVycm9yTWVzc2FnZXM6IGZpbGVzRXJyb3JNZXNzYWdlcyxcbiAgICB9O1xufTtcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHZhbGlkYXRlcyB0aGUgdXNlci1wcm92aWRlZCBmaWxlIGFjdGlvbnMgYXJyYXkuIEl0IGNoZWNrcyB0aGUgZm9sbG93aW5nXG4gKiBjcml0ZXJpYTpcbiAqIC0gYGZpbGVzYCBpcyBub3QgYW4gYXJyYXlcbiAqIC0gdGhlcmUgYXJlIGR1cGxpY2F0ZSBmaWxlIGFjdGlvbiBJRHNcbiAqIC0gc29tZSBmaWxlIGFjdGlvbnMgYXJlIG1pc3NpbmcgYGlkYCBmaWVsZFxuICogLSBzb21lIGZpbGVzIGhhdmUgaW52YWxpZCB0eXBlICh0aGV5IGFyZSBub3Qgb2JqZWN0cylcbiAqL1xuZXhwb3J0IGNvbnN0IGNsZWFudXBGaWxlQWN0aW9ucyA9IChcbiAgICBmaWxlQWN0aW9uczogRmlsZUFjdGlvbltdXG4pOiB7XG4gICAgY2xlYW5GaWxlQWN0aW9uczogRmlsZUFjdGlvbltdO1xuICAgIHdhcm5pbmdNZXNzYWdlOiBOdWxsYWJsZTxzdHJpbmc+O1xuICAgIHdhcm5pbmdCdWxsZXRzOiBzdHJpbmdbXTtcbn0gPT4ge1xuICAgIGxldCBjbGVhbkZpbGVBY3Rpb25zOiBGaWxlQWN0aW9uW107XG4gICAgbGV0IHdhcm5pbmdNZXNzYWdlID0gbnVsbDtcbiAgICBjb25zdCB3YXJuaW5nQnVsbGV0cyA9IFtdO1xuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGZpbGVBY3Rpb25zKSkge1xuICAgICAgICBjbGVhbkZpbGVBY3Rpb25zID0gW107XG4gICAgICAgIHdhcm5pbmdNZXNzYWdlID0gYFByb3ZpZGVkIHZhbHVlIHdhcyByZXBsYWNlZCBgICsgYHdpdGggYW4gZW1wdHkgYXJyYXkuYDtcbiAgICAgICAgd2FybmluZ0J1bGxldHMucHVzaChcbiAgICAgICAgICAgIGBFeHBlY3RlZCBcImZpbGVBY3Rpb25zXCIgdG8gYmUgYW4gYXJyYXksIGdvdCB0eXBlIGAgK1xuICAgICAgICAgICAgICAgIGBcIiR7dHlwZW9mIGZpbGVBY3Rpb25zfVwiIGluc3RlYWQgKHZhbHVlOiAke2ZpbGVBY3Rpb25zfSkuYFxuICAgICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGluZGljZXNUb0JlUmVtb3ZlZCA9IG5ldyBTZXQ8bnVtYmVyPigpO1xuXG4gICAgICAgIGNvbnN0IHNlZW5JZHMgPSB7fTtcbiAgICAgICAgY29uc3QgZHVwbGljYXRlSWRTZXQgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgICAgICAgY29uc3QgbWlzc2luZ0lkSW5kaWNlcyA9IFtdO1xuICAgICAgICBjb25zdCBpbnZhbGlkVHlwZUluZGljZXMgPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbGVBY3Rpb25zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlQWN0aW9uID0gZmlsZUFjdGlvbnNbaV07XG5cbiAgICAgICAgICAgIGlmIChpc1BsYWluT2JqZWN0KGZpbGVBY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZpbGVBY3Rpb24uaWQgJiYgc2Vlbklkc1tmaWxlQWN0aW9uLmlkXSkge1xuICAgICAgICAgICAgICAgICAgICBkdXBsaWNhdGVJZFNldC5hZGQoZmlsZUFjdGlvbi5pZCk7XG4gICAgICAgICAgICAgICAgICAgIGluZGljZXNUb0JlUmVtb3ZlZC5hZGQoaSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2Vlbklkc1tmaWxlQWN0aW9uLmlkXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFmaWxlQWN0aW9uLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgIG1pc3NpbmdJZEluZGljZXMucHVzaChpKTtcbiAgICAgICAgICAgICAgICAgICAgaW5kaWNlc1RvQmVSZW1vdmVkLmFkZChpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGludmFsaWRUeXBlSW5kaWNlcy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgIGluZGljZXNUb0JlUmVtb3ZlZC5hZGQoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZHVwbGljYXRlSWRTZXQuc2l6ZSA+IDApIHtcbiAgICAgICAgICAgIHdhcm5pbmdCdWxsZXRzLnB1c2goXG4gICAgICAgICAgICAgICAgYFNvbWUgZmlsZSBhY3Rpb25zIGhhdmUgZHVwbGljYXRlIElEcy4gVGhlc2UgSURzIGFwcGVhcmVkIG11bHRpcGxlIGAgK1xuICAgICAgICAgICAgICAgICAgICBgdGltZXM6ICR7QXJyYXkuZnJvbShkdXBsaWNhdGVJZFNldCl9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWlzc2luZ0lkSW5kaWNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB3YXJuaW5nQnVsbGV0cy5wdXNoKFxuICAgICAgICAgICAgICAgIGBTb21lIGZpbGUgYWN0aW9ucyBhcmUgbWlzc2luZyB0aGUgXCJpZFwiIGZpZWxkLiBgICtcbiAgICAgICAgICAgICAgICAgICAgYFJlbGV2YW50IGZpbGUgaW5kaWNlczogJHttaXNzaW5nSWRJbmRpY2VzLmpvaW4oJywgJyl9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW52YWxpZFR5cGVJbmRpY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHdhcm5pbmdCdWxsZXRzLnB1c2goXG4gICAgICAgICAgICAgICAgYFNvbWUgZmlsZXMgYWN0aW9ucyBoYXZlIGludmFsaWQgdHlwZSAodGhleSBhcmUgbm90IHBsYWluIG9iamVjdCkuIGAgK1xuICAgICAgICAgICAgICAgICAgICBgUmVsZXZhbnQgZmlsZSBpbmRpY2VzOiAke2ludmFsaWRUeXBlSW5kaWNlcy5qb2luKCcsICcpfWBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5kaWNlc1RvQmVSZW1vdmVkLnNpemUgPiAwKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjbGVhbkZpbGVBY3Rpb25zID0gZmlsZUFjdGlvbnMuZmlsdGVyKFxuICAgICAgICAgICAgICAgICh2YWx1ZSwgaW5kZXgpID0+ICFpbmRpY2VzVG9CZVJlbW92ZWQuaGFzKGluZGV4KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHdhcm5pbmdNZXNzYWdlID1cbiAgICAgICAgICAgICAgICBgJHtpbmRpY2VzVG9CZVJlbW92ZWQuc2l6ZX0gb2ZmZW5kaW5nIGAgK1xuICAgICAgICAgICAgICAgIGBmaWxlIGFjdGlvbiR7aW5kaWNlc1RvQmVSZW1vdmVkLnNpemUgPT09IDEgPyAnIHdhcycgOiAncyB3ZXJlJ30gYCArXG4gICAgICAgICAgICAgICAgYCByZW1vdmVkIGZyb20gdGhlIGFycmF5LmA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjbGVhbkZpbGVBY3Rpb25zID0gZmlsZUFjdGlvbnM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4geyBjbGVhbkZpbGVBY3Rpb25zLCB3YXJuaW5nTWVzc2FnZSwgd2FybmluZ0J1bGxldHMgfTtcbn07XG4iLCJpbXBvcnQgeyBhdG9tIH0gZnJvbSAncmVjb2lsJztcblxuLy9cbi8vID09PT0gQXRvbXNcbmV4cG9ydCBjb25zdCBlbmFibGVEcmFnQW5kRHJvcFN0YXRlID0gYXRvbTxib29sZWFuPih7XG4gICAga2V5OiAnZW5hYmxlRHJhZ0FuZERyb3BTdGF0ZScsXG4gICAgZGVmYXVsdDogZmFsc2UsXG59KTtcbiIsIi8vIFVzZWQgaW4gUmVhY3QgaG9va3MgdG8gaW5kaWNhdGUgZW1wdHkgZGVwcyBhcmUgaW50ZW50aW9uYWwuXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuL2xvZ2dlcic7XG5cbmV4cG9ydCBjb25zdCBJTlRFTlRJT05BTF9FTVBUWV9ERVBTOiBSZWFkb25seUFycmF5PG5ldmVyPiA9IFtdO1xuXG4vLyBVc2VkIGluIGNvbnRleHRzIHRoYXQgbmVlZCB0byBwcm92aWRlIHNvbWUgZGVmYXVsdCB2YWx1ZSBmb3IgYSBmdW5jdGlvbi5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyxAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbmV4cG9ydCBjb25zdCBOT09QX0ZVTkNUSU9OID0gKC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgTG9nZ2VyLndhcm4oXG4gICAgICAgIGBUaGUgXCJOT09QX0ZVTkNUSU9OXCIgZnJvbSB0aGUgY29uc3RhbnRzIG1vZHVsZSB3YXMgY2FsbGVkLiBgICtcbiAgICAgICAgICAgIGBUaGlzIGNhbiBpbmRpY2F0ZSBhIGJ1ZyBpbiBvbmUgb2YgdGhlIGNvbXBvbmVudHMuIFN1cHBsaWVkIGFyZ3M6YCxcbiAgICAgICAgYXJnc1xuICAgICk7XG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBOaWxhYmxlLCBOdWxsYWJsZSB9IGZyb20gJ3RzZGVmJztcblxuaW1wb3J0IHtcbiAgICBGaWxlQXJyYXksXG4gICAgRmlsZURhdGEsXG4gICAgRmlsZUZpbHRlcixcbiAgICBSZWFkb25seUZpbGVBcnJheSxcbn0gZnJvbSAnLi4vdHlwZXMvZmlsZXMudHlwZXMnO1xuaW1wb3J0IHsgRmlsZVNlbGVjdGlvbiwgU2VsZWN0aW9uTW9kaWZpZXJzIH0gZnJvbSAnLi4vdHlwZXMvc2VsZWN0aW9uLnR5cGVzJztcbmltcG9ydCB7IEZpbGVIZWxwZXIgfSBmcm9tICcuL2ZpbGUtaGVscGVyJztcblxuZXhwb3J0IGNvbnN0IHVzZVNlbGVjdGlvbiA9IChmaWxlczogRmlsZUFycmF5LCBkaXNhYmxlU2VsZWN0aW9uOiBib29sZWFuKSA9PiB7XG4gICAgLy8gQ3JlYXRlIFJlYWN0LW1hbmFnZWQgc3RhdGUgZm9yIGNvbXBvbmVudHMgdGhhdCBuZWVkIHRvIHJlLXJlbmRlciBvbiBzdGF0ZSBjaGFuZ2UuXG4gICAgY29uc3QgW3NlbGVjdGlvbiwgc2V0U2VsZWN0aW9uXSA9IHVzZVN0YXRlPEZpbGVTZWxlY3Rpb24+KHt9KTtcblxuICAgIC8vIFByZS1jb21wdXRlIHNlbGVjdGlvbiBzaXplIGZvciBjb21wb25lbnRzIHRoYXQgYXJlIG9ubHkgaW50ZXJlc3RlZCBpbiB0aGVcbiAgICAvLyBudW1iZXIgb2Ygc2VsZWN0ZWQgZmlsZXMgYnV0IG5vdCB0aGUgYWN0dWFsIGZpbGVzXG4gICAgY29uc3Qgc2VsZWN0aW9uU2l6ZSA9IHVzZU1lbW8oXG4gICAgICAgICgpID0+IFNlbGVjdGlvbkhlbHBlci5nZXRTZWxlY3Rpb25TaXplKGZpbGVzLCBzZWxlY3Rpb24pLFxuICAgICAgICBbZmlsZXMsIHNlbGVjdGlvbl1cbiAgICApO1xuXG4gICAgLy8gQ3JlYXRlIGNhbGxiYWNrcyBmb3IgdXBkYXRpbmcgc2VsZWN0aW9uLiBUaGVzZSB3aWxsIHVwZGF0ZSB0aGUgUmVhY3RcbiAgICAvLyBzdGF0ZSBgc2VsZWN0aW9uYCwgY2F1c2luZyByZS1yZW5kZXJzLiBUaGlzIGlzIGludGVudGlvbmFsLlxuICAgIGNvbnN0IHNlbGVjdGlvbk1vZGlmaWVycyA9IHVzZVNlbGVjdGlvbk1vZGlmaWVycyhkaXNhYmxlU2VsZWN0aW9uLCBzZXRTZWxlY3Rpb24pO1xuXG4gICAgLy8gQ3JlYXRlIHNlbGVjdGlvbiByZWYgZm9yIGZ1bmN0aW9ucyB0aGF0IG5lZWQgc2VsZWN0aW9uIGJ1dCBzaG91bGRuJ3QgcmUtcmVuZGVyXG4gICAgY29uc3Qgc2VsZWN0aW9uVXRpbFJlZiA9IHVzZVJlZjxTZWxlY3Rpb25VdGlsPihcbiAgICAgICAgbmV3IFVwZGF0ZWFibGVTZWxlY3Rpb25VdGlsKGZpbGVzLCBzZWxlY3Rpb24pXG4gICAgKTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAoc2VsZWN0aW9uVXRpbFJlZi5jdXJyZW50IGFzIFVwZGF0ZWFibGVTZWxlY3Rpb25VdGlsKS51cGRhdGUoZmlsZXMsIHNlbGVjdGlvbik7XG4gICAgfSwgW2ZpbGVzLCBzZWxlY3Rpb25dKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHNlbGVjdGlvbixcbiAgICAgICAgc2VsZWN0aW9uU2l6ZSxcbiAgICAgICAgc2VsZWN0aW9uVXRpbFJlZixcbiAgICAgICAgc2VsZWN0aW9uTW9kaWZpZXJzLFxuICAgIH07XG59O1xuXG5jb25zdCB1c2VTZWxlY3Rpb25Nb2RpZmllcnMgPSAoXG4gICAgZGlzYWJsZVNlbGVjdGlvbjogYm9vbGVhbixcbiAgICBzZXRTZWxlY3Rpb246IFJlYWN0LkRpc3BhdGNoPFJlYWN0LlNldFN0YXRlQWN0aW9uPEZpbGVTZWxlY3Rpb24+PlxuKTogU2VsZWN0aW9uTW9kaWZpZXJzID0+IHtcbiAgICBjb25zdCBzZWxlY3RGaWxlcyA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAoZmlsZUlkczogc3RyaW5nW10sIHJlc2V0OiBib29sZWFuID0gdHJ1ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGRpc2FibGVTZWxlY3Rpb24pIHJldHVybjtcblxuICAgICAgICAgICAgc2V0U2VsZWN0aW9uKChzZWxlY3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdTZWxlY3Rpb24gPSByZXNldCA/IHt9IDogeyAuLi5zZWxlY3Rpb24gfTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGZpbGVJZCBvZiBmaWxlSWRzKSBuZXdTZWxlY3Rpb25bZmlsZUlkXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld1NlbGVjdGlvbjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBbZGlzYWJsZVNlbGVjdGlvbiwgc2V0U2VsZWN0aW9uXVxuICAgICk7XG4gICAgY29uc3QgdG9nZ2xlU2VsZWN0aW9uID0gdXNlQ2FsbGJhY2soXG4gICAgICAgIChmaWxlSWQ6IHN0cmluZywgZXhjbHVzaXZlOiBib29sZWFuID0gZmFsc2UpID0+IHtcbiAgICAgICAgICAgIGlmIChkaXNhYmxlU2VsZWN0aW9uKSByZXR1cm47XG5cbiAgICAgICAgICAgIHNldFNlbGVjdGlvbigoc2VsZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3U2VsZWN0aW9uID0gZXhjbHVzaXZlID8ge30gOiB7IC4uLnNlbGVjdGlvbiB9O1xuICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rpb25bZmlsZUlkXSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbmV3U2VsZWN0aW9uW2ZpbGVJZF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3U2VsZWN0aW9uW2ZpbGVJZF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3U2VsZWN0aW9uO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIFtkaXNhYmxlU2VsZWN0aW9uLCBzZXRTZWxlY3Rpb25dXG4gICAgKTtcbiAgICBjb25zdCBjbGVhclNlbGVjdGlvbiA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgaWYgKGRpc2FibGVTZWxlY3Rpb24pIHJldHVybjtcblxuICAgICAgICBzZXRTZWxlY3Rpb24oKG9sZFNlbGVjdGlvbikgPT4ge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKG9sZFNlbGVjdGlvbikubGVuZ3RoID09PSAwKSByZXR1cm4gb2xkU2VsZWN0aW9uO1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9KTtcbiAgICB9LCBbZGlzYWJsZVNlbGVjdGlvbiwgc2V0U2VsZWN0aW9uXSk7XG5cbiAgICBjb25zdCBzZWxlY3Rpb25Nb2RpZmllcnMgPSB1c2VNZW1vKFxuICAgICAgICAoKSA9PiAoe1xuICAgICAgICAgICAgc2VsZWN0RmlsZXMsXG4gICAgICAgICAgICB0b2dnbGVTZWxlY3Rpb24sXG4gICAgICAgICAgICBjbGVhclNlbGVjdGlvbixcbiAgICAgICAgfSksXG4gICAgICAgIFtzZWxlY3RGaWxlcywgdG9nZ2xlU2VsZWN0aW9uLCBjbGVhclNlbGVjdGlvbl1cbiAgICApO1xuXG4gICAgcmV0dXJuIHNlbGVjdGlvbk1vZGlmaWVycztcbn07XG5cbi8qKlxuICogVGhpcyBoZWxwZXIgcmVsaWVzIG9uIHRoZSBgZmlsZXNgIGFuZCBgc2VsZWN0aW9uYCBvYmplY3RzIHRvIGJlIHBhc3NlZCBmcm9tIHRoZVxuICogb3V0c2lkZS4gSXQgaXMgc2FmZSB0byB1c2UgaW4gUmVhY3QgY29tcG9uZW50cyBiZWNhdXNlIGl0IGRvZXNuJ3QgaGF2ZSBhbnlcbiAqIGludGVybmFsIHN0YXRlLCBhbmQgYWxsIG1ldGhvZHMgYXJlIHN0YXRpYy5cbiAqL1xuZXhwb3J0IGNsYXNzIFNlbGVjdGlvbkhlbHBlciB7XG4gICAgcHVibGljIHN0YXRpYyBnZXRTZWxlY3RlZEZpbGVzKFxuICAgICAgICBmaWxlczogUmVhZG9ubHlGaWxlQXJyYXksXG4gICAgICAgIHNlbGVjdGlvbjogUmVhZG9ubHk8RmlsZVNlbGVjdGlvbj4sXG4gICAgICAgIC4uLmZpbHRlcnM6IE5pbGFibGU8RmlsZUZpbHRlcj5bXVxuICAgICk6IFJlYWRvbmx5QXJyYXk8UmVhZG9ubHk8RmlsZURhdGE+PiB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkRmlsZXMgPSBmaWxlcy5maWx0ZXIoXG4gICAgICAgICAgICAoZmlsZSkgPT4gRmlsZUhlbHBlci5pc1NlbGVjdGFibGUoZmlsZSkgJiYgc2VsZWN0aW9uW2ZpbGUuaWRdID09PSB0cnVlXG4gICAgICAgICkgYXMgRmlsZURhdGFbXTtcblxuICAgICAgICByZXR1cm4gZmlsdGVycy5yZWR1Y2UoXG4gICAgICAgICAgICAocHJldkZpbGVzLCBmaWx0ZXIpID0+IChmaWx0ZXIgPyBwcmV2RmlsZXMuZmlsdGVyKGZpbHRlcikgOiBwcmV2RmlsZXMpLFxuICAgICAgICAgICAgc2VsZWN0ZWRGaWxlc1xuICAgICAgICApO1xuICAgIH1cbiAgICBwdWJsaWMgc3RhdGljIGdldFNlbGVjdGlvblNpemUoXG4gICAgICAgIGZpbGVzOiBSZWFkb25seUZpbGVBcnJheSxcbiAgICAgICAgc2VsZWN0aW9uOiBSZWFkb25seTxGaWxlU2VsZWN0aW9uPixcbiAgICAgICAgLi4uZmlsdGVyczogTmlsYWJsZTxGaWxlRmlsdGVyPltdXG4gICAgKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIFNlbGVjdGlvbkhlbHBlci5nZXRTZWxlY3RlZEZpbGVzKGZpbGVzLCBzZWxlY3Rpb24sIC4uLmZpbHRlcnMpLmxlbmd0aDtcbiAgICB9XG4gICAgcHVibGljIHN0YXRpYyBpc1NlbGVjdGVkKFxuICAgICAgICBzZWxlY3Rpb246IFJlYWRvbmx5PEZpbGVTZWxlY3Rpb24+LFxuICAgICAgICBmaWxlOiBOdWxsYWJsZTxSZWFkb25seTxGaWxlRGF0YT4+XG4gICAgKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBGaWxlSGVscGVyLmlzU2VsZWN0YWJsZShmaWxlKSAmJiBzZWxlY3Rpb25bZmlsZS5pZF0gPT09IHRydWU7XG4gICAgfVxufVxuXG4vKipcbiAqIFRoaXMgYFNlbGVjdGlvblV0aWxgIGNvbnRhaW5zIGFuIGludGVybmFsIHJlZmVyZW5jZSB0byBgZmlsZXNgIGFuZCBgc2VsZWN0aW9uYFxuICogb2JqZWN0cy4gSXQgaXMgZXhwb3NlZCB2aWEgYSBSZWFjdCBjb250ZXh0LCBhbmQgaXMgbWVhbnQgdG8gYmUgdXNlZCBpbiBmdW5jdGlvbnNcbiAqIHRoYXQgbmVlZCB0byBhY2Nlc3Mgc2VsZWN0aW9uIFdJVEhPVVQgdHJpZ2dlcmluZyByZS1yZW5kZXJzLlxuICovXG5leHBvcnQgY2xhc3MgU2VsZWN0aW9uVXRpbCB7XG4gICAgcHJpdmF0ZSBmaWxlczogRmlsZUFycmF5O1xuICAgIHByaXZhdGUgc2VsZWN0aW9uOiBGaWxlU2VsZWN0aW9uO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGZpbGVzOiBGaWxlQXJyYXkgPSBbXSwgc2VsZWN0aW9uOiBGaWxlU2VsZWN0aW9uID0ge30pIHtcbiAgICAgICAgdGhpcy5wcm90ZWN0ZWRVcGRhdGUoZmlsZXMsIHNlbGVjdGlvbik7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHByb3RlY3RlZFVwZGF0ZShmaWxlczogRmlsZUFycmF5LCBzZWxlY3Rpb246IEZpbGVTZWxlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5maWxlcyA9IGZpbGVzO1xuICAgICAgICB0aGlzLnNlbGVjdGlvbiA9IHNlbGVjdGlvbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U2VsZWN0aW9uKCk6IFJlYWRvbmx5PEZpbGVTZWxlY3Rpb24+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0U2VsZWN0ZWRGaWxlcyhcbiAgICAgICAgLi4uZmlsdGVyczogTmlsYWJsZTxGaWxlRmlsdGVyPltdXG4gICAgKTogUmVhZG9ubHlBcnJheTxSZWFkb25seTxGaWxlRGF0YT4+IHtcbiAgICAgICAgcmV0dXJuIFNlbGVjdGlvbkhlbHBlci5nZXRTZWxlY3RlZEZpbGVzKHRoaXMuZmlsZXMsIHRoaXMuc2VsZWN0aW9uLCAuLi5maWx0ZXJzKTtcbiAgICB9XG4gICAgcHVibGljIGdldFNlbGVjdGlvblNpemUoLi4uZmlsdGVyczogTmlsYWJsZTxGaWxlRmlsdGVyPltdKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIFNlbGVjdGlvbkhlbHBlci5nZXRTZWxlY3Rpb25TaXplKHRoaXMuZmlsZXMsIHRoaXMuc2VsZWN0aW9uLCAuLi5maWx0ZXJzKTtcbiAgICB9XG4gICAgcHVibGljIGlzU2VsZWN0ZWQoZmlsZTogTnVsbGFibGU8RmlsZURhdGE+KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBTZWxlY3Rpb25IZWxwZXIuaXNTZWxlY3RlZCh0aGlzLnNlbGVjdGlvbiwgZmlsZSk7XG4gICAgfVxufVxuXG5jbGFzcyBVcGRhdGVhYmxlU2VsZWN0aW9uVXRpbCBleHRlbmRzIFNlbGVjdGlvblV0aWwge1xuICAgIHB1YmxpYyB1cGRhdGUoLi4uYXJnczogUGFyYW1ldGVyczxTZWxlY3Rpb25VdGlsWydwcm90ZWN0ZWRVcGRhdGUnXT4pIHtcbiAgICAgICAgdGhpcy5wcm90ZWN0ZWRVcGRhdGUoLi4uYXJncyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgYXRvbSwgc2VsZWN0b3IsIHNlbGVjdG9yRmFtaWx5IH0gZnJvbSAncmVjb2lsJztcbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAndHNkZWYnO1xuXG5pbXBvcnQgeyBGaWxlQXJyYXksIEZpbGVEYXRhIH0gZnJvbSAnLi4vdHlwZXMvZmlsZXMudHlwZXMnO1xuXG4vL1xuLy8gPT09PSBBdG9tc1xuZXhwb3J0IGNvbnN0IGZpbGVzU3RhdGUgPSBhdG9tPEZpbGVBcnJheT4oe1xuICAgIGtleTogJ2ZpbGVzU3RhdGUnLFxuICAgIGRlZmF1bHQ6IFtdLFxufSk7XG5cbmV4cG9ydCBjb25zdCBmb2xkZXJDaGFpblN0YXRlID0gYXRvbTxOdWxsYWJsZTxGaWxlQXJyYXk+Pih7XG4gICAga2V5OiAnZm9sZGVyQ2hhaW5TdGF0ZScsXG4gICAgZGVmYXVsdDogbnVsbCxcbn0pO1xuXG5leHBvcnQgY29uc3QgcGFyZW50Rm9sZGVyU3RhdGUgPSBhdG9tPE51bGxhYmxlPEZpbGVEYXRhPj4oe1xuICAgIGtleTogJ3BhcmVudEZvbGRlclN0YXRlJyxcbiAgICBkZWZhdWx0OiBudWxsLFxufSk7XG5cbi8vXG4vLyA9PT09IFNlbGVjdG9yc1xuZXhwb3J0IGNvbnN0IGZpbGVNYXBTdGF0ZSA9IHNlbGVjdG9yPHsgW2ZpbGVJZDogc3RyaW5nXTogRmlsZURhdGEgfT4oe1xuICAgIGtleTogJ2ZpbGVNYXBTdGF0ZScsXG4gICAgZ2V0OiAoeyBnZXQgfSkgPT4ge1xuICAgICAgICBjb25zdCBmaWxlcyA9IGdldChmaWxlc1N0YXRlKTtcblxuICAgICAgICBjb25zdCBmaWxlTWFwID0ge307XG5cbiAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XG4gICAgICAgICAgICBpZiAoIWZpbGUpIGNvbnRpbnVlO1xuICAgICAgICAgICAgZmlsZU1hcFtmaWxlLmlkXSA9IGZpbGU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmlsZU1hcDtcbiAgICB9LFxufSk7XG5cbmV4cG9ydCBjb25zdCBmaWxlRGF0YVN0YXRlID0gc2VsZWN0b3JGYW1pbHk8TnVsbGFibGU8RmlsZURhdGE+LCBOdWxsYWJsZTxzdHJpbmc+Pih7XG4gICAga2V5OiAnZmlsZURhdGFTdGF0ZScsXG4gICAgZ2V0OiAoZmlsZUlkKSA9PiAoeyBnZXQgfSkgPT4ge1xuICAgICAgICBpZiAoIWZpbGVJZCkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgY29uc3QgZmlsZU1hcCA9IGdldChmaWxlTWFwU3RhdGUpO1xuICAgICAgICBjb25zdCBmaWxlID0gZmlsZU1hcFtmaWxlSWRdO1xuICAgICAgICByZXR1cm4gZmlsZSA/PyBudWxsO1xuICAgIH0sXG59KTtcbiIsImltcG9ydCB7IGF0b20sIHNlbGVjdG9yLCBzZWxlY3RvckZhbWlseSB9IGZyb20gJ3JlY29pbCc7XG5pbXBvcnQgeyBOdWxsYWJsZSB9IGZyb20gJ3RzZGVmJztcblxuaW1wb3J0IHsgRmlsZVNlbGVjdGlvbiwgU2VsZWN0aW9uTW9kaWZpZXJzIH0gZnJvbSAnLi4vdHlwZXMvc2VsZWN0aW9uLnR5cGVzJztcbmltcG9ydCB7IE5PT1BfRlVOQ1RJT04gfSBmcm9tICcuLi91dGlsL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBTZWxlY3Rpb25IZWxwZXIgfSBmcm9tICcuLi91dGlsL3NlbGVjdGlvbic7XG5pbXBvcnQgeyBmaWxlc1N0YXRlIH0gZnJvbSAnLi9maWxlcy5yZWNvaWwnO1xuXG4vL1xuLy8gPT09PSBBdG9tc1xuZXhwb3J0IGNvbnN0IHNlbGVjdGlvblN0YXRlID0gYXRvbTxGaWxlU2VsZWN0aW9uPih7XG4gICAga2V5OiAnc2VsZWN0aW9uU3RhdGUnLFxuICAgIGRlZmF1bHQ6IHt9LFxufSk7XG5cbmV4cG9ydCBjb25zdCBzZWxlY3Rpb25Nb2RpZmllcnNTdGF0ZSA9IGF0b208U2VsZWN0aW9uTW9kaWZpZXJzPih7XG4gICAga2V5OiAnc2VsZWN0aW9uTW9kaWZpZXJzU3RhdGUnLFxuICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgc2VsZWN0RmlsZXM6IE5PT1BfRlVOQ1RJT04sXG4gICAgICAgIHRvZ2dsZVNlbGVjdGlvbjogTk9PUF9GVU5DVElPTixcbiAgICAgICAgY2xlYXJTZWxlY3Rpb246IE5PT1BfRlVOQ1RJT04sXG4gICAgfSxcbn0pO1xuXG4vL1xuLy8gPT09PSBTZWxlY3RvcnNcbmV4cG9ydCBjb25zdCBzZWxlY3RlZEZpbGVzU3RhdGUgPSBzZWxlY3Rvcih7XG4gICAga2V5OiAnc2VsZWN0ZWRGaWxlc1N0YXRlJyxcbiAgICBnZXQ6ICh7IGdldCB9KSA9PiB7XG4gICAgICAgIGNvbnN0IGZpbGVzID0gZ2V0KGZpbGVzU3RhdGUpO1xuICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSBnZXQoc2VsZWN0aW9uU3RhdGUpO1xuXG4gICAgICAgIHJldHVybiBTZWxlY3Rpb25IZWxwZXIuZ2V0U2VsZWN0ZWRGaWxlcyhmaWxlcywgc2VsZWN0aW9uKTtcbiAgICB9LFxufSk7XG5cbmV4cG9ydCBjb25zdCBzZWxlY3Rpb25TaXplU3RhdGUgPSBzZWxlY3Rvcih7XG4gICAga2V5OiAnc2VsZWN0aW9uU2l6ZVN0YXRlJyxcbiAgICBnZXQ6ICh7IGdldCB9KSA9PiB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IGdldChzZWxlY3Rpb25TdGF0ZSk7XG5cbiAgICAgICAgbGV0IHNlbGVjdGlvblNpemUgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGZpbGVJZCBpbiBzZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIGlmIChzZWxlY3Rpb24uaGFzT3duUHJvcGVydHkoZmlsZUlkKSkge1xuICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rpb25bZmlsZUlkXSA9PT0gdHJ1ZSkgc2VsZWN0aW9uU2l6ZSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNlbGVjdGlvblNpemU7XG4gICAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgZmlsZVNlbGVjdGVkU3RhdGUgPSBzZWxlY3RvckZhbWlseTxib29sZWFuLCBOdWxsYWJsZTxzdHJpbmc+Pih7XG4gICAga2V5OiAnZmlsZVNlbGVjdGVkU3RhdGUnLFxuICAgIGdldDogKGZpbGVJZCkgPT4gKHsgZ2V0IH0pID0+IHtcbiAgICAgICAgLy8gV2UgZGVsaWJlcmF0ZWx5IGRvbid0IHVzZSBgRmlsZUhlbHBlci5pc1NlbGVjdGFibGVgIGhlcmUuIFdlIHdhbnRcbiAgICAgICAgLy8gdGhlIFVJIHRvIHJlcHJlc2VudCB0aGUgdHJ1ZSBzdGF0ZSBvZiBzZWxlY3Rpb24uIFRoaXMgd2lsbCBoZWxwIHVzZXJzXG4gICAgICAgIC8vIHNlZSB3aGF0IGV4YWN0bHkgdGhlIHNlbGVjdGlvbiBpcyBiZWZvcmUgcnVubmluZyBzb21lIGNvZGUuXG4gICAgICAgIHJldHVybiAhIWZpbGVJZCAmJiBnZXQoc2VsZWN0aW9uU3RhdGUpW2ZpbGVJZF0gPT09IHRydWU7XG4gICAgfSxcbn0pO1xuIiwiaW1wb3J0IHsgYXRvbSwgc2VsZWN0b3JGYW1pbHkgfSBmcm9tICdyZWNvaWwnO1xuaW1wb3J0IHsgTnVsbGFibGUgfSBmcm9tICd0c2RlZic7XG5cbmltcG9ydCB7XG4gICAgRmlsZUFjdGlvbixcbiAgICBJbnRlcm5hbEZpbGVBY3Rpb25EaXNwYXRjaGVyLFxuICAgIEludGVybmFsRmlsZUFjdGlvblJlcXVlc3Rlcixcbn0gZnJvbSAnLi4vdHlwZXMvZmlsZS1hY3Rpb25zLnR5cGVzJztcbmltcG9ydCB7IEZpbGVEYXRhIH0gZnJvbSAnLi4vdHlwZXMvZmlsZXMudHlwZXMnO1xuaW1wb3J0IHsgTk9PUF9GVU5DVElPTiB9IGZyb20gJy4uL3V0aWwvY29uc3RhbnRzJztcbmltcG9ydCB7IHNlbGVjdGVkRmlsZXNTdGF0ZSB9IGZyb20gJy4vc2VsZWN0aW9uLnJlY29pbCc7XG5cbi8vXG4vLyA9PT09IEF0b21zXG5leHBvcnQgY29uc3QgZmlsZUFjdGlvbnNTdGF0ZSA9IGF0b208RmlsZUFjdGlvbltdPih7XG4gICAga2V5OiAnZmlsZUFjdGlvbnNTdGF0ZScsXG4gICAgZGVmYXVsdDogW10sXG59KTtcblxuZXhwb3J0IGNvbnN0IGZpbGVBY3Rpb25NYXBTdGF0ZSA9IGF0b208eyBbZmlsZUFjdGlvbklkOiBzdHJpbmddOiBGaWxlQWN0aW9uIH0+KHtcbiAgICBrZXk6ICdmaWxlQWN0aW9uTWFwU3RhdGUnLFxuICAgIGRlZmF1bHQ6IHt9LFxufSk7XG5cbmV4cG9ydCBjb25zdCBkaXNwYXRjaEZpbGVBY3Rpb25TdGF0ZSA9IGF0b208SW50ZXJuYWxGaWxlQWN0aW9uRGlzcGF0Y2hlcj4oe1xuICAgIGtleTogJ2Rpc3BhdGNoRmlsZUFjdGlvblN0YXRlJyxcbiAgICBkZWZhdWx0OiBOT09QX0ZVTkNUSU9OLFxufSk7XG5cbmV4cG9ydCBjb25zdCByZXF1ZXN0RmlsZUFjdGlvblN0YXRlID0gYXRvbTxJbnRlcm5hbEZpbGVBY3Rpb25SZXF1ZXN0ZXI+KHtcbiAgICBrZXk6ICdyZXF1ZXN0RmlsZUFjdGlvblN0YXRlJyxcbiAgICBkZWZhdWx0OiBOT09QX0ZVTkNUSU9OLFxufSk7XG5cbmV4cG9ydCBjb25zdCBkb3VibGVDbGlja0RlbGF5U3RhdGUgPSBhdG9tPG51bWJlcj4oe1xuICAgIGtleTogJ2RvdWJsZUNsaWNrRGVsYXlTdGF0ZScsXG4gICAgZGVmYXVsdDogMzAwLFxufSk7XG5cbi8vXG4vLyA9PT09IFNlbGVjdG9yc1xuZXhwb3J0IGNvbnN0IGZpbGVBY3Rpb25EYXRhU3RhdGUgPSBzZWxlY3RvckZhbWlseTxOdWxsYWJsZTxGaWxlQWN0aW9uPiwgc3RyaW5nPih7XG4gICAga2V5OiAnZmlsZUFjdGlvbkRhdGFTdGF0ZScsXG4gICAgZ2V0OiAoZmlsZUFjdGlvbklkKSA9PiAoeyBnZXQgfSkgPT4ge1xuICAgICAgICBpZiAoIWZpbGVBY3Rpb25JZCkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgY29uc3QgZmlsZUFjdGlvbk1hcCA9IGdldChmaWxlQWN0aW9uTWFwU3RhdGUpO1xuICAgICAgICBjb25zdCBmaWxlQWN0aW9uID0gZmlsZUFjdGlvbk1hcFtmaWxlQWN0aW9uSWRdO1xuICAgICAgICByZXR1cm4gZmlsZUFjdGlvbiA/PyBudWxsO1xuICAgIH0sXG59KTtcblxuLyoqXG4gKiBUaGlzIFJlY29pbCBzZWxlY3RvciBmYW1pbHkgcmV0dXJucyBhIHN1YnNldCBvZiB0aGUgZ2xvYmFsIGZpbGUgc2VsZWN0aW9uIHRoYXRcbiAqIHNhdGlzZmllcyBmaWx0ZXIgb2YgdGhlIHByb3ZpZGVkIGZpbGUgYWN0aW9uLlxuICovXG5leHBvcnQgY29uc3QgZmlsZUFjdGlvblNlbGVjdGVkRmlsZXNTdGF0ZSA9IHNlbGVjdG9yRmFtaWx5PHJlYWRvbmx5IEZpbGVEYXRhW10sIHN0cmluZz4oXG4gICAge1xuICAgICAgICBrZXk6ICdmaWxlQWN0aW9uU2VsZWN0ZWRGaWxlc1N0YXRlJyxcbiAgICAgICAgZ2V0OiAoZmlsZUFjdGlvbklkKSA9PiAoeyBnZXQgfSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFmaWxlQWN0aW9uSWQpIHJldHVybiBbXTtcblxuICAgICAgICAgICAgY29uc3QgZmlsZUFjdGlvbk1hcCA9IGdldChmaWxlQWN0aW9uTWFwU3RhdGUpO1xuICAgICAgICAgICAgY29uc3QgZmlsZUFjdGlvbiA9IGZpbGVBY3Rpb25NYXBbZmlsZUFjdGlvbklkXTtcbiAgICAgICAgICAgIGlmICghZmlsZUFjdGlvbikgcmV0dXJuIFtdO1xuXG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZEZpbGVzID0gZ2V0KHNlbGVjdGVkRmlsZXNTdGF0ZSk7XG4gICAgICAgICAgICBpZiAoZmlsZUFjdGlvbi5maWxlRmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGVkRmlsZXMuZmlsdGVyKGZpbGVBY3Rpb24uZmlsZUZpbHRlcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZWxlY3RlZEZpbGVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH1cbik7XG5cbmV4cG9ydCBjb25zdCBmaWxlQWN0aW9uU2VsZWN0ZWRGaWxlc0NvdW50U3RhdGUgPSBzZWxlY3RvckZhbWlseTxudW1iZXIsIHN0cmluZz4oe1xuICAgIGtleTogJ2ZpbGVBY3Rpb25TZWxlY3RlZEZpbGVzQ291bnRTdGF0ZScsXG4gICAgZ2V0OiAoZmlsZUFjdGlvbklkKSA9PiAoeyBnZXQgfSkgPT4ge1xuICAgICAgICBjb25zdCBhY3Rpb25TZWxlY3RlZEZpbGVzID0gZ2V0KGZpbGVBY3Rpb25TZWxlY3RlZEZpbGVzU3RhdGUoZmlsZUFjdGlvbklkKSk7XG4gICAgICAgIHJldHVybiBhY3Rpb25TZWxlY3RlZEZpbGVzLmxlbmd0aDtcbiAgICB9LFxufSk7XG4iLCIvKipcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMjBcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUmVjb2lsVmFsdWUgfSBmcm9tICdyZWNvaWwnO1xuaW1wb3J0IHsgTmlsYWJsZSwgTnVsbGFibGUgfSBmcm9tICd0c2RlZic7XG5cbmltcG9ydCB7IGRvdWJsZUNsaWNrRGVsYXlTdGF0ZSB9IGZyb20gJy4uLy4uL3JlY29pbC9maWxlLWFjdGlvbnMucmVjb2lsJztcbmltcG9ydCB7XG4gICAgS2V5Ym9hcmRDbGlja0V2ZW50LFxuICAgIEtleWJvYXJkQ2xpY2tFdmVudEhhbmRsZXIsXG4gICAgTW91c2VDbGlja0V2ZW50LFxuICAgIE1vdXNlQ2xpY2tFdmVudEhhbmRsZXIsXG59IGZyb20gJy4vQ2xpY2thYmxlV3JhcHBlcic7XG5cbmV4cG9ydCBjb25zdCB1c2VDbGlja0hhbmRsZXIgPSAoXG4gICAgb25TaW5nbGVDbGljazogTmlsYWJsZTxNb3VzZUNsaWNrRXZlbnRIYW5kbGVyPixcbiAgICBvbkRvdWJsZUNsaWNrOiBOaWxhYmxlPE1vdXNlQ2xpY2tFdmVudEhhbmRsZXI+XG4pID0+IHtcbiAgICBjb25zdCBkb3VibGVDbGlja0RlbGF5ID0gdXNlUmVjb2lsVmFsdWUoZG91YmxlQ2xpY2tEZWxheVN0YXRlKTtcblxuICAgIGNvbnN0IGNvdW50ZXIgPSB1c2VSZWYoe1xuICAgICAgICBjbGlja0NvdW50OiAwLFxuICAgICAgICBjbGlja1RpbWVvdXQ6IG51bGwgYXMgTnVsbGFibGU8bnVtYmVyPixcbiAgICB9KTtcblxuICAgIHJldHVybiB1c2VDYWxsYmFjayhcbiAgICAgICAgKGV2ZW50OiBSZWFjdC5Nb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtb3VzZUNsaWNrRXZlbnQ6IE1vdXNlQ2xpY2tFdmVudCA9IHtcbiAgICAgICAgICAgICAgICBhbHRLZXk6IGV2ZW50LmFsdEtleSxcbiAgICAgICAgICAgICAgICBjdHJsS2V5OiBldmVudC5jdHJsS2V5LFxuICAgICAgICAgICAgICAgIHNoaWZ0S2V5OiBldmVudC5zaGlmdEtleSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvdW50ZXIuY3VycmVudC5jbGlja0NvdW50Kys7XG4gICAgICAgICAgICBpZiAoY291bnRlci5jdXJyZW50LmNsaWNrQ291bnQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICBpZiAob25TaW5nbGVDbGljaykge1xuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBvblNpbmdsZUNsaWNrKG1vdXNlQ2xpY2tFdmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvdW50ZXIuY3VycmVudC5jbGlja0NvdW50ID0gMTtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgY291bnRlci5jdXJyZW50LmNsaWNrVGltZW91dCA9IHNldFRpbWVvdXQoXG4gICAgICAgICAgICAgICAgICAgICgpID0+IChjb3VudGVyLmN1cnJlbnQuY2xpY2tDb3VudCA9IDApLFxuICAgICAgICAgICAgICAgICAgICBkb3VibGVDbGlja0RlbGF5XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY291bnRlci5jdXJyZW50LmNsaWNrQ291bnQgPT09IDIpIHtcbiAgICAgICAgICAgICAgICBpZiAob25Eb3VibGVDbGljaykge1xuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBvbkRvdWJsZUNsaWNrKG1vdXNlQ2xpY2tFdmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY291bnRlci5jdXJyZW50LmNsaWNrVGltZW91dCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGNvdW50ZXIuY3VycmVudC5jbGlja1RpbWVvdXQpO1xuICAgICAgICAgICAgICAgICAgICBjb3VudGVyLmN1cnJlbnQuY2xpY2tUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgY291bnRlci5jdXJyZW50LmNsaWNrQ291bnQgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgW2RvdWJsZUNsaWNrRGVsYXksIG9uU2luZ2xlQ2xpY2ssIG9uRG91YmxlQ2xpY2ssIGNvdW50ZXJdXG4gICAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VLZXlEb3duSGFuZGxlciA9IChvbktleWJvYXJkQ2xpY2s/OiBLZXlib2FyZENsaWNrRXZlbnRIYW5kbGVyKSA9PiB7XG4gICAgcmV0dXJuIHVzZUNhbGxiYWNrKFxuICAgICAgICAoZXZlbnQ6IFJlYWN0LktleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmICghb25LZXlib2FyZENsaWNrKSByZXR1cm47XG5cbiAgICAgICAgICAgIGNvbnN0IGtleWJvYXJkQ2xpY2tFdmVudDogS2V5Ym9hcmRDbGlja0V2ZW50ID0ge1xuICAgICAgICAgICAgICAgIGVudGVyS2V5OiBldmVudC5uYXRpdmVFdmVudC5jb2RlID09PSAnRW50ZXInLFxuICAgICAgICAgICAgICAgIHNwYWNlS2V5OiBldmVudC5uYXRpdmVFdmVudC5jb2RlID09PSAnU3BhY2UnLFxuICAgICAgICAgICAgICAgIGFsdEtleTogZXZlbnQuYWx0S2V5LFxuICAgICAgICAgICAgICAgIGN0cmxLZXk6IGV2ZW50LmN0cmxLZXksXG4gICAgICAgICAgICAgICAgc2hpZnRLZXk6IGV2ZW50LnNoaWZ0S2V5LFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKGtleWJvYXJkQ2xpY2tFdmVudC5zcGFjZUtleSB8fCBrZXlib2FyZENsaWNrRXZlbnQuZW50ZXJLZXkpIHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIG9uS2V5Ym9hcmRDbGljayhrZXlib2FyZENsaWNrRXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBbb25LZXlib2FyZENsaWNrXVxuICAgICk7XG59O1xuIiwiLyoqXG4gKiBAYXV0aG9yIFRpbXVyIEt1emhhZ2FsaXlldiA8dGltLmt1emhAZ21haWwuY29tPlxuICogQGNvcHlyaWdodCAyMDIwXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQW55T2JqZWN0V2l0aFN0cmluZ0tleXMgfSBmcm9tICd0c2RlZic7XG5cbmltcG9ydCB7IHVzZUNsaWNrSGFuZGxlciwgdXNlS2V5RG93bkhhbmRsZXIgfSBmcm9tICcuL0NsaWNrYWJsZVdyYXBwZXItaG9va3MnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1vdXNlQ2xpY2tFdmVudCB7XG4gICAgYWx0S2V5OiBib29sZWFuO1xuICAgIGN0cmxLZXk6IGJvb2xlYW47XG4gICAgc2hpZnRLZXk6IGJvb2xlYW47XG59XG5leHBvcnQgdHlwZSBNb3VzZUNsaWNrRXZlbnRIYW5kbGVyID0gKGV2ZW50OiBNb3VzZUNsaWNrRXZlbnQpID0+IHZvaWQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2V5Ym9hcmRDbGlja0V2ZW50IHtcbiAgICBlbnRlcktleTogYm9vbGVhbjtcbiAgICBzcGFjZUtleTogYm9vbGVhbjtcbiAgICBhbHRLZXk6IGJvb2xlYW47XG4gICAgY3RybEtleTogYm9vbGVhbjtcbiAgICBzaGlmdEtleTogYm9vbGVhbjtcbn1cbmV4cG9ydCB0eXBlIEtleWJvYXJkQ2xpY2tFdmVudEhhbmRsZXIgPSAoZXZlbnQ6IEtleWJvYXJkQ2xpY2tFdmVudCkgPT4gdm9pZDtcblxuZXhwb3J0IGludGVyZmFjZSBDbGlja2FibGVXcmFwcGVyUHJvcHMge1xuICAgIHdyYXBwZXJUYWc6IGFueTtcbiAgICBwYXNzdGhyb3VnaFByb3BzPzogYW55O1xuXG4gICAgb25TaW5nbGVDbGljaz86IE1vdXNlQ2xpY2tFdmVudEhhbmRsZXI7XG4gICAgb25Eb3VibGVDbGljaz86IE1vdXNlQ2xpY2tFdmVudEhhbmRsZXI7XG4gICAgb25LZXlib2FyZENsaWNrPzogS2V5Ym9hcmRDbGlja0V2ZW50SGFuZGxlcjtcbn1cblxuZXhwb3J0IGNvbnN0IENsaWNrYWJsZVdyYXBwZXI6IFJlYWN0LkZDPENsaWNrYWJsZVdyYXBwZXJQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICB3cmFwcGVyVGFnOiBXcmFwcGVyVGFnLFxuICAgICAgICBwYXNzdGhyb3VnaFByb3BzLFxuICAgICAgICBvblNpbmdsZUNsaWNrLFxuICAgICAgICBvbkRvdWJsZUNsaWNrLFxuICAgICAgICBvbktleWJvYXJkQ2xpY2ssXG4gICAgfSA9IHByb3BzO1xuXG4gICAgY29uc3QgaGFuZGxlQ2xpY2sgPSB1c2VDbGlja0hhbmRsZXIob25TaW5nbGVDbGljaywgb25Eb3VibGVDbGljayk7XG4gICAgY29uc3QgaGFuZGxlS2V5RG93biA9IHVzZUtleURvd25IYW5kbGVyKG9uS2V5Ym9hcmRDbGljayk7XG5cbiAgICBjb25zdCBjb21wUHJvcHM6IEFueU9iamVjdFdpdGhTdHJpbmdLZXlzID0ge307XG4gICAgaWYgKG9uU2luZ2xlQ2xpY2sgfHwgb25Eb3VibGVDbGljayB8fCBvbktleWJvYXJkQ2xpY2spIHtcbiAgICAgICAgY29tcFByb3BzLm9uQ2xpY2sgPSBoYW5kbGVDbGljaztcbiAgICAgICAgY29tcFByb3BzLm9uS2V5RG93biA9IGhhbmRsZUtleURvd247XG4gICAgICAgIGNvbXBQcm9wcy50YWJJbmRleCA9IDA7XG4gICAgfVxuXG4gICAgY29uc3QgbWVyZ2VkUHJvcHMgPSB7IC4uLmNvbXBQcm9wcywgLi4ucGFzc3Rocm91Z2hQcm9wcyB9O1xuICAgIHJldHVybiA8V3JhcHBlclRhZyB7Li4ubWVyZ2VkUHJvcHN9PntjaGlsZHJlbn08L1dyYXBwZXJUYWc+O1xufTtcbiIsIi8qKlxuICogQGF1dGhvciBUaW11ciBLdXpoYWdhbGl5ZXYgPHRpbS5rdXpoQGdtYWlsLmNvbT5cbiAqIEBjb3B5cmlnaHQgMjAxOVxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IEV4YWN0VHJpZSBmcm9tICdleGFjdC10cmllJztcbmltcG9ydCBtZW1vaXplIGZyb20gJ21lbW9pemVlJztcbmltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBOdWxsYWJsZSB9IGZyb20gJ3RzZGVmJztcblxuaW1wb3J0IHsgRmlsZURhdGEgfSBmcm9tICcuLi90eXBlcy9maWxlcy50eXBlcyc7XG5pbXBvcnQgeyBDaG9ua3lJY29uTmFtZSwgRmlsZUljb25EYXRhIH0gZnJvbSAnLi4vdHlwZXMvaWNvbnMudHlwZXMnO1xuXG5jb25zdCBnZXRJY29uVHJpZSA9IG1lbW9pemUoKCkgPT4ge1xuICAgIGxldCBjb2xvdXJJbmRleCA9IDA7XG4gICAgY29uc3Qgc3RlcCA9IDU7XG5cbiAgICBjb25zdCBJY29uc1RvRXh0ZW5zaW9ucyA9IFtcbiAgICAgICAgLy8gR2VuZXJpYyBmaWxlIHR5cGVzXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS5saWNlbnNlLCBbJ2xpY2Vuc2UnXV0sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS5jb25maWcsIFsnc2ZrJywgJ2luaScsICd5bWwnLCAndG9tbCcsICdpbWwnXV0sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS5tb2RlbCwgWyczZHMnLCAnb2JqJywgJ3BseScsICdmYngnXV0sXG4gICAgICAgIFtcbiAgICAgICAgICAgIENob25reUljb25OYW1lLmRhdGFiYXNlLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICdjc3YnLFxuICAgICAgICAgICAgICAgICdqc29uJyxcbiAgICAgICAgICAgICAgICAnc3FsJyxcbiAgICAgICAgICAgICAgICAnc3FsaXRlJyxcbiAgICAgICAgICAgICAgICAnc3FsaXRlMycsXG4gICAgICAgICAgICAgICAgJ25weScsXG4gICAgICAgICAgICAgICAgJ25weicsXG4gICAgICAgICAgICAgICAgJ3JlYycsXG4gICAgICAgICAgICAgICAgJ2lkeCcsXG4gICAgICAgICAgICAgICAgJ2hkZjUnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLnRleHQsIFsndHh0JywgJ21kJ11dLFxuICAgICAgICBbQ2hvbmt5SWNvbk5hbWUuYXJjaGl2ZSwgWyd6aXAnLCAncmFyJywgJ3RhcicsICd0YXIuZ3onXV0sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS5pbWFnZSwgSW1hZ2VFeHRlbnNpb25zXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLnZpZGVvLCBWaWRlb0V4dGVuc2lvbnNdLFxuICAgICAgICBbXG4gICAgICAgICAgICBDaG9ua3lJY29uTmFtZS5jb2RlLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICdodG1sJyxcbiAgICAgICAgICAgICAgICAncGhwJyxcbiAgICAgICAgICAgICAgICAnY3NzJyxcbiAgICAgICAgICAgICAgICAnc2FzcycsXG4gICAgICAgICAgICAgICAgJ3Njc3MnLFxuICAgICAgICAgICAgICAgICdsZXNzJyxcbiAgICAgICAgICAgICAgICAnY3BwJyxcbiAgICAgICAgICAgICAgICAnaCcsXG4gICAgICAgICAgICAgICAgJ2hwcCcsXG4gICAgICAgICAgICAgICAgJ2MnLFxuICAgICAgICAgICAgICAgICd4bWwnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLmluZm8sIFsnYmliJywgJ3JlYWRtZScsICduZm8nXV0sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS5rZXksIFsncGVtJywgJ3B1YiddXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLmxvY2ssIFsnbG9jaycsICdsb2NrLmpzb24nLCAnc2hyaW5rd3JhcC5qc29uJ11dLFxuICAgICAgICBbQ2hvbmt5SWNvbk5hbWUubXVzaWMsIEF1ZGlvRXh0ZW5zaW9uc10sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS50ZXJtaW5hbCwgWydydW4nLCAnc2gnXV0sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS50cmFzaCwgWycuVHJhc2hlcyddXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLnVzZXJzLCBbJ2F1dGhvcnMnLCAnY29udHJpYnV0b3JzJ11dLFxuXG4gICAgICAgIC8vIE9TIGZpbGUgdHlwZXNcbiAgICAgICAgW0Nob25reUljb25OYW1lLmxpbnV4LCBbJ0FwcEltYWdlJ11dLFxuICAgICAgICBbQ2hvbmt5SWNvbk5hbWUudWJ1bnR1LCBbJ2RlYiddXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLndpbmRvd3MsIFsnZXhlJ11dLFxuXG4gICAgICAgIC8vIFByb2dyYW1taW5nIGxhbmd1YWdlIGZpbGUgdHlwZXNcbiAgICAgICAgW0Nob25reUljb25OYW1lLnJ1c3QsIFsncnMnLCAncmxpYiddXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLnB5dGhvbiwgWydweScsICdpcHluYiddXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLm5vZGVqcywgWydqcycsICdqc3gnLCAndHMnLCAndHN4JywgJ2QudHMnXV0sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS5waHAsIFsncGhwJ11dLFxuXG4gICAgICAgIC8vIERldmVsb3BtZW50IHRvb2xzIGZpbGUgdHlwZXNcbiAgICAgICAgW0Nob25reUljb25OYW1lLmdpdCwgWycuZ2l0aWdub3JlJ11dLFxuXG4gICAgICAgIC8vIEJyYW5kcyBmaWxlIHR5cGVzXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS5hZG9iZSwgWydwc2QnXV0sXG5cbiAgICAgICAgLy8gT3RoZXIgcHJvZ3JhbSBmaWxlIHR5cGVzXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS5wZGYsIFsncGRmJ11dLFxuICAgICAgICBbQ2hvbmt5SWNvbk5hbWUuZXhjZWwsIFsneGxzJywgJ3hsc3gnXV0sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS53b3JkLCBbJ2RvYycsICdkb2N4JywgJ29kdCddXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLmZsYXNoLCBbJ3N3ZiddXSxcbiAgICBdIGFzIGNvbnN0O1xuXG4gICAgY29uc3QgZXhhY3RUcmllID0gbmV3IEV4YWN0VHJpZSh7IGlnbm9yZUNhc2U6IHRydWUgfSk7XG4gICAgZm9yIChjb25zdCBwYWlyIG9mIEljb25zVG9FeHRlbnNpb25zKSB7XG4gICAgICAgIGNvbnN0IFtpY29uLCBleHRlbnNpb25zXSA9IHBhaXI7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBleHRlbnNpb25zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb2xvdXJJbmRleCArPSBzdGVwO1xuICAgICAgICAgICAgY29uc3QgY29sb3JDb2RlID0gKGNvbG91ckluZGV4ICUgKENvbG9yc0xpZ2h0Lmxlbmd0aCAtIDEpKSArIDE7XG4gICAgICAgICAgICBjb25zdCBpY29uRGF0YTogRmlsZUljb25EYXRhID0ge1xuICAgICAgICAgICAgICAgIGljb24sXG4gICAgICAgICAgICAgICAgY29sb3JDb2RlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGV4YWN0VHJpZS5wdXQoZXh0ZW5zaW9uc1tpXSwgaWNvbkRhdGEsIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4YWN0VHJpZTtcbn0pO1xuXG5leHBvcnQgY29uc3QgdXNlSWNvbkRhdGEgPSAoZmlsZTogTnVsbGFibGU8RmlsZURhdGE+KTogRmlsZUljb25EYXRhID0+IHtcbiAgICByZXR1cm4gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIGlmICghZmlsZSkgcmV0dXJuIHsgaWNvbjogQ2hvbmt5SWNvbk5hbWUubG9hZGluZywgY29sb3JDb2RlOiAwIH07XG4gICAgICAgIGlmIChmaWxlLmlzRGlyID09PSB0cnVlKSByZXR1cm4geyBpY29uOiBDaG9ua3lJY29uTmFtZS5mb2xkZXIsIGNvbG9yQ29kZTogMCB9O1xuXG4gICAgICAgIGNvbnN0IGljb25UcmllID0gZ2V0SWNvblRyaWUoKTtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBpY29uVHJpZS5nZXRXaXRoQ2hlY2twb2ludHMoZmlsZS5uYW1lLCAnLicsIHRydWUpO1xuICAgICAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaCA6IHsgaWNvbjogQ2hvbmt5SWNvbk5hbWUuZmlsZSwgY29sb3JDb2RlOiAzMiB9O1xuICAgIH0sIFtmaWxlXSk7XG59O1xuXG5leHBvcnQgY29uc3QgVmlkZW9FeHRlbnNpb25zOiBzdHJpbmdbXSA9IFtcbiAgICAnM2cyJyxcbiAgICAnM2dwJyxcbiAgICAnM2dwcCcsXG4gICAgJ2FzZicsXG4gICAgJ2FzeCcsXG4gICAgJ2F2aScsXG4gICAgJ2R2YicsXG4gICAgJ2Y0dicsXG4gICAgJ2ZsaScsXG4gICAgJ2ZsdicsXG4gICAgJ2Z2dCcsXG4gICAgJ2gyNjEnLFxuICAgICdoMjYzJyxcbiAgICAnaDI2NCcsXG4gICAgJ2pwZ20nLFxuICAgICdqcGd2JyxcbiAgICAnanBtJyxcbiAgICAnbTF2JyxcbiAgICAnbTJ2JyxcbiAgICAnbTR1JyxcbiAgICAnbTR2JyxcbiAgICAnbWoyJyxcbiAgICAnbWpwMicsXG4gICAgJ21rM2QnLFxuICAgICdta3MnLFxuICAgICdta3YnLFxuICAgICdtbmcnLFxuICAgICdtb3YnLFxuICAgICdtb3ZpZScsXG4gICAgJ21wNCcsXG4gICAgJ21wNHYnLFxuICAgICdtcGUnLFxuICAgICdtcGVnJyxcbiAgICAnbXBnJyxcbiAgICAnbXBnNCcsXG4gICAgJ214dScsXG4gICAgJ29ndicsXG4gICAgJ3B5dicsXG4gICAgJ3F0JyxcbiAgICAnc212JyxcbiAgICAndHMnLFxuICAgICd1dmgnLFxuICAgICd1dm0nLFxuICAgICd1dnAnLFxuICAgICd1dnMnLFxuICAgICd1dnUnLFxuICAgICd1dnYnLFxuICAgICd1dnZoJyxcbiAgICAndXZ2bScsXG4gICAgJ3V2dnAnLFxuICAgICd1dnZzJyxcbiAgICAndXZ2dScsXG4gICAgJ3V2dnYnLFxuICAgICd2aXYnLFxuICAgICd2b2InLFxuICAgICd3ZWJtJyxcbiAgICAnd20nLFxuICAgICd3bXYnLFxuICAgICd3bXgnLFxuICAgICd3dngnLFxuXTtcbmV4cG9ydCBjb25zdCBJbWFnZUV4dGVuc2lvbnM6IHN0cmluZ1tdID0gW1xuICAgICczZHMnLFxuICAgICdhcG5nJyxcbiAgICAnYXp2JyxcbiAgICAnYm1wJyxcbiAgICAnYm1wJyxcbiAgICAnYnRpZicsXG4gICAgJ2NnbScsXG4gICAgJ2NteCcsXG4gICAgJ2RqdicsXG4gICAgJ2RqdnUnLFxuICAgICdkcmxlJyxcbiAgICAnZHdnJyxcbiAgICAnZHhmJyxcbiAgICAnZW1mJyxcbiAgICAnZXhyJyxcbiAgICAnZmJzJyxcbiAgICAnZmgnLFxuICAgICdmaDQnLFxuICAgICdmaDUnLFxuICAgICdmaDcnLFxuICAgICdmaGMnLFxuICAgICdmaXRzJyxcbiAgICAnZnB4JyxcbiAgICAnZnN0JyxcbiAgICAnZzMnLFxuICAgICdnaWYnLFxuICAgICdoZWljJyxcbiAgICAnaGVpY3MnLFxuICAgICdoZWlmJyxcbiAgICAnaGVpZnMnLFxuICAgICdpY28nLFxuICAgICdpY28nLFxuICAgICdpZWYnLFxuICAgICdqbHMnLFxuICAgICdqbmcnLFxuICAgICdqcDInLFxuICAgICdqcGUnLFxuICAgICdqcGVnJyxcbiAgICAnanBmJyxcbiAgICAnanBnJyxcbiAgICAnanBnMicsXG4gICAgJ2pwbScsXG4gICAgJ2pweCcsXG4gICAgJ2p4cicsXG4gICAgJ2t0eCcsXG4gICAgJ21kaScsXG4gICAgJ21tcicsXG4gICAgJ25weCcsXG4gICAgJ3BibScsXG4gICAgJ3BjdCcsXG4gICAgJ3BjeCcsXG4gICAgJ3BjeCcsXG4gICAgJ3BnbScsXG4gICAgJ3BpYycsXG4gICAgJ3BuZycsXG4gICAgJ3BubScsXG4gICAgJ3BwbScsXG4gICAgJ3BzZCcsXG4gICAgJ3B0aScsXG4gICAgJ3JhcycsXG4gICAgJ3JnYicsXG4gICAgJ3JsYycsXG4gICAgJ3NnaScsXG4gICAgJ3NpZCcsXG4gICAgJ3N1YicsXG4gICAgJ3N2ZycsXG4gICAgJ3N2Z3onLFxuICAgICd0MzgnLFxuICAgICd0YXAnLFxuICAgICd0ZngnLFxuICAgICd0Z2EnLFxuICAgICd0aWYnLFxuICAgICd0aWZmJyxcbiAgICAndXZnJyxcbiAgICAndXZpJyxcbiAgICAndXZ2ZycsXG4gICAgJ3V2dmknLFxuICAgICd2dGYnLFxuICAgICd3Ym1wJyxcbiAgICAnd2RwJyxcbiAgICAnd2VicCcsXG4gICAgJ3dtZicsXG4gICAgJ3hibScsXG4gICAgJ3hpZicsXG4gICAgJ3hwbScsXG4gICAgJ3h3ZCcsXG5dO1xuZXhwb3J0IGNvbnN0IEF1ZGlvRXh0ZW5zaW9uczogc3RyaW5nW10gPSBbXG4gICAgJzNncHAnLFxuICAgICdhYWMnLFxuICAgICdhZHAnLFxuICAgICdhaWYnLFxuICAgICdhaWZjJyxcbiAgICAnYWlmZicsXG4gICAgJ2F1JyxcbiAgICAnY2FmJyxcbiAgICAnZHJhJyxcbiAgICAnZHRzJyxcbiAgICAnZHRzaGQnLFxuICAgICdlY2VscDQ4MDAnLFxuICAgICdlY2VscDc0NzAnLFxuICAgICdlY2VscDk2MDAnLFxuICAgICdlb2wnLFxuICAgICdmbGFjJyxcbiAgICAna2FyJyxcbiAgICAnbHZwJyxcbiAgICAnbTJhJyxcbiAgICAnbTNhJyxcbiAgICAnbTN1JyxcbiAgICAnbTRhJyxcbiAgICAnbTRhJyxcbiAgICAnbWlkJyxcbiAgICAnbWlkaScsXG4gICAgJ21rYScsXG4gICAgJ21wMicsXG4gICAgJ21wMmEnLFxuICAgICdtcDMnLFxuICAgICdtcDMnLFxuICAgICdtcDRhJyxcbiAgICAnbXBnYScsXG4gICAgJ29nYScsXG4gICAgJ29nZycsXG4gICAgJ3B5YScsXG4gICAgJ3JhJyxcbiAgICAncmEnLFxuICAgICdyYW0nLFxuICAgICdyaXAnLFxuICAgICdybWknLFxuICAgICdybXAnLFxuICAgICdzM20nLFxuICAgICdzaWwnLFxuICAgICdzbmQnLFxuICAgICdzcHgnLFxuICAgICd1dmEnLFxuICAgICd1dnZhJyxcbiAgICAnd2F2JyxcbiAgICAnd2F2JyxcbiAgICAnd2F2JyxcbiAgICAnd2F4JyxcbiAgICAnd2ViYScsXG4gICAgJ3dtYScsXG4gICAgJ3htJyxcbl07XG5leHBvcnQgY29uc3QgQ29sb3JzTGlnaHQ6IHN0cmluZ1tdID0gW1xuICAgICcjYmJiYmJiJyxcbiAgICAnI2Q2NWM1YycsXG4gICAgJyNkNjY2NWMnLFxuICAgICcjZDY3MDVjJyxcbiAgICAnI2Q2N2E1YycsXG4gICAgJyNkNjg1NWMnLFxuICAgICcjZDY4ZjVjJyxcbiAgICAnI2Q2OTk1YycsXG4gICAgJyNkNmEzNWMnLFxuICAgICcjZDZhZDVjJyxcbiAgICAnI2Q2Yjg1YycsXG4gICAgJyNkNmMyNWMnLFxuICAgICcjZDZjYzVjJyxcbiAgICAnI2Q2ZDY1YycsXG4gICAgJyNjY2Q2NWMnLFxuICAgICcjYzJkNjVjJyxcbiAgICAnI2I4ZDY1YycsXG4gICAgJyNhZGQ2NWMnLFxuICAgICcjYTNkNjVjJyxcbiAgICAnIzk5ZDY1YycsXG4gICAgJyM4ZmQ2NWMnLFxuICAgICcjODVkNjVjJyxcbiAgICAnIzdhZDY1YycsXG4gICAgJyM3MGQ2NWMnLFxuICAgICcjNjZkNjVjJyxcbiAgICAnIzVjZDY1YycsXG4gICAgJyM1Y2Q2NjYnLFxuICAgICcjNWNkNjcwJyxcbiAgICAnIzVjZDY3YScsXG4gICAgJyM1Y2Q2ODUnLFxuICAgICcjNWNkNjhmJyxcbiAgICAnIzVjZDY5OScsXG4gICAgJyM1Y2Q2YTMnLFxuICAgICcjNWNkNmFkJyxcbiAgICAnIzVjZDZiOCcsXG4gICAgJyM1Y2Q2YzInLFxuICAgICcjNWNkNmNjJyxcbiAgICAnIzVjZDZkNicsXG4gICAgJyM1Y2NjZDYnLFxuICAgICcjNWNjMmQ2JyxcbiAgICAnIzVjYjhkNicsXG4gICAgJyM1Y2FkZDYnLFxuICAgICcjNWNhM2Q2JyxcbiAgICAnIzVjOTlkNicsXG4gICAgJyM1YzhmZDYnLFxuICAgICcjNWM4NWQ2JyxcbiAgICAnIzVjN2FkNicsXG4gICAgJyM1YzcwZDYnLFxuICAgICcjNWM2NmQ2JyxcbiAgICAnIzVjNWNkNicsXG4gICAgJyM2NjVjZDYnLFxuICAgICcjNzA1Y2Q2JyxcbiAgICAnIzdhNWNkNicsXG4gICAgJyM4NTVjZDYnLFxuICAgICcjOGY1Y2Q2JyxcbiAgICAnIzk5NWNkNicsXG4gICAgJyNhMzVjZDYnLFxuICAgICcjYWQ1Y2Q2JyxcbiAgICAnI2I4NWNkNicsXG4gICAgJyNjMjVjZDYnLFxuICAgICcjY2M1Y2Q2JyxcbiAgICAnI2Q2NWNkNicsXG4gICAgJyNkNjVjY2MnLFxuICAgICcjZDY1Y2MyJyxcbiAgICAnI2Q2NWNiOCcsXG4gICAgJyNkNjVjYWQnLFxuICAgICcjZDY1Y2EzJyxcbiAgICAnI2Q2NWM5OScsXG4gICAgJyNkNjVjOGYnLFxuICAgICcjZDY1Yzg1JyxcbiAgICAnI2Q2NWM3YScsXG4gICAgJyNkNjVjNzAnLFxuICAgICcjZDY1YzY2Jyxcbl07XG5leHBvcnQgY29uc3QgQ29sb3JzRGFyazogc3RyaW5nW10gPSBbXG4gICAgJyM3NzcnLFxuICAgICcjOGYzZDNkJyxcbiAgICAnIzhmNDQzZCcsXG4gICAgJyM4ZjRiM2QnLFxuICAgICcjOGY1MjNkJyxcbiAgICAnIzhmNTgzZCcsXG4gICAgJyM4ZjVmM2QnLFxuICAgICcjOGY2NjNkJyxcbiAgICAnIzhmNmQzZCcsXG4gICAgJyM4Zjc0M2QnLFxuICAgICcjOGY3YTNkJyxcbiAgICAnIzhmODEzZCcsXG4gICAgJyM4Zjg4M2QnLFxuICAgICcjOGY4ZjNkJyxcbiAgICAnIzg4OGYzZCcsXG4gICAgJyM4MThmM2QnLFxuICAgICcjN2E4ZjNkJyxcbiAgICAnIzc0OGYzZCcsXG4gICAgJyM2ZDhmM2QnLFxuICAgICcjNjY4ZjNkJyxcbiAgICAnIzVmOGYzZCcsXG4gICAgJyM1ODhmM2QnLFxuICAgICcjNTI4ZjNkJyxcbiAgICAnIzRiOGYzZCcsXG4gICAgJyM0NDhmM2QnLFxuICAgICcjM2Q4ZjNkJyxcbiAgICAnIzNkOGY0NCcsXG4gICAgJyMzZDhmNGInLFxuICAgICcjM2Q4ZjUyJyxcbiAgICAnIzNkOGY1OCcsXG4gICAgJyMzZDhmNWYnLFxuICAgICcjM2Q4ZjY2JyxcbiAgICAnIzNkOGY2ZCcsXG4gICAgJyMzZDhmNzQnLFxuICAgICcjM2Q4ZjdhJyxcbiAgICAnIzNkOGY4MScsXG4gICAgJyMzZDhmODgnLFxuICAgICcjM2Q4ZjhmJyxcbiAgICAnIzNkODg4ZicsXG4gICAgJyMzZDgxOGYnLFxuICAgICcjM2Q3YThmJyxcbiAgICAnIzNkNzQ4ZicsXG4gICAgJyMzZDZkOGYnLFxuICAgICcjM2Q2NjhmJyxcbiAgICAnIzNkNWY4ZicsXG4gICAgJyMzZDU4OGYnLFxuICAgICcjM2Q1MjhmJyxcbiAgICAnIzNkNGI4ZicsXG4gICAgJyMzZDQ0OGYnLFxuICAgICcjM2QzZDhmJyxcbiAgICAnIzQ0M2Q4ZicsXG4gICAgJyM0YjNkOGYnLFxuICAgICcjNTIzZDhmJyxcbiAgICAnIzU4M2Q4ZicsXG4gICAgJyM1ZjNkOGYnLFxuICAgICcjNjYzZDhmJyxcbiAgICAnIzZkM2Q4ZicsXG4gICAgJyM3NDNkOGYnLFxuICAgICcjN2EzZDhmJyxcbiAgICAnIzgxM2Q4ZicsXG4gICAgJyM4ODNkOGYnLFxuICAgICcjOGYzZDhmJyxcbiAgICAnIzhmM2Q4OCcsXG4gICAgJyM4ZjNkODEnLFxuICAgICcjOGYzZDdhJyxcbiAgICAnIzhmM2Q3NCcsXG4gICAgJyM4ZjNkNmQnLFxuICAgICcjOGYzZDY2JyxcbiAgICAnIzhmM2Q1ZicsXG4gICAgJyM4ZjNkNTgnLFxuICAgICcjOGYzZDUyJyxcbiAgICAnIzhmM2Q0YicsXG4gICAgJyM4ZjNkNDQnLFxuXTtcbiIsImltcG9ydCB7IGZhQWRvYmUgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1icmFuZHMtc3ZnLWljb25zL2ZhQWRvYmUnO1xuaW1wb3J0IHsgZmFHaXRBbHQgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1icmFuZHMtc3ZnLWljb25zL2ZhR2l0QWx0JztcbmltcG9ydCB7IGZhTGludXggfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1icmFuZHMtc3ZnLWljb25zL2ZhTGludXgnO1xuaW1wb3J0IHsgZmFOb2RlSnMgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1icmFuZHMtc3ZnLWljb25zL2ZhTm9kZUpzJztcbmltcG9ydCB7IGZhUGhwIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtYnJhbmRzLXN2Zy1pY29ucy9mYVBocCc7XG5pbXBvcnQgeyBmYVB5dGhvbiB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLWJyYW5kcy1zdmctaWNvbnMvZmFQeXRob24nO1xuaW1wb3J0IHsgZmFSdXN0IH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtYnJhbmRzLXN2Zy1pY29ucy9mYVJ1c3QnO1xuaW1wb3J0IHsgZmFVYnVudHUgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1icmFuZHMtc3ZnLWljb25zL2ZhVWJ1bnR1JztcbmltcG9ydCB7IGZhV2luZG93cyB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLWJyYW5kcy1zdmctaWNvbnMvZmFXaW5kb3dzJztcbmltcG9ydCB7IGZhQXJyb3dEb3duIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhQXJyb3dEb3duJztcbmltcG9ydCB7IGZhQXJyb3dVcCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUFycm93VXAnO1xuaW1wb3J0IHsgZmFCYWxhbmNlU2NhbGUgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFCYWxhbmNlU2NhbGUnO1xuaW1wb3J0IHsgZmFCb3hPcGVuIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhQm94T3Blbic7XG5pbXBvcnQgeyBmYUNoZWNrQ2lyY2xlIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhQ2hlY2tDaXJjbGUnO1xuaW1wb3J0IHsgZmFDaGV2cm9uRG93biB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUNoZXZyb25Eb3duJztcbmltcG9ydCB7IGZhQ2hldnJvblJpZ2h0IH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhQ2hldnJvblJpZ2h0JztcbmltcG9ydCB7IGZhQ2lyY2xlIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhQ2lyY2xlJztcbmltcG9ydCB7IGZhQ2lyY2xlTm90Y2ggfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFDaXJjbGVOb3RjaCc7XG5pbXBvcnQgeyBmYUNvZ3MgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFDb2dzJztcbmltcG9ydCB7IGZhQ29weSB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUNvcHknO1xuaW1wb3J0IHsgZmFDdWJlcyB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUN1YmVzJztcbmltcG9ydCB7IGZhRGF0YWJhc2UgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFEYXRhYmFzZSc7XG5pbXBvcnQgeyBmYURvd25sb2FkIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRG93bmxvYWQnO1xuaW1wb3J0IHsgZmFFcmFzZXIgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFFcmFzZXInO1xuaW1wb3J0IHsgZmFFeGNsYW1hdGlvblRyaWFuZ2xlIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRXhjbGFtYXRpb25UcmlhbmdsZSc7XG5pbXBvcnQgeyBmYUV4dGVybmFsTGlua0FsdCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUV4dGVybmFsTGlua0FsdCc7XG5pbXBvcnQgeyBmYUV5ZVNsYXNoIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRXllU2xhc2gnO1xuaW1wb3J0IHsgZmFGaWxlIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRmlsZSc7XG5pbXBvcnQgeyBmYUZpbGVBbHQgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFGaWxlQWx0JztcbmltcG9ydCB7IGZhRmlsZUFyY2hpdmUgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFGaWxlQXJjaGl2ZSc7XG5pbXBvcnQgeyBmYUZpbGVDb2RlIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRmlsZUNvZGUnO1xuaW1wb3J0IHsgZmFGaWxlRXhjZWwgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFGaWxlRXhjZWwnO1xuaW1wb3J0IHsgZmFGaWxlSW1hZ2UgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFGaWxlSW1hZ2UnO1xuaW1wb3J0IHsgZmFGaWxlUGRmIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRmlsZVBkZic7XG5pbXBvcnQgeyBmYUZpbGVXb3JkIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRmlsZVdvcmQnO1xuaW1wb3J0IHsgZmFGaWxtIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRmlsbSc7XG5pbXBvcnQgeyBmYUZpc3RSYWlzZWQgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFGaXN0UmFpc2VkJztcbmltcG9ydCB7IGZhRm9sZGVyIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRm9sZGVyJztcbmltcG9ydCB7IGZhRm9sZGVyT3BlbiB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUZvbGRlck9wZW4nO1xuaW1wb3J0IHsgZmFGb2xkZXJQbHVzIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRm9sZGVyUGx1cyc7XG5pbXBvcnQgeyBmYUluZm9DaXJjbGUgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFJbmZvQ2lyY2xlJztcbmltcG9ydCB7IGZhS2V5IH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhS2V5JztcbmltcG9ydCB7IGZhTGV2ZWxVcEFsdCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUxldmVsVXBBbHQnO1xuaW1wb3J0IHsgZmFMaXN0IH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhTGlzdCc7XG5pbXBvcnQgeyBmYUxvY2sgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFMb2NrJztcbmltcG9ydCB7IGZhTXVzaWMgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFNdXNpYyc7XG5pbXBvcnQgeyBmYU9iamVjdEdyb3VwIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhT2JqZWN0R3JvdXAnO1xuaW1wb3J0IHsgZmFSdW5uaW5nIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhUnVubmluZyc7XG5pbXBvcnQgeyBmYVNlYXJjaCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYVNlYXJjaCc7XG5pbXBvcnQgeyBmYVRlcm1pbmFsIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhVGVybWluYWwnO1xuaW1wb3J0IHsgZmFUaCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYVRoJztcbmltcG9ydCB7IGZhVGhMYXJnZSB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYVRoTGFyZ2UnO1xuaW1wb3J0IHsgZmFUaW1lcyB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYVRpbWVzJztcbmltcG9ydCB7IGZhVHJhc2ggfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFUcmFzaCc7XG5pbXBvcnQgeyBmYVVwbG9hZCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYVVwbG9hZCc7XG5pbXBvcnQgeyBmYVVzZXJzIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhVXNlcnMnO1xuaW1wb3J0IHsgRm9udEF3ZXNvbWVJY29uIH0gZnJvbSAnQGZvcnRhd2Vzb21lL3JlYWN0LWZvbnRhd2Vzb21lJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IENob25reUljb25OYW1lIH0gZnJvbSAnLi4vLi4vdHlwZXMvaWNvbnMudHlwZXMnO1xuXG5jb25zdCBJY29uTWFwOiB7IFtpY29uTmFtZSBpbiBDaG9ua3lJY29uTmFtZV06IGFueSB9ID0ge1xuICAgIC8vIE1pc2NcbiAgICBbQ2hvbmt5SWNvbk5hbWUubG9hZGluZ106IGZhQ2lyY2xlTm90Y2gsXG4gICAgW0Nob25reUljb25OYW1lLmRyb3Bkb3duXTogZmFDaGV2cm9uRG93bixcblxuICAgIC8vIEZpbGUgQWN0aW9uczogRHJhZyAmIGRyb3BcbiAgICBbQ2hvbmt5SWNvbk5hbWUuZG5kRHJhZ2dpbmddOiBmYUZpc3RSYWlzZWQsXG4gICAgW0Nob25reUljb25OYW1lLmRuZENhbkRyb3BdOiBmYUFycm93RG93bixcbiAgICBbQ2hvbmt5SWNvbk5hbWUuZG5kQ2Fubm90RHJvcF06IGZhVGltZXMsXG5cbiAgICAvLyBGaWxlIEFjdGlvbnM6IEZpbGUgb3BlcmF0aW9uc1xuICAgIFtDaG9ua3lJY29uTmFtZS5vcGVuRmlsZXNdOiBmYUJveE9wZW4sXG4gICAgW0Nob25reUljb25OYW1lLm9wZW5QYXJlbnRGb2xkZXJdOiBmYUxldmVsVXBBbHQsXG4gICAgW0Nob25reUljb25OYW1lLmNvcHldOiBmYUNvcHksXG4gICAgW0Nob25reUljb25OYW1lLnNlYXJjaF06IGZhU2VhcmNoLFxuICAgIFtDaG9ua3lJY29uTmFtZS5zZWxlY3RBbGxGaWxlc106IGZhT2JqZWN0R3JvdXAsXG4gICAgW0Nob25reUljb25OYW1lLmNsZWFyU2VsZWN0aW9uXTogZmFFcmFzZXIsXG5cbiAgICAvLyBGaWxlIEFjdGlvbnM6IFVuc29ydGVkXG4gICAgW0Nob25reUljb25OYW1lLmNoZWNrQWN0aXZlXTogZmFDaGVja0NpcmNsZSxcbiAgICBbQ2hvbmt5SWNvbk5hbWUuY2hlY2tJbmFjdGl2ZV06IGZhQ2lyY2xlLFxuICAgIFtDaG9ua3lJY29uTmFtZS5kZXNjXTogZmFBcnJvd0Rvd24sXG4gICAgW0Nob25reUljb25OYW1lLmFzY106IGZhQXJyb3dVcCxcbiAgICBbQ2hvbmt5SWNvbk5hbWUubGlzdF06IGZhTGlzdCxcbiAgICBbQ2hvbmt5SWNvbk5hbWUuZm9sZGVyXTogZmFGb2xkZXIsXG4gICAgW0Nob25reUljb25OYW1lLmZvbGRlckNyZWF0ZV06IGZhRm9sZGVyUGx1cyxcbiAgICBbQ2hvbmt5SWNvbk5hbWUuZm9sZGVyT3Blbl06IGZhRm9sZGVyT3BlbixcbiAgICBbQ2hvbmt5SWNvbk5hbWUuc21hbGxUaHVtYm5haWxdOiBmYVRoLFxuICAgIFtDaG9ua3lJY29uTmFtZS5sYXJnZVRodW1ibmFpbF06IGZhVGhMYXJnZSxcbiAgICBbQ2hvbmt5SWNvbk5hbWUuZm9sZGVyQ2hhaW5TZXBhcmF0b3JdOiBmYUNoZXZyb25SaWdodCxcbiAgICBbQ2hvbmt5SWNvbk5hbWUuZG93bmxvYWRdOiBmYURvd25sb2FkLFxuICAgIFtDaG9ua3lJY29uTmFtZS51cGxvYWRdOiBmYVVwbG9hZCxcbiAgICBbQ2hvbmt5SWNvbk5hbWUudHJhc2hdOiBmYVRyYXNoLFxuICAgIFtDaG9ua3lJY29uTmFtZS5mYWxsYmFja0ljb25dOiBmYUV4Y2xhbWF0aW9uVHJpYW5nbGUsXG5cbiAgICAvLyBGaWxlIG1vZGlmaWVyc1xuICAgIFtDaG9ua3lJY29uTmFtZS5zeW1saW5rXTogZmFFeHRlcm5hbExpbmtBbHQsXG4gICAgW0Nob25reUljb25OYW1lLmhpZGRlbl06IGZhRXllU2xhc2gsXG5cbiAgICAvLyBHZW5lcmljIGZpbGUgdHlwZXNcbiAgICBbQ2hvbmt5SWNvbk5hbWUuZmlsZV06IGZhRmlsZSxcbiAgICBbQ2hvbmt5SWNvbk5hbWUubGljZW5zZV06IGZhQmFsYW5jZVNjYWxlLFxuICAgIFtDaG9ua3lJY29uTmFtZS5jb2RlXTogZmFGaWxlQ29kZSxcbiAgICBbQ2hvbmt5SWNvbk5hbWUuY29uZmlnXTogZmFDb2dzLFxuICAgIFtDaG9ua3lJY29uTmFtZS5tb2RlbF06IGZhQ3ViZXMsXG4gICAgW0Nob25reUljb25OYW1lLmRhdGFiYXNlXTogZmFEYXRhYmFzZSxcbiAgICBbQ2hvbmt5SWNvbk5hbWUudGV4dF06IGZhRmlsZUFsdCxcbiAgICBbQ2hvbmt5SWNvbk5hbWUuYXJjaGl2ZV06IGZhRmlsZUFyY2hpdmUsXG4gICAgW0Nob25reUljb25OYW1lLmltYWdlXTogZmFGaWxlSW1hZ2UsXG4gICAgW0Nob25reUljb25OYW1lLnZpZGVvXTogZmFGaWxtLFxuICAgIFtDaG9ua3lJY29uTmFtZS5pbmZvXTogZmFJbmZvQ2lyY2xlLFxuICAgIFtDaG9ua3lJY29uTmFtZS5rZXldOiBmYUtleSxcbiAgICBbQ2hvbmt5SWNvbk5hbWUubG9ja106IGZhTG9jayxcbiAgICBbQ2hvbmt5SWNvbk5hbWUubXVzaWNdOiBmYU11c2ljLFxuICAgIFtDaG9ua3lJY29uTmFtZS50ZXJtaW5hbF06IGZhVGVybWluYWwsXG4gICAgW0Nob25reUljb25OYW1lLnVzZXJzXTogZmFVc2VycyxcblxuICAgIC8vIE9TIGZpbGUgdHlwZXNcbiAgICBbQ2hvbmt5SWNvbk5hbWUubGludXhdOiBmYUxpbnV4LFxuICAgIFtDaG9ua3lJY29uTmFtZS51YnVudHVdOiBmYVVidW50dSxcbiAgICBbQ2hvbmt5SWNvbk5hbWUud2luZG93c106IGZhV2luZG93cyxcblxuICAgIC8vIFByb2dyYW1taW5nIGxhbmd1YWdlIGZpbGUgdHlwZXNcbiAgICBbQ2hvbmt5SWNvbk5hbWUucnVzdF06IGZhUnVzdCxcbiAgICBbQ2hvbmt5SWNvbk5hbWUucHl0aG9uXTogZmFQeXRob24sXG4gICAgW0Nob25reUljb25OYW1lLm5vZGVqc106IGZhTm9kZUpzLFxuICAgIFtDaG9ua3lJY29uTmFtZS5waHBdOiBmYVBocCxcblxuICAgIC8vIERldmVsb3BtZW50IHRvb2xzIGZpbGUgdHlwZXNcbiAgICBbQ2hvbmt5SWNvbk5hbWUuZ2l0XTogZmFHaXRBbHQsXG5cbiAgICAvLyBCcmFuZHMgZmlsZSB0eXBlc1xuICAgIFtDaG9ua3lJY29uTmFtZS5hZG9iZV06IGZhQWRvYmUsXG5cbiAgICAvLyBPdGhlciBwcm9ncmFtIGZpbGUgdHlwZXNcbiAgICBbQ2hvbmt5SWNvbk5hbWUucGRmXTogZmFGaWxlUGRmLFxuICAgIFtDaG9ua3lJY29uTmFtZS5leGNlbF06IGZhRmlsZUV4Y2VsLFxuICAgIFtDaG9ua3lJY29uTmFtZS53b3JkXTogZmFGaWxlV29yZCxcbiAgICBbQ2hvbmt5SWNvbk5hbWUuZmxhc2hdOiBmYVJ1bm5pbmcsXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgaW50ZXJmYWNlIENob25reUljb25Qcm9wcyB7XG4gICAgaWNvbjogQ2hvbmt5SWNvbk5hbWUgfCBzdHJpbmc7XG4gICAgc3Bpbj86IGJvb2xlYW47XG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICAgIGNvbG9yPzogc3RyaW5nO1xuICAgIGZpeGVkV2lkdGg/OiBib29sZWFuO1xuICAgIHNpemU/OiAneHMnIHwgJ2xnJyB8ICdzbSc7XG4gICAgc3R5bGU/OiBSZWFjdC5DU1NQcm9wZXJ0aWVzO1xufVxuXG5leHBvcnQgY29uc3QgQ2hvbmt5SWNvbkZBOiBSZWFjdC5GQzxDaG9ua3lJY29uUHJvcHM+ID0gUmVhY3QubWVtbygocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IGljb24gfSA9IHByb3BzO1xuXG4gICAgY29uc3QgZmFQcm9wcyA9IHtcbiAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgIGljb246IEljb25NYXBbaWNvbl0gPyBJY29uTWFwW2ljb25dIDogSWNvbk1hcC5mYWxsYmFja0ljb24sXG4gICAgfSBhcyBjb25zdDtcbiAgICByZXR1cm4gPEZvbnRBd2Vzb21lSWNvbiB7Li4uZmFQcm9wc30gLz47XG59KTtcbiIsIi8qKlxuICogQGF1dGhvciBUaW11ciBLdXpoYWdhbGl5ZXYgPHRpbS5rdXpoQGdtYWlsLmNvbT5cbiAqIEBjb3B5cmlnaHQgMjAyMFxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IGMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTnVsbGFibGUgfSBmcm9tICd0c2RlZic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZVRodW1ibmFpbFByb3BzIHtcbiAgICB0aHVtYm5haWxVcmw6IE51bGxhYmxlPHN0cmluZz47XG59XG5cbmV4cG9ydCBjb25zdCBGaWxlVGh1bWJuYWlsOiBSZWFjdC5GQzxGaWxlVGh1bWJuYWlsUHJvcHM+ID0gUmVhY3QubWVtbygocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IHRodW1ibmFpbFVybCB9ID0gcHJvcHM7XG5cbiAgICBjb25zdCB0aHVtYm5haWxTdHlsZTogUmVhY3QuQ1NTUHJvcGVydGllcyA9IHRodW1ibmFpbFVybFxuICAgICAgICA/IHsgYmFja2dyb3VuZEltYWdlOiBgdXJsKCcke3RodW1ibmFpbFVybH0nKWAgfVxuICAgICAgICA6IHt9O1xuXG4gICAgY29uc3QgY2xhc3NOYW1lID0gYyh7XG4gICAgICAgICdjaG9ua3ktZmlsZS10aHVtYm5haWwnOiB0cnVlLFxuICAgICAgICAnY2hvbmt5LWZpbGUtdGh1bWJuYWlsLWhpZGRlbic6ICF0aHVtYm5haWxVcmwsXG4gICAgfSk7XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9IHN0eWxlPXt0aHVtYm5haWxTdHlsZX0gLz47XG59KTtcbiIsImltcG9ydCB7IGF0b20gfSBmcm9tICdyZWNvaWwnO1xuaW1wb3J0IHsgTnVsbGFibGUgfSBmcm9tICd0c2RlZic7XG5cbmltcG9ydCB7IFRodW1ibmFpbEdlbmVyYXRvciB9IGZyb20gJy4uL3R5cGVzL3RodW1ibmFpbHMudHlwZXMnO1xuXG4vL1xuLy8gPT09PSBBdG9tc1xuZXhwb3J0IGNvbnN0IHRodW1ibmFpbEdlbmVyYXRvclN0YXRlID0gYXRvbTxOdWxsYWJsZTxUaHVtYm5haWxHZW5lcmF0b3I+Pih7XG4gICAga2V5OiAndGh1bWJuYWlsR2VuZXJhdG9yU3RhdGUnLFxuICAgIGRlZmF1bHQ6IG51bGwsXG59KTtcbiIsIi8qKlxuICogQGF1dGhvciBUaW11ciBLdXpoYWdhbGl5ZXYgPHRpbS5rdXpoQGdtYWlsLmNvbT5cbiAqIEBjb3B5cmlnaHQgMjAyMFxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGludGVyZmFjZSBUZXh0UGxhY2Vob2xkZXJQcm9wcyB7XG4gICAgbWluTGVuZ3RoOiBudW1iZXI7XG4gICAgbWF4TGVuZ3RoOiBudW1iZXI7XG59XG5cbmNvbnN0IGdldFJhbmRvbUludCA9IChtaW46IG51bWJlciwgbWF4OiBudW1iZXIpID0+IHtcbiAgICByZXR1cm4gbWluICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTWF0aC5mbG9vcihtYXggLSBtaW4pKTtcbn07XG5leHBvcnQgY29uc3QgVGV4dFBsYWNlaG9sZGVyOiBSZWFjdC5GQzxUZXh0UGxhY2Vob2xkZXJQcm9wcz4gPSBSZWFjdC5tZW1vKChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgbWluTGVuZ3RoLCBtYXhMZW5ndGggfSA9IHByb3BzO1xuXG4gICAgY29uc3QgcGxhY2Vob2xkZXJMZW5ndGggPSBnZXRSYW5kb21JbnQobWluTGVuZ3RoLCBtYXhMZW5ndGgpO1xuICAgIGNvbnN0IHdoaXRlc3BhY2UgPSAnJm5ic3A7Jy5yZXBlYXQocGxhY2Vob2xkZXJMZW5ndGgpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPHNwYW5cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImNob25reS10ZXh0LXBsYWNlaG9sZGVyXCJcbiAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogd2hpdGVzcGFjZSB9fVxuICAgICAgICAvPlxuICAgICk7XG59KTtcbiIsImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVJlY29pbFZhbHVlIH0gZnJvbSAncmVjb2lsJztcbmltcG9ydCB7IE5pbGFibGUsIE51bGxhYmxlIH0gZnJvbSAndHNkZWYnO1xuXG5pbXBvcnQgeyB0aHVtYm5haWxHZW5lcmF0b3JTdGF0ZSB9IGZyb20gJy4uLy4uL3JlY29pbC90aHVtYm5haWxzLnJlY29pbCc7XG5pbXBvcnQgeyBGaWxlRGF0YSB9IGZyb20gJy4uLy4uL3R5cGVzL2ZpbGVzLnR5cGVzJztcbmltcG9ydCB7IENob25reUljb25OYW1lIH0gZnJvbSAnLi4vLi4vdHlwZXMvaWNvbnMudHlwZXMnO1xuaW1wb3J0IHsgRmlsZUhlbHBlciB9IGZyb20gJy4uLy4uL3V0aWwvZmlsZS1oZWxwZXInO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vLi4vdXRpbC9sb2dnZXInO1xuaW1wb3J0IHsgQ2hvbmt5SWNvbkZBIH0gZnJvbSAnLi4vZXh0ZXJuYWwvQ2hvbmt5SWNvbic7XG5pbXBvcnQgeyBUZXh0UGxhY2Vob2xkZXIgfSBmcm9tICcuLi9leHRlcm5hbC9UZXh0UGxhY2Vob2xkZXInO1xuXG5leHBvcnQgY29uc3QgdXNlRG5kSWNvbiA9IChcbiAgICBzZWxlY3RlZDogTmlsYWJsZTxib29sZWFuPixcbiAgICBpc0RyYWdnaW5nOiBOaWxhYmxlPGJvb2xlYW4+LFxuICAgIGlzT3ZlcjogTmlsYWJsZTxib29sZWFuPixcbiAgICBjYW5Ecm9wOiBOaWxhYmxlPGJvb2xlYW4+XG4pOiBOdWxsYWJsZTxDaG9ua3lJY29uTmFtZT4gPT4ge1xuICAgIGlmIChpc092ZXIpIHtcbiAgICAgICAgcmV0dXJuIGNhbkRyb3AgJiYgIXNlbGVjdGVkXG4gICAgICAgICAgICA/IENob25reUljb25OYW1lLmRuZENhbkRyb3BcbiAgICAgICAgICAgIDogQ2hvbmt5SWNvbk5hbWUuZG5kQ2Fubm90RHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNEcmFnZ2luZyA/IENob25reUljb25OYW1lLmRuZERyYWdnaW5nIDogbnVsbDtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VUaHVtYm5haWxVcmwgPSAoXG4gICAgZmlsZTogTnVsbGFibGU8RmlsZURhdGE+LFxuICAgIHNldFRodW1ibmFpbFVybDogKHVybDogc3RyaW5nKSA9PiB2b2lkLFxuICAgIHNldFRodW1ibmFpbExvYWRpbmc6IChzdGF0ZTogYm9vbGVhbikgPT4gdm9pZFxuKSA9PiB7XG4gICAgY29uc3QgdGh1bWJuYWlsR2VuZXJhdG9yID0gdXNlUmVjb2lsVmFsdWUodGh1bWJuYWlsR2VuZXJhdG9yU3RhdGUpO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgbGV0IGxvYWRpbmdDYW5jZWxsZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAoZmlsZSkge1xuICAgICAgICAgICAgaWYgKHRodW1ibmFpbEdlbmVyYXRvcikge1xuICAgICAgICAgICAgICAgIHNldFRodW1ibmFpbExvYWRpbmcodHJ1ZSk7XG4gICAgICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gdGh1bWJuYWlsR2VuZXJhdG9yKGZpbGUpKVxuICAgICAgICAgICAgICAgICAgICAudGhlbigodGh1bWJuYWlsVXJsOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2FkaW5nQ2FuY2VsbGVkKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaHVtYm5haWxMb2FkaW5nKGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRodW1ibmFpbFVybCAmJiB0eXBlb2YgdGh1bWJuYWlsVXJsID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRodW1ibmFpbFVybCh0aHVtYm5haWxVcmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxvYWRpbmdDYW5jZWxsZWQpIHNldFRodW1ibmFpbExvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBVc2VyLWRlZmluZWQgXCJ0aHVtYm5haWxHZW5lcmF0b3JcIiBoYW5kbGVyIHRocmV3IGFuIGVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YFxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZpbGUudGh1bWJuYWlsVXJsKSB7XG4gICAgICAgICAgICAgICAgc2V0VGh1bWJuYWlsVXJsKGZpbGUudGh1bWJuYWlsVXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBsb2FkaW5nQ2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICB9LCBbZmlsZSwgc2V0VGh1bWJuYWlsVXJsLCBzZXRUaHVtYm5haWxMb2FkaW5nLCB0aHVtYm5haWxHZW5lcmF0b3JdKTtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VNb2RpZmllckljb25Db21wb25lbnRzID0gKGZpbGU6IE51bGxhYmxlPEZpbGVEYXRhPikgPT4ge1xuICAgIGNvbnN0IG1vZGlmaWVySWNvbnM6IENob25reUljb25OYW1lW10gPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgY29uc3QgbW9kaWZpZXJJY29uczogQ2hvbmt5SWNvbk5hbWVbXSA9IFtdO1xuICAgICAgICBpZiAoRmlsZUhlbHBlci5pc0hpZGRlbihmaWxlKSkgbW9kaWZpZXJJY29ucy5wdXNoKENob25reUljb25OYW1lLmhpZGRlbik7XG4gICAgICAgIGlmIChGaWxlSGVscGVyLmlzU3ltbGluayhmaWxlKSkgbW9kaWZpZXJJY29ucy5wdXNoKENob25reUljb25OYW1lLnN5bWxpbmspO1xuICAgICAgICByZXR1cm4gbW9kaWZpZXJJY29ucztcbiAgICB9LCBbZmlsZV0pO1xuICAgIGNvbnN0IG1vZGlmaWVySWNvbkNvbXBvbmVudHMgPSB1c2VNZW1vKFxuICAgICAgICAoKSA9PlxuICAgICAgICAgICAgbW9kaWZpZXJJY29ucy5tYXAoKGljb24sIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgPENob25reUljb25GQSBrZXk9e2BmaWxlLW1vZGlmaWVyLSR7aW5kZXh9YH0gaWNvbj17aWNvbn0gLz5cbiAgICAgICAgICAgICkpLFxuICAgICAgICBbbW9kaWZpZXJJY29uc11cbiAgICApO1xuICAgIHJldHVybiBtb2RpZmllckljb25Db21wb25lbnRzO1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZUZpbGVOYW1lQ29tcG9uZW50ID0gKGZpbGU6IE51bGxhYmxlPEZpbGVEYXRhPikgPT4ge1xuICAgIHJldHVybiB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgaWYgKCFmaWxlKSByZXR1cm4gPFRleHRQbGFjZWhvbGRlciBtaW5MZW5ndGg9ezE1fSBtYXhMZW5ndGg9ezIwfSAvPjtcblxuICAgICAgICBsZXQgbmFtZTtcbiAgICAgICAgbGV0IGV4dGVuc2lvbjtcblxuICAgICAgICBjb25zdCBpc0RpciA9IEZpbGVIZWxwZXIuaXNEaXJlY3RvcnkoZmlsZSk7XG4gICAgICAgIGlmIChpc0Rpcikge1xuICAgICAgICAgICAgbmFtZSA9IGZpbGUubmFtZTtcbiAgICAgICAgICAgIGV4dGVuc2lvbiA9ICcgLyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBleHRlbnNpb24gPSBmaWxlLmV4dCA/PyBwYXRoLmV4dG5hbWUoZmlsZS5uYW1lKTtcbiAgICAgICAgICAgIG5hbWUgPSBmaWxlLm5hbWUuc3Vic3RyKDAsIGZpbGUubmFtZS5sZW5ndGggLSBleHRlbnNpb24ubGVuZ3RoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgIHtuYW1lfVxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImNob25reS1maWxlLWVudHJ5LWRlc2NyaXB0aW9uLXRpdGxlLWV4dGVuc2lvblwiPlxuICAgICAgICAgICAgICAgICAgICB7ZXh0ZW5zaW9ufVxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvPlxuICAgICAgICApO1xuICAgIH0sIFtmaWxlXSk7XG59O1xuIiwiaW1wb3J0IGMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBOdWxsYWJsZSB9IGZyb20gJ3RzZGVmJztcblxuaW1wb3J0IHsgRmlsZURhdGEgfSBmcm9tICcuLi8uLi90eXBlcy9maWxlcy50eXBlcyc7XG5pbXBvcnQgeyBDaG9ua3lJY29uTmFtZSB9IGZyb20gJy4uLy4uL3R5cGVzL2ljb25zLnR5cGVzJztcbmltcG9ydCB7IEZpbGVIZWxwZXIgfSBmcm9tICcuLi8uLi91dGlsL2ZpbGUtaGVscGVyJztcbmltcG9ydCB7IENvbG9yc0RhcmssIENvbG9yc0xpZ2h0LCB1c2VJY29uRGF0YSB9IGZyb20gJy4uLy4uL3V0aWwvZmlsZS1pY29uLWhlbHBlcic7XG5pbXBvcnQgeyBDaG9ua3lJY29uRkEgfSBmcm9tICcuLi9leHRlcm5hbC9DaG9ua3lJY29uJztcbmltcG9ydCB7IEZpbGVUaHVtYm5haWwgfSBmcm9tICcuLi9pbnRlcm5hbC9GaWxlVGh1bWJuYWlsJztcbmltcG9ydCB7XG4gICAgdXNlRG5kSWNvbixcbiAgICB1c2VGaWxlTmFtZUNvbXBvbmVudCxcbiAgICB1c2VNb2RpZmllckljb25Db21wb25lbnRzLFxuICAgIHVzZVRodW1ibmFpbFVybCxcbn0gZnJvbSAnLi9CYXNlRmlsZUVudHJ5LWhvb2tzJztcbmltcG9ydCB7IERuRFByb3BzIH0gZnJvbSAnLi9EbkRGaWxlRW50cnknO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVFbnRyeVByb3BzIGV4dGVuZHMgRG5EUHJvcHMge1xuICAgIGZpbGU6IE51bGxhYmxlPEZpbGVEYXRhPjtcblxuICAgIGRpc3BsYXlJbmRleDogbnVtYmVyOyAvLyBJbmRleCBhdCB3aGljaCB0aGlzIGZpbGUgYXBwZWFycyBpbiB0aGUgZmlsZSBsaXN0XG5cbiAgICBzZWxlY3RlZDogYm9vbGVhbjtcblxuICAgIHN0eWxlPzogUmVhY3QuQ1NTUHJvcGVydGllcztcbn1cblxuZXhwb3J0IGNvbnN0IEJhc2VGaWxlRW50cnk6IFJlYWN0LkZDPEZpbGVFbnRyeVByb3BzPiA9IFJlYWN0Lm1lbW8oKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBmaWxlLCBzZWxlY3RlZCwgc3R5bGUsIGRuZElzRHJhZ2dpbmcsIGRuZElzT3ZlciwgZG5kQ2FuRHJvcCB9ID0gcHJvcHM7XG5cbiAgICAvLyBEZWFsIHdpdGggdGh1bWJuYWlsc1xuICAgIGNvbnN0IFt0aHVtYm5haWxVcmwsIHNldFRodW1ibmFpbFVybF0gPSB1c2VTdGF0ZTxOdWxsYWJsZTxzdHJpbmc+PihudWxsKTtcbiAgICBjb25zdCBbdGh1bWJuYWlsTG9hZGluZywgc2V0VGh1bWJuYWlsTG9hZGluZ10gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG4gICAgdXNlVGh1bWJuYWlsVXJsKGZpbGUsIHNldFRodW1ibmFpbFVybCwgc2V0VGh1bWJuYWlsTG9hZGluZyk7XG5cbiAgICAvLyBEZWFsIHdpdGggZmlsZSBpY29uXG4gICAgY29uc3QgaWNvbkRhdGEgPSB1c2VJY29uRGF0YShmaWxlKTtcbiAgICBjb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSB0aHVtYm5haWxVcmxcbiAgICAgICAgPyBDb2xvcnNEYXJrW2ljb25EYXRhLmNvbG9yQ29kZV1cbiAgICAgICAgOiBDb2xvcnNMaWdodFtpY29uRGF0YS5jb2xvckNvZGVdO1xuICAgIGNvbnN0IGljb25TcGluID0gdGh1bWJuYWlsTG9hZGluZyB8fCAhZmlsZTtcbiAgICBjb25zdCBpY29uID0gdGh1bWJuYWlsTG9hZGluZyA/IENob25reUljb25OYW1lLmxvYWRpbmcgOiBpY29uRGF0YS5pY29uO1xuXG4gICAgLy8gRGVhbCB3aXRoIGRyYWcgJiBkcm9wXG4gICAgY29uc3QgZG5kSWNvbiA9IHVzZURuZEljb24oc2VsZWN0ZWQsIGRuZElzRHJhZ2dpbmcsIGRuZElzT3ZlciwgZG5kQ2FuRHJvcCk7XG5cbiAgICAvLyBEZXRlcm1pbmUgbW9kaWZpZXIgaWNvbnNcbiAgICBjb25zdCBtb2RpZmllckljb25Db21wb25lbnRzID0gdXNlTW9kaWZpZXJJY29uQ29tcG9uZW50cyhmaWxlKTtcblxuICAgIC8vIERldGVybWluZSBmaWxlIG5hbWVcbiAgICBjb25zdCBmaWxlTmFtZUNvbXBvbmVudCA9IHVzZUZpbGVOYW1lQ29tcG9uZW50KGZpbGUpO1xuXG4gICAgLy8gUmVuZGVyIHRoZSBjb21wb25lbnRcbiAgICBjb25zdCBjbGFzc05hbWUgPSBjKHtcbiAgICAgICAgJ2Nob25reS1maWxlLWVudHJ5JzogdHJ1ZSxcbiAgICAgICAgJ2Nob25reS1maWxlLWVudHJ5LWRpcmVjdG9yeSc6IEZpbGVIZWxwZXIuaXNEaXJlY3RvcnkoZmlsZSksXG4gICAgICAgICdjaG9ua3ktZmlsZS1lbnRyeS1zZWxlY3RlZCc6IHNlbGVjdGVkLFxuICAgICAgICAnY2hvbmt5LWZpbGUtZW50cnktZHJhZ2dpbmcnOiBkbmRJc0RyYWdnaW5nLFxuICAgICAgICAnY2hvbmt5LWZpbGUtZW50cnktZHJvcC1ob3ZlcmVkJzogZG5kSXNPdmVyICYmIGRuZENhbkRyb3AsXG4gICAgfSk7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0gc3R5bGU9e3N0eWxlfT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2hvbmt5LWZpbGUtZW50cnktaW5zaWRlXCI+XG4gICAgICAgICAgICAgICAge2RuZEljb24gJiYgKFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNob25reS1maWxlLWVudHJ5LWRuZC1pbmRpY2F0b3JcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxDaG9ua3lJY29uRkEgaWNvbj17ZG5kSWNvbn0gLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgKX1cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2hvbmt5LWZpbGUtZW50cnktcHJldmlld1wiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNob25reS1maWxlLWRldGFpbHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2hvbmt5LWZpbGUtZGV0YWlscy1pbnNpZGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNob25reS1maWxlLWRldGFpbHMtaXRlbVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7RmlsZUhlbHBlci5nZXRSZWFkYWJsZURhdGUoZmlsZSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjaG9ua3ktZmlsZS1kZXRhaWxzLWl0ZW1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge0ZpbGVIZWxwZXIuZ2V0UmVhZGFibGVGaWxlU2l6ZShmaWxlKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNob25reS1maWxlLWljb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtGaWxlSGVscGVyLmlzRGlyZWN0b3J5KGZpbGUpICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNob25reS1maWxlLWljb24tY2hpbGRyZW4tY291bnRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge0ZpbGVIZWxwZXIuZ2V0Q2hpbGRyZW5Db3VudChmaWxlKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNob25reS1maWxlLWljb24taW5zaWRlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPENob25reUljb25GQSBpY29uPXtpY29ufSBzcGluPXtpY29uU3Bpbn0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNob25reS1maWxlLXNlbGVjdGlvblwiIC8+XG5cbiAgICAgICAgICAgICAgICAgICAgPEZpbGVUaHVtYm5haWwgdGh1bWJuYWlsVXJsPXt0aHVtYm5haWxVcmx9IC8+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2hvbmt5LWZpbGUtYmFja2dyb3VuZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3IgfX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2hvbmt5LWZpbGUtZW50cnktZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2hvbmt5LWZpbGUtZW50cnktZGVzY3JpcHRpb24tdGl0bGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e2ZpbGUgPyBmaWxlLm5hbWUgOiB1bmRlZmluZWR9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIHttb2RpZmllckljb25Db21wb25lbnRzLmxlbmd0aCA+IDAgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImNob25reS1maWxlLWVudHJ5LWRlc2NyaXB0aW9uLXRpdGxlLW1vZGlmaWVyc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bW9kaWZpZXJJY29uQ29tcG9uZW50c31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgICAge2ZpbGVOYW1lQ29tcG9uZW50fVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufSk7XG4iLCJpbXBvcnQgeyBhdG9tIH0gZnJvbSAncmVjb2lsJztcblxuaW1wb3J0IHsgSW50ZXJuYWxTcGVjaWFsQWN0aW9uRGlzcGF0Y2hlciB9IGZyb20gJy4uL3R5cGVzL3NwZWNpYWwtYWN0aW9ucy50eXBlcyc7XG5pbXBvcnQgeyBOT09QX0ZVTkNUSU9OIH0gZnJvbSAnLi4vdXRpbC9jb25zdGFudHMnO1xuXG4vL1xuLy8gPT09PSBBdG9tc1xuZXhwb3J0IGNvbnN0IGRpc3BhdGNoU3BlY2lhbEFjdGlvblN0YXRlID0gYXRvbTxJbnRlcm5hbFNwZWNpYWxBY3Rpb25EaXNwYXRjaGVyPih7XG4gICAga2V5OiAnZGlzcGF0Y2hTcGVjaWFsQWN0aW9uU3RhdGUnLFxuICAgIGRlZmF1bHQ6IE5PT1BfRlVOQ1RJT04sXG59KTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IEZpbGVIZWxwZXIgfSBmcm9tICcuLi8uLi91dGlsL2ZpbGUtaGVscGVyJztcbmltcG9ydCB7IENsaWNrYWJsZVdyYXBwZXIsIENsaWNrYWJsZVdyYXBwZXJQcm9wcyB9IGZyb20gJy4uL2ludGVybmFsL0NsaWNrYWJsZVdyYXBwZXInO1xuaW1wb3J0IHsgQmFzZUZpbGVFbnRyeSwgRmlsZUVudHJ5UHJvcHMgfSBmcm9tICcuL0Jhc2VGaWxlRW50cnknO1xuaW1wb3J0IHsgdXNlRmlsZUNsaWNrSGFuZGxlcnMgfSBmcm9tICcuL0NsaWNrYWJsZUZpbGVFbnRyeS1ob29rcyc7XG5cbmV4cG9ydCBjb25zdCBDbGlja2FibGVGaWxlRW50cnk6IFJlYWN0LkZDPEZpbGVFbnRyeVByb3BzPiA9IFJlYWN0Lm1lbW8oKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBmaWxlLCBkaXNwbGF5SW5kZXggfSA9IHByb3BzO1xuXG4gICAgY29uc3QgZmlsZUNsaWNrSGFuZGxlcnMgPSB1c2VGaWxlQ2xpY2tIYW5kbGVycyhmaWxlLCBkaXNwbGF5SW5kZXgpO1xuXG4gICAgY29uc3Qgd3JhcHBlclByb3BzOiBDbGlja2FibGVXcmFwcGVyUHJvcHMgPSB7XG4gICAgICAgIHdyYXBwZXJUYWc6ICdkaXYnLFxuICAgICAgICBwYXNzdGhyb3VnaFByb3BzOiB7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICdjaG9ua3ktZmlsZS1lbnRyeS1jbGlja2FibGUtd3JhcHBlciBjaG9ua3ktZmlsbC1wYXJlbnQnLFxuICAgICAgICB9LFxuICAgICAgICAuLi4oRmlsZUhlbHBlci5pc0NsaWNrYWJsZShmaWxlKSA/IGZpbGVDbGlja0hhbmRsZXJzIDogdW5kZWZpbmVkKSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPENsaWNrYWJsZVdyYXBwZXIgey4uLndyYXBwZXJQcm9wc30+XG4gICAgICAgICAgICA8QmFzZUZpbGVFbnRyeSB7Li4ucHJvcHN9IC8+XG4gICAgICAgIDwvQ2xpY2thYmxlV3JhcHBlcj5cbiAgICApO1xufSk7XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVJlY29pbFZhbHVlIH0gZnJvbSAncmVjb2lsJztcbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAndHNkZWYnO1xuXG5pbXBvcnQgeyBkaXNwYXRjaFNwZWNpYWxBY3Rpb25TdGF0ZSB9IGZyb20gJy4uLy4uL3JlY29pbC9zcGVjaWFsLWFjdGlvbnMucmVjb2lsJztcbmltcG9ydCB7IEZpbGVEYXRhIH0gZnJvbSAnLi4vLi4vdHlwZXMvZmlsZXMudHlwZXMnO1xuaW1wb3J0IHtcbiAgICBTcGVjaWFsQWN0aW9uLFxuICAgIFNwZWNpYWxGaWxlTW91c2VDbGlja0FjdGlvbixcbn0gZnJvbSAnLi4vLi4vdHlwZXMvc3BlY2lhbC1hY3Rpb25zLnR5cGVzJztcbmltcG9ydCB7IEtleWJvYXJkQ2xpY2tFdmVudCwgTW91c2VDbGlja0V2ZW50IH0gZnJvbSAnLi4vaW50ZXJuYWwvQ2xpY2thYmxlV3JhcHBlcic7XG5cbmV4cG9ydCBjb25zdCB1c2VGaWxlQ2xpY2tIYW5kbGVycyA9IChcbiAgICBmaWxlOiBOdWxsYWJsZTxGaWxlRGF0YT4sXG4gICAgZGlzcGxheUluZGV4OiBudW1iZXJcbikgPT4ge1xuICAgIGNvbnN0IGRpc3BhdGNoU3BlY2lhbEFjdGlvbiA9IHVzZVJlY29pbFZhbHVlKGRpc3BhdGNoU3BlY2lhbEFjdGlvblN0YXRlKTtcblxuICAgIC8vIFByZXBhcmUgYmFzZSBoYW5kbGVyc1xuICAgIGNvbnN0IG9uTW91c2VDbGljayA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAoXG4gICAgICAgICAgICBldmVudDogTW91c2VDbGlja0V2ZW50LFxuICAgICAgICAgICAgY2xpY2tUeXBlOiBTcGVjaWFsRmlsZU1vdXNlQ2xpY2tBY3Rpb25bJ2NsaWNrVHlwZSddXG4gICAgICAgICkgPT4ge1xuICAgICAgICAgICAgaWYgKCFmaWxlKSByZXR1cm47XG5cbiAgICAgICAgICAgIGRpc3BhdGNoU3BlY2lhbEFjdGlvbih7XG4gICAgICAgICAgICAgICAgYWN0aW9uSWQ6IFNwZWNpYWxBY3Rpb24uTW91c2VDbGlja0ZpbGUsXG4gICAgICAgICAgICAgICAgY2xpY2tUeXBlLFxuICAgICAgICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgICAgICAgZmlsZURpc3BsYXlJbmRleDogZGlzcGxheUluZGV4LFxuICAgICAgICAgICAgICAgIGFsdEtleTogZXZlbnQuYWx0S2V5LFxuICAgICAgICAgICAgICAgIGN0cmxLZXk6IGV2ZW50LmN0cmxLZXksXG4gICAgICAgICAgICAgICAgc2hpZnRLZXk6IGV2ZW50LnNoaWZ0S2V5LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIFtmaWxlLCBkaXNwbGF5SW5kZXgsIGRpc3BhdGNoU3BlY2lhbEFjdGlvbl1cbiAgICApO1xuICAgIGNvbnN0IG9uS2V5Ym9hcmRDbGljayA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAoZXZlbnQ6IEtleWJvYXJkQ2xpY2tFdmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFmaWxlKSByZXR1cm47XG5cbiAgICAgICAgICAgIGRpc3BhdGNoU3BlY2lhbEFjdGlvbih7XG4gICAgICAgICAgICAgICAgYWN0aW9uSWQ6IFNwZWNpYWxBY3Rpb24uS2V5Ym9hcmRDbGlja0ZpbGUsXG4gICAgICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgICAgICBmaWxlRGlzcGxheUluZGV4OiBkaXNwbGF5SW5kZXgsXG4gICAgICAgICAgICAgICAgZW50ZXJLZXk6IGV2ZW50LmVudGVyS2V5LFxuICAgICAgICAgICAgICAgIHNwYWNlS2V5OiBldmVudC5zcGFjZUtleSxcbiAgICAgICAgICAgICAgICBhbHRLZXk6IGV2ZW50LmFsdEtleSxcbiAgICAgICAgICAgICAgICBjdHJsS2V5OiBldmVudC5jdHJsS2V5LFxuICAgICAgICAgICAgICAgIHNoaWZ0S2V5OiBldmVudC5zaGlmdEtleSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBbZmlsZSwgZGlzcGxheUluZGV4LCBkaXNwYXRjaFNwZWNpYWxBY3Rpb25dXG4gICAgKTtcblxuICAgIC8vIFByZXBhcmUgc2luZ2xlL2RvdWJsZSBjbGljayBoYW5kbGVyc1xuICAgIGNvbnN0IG9uU2luZ2xlQ2xpY2sgPSB1c2VDYWxsYmFjayhcbiAgICAgICAgKGV2ZW50OiBNb3VzZUNsaWNrRXZlbnQpID0+IG9uTW91c2VDbGljayhldmVudCwgJ3NpbmdsZScpLFxuICAgICAgICBbb25Nb3VzZUNsaWNrXVxuICAgICk7XG4gICAgY29uc3Qgb25Eb3VibGVDbGljayA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAoZXZlbnQ6IE1vdXNlQ2xpY2tFdmVudCkgPT4gb25Nb3VzZUNsaWNrKGV2ZW50LCAnZG91YmxlJyksXG4gICAgICAgIFtvbk1vdXNlQ2xpY2tdXG4gICAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIG9uU2luZ2xlQ2xpY2ssXG4gICAgICAgIG9uRG91YmxlQ2xpY2ssXG4gICAgICAgIG9uS2V5Ym9hcmRDbGljayxcbiAgICB9O1xufTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRHJhZ09iamVjdFdpdGhUeXBlLCBEcmFnU291cmNlTW9uaXRvciwgdXNlRHJhZywgdXNlRHJvcCB9IGZyb20gJ3JlYWN0LWRuZCc7XG5pbXBvcnQgeyBnZXRFbXB0eUltYWdlIH0gZnJvbSAncmVhY3QtZG5kLWh0bWw1LWJhY2tlbmQnO1xuaW1wb3J0IHsgdXNlUmVjb2lsVmFsdWUgfSBmcm9tICdyZWNvaWwnO1xuaW1wb3J0IHsgRXhjbHVkZUtleXMsIE5pbGFibGUsIE51bGxhYmxlIH0gZnJvbSAndHNkZWYnO1xuXG5pbXBvcnQgeyBkaXNwYXRjaFNwZWNpYWxBY3Rpb25TdGF0ZSB9IGZyb20gJy4uLy4uL3JlY29pbC9zcGVjaWFsLWFjdGlvbnMucmVjb2lsJztcbmltcG9ydCB7IEZpbGVEYXRhIH0gZnJvbSAnLi4vLi4vdHlwZXMvZmlsZXMudHlwZXMnO1xuaW1wb3J0IHsgU3BlY2lhbEFjdGlvbiB9IGZyb20gJy4uLy4uL3R5cGVzL3NwZWNpYWwtYWN0aW9ucy50eXBlcyc7XG5pbXBvcnQgeyBGaWxlSGVscGVyIH0gZnJvbSAnLi4vLi4vdXRpbC9maWxlLWhlbHBlcic7XG5pbXBvcnQgeyBGaWxlRW50cnlQcm9wcyB9IGZyb20gJy4vQmFzZUZpbGVFbnRyeSc7XG5pbXBvcnQgeyBDbGlja2FibGVGaWxlRW50cnkgfSBmcm9tICcuL0NsaWNrYWJsZUZpbGVFbnRyeSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRG5EUHJvcHMge1xuICAgIGRuZElzRHJhZ2dpbmc/OiBib29sZWFuO1xuICAgIGRuZElzT3Zlcj86IGJvb2xlYW47XG4gICAgZG5kQ2FuRHJvcD86IGJvb2xlYW47XG59XG5cbmV4cG9ydCB0eXBlIERuREZpbGVFbnRyeUl0ZW0gPSBEcmFnT2JqZWN0V2l0aFR5cGUgJiB7IGZpbGU6IE51bGxhYmxlPEZpbGVEYXRhPiB9O1xuZXhwb3J0IGNvbnN0IERuREZpbGVFbnRyeVR5cGUgPSAnY2hvbmt5LWZpbGUtZW50cnknO1xuXG5leHBvcnQgY29uc3QgRG5ERmlsZUVudHJ5OiBSZWFjdC5GQzxGaWxlRW50cnlQcm9wcz4gPSBSZWFjdC5tZW1vKChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgZmlsZSB9ID0gcHJvcHM7XG5cbiAgICBjb25zdCBkaXNwYXRjaFNwZWNpYWxBY3Rpb24gPSB1c2VSZWNvaWxWYWx1ZShkaXNwYXRjaFNwZWNpYWxBY3Rpb25TdGF0ZSk7XG5cbiAgICBpbnRlcmZhY2UgQ2hvbmt5RG5ERHJvcFJlc3VsdCB7XG4gICAgICAgIGRyb3BUYXJnZXQ6IE5pbGFibGU8RmlsZURhdGE+O1xuICAgICAgICBkcm9wRWZmZWN0OiAnbW92ZScgfCAnY29weSc7XG4gICAgfVxuXG4gICAgLy8gRm9yIGRyYWcgc291cmNlXG4gICAgY29uc3QgY2FuRHJhZyA9IEZpbGVIZWxwZXIuaXNEcmFnZ2FibGUoZmlsZSk7XG4gICAgY29uc3Qgb25EcmFnU3RhcnQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIGlmICghRmlsZUhlbHBlci5pc0RyYWdnYWJsZShmaWxlKSkgcmV0dXJuO1xuXG4gICAgICAgIGRpc3BhdGNoU3BlY2lhbEFjdGlvbih7XG4gICAgICAgICAgICBhY3Rpb25JZDogU3BlY2lhbEFjdGlvbi5EcmFnTkRyb3BTdGFydCxcbiAgICAgICAgICAgIGRyYWdTb3VyY2U6IGZpbGUsXG4gICAgICAgIH0pO1xuICAgIH0sIFtkaXNwYXRjaFNwZWNpYWxBY3Rpb24sIGZpbGVdKTtcbiAgICBjb25zdCBvbkRyYWdFbmQgPSB1c2VDYWxsYmFjayhcbiAgICAgICAgKGl0ZW06IERuREZpbGVFbnRyeUl0ZW0sIG1vbml0b3I6IERyYWdTb3VyY2VNb25pdG9yKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkcm9wUmVzdWx0ID0gbW9uaXRvci5nZXREcm9wUmVzdWx0KCkgYXMgQ2hvbmt5RG5ERHJvcFJlc3VsdDtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAhRmlsZUhlbHBlci5pc0RyYWdnYWJsZShmaWxlKSB8fFxuICAgICAgICAgICAgICAgICFkcm9wUmVzdWx0IHx8XG4gICAgICAgICAgICAgICAgIWRyb3BSZXN1bHQuZHJvcFRhcmdldFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkaXNwYXRjaFNwZWNpYWxBY3Rpb24oe1xuICAgICAgICAgICAgICAgIGFjdGlvbklkOiBTcGVjaWFsQWN0aW9uLkRyYWdORHJvcEVuZCxcbiAgICAgICAgICAgICAgICBkcmFnU291cmNlOiBmaWxlLFxuICAgICAgICAgICAgICAgIGRyb3BUYXJnZXQ6IGRyb3BSZXN1bHQuZHJvcFRhcmdldCxcbiAgICAgICAgICAgICAgICBkcm9wRWZmZWN0OiBkcm9wUmVzdWx0LmRyb3BFZmZlY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgW2Rpc3BhdGNoU3BlY2lhbEFjdGlvbiwgZmlsZV1cbiAgICApO1xuXG4gICAgLy8gRm9yIGRyb3AgdGFyZ2V0XG4gICAgY29uc3Qgb25Ecm9wID0gdXNlQ2FsbGJhY2soXG4gICAgICAgIChpdGVtOiBEbkRGaWxlRW50cnlJdGVtLCBtb25pdG9yKSA9PiB7XG4gICAgICAgICAgICBpZiAoIW1vbml0b3IuY2FuRHJvcCgpKSByZXR1cm47XG4gICAgICAgICAgICBjb25zdCBjdXN0b21Ecm9wUmVzdWx0OiBFeGNsdWRlS2V5czxDaG9ua3lEbkREcm9wUmVzdWx0LCAnZHJvcEVmZmVjdCc+ID0ge1xuICAgICAgICAgICAgICAgIGRyb3BUYXJnZXQ6IGZpbGUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIGN1c3RvbURyb3BSZXN1bHQ7XG4gICAgICAgIH0sXG4gICAgICAgIFtmaWxlXVxuICAgICk7XG4gICAgY29uc3QgY2FuRHJvcCA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAoaXRlbTogRG5ERmlsZUVudHJ5SXRlbSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXNTYW1lRmlsZSA9IGZpbGUgJiYgaXRlbS5maWxlICYmIGZpbGUuaWQgPT09IGl0ZW0uZmlsZS5pZDtcbiAgICAgICAgICAgIHJldHVybiBGaWxlSGVscGVyLmlzRHJvcHBhYmxlKGZpbGUpICYmICFpc1NhbWVGaWxlO1xuICAgICAgICB9LFxuICAgICAgICBbZmlsZV1cbiAgICApO1xuXG4gICAgLy8gQ3JlYXRlIHJlZnMgZm9yIHJlYWN0LWRuZCBob29rc1xuICAgIGNvbnN0IFt7IGlzRHJhZ2dpbmc6IGRuZElzRHJhZ2dpbmcgfSwgZHJhZywgcHJldmlld10gPSB1c2VEcmFnKHtcbiAgICAgICAgaXRlbTogeyB0eXBlOiBEbkRGaWxlRW50cnlUeXBlLCBmaWxlIH0gYXMgRG5ERmlsZUVudHJ5SXRlbSxcbiAgICAgICAgY2FuRHJhZyxcbiAgICAgICAgYmVnaW46IG9uRHJhZ1N0YXJ0LFxuICAgICAgICBlbmQ6IG9uRHJhZ0VuZCxcbiAgICAgICAgY29sbGVjdDogKG1vbml0b3IpID0+ICh7XG4gICAgICAgICAgICBpc0RyYWdnaW5nOiBtb25pdG9yLmlzRHJhZ2dpbmcoKSxcbiAgICAgICAgfSksXG4gICAgfSk7XG4gICAgY29uc3QgW3sgaXNPdmVyOiBkbmRJc092ZXIsIGNhbkRyb3A6IGRuZENhbkRyb3AgfSwgZHJvcF0gPSB1c2VEcm9wKHtcbiAgICAgICAgYWNjZXB0OiBEbkRGaWxlRW50cnlUeXBlLFxuICAgICAgICBkcm9wOiBvbkRyb3AsXG4gICAgICAgIGNhbkRyb3AsXG4gICAgICAgIGNvbGxlY3Q6IChtb25pdG9yKSA9PiAoe1xuICAgICAgICAgICAgaXNPdmVyOiBtb25pdG9yLmlzT3ZlcigpLFxuICAgICAgICAgICAgY2FuRHJvcDogbW9uaXRvci5jYW5Ecm9wKCksXG4gICAgICAgIH0pLFxuICAgIH0pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgLy8gU2V0IGRyYWcgcHJldmlldyB0byBhbiBlbXB0eSBpbWFnZSBiZWNhdXNlIGBEbkRGaWxlTGlzdERyYWdMYXllcmAgd2lsbFxuICAgICAgICAvLyBwcm92aWRlIGl0cyBvd24gcHJldmlldy5cbiAgICAgICAgcHJldmlldyhnZXRFbXB0eUltYWdlKCksIHsgY2FwdHVyZURyYWdnaW5nU3RhdGU6IHRydWUgfSk7XG4gICAgfSwgW3ByZXZpZXddKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICAgIHJlZj17ZHJvcH1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImNob25reS1maWxlLWVudHJ5LWRyb3BwYWJsZS13cmFwcGVyIGNob25reS1maWxsLXBhcmVudFwiXG4gICAgICAgID5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICByZWY9e0ZpbGVIZWxwZXIuaXNEcmFnZ2FibGUoZmlsZSkgPyBkcmFnIDogbnVsbH1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjaG9ua3ktZmlsZS1lbnRyeS1kcmFnZ2FibGUtd3JhcHBlciBjaG9ua3ktZmlsbC1wYXJlbnRcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxDbGlja2FibGVGaWxlRW50cnlcbiAgICAgICAgICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgICAgICAgICAgICBkbmRJc0RyYWdnaW5nPXtkbmRJc0RyYWdnaW5nfVxuICAgICAgICAgICAgICAgICAgICBkbmRJc092ZXI9e2RuZElzT3Zlcn1cbiAgICAgICAgICAgICAgICAgICAgZG5kQ2FuRHJvcD17ZG5kQ2FuRHJvcH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59KTtcbiIsIi8qKlxuICogQGF1dGhvciBUaW11ciBLdXpoYWdhbGl5ZXYgPHRpbS5rdXpoQGdtYWlsLmNvbT5cbiAqIEBjb3B5cmlnaHQgMjAyMFxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVJlY29pbFZhbHVlIH0gZnJvbSAncmVjb2lsJztcbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAndHNkZWYnO1xuXG5pbXBvcnQgeyBlbmFibGVEcmFnQW5kRHJvcFN0YXRlIH0gZnJvbSAnLi4vLi4vcmVjb2lsL2RyYWctYW5kLWRyb3AucmVjb2lsJztcbmltcG9ydCB7IGZpbGVEYXRhU3RhdGUgfSBmcm9tICcuLi8uLi9yZWNvaWwvZmlsZXMucmVjb2lsJztcbmltcG9ydCB7IGZpbGVTZWxlY3RlZFN0YXRlIH0gZnJvbSAnLi4vLi4vcmVjb2lsL3NlbGVjdGlvbi5yZWNvaWwnO1xuaW1wb3J0IHsgRmlsZUVudHJ5UHJvcHMgfSBmcm9tICcuL0Jhc2VGaWxlRW50cnknO1xuaW1wb3J0IHsgQ2xpY2thYmxlRmlsZUVudHJ5IH0gZnJvbSAnLi9DbGlja2FibGVGaWxlRW50cnknO1xuaW1wb3J0IHsgRG5ERmlsZUVudHJ5IH0gZnJvbSAnLi9EbkRGaWxlRW50cnknO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNtYXJ0RmlsZUVudHJ5UHJvcHMge1xuICAgIGZpbGVJZDogTnVsbGFibGU8c3RyaW5nPjtcbiAgICBkaXNwbGF5SW5kZXg6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNvbnN0IFNtYXJ0RmlsZUVudHJ5OiBSZWFjdC5GQzxTbWFydEZpbGVFbnRyeVByb3BzPiA9IFJlYWN0Lm1lbW8oKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBmaWxlSWQsIGRpc3BsYXlJbmRleCB9ID0gcHJvcHM7XG5cbiAgICBjb25zdCBmaWxlID0gdXNlUmVjb2lsVmFsdWUoZmlsZURhdGFTdGF0ZShmaWxlSWQpKTtcbiAgICBjb25zdCBzZWxlY3RlZCA9IHVzZVJlY29pbFZhbHVlKGZpbGVTZWxlY3RlZFN0YXRlKGZpbGVJZCkpO1xuICAgIGNvbnN0IGVuYWJsZURyYWdBbmREcm9wID0gdXNlUmVjb2lsVmFsdWUoZW5hYmxlRHJhZ0FuZERyb3BTdGF0ZSk7XG5cbiAgICBjb25zdCBlbnRyeVByb3BzOiBGaWxlRW50cnlQcm9wcyA9IHtcbiAgICAgICAgZmlsZSxcbiAgICAgICAgZGlzcGxheUluZGV4LFxuICAgICAgICBzZWxlY3RlZCxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGVuYWJsZURyYWdBbmREcm9wID8gKFxuICAgICAgICA8RG5ERmlsZUVudHJ5IHsuLi5lbnRyeVByb3BzfSAvPlxuICAgICkgOiAoXG4gICAgICAgIDxDbGlja2FibGVGaWxlRW50cnkgey4uLmVudHJ5UHJvcHN9IC8+XG4gICAgKTtcbn0pO1xuIiwiaW1wb3J0IGMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBHcmlkIH0gZnJvbSAncmVhY3QtdmlydHVhbGl6ZWQnO1xuaW1wb3J0IHsgTmlsYWJsZSB9IGZyb20gJ3RzZGVmJztcblxuaW1wb3J0IHsgRmlsZUVudHJ5U2l6ZSB9IGZyb20gJy4uLy4uL3R5cGVzL2ZpbGUtbGlzdC12aWV3LnR5cGVzJztcbmltcG9ydCB7IEZpbGVBcnJheSB9IGZyb20gJy4uLy4uL3R5cGVzL2ZpbGVzLnR5cGVzJztcbmltcG9ydCB7IENob25reUljb25OYW1lIH0gZnJvbSAnLi4vLi4vdHlwZXMvaWNvbnMudHlwZXMnO1xuaW1wb3J0IHsgaXNNb2JpbGVEZXZpY2UgfSBmcm9tICcuLi8uLi91dGlsL3ZhbGlkYXRpb24nO1xuaW1wb3J0IHsgU21hcnRGaWxlRW50cnkgfSBmcm9tICcuLi9maWxlLWVudHJ5L1NtYXJ0RmlsZUVudHJ5JztcbmltcG9ydCB7IENob25reUljb25GQSB9IGZyb20gJy4vQ2hvbmt5SWNvbic7XG5cbmV4cG9ydCBjb25zdCBTbWFsbFRodW1ic1NpemU6IEZpbGVFbnRyeVNpemUgPSB7IHdpZHRoOiAxNjUsIGhlaWdodDogMTMwIH07XG5cbmV4cG9ydCBjb25zdCBEZWZhdWx0RW50cnlTaXplOiBGaWxlRW50cnlTaXplID0gU21hbGxUaHVtYnNTaXplO1xuXG5leHBvcnQgY29uc3QgZ2V0Q29sV2lkdGggPSAoXG4gICAgaW5kZXg6IG51bWJlcixcbiAgICBjb2x1bW5Db3VudDogbnVtYmVyLFxuICAgIGVudHJ5U2l6ZTogRmlsZUVudHJ5U2l6ZSxcbiAgICBndXR0ZXJTaXplOiBudW1iZXJcbikgPT4ge1xuICAgIGlmIChpbmRleCA9PT0gY29sdW1uQ291bnQgLSAxKSByZXR1cm4gZW50cnlTaXplLndpZHRoO1xuICAgIHJldHVybiBlbnRyeVNpemUud2lkdGggKyBndXR0ZXJTaXplO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFJvd0hlaWdodCA9IChcbiAgICBpbmRleDogbnVtYmVyLFxuICAgIHJvd0NvdW50OiBudW1iZXIsXG4gICAgZW50cnlTaXplOiBGaWxlRW50cnlTaXplLFxuICAgIGd1dHRlclNpemU6IG51bWJlclxuKSA9PiB7XG4gICAgLy8gV2UgYWx3YXlzIGFkZCBgZ3V0dGVyU2l6ZWAgdG8gaGVpZ2h0IGJlY2F1c2Ugd2UgZG9uJ3Qgd2FudCB0aGUgbGFzdCBpdGVtXG4gICAgLy8gc3RpY2tpbmcgdG8gdGhlIGJvdHRvbSBvZiB0aGUgc2Nyb2xsIHBhbmUuXG4gICAgcmV0dXJuIGVudHJ5U2l6ZS5oZWlnaHQgKyBndXR0ZXJTaXplO1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZUVudHJ5UmVuZGVyZXIgPSAoZmlsZXM6IEZpbGVBcnJheSkgPT4ge1xuICAgIC8vIEFsbCBob29rIHBhcmFtZXRlcnMgc2hvdWxkIGdvIGludG8gYGRlcHNgIGFycmF5XG4gICAgY29uc3QgZW50cnlSZW5kZXJlciA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAoXG4gICAgICAgICAgICB2aXJ0dWFsS2V5OiBzdHJpbmcsXG4gICAgICAgICAgICBpbmRleDogbnVtYmVyLFxuICAgICAgICAgICAgc3R5bGU6IGFueSxcbiAgICAgICAgICAgIHBhcmVudDogYW55LFxuICAgICAgICAgICAgZ3V0dGVyU2l6ZT86IG51bWJlcixcbiAgICAgICAgICAgIGxhc3RSb3c/OiBib29sZWFuLFxuICAgICAgICAgICAgbGFzdENvbHVtbj86IGJvb2xlYW5cbiAgICAgICAgKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGd1dHRlclNpemUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFsYXN0Q29sdW1uKSBzdHlsZS53aWR0aCA9IHN0eWxlLndpZHRoIC0gZ3V0dGVyU2l6ZTtcblxuICAgICAgICAgICAgICAgIC8vIFdlIGFsd2F5cyBzdWJ0cmFjdCBgZ3V0dGVyU2l6ZWAgdG8gaGVpZ2h0IGJlY2F1c2Ugd2UgZG9uJ3Qgd2FudCB0aGVcbiAgICAgICAgICAgICAgICAvLyBsYXN0IGl0ZW0gc3RpY2tpbmcgdG8gdGhlIGJvdHRvbSBvZiB0aGUgc2Nyb2xsIHBhbmUuXG4gICAgICAgICAgICAgICAgc3R5bGUuaGVpZ2h0ID0gc3R5bGUuaGVpZ2h0IC0gZ3V0dGVyU2l6ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gV2hlbiByZW5kZXJpbmcgdGhlIGZpbGUgbGlzdCwgc29tZSBicm93c2VycyBjdXQgb2ZmIHRoZSBsYXN0IHBpeGVsIG9mXG4gICAgICAgICAgICAvLyBhIGZpbGUgZW50cnksIG1ha2luZyBpdCBsb29rIHVnbHkuIFRvIGdldCBhcm91bmQgdGhpcyByZW5kZXJpbmcgYnVnXG4gICAgICAgICAgICAvLyB3ZSBtYWtlIGZpbGUgZW50cmllcyBpbiB0aGUgbGFzdCByb3cvY29sdW1uIDEgcGl4ZWwgc2hvcnRlci5cbiAgICAgICAgICAgIC8vIFRPRE86IEluc3RlYWQgb2Ygc3VidHJhY3RpbmcgMSBoZXJlLCBhZGQgMSB0byB3aWR0aC9oZWlnaHQgb2YgbGFzdFxuICAgICAgICAgICAgLy8gIGNvbHVtbi5cbiAgICAgICAgICAgIGlmIChsYXN0Um93KSBzdHlsZS5oZWlnaHQgPSBzdHlsZS5oZWlnaHQgLSAxO1xuICAgICAgICAgICAgaWYgKGxhc3RDb2x1bW4pIHN0eWxlLndpZHRoID0gc3R5bGUud2lkdGggLSAxO1xuXG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gZmlsZXMubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBmaWxlc1tpbmRleF07XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBmaWxlID8gZmlsZS5pZCA6IGBsb2FkaW5nLWZpbGUtJHt2aXJ0dWFsS2V5fWA7XG5cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGRpdiBrZXk9e2tleX0gY2xhc3NOYW1lPVwiY2hvbmt5LXZpcnR1YWxpemF0aW9uLXdyYXBwZXJcIiBzdHlsZT17c3R5bGV9PlxuICAgICAgICAgICAgICAgICAgICA8U21hcnRGaWxlRW50cnlcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVJZD17ZmlsZSA/IGZpbGUuaWQgOiBudWxsfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheUluZGV4PXtpbmRleH1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIFtmaWxlc11cbiAgICApO1xuXG4gICAgcmV0dXJuIGVudHJ5UmVuZGVyZXI7XG59O1xuXG5leHBvcnQgY29uc3Qgbm9Db250ZW50UmVuZGVyZXIgPSAoaGVpZ2h0PzogbnVtYmVyKSA9PiB7XG4gICAgY29uc3QgcGxhY2Vob2xkZXJQcm9wczogYW55ID0ge1xuICAgICAgICBjbGFzc05hbWU6IGMoe1xuICAgICAgICAgICAgJ2Nob25reS1maWxlLWxpc3Qtbm90aWZpY2F0aW9uJzogdHJ1ZSxcbiAgICAgICAgICAgICdjaG9ua3ktZmlsZS1saXN0LW5vdGlmaWNhdGlvbi1lbXB0eSc6IHRydWUsXG4gICAgICAgIH0pLFxuICAgIH07XG4gICAgaWYgKHR5cGVvZiBoZWlnaHQgPT09ICdudW1iZXInKSBwbGFjZWhvbGRlclByb3BzLnN0eWxlID0geyBoZWlnaHQgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgey4uLnBsYWNlaG9sZGVyUHJvcHN9PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjaG9ua3ktZmlsZS1saXN0LW5vdGlmaWNhdGlvbi1jb250ZW50XCI+XG4gICAgICAgICAgICAgICAgPENob25reUljb25GQSBpY29uPXtDaG9ua3lJY29uTmFtZS5mb2xkZXJPcGVufSAvPlxuICAgICAgICAgICAgICAgICZuYnNwOyBOb3RoaW5nIHRvIHNob3dcbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZUdyaWRSZW5kZXJlciA9IChcbiAgICBmaWxlczogRmlsZUFycmF5LFxuICAgIGVudHJ5U2l6ZTogRmlsZUVudHJ5U2l6ZSxcbiAgICBlbnRyeVJlbmRlcmVyOiBSZXR1cm5UeXBlPHR5cGVvZiB1c2VFbnRyeVJlbmRlcmVyPixcbiAgICB0aHVtYnNHcmlkUmVmOiBSZWFjdC5SZWY8TmlsYWJsZTxHcmlkPj4sXG4gICAgZmlsbFBhcmVudENvbnRhaW5lcjogYm9vbGVhblxuKSA9PiB7XG4gICAgcmV0dXJuIHVzZUNhbGxiYWNrKFxuICAgICAgICAoeyB3aWR0aCwgaGVpZ2h0IH0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlzTW9iaWxlID0gaXNNb2JpbGVEZXZpY2UoKTtcbiAgICAgICAgICAgIGNvbnN0IGd1dHRlciA9IGlzTW9iaWxlID8gNSA6IDg7XG4gICAgICAgICAgICBjb25zdCBzY3JvbGxiYXIgPSAhZmlsbFBhcmVudENvbnRhaW5lciB8fCBpc01vYmlsZSA/IDAgOiAxNjtcblxuICAgICAgICAgICAgLy8gVE9ETzogY29uc3QgaXNMYXJnZVRodW1icyA9IHZpZXcgPT09IEZpbGVWaWV3LkxhcmdlVGh1bWJzO1xuICAgICAgICAgICAgY29uc3QgY29sdW1uQ291bnRGbG9hdCA9XG4gICAgICAgICAgICAgICAgKHdpZHRoICsgZ3V0dGVyIC0gc2Nyb2xsYmFyKSAvIChlbnRyeVNpemUud2lkdGggKyBndXR0ZXIpO1xuICAgICAgICAgICAgY29uc3QgY29sdW1uQ291bnQgPSBNYXRoLm1heCgxLCBNYXRoLmZsb29yKGNvbHVtbkNvdW50RmxvYXQpKTtcbiAgICAgICAgICAgIGNvbnN0IHJvd0NvdW50ID0gTWF0aC5jZWlsKGZpbGVzLmxlbmd0aCAvIGNvbHVtbkNvdW50KTtcblxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8R3JpZFxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBtaW5IZWlnaHQ6IGVudHJ5U2l6ZS5oZWlnaHQgKyAxMCB9fVxuICAgICAgICAgICAgICAgICAgICByZWY9e3RodW1ic0dyaWRSZWYgYXMgYW55fVxuICAgICAgICAgICAgICAgICAgICBjZWxsUmVuZGVyZXI9eyhkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGRhdGEucm93SW5kZXggKiBjb2x1bW5Db3VudCArIGRhdGEuY29sdW1uSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW50cnlSZW5kZXJlcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IC4uLmRhdGEuc3R5bGUgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnBhcmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBndXR0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5yb3dJbmRleCA9PT0gcm93Q291bnQgLSAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuY29sdW1uSW5kZXggPT09IGNvbHVtbkNvdW50IC0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgbm9Db250ZW50UmVuZGVyZXI9eygpID0+IG5vQ29udGVudFJlbmRlcmVyKGVudHJ5U2l6ZS5oZWlnaHQpfVxuICAgICAgICAgICAgICAgICAgICByb3dDb3VudD17cm93Q291bnR9XG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbkNvdW50PXtjb2x1bW5Db3VudH1cbiAgICAgICAgICAgICAgICAgICAgY29sdW1uV2lkdGg9eyh7IGluZGV4IH0pID0+XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRDb2xXaWR0aChpbmRleCwgY29sdW1uQ291bnQsIGVudHJ5U2l6ZSwgZ3V0dGVyKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJvd0hlaWdodD17KHsgaW5kZXggfSkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIGdldFJvd0hlaWdodChpbmRleCwgcm93Q291bnQsIGVudHJ5U2l6ZSwgZ3V0dGVyKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG92ZXJzY2FuUm93Q291bnQ9ezJ9XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoPXt3aWR0aH1cbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyU3R5bGU9e3sgbWluSGVpZ2h0OiA1MCB9fVxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9e3R5cGVvZiBoZWlnaHQgPT09ICdudW1iZXInID8gaGVpZ2h0IDogNTAwfVxuICAgICAgICAgICAgICAgICAgICBhdXRvSGVpZ2h0PXshZmlsbFBhcmVudENvbnRhaW5lcn1cbiAgICAgICAgICAgICAgICAgICAgdGFiSW5kZXg9e251bGx9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIFtmaWxlcywgZW50cnlTaXplLCBlbnRyeVJlbmRlcmVyLCB0aHVtYnNHcmlkUmVmLCBmaWxsUGFyZW50Q29udGFpbmVyXVxuICAgICk7XG59O1xuIiwiaW1wb3J0IHsgYXRvbSB9IGZyb20gJ3JlY29pbCc7XG5cbmltcG9ydCB7IERlZmF1bHRFbnRyeVNpemUgfSBmcm9tICcuLi9jb21wb25lbnRzL2V4dGVybmFsL0ZpbGVMaXN0LXZpcnR1YWxpemF0aW9uJztcbmltcG9ydCB7IEZpbGVFbnRyeVNpemUgfSBmcm9tICcuLi90eXBlcy9maWxlLWxpc3Qtdmlldy50eXBlcyc7XG5cbi8vXG4vLyA9PT09IEF0b21zXG5leHBvcnQgY29uc3QgZmlsZUVudHJ5U2l6ZVN0YXRlID0gYXRvbTxGaWxlRW50cnlTaXplPih7XG4gICAga2V5OiAnZmlsZUVudHJ5U2l6ZVN0YXRlJyxcbiAgICBkZWZhdWx0OiBEZWZhdWx0RW50cnlTaXplLFxufSk7XG4iLCJpbXBvcnQgeyBhdG9tIH0gZnJvbSAncmVjb2lsJztcblxuLy9cbi8vID09PT0gQXRvbXNcbmV4cG9ydCBjb25zdCBzZWFyY2hCYXJFbmFibGVkU3RhdGUgPSBhdG9tPGJvb2xlYW4+KHtcbiAgICBrZXk6ICdzZWFyY2hCYXJFbmFibGVkU3RhdGUnLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxufSk7XG5cbmV4cG9ydCBjb25zdCBzZWFyY2hCYXJWaXNpYmxlU3RhdGUgPSBhdG9tPGJvb2xlYW4+KHtcbiAgICBrZXk6ICdzZWFyY2hCYXJWaXNpYmxlU3RhdGUnLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxufSk7XG5cbmV4cG9ydCBjb25zdCBzZWFyY2hGaWx0ZXJTdGF0ZSA9IGF0b208c3RyaW5nPih7XG4gICAga2V5OiAnc2VhcmNoRmlsdGVyU3RhdGUnLFxuICAgIGRlZmF1bHQ6ICcnLFxufSk7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEFueUZ1bmN0aW9uIH0gZnJvbSAndHNkZWYnO1xuXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuL2xvZ2dlcic7XG5cbmV4cG9ydCBjb25zdCB1c2VEZWJvdW5jZSA9IDxUPihcbiAgICB2YWx1ZTogVCxcbiAgICBkZWxheTogbnVtYmVyXG4pOiBbVCwgUmVhY3QuRGlzcGF0Y2g8UmVhY3QuU2V0U3RhdGVBY3Rpb248VD4+XSA9PiB7XG4gICAgY29uc3QgW2RlYm91bmNlZFZhbHVlLCBzZXREZWJvdW5jZWRWYWx1ZV0gPSB1c2VTdGF0ZSh2YWx1ZSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCBoYW5kbGVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBzZXREZWJvdW5jZWRWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIH0sIGRlbGF5KTtcblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGhhbmRsZXIpO1xuICAgICAgICB9O1xuICAgIH0sIFt2YWx1ZSwgZGVsYXldKTtcblxuICAgIHJldHVybiBbZGVib3VuY2VkVmFsdWUsIHNldERlYm91bmNlZFZhbHVlXTtcbn07XG5cbmNvbnN0IFVOSU5JVElBTElaRURfU0VOVElORUwgPSB7fTtcbmV4cG9ydCBjb25zdCB1c2VTdGF0aWNWYWx1ZSA9IDxUPihmYWN0b3J5OiAoKSA9PiBUKTogVCA9PiB7XG4gICAgY29uc3QgdmFsdWVSZWYgPSB1c2VSZWY8VD4oVU5JTklUSUFMSVpFRF9TRU5USU5FTCBhcyBUKTtcbiAgICBpZiAodmFsdWVSZWYuY3VycmVudCA9PT0gVU5JTklUSUFMSVpFRF9TRU5USU5FTCkgdmFsdWVSZWYuY3VycmVudCA9IGZhY3RvcnkoKTtcbiAgICByZXR1cm4gdmFsdWVSZWYuY3VycmVudDtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VJbnN0YW5jZVZhcmlhYmxlID0gPFQ+KHZhbHVlOiBUKSA9PiB7XG4gICAgY29uc3QgcmVmID0gdXNlUmVmKHZhbHVlKTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICByZWYuY3VycmVudCA9IHZhbHVlO1xuICAgIH0sIFtyZWYsIHZhbHVlXSk7XG4gICAgcmV0dXJuIHJlZjtcbn07XG5cbmludGVyZmFjZSBVc2VDbGlja0xpc3RlbmVyUGFyYW1zIHtcbiAgICBvbkNsaWNrPzogKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB2b2lkO1xuICAgIG9uSW5zaWRlQ2xpY2s/OiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG4gICAgb25PdXRzaWRlQ2xpY2s/OiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBjb25zdCB1c2VDbGlja0xpc3RlbmVyID0gPFQgZXh0ZW5kcyBIVE1MRWxlbWVudCA9IEhUTUxEaXZFbGVtZW50PihcbiAgICBwYXJhbXM6IFVzZUNsaWNrTGlzdGVuZXJQYXJhbXNcbikgPT4ge1xuICAgIGNvbnN0IHsgb25DbGljaywgb25JbnNpZGVDbGljaywgb25PdXRzaWRlQ2xpY2sgfSA9IHBhcmFtcztcbiAgICBjb25zdCB0cmlnZ2VyQ29tcG9uZW50UmVmID0gdXNlUmVmPFQ+KG51bGwpO1xuXG4gICAgY29uc3QgY2xpY2tMaXN0ZW5lciA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAhdHJpZ2dlckNvbXBvbmVudFJlZi5jdXJyZW50IHx8XG4gICAgICAgICAgICAgICAgdHJpZ2dlckNvbXBvbmVudFJlZi5jdXJyZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCBhcyBhbnkpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAvLyBDbGljayBvcmlnaW5hdGVkIGZyb20gaW5zaWRlLlxuICAgICAgICAgICAgICAgIGlmIChvbkluc2lkZUNsaWNrKSBvbkluc2lkZUNsaWNrKGV2ZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQ2xpY2sgb3JpZ2luYXRlZCBmcm9tIG91dHNpZGUgaW5zaWRlLlxuICAgICAgICAgICAgICAgIGlmIChvbk91dHNpZGVDbGljaykgb25PdXRzaWRlQ2xpY2soZXZlbnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob25DbGljaykgb25DbGljayhldmVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIFtvbkNsaWNrLCBvbkluc2lkZUNsaWNrLCBvbk91dHNpZGVDbGljaywgdHJpZ2dlckNvbXBvbmVudFJlZl1cbiAgICApO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgY2xpY2tMaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgY2xpY2tMaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgICB9O1xuICAgIH0sIFtjbGlja0xpc3RlbmVyXSk7XG5cbiAgICByZXR1cm4gdHJpZ2dlckNvbXBvbmVudFJlZjtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VSZWZDYWxsYmFja1dpdGhFcnJvckhhbmRsaW5nID0gPEZ1bmNUeXBlIGV4dGVuZHMgQW55RnVuY3Rpb24+KFxuICAgIGNhbGxiYWNrRnVuYzogRnVuY1R5cGUsXG4gICAgZGlzcGxheU5hbWU6IHN0cmluZ1xuKSA9PiB7XG4gICAgY29uc3QgY2FsbGJhY2tGdW5jUmVmID0gdXNlSW5zdGFuY2VWYXJpYWJsZShjYWxsYmFja0Z1bmMpO1xuICAgIHJldHVybiB1c2VDYWxsYmFjayhcbiAgICAgICAgKC4uLmFyZ3M6IFBhcmFtZXRlcnM8RnVuY1R5cGU+KSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrRnVuY1JlZi5jdXJyZW50KC4uLmFyZ3MpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBMb2dnZXIuZXJyb3IoYEFuIGVycm9yIG9jY3VycmVkIGluc2lkZSAke2Rpc3BsYXlOYW1lfTpgLCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFtjYWxsYmFja0Z1bmNSZWYsIGRpc3BsYXlOYW1lXVxuICAgICk7XG59O1xuIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVJlY29pbFZhbHVlLCB1c2VTZXRSZWNvaWxTdGF0ZSB9IGZyb20gJ3JlY29pbCc7XG5pbXBvcnQgeyBOdWxsYWJsZSB9IGZyb20gJ3RzZGVmJztcblxuaW1wb3J0IHtcbiAgICBkaXNwYXRjaEZpbGVBY3Rpb25TdGF0ZSxcbiAgICBmaWxlQWN0aW9uRGF0YVN0YXRlLFxuICAgIGZpbGVBY3Rpb25NYXBTdGF0ZSxcbiAgICBmaWxlQWN0aW9uU2VsZWN0ZWRGaWxlc0NvdW50U3RhdGUsXG4gICAgZmlsZUFjdGlvbnNTdGF0ZSxcbiAgICByZXF1ZXN0RmlsZUFjdGlvblN0YXRlLFxufSBmcm9tICcuLi9yZWNvaWwvZmlsZS1hY3Rpb25zLnJlY29pbCc7XG5pbXBvcnQgeyBwYXJlbnRGb2xkZXJTdGF0ZSB9IGZyb20gJy4uL3JlY29pbC9maWxlcy5yZWNvaWwnO1xuaW1wb3J0IHsgc2VhcmNoQmFyVmlzaWJsZVN0YXRlIH0gZnJvbSAnLi4vcmVjb2lsL3NlYXJjaC5yZWNvaWwnO1xuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkhhbmRsZXIgfSBmcm9tICcuLi90eXBlcy9maWxlLWFjdGlvbnMudHlwZXMnO1xuaW1wb3J0IHtcbiAgICB1c2VJbnRlcm5hbEZpbGVBY3Rpb25EaXNwYXRjaGVyLFxuICAgIHVzZUludGVybmFsRmlsZUFjdGlvblJlcXVlc3Rlcixcbn0gZnJvbSAnLi9maWxlLWFjdGlvbi1oYW5kbGVycyc7XG5pbXBvcnQgeyBDaG9ua3lBY3Rpb25zIH0gZnJvbSAnLi9maWxlLWFjdGlvbnMtZGVmaW5pdGlvbnMnO1xuaW1wb3J0IHsgRmlsZUhlbHBlciB9IGZyb20gJy4vZmlsZS1oZWxwZXInO1xuaW1wb3J0IHsgdXNlUmVmQ2FsbGJhY2tXaXRoRXJyb3JIYW5kbGluZyB9IGZyb20gJy4vaG9va3MtaGVscGVycyc7XG5cbmV4cG9ydCBjb25zdCB1c2VGaWxlQWN0aW9ucyA9IChcbiAgICBmaWxlQWN0aW9uczogRmlsZUFjdGlvbltdLFxuICAgIGV4dGVybmFsRmlsZUFjdG9uSGFuZGxlcjogTnVsbGFibGU8RmlsZUFjdGlvbkhhbmRsZXI+XG4pID0+IHtcbiAgICAvLyBSZWNvaWwgc3RhdGU6IFB1dCBmaWxlIGFjdGlvbnMgYW5kIGZpbGUgYWN0aW9uIG1hcCBpbnRvIHN0YXRlXG4gICAgY29uc3Qgc2V0RmlsZUFjdGlvbnMgPSB1c2VTZXRSZWNvaWxTdGF0ZShmaWxlQWN0aW9uc1N0YXRlKTtcbiAgICBjb25zdCBzZXRGaWxlQWN0aW9uTWFwID0gdXNlU2V0UmVjb2lsU3RhdGUoZmlsZUFjdGlvbk1hcFN0YXRlKTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCBmaWxlQWN0aW9uTWFwID0ge307XG4gICAgICAgIGZvciAoY29uc3QgYWN0aW9uIG9mIGZpbGVBY3Rpb25zKSBmaWxlQWN0aW9uTWFwW2FjdGlvbi5pZF0gPSBhY3Rpb247XG5cbiAgICAgICAgc2V0RmlsZUFjdGlvbnMoZmlsZUFjdGlvbnMpO1xuICAgICAgICBzZXRGaWxlQWN0aW9uTWFwKGZpbGVBY3Rpb25NYXApO1xuICAgIH0sIFtmaWxlQWN0aW9ucywgc2V0RmlsZUFjdGlvbnMsIHNldEZpbGVBY3Rpb25NYXBdKTtcblxuICAgIC8vIFByZXBhcmUgZmlsZSBhY3Rpb24gZGlzcGF0Y2hlciAodXNlZCB0byBkaXNwYXRjaCBhY3Rpb25zIHRvIHVzZXJzKVxuICAgIGNvbnN0IGludGVybmFsRmlsZUFjdGlvbkRpc3BhdGNoZXIgPSB1c2VJbnRlcm5hbEZpbGVBY3Rpb25EaXNwYXRjaGVyKFxuICAgICAgICBleHRlcm5hbEZpbGVBY3RvbkhhbmRsZXJcbiAgICApO1xuICAgIC8vIFJlY29pbCBzdGF0ZTogUHV0IGZpbGUgYWN0aW9uIGRpc3BhdGNoZXIgaW50byBSZWNvaWwgc3RhdGUsIGluIGEgd2F5IHRoYXQgd2lsbFxuICAgIC8vIG5vdCBjYXVzZSB1bm5lY2Vzc2FyeSByZS1yZW5kZXJzLlxuICAgIGNvbnN0IHNhZmVJbnRlcm5hbEZpbGVBY3Rpb25EaXNwYXRjaGVyID0gdXNlUmVmQ2FsbGJhY2tXaXRoRXJyb3JIYW5kbGluZyhcbiAgICAgICAgaW50ZXJuYWxGaWxlQWN0aW9uRGlzcGF0Y2hlcixcbiAgICAgICAgJ3RoZSBpbnRlcm5hbCBmaWxlIGFjdGlvbiByZXF1ZXN0ZXInXG4gICAgKTtcbiAgICBjb25zdCBzZXREaXNwYXRjaEZpbGVBY3Rpb24gPSB1c2VTZXRSZWNvaWxTdGF0ZShkaXNwYXRjaEZpbGVBY3Rpb25TdGF0ZSk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHNldERpc3BhdGNoRmlsZUFjdGlvbigoKSA9PiBzYWZlSW50ZXJuYWxGaWxlQWN0aW9uRGlzcGF0Y2hlciksIFtcbiAgICAgICAgc2FmZUludGVybmFsRmlsZUFjdGlvbkRpc3BhdGNoZXIsXG4gICAgICAgIHNldERpc3BhdGNoRmlsZUFjdGlvbixcbiAgICBdKTtcblxuICAgIC8vIFByZXBhcmUgZmlsZSBhY3Rpb24gcmVxdWVzdGVyICh1c2VkIHRvIHJlcXVlc3QgYSBmaWxlIGFjdGlvbiB0byBiZSBkaXNwYXRjaGVkXG4gICAgLy8gaW50ZXJuYWxseSlcbiAgICBjb25zdCBpbnRlcm5hbEZpbGVBY3Rpb25SZXF1ZXN0ZXIgPSB1c2VJbnRlcm5hbEZpbGVBY3Rpb25SZXF1ZXN0ZXIoKTtcbiAgICAvLyBSZWNvaWwgc3RhdGU6IFB1dCBmaWxlIGFjdGlvbiByZXF1ZXN0ZXIgaW50byBSZWNvaWwgc3RhdGUsIGluIGEgd2F5IHRoYXQgd2lsbFxuICAgIC8vIG5vdCBjYXVzZSB1bm5lY2Vzc2FyeSByZS1yZW5kZXJzLlxuICAgIGNvbnN0IHNhZmVJbnRlcm5hbEZpbGVBY3Rpb25SZXF1ZXN0ZXIgPSB1c2VSZWZDYWxsYmFja1dpdGhFcnJvckhhbmRsaW5nKFxuICAgICAgICBpbnRlcm5hbEZpbGVBY3Rpb25SZXF1ZXN0ZXIsXG4gICAgICAgICd0aGUgaW50ZXJuYWwgZmlsZSBhY3Rpb24gcmVxdWVzdGVyJ1xuICAgICk7XG4gICAgY29uc3Qgc2V0UmVxdWVzdEZpbGVBY3Rpb24gPSB1c2VTZXRSZWNvaWxTdGF0ZShyZXF1ZXN0RmlsZUFjdGlvblN0YXRlKTtcbiAgICB1c2VFZmZlY3QoKCkgPT4gc2V0UmVxdWVzdEZpbGVBY3Rpb24oKCkgPT4gc2FmZUludGVybmFsRmlsZUFjdGlvblJlcXVlc3RlciksIFtcbiAgICAgICAgc2FmZUludGVybmFsRmlsZUFjdGlvblJlcXVlc3RlcixcbiAgICAgICAgc2V0UmVxdWVzdEZpbGVBY3Rpb24sXG4gICAgXSk7XG5cbiAgICByZXR1cm4geyBpbnRlcm5hbEZpbGVBY3Rpb25EaXNwYXRjaGVyLCBpbnRlcm5hbEZpbGVBY3Rpb25SZXF1ZXN0ZXIgfTtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VGaWxlQWN0aW9uVHJpZ2dlciA9IChmaWxlQWN0aW9uSWQ6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IHJlcXVlc3RGaWxlQWN0aW9uID0gdXNlUmVjb2lsVmFsdWUocmVxdWVzdEZpbGVBY3Rpb25TdGF0ZSk7XG4gICAgcmV0dXJuIHVzZUNhbGxiYWNrKCgpID0+IHJlcXVlc3RGaWxlQWN0aW9uKGZpbGVBY3Rpb25JZCksIFtcbiAgICAgICAgZmlsZUFjdGlvbklkLFxuICAgICAgICByZXF1ZXN0RmlsZUFjdGlvbixcbiAgICBdKTtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VGaWxlQWN0aW9uTW9kaWZpZXJzID0gKFxuICAgIGZpbGVBY3Rpb25JZDogc3RyaW5nXG4pOiB7IGFjdGl2ZTogYm9vbGVhbjsgZGlzYWJsZWQ6IGJvb2xlYW4gfSA9PiB7XG4gICAgY29uc3QgcGFyZW50Rm9sZGVyID0gdXNlUmVjb2lsVmFsdWUocGFyZW50Rm9sZGVyU3RhdGUpO1xuICAgIGNvbnN0IHNlYXJjaEJhclZpc2libGUgPSB1c2VSZWNvaWxWYWx1ZShzZWFyY2hCYXJWaXNpYmxlU3RhdGUpO1xuICAgIGNvbnN0IGFjdGlvbiA9IHVzZVJlY29pbFZhbHVlKGZpbGVBY3Rpb25EYXRhU3RhdGUoZmlsZUFjdGlvbklkKSk7XG4gICAgY29uc3QgYWN0aW9uU2VsZWN0aW9uU2l6ZSA9IHVzZVJlY29pbFZhbHVlKFxuICAgICAgICBmaWxlQWN0aW9uU2VsZWN0ZWRGaWxlc0NvdW50U3RhdGUoZmlsZUFjdGlvbklkKVxuICAgICk7XG5cbiAgICBjb25zdCBhY3Rpb25TZWxlY3Rpb25FbXB0eSA9IGFjdGlvblNlbGVjdGlvblNpemUgPT09IDA7XG5cbiAgICByZXR1cm4gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIGlmICghYWN0aW9uKSByZXR1cm4geyBhY3RpdmU6IGZhbHNlLCBkaXNhYmxlZDogdHJ1ZSB9O1xuXG4gICAgICAgIGNvbnN0IGFjdGl2ZSA9IGFjdGlvbi5pZCA9PT0gQ2hvbmt5QWN0aW9ucy5Ub2dnbGVTZWFyY2guaWQgJiYgc2VhcmNoQmFyVmlzaWJsZTtcbiAgICAgICAgbGV0IGRpc2FibGVkOiBib29sZWFuID0gISFhY3Rpb24ucmVxdWlyZXNTZWxlY3Rpb24gJiYgYWN0aW9uU2VsZWN0aW9uRW1wdHk7XG5cbiAgICAgICAgaWYgKGFjdGlvbi5pZCA9PT0gQ2hvbmt5QWN0aW9ucy5PcGVuUGFyZW50Rm9sZGVyLmlkKSB7XG4gICAgICAgICAgICAvLyBXZSB0cmVhdCBgb3Blbl9wYXJlbnRfZm9sZGVyYCBmaWxlIGFjdGlvbiBhcyBhIHNwZWNpYWwgY2FzZSBhcyBpdFxuICAgICAgICAgICAgLy8gcmVxdWlyZXMgdGhlIHBhcmVudCBmb2xkZXIgdG8gYmUgcHJlc2VudCB0byB3b3JrLi4uXG4gICAgICAgICAgICBkaXNhYmxlZCA9IGRpc2FibGVkIHx8ICFGaWxlSGVscGVyLmlzT3BlbmFibGUocGFyZW50Rm9sZGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IGFjdGl2ZSwgZGlzYWJsZWQgfTtcbiAgICB9LCBbYWN0aW9uLCBzZWFyY2hCYXJWaXNpYmxlLCBwYXJlbnRGb2xkZXIsIGFjdGlvblNlbGVjdGlvbkVtcHR5XSk7XG59O1xuIiwiaW1wb3J0IFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VSZWNvaWxWYWx1ZSB9IGZyb20gJ3JlY29pbCc7XG5pbXBvcnQgeyBOdWxsYWJsZSwgVW5kZWZpbmFibGUgfSBmcm9tICd0c2RlZic7XG5cbmltcG9ydCB7XG4gICAgZGlzcGF0Y2hGaWxlQWN0aW9uU3RhdGUsXG4gICAgZmlsZUFjdGlvbk1hcFN0YXRlLFxufSBmcm9tICcuLi9yZWNvaWwvZmlsZS1hY3Rpb25zLnJlY29pbCc7XG5pbXBvcnQgeyBmaWxlc1N0YXRlIH0gZnJvbSAnLi4vcmVjb2lsL2ZpbGVzLnJlY29pbCc7XG5pbXBvcnQgeyBzZWxlY3Rpb25TdGF0ZSB9IGZyb20gJy4uL3JlY29pbC9zZWxlY3Rpb24ucmVjb2lsJztcbmltcG9ydCB7IGRpc3BhdGNoU3BlY2lhbEFjdGlvblN0YXRlIH0gZnJvbSAnLi4vcmVjb2lsL3NwZWNpYWwtYWN0aW9ucy5yZWNvaWwnO1xuaW1wb3J0IHtcbiAgICBGaWxlQWN0aW9uLFxuICAgIEZpbGVBY3Rpb25EYXRhLFxuICAgIEZpbGVBY3Rpb25IYW5kbGVyLFxuICAgIEludGVybmFsRmlsZUFjdGlvbkRpc3BhdGNoZXIsXG59IGZyb20gJy4uL3R5cGVzL2ZpbGUtYWN0aW9ucy50eXBlcyc7XG5pbXBvcnQgeyBTcGVjaWFsQWN0aW9uIH0gZnJvbSAnLi4vdHlwZXMvc3BlY2lhbC1hY3Rpb25zLnR5cGVzJztcbmltcG9ydCB7IHVzZUluc3RhbmNlVmFyaWFibGUgfSBmcm9tICcuL2hvb2tzLWhlbHBlcnMnO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgU2VsZWN0aW9uSGVscGVyIH0gZnJvbSAnLi9zZWxlY3Rpb24nO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdmFsaWRhdGlvbic7XG5cbmV4cG9ydCBjb25zdCB1c2VJbnRlcm5hbEZpbGVBY3Rpb25EaXNwYXRjaGVyID0gKFxuICAgIGV4dGVybmFsRmlsZUFjdG9uSGFuZGxlcjogTnVsbGFibGU8RmlsZUFjdGlvbkhhbmRsZXI+XG4pOiBJbnRlcm5hbEZpbGVBY3Rpb25EaXNwYXRjaGVyID0+IHtcbiAgICBjb25zdCBleHRlcm5hbEZpbGVBY3RvbkhhbmRsZXJSZWYgPSB1c2VJbnN0YW5jZVZhcmlhYmxlKGV4dGVybmFsRmlsZUFjdG9uSGFuZGxlcik7XG4gICAgY29uc3QgZmlsZUFjdGlvbk1hcFJlZiA9IHVzZUluc3RhbmNlVmFyaWFibGUodXNlUmVjb2lsVmFsdWUoZmlsZUFjdGlvbk1hcFN0YXRlKSk7XG5cbiAgICBjb25zdCBkaXNwYXRjaEZpbGVBY3Rpb246IEludGVybmFsRmlsZUFjdGlvbkRpc3BhdGNoZXIgPSB1c2VDYWxsYmFjayhcbiAgICAgICAgKGFjdGlvbkRhdGEpID0+IHtcbiAgICAgICAgICAgIExvZ2dlci5kZWJ1ZyhgRklMRSBBQ1RJT04gRElTUEFUQ0g6YCwgYWN0aW9uRGF0YSk7XG4gICAgICAgICAgICBjb25zdCB7IGFjdGlvbklkIH0gPSBhY3Rpb25EYXRhO1xuXG4gICAgICAgICAgICBjb25zdCBhY3Rpb24gPSBmaWxlQWN0aW9uTWFwUmVmLmN1cnJlbnRbYWN0aW9uSWRdO1xuICAgICAgICAgICAgaWYgKGFjdGlvbikge1xuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGV4dGVybmFsRmlsZUFjdG9uSGFuZGxlclJlZi5jdXJyZW50KSkge1xuICAgICAgICAgICAgICAgICAgICBQcm9taXNlLnJlc29sdmUoXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRlcm5hbEZpbGVBY3RvbkhhbmRsZXJSZWYuY3VycmVudChhY3Rpb24sIGFjdGlvbkRhdGEpXG4gICAgICAgICAgICAgICAgICAgICkuY2F0Y2goKGVycm9yKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBVc2VyLWRlZmluZWQgXCJvbkFjdGlvblwiIGhhbmRsZXIgdGhyZXcgYW4gZXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBMb2dnZXIuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIGBJbnRlcm5hbCBjb21wb25lbnRzIGRpc3BhdGNoZWQgYSBcIiR7YWN0aW9uSWR9XCIgZmlsZSBhY3Rpb24sIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYGJ1dCBzdWNoIGFjdGlvbiB3YXMgbm90IHJlZ2lzdGVyZWQuYFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFtleHRlcm5hbEZpbGVBY3RvbkhhbmRsZXJSZWYsIGZpbGVBY3Rpb25NYXBSZWZdXG4gICAgKTtcblxuICAgIHJldHVybiBkaXNwYXRjaEZpbGVBY3Rpb247XG59O1xuXG5leHBvcnQgY29uc3QgdXNlSW50ZXJuYWxGaWxlQWN0aW9uUmVxdWVzdGVyID0gKCkgPT4ge1xuICAgIC8vIFdyaXRlIFJlY29pbCBzdGF0ZSB0byBpbnN0YW5jZSB2YXJpYWJsZXMgc28gd2UgY2FuIGFjY2VzcyB0aGVzZSB2YWx1ZXMgZnJvbVxuICAgIC8vIHRoZSBjYWxsYmFjayBiZWxvdyB3aXRob3V0IHJlLWNyZWF0aW5nIHRoZSBjYWxsYmFjayBmdW5jdGlvblxuICAgIGNvbnN0IGZpbGVBY3Rpb25NYXBSZWYgPSB1c2VJbnN0YW5jZVZhcmlhYmxlKHVzZVJlY29pbFZhbHVlKGZpbGVBY3Rpb25NYXBTdGF0ZSkpO1xuICAgIGNvbnN0IGRpc3BhdGNoRmlsZUFjdGlvblJlZiA9IHVzZUluc3RhbmNlVmFyaWFibGUoXG4gICAgICAgIHVzZVJlY29pbFZhbHVlKGRpc3BhdGNoRmlsZUFjdGlvblN0YXRlKVxuICAgICk7XG4gICAgY29uc3QgZGlzcGF0Y2hTcGVjaWFsQWN0aW9uUmVmID0gdXNlSW5zdGFuY2VWYXJpYWJsZShcbiAgICAgICAgdXNlUmVjb2lsVmFsdWUoZGlzcGF0Y2hTcGVjaWFsQWN0aW9uU3RhdGUpXG4gICAgKTtcbiAgICBjb25zdCBmaWxlc1JlZiA9IHVzZUluc3RhbmNlVmFyaWFibGUodXNlUmVjb2lsVmFsdWUoZmlsZXNTdGF0ZSkpO1xuICAgIGNvbnN0IHNlbGVjdGlvblJlZiA9IHVzZUluc3RhbmNlVmFyaWFibGUodXNlUmVjb2lsVmFsdWUoc2VsZWN0aW9uU3RhdGUpKTtcblxuICAgIHJldHVybiB1c2VDYWxsYmFjayhcbiAgICAgICAgKGZpbGVBY3Rpb25JZDogc3RyaW5nKTogdm9pZCA9PiB7XG4gICAgICAgICAgICBMb2dnZXIuZGVidWcoYEZJTEUgQUNUSU9OIFJFUVVFU1Q6YCwgZmlsZUFjdGlvbklkKTtcblxuICAgICAgICAgICAgY29uc3QgYWN0aW9uOiBVbmRlZmluYWJsZTxGaWxlQWN0aW9uPiA9XG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbk1hcFJlZi5jdXJyZW50W2ZpbGVBY3Rpb25JZF07XG4gICAgICAgICAgICBpZiAoIWFjdGlvbikge1xuICAgICAgICAgICAgICAgIExvZ2dlci53YXJuKFxuICAgICAgICAgICAgICAgICAgICBgSW50ZXJuYWwgY29tcG9uZW50cyByZXF1ZXN0ZWQgdGhlIFwiJHtmaWxlQWN0aW9uSWR9XCIgZmlsZSBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBhY3Rpb24sIGJ1dCBzdWNoIGFjdGlvbiB3YXMgbm90IHJlZ2lzdGVyZWQuYFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEZXRlcm1pbmUgZmlsZXMgZm9yIHRoZSBhY3Rpb24gaWYgYWN0aW9uIHJlcXVpcmVzIHNlbGVjdGlvblxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRGaWxlc0ZvckFjdGlvbiA9IGFjdGlvbi5yZXF1aXJlc1NlbGVjdGlvblxuICAgICAgICAgICAgICAgID8gU2VsZWN0aW9uSGVscGVyLmdldFNlbGVjdGVkRmlsZXMoXG4gICAgICAgICAgICAgICAgICAgICAgZmlsZXNSZWYuY3VycmVudCxcbiAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb25SZWYuY3VycmVudCxcbiAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24uZmlsZUZpbHRlclxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgYWN0aW9uLnJlcXVpcmVzU2VsZWN0aW9uICYmXG4gICAgICAgICAgICAgICAgKCFzZWxlY3RlZEZpbGVzRm9yQWN0aW9uIHx8IHNlbGVjdGVkRmlsZXNGb3JBY3Rpb24ubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLndhcm4oXG4gICAgICAgICAgICAgICAgICAgIGBJbnRlcm5hbCBjb21wb25lbnRzIHJlcXVlc3RlZCB0aGUgXCIke2ZpbGVBY3Rpb25JZH1cIiBmaWxlIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYGFjdGlvbiwgYnV0IHRoZSBzZWxlY3Rpb24gZm9yIHRoaXMgYWN0aW9uIHdhcyBlbXB0eS4gVGhpcyBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBtaWdodCBhIGJ1ZyBpbiB0aGUgY29kZSBvZiB0aGUgcHJlc2VudGF0aW9uYWwgY29tcG9uZW50cy5gXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGFjdGlvbkRhdGE6IEZpbGVBY3Rpb25EYXRhID0ge1xuICAgICAgICAgICAgICAgIGFjdGlvbklkOiBhY3Rpb24uaWQsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgZmlsZXM6IHNlbGVjdGVkRmlsZXNGb3JBY3Rpb24sXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBkaXNwYXRjaEZpbGVBY3Rpb25SZWYuY3VycmVudChhY3Rpb25EYXRhKTtcblxuICAgICAgICAgICAgY29uc3Qgc3BlY2lhbEFjdGlvbklkID0gYWN0aW9uLnNwZWNpYWxBY3Rpb25Ub0Rpc3BhdGNoO1xuICAgICAgICAgICAgaWYgKHNwZWNpYWxBY3Rpb25JZCkge1xuICAgICAgICAgICAgICAgIC8vIFdlIGNhbiBvbmx5IGRpc3BhdGNoIFwic2ltcGxlXCIgc3BlY2lhbCBhY3Rpb25zLCBpLmUuIHNwZWNpYWxcbiAgICAgICAgICAgICAgICAvLyBhY3Rpb25zIHRoYXQgZG8gbm90IHJlcXVpcmUgYWRkaXRpb25hbCBwYXJhbWV0ZXJzLlxuICAgICAgICAgICAgICAgIHN3aXRjaCAoc3BlY2lhbEFjdGlvbklkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgU3BlY2lhbEFjdGlvbi5PcGVuUGFyZW50Rm9sZGVyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFNwZWNpYWxBY3Rpb24uVG9nZ2xlU2VhcmNoQmFyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFNwZWNpYWxBY3Rpb24uU2VsZWN0QWxsRmlsZXM6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgU3BlY2lhbEFjdGlvbi5DbGVhclNlbGVjdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoU3BlY2lhbEFjdGlvblJlZi5jdXJyZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25JZDogc3BlY2lhbEFjdGlvbklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZ2dlci53YXJuKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBGaWxlIGFjdGlvbiBcIiR7YWN0aW9uLmlkfVwiIHRyaWVkIHRvIGRpc3BhdGNoIGEgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBzcGVjaWFsIGFjdGlvbiBcIiR7c3BlY2lhbEFjdGlvbklkfVwiLCBidXQgdGhhdCBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHNwZWNpYWwgYWN0aW9uIHdhcyBub3QgbWFya2VkIGFzIHNpbXBsZS4gRmlsZSBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYGFjdGlvbnMgY2FuIG9ubHkgdHJpZ2dlciBzaW1wbGUgc3BlY2lhbCBhY3Rpb25zLmBcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBbXG4gICAgICAgICAgICBmaWxlQWN0aW9uTWFwUmVmLFxuICAgICAgICAgICAgZGlzcGF0Y2hGaWxlQWN0aW9uUmVmLFxuICAgICAgICAgICAgZGlzcGF0Y2hTcGVjaWFsQWN0aW9uUmVmLFxuICAgICAgICAgICAgZmlsZXNSZWYsXG4gICAgICAgICAgICBzZWxlY3Rpb25SZWYsXG4gICAgICAgIF1cbiAgICApO1xufTtcbiIsImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVJlY29pbFZhbHVlLCB1c2VTZXRSZWNvaWxTdGF0ZSB9IGZyb20gJ3JlY29pbCc7XG5pbXBvcnQgeyBOdWxsYWJsZSB9IGZyb20gJ3RzZGVmJztcblxuaW1wb3J0IHsgZGlzcGF0Y2hGaWxlQWN0aW9uU3RhdGUgfSBmcm9tICcuLi9yZWNvaWwvZmlsZS1hY3Rpb25zLnJlY29pbCc7XG5pbXBvcnQgeyBmaWxlc1N0YXRlLCBwYXJlbnRGb2xkZXJTdGF0ZSB9IGZyb20gJy4uL3JlY29pbC9maWxlcy5yZWNvaWwnO1xuaW1wb3J0IHsgc2VhcmNoQmFyVmlzaWJsZVN0YXRlIH0gZnJvbSAnLi4vcmVjb2lsL3NlYXJjaC5yZWNvaWwnO1xuaW1wb3J0IHsgc2VsZWN0ZWRGaWxlc1N0YXRlIH0gZnJvbSAnLi4vcmVjb2lsL3NlbGVjdGlvbi5yZWNvaWwnO1xuaW1wb3J0IHsgZGlzcGF0Y2hTcGVjaWFsQWN0aW9uU3RhdGUgfSBmcm9tICcuLi9yZWNvaWwvc3BlY2lhbC1hY3Rpb25zLnJlY29pbCc7XG5pbXBvcnQgeyBGaWxlQXJyYXkgfSBmcm9tICcuLi90eXBlcy9maWxlcy50eXBlcyc7XG5pbXBvcnQgeyBGaWxlU2VsZWN0aW9uLCBTZWxlY3Rpb25Nb2RpZmllcnMgfSBmcm9tICcuLi90eXBlcy9zZWxlY3Rpb24udHlwZXMnO1xuaW1wb3J0IHtcbiAgICBTcGVjaWFsQWN0aW9uLFxuICAgIFNwZWNpYWxBY3Rpb25EYXRhLFxuICAgIFNwZWNpYWxBY3Rpb25IYW5kbGVyTWFwLFxuICAgIFNwZWNpYWxEcmFnTkRyb3BFbmRBY3Rpb24sXG4gICAgU3BlY2lhbERyYWdORHJvcFN0YXJ0QWN0aW9uLFxuICAgIFNwZWNpYWxGaWxlS2V5Ym9hcmRDbGlja0FjdGlvbixcbiAgICBTcGVjaWFsRmlsZU1vdXNlQ2xpY2tBY3Rpb24sXG4gICAgU3BlY2lhbE9wZW5Gb2xkZXJDaGFpbkZvbGRlckFjdGlvbixcbn0gZnJvbSAnLi4vdHlwZXMvc3BlY2lhbC1hY3Rpb25zLnR5cGVzJztcbmltcG9ydCB7IENob25reUFjdGlvbnMgfSBmcm9tICcuL2ZpbGUtYWN0aW9ucy1kZWZpbml0aW9ucyc7XG5pbXBvcnQgeyBGaWxlSGVscGVyIH0gZnJvbSAnLi9maWxlLWhlbHBlcic7XG5pbXBvcnQgeyB1c2VJbnN0YW5jZVZhcmlhYmxlIH0gZnJvbSAnLi9ob29rcy1oZWxwZXJzJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IFNlbGVjdGlvblV0aWwgfSBmcm9tICcuL3NlbGVjdGlvbic7XG5cbi8qKlxuICogUmV0dXJucyBhIGRpc3BhdGNoIG1ldGhvZCBtZWFudCB0byBiZSB1c2VkIGJ5IGNoaWxkIGNvbXBvbmVudHMuIFRoaXMgZGlzcGF0Y2hcbiAqIG1ldGhvZCBpcyBtZWFudCBmb3IgXCJzcGVjaWFsXCIgaW50ZXJuYWwgYWN0aW9ucy4gSXQgdGFrZXMgYSBzcGVjaWFsIGFjdGlvbiwgYW5kXG4gKiB0cmFuc2Zvcm1zIGl0IGludG8gYSBcImZpbGUgYWN0aW9uXCIgdGhhdCBjYW4gYmUgaGFuZGxlZCBieSB0aGUgdXNlci5cbiAqL1xuZXhwb3J0IGNvbnN0IHVzZVNwZWNpYWxBY3Rpb25EaXNwYXRjaGVyID0gKFxuICAgIGZpbGVzOiBGaWxlQXJyYXksXG4gICAgc2VsZWN0aW9uOiBGaWxlU2VsZWN0aW9uLFxuICAgIHNlbGVjdGlvblV0aWw6IFNlbGVjdGlvblV0aWwsXG4gICAgc2VsZWN0aW9uTW9kaWZpZXJzOiBTZWxlY3Rpb25Nb2RpZmllcnNcbikgPT4ge1xuICAgIC8vIENyZWF0ZSB0aGUgc3BlY2lhbCBhY3Rpb24gaGFuZGxlciBtYXBcbiAgICBjb25zdCBzcGVjaWFsQWN0aW9uSGFuZGxlck1hcCA9IHVzZVNwZWNpYWxGaWxlQWN0aW9uSGFuZGxlck1hcChcbiAgICAgICAgc2VsZWN0aW9uVXRpbCxcbiAgICAgICAgc2VsZWN0aW9uTW9kaWZpZXJzXG4gICAgKTtcblxuICAgIC8vIFByb2Nlc3Mgc3BlY2lhbCBhY3Rpb25zIHVzaW5nIHRoZSBoYW5kbGVycyBmcm9tIHRoZSBtYXBcbiAgICBjb25zdCBkaXNwYXRjaFNwZWNpYWxBY3Rpb24gPSB1c2VDYWxsYmFjayhcbiAgICAgICAgKGFjdGlvbkRhdGE6IFNwZWNpYWxBY3Rpb25EYXRhKSA9PiB7XG4gICAgICAgICAgICBMb2dnZXIuZGVidWcoYFNQRUNJQUwgQUNUSU9OIFJFUVVFU1Q6YCwgYWN0aW9uRGF0YSk7XG4gICAgICAgICAgICBjb25zdCB7IGFjdGlvbklkIH0gPSBhY3Rpb25EYXRhO1xuICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IHNwZWNpYWxBY3Rpb25IYW5kbGVyTWFwW2FjdGlvbklkXTtcbiAgICAgICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcihhY3Rpb25EYXRhKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBMb2dnZXIuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICBgSGFuZGxlciBmb3Igc3BlY2lhbCBhY3Rpb24gXCIke2FjdGlvbklkfVwiIHRocmV3IGFuIGVycm9yLmAsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvclxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgSW50ZXJuYWwgY29tcG9uZW50cyBkaXNwYXRjaGVkIGEgXCIke2FjdGlvbklkfVwiIHNwZWNpYWwgYWN0aW9uLCBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBidXQgbm8gaW50ZXJuYWwgaGFuZGxlciBpcyBhdmFpbGFibGUgdG8gcHJvY2VzcyBpdC5gXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgW3NwZWNpYWxBY3Rpb25IYW5kbGVyTWFwXVxuICAgICk7XG5cbiAgICBjb25zdCBzZXRSZWNvaWxEaXNwYXRjaFNwZWNpYWxBY3Rpb24gPSB1c2VTZXRSZWNvaWxTdGF0ZShcbiAgICAgICAgZGlzcGF0Y2hTcGVjaWFsQWN0aW9uU3RhdGVcbiAgICApO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHNldFJlY29pbERpc3BhdGNoU3BlY2lhbEFjdGlvbigoKSA9PiBkaXNwYXRjaFNwZWNpYWxBY3Rpb24pO1xuICAgIH0sIFtkaXNwYXRjaFNwZWNpYWxBY3Rpb24sIHNldFJlY29pbERpc3BhdGNoU3BlY2lhbEFjdGlvbl0pO1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZVNwZWNpYWxGaWxlQWN0aW9uSGFuZGxlck1hcCA9IChcbiAgICBzZWxlY3Rpb25VdGlsOiBTZWxlY3Rpb25VdGlsLFxuICAgIHNlbGVjdGlvbk1vZGlmaWVyczogU2VsZWN0aW9uTW9kaWZpZXJzXG4pID0+IHtcbiAgICAvLyBJbnN0YW5jZSB2YXJpYWJsZXMgYmFzZWQgb24gUmVjb2lsIHN0YXRlXG4gICAgY29uc3QgX3JlY29pbEZpbGVzID0gdXNlUmVjb2lsVmFsdWUoZmlsZXNTdGF0ZSk7XG4gICAgY29uc3QgZmlsZXNSZWYgPSB1c2VJbnN0YW5jZVZhcmlhYmxlKF9yZWNvaWxGaWxlcyk7XG4gICAgY29uc3QgcGFyZW50Rm9sZGVyUmVmID0gdXNlSW5zdGFuY2VWYXJpYWJsZSh1c2VSZWNvaWxWYWx1ZShwYXJlbnRGb2xkZXJTdGF0ZSkpO1xuICAgIGNvbnN0IHNlbGVjdGVkRmlsZXNSZWYgPSB1c2VJbnN0YW5jZVZhcmlhYmxlKHVzZVJlY29pbFZhbHVlKHNlbGVjdGVkRmlsZXNTdGF0ZSkpO1xuICAgIGNvbnN0IGRpc3BhdGNoRmlsZUFjdGlvblJlZiA9IHVzZUluc3RhbmNlVmFyaWFibGUoXG4gICAgICAgIHVzZVJlY29pbFZhbHVlKGRpc3BhdGNoRmlsZUFjdGlvblN0YXRlKVxuICAgICk7XG4gICAgY29uc3Qgc2V0U2VhcmNoQmFyVmlzaWJsZSA9IHVzZVNldFJlY29pbFN0YXRlKHNlYXJjaEJhclZpc2libGVTdGF0ZSk7XG5cbiAgICAvLyBJbnRlcm5hbCBpbnN0YW5jZSB2YXJpYWJsZXMgdXNlZCBieSBzcGVjaWFsIGFjdGlvbnNcbiAgICBjb25zdCBsYXN0Q2xpY2tEaXNwbGF5SW5kZXhSZWYgPSB1c2VSZWY8TnVsbGFibGU8bnVtYmVyPj4obnVsbCk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgLy8gV2UgemVybyBvdXQgdGhlIGxhc3QgY2xpY2sgd2hlbmV2ZXIgZmlsZXMgdXBkYXRlXG4gICAgICAgIGxhc3RDbGlja0Rpc3BsYXlJbmRleFJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICB9LCBbX3JlY29pbEZpbGVzXSk7XG5cbiAgICAvLyBEZWZpbmUgaGFuZGxlcnMgaW4gYSBtYXBcbiAgICBjb25zdCBzcGVjaWFsQWN0aW9uSGFuZGxlck1hcCA9IHVzZU1lbW88U3BlY2lhbEFjdGlvbkhhbmRsZXJNYXA+KCgpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFtTcGVjaWFsQWN0aW9uLk1vdXNlQ2xpY2tGaWxlXTogKGRhdGE6IFNwZWNpYWxGaWxlTW91c2VDbGlja0FjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLmNsaWNrVHlwZSA9PT0gJ2RvdWJsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEZpbGVIZWxwZXIuaXNPcGVuYWJsZShkYXRhLmZpbGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaEZpbGVBY3Rpb25SZWYuY3VycmVudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uSWQ6IENob25reUFjdGlvbnMuT3BlbkZpbGVzLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogZGF0YS5maWxlLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVG8gc2ltdWxhdGUgV2luZG93cyBFeHBsb3JlciBhbmQgTmF1dGlsdXMgYmVoYXZpb3VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEgZG91YmxlIGNsaWNrIG9uIGEgZmlsZSBvbmx5IG9wZW5zIHRoYXQgZmlsZSBldmVuIGlmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlcmUgaXMgYSBzZWxlY3Rpb24uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXM6IFtkYXRhLmZpbGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSdyZSBkZWFsaW5nIHdpdGggYSBzaW5nbGUgY2xpY2tcbiAgICAgICAgICAgICAgICAgICAgaWYgKEZpbGVIZWxwZXIuaXNTZWxlY3RhYmxlKGRhdGEuZmlsZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmN0cmxLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNdWx0aXBsZSBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb25Nb2RpZmllcnMudG9nZ2xlU2VsZWN0aW9uKGRhdGEuZmlsZS5pZCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RDbGlja0Rpc3BsYXlJbmRleFJlZi5jdXJyZW50ID0gZGF0YS5maWxlRGlzcGxheUluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmFuZ2Ugc2VsZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsYXN0Q2xpY2tEaXNwbGF5SW5kZXhSZWYuY3VycmVudCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSB0aGUgaW5kZXggb2YgdGhlIHByZXZpb3VzIGNsaWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByYW5nZVN0YXJ0ID0gbGFzdENsaWNrRGlzcGxheUluZGV4UmVmLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByYW5nZUVuZCA9IGRhdGEuZmlsZURpc3BsYXlJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlU3RhcnQgPiByYW5nZUVuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3JhbmdlU3RhcnQsIHJhbmdlRW5kXSA9IFtyYW5nZUVuZCwgcmFuZ2VTdGFydF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlSWRzID0gZmlsZXNSZWYuY3VycmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKHJhbmdlU3RhcnQsIHJhbmdlRW5kICsgMSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKGZpbGUpID0+IEZpbGVIZWxwZXIuaXNTZWxlY3RhYmxlKGZpbGUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgoZmlsZSkgPT4gZmlsZSEuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb25Nb2RpZmllcnMuc2VsZWN0RmlsZXMoZmlsZUlkcywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2luY2Ugd2UgY2FuJ3QgZG8gYSByYW5nZSBzZWxlY3Rpb24sIGRvIGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbXVsdGlwbGUgc2VsZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbk1vZGlmaWVycy50b2dnbGVTZWxlY3Rpb24oZGF0YS5maWxlLmlkLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RDbGlja0Rpc3BsYXlJbmRleFJlZi5jdXJyZW50ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZmlsZURpc3BsYXlJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4Y2x1c2l2ZSBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb25Nb2RpZmllcnMudG9nZ2xlU2VsZWN0aW9uKGRhdGEuZmlsZS5pZCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdENsaWNrRGlzcGxheUluZGV4UmVmLmN1cnJlbnQgPSBkYXRhLmZpbGVEaXNwbGF5SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRhdGEuY3RybEtleSkgc2VsZWN0aW9uTW9kaWZpZXJzLmNsZWFyU2VsZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0Q2xpY2tEaXNwbGF5SW5kZXhSZWYuY3VycmVudCA9IGRhdGEuZmlsZURpc3BsYXlJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbU3BlY2lhbEFjdGlvbi5LZXlib2FyZENsaWNrRmlsZV06IChcbiAgICAgICAgICAgICAgICBkYXRhOiBTcGVjaWFsRmlsZUtleWJvYXJkQ2xpY2tBY3Rpb25cbiAgICAgICAgICAgICkgPT4ge1xuICAgICAgICAgICAgICAgIGxhc3RDbGlja0Rpc3BsYXlJbmRleFJlZi5jdXJyZW50ID0gZGF0YS5maWxlRGlzcGxheUluZGV4O1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLmVudGVyS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIG9ubHkgZGlzcGF0Y2ggdGhlIE9wZW4gRmlsZXMgYWN0aW9uIGhlcmUgd2hlbiB0aGUgc2VsZWN0aW9uIGlzXG4gICAgICAgICAgICAgICAgICAgIC8vIGVtcHR5LiBPdGhlcndpc2UsIGBFbnRlcmAga2V5IHByZXNzZXMgYXJlIGhhbmRsZWQgYnkgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIGhvdGtleSBtYW5hZ2VyIGZvciB0aGUgT3BlbiBGaWxlcyBhY3Rpb24uXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZEZpbGVzUmVmLmN1cnJlbnQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaEZpbGVBY3Rpb25SZWYuY3VycmVudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uSWQ6IENob25reUFjdGlvbnMuT3BlbkZpbGVzLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogZGF0YS5maWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzOiBbZGF0YS5maWxlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLnNwYWNlS2V5ICYmIEZpbGVIZWxwZXIuaXNTZWxlY3RhYmxlKGRhdGEuZmlsZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uTW9kaWZpZXJzLnRvZ2dsZVNlbGVjdGlvbihkYXRhLmZpbGUuaWQsIGRhdGEuY3RybEtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFtTcGVjaWFsQWN0aW9uLk9wZW5QYXJlbnRGb2xkZXJdOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKEZpbGVIZWxwZXIuaXNPcGVuYWJsZShwYXJlbnRGb2xkZXJSZWYuY3VycmVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hGaWxlQWN0aW9uUmVmLmN1cnJlbnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uSWQ6IENob25reUFjdGlvbnMuT3BlbkZpbGVzLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBwYXJlbnRGb2xkZXJSZWYuY3VycmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzOiBbcGFyZW50Rm9sZGVyUmVmLmN1cnJlbnRdLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBMb2dnZXIud2FybihcbiAgICAgICAgICAgICAgICAgICAgICAgIGBTcGVjaWFsIGFjdGlvbiBcIiR7U3BlY2lhbEFjdGlvbi5PcGVuUGFyZW50Rm9sZGVyfVwiIHdhcyBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgZGlzcGF0Y2hlZCBldmVuIHRob3VnaCB0aGUgcGFyZW50IGZvbGRlciBpcyBub3QgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYG9wZW5hYmxlLiBUaGlzIGluZGljYXRlcyBhIGJ1ZyBpbiBwcmVzZW50YXRpb24gY29tcG9uZW50cy5gXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFtTcGVjaWFsQWN0aW9uLk9wZW5Gb2xkZXJDaGFpbkZvbGRlcl06IChcbiAgICAgICAgICAgICAgICBkYXRhOiBTcGVjaWFsT3BlbkZvbGRlckNoYWluRm9sZGVyQWN0aW9uXG4gICAgICAgICAgICApID0+IHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaEZpbGVBY3Rpb25SZWYuY3VycmVudCh7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbklkOiBDaG9ua3lBY3Rpb25zLk9wZW5GaWxlcy5pZCxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBkYXRhLmZpbGUsXG4gICAgICAgICAgICAgICAgICAgIGZpbGVzOiBbZGF0YS5maWxlXSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbU3BlY2lhbEFjdGlvbi5Ub2dnbGVTZWFyY2hCYXJdOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0U2VhcmNoQmFyVmlzaWJsZSgodmlzaWJsZTogYW55KSA9PiAhdmlzaWJsZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgW1NwZWNpYWxBY3Rpb24uU2VsZWN0QWxsRmlsZXNdOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZUlkcyA9IGZpbGVzUmVmLmN1cnJlbnRcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcigoZmlsZSkgPT4gRmlsZUhlbHBlci5pc1NlbGVjdGFibGUoZmlsZSkpXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoKGZpbGUpID0+IGZpbGUhLmlkKTtcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb25Nb2RpZmllcnMuc2VsZWN0RmlsZXMoZmlsZUlkcywgdHJ1ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgW1NwZWNpYWxBY3Rpb24uQ2xlYXJTZWxlY3Rpb25dOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uTW9kaWZpZXJzLmNsZWFyU2VsZWN0aW9uKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgW1NwZWNpYWxBY3Rpb24uRHJhZ05Ecm9wU3RhcnRdOiAoZGF0YTogU3BlY2lhbERyYWdORHJvcFN0YXJ0QWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZSA9IGRhdGEuZHJhZ1NvdXJjZTtcbiAgICAgICAgICAgICAgICBpZiAoIXNlbGVjdGlvblV0aWwuaXNTZWxlY3RlZChmaWxlKSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb25Nb2RpZmllcnMuY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEZpbGVIZWxwZXIuaXNTZWxlY3RhYmxlKGZpbGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb25Nb2RpZmllcnMuc2VsZWN0RmlsZXMoW2ZpbGUuaWRdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbU3BlY2lhbEFjdGlvbi5EcmFnTkRyb3BFbmRdOiAoZGF0YTogU3BlY2lhbERyYWdORHJvcEVuZEFjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rpb25VdGlsLmlzU2VsZWN0ZWQoZGF0YS5kcm9wVGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBDYW4ndCBkcm9wIGEgc2VsZWN0aW9uIGludG8gaXRzZWxmXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZEZpbGVzID0gc2VsZWN0aW9uVXRpbC5nZXRTZWxlY3RlZEZpbGVzKFxuICAgICAgICAgICAgICAgICAgICBGaWxlSGVscGVyLmlzRHJhZ2dhYmxlXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkcm9wcGVkRmlsZXMgPVxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEZpbGVzLmxlbmd0aCA+IDAgPyBzZWxlY3RlZEZpbGVzIDogW2RhdGEuZHJhZ1NvdXJjZV07XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hGaWxlQWN0aW9uUmVmLmN1cnJlbnQoe1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb25JZDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZHJvcEVmZmVjdCA9PT0gJ2NvcHknXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBDaG9ua3lBY3Rpb25zLkR1cGxpY2F0ZUZpbGVzVG8uaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IENob25reUFjdGlvbnMuTW92ZUZpbGVzVG8uaWQsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogZGF0YS5kcm9wVGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICBmaWxlczogZHJvcHBlZEZpbGVzLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSBhcyBTcGVjaWFsQWN0aW9uSGFuZGxlck1hcDtcbiAgICB9LCBbXG4gICAgICAgIHNlbGVjdGlvblV0aWwsXG4gICAgICAgIHNlbGVjdGlvbk1vZGlmaWVycyxcbiAgICAgICAgZmlsZXNSZWYsXG4gICAgICAgIHBhcmVudEZvbGRlclJlZixcbiAgICAgICAgc2VsZWN0ZWRGaWxlc1JlZixcbiAgICAgICAgZGlzcGF0Y2hGaWxlQWN0aW9uUmVmLFxuICAgICAgICBzZXRTZWFyY2hCYXJWaXNpYmxlLFxuICAgIF0pO1xuICAgIHJldHVybiBzcGVjaWFsQWN0aW9uSGFuZGxlck1hcDtcbn07XG4iLCIvKipcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMjBcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VSZWNvaWxTdGF0ZSwgdXNlU2V0UmVjb2lsU3RhdGUgfSBmcm9tICdyZWNvaWwnO1xuXG5pbXBvcnQgeyBlbmFibGVEcmFnQW5kRHJvcFN0YXRlIH0gZnJvbSAnLi4vLi4vcmVjb2lsL2RyYWctYW5kLWRyb3AucmVjb2lsJztcbmltcG9ydCB7IGRvdWJsZUNsaWNrRGVsYXlTdGF0ZSB9IGZyb20gJy4uLy4uL3JlY29pbC9maWxlLWFjdGlvbnMucmVjb2lsJztcbmltcG9ydCB7IGZpbGVFbnRyeVNpemVTdGF0ZSB9IGZyb20gJy4uLy4uL3JlY29pbC9maWxlLWxpc3QucmVjb2lsJztcbmltcG9ydCB7XG4gICAgZmlsZXNTdGF0ZSxcbiAgICBmb2xkZXJDaGFpblN0YXRlLFxuICAgIHBhcmVudEZvbGRlclN0YXRlLFxufSBmcm9tICcuLi8uLi9yZWNvaWwvZmlsZXMucmVjb2lsJztcbmltcG9ydCB7IHNlbGVjdGlvbk1vZGlmaWVyc1N0YXRlLCBzZWxlY3Rpb25TdGF0ZSB9IGZyb20gJy4uLy4uL3JlY29pbC9zZWxlY3Rpb24ucmVjb2lsJztcbmltcG9ydCB7IHRodW1ibmFpbEdlbmVyYXRvclN0YXRlIH0gZnJvbSAnLi4vLi4vcmVjb2lsL3RodW1ibmFpbHMucmVjb2lsJztcbmltcG9ydCB7IEZpbGVCcm93c2VyUHJvcHMgfSBmcm9tICcuLi8uLi90eXBlcy9maWxlLWJyb3dzZXIudHlwZXMnO1xuaW1wb3J0IHsgdXNlRmlsZUFjdGlvbnMgfSBmcm9tICcuLi8uLi91dGlsL2ZpbGUtYWN0aW9ucyc7XG5pbXBvcnQgeyB1c2VGaWxlU2VhcmNoIH0gZnJvbSAnLi4vLi4vdXRpbC9zZWFyY2gnO1xuaW1wb3J0IHsgdXNlU2VsZWN0aW9uIH0gZnJvbSAnLi4vLi4vdXRpbC9zZWxlY3Rpb24nO1xuaW1wb3J0IHsgdXNlU3BlY2lhbEFjdGlvbkRpc3BhdGNoZXIgfSBmcm9tICcuLi8uLi91dGlsL3NwZWNpYWwtYWN0aW9ucyc7XG5cbmV4cG9ydCBjb25zdCBDaG9ua3lCdXNpbmVzc0xvZ2ljOiBSZWFjdC5GQzxGaWxlQnJvd3NlclByb3BzPiA9IFJlYWN0Lm1lbW8oKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBmaWxlcyB9ID0gcHJvcHM7XG5cbiAgICAvLyBJbnN0YW5jZSBJRCB1c2VkIHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gbXVsdGlwbGUgQ2hvbmt5IGluc3RhbmNlcyBvbiB0aGUgc2FtZVxuICAgIC8vIHBhZ2VcbiAgICAvLyBjb25zdCBjaG9ua3lJbnN0YW5jZUlkID0gdXNlU3RhdGljVmFsdWUoc2hvcnRpZC5nZW5lcmF0ZSk7XG5cbiAgICAvL1xuICAgIC8vID09PT0gRGVmYXVsdCB2YWx1ZXMgYXNzaWdubWVudFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gcHJvcHMuZm9sZGVyQ2hhaW4gPyBwcm9wcy5mb2xkZXJDaGFpbiA6IG51bGw7XG4gICAgY29uc3QgZmlsZUFjdGlvbnMgPSBwcm9wcy5maWxlQWN0aW9ucyA/IHByb3BzLmZpbGVBY3Rpb25zIDogW107XG4gICAgY29uc3Qgb25GaWxlQWN0aW9uID0gcHJvcHMub25GaWxlQWN0aW9uID8gcHJvcHMub25GaWxlQWN0aW9uIDogbnVsbDtcbiAgICBjb25zdCB0aHVtYm5haWxHZW5lcmF0b3IgPSBwcm9wcy50aHVtYm5haWxHZW5lcmF0b3JcbiAgICAgICAgPyBwcm9wcy50aHVtYm5haWxHZW5lcmF0b3JcbiAgICAgICAgOiBudWxsO1xuICAgIGNvbnN0IGRvdWJsZUNsaWNrRGVsYXkgPVxuICAgICAgICB0eXBlb2YgcHJvcHMuZG91YmxlQ2xpY2tEZWxheSA9PT0gJ251bWJlcicgPyBwcm9wcy5kb3VibGVDbGlja0RlbGF5IDogMzAwO1xuICAgIGNvbnN0IGRpc2FibGVTZWxlY3Rpb24gPSAhIXByb3BzLmRpc2FibGVTZWxlY3Rpb247XG4gICAgY29uc3QgZW5hYmxlRHJhZ0FuZERyb3AgPSAhIXByb3BzLmVuYWJsZURyYWdBbmREcm9wO1xuXG4gICAgLy9cbiAgICAvLyA9PT09IEZpbGUgYXJyYXkgc29ydGluZyB8IFRPRE86IENvbWUgdXAgd2l0aCBhbiBBUEkgZm9yIGN1c3RvbWl6YWJsZSBzb3J0aW5nLi4uXG4gICAgY29uc3Qgc29ydGVkRmlsZXMgPSBmaWxlcztcblxuICAgIC8vXG4gICAgLy8gPT09PSBGaWxlIHNlYXJjaCAoYWthIGZpbGUgYXJyYXkgZmlsdGVyaW5nKVxuICAgIGNvbnN0IGZpbHRlcmVkRmlsZXMgPSB1c2VGaWxlU2VhcmNoKHNvcnRlZEZpbGVzKTtcblxuICAgIC8vXG4gICAgLy8gPT09PSBGaWxlIHNlbGVjdGlvbnNcbiAgICBjb25zdCB7IHNlbGVjdGlvbiwgc2VsZWN0aW9uVXRpbFJlZiwgc2VsZWN0aW9uTW9kaWZpZXJzIH0gPSB1c2VTZWxlY3Rpb24oXG4gICAgICAgIHNvcnRlZEZpbGVzLFxuICAgICAgICBkaXNhYmxlU2VsZWN0aW9uXG4gICAgKTtcblxuICAgIGNvbnN0IHNldFJlY29pbFNlbGVjdGlvbk1vZGlmaWVycyA9IHVzZVNldFJlY29pbFN0YXRlKHNlbGVjdGlvbk1vZGlmaWVyc1N0YXRlKTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBzZXRSZWNvaWxTZWxlY3Rpb25Nb2RpZmllcnMoc2VsZWN0aW9uTW9kaWZpZXJzKTtcbiAgICB9LCBbc2VsZWN0aW9uTW9kaWZpZXJzLCBzZXRSZWNvaWxTZWxlY3Rpb25Nb2RpZmllcnNdKTtcblxuICAgIC8vXG4gICAgLy8gPT09PSBGaWxlIGFjdGlvbnMgLSBhY3Rpb25zIHRoYXQgdXNlcnMgY2FuIGN1c3RvbWlzZSBhcyB0aGV5IHBsZWFzZVxuICAgIHVzZUZpbGVBY3Rpb25zKGZpbGVBY3Rpb25zLCBvbkZpbGVBY3Rpb24pO1xuXG4gICAgLy9cbiAgICAvLyA9PT09IFNwZWNpYWwgYWN0aW9ucyAtIHNwZWNpYWwgYWN0aW9ucyBoYXJkLWNvZGVkIGludG8gQ2hvbmt5IHRoYXQgdXNlcnMgY2Fubm90XG4gICAgLy8gICAgICBjdXN0b21pemUgKGVhc2lseSkuXG4gICAgdXNlU3BlY2lhbEFjdGlvbkRpc3BhdGNoZXIoXG4gICAgICAgIHNvcnRlZEZpbGVzLFxuICAgICAgICBzZWxlY3Rpb24sXG4gICAgICAgIHNlbGVjdGlvblV0aWxSZWYuY3VycmVudCxcbiAgICAgICAgc2VsZWN0aW9uTW9kaWZpZXJzXG4gICAgKTtcblxuICAgIGNvbnN0IHNldFJlY29pbEZpbGVzID0gdXNlU2V0UmVjb2lsU3RhdGUoZmlsZXNTdGF0ZSk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgc2V0UmVjb2lsRmlsZXMoZmlsdGVyZWRGaWxlcyk7XG4gICAgfSwgW2ZpbHRlcmVkRmlsZXMsIHNldFJlY29pbEZpbGVzXSk7XG5cbiAgICBjb25zdCBzZXRGb2xkZXJDaGFpbiA9IHVzZVNldFJlY29pbFN0YXRlKGZvbGRlckNoYWluU3RhdGUpO1xuICAgIGNvbnN0IHNldFBhcmVudEZvbGRlciA9IHVzZVNldFJlY29pbFN0YXRlKHBhcmVudEZvbGRlclN0YXRlKTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCBwYXJlbnRGb2xkZXIgPVxuICAgICAgICAgICAgZm9sZGVyQ2hhaW4gJiYgZm9sZGVyQ2hhaW4ubGVuZ3RoID4gMVxuICAgICAgICAgICAgICAgID8gZm9sZGVyQ2hhaW5bZm9sZGVyQ2hhaW4/Lmxlbmd0aCAtIDJdXG4gICAgICAgICAgICAgICAgOiBudWxsO1xuXG4gICAgICAgIHNldEZvbGRlckNoYWluKGZvbGRlckNoYWluKTtcbiAgICAgICAgc2V0UGFyZW50Rm9sZGVyKHBhcmVudEZvbGRlcik7XG4gICAgfSwgW2ZvbGRlckNoYWluLCBzZXRGb2xkZXJDaGFpbiwgc2V0UGFyZW50Rm9sZGVyXSk7XG5cbiAgICBjb25zdCBzZXRSZWNvaWxTZWxlY3Rpb24gPSB1c2VTZXRSZWNvaWxTdGF0ZShzZWxlY3Rpb25TdGF0ZSk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgc2V0UmVjb2lsU2VsZWN0aW9uKHNlbGVjdGlvbik7XG4gICAgfSwgW3NlbGVjdGlvbiwgc2V0UmVjb2lsU2VsZWN0aW9uXSk7XG5cbiAgICBjb25zdCBzZXRSZWNvaWxUaHVtYm5haWxHZW5lcmF0b3IgPSB1c2VTZXRSZWNvaWxTdGF0ZSh0aHVtYm5haWxHZW5lcmF0b3JTdGF0ZSk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgc2V0UmVjb2lsVGh1bWJuYWlsR2VuZXJhdG9yKCgpID0+IHRodW1ibmFpbEdlbmVyYXRvcik7XG4gICAgfSwgW3RodW1ibmFpbEdlbmVyYXRvciwgc2V0UmVjb2lsVGh1bWJuYWlsR2VuZXJhdG9yXSk7XG5cbiAgICBjb25zdCBzZXRSZWNvaWxEb3VibGVDbGlja0RlbGF5ID0gdXNlU2V0UmVjb2lsU3RhdGUoZG91YmxlQ2xpY2tEZWxheVN0YXRlKTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBzZXRSZWNvaWxEb3VibGVDbGlja0RlbGF5KGRvdWJsZUNsaWNrRGVsYXkpO1xuICAgIH0sIFtkb3VibGVDbGlja0RlbGF5LCBzZXRSZWNvaWxEb3VibGVDbGlja0RlbGF5XSk7XG5cbiAgICBjb25zdCBbLF0gPSB1c2VSZWNvaWxTdGF0ZShmaWxlRW50cnlTaXplU3RhdGUpO1xuXG4gICAgY29uc3Qgc2V0UmVjb2lsRW5hYmxlRHJhZ0FuZERyb3AgPSB1c2VTZXRSZWNvaWxTdGF0ZShlbmFibGVEcmFnQW5kRHJvcFN0YXRlKTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBzZXRSZWNvaWxFbmFibGVEcmFnQW5kRHJvcChlbmFibGVEcmFnQW5kRHJvcCk7XG4gICAgfSwgW2VuYWJsZURyYWdBbmREcm9wLCBzZXRSZWNvaWxFbmFibGVEcmFnQW5kRHJvcF0pO1xuXG4gICAgcmV0dXJuIG51bGw7XG59KTtcbiIsImltcG9ydCBGdXp6eVNlYXJjaCBmcm9tICdmdXp6eS1zZWFyY2gnO1xuaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVJlY29pbFZhbHVlIH0gZnJvbSAncmVjb2lsJztcblxuaW1wb3J0IHsgc2VhcmNoRmlsdGVyU3RhdGUgfSBmcm9tICcuLi9yZWNvaWwvc2VhcmNoLnJlY29pbCc7XG5pbXBvcnQgeyBGaWxlQXJyYXksIEZpbGVEYXRhIH0gZnJvbSAnLi4vdHlwZXMvZmlsZXMudHlwZXMnO1xuXG5leHBvcnQgY29uc3QgdXNlRmlsZVNlYXJjaCA9IChmaWxlczogRmlsZUFycmF5KTogRmlsZUFycmF5ID0+IHtcbiAgICBjb25zdCBzZWFyY2hGaWx0ZXIgPSB1c2VSZWNvaWxWYWx1ZShzZWFyY2hGaWx0ZXJTdGF0ZSk7XG5cbiAgICByZXR1cm4gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIGlmICghc2VhcmNoRmlsdGVyKSByZXR1cm4gZmlsZXM7XG4gICAgICAgIGNvbnN0IHNlYXJjaGVyID0gbmV3IEZ1enp5U2VhcmNoKFxuICAgICAgICAgICAgZmlsZXMuZmlsdGVyKChmKSA9PiAhIWYpIGFzIEZpbGVEYXRhW10sXG4gICAgICAgICAgICBbJ25hbWUnXSxcbiAgICAgICAgICAgIHsgY2FzZVNlbnNpdGl2ZTogZmFsc2UsIHNvcnQ6IHRydWUgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gc2VhcmNoZXIuc2VhcmNoKHNlYXJjaEZpbHRlcik7XG4gICAgfSwgW2ZpbGVzLCBzZWFyY2hGaWx0ZXJdKTtcbn07XG4iLCIvKipcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMjBcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VEcmFnTGF5ZXIgfSBmcm9tICdyZWFjdC1kbmQnO1xuaW1wb3J0IHsgdXNlUmVjb2lsVmFsdWUgfSBmcm9tICdyZWNvaWwnO1xuaW1wb3J0IHsgTnVsbGFibGUgfSBmcm9tICd0c2RlZic7XG5cbmltcG9ydCB7IHNlbGVjdGlvblNpemVTdGF0ZSB9IGZyb20gJy4uLy4uL3JlY29pbC9zZWxlY3Rpb24ucmVjb2lsJztcbmltcG9ydCB7IERuREZpbGVFbnRyeUl0ZW0sIERuREZpbGVFbnRyeVR5cGUgfSBmcm9tICcuL0RuREZpbGVFbnRyeSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRG5ERmlsZUxpc3REcmFnTGF5ZXJQcm9wcyB7fVxuXG5jb25zdCBsYXllclN0eWxlczogUmVhY3QuQ1NTUHJvcGVydGllcyA9IHtcbiAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgekluZGV4OiAxMDAsXG4gICAgbGVmdDogMCxcbiAgICB0b3A6IDAsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbn07XG5jb25zdCBnZXRJdGVtU3R5bGVzID0gKFxuICAgIGluaXRpYWxDdXJzb3JPZmZzZXQ6IE51bGxhYmxlPHsgeDogbnVtYmVyOyB5OiBudW1iZXIgfT4sXG4gICAgaW5pdGlhbEZpbGVPZmZzZXQ6IE51bGxhYmxlPHsgeDogbnVtYmVyOyB5OiBudW1iZXIgfT4sXG4gICAgY3VycmVudEZpbGVPZmZzZXQ6IE51bGxhYmxlPHsgeDogbnVtYmVyOyB5OiBudW1iZXIgfT5cbikgPT4ge1xuICAgIGlmICghaW5pdGlhbEN1cnNvck9mZnNldCB8fCAhaW5pdGlhbEZpbGVPZmZzZXQgfHwgIWN1cnJlbnRGaWxlT2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkaXNwbGF5OiAnbm9uZScsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHggPSBpbml0aWFsQ3Vyc29yT2Zmc2V0LnggKyAoY3VycmVudEZpbGVPZmZzZXQueCAtIGluaXRpYWxGaWxlT2Zmc2V0LngpO1xuICAgIGNvbnN0IHkgPSBpbml0aWFsQ3Vyc29yT2Zmc2V0LnkgKyAoY3VycmVudEZpbGVPZmZzZXQueSAtIGluaXRpYWxGaWxlT2Zmc2V0LnkpO1xuICAgIGNvbnN0IHRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoJHt4fXB4LCAke3l9cHgpYDtcbiAgICByZXR1cm4ge1xuICAgICAgICB0cmFuc2Zvcm0sXG4gICAgICAgIFdlYmtpdFRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3QgRG5ERmlsZUxpc3REcmFnTGF5ZXI6IFJlYWN0LkZDPERuREZpbGVMaXN0RHJhZ0xheWVyUHJvcHM+ID0gKCkgPT4ge1xuICAgIGNvbnN0IHNlbGVjdGlvblNpemUgPSB1c2VSZWNvaWxWYWx1ZShzZWxlY3Rpb25TaXplU3RhdGUpO1xuXG4gICAgY29uc3Qge1xuICAgICAgICBpdGVtVHlwZSxcbiAgICAgICAgaXRlbSxcbiAgICAgICAgaW5pdGlhbEN1cnNvck9mZnNldCxcbiAgICAgICAgaW5pdGlhbEZpbGVPZmZzZXQsXG4gICAgICAgIGN1cnJlbnRGaWxlT2Zmc2V0LFxuICAgICAgICBpc0RyYWdnaW5nLFxuICAgIH0gPSB1c2VEcmFnTGF5ZXIoKG1vbml0b3IpID0+ICh7XG4gICAgICAgIGl0ZW06IG1vbml0b3IuZ2V0SXRlbSgpIGFzIERuREZpbGVFbnRyeUl0ZW0sXG4gICAgICAgIGl0ZW1UeXBlOiBtb25pdG9yLmdldEl0ZW1UeXBlKCksXG4gICAgICAgIGluaXRpYWxDdXJzb3JPZmZzZXQ6IG1vbml0b3IuZ2V0SW5pdGlhbENsaWVudE9mZnNldCgpLFxuICAgICAgICBpbml0aWFsRmlsZU9mZnNldDogbW9uaXRvci5nZXRJbml0aWFsU291cmNlQ2xpZW50T2Zmc2V0KCksXG4gICAgICAgIGN1cnJlbnRGaWxlT2Zmc2V0OiBtb25pdG9yLmdldFNvdXJjZUNsaWVudE9mZnNldCgpLFxuICAgICAgICBpc0RyYWdnaW5nOiBtb25pdG9yLmlzRHJhZ2dpbmcoKSxcbiAgICB9KSk7XG4gICAgZnVuY3Rpb24gcmVuZGVySXRlbSgpIHtcbiAgICAgICAgaWYgKCFpdGVtLmZpbGUgfHwgaXRlbVR5cGUgIT09IERuREZpbGVFbnRyeVR5cGUpIHJldHVybjtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjaG9ua3ktZmlsZS1kcmFnLXByZXZpZXdcIj5cbiAgICAgICAgICAgICAgICA8Yj57aXRlbS5maWxlLm5hbWV9PC9iPlxuICAgICAgICAgICAgICAgIHtzZWxlY3Rpb25TaXplID4gMSAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgICAgICB7JyBhbmQgJ31cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3NlbGVjdGlvblNpemUgLSAxfSBvdGhlciBmaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3NlbGVjdGlvblNpemUgLSAxICE9PSAxID8gJ3MnIDogJyd9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3N0cm9uZz5cbiAgICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbiAgICBpZiAoIWlzRHJhZ2dpbmcpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgc3R5bGU9e2xheWVyU3R5bGVzfT5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBzdHlsZT17Z2V0SXRlbVN0eWxlcyhcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbEN1cnNvck9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbEZpbGVPZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaWxlT2Zmc2V0XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7cmVuZGVySXRlbSgpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGludGVyZmFjZSBFcnJvck1lc3NhZ2VQcm9wcyB7XG4gICAgbWVzc2FnZTogc3RyaW5nO1xuICAgIGJ1bGxldHM/OiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGNvbnN0IEVycm9yTWVzc2FnZSA9IFJlYWN0Lm1lbW88RXJyb3JNZXNzYWdlUHJvcHM+KChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgbWVzc2FnZSwgYnVsbGV0cyB9ID0gcHJvcHM7XG5cbiAgICBsZXQgYnVsbGV0TGlzdCA9IG51bGw7XG4gICAgaWYgKGJ1bGxldHMgJiYgYnVsbGV0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVsbGV0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaXRlbXMucHVzaCg8bGkga2V5PXtgZXJyb3ItYnVsbGV0LSR7aX1gfT57YnVsbGV0c1tpXX08L2xpPik7XG4gICAgICAgIH1cbiAgICAgICAgYnVsbGV0TGlzdCA9IDx1bD57aXRlbXN9PC91bD47XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjaG9ua3ktZXJyb3JcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImNob25reS1lcnJvci1uYW1lXCI+Q2hvbmt5IHJ1bnRpbWUgZXJyb3I6PC9zcGFuPiB7bWVzc2FnZX1cbiAgICAgICAgICAgIHtidWxsZXRMaXN0fVxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufSk7XG4iLCIvKipcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMjBcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCBob3RrZXlzIGZyb20gJ2hvdGtleXMtanMnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVJlY29pbFZhbHVlIH0gZnJvbSAncmVjb2lsJztcblxuaW1wb3J0IHtcbiAgICBmaWxlQWN0aW9uRGF0YVN0YXRlLFxuICAgIHJlcXVlc3RGaWxlQWN0aW9uU3RhdGUsXG59IGZyb20gJy4uLy4uL3JlY29pbC9maWxlLWFjdGlvbnMucmVjb2lsJztcblxuZXhwb3J0IGludGVyZmFjZSBIb3RrZXlMaXN0ZW5lclByb3BzIHtcbiAgICBmaWxlQWN0aW9uSWQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IEhvdGtleUxpc3RlbmVyOiBSZWFjdC5GQzxIb3RrZXlMaXN0ZW5lclByb3BzPiA9IFJlYWN0Lm1lbW8oKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBmaWxlQWN0aW9uSWQgfSA9IHByb3BzO1xuXG4gICAgY29uc3QgZmlsZUFjdGlvbiA9IHVzZVJlY29pbFZhbHVlKGZpbGVBY3Rpb25EYXRhU3RhdGUoZmlsZUFjdGlvbklkKSk7XG4gICAgY29uc3QgcmVxdWVzdEZpbGVBY3Rpb24gPSB1c2VSZWNvaWxWYWx1ZShyZXF1ZXN0RmlsZUFjdGlvblN0YXRlKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghZmlsZUFjdGlvbiB8fCAhZmlsZUFjdGlvbi5ob3RrZXlzIHx8IGZpbGVBY3Rpb24uaG90a2V5cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGhvdGtleXNTdHIgPSBmaWxlQWN0aW9uLmhvdGtleXMuam9pbignLCcpO1xuICAgICAgICBjb25zdCBob3RrZXlDYWxsYmFjayA9IChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHJlcXVlc3RGaWxlQWN0aW9uKGZpbGVBY3Rpb24uaWQpO1xuICAgICAgICB9O1xuICAgICAgICBob3RrZXlzKGhvdGtleXNTdHIsIGhvdGtleUNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuICgpID0+IGhvdGtleXMudW5iaW5kKGhvdGtleXNTdHIsIGhvdGtleUNhbGxiYWNrKTtcbiAgICB9LCBbZmlsZUFjdGlvbiwgcmVxdWVzdEZpbGVBY3Rpb25dKTtcblxuICAgIHJldHVybiBudWxsO1xufSk7XG4iLCIvKipcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMjBcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCBSZWFjdCwgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUmVjb2lsVmFsdWUgfSBmcm9tICdyZWNvaWwnO1xuXG5pbXBvcnQgeyBlbmFibGVEcmFnQW5kRHJvcFN0YXRlIH0gZnJvbSAnLi4vLi4vcmVjb2lsL2RyYWctYW5kLWRyb3AucmVjb2lsJztcbmltcG9ydCB7IGZpbGVBY3Rpb25zU3RhdGUgfSBmcm9tICcuLi8uLi9yZWNvaWwvZmlsZS1hY3Rpb25zLnJlY29pbCc7XG5pbXBvcnQgeyBzZWxlY3Rpb25Nb2RpZmllcnNTdGF0ZSB9IGZyb20gJy4uLy4uL3JlY29pbC9zZWxlY3Rpb24ucmVjb2lsJztcbmltcG9ydCB7IEVycm9yTWVzc2FnZURhdGEgfSBmcm9tICcuLi8uLi90eXBlcy92YWxpZGF0aW9uLnR5cGVzJztcbmltcG9ydCB7IHVzZUNsaWNrTGlzdGVuZXIgfSBmcm9tICcuLi8uLi91dGlsL2hvb2tzLWhlbHBlcnMnO1xuaW1wb3J0IHsgRG5ERmlsZUxpc3REcmFnTGF5ZXIgfSBmcm9tICcuLi9maWxlLWVudHJ5L0RuREZpbGVMaXN0RHJhZ0xheWVyJztcbmltcG9ydCB7IEVycm9yTWVzc2FnZSB9IGZyb20gJy4vRXJyb3JNZXNzYWdlJztcbmltcG9ydCB7IEhvdGtleUxpc3RlbmVyIH0gZnJvbSAnLi9Ib3RrZXlMaXN0ZW5lcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2hvbmt5UHJlc2VudGF0aW9uTGF5ZXJQcm9wcyB7XG4gICAgdmFsaWRhdGlvbkVycm9yczogRXJyb3JNZXNzYWdlRGF0YVtdO1xufVxuXG5leHBvcnQgY29uc3QgQ2hvbmt5UHJlc2VudGF0aW9uTGF5ZXI6IFJlYWN0LkZDPENob25reVByZXNlbnRhdGlvbkxheWVyUHJvcHM+ID0gKFxuICAgIHByb3BzXG4pID0+IHtcbiAgICBjb25zdCB7IHZhbGlkYXRpb25FcnJvcnMsIGNoaWxkcmVuIH0gPSBwcm9wcztcblxuICAgIGNvbnN0IGZpbGVBY3Rpb25zID0gdXNlUmVjb2lsVmFsdWUoZmlsZUFjdGlvbnNTdGF0ZSk7XG4gICAgY29uc3Qgc2VsZWN0aW9uTW9kaWZpZXJzID0gdXNlUmVjb2lsVmFsdWUoc2VsZWN0aW9uTW9kaWZpZXJzU3RhdGUpO1xuICAgIGNvbnN0IGVuYWJsZURyYWdBbmREcm9wID0gdXNlUmVjb2lsVmFsdWUoZW5hYmxlRHJhZ0FuZERyb3BTdGF0ZSk7XG5cbiAgICAvLyBEZWFsIHdpdGggY2xpY2tzIG91dHNpZGUgb2YgQ2hvbmt5XG4gICAgY29uc3QgY2hvbmt5Um9vdFJlZiA9IHVzZUNsaWNrTGlzdGVuZXIoe1xuICAgICAgICBvbk91dHNpZGVDbGljazogc2VsZWN0aW9uTW9kaWZpZXJzLmNsZWFyU2VsZWN0aW9uLFxuICAgIH0pO1xuXG4gICAgLy8gR2VuZXJhdGUgbmVjZXNzYXJ5IGNvbXBvbmVudHNcbiAgICBjb25zdCBob3RrZXlMaXN0ZW5lckNvbXBvbmVudHMgPSB1c2VNZW1vKFxuICAgICAgICAoKSA9PlxuICAgICAgICAgICAgZmlsZUFjdGlvbnMubWFwKChhY3Rpb24pID0+IChcbiAgICAgICAgICAgICAgICA8SG90a2V5TGlzdGVuZXJcbiAgICAgICAgICAgICAgICAgICAga2V5PXtgZmlsZS1hY3Rpb24tbGlzdGVuZXItJHthY3Rpb24uaWR9YH1cbiAgICAgICAgICAgICAgICAgICAgZmlsZUFjdGlvbklkPXthY3Rpb24uaWR9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICkpLFxuICAgICAgICBbZmlsZUFjdGlvbnNdXG4gICAgKTtcbiAgICBjb25zdCB2YWxpZGF0aW9uRXJyb3JDb21wb25lbnRzID0gdXNlTWVtbyhcbiAgICAgICAgKCkgPT5cbiAgICAgICAgICAgIHZhbGlkYXRpb25FcnJvcnMubWFwKChkYXRhLCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgICAgIDxFcnJvck1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAga2V5PXtgZXJyb3ItbWVzc2FnZS0ke2luZGV4fWB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U9e2RhdGEubWVzc2FnZX1cbiAgICAgICAgICAgICAgICAgICAgYnVsbGV0cz17ZGF0YS5idWxsZXRzfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApKSxcbiAgICAgICAgW3ZhbGlkYXRpb25FcnJvcnNdXG4gICAgKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgcmVmPXtjaG9ua3lSb290UmVmfSBjbGFzc05hbWU9XCJjaG9ua3ktcm9vdCBjaG9ua3ktbm8tc2VsZWN0XCI+XG4gICAgICAgICAgICB7ZW5hYmxlRHJhZ0FuZERyb3AgJiYgPERuREZpbGVMaXN0RHJhZ0xheWVyIC8+fVxuICAgICAgICAgICAge2hvdGtleUxpc3RlbmVyQ29tcG9uZW50c31cbiAgICAgICAgICAgIHt2YWxpZGF0aW9uRXJyb3JDb21wb25lbnRzfVxuICAgICAgICAgICAge2NoaWxkcmVuID8gY2hpbGRyZW4gOiBudWxsfVxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWNvaWxSb290IH0gZnJvbSAncmVjb2lsJztcblxuaW1wb3J0IHsgRmlsZUJyb3dzZXJQcm9wcyB9IGZyb20gJy4uLy4uL3R5cGVzL2ZpbGUtYnJvd3Nlci50eXBlcyc7XG5pbXBvcnQgeyBEZWZhdWx0RmlsZUFjdGlvbnMgfSBmcm9tICcuLi8uLi91dGlsL2ZpbGUtYWN0aW9ucy1kZWZpbml0aW9ucyc7XG5pbXBvcnQge1xuICAgIHVzZUZpbGVBY3Rpb25zVmFsaWRhdGlvbixcbiAgICB1c2VGaWxlQXJyYXlWYWxpZGF0aW9uLFxufSBmcm9tICcuLi8uLi91dGlsL3ZhbGlkYXRpb24nO1xuaW1wb3J0IHsgQ2hvbmt5QnVzaW5lc3NMb2dpYyB9IGZyb20gJy4uL2ludGVybmFsL0Nob25reUJ1c2luZXNzTG9naWMnO1xuaW1wb3J0IHsgQ2hvbmt5UHJlc2VudGF0aW9uTGF5ZXIgfSBmcm9tICcuLi9pbnRlcm5hbC9DaG9ua3lQcmVzZW50YXRpb25MYXllcic7XG5cbi8vIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuLy8gICAgIGNvbnN0IHdoeURpZFlvdVJlbmRlciA9IHJlcXVpcmUoJ0B3ZWxsZG9uZS1zb2Z0d2FyZS93aHktZGlkLXlvdS1yZW5kZXInKTtcbi8vICAgICB3aHlEaWRZb3VSZW5kZXIoUmVhY3QsIHtcbi8vICAgICAgICAgdHJhY2tBbGxQdXJlQ29tcG9uZW50czogdHJ1ZSxcbi8vICAgICB9KTtcbi8vIH1cblxuZXhwb3J0IGNvbnN0IEZpbGVCcm93c2VyOiBSZWFjdC5GQzxGaWxlQnJvd3NlclByb3BzPiA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHtmaWxlcywgY2hpbGRyZW4gfSA9IHByb3BzO1xuXG4gICAgLy8gPT09PSBEZWZhdWx0IHZhbHVlcyBhc3NpZ25tZW50XG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBwcm9wcy5mb2xkZXJDaGFpbiA/IHByb3BzLmZvbGRlckNoYWluIDogbnVsbDtcbiAgICBjb25zdCBmaWxlQWN0aW9ucyA9IHByb3BzLmZpbGVBY3Rpb25zID8gcHJvcHMuZmlsZUFjdGlvbnMgOiBbXTtcbiAgICBjb25zdCBkaXNhYmxlRGVmYXVsdEZpbGVBY3Rpb25zID0gISFwcm9wcy5kaXNhYmxlRGVmYXVsdEZpbGVBY3Rpb25zO1xuXG4gICAgLy8gPT09PSBWYWxpZGF0aW9uIG9mIHRoZSBtb3N0IGltcG9ydGFudCBwcm9wc1xuICAgIGNvbnN0IHtcbiAgICAgICAgY2xlYW5GaWxlcyxcbiAgICAgICAgY2xlYW5Gb2xkZXJDaGFpbixcbiAgICAgICAgZXJyb3JNZXNzYWdlczogZmlsZUFycmF5RXJyb3JzLFxuICAgIH0gPSB1c2VGaWxlQXJyYXlWYWxpZGF0aW9uKGZpbGVzLCBmb2xkZXJDaGFpbik7XG4gICAgY29uc3Qge1xuICAgICAgICBjbGVhbkZpbGVBY3Rpb25zLFxuICAgICAgICBlcnJvck1lc3NhZ2VzOiBmaWxlQWN0aW9uc0Vycm9ycyxcbiAgICB9ID0gdXNlRmlsZUFjdGlvbnNWYWxpZGF0aW9uKFxuICAgICAgICBmaWxlQWN0aW9ucyxcbiAgICAgICAgRGVmYXVsdEZpbGVBY3Rpb25zLFxuICAgICAgICAhZGlzYWJsZURlZmF1bHRGaWxlQWN0aW9uc1xuICAgICk7XG4gICAgY29uc3QgdmFsaWRhdGlvbkVycm9ycyA9IFsuLi5maWxlQXJyYXlFcnJvcnMsIC4uLmZpbGVBY3Rpb25zRXJyb3JzXTtcblxuICAgIGNvbnN0IGJ1c2luZXNzTG9naWNQcm9wczogRmlsZUJyb3dzZXJQcm9wcyA9IHtcbiAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgIGZpbGVzOiBjbGVhbkZpbGVzLFxuICAgICAgICBmb2xkZXJDaGFpbjogY2xlYW5Gb2xkZXJDaGFpbixcbiAgICAgICAgZmlsZUFjdGlvbnM6IGNsZWFuRmlsZUFjdGlvbnMsXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPFJlY29pbFJvb3Q+XG4gICAgICAgICAgICA8Q2hvbmt5QnVzaW5lc3NMb2dpYyB7Li4uYnVzaW5lc3NMb2dpY1Byb3BzfSAvPlxuICAgICAgICAgICAgPENob25reVByZXNlbnRhdGlvbkxheWVyIHZhbGlkYXRpb25FcnJvcnM9e3ZhbGlkYXRpb25FcnJvcnN9PlxuICAgICAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICAgIDwvQ2hvbmt5UHJlc2VudGF0aW9uTGF5ZXI+XG4gICAgICAgIDwvUmVjb2lsUm9vdD5cbiAgICApO1xufTtcbiIsImltcG9ydCBjIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VSZWNvaWxWYWx1ZSB9IGZyb20gJ3JlY29pbCc7XG5pbXBvcnQgeyBOdWxsYWJsZSB9IGZyb20gJ3RzZGVmJztcblxuaW1wb3J0IHsgZmlsZUFjdGlvbnNTdGF0ZSB9IGZyb20gJy4uLy4uL3JlY29pbC9maWxlLWFjdGlvbnMucmVjb2lsJztcbmltcG9ydCB7IGZvbGRlckNoYWluU3RhdGUgfSBmcm9tICcuLi8uLi9yZWNvaWwvZmlsZXMucmVjb2lsJztcbmltcG9ydCB7IGRpc3BhdGNoU3BlY2lhbEFjdGlvblN0YXRlIH0gZnJvbSAnLi4vLi4vcmVjb2lsL3NwZWNpYWwtYWN0aW9ucy5yZWNvaWwnO1xuaW1wb3J0IHsgQWN0aW9uR3JvdXBEYXRhIH0gZnJvbSAnLi4vLi4vdHlwZXMvZmlsZS1hY3Rpb25zLnR5cGVzJztcbmltcG9ydCB7IENob25reUljb25OYW1lIH0gZnJvbSAnLi4vLi4vdHlwZXMvaWNvbnMudHlwZXMnO1xuaW1wb3J0IHsgU3BlY2lhbEFjdGlvbiB9IGZyb20gJy4uLy4uL3R5cGVzL3NwZWNpYWwtYWN0aW9ucy50eXBlcyc7XG5pbXBvcnQgeyBDaG9ua3lBY3Rpb25zIH0gZnJvbSAnLi4vLi4vdXRpbC9maWxlLWFjdGlvbnMtZGVmaW5pdGlvbnMnO1xuaW1wb3J0IHsgRmlsZUhlbHBlciB9IGZyb20gJy4uLy4uL3V0aWwvZmlsZS1oZWxwZXInO1xuaW1wb3J0IHsgQ2hvbmt5SWNvbkZBIH0gZnJvbSAnLi9DaG9ua3lJY29uJztcblxuLyoqXG4gKiBHZW5lcmF0ZXMgZm9sZGVyIGNoYWluIEhUTUwgY29tcG9uZW50cyBmb3IgdGhlIGBGaWxlVG9vbGJhcmAgY29tcG9uZW50LlxuICovXG5leHBvcnQgY29uc3QgdXNlRm9sZGVyQ2hhaW5Db21wb25lbnQgPSAoKSA9PiB7XG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSB1c2VSZWNvaWxWYWx1ZShmb2xkZXJDaGFpblN0YXRlKTtcbiAgICBjb25zdCBkaXNwYXRjaFNwZWNpYWxBY3Rpb24gPSB1c2VSZWNvaWxWYWx1ZShkaXNwYXRjaFNwZWNpYWxBY3Rpb25TdGF0ZSk7XG4gICAgY29uc3QgZm9sZGVyQ2hhaW5Db21wb25lbnQgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgaWYgKCFmb2xkZXJDaGFpbikgcmV0dXJuIGZvbGRlckNoYWluO1xuXG4gICAgICAgIGNvbnN0IGNvbXBzID0gbmV3IEFycmF5KE1hdGgubWF4KDAsIGZvbGRlckNoYWluLmxlbmd0aCAqIDIgLSAxKSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm9sZGVyQ2hhaW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBmb2xkZXJDaGFpbltpXTtcbiAgICAgICAgICAgIGNvbnN0IGlzTGFzdCA9IGkgPT09IGZvbGRlckNoYWluLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICBjb25zdCBqID0gaSAqIDI7XG5cbiAgICAgICAgICAgIGNvbnN0IGNvbXBQcm9wczogUmVhY3QuQ29tcG9uZW50UHJvcHM8YW55PiA9IHtcbiAgICAgICAgICAgICAgICBrZXk6IGBmb2xkZXItY2hhaW4tZW50cnktJHtqfWAsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjKHtcbiAgICAgICAgICAgICAgICAgICAgJ2Nob25reS1mb2xkZXItY2hhaW4tZW50cnknOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAnY2hvbmt5LWxvYWRpbmcnOiAhZmlsZSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoRmlsZUhlbHBlci5pc09wZW5hYmxlKGZpbGUpICYmICFpc0xhc3QpIHtcbiAgICAgICAgICAgICAgICBjb21wUHJvcHMub25DbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hTcGVjaWFsQWN0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbklkOiBTcGVjaWFsQWN0aW9uLk9wZW5Gb2xkZXJDaGFpbkZvbGRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGU6IGZpbGUsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBUYWdUb1VzZSA9IGNvbXBQcm9wcy5vbkNsaWNrID8gJ2J1dHRvbicgOiAnZGl2JztcbiAgICAgICAgICAgIGNvbXBzW2pdID0gKFxuICAgICAgICAgICAgICAgIDxUYWdUb1VzZSB7Li4uY29tcFByb3BzfT5cbiAgICAgICAgICAgICAgICAgICAgey8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSAqL31cbiAgICAgICAgICAgICAgICAgICAge2ogPT09IDAgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiY2hvbmt5LXRleHQtc3VidGxlLWRhcmtcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2hvbmt5SWNvbkZBIGljb249e0Nob25reUljb25OYW1lLmZvbGRlcn0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmbmJzcDsmbmJzcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiY2hvbmt5LWZvbGRlci1jaGFpbi1lbnRyeS1uYW1lXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7ZmlsZSA/IGZpbGUubmFtZSA6ICdMb2FkaW5nLi4uJ31cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvVGFnVG9Vc2U+XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKCFpc0xhc3QpIHtcbiAgICAgICAgICAgICAgICBjb21wc1tqICsgMV0gPSAoXG4gICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleT17YGZvbGRlci1jaGFpbi1zZXBhcmF0b3ItJHtqfWB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjaG9ua3ktZm9sZGVyLWNoYWluLXNlcGFyYXRvclwiXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxDaG9ua3lJY29uRkFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uPXtDaG9ua3lJY29uTmFtZS5mb2xkZXJDaGFpblNlcGFyYXRvcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplPVwieHNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJjaG9ua3ktZm9sZGVyLWNoYWluXCI+e2NvbXBzfTwvZGl2PjtcbiAgICB9LCBbZm9sZGVyQ2hhaW4sIGRpc3BhdGNoU3BlY2lhbEFjdGlvbl0pO1xuICAgIHJldHVybiBmb2xkZXJDaGFpbkNvbXBvbmVudDtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VBY3Rpb25Hcm91cHMgPSAoKSA9PiB7XG4gICAgY29uc3QgZmlsZUFjdGlvbnMgPSB1c2VSZWNvaWxWYWx1ZShmaWxlQWN0aW9uc1N0YXRlKTtcbiAgICByZXR1cm4gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIC8vIENyZWF0ZSBhbiBhcnJheSBmb3Igbm9ybWFsIHRvb2xiYXIgYnV0dG9uc1xuICAgICAgICBjb25zdCBidXR0b25Hcm91cHM6IEFjdGlvbkdyb3VwRGF0YVtdID0gW107XG5cbiAgICAgICAgLy8gQ3JlYXRlIGEgbWFwIHVzZWQgZm9yIG1lcmdpbmcgYnV0dG9ucyBpbnRvIGdyb3Vwc1xuICAgICAgICBjb25zdCBidXR0b25Hcm91cE1hcDogeyBbZ3JvdXBOYW1lOiBzdHJpbmddOiBBY3Rpb25Hcm91cERhdGEgfSA9IHt9O1xuXG4gICAgICAgIC8vIENyZWF0ZSBzZXBhcmF0ZSB2YXJpYWJsZXMgZm9yIGJ1dHRvbnMgdGhhdCBnZXQgc3BlY2lhbCB0cmVhdG1lbnQ6XG4gICAgICAgIGxldCBvcGVuUGFyZW50Rm9sZGVyQnV0dG9uR3JvdXA6IE51bGxhYmxlPEFjdGlvbkdyb3VwRGF0YT4gPSBudWxsO1xuICAgICAgICBsZXQgc2VhcmNoQnV0dG9uR3JvdXA6IE51bGxhYmxlPEFjdGlvbkdyb3VwRGF0YT4gPSBudWxsO1xuXG4gICAgICAgIGZvciAoY29uc3QgYWN0aW9uIG9mIGZpbGVBY3Rpb25zKSB7XG4gICAgICAgICAgICBpZiAoIWFjdGlvbi50b29sYmFyQnV0dG9uKSBjb250aW51ZTtcblxuICAgICAgICAgICAgY29uc3QgYnV0dG9uID0gYWN0aW9uLnRvb2xiYXJCdXR0b247XG4gICAgICAgICAgICBsZXQgZ3JvdXA6IEFjdGlvbkdyb3VwRGF0YTtcblxuICAgICAgICAgICAgaWYgKGJ1dHRvbi5ncm91cCkge1xuICAgICAgICAgICAgICAgIGlmIChidXR0b25Hcm91cE1hcFtidXR0b24uZ3JvdXBdKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGdyb3VwIGV4aXN0cywgYXBwZW5kIGFjdGlvbiB0byBpdC5cbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAgPSBidXR0b25Hcm91cE1hcFtidXR0b24uZ3JvdXBdO1xuICAgICAgICAgICAgICAgICAgICBncm91cC5kcm9wZG93biA9IGdyb3VwLmRyb3Bkb3duIHx8IGJ1dHRvbi5kcm9wZG93bjtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAuZmlsZUFjdGlvbklkcy5wdXNoKGFjdGlvbi5pZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBjcmVhdGUgYSBuZXcgZ3JvdXAuXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogYnV0dG9uLmdyb3VwLFxuICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd246IGJ1dHRvbi5kcm9wZG93bixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25JZHM6IFthY3Rpb24uaWRdLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBidXR0b25Hcm91cHMucHVzaChncm91cCk7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbkdyb3VwTWFwW2dyb3VwLm5hbWUhXSA9IGdyb3VwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgYnV0dG9uIGhhcyBubyBncm91cCBzcGVjaWZpZWQsIHdlIHB1dCBpdCBpbiBhIHN0YW5kYWxvbmUgZ3JvdXBcbiAgICAgICAgICAgICAgICBncm91cCA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogYnV0dG9uLmdyb3VwLFxuICAgICAgICAgICAgICAgICAgICBkcm9wZG93bjogYnV0dG9uLmRyb3Bkb3duLFxuICAgICAgICAgICAgICAgICAgICBmaWxlQWN0aW9uSWRzOiBbYWN0aW9uLmlkXSxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy8gT25seSBhZGQgaXQgdG8gdGhlIG5vcm1hbCBncm91cHMgYXJyYXkgaWYgaXQncyBub3QgYSBzcGVjaWFsIGJ1dHRvblxuICAgICAgICAgICAgICAgIGlmIChhY3Rpb24uaWQgPT09IENob25reUFjdGlvbnMuT3BlblBhcmVudEZvbGRlci5pZCkge1xuICAgICAgICAgICAgICAgICAgICBvcGVuUGFyZW50Rm9sZGVyQnV0dG9uR3JvdXAgPSBncm91cDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbi5pZCA9PT0gQ2hvbmt5QWN0aW9ucy5Ub2dnbGVTZWFyY2guaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoQnV0dG9uR3JvdXAgPSBncm91cDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBidXR0b25Hcm91cHMucHVzaChncm91cCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgYnV0dG9uR3JvdXBzLCBvcGVuUGFyZW50Rm9sZGVyQnV0dG9uR3JvdXAsIHNlYXJjaEJ1dHRvbkdyb3VwIH07XG4gICAgfSwgW2ZpbGVBY3Rpb25zXSk7XG59O1xuIiwiLyoqXG4gKiBAYXV0aG9yIFRpbXVyIEt1emhhZ2FsaXlldiA8dGltLmt1emhAZ21haWwuY29tPlxuICogQGNvcHlyaWdodCAyMDIwXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUmVjb2lsVmFsdWUgfSBmcm9tICdyZWNvaWwnO1xuXG5pbXBvcnQgeyBmaWxlQWN0aW9uRGF0YVN0YXRlIH0gZnJvbSAnLi4vLi4vcmVjb2lsL2ZpbGUtYWN0aW9ucy5yZWNvaWwnO1xuaW1wb3J0IHsgQ2hvbmt5SWNvbk5hbWUgfSBmcm9tICcuLi8uLi90eXBlcy9pY29ucy50eXBlcyc7XG5pbXBvcnQgeyB1c2VGaWxlQWN0aW9uTW9kaWZpZXJzLCB1c2VGaWxlQWN0aW9uVHJpZ2dlciB9IGZyb20gJy4uLy4uL3V0aWwvZmlsZS1hY3Rpb25zJztcbmltcG9ydCB7IENob25reUljb25GQSB9IGZyb20gJy4vQ2hvbmt5SWNvbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRHJvcGRvd25CdXR0b25Qcm9wcyB7XG4gICAgdGV4dDogc3RyaW5nO1xuICAgIHRvb2x0aXA/OiBzdHJpbmc7XG4gICAgaWNvbj86IENob25reUljb25OYW1lIHwgc3RyaW5nO1xuICAgIG9uQ2xpY2s/OiAoKSA9PiB2b2lkO1xuICAgIGRpc2FibGVkPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duQnV0dG9uOiBSZWFjdC5GQzxEcm9wZG93bkJ1dHRvblByb3BzPiA9IFJlYWN0Lm1lbW8oKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyB0ZXh0LCB0b29sdGlwLCBpY29uLCBvbkNsaWNrLCBkaXNhYmxlZCB9ID0gcHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJjaG9ua3ktdG9vbGJhci1kcm9wZG93bi1idXR0b25cIlxuICAgICAgICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgICAgICAgIHRpdGxlPXt0b29sdGlwID8gdG9vbHRpcCA6IHRleHR9XG4gICAgICAgICAgICBkaXNhYmxlZD17IW9uQ2xpY2sgfHwgZGlzYWJsZWR9XG4gICAgICAgID5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2hvbmt5LXRvb2xiYXItZHJvcGRvd24tYnV0dG9uLWljb25cIj5cbiAgICAgICAgICAgICAgICA8Q2hvbmt5SWNvbkZBXG4gICAgICAgICAgICAgICAgICAgIGljb249e2ljb24gPyBpY29uIDogQ2hvbmt5SWNvbk5hbWUuZmFsbGJhY2tJY29ufVxuICAgICAgICAgICAgICAgICAgICBmaXhlZFdpZHRoPXt0cnVlfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2hvbmt5LXRvb2xiYXItZHJvcGRvd24tYnV0dG9uLXRleHRcIj57dGV4dH08L2Rpdj5cbiAgICAgICAgPC9idXR0b24+XG4gICAgKTtcbn0pO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNtYXJ0RHJvcGRvd25CdXR0b25Qcm9wcyB7XG4gICAgZmlsZUFjdGlvbklkOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBTbWFydERyb3Bkb3duQnV0dG9uOiBSZWFjdC5GQzxTbWFydERyb3Bkb3duQnV0dG9uUHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBmaWxlQWN0aW9uSWQgfSA9IHByb3BzO1xuXG4gICAgY29uc3QgYWN0aW9uID0gdXNlUmVjb2lsVmFsdWUoZmlsZUFjdGlvbkRhdGFTdGF0ZShmaWxlQWN0aW9uSWQpKTtcbiAgICBjb25zdCB0cmlnZ2VyQWN0aW9uID0gdXNlRmlsZUFjdGlvblRyaWdnZXIoZmlsZUFjdGlvbklkKTtcbiAgICBjb25zdCB7IGRpc2FibGVkIH0gPSB1c2VGaWxlQWN0aW9uTW9kaWZpZXJzKGZpbGVBY3Rpb25JZCk7XG5cbiAgICBpZiAoIWFjdGlvbikgcmV0dXJuIG51bGw7XG4gICAgY29uc3QgeyB0b29sYmFyQnV0dG9uOiBidXR0b24gfSA9IGFjdGlvbjtcbiAgICBpZiAoIWJ1dHRvbikgcmV0dXJuIG51bGw7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8RHJvcGRvd25CdXR0b25cbiAgICAgICAgICAgIHRleHQ9e2J1dHRvbi5uYW1lfVxuICAgICAgICAgICAgdG9vbHRpcD17YnV0dG9uLnRvb2x0aXB9XG4gICAgICAgICAgICBpY29uPXtidXR0b24uaWNvbn1cbiAgICAgICAgICAgIG9uQ2xpY2s9e3RyaWdnZXJBY3Rpb259XG4gICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgIC8+XG4gICAgKTtcbn07XG4iLCJpbXBvcnQgYyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VSZWNvaWxWYWx1ZSB9IGZyb20gJ3JlY29pbCc7XG5cbmltcG9ydCB7IGZpbGVBY3Rpb25EYXRhU3RhdGUgfSBmcm9tICcuLi8uLi9yZWNvaWwvZmlsZS1hY3Rpb25zLnJlY29pbCc7XG5pbXBvcnQgeyBDaG9ua3lJY29uTmFtZSB9IGZyb20gJy4uLy4uL3R5cGVzL2ljb25zLnR5cGVzJztcbmltcG9ydCB7IHVzZUZpbGVBY3Rpb25Nb2RpZmllcnMsIHVzZUZpbGVBY3Rpb25UcmlnZ2VyIH0gZnJvbSAnLi4vLi4vdXRpbC9maWxlLWFjdGlvbnMnO1xuaW1wb3J0IHsgQ2hvbmt5SWNvbkZBIH0gZnJvbSAnLi9DaG9ua3lJY29uJztcblxuZXhwb3J0IGludGVyZmFjZSBUb29sYmFyQnV0dG9uUHJvcHMge1xuICAgIHRleHQ6IHN0cmluZztcbiAgICB0b29sdGlwPzogc3RyaW5nO1xuICAgIGFjdGl2ZT86IGJvb2xlYW47XG4gICAgaWNvbj86IENob25reUljb25OYW1lIHwgc3RyaW5nO1xuICAgIGljb25Pbmx5PzogYm9vbGVhbjtcbiAgICBpY29uT25SaWdodD86IGJvb2xlYW47XG4gICAgb25DbGljaz86ICgpID0+IHZvaWQ7XG4gICAgZGlzYWJsZWQ/OiBib29sZWFuO1xufVxuXG5leHBvcnQgY29uc3QgVG9vbGJhckJ1dHRvbjogUmVhY3QuRkM8VG9vbGJhckJ1dHRvblByb3BzPiA9IFJlYWN0Lm1lbW8oKHByb3BzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgICB0ZXh0LFxuICAgICAgICB0b29sdGlwLFxuICAgICAgICBhY3RpdmUsXG4gICAgICAgIGljb24sXG4gICAgICAgIGljb25Pbmx5LFxuICAgICAgICBpY29uT25SaWdodCxcbiAgICAgICAgb25DbGljayxcbiAgICAgICAgZGlzYWJsZWQsXG4gICAgfSA9IHByb3BzO1xuXG4gICAgY29uc3QgaWNvbkNvbXBvbmVudCA9XG4gICAgICAgIGljb24gfHwgaWNvbk9ubHkgPyAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNob25reS10b29sYmFyLWJ1dHRvbi1pY29uXCI+XG4gICAgICAgICAgICAgICAgPENob25reUljb25GQVxuICAgICAgICAgICAgICAgICAgICBpY29uPXtpY29uID8gaWNvbiA6IENob25reUljb25OYW1lLmZhbGxiYWNrSWNvbn1cbiAgICAgICAgICAgICAgICAgICAgZml4ZWRXaWR0aD17dHJ1ZX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICkgOiBudWxsO1xuXG4gICAgY29uc3QgY2xhc3NOYW1lID0gYyh7XG4gICAgICAgICdjaG9ua3ktdG9vbGJhci1idXR0b24nOiB0cnVlLFxuICAgICAgICAnY2hvbmt5LWFjdGl2ZSc6ICEhYWN0aXZlLFxuICAgIH0pO1xuICAgIHJldHVybiAoXG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgICAgICAgIHRpdGxlPXt0b29sdGlwID8gdG9vbHRpcCA6IHRleHR9XG4gICAgICAgICAgICBkaXNhYmxlZD17IW9uQ2xpY2sgfHwgZGlzYWJsZWR9XG4gICAgICAgID5cbiAgICAgICAgICAgIHshaWNvbk9uUmlnaHQgJiYgaWNvbkNvbXBvbmVudH1cbiAgICAgICAgICAgIHt0ZXh0ICYmICFpY29uT25seSAmJiAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjaG9ua3ktdG9vbGJhci1idXR0b24tdGV4dFwiPnt0ZXh0fTwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtpY29uT25SaWdodCAmJiBpY29uQ29tcG9uZW50fVxuICAgICAgICA8L2J1dHRvbj5cbiAgICApO1xufSk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU21hcnRUb29sYmFyQnV0dG9uUHJvcHMge1xuICAgIGZpbGVBY3Rpb25JZDogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgU21hcnRUb29sYmFyQnV0dG9uOiBSZWFjdC5GQzxTbWFydFRvb2xiYXJCdXR0b25Qcm9wcz4gPSBSZWFjdC5tZW1vKFxuICAgIChwcm9wcykgPT4ge1xuICAgICAgICBjb25zdCB7IGZpbGVBY3Rpb25JZCB9ID0gcHJvcHM7XG5cbiAgICAgICAgY29uc3QgYWN0aW9uID0gdXNlUmVjb2lsVmFsdWUoZmlsZUFjdGlvbkRhdGFTdGF0ZShmaWxlQWN0aW9uSWQpKTtcbiAgICAgICAgY29uc3QgdHJpZ2dlckFjdGlvbiA9IHVzZUZpbGVBY3Rpb25UcmlnZ2VyKGZpbGVBY3Rpb25JZCk7XG4gICAgICAgIGNvbnN0IHsgYWN0aXZlLCBkaXNhYmxlZCB9ID0gdXNlRmlsZUFjdGlvbk1vZGlmaWVycyhmaWxlQWN0aW9uSWQpO1xuXG4gICAgICAgIGlmICghYWN0aW9uKSByZXR1cm4gbnVsbDtcbiAgICAgICAgY29uc3QgeyB0b29sYmFyQnV0dG9uOiBidXR0b24gfSA9IGFjdGlvbjtcbiAgICAgICAgaWYgKCFidXR0b24pIHJldHVybiBudWxsO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8VG9vbGJhckJ1dHRvblxuICAgICAgICAgICAgICAgIHRleHQ9e2J1dHRvbi5uYW1lfVxuICAgICAgICAgICAgICAgIHRvb2x0aXA9e2J1dHRvbi50b29sdGlwfVxuICAgICAgICAgICAgICAgIGljb249e2J1dHRvbi5pY29ufVxuICAgICAgICAgICAgICAgIGljb25Pbmx5PXtidXR0b24uaWNvbk9ubHl9XG4gICAgICAgICAgICAgICAgYWN0aXZlPXthY3RpdmV9XG4gICAgICAgICAgICAgICAgb25DbGljaz17dHJpZ2dlckFjdGlvbn1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgIH1cbik7XG4iLCIvKipcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMjBcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IEFjdGlvbkdyb3VwRGF0YSB9IGZyb20gJy4uLy4uL3R5cGVzL2ZpbGUtYWN0aW9ucy50eXBlcyc7XG5pbXBvcnQgeyBDaG9ua3lJY29uTmFtZSB9IGZyb20gJy4uLy4uL3R5cGVzL2ljb25zLnR5cGVzJztcbmltcG9ydCB7IHVzZUNsaWNrTGlzdGVuZXIgfSBmcm9tICcuLi8uLi91dGlsL2hvb2tzLWhlbHBlcnMnO1xuaW1wb3J0IHsgU21hcnREcm9wZG93bkJ1dHRvbiB9IGZyb20gJy4vRHJvcGRvd25CdXR0b24nO1xuaW1wb3J0IHsgVG9vbGJhckJ1dHRvbiB9IGZyb20gJy4vVG9vbGJhckJ1dHRvbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRHJvcGRvd25Qcm9wcyB7XG4gICAgZ3JvdXA6IEFjdGlvbkdyb3VwRGF0YTtcbn1cblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duOiBSZWFjdC5GQzxEcm9wZG93blByb3BzPiA9IFJlYWN0Lm1lbW8oKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBncm91cCB9ID0gcHJvcHM7XG5cbiAgICBjb25zdCBbc2hvd0Ryb3Bkb3duLCBzZXRTaG93RHJvcGRvd25dID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gICAgY29uc3QgaGlkZURyb3Bkb3duID0gdXNlQ2FsbGJhY2soKCkgPT4gc2V0U2hvd0Ryb3Bkb3duKGZhbHNlKSwgW3NldFNob3dEcm9wZG93bl0pO1xuICAgIGNvbnN0IGRyb3Bkb3duUmVmID0gdXNlQ2xpY2tMaXN0ZW5lcih7XG4gICAgICAgIG9uT3V0c2lkZUNsaWNrOiBoaWRlRHJvcGRvd24sXG4gICAgfSk7XG5cbiAgICBjb25zdCB0cmlnZ2VyQ2xpY2sgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIHNldFNob3dEcm9wZG93bih0cnVlKTtcbiAgICB9LCBbc2V0U2hvd0Ryb3Bkb3duXSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IHJlZj17ZHJvcGRvd25SZWZ9IGNsYXNzTmFtZT1cImNob25reS10b29sYmFyLWRyb3Bkb3duXCI+XG4gICAgICAgICAgICA8VG9vbGJhckJ1dHRvblxuICAgICAgICAgICAgICAgIHRleHQ9e2dyb3VwLm5hbWUhfVxuICAgICAgICAgICAgICAgIGFjdGl2ZT17c2hvd0Ryb3Bkb3dufVxuICAgICAgICAgICAgICAgIGljb249e0Nob25reUljb25OYW1lLmRyb3Bkb3dufVxuICAgICAgICAgICAgICAgIGljb25PblJpZ2h0PXt0cnVlfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RyaWdnZXJDbGlja31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7c2hvd0Ryb3Bkb3duICYmIChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNob25reS10b29sYmFyLWRyb3Bkb3duLWNvbnRlbnRcIj5cbiAgICAgICAgICAgICAgICAgICAge2dyb3VwLmZpbGVBY3Rpb25JZHMubWFwKChhY3Rpb25JZCkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPFNtYXJ0RHJvcGRvd25CdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2BhY3Rpb24tYnV0dG9uLSR7YWN0aW9uSWR9YH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlQWN0aW9uSWQ9e2FjdGlvbklkfVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufSk7XG4iLCIvKipcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMTlcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IEFjdGlvbkdyb3VwRGF0YSB9IGZyb20gJy4uLy4uL3R5cGVzL2ZpbGUtYWN0aW9ucy50eXBlcyc7XG5pbXBvcnQgeyBEcm9wZG93biB9IGZyb20gJy4vRHJvcGRvd24nO1xuaW1wb3J0IHsgU21hcnRUb29sYmFyQnV0dG9uIH0gZnJvbSAnLi9Ub29sYmFyQnV0dG9uJztcblxuZXhwb3J0IGludGVyZmFjZSBUb29sYmFyQnV0dG9uR3JvdXBQcm9wcyB7XG4gICAgZ3JvdXA6IEFjdGlvbkdyb3VwRGF0YTtcbn1cblxuZXhwb3J0IGNvbnN0IFRvb2xiYXJCdXR0b25Hcm91cDogUmVhY3QuRkM8VG9vbGJhckJ1dHRvbkdyb3VwUHJvcHM+ID0gUmVhY3QubWVtbyhcbiAgICAocHJvcHMpID0+IHtcbiAgICAgICAgY29uc3QgeyBncm91cCB9ID0gcHJvcHM7XG5cbiAgICAgICAgbGV0IGdyb3VwQ29udGVudHM6IFJlYWN0LlJlYWN0RWxlbWVudCB8IFJlYWN0LlJlYWN0RWxlbWVudFtdO1xuICAgICAgICBpZiAoZ3JvdXAuZHJvcGRvd24pIHtcbiAgICAgICAgICAgIGdyb3VwQ29udGVudHMgPSA8RHJvcGRvd24gZ3JvdXA9e2dyb3VwfSAvPjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdyb3VwQ29udGVudHMgPSBncm91cC5maWxlQWN0aW9uSWRzLm1hcCgoYWN0aW9uSWQpID0+IChcbiAgICAgICAgICAgICAgICA8U21hcnRUb29sYmFyQnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIGtleT17YGFjdGlvbi1idXR0b24tJHthY3Rpb25JZH1gfVxuICAgICAgICAgICAgICAgICAgICBmaWxlQWN0aW9uSWQ9e2FjdGlvbklkfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImNob25reS10b29sYmFyLWJ1dHRvbi1ncm91cFwiPntncm91cENvbnRlbnRzfTwvZGl2PjtcbiAgICB9XG4pO1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VSZWNvaWxWYWx1ZSB9IGZyb20gJ3JlY29pbCc7XG5cbmltcG9ydCB7IHNlYXJjaEJhckVuYWJsZWRTdGF0ZSB9IGZyb20gJy4uLy4uL3JlY29pbC9zZWFyY2gucmVjb2lsJztcbmltcG9ydCB7IHVzZUFjdGlvbkdyb3VwcywgdXNlRm9sZGVyQ2hhaW5Db21wb25lbnQgfSBmcm9tICcuL0ZpbGVUb29sYmFyLWhvb2tzJztcbmltcG9ydCB7IFRvb2xiYXJCdXR0b25Hcm91cCB9IGZyb20gJy4vVG9vbGJhckJ1dHRvbkdyb3VwJztcblxuZXhwb3J0IGludGVyZmFjZSBGaWxlVG9vbGJhclByb3BzIHt9XG5cbmV4cG9ydCBjb25zdCBGaWxlVG9vbGJhcjogUmVhY3QuRkM8RmlsZVRvb2xiYXJQcm9wcz4gPSBSZWFjdC5tZW1vKCgpID0+IHtcbiAgICBjb25zdCBzZWFyY2hCYXJFbmFibGVkID0gdXNlUmVjb2lsVmFsdWUoc2VhcmNoQmFyRW5hYmxlZFN0YXRlKTtcblxuICAgIGNvbnN0IGZvbGRlckNoYWluQ29tcCA9IHVzZUZvbGRlckNoYWluQ29tcG9uZW50KCk7XG4gICAgY29uc3Qge1xuICAgICAgICBidXR0b25Hcm91cHMsXG4gICAgICAgIG9wZW5QYXJlbnRGb2xkZXJCdXR0b25Hcm91cCxcbiAgICAgICAgc2VhcmNoQnV0dG9uR3JvdXAsXG4gICAgfSA9IHVzZUFjdGlvbkdyb3VwcygpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjaG9ua3ktdG9vbGJhclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjaG9ua3ktdG9vbGJhci1zaWRlIGNob25reS10b29sYmFyLXNpZGUtbGVmdFwiPlxuICAgICAgICAgICAgICAgIHtvcGVuUGFyZW50Rm9sZGVyQnV0dG9uR3JvdXAgJiYgKFxuICAgICAgICAgICAgICAgICAgICA8VG9vbGJhckJ1dHRvbkdyb3VwIGdyb3VwPXtvcGVuUGFyZW50Rm9sZGVyQnV0dG9uR3JvdXB9IC8+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICB7Zm9sZGVyQ2hhaW5Db21wfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNob25reS10b29sYmFyLXNpZGUgY2hvbmt5LXRvb2xiYXItc2lkZS1yaWdodFwiPlxuICAgICAgICAgICAgICAgIHtidXR0b25Hcm91cHMubWFwKChncm91cCwgaW5kZXgpID0+IChcbiAgICAgICAgICAgICAgICAgICAgPFRvb2xiYXJCdXR0b25Hcm91cFxuICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtgYnV0dG9uLWdyb3VwLSR7Z3JvdXAubmFtZSA/IGdyb3VwLm5hbWUgOiBpbmRleH1gfVxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXA9e2dyb3VwfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgIHtzZWFyY2hCYXJFbmFibGVkICYmIHNlYXJjaEJ1dHRvbkdyb3VwICYmIChcbiAgICAgICAgICAgICAgICAgICAgPFRvb2xiYXJCdXR0b25Hcm91cCBncm91cD17c2VhcmNoQnV0dG9uR3JvdXB9IC8+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufSk7XG5cbkZpbGVUb29sYmFyLnByb3BUeXBlcyA9IHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZm9sZGVyQ2hhaW46IFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgICBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgICAgIFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgICAgICAgIFByb3BUeXBlcy5vbmVPZihbbnVsbF0pLmlzUmVxdWlyZWQsXG4gICAgICAgIF0pXG4gICAgKSxcbn07XG4iLCIvKipcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMjBcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCBjIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUmVjb2lsU3RhdGUsIHVzZVJlY29pbFZhbHVlLCB1c2VTZXRSZWNvaWxTdGF0ZSB9IGZyb20gJ3JlY29pbCc7XG5cbmltcG9ydCB7XG4gICAgc2VhcmNoQmFyRW5hYmxlZFN0YXRlLFxuICAgIHNlYXJjaEJhclZpc2libGVTdGF0ZSxcbiAgICBzZWFyY2hGaWx0ZXJTdGF0ZSxcbn0gZnJvbSAnLi4vLi4vcmVjb2lsL3NlYXJjaC5yZWNvaWwnO1xuaW1wb3J0IHsgQ2hvbmt5SWNvbk5hbWUgfSBmcm9tICcuLi8uLi90eXBlcy9pY29ucy50eXBlcyc7XG5pbXBvcnQgeyB1c2VEZWJvdW5jZSB9IGZyb20gJy4uLy4uL3V0aWwvaG9va3MtaGVscGVycyc7XG5pbXBvcnQgeyBDaG9ua3lJY29uRkEgfSBmcm9tICcuL0Nob25reUljb24nO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVTZWFyY2hQcm9wcyB7fVxuXG5leHBvcnQgY29uc3QgRmlsZVNlYXJjaDogUmVhY3QuRkM8RmlsZVNlYXJjaFByb3BzPiA9ICgpID0+IHtcbiAgICBjb25zdCBzZXRTZWFyY2hCYXJFbmFibGVkID0gdXNlU2V0UmVjb2lsU3RhdGUoc2VhcmNoQmFyRW5hYmxlZFN0YXRlKTtcbiAgICBjb25zdCBzZWFyY2hCYXJWaXNpYmxlID0gdXNlUmVjb2lsVmFsdWUoc2VhcmNoQmFyVmlzaWJsZVN0YXRlKTtcbiAgICBjb25zdCBbZ2xvYmFsU2VhcmNoRmlsdGVyLCBzZXRHbG9iYWxTZWFyY2hGaWx0ZXJdID0gdXNlUmVjb2lsU3RhdGUoXG4gICAgICAgIHNlYXJjaEZpbHRlclN0YXRlXG4gICAgKTtcblxuICAgIC8vIE5vdGlmeSBhbGwgb3RoZXIgY29tcG9uZW50cyB0aGF0IHNlYXJjaCBiYXIgaXMgbW91bnRlZC5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBzZXRTZWFyY2hCYXJFbmFibGVkKHRydWUpO1xuICAgICAgICByZXR1cm4gKCkgPT4gc2V0U2VhcmNoQmFyRW5hYmxlZChmYWxzZSk7XG4gICAgfSwgW3NldFNlYXJjaEJhckVuYWJsZWRdKTtcblxuICAgIC8vIFNob3cgYSBsb2FkaW5nIGluZGljYXRvciBkdXJpbmcgZGVib3VuY2UgcGVyaW9kcyB0byBoZWxwIHVzZXIgcmVhbGlzZSB0aGF0IGFcbiAgICAvLyBkZWJvdW5jZSBwZXJpb2QgaXMgaW4gZWZmZWN0LlxuICAgIGNvbnN0IFtzaG93TG9hZGluZ0luZGljYXRvciwgc2V0U2hvd0xvYWRpbmdJbmRpY2F0b3JdID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuXG4gICAgLy8gRGVmaW5lIGEgbG9jYWwgc2VhcmNoIGZpbHRlciBhbmQgaXRzIGRlYm91bmNlZCB2ZXJzaW9uXG4gICAgY29uc3QgW2xvY2FsRmlsdGVyLCBzZXRMb2NhbEZpbHRlcl0gPSB1c2VTdGF0ZTxzdHJpbmc+KGdsb2JhbFNlYXJjaEZpbHRlcik7XG4gICAgY29uc3QgW2RlYm91bmNlZEZpbHRlciwgc2V0RGVib3VuY2VkRmlsdGVyXSA9IHVzZURlYm91bmNlKGxvY2FsRmlsdGVyLCA1MDApO1xuXG4gICAgLy8gPT09IERlYm91bmNlZCBnbG9iYWwgZmlsdGVyIHVwZGF0ZVxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHNldFNob3dMb2FkaW5nSW5kaWNhdG9yKGZhbHNlKTtcbiAgICAgICAgY29uc3QgdHJpbW1lZEZpbHRlciA9IGRlYm91bmNlZEZpbHRlci50cmltKCk7XG4gICAgICAgIHNldEdsb2JhbFNlYXJjaEZpbHRlcih0cmltbWVkRmlsdGVyKTtcbiAgICB9LCBbZGVib3VuY2VkRmlsdGVyLCBzZXRTaG93TG9hZGluZ0luZGljYXRvciwgc2V0R2xvYmFsU2VhcmNoRmlsdGVyXSk7XG5cbiAgICAvLyA9PT0gU2VhcmNoIGJhciBzaG93aW5nL2hpZGluZyBsb2dpY1xuICAgIGNvbnN0IGlucHV0UmVmID0gUmVhY3QudXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmIChzZWFyY2hCYXJWaXNpYmxlKSB7XG4gICAgICAgICAgICAvLyBXaGVuIHRoZSBzZWFyY2ggYmFyIGlzIHNob3duLCBmb2N1cyB0aGUgaW5wdXRcbiAgICAgICAgICAgIGlmIChpbnB1dFJlZi5jdXJyZW50KSBpbnB1dFJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBXaGVuIHRoZSBzZWFyY2ggYmFyIGlzIGhpZGRlbiwgY2xlYXIgb3V0IHRoZSBzZWFyY2ggZmlsdGVyXG4gICAgICAgICAgICBzZXRTaG93TG9hZGluZ0luZGljYXRvcihmYWxzZSk7XG4gICAgICAgICAgICBzZXRMb2NhbEZpbHRlcignJyk7XG4gICAgICAgICAgICBzZXREZWJvdW5jZWRGaWx0ZXIoJycpO1xuICAgICAgICB9XG4gICAgfSwgW1xuICAgICAgICBpbnB1dFJlZixcbiAgICAgICAgc2VhcmNoQmFyVmlzaWJsZSxcbiAgICAgICAgc2V0U2hvd0xvYWRpbmdJbmRpY2F0b3IsXG4gICAgICAgIHNldExvY2FsRmlsdGVyLFxuICAgICAgICBzZXREZWJvdW5jZWRGaWx0ZXIsXG4gICAgXSk7XG5cbiAgICAvLyA9PT0gVGV4dCBpbnB1dCBoYW5kbGVyXG4gICAgY29uc3QgaGFuZGxlSW5wdXRDaGFuZ2UgPSB1c2VDYWxsYmFjayhcbiAgICAgICAgKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgICAgICAgICAgc2V0U2hvd0xvYWRpbmdJbmRpY2F0b3IodHJ1ZSk7XG4gICAgICAgICAgICBzZXRMb2NhbEZpbHRlcihldmVudC50YXJnZXQudmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBbc2V0U2hvd0xvYWRpbmdJbmRpY2F0b3IsIHNldExvY2FsRmlsdGVyXVxuICAgICk7XG5cbiAgICBjb25zdCBjbGFzc05hbWUgPSBjKHtcbiAgICAgICAgJ2Nob25reS1maWxlLXNlYXJjaCc6IHRydWUsXG4gICAgICAgICdjaG9ua3ktZmlsZS1zZWFyY2gtaGlkZGVuJzogIXNlYXJjaEJhclZpc2libGUsXG4gICAgfSk7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNob25reS1maWxlLXNlYXJjaC1pbnB1dC1ncm91cFwiPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiY2hvbmt5LWZpbGUtc2VhcmNoXCI+XG4gICAgICAgICAgICAgICAgICAgIDxDaG9ua3lJY29uRkEgaWNvbj17Q2hvbmt5SWNvbk5hbWUuc2VhcmNofSBmaXhlZFdpZHRoPXt0cnVlfSAvPlxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgIHJlZj17aW5wdXRSZWZ9XG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgaWQ9XCJjaG9ua3ktZmlsZS1zZWFyY2hcIlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17bG9jYWxGaWx0ZXJ9XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiVHlwZSB0byBzZWFyY2guLi5cIlxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlSW5wdXRDaGFuZ2V9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNob25reS1maWxlLXNlYXJjaC1pbnB1dC1ncm91cC1sb2FkaW5nXCI+XG4gICAgICAgICAgICAgICAgICAgIHtzaG93TG9hZGluZ0luZGljYXRvciAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJjaG9ua3ktZmlsZS1zZWFyY2gtaW5wdXQtZ3JvdXAtbG9hZGluZy1pbmRpY2F0b3JcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2hvbmt5SWNvbkZBIGljb249e0Nob25reUljb25OYW1lLmxvYWRpbmd9IHNwaW49e3RydWV9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQXV0b1NpemVyLCBHcmlkIH0gZnJvbSAncmVhY3QtdmlydHVhbGl6ZWQnO1xuaW1wb3J0IHsgdXNlUmVjb2lsVmFsdWUgfSBmcm9tICdyZWNvaWwnO1xuXG5pbXBvcnQgeyBmaWxlRW50cnlTaXplU3RhdGUgfSBmcm9tICcuLi8uLi9yZWNvaWwvZmlsZS1saXN0LnJlY29pbCc7XG5pbXBvcnQgeyBmaWxlc1N0YXRlIH0gZnJvbSAnLi4vLi4vcmVjb2lsL2ZpbGVzLnJlY29pbCc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi8uLi91dGlsL2xvZ2dlcic7XG5pbXBvcnQgeyBFcnJvck1lc3NhZ2UgfSBmcm9tICcuLi9pbnRlcm5hbC9FcnJvck1lc3NhZ2UnO1xuaW1wb3J0IHsgdXNlRW50cnlSZW5kZXJlciwgdXNlR3JpZFJlbmRlcmVyIH0gZnJvbSAnLi9GaWxlTGlzdC12aXJ0dWFsaXphdGlvbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZUxpc3RQcm9wcyB7fVxuXG5leHBvcnQgY29uc3QgRmlsZUxpc3Q6IFJlYWN0LkZDPEZpbGVMaXN0UHJvcHM+ID0gUmVhY3QubWVtbygoKSA9PiB7XG4gICAgY29uc3QgZmlsZXMgPSB1c2VSZWNvaWxWYWx1ZShmaWxlc1N0YXRlKTtcbiAgICBjb25zdCBlbnRyeVNpemUgPSB1c2VSZWNvaWxWYWx1ZShmaWxlRW50cnlTaXplU3RhdGUpO1xuXG4gICAgY29uc3QgZW50cnlSZW5kZXJlciA9IHVzZUVudHJ5UmVuZGVyZXIoZmlsZXMpO1xuXG4gICAgLy8gVGh1bWJzIGdyaWQgcmVmIGlzIG5vdCB1c2VkIGF0IHRoZSBtb21lbnQgYnV0IHdpbGwgYmUgbmVjZXNzYXJ5IGxhdGVyLiBJdCBpc1xuICAgIC8vIHVzZWQgdG8gcmVjb21wdXRlIHRoZSBoZWlnaHQgb2Ygcm93cyBpbiB0aGUgYExpc3RgIGZyb20gYHJlYWN0LXZpcnR1YWxpemVkYC5cbiAgICAvLyBDb25zdWx0IENob25reSB2MC54IGltcGxlbWVudGF0aW9uIGZvciBkZXRhaWxzLlxuICAgIGNvbnN0IHRodW1ic0dyaWRSZWYgPSB1c2VSZWY8R3JpZD4oKTtcblxuICAgIC8vIFRPRE86IFJlYWQgdGhpcyB2YWx1ZSBmcm9tIHNvbWV3aGVyZS5cbiAgICBjb25zdCBmaWxsUGFyZW50Q29udGFpbmVyID0gdHJ1ZTtcblxuICAgIGNvbnN0IGdyaWRSZW5kZXJlciA9IHVzZUdyaWRSZW5kZXJlcihcbiAgICAgICAgZmlsZXMsXG4gICAgICAgIGVudHJ5U2l6ZSxcbiAgICAgICAgZW50cnlSZW5kZXJlcixcbiAgICAgICAgdGh1bWJzR3JpZFJlZixcbiAgICAgICAgZmlsbFBhcmVudENvbnRhaW5lclxuICAgICk7XG5cbiAgICBpZiAoIWZpbGVzKSB7XG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9XG4gICAgICAgICAgICBgJHtGaWxlTGlzdC5uYW1lfSBjYW5ub3QgZmluZCB0aGUgXCJmaWxlc1wiIGFycmF5IHZpYSBSZWFjdCBjb250ZXh0LiBUaGlzIGAgK1xuICAgICAgICAgICAgYGhhcHBlbnMgd2hlbiAke0ZpbGVMaXN0Lm5hbWV9IGlzIHBsYWNlZCBvdXRzaWRlIG9mIFwiRmlsZUJyb3dzZXJcImAgK1xuICAgICAgICAgICAgYGNvbXBvbmVudC5gO1xuICAgICAgICBMb2dnZXIuZXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuIDxFcnJvck1lc3NhZ2UgbWVzc2FnZT17ZXJyb3JNZXNzYWdlfSAvPjtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNob25reS1maWxlLWxpc3RcIiBzdHlsZT17eyBtaW5IZWlnaHQ6IGVudHJ5U2l6ZS5oZWlnaHQgfX0+XG4gICAgICAgICAgICA8QXV0b1NpemVyIGRpc2FibGVIZWlnaHQ9eyFmaWxsUGFyZW50Q29udGFpbmVyfT57Z3JpZFJlbmRlcmVyfTwvQXV0b1NpemVyPlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufSk7XG4iLCJpbXBvcnQgJ25vdHkvbGliL25vdHkuY3NzJztcbmltcG9ydCAnbm90eS9saWIvdGhlbWVzL3JlbGF4LmNzcyc7XG5pbXBvcnQgJy4vc3Rvcnlib29rLmNzcyc7XG5cbmltcG9ydCB7XG4gICAgRGVzY3JpcHRpb24sXG4gICAgRG9jc0NvbnRleHQsXG4gICAgRG9jc1N0b3J5LFxuICAgIFRpdGxlLFxufSBmcm9tICdAc3Rvcnlib29rL2FkZG9uLWRvY3MvYmxvY2tzJztcbmltcG9ydCB7IGdldERvY3NTdG9yaWVzIH0gZnJvbSAnQHN0b3J5Ym9vay9hZGRvbi1kb2NzL2Rpc3QvYmxvY2tzL3V0aWxzJztcbmltcG9ydCB7IFNvdXJjZSB9IGZyb20gJ0BzdG9yeWJvb2svY29tcG9uZW50cyc7XG5pbXBvcnQgTm90eSBmcm9tICdub3R5JztcbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRG5kUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1kbmQnO1xuaW1wb3J0IHsgSFRNTDVCYWNrZW5kIH0gZnJvbSAncmVhY3QtZG5kLWh0bWw1LWJhY2tlbmQnO1xuXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSB9IGZyb20gJy4uL3NyYyc7XG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgTGl2ZUV4YW1wbGVNZCBmcm9tICcuL0xpdmUtZXhhbXBsZXMubWQnO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IFVuc3RhYmxlV2FybmluZ01kIGZyb20gJy4vVW5zdGFibGUtd2FybmluZy5tZCc7XG5cbmV4cG9ydCBlbnVtIFN0b3J5Q2F0ZWdvcmllcyB7XG4gICAgV2VsY29tZSA9ICcxKSBXZWxjb21lJyxcbiAgICBEZW1vcyA9ICcyKSBEZW1vcycsXG4gICAgRmlsZUJyb3dzZXJCYXNpY3MgPSAnMykgRmlsZSBCcm93c2VyIGJhc2ljcycsXG4gICAgRmlsZUJyb3dzZXJFeGFtcGxlcyA9ICc0KSBGaWxlIEJyb3dzZXIgZXhhbXBsZXMnLFxuICAgIEFwaVJlZmVyZW5jZSA9ICc1KSBBUEkgUmVmZXJlbmNlJyxcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZURvY3NPYmplY3QgPSAocGFyYW1zOiB7IG1hcmtkb3duOiBzdHJpbmcgfSkgPT4ge1xuICAgIGNvbnN0IHsgbWFya2Rvd24gfSA9IHBhcmFtcztcblxuICAgIHJldHVybiB7XG4gICAgICAgIHBhZ2U6ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgICAgICAgICA8RG5kUHJvdmlkZXIgYmFja2VuZD17SFRNTDVCYWNrZW5kfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtwYXJzZU1hcmtkb3duKFVuc3RhYmxlV2FybmluZ01kKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUaXRsZSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAge3BhcnNlTWFya2Rvd24obWFya2Rvd24pfVxuICAgICAgICAgICAgICAgICAgICAgICAgPEN1c3RvbVByaW1hcnkgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtwYXJzZU1hcmtkb3duKExpdmVFeGFtcGxlTWQpfVxuICAgICAgICAgICAgICAgICAgICA8L0RuZFByb3ZpZGVyPlxuICAgICAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3QgQ3VzdG9tUHJpbWFyeTogUmVhY3QuRkM8YW55PiA9ICh7IG5hbWUgfSkgPT4ge1xuICAgIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KERvY3NDb250ZXh0KTtcbiAgICBjb25zdCBjb21wb25lbnRTdG9yaWVzID0gZ2V0RG9jc1N0b3JpZXMoY29udGV4dCk7XG4gICAgbGV0IHN0b3J5O1xuICAgIGlmIChjb21wb25lbnRTdG9yaWVzKSB7XG4gICAgICAgIHN0b3J5ID0gbmFtZVxuICAgICAgICAgICAgPyBjb21wb25lbnRTdG9yaWVzLmZpbmQoKHMpID0+IHMubmFtZSA9PT0gbmFtZSlcbiAgICAgICAgICAgIDogY29tcG9uZW50U3Rvcmllc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIHN0b3J5ID8gPERvY3NTdG9yeSB7Li4uc3Rvcnl9IGV4cGFuZGVkPXtmYWxzZX0gLz4gOiBudWxsO1xufTtcblxuY29uc3QgcGFyc2VNYXJrZG93biA9IChtYXJrZG93bjogc3RyaW5nKTogUmVhY3QuUmVhY3RFbGVtZW50W10gPT4ge1xuICAgIC8vIEV4dHJhY3QgaW5kaWNlcyBvZiBzdGFydCBhbmQgZW5kIG9mIGVhY2ggY29kZSBibG9ja1xuICAgIGNvbnN0IGluZGljZXMgPSBnZXRJbmRpY2VzT2YoJ2BgYCcsIG1hcmtkb3duKTtcblxuICAgIC8vIE1hdGNoIGluZGljZXMgdG8gc3RhcnQvZW5kIGxvY2F0aW9uXG4gICAgY29uc3Qgb2NjdXJyZW5jZXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGluZGV4IG9mIGluZGljZXMpIHtcbiAgICAgICAgY29uc3QgbGluZUVuZCA9IG1hcmtkb3duLmluZGV4T2YoJ1xcbicsIGluZGV4KTtcbiAgICAgICAgY29uc3QgbGluZSA9IG1hcmtkb3duLnN1YnN0cmluZyhpbmRleCwgbGluZUVuZCkudHJpbSgpO1xuXG4gICAgICAgIGNvbnN0IG9wZW5pbmdfbWF0Y2hlcyA9IC9eYGBgKFthLXotXSspKFxccyt7Lio/fSk/JC9pLmV4ZWMobGluZSk7XG5cbiAgICAgICAgaWYgKG9wZW5pbmdfbWF0Y2hlcykge1xuICAgICAgICAgICAgY29uc3QgWywgbGFuZ3VhZ2UsIGpzb25Db25maWddID0gb3BlbmluZ19tYXRjaGVzO1xuICAgICAgICAgICAgb2NjdXJyZW5jZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3N0YXJ0JyxcbiAgICAgICAgICAgICAgICBsYW5ndWFnZSxcbiAgICAgICAgICAgICAgICBqc29uQ29uZmlnLFxuICAgICAgICAgICAgICAgIG1hcmtkb3duRW5kOiBpbmRleCxcbiAgICAgICAgICAgICAgICBjb2RlU3RhcnQ6IGxpbmVFbmQgKyAxLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoL15gYGAkL2kuZXhlYyhsaW5lKSkge1xuICAgICAgICAgICAgb2NjdXJyZW5jZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2VuZCcsXG4gICAgICAgICAgICAgICAgY29kZUVuZDogaW5kZXgsXG4gICAgICAgICAgICAgICAgbWFya2Rvd25TdGFydDogbGluZUVuZCArIDEsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIENyZWF0ZSBjb21wb25lbnRzIGJhc2VkIG9uIHN0YXJ0L2VuZCBsb2NhdGlvblxuICAgIGNvbnN0IGNvbXBvbmVudHMgPSBbXTtcbiAgICBsZXQgbWFya2Rvd25TdGFydCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvY2N1cnJlbmNlcy5sZW5ndGggLSAxOyArK2kpIHtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBvY2N1cnJlbmNlc1tpXTtcbiAgICAgICAgY29uc3QgZW5kID0gb2NjdXJyZW5jZXNbaSArIDFdO1xuXG4gICAgICAgIGlmIChzdGFydC50eXBlICE9PSAnc3RhcnQnIHx8IGVuZC50eXBlICE9PSAnZW5kJykgY29udGludWU7XG4gICAgICAgIGVsc2UgaSArPSAxO1xuXG4gICAgICAgIGNvbnN0IG1kU2xpY2UgPSBtYXJrZG93bi5zdWJzdHJpbmcobWFya2Rvd25TdGFydCwgc3RhcnQubWFya2Rvd25FbmQpO1xuICAgICAgICBjb25zdCBjb2RlU2xpY2UgPSBtYXJrZG93bi5zdWJzdHJpbmcoc3RhcnQuY29kZVN0YXJ0ISwgZW5kLmNvZGVFbmQpO1xuXG4gICAgICAgIGNvbXBvbmVudHMucHVzaChwcmVwYXJlTWFya2Rvd25Db21wKGksIG1kU2xpY2UpKTtcbiAgICAgICAgY29tcG9uZW50cy5wdXNoKFxuICAgICAgICAgICAgcHJlcGFyZUNvZGVDb21wKGksIHN0YXJ0Lmxhbmd1YWdlLCBjb2RlU2xpY2UsIHN0YXJ0Lmpzb25Db25maWcpXG4gICAgICAgICk7XG4gICAgICAgIG1hcmtkb3duU3RhcnQgPSBlbmQubWFya2Rvd25TdGFydCE7XG4gICAgfVxuICAgIGNvbXBvbmVudHMucHVzaChcbiAgICAgICAgPERlc2NyaXB0aW9uIGtleT1cIm1hcmtkb3duLWxhc3RcIiBtYXJrZG93bj17bWFya2Rvd24uc3Vic3RyaW5nKG1hcmtkb3duU3RhcnQpfSAvPlxuICAgICk7XG5cbiAgICByZXR1cm4gY29tcG9uZW50cztcbn07XG5cbmNvbnN0IHByZXBhcmVNYXJrZG93bkNvbXAgPSAoaW5kZXg6IG51bWJlciwgbWFya2Rvd246IHN0cmluZykgPT4ge1xuICAgIHJldHVybiA8RGVzY3JpcHRpb24ga2V5PXtgbWQtJHtpbmRleH1gfSBtYXJrZG93bj17bWFya2Rvd259IC8+O1xufTtcblxuY29uc3QgcHJlcGFyZUNvZGVDb21wID0gKFxuICAgIGluZGV4OiBudW1iZXIsXG4gICAgbGFuZ3VhZ2U/OiBzdHJpbmcsXG4gICAgY29kZT86IHN0cmluZyxcbiAgICBqc29uQ29uZmlnPzogc3RyaW5nXG4pID0+IHtcbiAgICBjb25zdCBrZXkgPSBgY29kZS0kezIgKiBpbmRleCArIDF9YDtcblxuICAgIGxldCBkaXNwbGF5Q29kZTtcbiAgICBpZiAoanNvbkNvbmZpZykge1xuICAgICAgICBkaXNwbGF5Q29kZSA9XG4gICAgICAgICAgICBgU29ycnksIEpTT04gY29uZmlnIGxvYWRpbmcgaXMgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQuIGAgK1xuICAgICAgICAgICAgYFxcbllvdXIgY29uZmlnOiAke2pzb25Db25maWd9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBkaXNwbGF5Q29kZSA9IGNvZGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIDxTb3VyY2Uga2V5PXtrZXl9IGxhbmd1YWdlPXtsYW5ndWFnZX0gY29kZT17ZGlzcGxheUNvZGV9IC8+O1xufTtcblxuY29uc3QgZ2V0SW5kaWNlc09mID0gKG5lZWRsZTogc3RyaW5nLCBoYXlzdGFjazogc3RyaW5nKSA9PiB7XG4gICAgY29uc3Qgc2VhcmNoU3RyTGVuID0gbmVlZGxlLmxlbmd0aDtcbiAgICBpZiAoc2VhcmNoU3RyTGVuID09IDApIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBsZXQgaW5kZXg7XG4gICAgbGV0IHN0YXJ0SW5kZXggPSAwO1xuICAgIGNvbnN0IGluZGljZXM6IG51bWJlcltdID0gW107XG4gICAgd2hpbGUgKChpbmRleCA9IGhheXN0YWNrLmluZGV4T2YobmVlZGxlLCBzdGFydEluZGV4KSkgPiAtMSkge1xuICAgICAgICBpbmRpY2VzLnB1c2goaW5kZXgpO1xuICAgICAgICBzdGFydEluZGV4ID0gaW5kZXggKyBzZWFyY2hTdHJMZW47XG4gICAgfVxuICAgIHJldHVybiBpbmRpY2VzO1xufTtcblxuZXhwb3J0IGNvbnN0IHNob3dBY3Rpb25Ob3RpZmljYXRpb24gPSAocGFyYW1zOiB7XG4gICAgYWN0aW9uOiBGaWxlQWN0aW9uO1xuICAgIGRhdGE6IEZpbGVBY3Rpb25EYXRhO1xufSkgPT4ge1xuICAgIGNvbnN0IHsgYWN0aW9uLCBkYXRhIH0gPSBwYXJhbXM7XG5cbiAgICBjb25zdCB0ZXh0UGFydHM6IHN0cmluZ1tdID0gW107XG4gICAgdGV4dFBhcnRzLnB1c2goYDxiPkFjdGlvbjo8L2I+ICR7YWN0aW9uLmlkfWApO1xuICAgIGlmIChkYXRhLnRhcmdldCkge1xuICAgICAgICB0ZXh0UGFydHMucHVzaChgPGI+VGFyZ2V0OjwvYj4gPGNvZGU+JHtkYXRhLnRhcmdldC5uYW1lfTwvY29kZT5gKTtcbiAgICB9XG4gICAgaWYgKGRhdGEuZmlsZXMpIHtcbiAgICAgICAgY29uc3QgZmlsZU5hbWVzID0gZGF0YS5maWxlcy5tYXAoKGYpID0+IGYubmFtZSk7XG4gICAgICAgIGNvbnN0IGZpbGVDb21wcyA9IGZpbGVOYW1lcy5tYXAoKG5hbWUpID0+IGA8Y29kZT4ke25hbWV9PC9jb2RlPmApO1xuICAgICAgICBjb25zdCBmaWxlQ291bnQgPSBmaWxlQ29tcHMubGVuZ3RoO1xuICAgICAgICBjb25zdCBmaWxlVGl0bGUgPSBgJHtmaWxlQ291bnR9ICR7ZmlsZUNvdW50ID09PSAxID8gJ2ZpbGUnIDogJ2ZpbGVzJ306YDtcbiAgICAgICAgdGV4dFBhcnRzLnB1c2goYDxiPiR7ZmlsZVRpdGxlfTwvYj4gWyR7ZmlsZUNvbXBzLmpvaW4oJywgJyl9XWApO1xuICAgIH1cbiAgICBjb25zdCB0ZXh0ID0gdGV4dFBhcnRzLmpvaW4oJzxici8+Jyk7XG5cbiAgICBuZXcgTm90eSh7XG4gICAgICAgIHRleHQsXG4gICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgICAgdGhlbWU6ICdyZWxheCcsXG4gICAgICAgIHRpbWVvdXQ6IDMwMDAsXG4gICAgfSkuc2hvdygpO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IFwiPGRpdiBjbGFzcz1cXFwidW5zdGFibGUtd2FybmluZ1xcXCI+XFxuXFxuPiBDaG9ua3kgYDEueGAgaXMgc3RpbGwgaW4gYmV0YS4gSWYgeW91IGZvdW5kIGEgYnVnIG9yIHdhbnQgdG8gcmVxdWVzdCBhIGZlYXR1cmUsIHBsZWFzZVxcbj4gW2NyZWF0ZSBhbiBpc3N1ZV0oaHR0cHM6Ly9naXRodWIuY29tL1RpbWJvS1ovQ2hvbmt5L2lzc3Vlcykgb24gR2l0SHViLlxcblxcbjwvZGl2PlxcblwiOyIsImV4cG9ydCBkZWZhdWx0IFwiIyMjIEEgbm90ZSBhYm91dCBsaXZlIGV4YW1wbGVzLi4uXFxuXFxuQWxsIGxpdmUgZXhhbXBsZXMgYXJlIHdyaXR0ZW4gaW4gVHlwZXNjcmlwdC4gQWxsIGNvbXBvbmVudHMgYW5kIHR5cGVzIGFyZSBpbXBvcnRlZFxcbmZyb20gdGhlIGBjaG9ua3lgIHBhY2thZ2UsIGUuZy46XFxuXFxuYGBgdHNcXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuaW1wb3J0IHsgRmlsZUJyb3dzZXIsIEZpbGVUb29sYmFyLCBGaWxlTGlzdCwgRmlsZURhdGEgfSBmcm9tICdjaG9ua3knO1xcbmBgYFxcblxcblRoZSBvbmx5IGV4Y2VwdGlvbiBpcyB0aGUgYHNob3dBY3Rpb25Ob3RpZmljYXRpb24oKWAgZnVuY3Rpb24sIHdoaWNoIGNhbGxzXFxuW3RoZSBOb3R5IG5vdGlmaWNhdGlvbiBsaWJyYXJ5XShodHRwczovL25lZC5pbS9ub3R5LykgKG5vdCBwYWNrYWdlZCB3aXRoIENob25reSkuIFRvXFxucnVuIHRoZSBleGFtcGxlcyBsb2NhbGx5LCB5b3UgY2FuIHJlcGxhY2UgYHNob3dBY3Rpb25Ob3RpZmljYXRpb24oKWAgd2l0aFxcbmBjb25zb2xlLmxvZygpYC5cXG5cIjsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcImFXenpcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCIrS1hPXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiN3gvQ1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcImpRL3lcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCIyRzlTXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwicGxCd1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIk0rL0ZcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCI4N2lmXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwibFRFTFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcImtZeFBcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJ2clJmXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiY0FST1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcImFMZ29cIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJEWitjXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiejg0SVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcImhDT2FcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJVdm1CXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiS3FYd1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIkxXMGhcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJOeU1ZXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiYW9rQVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIjd4UlVcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJsTjVCXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiTXZVTFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcImp3dWVcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCIrb3haXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiWXNnaFwiKTsiLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTEyLTEhLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cG9zdGNzcyEuL21haW4uY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIkVnUlBcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJLT3RaXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwieUgvZlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcImZSVjFcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJIVUNnXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiWWN0NVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcImpRM2lcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCIxSXVjXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiN25tVFwiKTsiLCJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IG1keCB9IGZyb20gJ0BtZHgtanMvcmVhY3QnXG5cbi8qIEBqc3ggbWR4ICovXG5cblxuY29uc3QgbWFrZVNob3J0Y29kZSA9IG5hbWUgPT4gZnVuY3Rpb24gTURYRGVmYXVsdFNob3J0Y29kZShwcm9wcykge1xuICBjb25zb2xlLndhcm4oXCJDb21wb25lbnQgXCIgKyBuYW1lICsgXCIgd2FzIG5vdCBpbXBvcnRlZCwgZXhwb3J0ZWQsIG9yIHByb3ZpZGVkIGJ5IE1EWFByb3ZpZGVyIGFzIGdsb2JhbCBzY29wZVwiKVxuICByZXR1cm4gPGRpdiB7Li4ucHJvcHN9Lz5cbn07XG5cbmNvbnN0IGxheW91dFByb3BzID0ge1xuICBcbn07XG5jb25zdCBNRFhMYXlvdXQgPSBcIndyYXBwZXJcIlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudCh7XG4gIGNvbXBvbmVudHMsXG4gIC4uLnByb3BzXG59KSB7XG4gIHJldHVybiA8TURYTGF5b3V0IHsuLi5sYXlvdXRQcm9wc30gey4uLnByb3BzfSBjb21wb25lbnRzPXtjb21wb25lbnRzfSBtZHhUeXBlPVwiTURYTGF5b3V0XCI+XG4gICAgPGRpdiBzdHlsZT17e1xuICAgICAgdGV4dEFsaWduOiAnY2VudGVyJ1xuICAgIH19PlxuICAgIDxpbWcgc3JjPVwiLi9DaG9ua3lfY2xlYXIucG5nXCIgYWx0PVwiQ2hvbmt5IGxvZ29cIiBzdHlsZT17e1xuICAgICAgICB3aWR0aDogNTAwXG4gICAgICB9fSAvPlxuICAgIDxiciAvPlxuICAgIDxhIGhyZWY9XCJodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9jaG9ua3lcIiB0YXJnZXQ9XCJfYmxhbmtcIj5cbiAgICAgICAgPGltZyBhbHQ9XCJOUE0gcGFja2FnZVwiIHNyYz1cImh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vbnBtL3YvY2hvbmt5LnN2Z1wiIC8+XG4gICAgPC9hPlxuICAgIDxhIGhyZWY9XCJodHRwczovL3RsZHJsZWdhbC5jb20vbGljZW5zZS9taXQtbGljZW5zZVwiIHN0eWxlPXt7XG4gICAgICAgIG1hcmdpbkxlZnQ6IDVcbiAgICAgIH19IHRhcmdldD1cIl9ibGFua1wiPlxuICAgICAgICA8aW1nIGFsdD1cIk1JVCBsaWNlbnNlXCIgc3JjPVwiaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9ucG0vbC9jaG9ua3lcIiAvPlxuICAgIDwvYT5cbiAgICA8YSBocmVmPVwiaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY2hvbmt5XCIgc3R5bGU9e3tcbiAgICAgICAgbWFyZ2luTGVmdDogNVxuICAgICAgfX0gdGFyZ2V0PVwiX2JsYW5rXCI+XG4gICAgICAgIDxpbWcgYWx0PVwiTlBNIGRvd25sb2Fkc1wiIHNyYz1cImh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vbnBtL2R0L2Nob25reVwiIC8+XG4gICAgPC9hPlxuICAgIDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vVGltYm9LWi9DaG9ua3lcIiBzdHlsZT17e1xuICAgICAgICBtYXJnaW5MZWZ0OiA1XG4gICAgICB9fSB0YXJnZXQ9XCJfYmxhbmtcIj5cbiAgICAgICAgPGltZyBhbHQ9XCJHaXRIdWIgc3RhcnNcIiBzcmM9XCJodHRwczovL2ltZy5zaGllbGRzLmlvL2dpdGh1Yi9zdGFycy9UaW1ib0taL0Nob25reVwiIC8+XG4gICAgPC9hPlxuICAgIDxhIGhyZWY9XCJodHRwczovL2Rpc2NvcmQuZ2cvNEhKYUZuOVwiIHN0eWxlPXt7XG4gICAgICAgIG1hcmdpbkxlZnQ6IDVcbiAgICAgIH19IHRhcmdldD1cIl9ibGFua1wiPlxuICAgICAgICA8aW1nIGFsdD1cIkNoYXQgb24gRGlzY29yZFwiIHNyYz1cImh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZGlzY29yZC82OTYwMzM2MjE5ODY3NzA5NTc/bGFiZWw9Q2hhdCUyMG9uJTIwRGlzY29yZFwiIC8+XG4gICAgPC9hPlxuICAgIDxiciAvPlxuICAgIDxiciAvPlxuICAgIDxiciAvPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJ1bnN0YWJsZS13YXJuaW5nXCI+XG4gICAgICA8YmxvY2txdW90ZT5cbiAgICAgICAgPHAgcGFyZW50TmFtZT1cImJsb2NrcXVvdGVcIj57YENob25reSBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2AxLnhgfTwvaW5saW5lQ29kZT57YCBpcyBzdGlsbCBpbiBiZXRhLiBJZiB5b3UgZm91bmQgYSBidWcgb3Igd2FudCB0byByZXF1ZXN0IGEgZmVhdHVyZSwgcGxlYXNlXG5gfTxhIHBhcmVudE5hbWU9XCJwXCIgey4uLntcbiAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9UaW1ib0taL0Nob25reS9pc3N1ZXNcIixcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IFwiX2JsYW5rXCIsXG4gICAgICAgICAgICBcInJlbFwiOiBcIm5vZm9sbG93IG5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgIH19PntgY3JlYXRlIGFuIGlzc3VlYH08L2E+e2Agb24gR2l0SHViLmB9PC9wPlxuICAgICAgPC9ibG9ja3F1b3RlPlxuICAgIDwvZGl2PlxuICAgIDwvTURYTGF5b3V0Pjtcbn1cblxuO1xuTURYQ29udGVudC5pc01EWENvbXBvbmVudCA9IHRydWU7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJBM1VRXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiaEJwR1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIng0dDBcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJMSk9yXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiV05NQVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIjFJc1pcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJaVmtCXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwidmJEd1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcInkyQWhcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJKdFBmXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwidFZxblwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIjVvNDNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJheDBmXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwic1ZGYlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIi9Rb3NcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJqNFNmXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiTFV3ZFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIk9aYUpcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJGNjNpXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiM3lZTVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcImFZU3JcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJQMmFHXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiRGZoTVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIkxxTHNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJwdTNvXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiNlU3aVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIkNtNG9cIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJHRnB0XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiK2tZN1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIjVCWWJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCI1ODc4XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwibTlMUFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcImwxQzJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJDVU1RXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiM3ZvSFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcImN3dzNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJONHozXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiMU11L1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIkFSdWFcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCI5SmhOXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiUGpaWFwiKTsiLCJpbXBvcnQgJ0BzdG9yeWJvb2svcmVhY3QnOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiSlkrQ1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIlpVZEdcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJQdUl4XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwidFFiUFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcImRTYUdcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJoUWluXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiTEo3ZVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIkkyZktcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJEWTQ3XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiM2twOVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIi9iYzJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCIvSnVSXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiK0J4dlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIm11RnhcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJXY2k2XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiV29SVVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIm8zZlNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJKbVRpXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwieGFpUlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIlNsRC9cIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJNb25uXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiaUtFK1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcImZtTlBcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJ1RlhqXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiVjBJV1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIk9DU2xcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJrQTRyXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiQmxtNlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcInNzdlVcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJsWm0zXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiRWUyWFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcImIyZTNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJtYWo4XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiSDg3SlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIlMzcEFcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJPMVNjXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiekY1blwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcImt2VnpcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJ0SlZlXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwibnVvbFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIlBqSk9cIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJEcE81XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiS2thclwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIjJxOGdcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJuRGloXCIpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2NsaWVudEFwaSA9IHJlcXVpcmUoXCIvaG9tZS9ldXFsMW4vV29ya3NwYWNlcy9wZXJzb25hbC9DaG9ua3kvbm9kZV9tb2R1bGVzL0BzdG9yeWJvb2svcmVhY3Qvbm9kZV9tb2R1bGVzL0BzdG9yeWJvb2svY2xpZW50LWFwaVwiKTtcblxudmFyIF9jbGllbnRMb2dnZXIgPSByZXF1aXJlKFwiL2hvbWUvZXVxbDFuL1dvcmtzcGFjZXMvcGVyc29uYWwvQ2hvbmt5L25vZGVfbW9kdWxlcy9Ac3Rvcnlib29rL3JlYWN0L25vZGVfbW9kdWxlcy9Ac3Rvcnlib29rL2NsaWVudC1sb2dnZXJcIik7XG5cbnZhciBfY29uZmlnRmlsZW5hbWUgPSByZXF1aXJlKFwiL2hvbWUvZXVxbDFuL1dvcmtzcGFjZXMvcGVyc29uYWwvQ2hvbmt5Ly5zdG9yeWJvb2svcHJldmlldy5qc1wiKTtcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmlmIChfY29uZmlnRmlsZW5hbWUuYXJncyB8fCBfY29uZmlnRmlsZW5hbWUuYXJnVHlwZXMpIHtcbiAgX2NsaWVudExvZ2dlci5sb2dnZXIud2FybignSW52YWxpZCBhcmdzL2FyZ1R5cGVzIGluIGNvbmZpZywgaWdub3JpbmcuJywgSlNPTi5zdHJpbmdpZnkoe1xuICAgIGFyZ3M6IF9jb25maWdGaWxlbmFtZS5hcmdzLFxuICAgIGFyZ1R5cGVzOiBfY29uZmlnRmlsZW5hbWUuYXJnVHlwZXNcbiAgfSkpO1xufVxuXG5pZiAoX2NvbmZpZ0ZpbGVuYW1lLmRlY29yYXRvcnMpIHtcbiAgX2NvbmZpZ0ZpbGVuYW1lLmRlY29yYXRvcnMuZm9yRWFjaChmdW5jdGlvbiAoZGVjb3JhdG9yKSB7XG4gICAgcmV0dXJuICgwLCBfY2xpZW50QXBpLmFkZERlY29yYXRvcikoZGVjb3JhdG9yKTtcbiAgfSk7XG59XG5cbmlmIChfY29uZmlnRmlsZW5hbWUucGFyYW1ldGVycyB8fCBfY29uZmlnRmlsZW5hbWUuZ2xvYmFsQXJncyB8fCBfY29uZmlnRmlsZW5hbWUuZ2xvYmFsQXJnVHlwZXMpIHtcbiAgKDAsIF9jbGllbnRBcGkuYWRkUGFyYW1ldGVycykoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBfY29uZmlnRmlsZW5hbWUucGFyYW1ldGVycyksIHt9LCB7XG4gICAgZ2xvYmFsQXJnczogX2NvbmZpZ0ZpbGVuYW1lLmdsb2JhbEFyZ3MsXG4gICAgZ2xvYmFsQXJnVHlwZXM6IF9jb25maWdGaWxlbmFtZS5nbG9iYWxBcmdUeXBlc1xuICB9KSk7XG59XG5cbmlmIChfY29uZmlnRmlsZW5hbWUuYXJnVHlwZXNFbmhhbmNlcnMpIHtcbiAgX2NvbmZpZ0ZpbGVuYW1lLmFyZ1R5cGVzRW5oYW5jZXJzLmZvckVhY2goZnVuY3Rpb24gKGVuaGFuY2VyKSB7XG4gICAgcmV0dXJuICgwLCBfY2xpZW50QXBpLmFkZEFyZ1R5cGVzRW5oYW5jZXIpKGVuaGFuY2VyKTtcbiAgfSk7XG59IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJjdDgwXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwib0Q0dFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIjJzWjdcIik7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfZnJhbWV3b3JrID0gcmVxdWlyZShcIkBzdG9yeWJvb2svcmVhY3RcIik7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZVxubW9kdWxlLl9TdG9yeWJvb2tQcmVzZXJ2ZURlY29yYXRvcnMgPSB0cnVlO1xuKDAsIF9mcmFtZXdvcmsuY29uZmlndXJlKShbcmVxdWlyZS5jb250ZXh0KCcuLi9zdG9yaWVzJywgdHJ1ZSwgLyg/Oig/IVxcLikuKj9cXC5zdG9yaWVzXFwuKHRzeHxtZHgpKSQvKV0sIG1vZHVsZSk7IiwidmFyIG1hcCA9IHtcblx0XCIuLzAxLVdlbGNvbWUvMDEtV2VsY29tZS5zdG9yaWVzLm1keFwiOiA3NTAsXG5cdFwiLi8wMS1XZWxjb21lLzAyLUZlYXR1cmVzLnN0b3JpZXMubWR4XCI6IDc0NSxcblx0XCIuLzAxLVdlbGNvbWUvMDMtSW5zdGFsbGF0aW9uLnN0b3JpZXMubWR4XCI6IDc0Nixcblx0XCIuLzAxLVdlbGNvbWUvMDQtSW1tdXRhYmlsaXR5LnN0b3JpZXMubWR4XCI6IDc0Nyxcblx0XCIuLzAyLURlbW9zLzAxLUZpbGUtQnJvd3Nlci1kZW1vLnN0b3JpZXMudHN4XCI6IDc1MSxcblx0XCIuLzAzLUZpbGUtQnJvd3Nlci1iYXNpY3MvMDEtQ29tcG9uZW50LWhpZXJhcmNoeS5zdG9yaWVzLnRzeFwiOiA3NTIsXG5cdFwiLi8wMy1GaWxlLUJyb3dzZXItYmFzaWNzLzAyLURpc3BsYXlpbmctZmlsZXMuc3Rvcmllcy50c3hcIjogNzUzLFxuXHRcIi4vMDMtRmlsZS1Ccm93c2VyLWJhc2ljcy8wMy1TcGVjaWZ5aW5nLWZvbGRlci5zdG9yaWVzLnRzeFwiOiA3NTQsXG5cdFwiLi8wMy1GaWxlLUJyb3dzZXItYmFzaWNzLzA0LUZpbGUtYWN0aW9ucy5zdG9yaWVzLnRzeFwiOiA3NTUsXG5cdFwiLi8wMy1GaWxlLUJyb3dzZXItYmFzaWNzLzA1LUZpbGUtYWN0aW9uLWhhbmRsZXIuc3Rvcmllcy50c3hcIjogNzU2LFxuXHRcIi4vMDMtRmlsZS1Ccm93c2VyLWJhc2ljcy8wNi1DdXN0b20tYWN0aW9ucy5zdG9yaWVzLnRzeFwiOiA3NTcsXG5cdFwiLi8wMy1GaWxlLUJyb3dzZXItYmFzaWNzLzA3LVRodW1ibmFpbHMuc3Rvcmllcy50c3hcIjogNzU4LFxuXHRcIi4vMDMtRmlsZS1Ccm93c2VyLWJhc2ljcy8wOC1EcmFnLW4tZHJvcC5zdG9yaWVzLnRzeFwiOiA3NTksXG5cdFwiLi8wNC1GaWxlLUJyb3dzZXItYWR2YW5jZWQvMDEtSW52YWxpZC1wcm9wcy5zdG9yaWVzLnRzeFwiOiA3NjAsXG5cdFwiLi8wNC1GaWxlLUJyb3dzZXItYWR2YW5jZWQvMDItVmlydHVhbGl6YXRpb24uc3Rvcmllcy50c3hcIjogNzYxLFxuXHRcIi4vMDQtRmlsZS1Ccm93c2VyLWFkdmFuY2VkLzAzLURpc2FibGUtZGVmYXVsdC1hY3Rpb25zLnN0b3JpZXMudHN4XCI6IDc2Mixcblx0XCIuLzA1LUFQSS1SZWZlcmVuY2UvMDItQnVpbHQtaW4tYWN0aW9ucy5zdG9yaWVzLm1keFwiOiA3NDlcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSA2MTI7IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0xMi0xIS4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3Bvc3Rjc3MhLi9zdG9yeWJvb2suY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnNiZG9jcy1jb250ZW50IC5zYmRvY3MtcCwgLnNiZG9jcy1jb250ZW50IC5zYmRvY3MtcCAqLFxcbi5zYmRvY3MtY29udGVudCAuc2Jkb2NzLXVsLFxcbi5zYmRvY3MtY29udGVudCAuc2Jkb2NzLXVsICosXFxuLnNiZG9jcy1jb250ZW50IC5zYmRvY3Mtb2wsXFxuLnNiZG9jcy1jb250ZW50IC5zYmRvY3Mtb2wgKiB7XFxuICBsaW5lLWhlaWdodDogMjVweCAhaW1wb3J0YW50O1xcbiAgZm9udC1zaXplOiAxN3B4ICFpbXBvcnRhbnQ7XFxufVxcbi5zYmRvY3MtY29udGVudCAuc2Jkb2NzLXAgY29kZSxcXG4uc2Jkb2NzLWNvbnRlbnQgLnNiZG9jcy11bCBjb2RlLFxcbi5zYmRvY3MtY29udGVudCAuc2Jkb2NzLW9sIGNvZGUge1xcbiAgcGFkZGluZzogMCA1cHggIWltcG9ydGFudDtcXG4gIGZvbnQtc2l6ZTogMTRweCAhaW1wb3J0YW50O1xcbn1cXG4uc2Jkb2NzLWNvbnRlbnQgLnNiZG9jcy1oMiB7XFxuICBtYXJnaW4tdG9wOiA0MHB4ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5zYmRvY3MtcHJldmlldyB7XFxuICBib3JkZXI6IHNvbGlkIDNweCAjMDlmICFpbXBvcnRhbnQ7XFxuICBtYXJnaW46IDUwcHggMCA0MHB4IDAgIWltcG9ydGFudDtcXG4gIGJvcmRlci1yYWRpdXM6IDNweCAhaW1wb3J0YW50O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlICFpbXBvcnRhbnQ7XFxuICBvdmVyZmxvdzogdmlzaWJsZSAhaW1wb3J0YW50O1xcbn1cXG4uc2Jkb2NzLXByZXZpZXc6YmVmb3JlIHtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAzcHg7XFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAzcHg7XFxuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcXG4gIGNvbnRlbnQ6IFxcXCJMaXZlIEV4YW1wbGVcXFwiO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzA5ZjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIG1hcmdpbi1sZWZ0OiAtM3B4O1xcbiAgbWFyZ2luLXRvcDogLTI1cHg7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIGxpbmUtaGVpZ2h0OiAyNXB4O1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgcGFkZGluZzogMCA4cHg7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGhlaWdodDogMjVweDtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uc2Jkb2NzLXByZXZpZXcgPiBkaXY6Zmlyc3QtY2hpbGQgPiBkaXY6Zmlyc3QtY2hpbGQge1xcbiAgcGFkZGluZzogMTBweCAxMHB4IDMwcHggMTBweCAhaW1wb3J0YW50O1xcbiAgbWFyZ2luOiAwICFpbXBvcnRhbnQ7XFxuICBvdmVyZmxvdzogdmlzaWJsZSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubm90eV9iYXIge1xcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxufVxcbi5ub3R5X2JhciBjb2RlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIGxpbmUtaGVpZ2h0OiAyMHB4O1xcbiAgcGFkZGluZzogMCA0cHg7XFxufVxcblxcbi51bnN0YWJsZS13YXJuaW5nIGJsb2NrcXVvdGUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZkZTBlMDtcXG4gIGJvcmRlci1jb2xvcjogIzllMDgwODtcXG4gIG1hcmdpbi1ib3R0b206IDQwcHg7XFxuICBwYWRkaW5nOiAyMHB4IDMwcHg7XFxufVxcblxcbi5saXZlLWV4YW1wbGUtYWN0aW9uIHtcXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmICFpbXBvcnRhbnQ7XFxuICBmb250LXNpemU6IDEuMmVtICFpbXBvcnRhbnQ7XFxuICBtYXJnaW4tYm90dG9tOiAxNnB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgY29sb3I6ICM1ZjA3MDc7XFxufVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcImk3S25cIik7IiwiXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBtZHggfSBmcm9tICdAbWR4LWpzL3JlYWN0J1xuXG4vKiBAanN4IG1keCAqL1xuaW1wb3J0IHsgYXNzZXJ0SXNGbiwgQWRkQ29udGV4dCB9IGZyb20gXCJAc3Rvcnlib29rL2FkZG9uLWRvY3MvYmxvY2tzXCI7XG5cbmltcG9ydCBDaG9ua3lIZWFkZXIgZnJvbSAnLi4vQ2hvbmt5LWhlYWRlci5tZHgnO1xuaW1wb3J0IHsgU3RvcnlDYXRlZ29yaWVzIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XG5cbmNvbnN0IG1ha2VTaG9ydGNvZGUgPSBuYW1lID0+IGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpIHtcbiAgY29uc29sZS53YXJuKFwiQ29tcG9uZW50IFwiICsgbmFtZSArIFwiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGVcIilcbiAgcmV0dXJuIDxkaXYgey4uLnByb3BzfS8+XG59O1xuY29uc3QgTWV0YSA9IG1ha2VTaG9ydGNvZGUoXCJNZXRhXCIpO1xuY29uc3QgbGF5b3V0UHJvcHMgPSB7XG4gIFxufTtcbmNvbnN0IE1EWExheW91dCA9IFwid3JhcHBlclwiXG5mdW5jdGlvbiBNRFhDb250ZW50KHtcbiAgY29tcG9uZW50cyxcbiAgLi4ucHJvcHNcbn0pIHtcbiAgcmV0dXJuIDxNRFhMYXlvdXQgey4uLmxheW91dFByb3BzfSB7Li4ucHJvcHN9IGNvbXBvbmVudHM9e2NvbXBvbmVudHN9IG1keFR5cGU9XCJNRFhMYXlvdXRcIj5cblxuICAgIDxNZXRhIHRpdGxlPXtgJHtTdG9yeUNhdGVnb3JpZXMuV2VsY29tZX18Q2hvbmt5IGZlYXR1cmVzYH0gbWR4VHlwZT1cIk1ldGFcIiAvPlxuICAgIDxDaG9ua3lIZWFkZXIgbWR4VHlwZT1cIkNob25reUhlYWRlclwiIC8+XG4gICAgPGgxIHsuLi57XG4gICAgICBcImlkXCI6IFwiY2hvbmt5LWZlYXR1cmVzXCJcbiAgICB9fT57YENob25reSBmZWF0dXJlczpgfTwvaDE+XG4gICAgPGJyIC8+XG4gICAgPGJsb2NrcXVvdGU+XG4gICAgICA8cCBwYXJlbnROYW1lPVwiYmxvY2txdW90ZVwiPntgV2FudCB0byByZXF1ZXN0IGEgZmVhdHVyZT8gUG9zdCBhIGZlYXR1cmUgcmVxdWVzdCBpbiBDaG9ua3knc1xuYH08YSBwYXJlbnROYW1lPVwicFwiIHsuLi57XG4gICAgICAgICAgXCJocmVmXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL1RpbWJvS1ovQ2hvbmt5L2lzc3Vlc1wiLFxuICAgICAgICAgIFwidGFyZ2V0XCI6IFwiX2JsYW5rXCIsXG4gICAgICAgICAgXCJyZWxcIjogXCJub2ZvbGxvdyBub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgfX0+e2BHaXRIdWIgaXNzdWVzYH08L2E+e2AuYH08L3A+XG4gICAgPC9ibG9ja3F1b3RlPlxuICAgIDxiciAvPlxuICAgIDx1bCB7Li4ue1xuICAgICAgXCJjbGFzc05hbWVcIjogXCJjb250YWlucy10YXNrLWxpc3RcIlxuICAgIH19PlxuICAgICAgPGxpIHBhcmVudE5hbWU9XCJ1bFwiIHsuLi57XG4gICAgICAgIFwiY2xhc3NOYW1lXCI6IFwidGFzay1saXN0LWl0ZW1cIlxuICAgICAgfX0+PGlucHV0IHBhcmVudE5hbWU9XCJsaVwiIHsuLi57XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiY2hlY2tib3hcIixcbiAgICAgICAgICBcImNoZWNrZWRcIjogdHJ1ZSxcbiAgICAgICAgICBcImRpc2FibGVkXCI6IHRydWVcbiAgICAgICAgfX0+PC9pbnB1dD57YCBgfXtgQmFja2VuZC1hZ25vc3RpYyAtIGZpbGVzIGNhbiBjb21lIGZyb20gYW55IHNvdXJjZSAocmVtb3RlIHNlcnZlciwgUzMsIHZpcnR1YWwgRlMpLmB9PC9saT5cbiAgICAgIDxsaSBwYXJlbnROYW1lPVwidWxcIiB7Li4ue1xuICAgICAgICBcImNsYXNzTmFtZVwiOiBcInRhc2stbGlzdC1pdGVtXCJcbiAgICAgIH19PjxpbnB1dCBwYXJlbnROYW1lPVwibGlcIiB7Li4ue1xuICAgICAgICAgIFwidHlwZVwiOiBcImNoZWNrYm94XCIsXG4gICAgICAgICAgXCJjaGVja2VkXCI6IHRydWUsXG4gICAgICAgICAgXCJkaXNhYmxlZFwiOiB0cnVlXG4gICAgICAgIH19PjwvaW5wdXQ+e2AgYH17YFN1cHBvcnRzIHRleHQgc2VhcmNoLmB9PC9saT5cbiAgICAgIDxsaSBwYXJlbnROYW1lPVwidWxcIiB7Li4ue1xuICAgICAgICBcImNsYXNzTmFtZVwiOiBcInRhc2stbGlzdC1pdGVtXCJcbiAgICAgIH19PjxpbnB1dCBwYXJlbnROYW1lPVwibGlcIiB7Li4ue1xuICAgICAgICAgIFwidHlwZVwiOiBcImNoZWNrYm94XCIsXG4gICAgICAgICAgXCJjaGVja2VkXCI6IHRydWUsXG4gICAgICAgICAgXCJkaXNhYmxlZFwiOiB0cnVlXG4gICAgICAgIH19PjwvaW5wdXQ+e2AgYH17YFN1cHBvcnRzIGRyYWcgJiBkcm9wLmB9PC9saT5cbiAgICAgIDxsaSBwYXJlbnROYW1lPVwidWxcIiB7Li4ue1xuICAgICAgICBcImNsYXNzTmFtZVwiOiBcInRhc2stbGlzdC1pdGVtXCJcbiAgICAgIH19PjxpbnB1dCBwYXJlbnROYW1lPVwibGlcIiB7Li4ue1xuICAgICAgICAgIFwidHlwZVwiOiBcImNoZWNrYm94XCIsXG4gICAgICAgICAgXCJjaGVja2VkXCI6IGZhbHNlLFxuICAgICAgICAgIFwiZGlzYWJsZWRcIjogdHJ1ZVxuICAgICAgICB9fT48L2lucHV0PntgIGB9e2BNb2JpbGUtZnJpZW5kbHkgZGVzaWduLmB9PC9saT5cbiAgICAgIDxsaSBwYXJlbnROYW1lPVwidWxcIiB7Li4ue1xuICAgICAgICBcImNsYXNzTmFtZVwiOiBcInRhc2stbGlzdC1pdGVtXCJcbiAgICAgIH19PjxpbnB1dCBwYXJlbnROYW1lPVwibGlcIiB7Li4ue1xuICAgICAgICAgIFwidHlwZVwiOiBcImNoZWNrYm94XCIsXG4gICAgICAgICAgXCJjaGVja2VkXCI6IHRydWUsXG4gICAgICAgICAgXCJkaXNhYmxlZFwiOiB0cnVlXG4gICAgICAgIH19PjwvaW5wdXQ+e2AgYH17YFN1cHBvcnRzIGltYWdlIHRodW1ibmFpbHMuYH08L2xpPlxuICAgICAgPGxpIHBhcmVudE5hbWU9XCJ1bFwiIHsuLi57XG4gICAgICAgIFwiY2xhc3NOYW1lXCI6IFwidGFzay1saXN0LWl0ZW1cIlxuICAgICAgfX0+PGlucHV0IHBhcmVudE5hbWU9XCJsaVwiIHsuLi57XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiY2hlY2tib3hcIixcbiAgICAgICAgICBcImNoZWNrZWRcIjogdHJ1ZSxcbiAgICAgICAgICBcImRpc2FibGVkXCI6IHRydWVcbiAgICAgICAgfX0+PC9pbnB1dD57YCBgfXtgU3VwcG9ydHMga2V5Ym9hcmQgc2hvcnRjdXRzLmB9PC9saT5cbiAgICAgIDxsaSBwYXJlbnROYW1lPVwidWxcIiB7Li4ue1xuICAgICAgICBcImNsYXNzTmFtZVwiOiBcInRhc2stbGlzdC1pdGVtXCJcbiAgICAgIH19PjxpbnB1dCBwYXJlbnROYW1lPVwibGlcIiB7Li4ue1xuICAgICAgICAgIFwidHlwZVwiOiBcImNoZWNrYm94XCIsXG4gICAgICAgICAgXCJjaGVja2VkXCI6IHRydWUsXG4gICAgICAgICAgXCJkaXNhYmxlZFwiOiB0cnVlXG4gICAgICAgIH19PjwvaW5wdXQ+e2AgYH17YFN1cHBvcnRzIGNvbW1vbiBhbmQgY3VzdG9tIGZpbGUgYWN0aW9ucy5gfTwvbGk+XG4gICAgICA8bGkgcGFyZW50TmFtZT1cInVsXCIgey4uLntcbiAgICAgICAgXCJjbGFzc05hbWVcIjogXCJ0YXNrLWxpc3QtaXRlbVwiXG4gICAgICB9fT48aW5wdXQgcGFyZW50TmFtZT1cImxpXCIgey4uLntcbiAgICAgICAgICBcInR5cGVcIjogXCJjaGVja2JveFwiLFxuICAgICAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgICAgICBcImRpc2FibGVkXCI6IHRydWVcbiAgICAgICAgfX0+PC9pbnB1dD57YCBgfXtgU3VwcG9ydHMgYH08ZW0gcGFyZW50TmFtZT1cImxpXCI+e2BkZXRhaWxlZCBsaXN0YH08L2VtPntgIGFuZCBgfTxlbSBwYXJlbnROYW1lPVwibGlcIj57YHRodW1ibmFpbHNgfTwvZW0+e2Agdmlld3MuYH08L2xpPlxuICAgICAgPGxpIHBhcmVudE5hbWU9XCJ1bFwiIHsuLi57XG4gICAgICAgIFwiY2xhc3NOYW1lXCI6IFwidGFzay1saXN0LWl0ZW1cIlxuICAgICAgfX0+PGlucHV0IHBhcmVudE5hbWU9XCJsaVwiIHsuLi57XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiY2hlY2tib3hcIixcbiAgICAgICAgICBcImNoZWNrZWRcIjogdHJ1ZSxcbiAgICAgICAgICBcImRpc2FibGVkXCI6IHRydWVcbiAgICAgICAgfX0+PC9pbnB1dD57YCBgfXtgUHJvdmlkZXMgdW5pcXVlIGljb25zIGZvciBlYWNoIGZpbGUgZXh0ZW5zaW9uLmB9PC9saT5cbiAgICAgIDxsaSBwYXJlbnROYW1lPVwidWxcIiB7Li4ue1xuICAgICAgICBcImNsYXNzTmFtZVwiOiBcInRhc2stbGlzdC1pdGVtXCJcbiAgICAgIH19PjxpbnB1dCBwYXJlbnROYW1lPVwibGlcIiB7Li4ue1xuICAgICAgICAgIFwidHlwZVwiOiBcImNoZWNrYm94XCIsXG4gICAgICAgICAgXCJjaGVja2VkXCI6IHRydWUsXG4gICAgICAgICAgXCJkaXNhYmxlZFwiOiB0cnVlXG4gICAgICAgIH19PjwvaW5wdXQ+e2AgYH17YFN1cHBvcnRzIGZpbGUgc2VsZWN0aW9ucyAoZXhjbHVkaW5nIGRyYWcgc2VsZWN0aW9uLCBgfTxlbSBwYXJlbnROYW1lPVwibGlcIj57YGZvciBub3dgfTwvZW0+e2ApLmB9PC9saT5cbiAgICAgIDxsaSBwYXJlbnROYW1lPVwidWxcIiB7Li4ue1xuICAgICAgICBcImNsYXNzTmFtZVwiOiBcInRhc2stbGlzdC1pdGVtXCJcbiAgICAgIH19PjxpbnB1dCBwYXJlbnROYW1lPVwibGlcIiB7Li4ue1xuICAgICAgICAgIFwidHlwZVwiOiBcImNoZWNrYm94XCIsXG4gICAgICAgICAgXCJjaGVja2VkXCI6IHRydWUsXG4gICAgICAgICAgXCJkaXNhYmxlZFwiOiB0cnVlXG4gICAgICAgIH19PjwvaW5wdXQ+e2AgYH17YFN1cHBvcnRzIGxvYWRpbmcgYW5pbWF0aW9ucyBhbmQgYXN5bmMgdGh1bWJuYWlsIGdlbmVyYXRpb24uYH08L2xpPlxuICAgICAgPGxpIHBhcmVudE5hbWU9XCJ1bFwiIHsuLi57XG4gICAgICAgIFwiY2xhc3NOYW1lXCI6IFwidGFzay1saXN0LWl0ZW1cIlxuICAgICAgfX0+PGlucHV0IHBhcmVudE5hbWU9XCJsaVwiIHsuLi57XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiY2hlY2tib3hcIixcbiAgICAgICAgICBcImNoZWNrZWRcIjogdHJ1ZSxcbiAgICAgICAgICBcImRpc2FibGVkXCI6IHRydWVcbiAgICAgICAgfX0+PC9pbnB1dD57YCBgfXtgUGVyZm9ybXMgd2VsbCB3aXRoIGxhcmdlIGZpbGUgY29sbGVjdGlvbnMgdGhhbmtzIHRvXG5gfTxhIHBhcmVudE5hbWU9XCJsaVwiIHsuLi57XG4gICAgICAgICAgXCJocmVmXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL2J2YXVnaG4vcmVhY3QtdmlydHVhbGl6ZWRcIixcbiAgICAgICAgICBcInRhcmdldFwiOiBcIl9ibGFua1wiLFxuICAgICAgICAgIFwicmVsXCI6IFwibm9mb2xsb3cgbm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgIH19PntgdmlydHVhbGl6YXRpb25gfTwvYT57YC5gfTwvbGk+XG4gICAgPC91bD5cbiAgICA8aDIgey4uLntcbiAgICAgIFwiaWRcIjogXCJub3Rlcy1hYm91dC0xeFwiXG4gICAgfX0+e2BOb3RlcyBhYm91dCAxLnhgfTwvaDI+XG4gICAgPHVsPlxuICAgICAgPGxpIHBhcmVudE5hbWU9XCJ1bFwiPntgQ2hvbmt5IGB9PGlubGluZUNvZGUgcGFyZW50TmFtZT1cImxpXCI+e2AxLnhgfTwvaW5saW5lQ29kZT57YCBpcyBhIGNvbXBsZXRlIHJld3JpdGUgb2YgYH08aW5saW5lQ29kZSBwYXJlbnROYW1lPVwibGlcIj57YDAueGB9PC9pbmxpbmVDb2RlPntgLCBub3cgdXNpbmcgaG9va3MgdW5kZXIgdGhlIGhvb2QhYH08L2xpPlxuICAgICAgPGxpIHBhcmVudE5hbWU9XCJ1bFwiPntgSW50ZXJuYWwgc3RhdGUgbWFuYWdlbWVudCBpcyBkb25lIHVzaW5nIGB9PGEgcGFyZW50TmFtZT1cImxpXCIgey4uLntcbiAgICAgICAgICBcImhyZWZcIjogXCJodHRwczovL3JlY29pbGpzLm9yZy9cIixcbiAgICAgICAgICBcInRhcmdldFwiOiBcIl9ibGFua1wiLFxuICAgICAgICAgIFwicmVsXCI6IFwibm9mb2xsb3cgbm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgIH19PntgUmVjb2lsYH08L2E+e2AuYH08L2xpPlxuICAgIDwvdWw+XG4gICAgPC9NRFhMYXlvdXQ+O1xufVxuXG47XG5NRFhDb250ZW50LmlzTURYQ29tcG9uZW50ID0gdHJ1ZTtcblxuZXhwb3J0IGNvbnN0IF9fcGFnZSA9ICgpID0+IHsgdGhyb3cgbmV3IEVycm9yKFwiRG9jcy1vbmx5IHN0b3J5XCIpOyB9O1xuXG5fX3BhZ2UucGFyYW1ldGVycyA9IHsgZG9jc09ubHk6IHRydWUgfTtcblxuY29uc3QgY29tcG9uZW50TWV0YSA9IHsgdGl0bGU6IGAke1N0b3J5Q2F0ZWdvcmllcy5XZWxjb21lfXxDaG9ua3kgZmVhdHVyZXNgLCBpbmNsdWRlU3RvcmllczogW1wiX19wYWdlXCJdLCAgfTtcblxuY29uc3QgbWR4U3RvcnlOYW1lVG9LZXkgPSB7fTtcblxuY29tcG9uZW50TWV0YS5wYXJhbWV0ZXJzID0gY29tcG9uZW50TWV0YS5wYXJhbWV0ZXJzIHx8IHt9O1xuY29tcG9uZW50TWV0YS5wYXJhbWV0ZXJzLmRvY3MgPSB7XG4gIC4uLihjb21wb25lbnRNZXRhLnBhcmFtZXRlcnMuZG9jcyB8fCB7fSksXG4gIHBhZ2U6ICgpID0+IDxBZGRDb250ZXh0IG1keFN0b3J5TmFtZVRvS2V5PXttZHhTdG9yeU5hbWVUb0tleX0gbWR4Q29tcG9uZW50TWV0YT17Y29tcG9uZW50TWV0YX0+PE1EWENvbnRlbnQgLz48L0FkZENvbnRleHQ+LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50TWV0YTsiLCJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IG1keCB9IGZyb20gJ0BtZHgtanMvcmVhY3QnXG5cbi8qIEBqc3ggbWR4ICovXG5pbXBvcnQgeyBhc3NlcnRJc0ZuLCBBZGRDb250ZXh0IH0gZnJvbSBcIkBzdG9yeWJvb2svYWRkb24tZG9jcy9ibG9ja3NcIjtcblxuaW1wb3J0IENob25reUhlYWRlciBmcm9tICcuLi9DaG9ua3ktaGVhZGVyLm1keCc7XG5pbXBvcnQgeyBTdG9yeUNhdGVnb3JpZXMgfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcblxuY29uc3QgbWFrZVNob3J0Y29kZSA9IG5hbWUgPT4gZnVuY3Rpb24gTURYRGVmYXVsdFNob3J0Y29kZShwcm9wcykge1xuICBjb25zb2xlLndhcm4oXCJDb21wb25lbnQgXCIgKyBuYW1lICsgXCIgd2FzIG5vdCBpbXBvcnRlZCwgZXhwb3J0ZWQsIG9yIHByb3ZpZGVkIGJ5IE1EWFByb3ZpZGVyIGFzIGdsb2JhbCBzY29wZVwiKVxuICByZXR1cm4gPGRpdiB7Li4ucHJvcHN9Lz5cbn07XG5jb25zdCBNZXRhID0gbWFrZVNob3J0Y29kZShcIk1ldGFcIik7XG5jb25zdCBsYXlvdXRQcm9wcyA9IHtcbiAgXG59O1xuY29uc3QgTURYTGF5b3V0ID0gXCJ3cmFwcGVyXCJcbmZ1bmN0aW9uIE1EWENvbnRlbnQoe1xuICBjb21wb25lbnRzLFxuICAuLi5wcm9wc1xufSkge1xuICByZXR1cm4gPE1EWExheW91dCB7Li4ubGF5b3V0UHJvcHN9IHsuLi5wcm9wc30gY29tcG9uZW50cz17Y29tcG9uZW50c30gbWR4VHlwZT1cIk1EWExheW91dFwiPlxuXG4gICAgPE1ldGEgdGl0bGU9e2Ake1N0b3J5Q2F0ZWdvcmllcy5XZWxjb21lfXxJbnN0YWxsYXRpb24gJiB1c2FnZWB9IG1keFR5cGU9XCJNZXRhXCIgLz5cbiAgICA8Q2hvbmt5SGVhZGVyIG1keFR5cGU9XCJDaG9ua3lIZWFkZXJcIiAvPlxuICAgIDxoMSB7Li4ue1xuICAgICAgXCJpZFwiOiBcImluc3RhbGxhdGlvblwiXG4gICAgfX0+e2BJbnN0YWxsYXRpb25gfTwvaDE+XG4gICAgPHA+e2BBZGQgQ2hvbmt5IHRvIHlvdXIgTlBNIHByb2plY3Q6YH08L3A+XG4gICAgPHByZT48Y29kZSBwYXJlbnROYW1lPVwicHJlXCIgey4uLntcbiAgICAgICAgXCJjbGFzc05hbWVcIjogXCJsYW5ndWFnZS1zaGVsbFwiXG4gICAgICB9fT57YCMgVXNlIFwiYmV0YVwiIHRhZyB0byBpbnN0YWxsIHRoZSAxLnggdmVyc2lvbjpcbm5wbSBpbnN0YWxsIGNob25reUBiZXRhXG5gfTwvY29kZT48L3ByZT5cbiAgICA8cD57YFRoZW4sIGltcG9ydCByZWxldmFudCBjb21wb25lbnRzIGFuZCBzdHlsZXM6YH08L3A+XG4gICAgPHByZT48Y29kZSBwYXJlbnROYW1lPVwicHJlXCIgey4uLntcbiAgICAgICAgXCJjbGFzc05hbWVcIjogXCJsYW5ndWFnZS1qc1wiXG4gICAgICB9fT57YGltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcbmltcG9ydCB7IEZpbGVCcm93c2VyLCBGaWxlTGlzdCB9IGZyb20gJ2Nob25reSc7XG5gfTwvY29kZT48L3ByZT5cbiAgICA8cD57YEFuZCB5b3UncmUgZ29vZCB0byBnbyEgQ2hlY2sgb3RoZXIgc2VjdGlvbnMgaW4gdGhlIGRvY3VtZW50YXRpb24gdG8gc2VlIGhvdyBDaG9ua3lcbmNvbXBvbmVudHMgY2FuIGJlIHVzZWQuYH08L3A+XG4gICAgPGgzIHsuLi57XG4gICAgICBcImlkXCI6IFwidXNhZ2Utd2l0aC10eXBlc2NyaXB0XCJcbiAgICB9fT57YFVzYWdlIHdpdGggVHlwZXNjcmlwdGB9PC9oMz5cbiAgICA8cD57YENob25reSB3YXMgYnVpbHQgdXNpbmcgVHlwZXNjcmlwdC4gQXMgc3VjaCwgbWFueSBvZiB0aGUgaW50ZXJuYWwgdHlwZXMgYW5kIGludGVyZmFjZXNcbmFyZSBleHBvcnRlZC4gU29tZSB0eXBlcyBhcmUgZ2VuZXJpYywgdG8gbWFrZSBpdCBlYXNpZXIgZm9yIHlvdSB0byBpbnRlZ3JhdGUgQ2hvbmt5XG5pbnRvIHlvdSBUeXBlc2NyaXB0IHBhY2thZ2UuYH08L3A+XG4gICAgPHA+e2BJZiB5b3UncmUgYWxzbyB1c2luZyBUeXBlc2NyaXB0LCB5b3UgY2FuIGFkZCBDaG9ua3kgdHlwZXMgdG8geW91ciBwcm9qZWN0IHVzaW5nXG5zdGFuZGFyZFxuaW1wb3J0czpgfTwvcD5cbiAgICA8cHJlPjxjb2RlIHBhcmVudE5hbWU9XCJwcmVcIiB7Li4ue1xuICAgICAgICBcImNsYXNzTmFtZVwiOiBcImxhbmd1YWdlLXRzXCJcbiAgICAgIH19PntgLy8gRmlsZUFycmF5IGlzIGEgVFMgdHlwZVxuaW1wb3J0IHsgRmlsZUFycmF5IH0gZnJvbSAnY2hvbmt5JztcblxuY29uc3QgbXlGaWxlczogRmlsZUFycmF5ID0gW1xuICAgIHtcbiAgICAgICAgaWQ6ICdhYkQzJyxcbiAgICAgICAgbmFtZTogJ1JFQURNRS50eHQnLFxuICAgIH0sXG4gICAgbnVsbCxcbl07XG5gfTwvY29kZT48L3ByZT5cbiAgICA8L01EWExheW91dD47XG59XG5cbjtcbk1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQgPSB0cnVlO1xuXG5leHBvcnQgY29uc3QgX19wYWdlID0gKCkgPT4geyB0aHJvdyBuZXcgRXJyb3IoXCJEb2NzLW9ubHkgc3RvcnlcIik7IH07XG5cbl9fcGFnZS5wYXJhbWV0ZXJzID0geyBkb2NzT25seTogdHJ1ZSB9O1xuXG5jb25zdCBjb21wb25lbnRNZXRhID0geyB0aXRsZTogYCR7U3RvcnlDYXRlZ29yaWVzLldlbGNvbWV9fEluc3RhbGxhdGlvbiAmIHVzYWdlYCwgaW5jbHVkZVN0b3JpZXM6IFtcIl9fcGFnZVwiXSwgIH07XG5cbmNvbnN0IG1keFN0b3J5TmFtZVRvS2V5ID0ge307XG5cbmNvbXBvbmVudE1ldGEucGFyYW1ldGVycyA9IGNvbXBvbmVudE1ldGEucGFyYW1ldGVycyB8fCB7fTtcbmNvbXBvbmVudE1ldGEucGFyYW1ldGVycy5kb2NzID0ge1xuICAuLi4oY29tcG9uZW50TWV0YS5wYXJhbWV0ZXJzLmRvY3MgfHwge30pLFxuICBwYWdlOiAoKSA9PiA8QWRkQ29udGV4dCBtZHhTdG9yeU5hbWVUb0tleT17bWR4U3RvcnlOYW1lVG9LZXl9IG1keENvbXBvbmVudE1ldGE9e2NvbXBvbmVudE1ldGF9PjxNRFhDb250ZW50IC8+PC9BZGRDb250ZXh0Pixcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudE1ldGE7IiwiXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBtZHggfSBmcm9tICdAbWR4LWpzL3JlYWN0J1xuXG4vKiBAanN4IG1keCAqL1xuaW1wb3J0IHsgYXNzZXJ0SXNGbiwgQWRkQ29udGV4dCB9IGZyb20gXCJAc3Rvcnlib29rL2FkZG9uLWRvY3MvYmxvY2tzXCI7XG5cbmltcG9ydCBDaG9ua3lIZWFkZXIgZnJvbSAnLi4vQ2hvbmt5LWhlYWRlci5tZHgnO1xuaW1wb3J0IHsgU3RvcnlDYXRlZ29yaWVzIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XG5cbmNvbnN0IG1ha2VTaG9ydGNvZGUgPSBuYW1lID0+IGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpIHtcbiAgY29uc29sZS53YXJuKFwiQ29tcG9uZW50IFwiICsgbmFtZSArIFwiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGVcIilcbiAgcmV0dXJuIDxkaXYgey4uLnByb3BzfS8+XG59O1xuY29uc3QgTWV0YSA9IG1ha2VTaG9ydGNvZGUoXCJNZXRhXCIpO1xuY29uc3QgbGF5b3V0UHJvcHMgPSB7XG4gIFxufTtcbmNvbnN0IE1EWExheW91dCA9IFwid3JhcHBlclwiXG5mdW5jdGlvbiBNRFhDb250ZW50KHtcbiAgY29tcG9uZW50cyxcbiAgLi4ucHJvcHNcbn0pIHtcbiAgcmV0dXJuIDxNRFhMYXlvdXQgey4uLmxheW91dFByb3BzfSB7Li4ucHJvcHN9IGNvbXBvbmVudHM9e2NvbXBvbmVudHN9IG1keFR5cGU9XCJNRFhMYXlvdXRcIj5cblxuICAgIDxNZXRhIHRpdGxlPXtgJHtTdG9yeUNhdGVnb3JpZXMuV2VsY29tZX18SW1tdXRhYmlsaXR5YH0gbWR4VHlwZT1cIk1ldGFcIiAvPlxuICAgIDxDaG9ua3lIZWFkZXIgbWR4VHlwZT1cIkNob25reUhlYWRlclwiIC8+XG4gICAgPGgxIHsuLi57XG4gICAgICBcImlkXCI6IFwiaW1tdXRhYmlsaXR5LWluLWNob25reVwiXG4gICAgfX0+e2BJbW11dGFiaWxpdHkgaW4gQ2hvbmt5YH08L2gxPlxuICAgIDxwPntgVE9ETyBleHBsYWluOmB9PC9wPlxuICAgIDx1bD5cbiAgICAgIDxsaSBwYXJlbnROYW1lPVwidWxcIj57YENob25reSBhc3N1bWVzIGRhdGEgaXMgaW1tdXRhYmxlIHRvIGJlIHBlcmZvcm1hbnQuYH08L2xpPlxuICAgICAgPGxpIHBhcmVudE5hbWU9XCJ1bFwiPntgTGluayB0byBSZWR1eCBkb2NzLmB9PC9saT5cbiAgICAgIDxsaSBwYXJlbnROYW1lPVwidWxcIj57YEV4YW1wbGVzIG9mIGNvbW1vbiBiZWdpbm5lciBwcm9ibGVtcz9gfTwvbGk+XG4gICAgPC91bD5cbiAgICA8L01EWExheW91dD47XG59XG5cbjtcbk1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQgPSB0cnVlO1xuXG5leHBvcnQgY29uc3QgX19wYWdlID0gKCkgPT4geyB0aHJvdyBuZXcgRXJyb3IoXCJEb2NzLW9ubHkgc3RvcnlcIik7IH07XG5cbl9fcGFnZS5wYXJhbWV0ZXJzID0geyBkb2NzT25seTogdHJ1ZSB9O1xuXG5jb25zdCBjb21wb25lbnRNZXRhID0geyB0aXRsZTogYCR7U3RvcnlDYXRlZ29yaWVzLldlbGNvbWV9fEltbXV0YWJpbGl0eWAsIGluY2x1ZGVTdG9yaWVzOiBbXCJfX3BhZ2VcIl0sICB9O1xuXG5jb25zdCBtZHhTdG9yeU5hbWVUb0tleSA9IHt9O1xuXG5jb21wb25lbnRNZXRhLnBhcmFtZXRlcnMgPSBjb21wb25lbnRNZXRhLnBhcmFtZXRlcnMgfHwge307XG5jb21wb25lbnRNZXRhLnBhcmFtZXRlcnMuZG9jcyA9IHtcbiAgLi4uKGNvbXBvbmVudE1ldGEucGFyYW1ldGVycy5kb2NzIHx8IHt9KSxcbiAgcGFnZTogKCkgPT4gPEFkZENvbnRleHQgbWR4U3RvcnlOYW1lVG9LZXk9e21keFN0b3J5TmFtZVRvS2V5fSBtZHhDb21wb25lbnRNZXRhPXtjb21wb25lbnRNZXRhfT48TURYQ29udGVudCAvPjwvQWRkQ29udGV4dD4sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnRNZXRhOyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuY2hvbmt5LWZpbGwtcGFyZW50IHtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuXFxuLmNob25reS1uby1zZWxlY3Qge1xcbiAgLXdlYmtpdC10b3VjaC1jYWxsb3V0OiBub25lO1xcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXG59XFxuXFxuLmNob25reS1yb290IHtcXG4gIGJvcmRlcjogc29saWQgMXB4ICNlNGU0ZTQ7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBwYWRkaW5nOiA3LjVweDtcXG4gIHRvdWNoLWFjdGlvbjogbWFuaXB1bGF0aW9uO1xcbiAgZm9udC1zaXplOiAxNXB4O1xcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBoZWlnaHQ6IDEwMCU7XFxufVxcblxcbi5jaG9ua3ktZXJyb3Ige1xcbiAgYm9yZGVyOiBzb2xpZCAxcHggcmdiYSgxMDgsIDcyLCA3MiwgMC4xMSk7XFxuICBtYXJnaW4tYm90dG9tOiA3LjVweDtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZGViZWI7XFxuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcXG4gIGNvbG9yOiAjOGUyMTIxO1xcbiAgcGFkZGluZzogMWVtO1xcbn1cXG4uY2hvbmt5LWVycm9yLW5hbWUge1xcbiAgb3BhY2l0eTogMC41O1xcbn1cXG4uY2hvbmt5LWVycm9yIHVsIHtcXG4gIHBhZGRpbmctdG9wOiAwLjFlbTtcXG4gIG1hcmdpbjogMDtcXG59XFxuLmNob25reS1lcnJvciBsaSB7XFxuICBtYXJnaW4tdG9wOiAwLjVlbTtcXG59XFxuXFxuLmNob25reS10b29sdGlwIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLmNob25reS10b29sdGlwOmhvdmVyOjpiZWZvcmUsIC5jaG9ua3ktdG9vbHRpcDpob3Zlcjo6YWZ0ZXIsIC5jaG9ua3ktdG9vbHRpcDpmb2N1czo6YmVmb3JlLCAuY2hvbmt5LXRvb2x0aXA6Zm9jdXM6OmFmdGVyLCAuY2hvbmt5LXRvb2x0aXA6YWN0aXZlOjpiZWZvcmUsIC5jaG9ua3ktdG9vbHRpcDphY3RpdmU6OmFmdGVyIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgb3BhY2l0eTogMTtcXG59XFxuLmNob25reS10b29sdGlwOjpiZWZvcmUsIC5jaG9ua3ktdG9vbHRpcDo6YWZ0ZXIge1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAxMDBtcyBlYXNlLWluLW91dDtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIHotaW5kZXg6IDk5OTk7XFxuICBib3R0b206IDEwMCU7XFxuICBvcGFjaXR5OiAwO1xcbiAgbGVmdDogNTAlO1xcbn1cXG4uY2hvbmt5LXRvb2x0aXA6OmJlZm9yZSB7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTc1JSk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuOCk7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxuICBjb250ZW50OiBhdHRyKGRhdGEtdG9vbHRpcCk7XFxuICBwYWRkaW5nOiAwLjRlbSAwLjVlbTtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICBtYXJnaW4tYm90dG9tOiA2cHg7XFxuICBsaW5lLWhlaWdodDogMWVtO1xcbiAgY29sb3I6ICNmZmY7XFxuICBmb250LXNpemU6IDAuOGVtO1xcbiAgaGVpZ2h0OiAxZW07XFxufVxcbi5jaG9ua3ktdG9vbHRpcDo6YWZ0ZXIge1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpIHJvdGF0ZSg0NWRlZyk7XFxuICBib3JkZXI6IHNvbGlkIDJweCByZ2JhKDAsIDAsIDAsIDAuOCk7XFxuICBib3JkZXItbGVmdC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItdG9wLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIG1hcmdpbi1ib3R0b206IDRweDtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbn1cXG5cXG4uY2hvbmt5LXRleHQtcGxhY2Vob2xkZXIge1xcbiAgLXdlYmtpdC1hbmltYXRpb246IGxvYWRpbmctcGxhY2Vob2xkZXIgMS41cyBpbmZpbml0ZSBsaW5lYXI7XFxuICBhbmltYXRpb246IGxvYWRpbmctcGxhY2Vob2xkZXIgMS41cyBpbmZpbml0ZSBsaW5lYXI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2NjO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBtaW4td2lkdGg6IDIwcHg7XFxuICBtYXgtd2lkdGg6IDQwJTtcXG59XFxuQC13ZWJraXQta2V5ZnJhbWVzIGxvYWRpbmctcGxhY2Vob2xkZXIge1xcbiAgMCUge1xcbiAgICBvcGFjaXR5OiAwLjI7XFxuICB9XFxuICA1MCUge1xcbiAgICBvcGFjaXR5OiAwLjQ7XFxuICB9XFxuICAxMDAlIHtcXG4gICAgb3BhY2l0eTogMC4yO1xcbiAgfVxcbn1cXG5Aa2V5ZnJhbWVzIGxvYWRpbmctcGxhY2Vob2xkZXIge1xcbiAgMCUge1xcbiAgICBvcGFjaXR5OiAwLjI7XFxuICB9XFxuICA1MCUge1xcbiAgICBvcGFjaXR5OiAwLjQ7XFxuICB9XFxuICAxMDAlIHtcXG4gICAgb3BhY2l0eTogMC4yO1xcbiAgfVxcbn1cXG5cXG4uY2hvbmt5LXRvb2xiYXIge1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgZmxleC13cmFwOiB3cmFwLXJldmVyc2U7XFxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuLmNob25reS10b29sYmFyLXNpZGUge1xcbiAgbWFyZ2luLWJvdHRvbTogNy41cHg7XFxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgcGFkZGluZy1ib3R0b206IDA7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1ncm93OiAxO1xcbn1cXG4uY2hvbmt5LXRvb2xiYXItc2lkZS1sZWZ0IHtcXG4gIGZsZXgtZ3JvdzogMTAwMDA7XFxufVxcbi5jaG9ua3ktdG9vbGJhci1zaWRlLXJpZ2h0IHtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG59XFxuLmNob25reS10b29sYmFyLXNpZGUtaW5zaWRlIHtcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG4uY2hvbmt5LXRvb2xiYXItc2lkZS1pbnNpZGUgPiAqIHtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQwMHB4KSB7XFxuICAuY2hvbmt5LXRvb2xiYXIge1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uLXJldmVyc2U7XFxuICB9XFxuICAuY2hvbmt5LXNpZGUtcmlnaHQge1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICB9XFxufVxcbi5jaG9ua3ktZm9sZGVyLWNoYWluLWVudHJ5LCAuY2hvbmt5LWZvbGRlci1jaGFpbi1zZXBhcmF0b3Ige1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuLmNob25reS1mb2xkZXItY2hhaW4tZW50cnkge1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbiAgZm9udDogaW5oZXJpdDtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIHBhZGRpbmc6IDA7XFxuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDEwMG1zIGVhc2UtaW4tb3V0O1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgYm9yZGVyOiBzb2xpZCAxcHggdHJhbnNwYXJlbnQ7XFxuICBsaW5lLWhlaWdodDogMjhweDtcXG4gIHBhZGRpbmc6IDAgMC4zZW0gIWltcG9ydGFudDtcXG4gIGhlaWdodDogMjhweDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQwMHB4KSB7XFxuICAuY2hvbmt5LWZvbGRlci1jaGFpbi1lbnRyeSB7XFxuICAgIGxpbmUtaGVpZ2h0OiAxLjdlbTtcXG4gICAgaGVpZ2h0OiAxLjdlbTtcXG4gIH1cXG59XFxuLmNob25reS1mb2xkZXItY2hhaW4tZW50cnk6bGFzdC1jaGlsZCAuY2hvbmt5LWZvbGRlci1jaGFpbi1lbnRyeS1uYW1lIHtcXG4gIC13ZWJraXQtdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmUgI2JiYjtcXG4gICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmUgI2JiYjtcXG59XFxuLmNob25reS1mb2xkZXItY2hhaW4tZW50cnkuY2hvbmt5LWxvYWRpbmcge1xcbiAgZm9udC1zdHlsZTogaXRhbGljO1xcbiAgY29sb3I6ICNiYmI7XFxufVxcbmRpdi5jaG9ua3ktZm9sZGVyLWNoYWluLWVudHJ5IHtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG59XFxuXFxuYnV0dG9uLmNob25reS1mb2xkZXItY2hhaW4tZW50cnk6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjVmNTtcXG59XFxuYnV0dG9uLmNob25reS1mb2xkZXItY2hhaW4tZW50cnk6YWN0aXZlIHtcXG4gIGJvcmRlci1jb2xvcjogI2NjYztcXG59XFxuXFxuLmNob25reS1mb2xkZXItY2hhaW4tc2VwYXJhdG9yIHtcXG4gIGxpbmUtaGVpZ2h0OiAyOHB4O1xcbiAgaGVpZ2h0OiAyOHB4O1xcbiAgY29sb3I6ICNiYmI7XFxuICBwYWRkaW5nOiAwIDAuMWVtO1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MDBweCkge1xcbiAgLmNob25reS1mb2xkZXItY2hhaW4tc2VwYXJhdG9yIHtcXG4gICAgbGluZS1oZWlnaHQ6IDEuN2VtO1xcbiAgICBoZWlnaHQ6IDEuN2VtO1xcbiAgICBwYWRkaW5nOiAwIDAuMWVtO1xcbiAgfVxcbn1cXG5cXG4uY2hvbmt5LXRvb2xiYXItYnV0dG9uLWdyb3VwIC5jaG9ua3ktdG9vbGJhci1idXR0b24ge1xcbiAgYm9yZGVyLXJhZGl1czogMDtcXG59XFxuLmNob25reS10b29sYmFyLWJ1dHRvbi1ncm91cCAuY2hvbmt5LXRvb2xiYXItYnV0dG9uOmZpcnN0LW9mLXR5cGUge1xcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogNHB4O1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogNHB4O1xcbn1cXG4uY2hvbmt5LXRvb2xiYXItYnV0dG9uLWdyb3VwIC5jaG9ua3ktdG9vbGJhci1idXR0b246bGFzdC1vZi10eXBlIHtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiA0cHg7XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogNHB4O1xcbn1cXG4uY2hvbmt5LXRvb2xiYXItYnV0dG9uLWdyb3VwIC5jaG9ua3ktdG9vbGJhci1idXR0b246Zm9jdXMge1xcbiAgei1pbmRleDogMTU7XFxufVxcbi5jaG9ua3ktdG9vbGJhci1idXR0b24tZ3JvdXAgLmNob25reS10b29sYmFyLWJ1dHRvbjpub3QoOmZpcnN0LWNoaWxkKSB7XFxuICBtYXJnaW4tbGVmdDogLTFweDtcXG59XFxuXFxuLmNob25reS10b29sYmFyLWJ1dHRvbiB7XFxuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDEwMG1zIGVhc2UtaW4tb3V0O1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbiAgZm9udDogaW5oZXJpdDtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIHBhZGRpbmc6IDA7XFxuICBsaW5lLWhlaWdodDogMjZweDtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIGJvcmRlcjogc29saWQgMXB4IHRyYW5zcGFyZW50O1xcbiAgbWluLXdpZHRoOiAyOHB4O1xcbiAgaGVpZ2h0OiAyOHB4O1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgei1pbmRleDogMTA7XFxufVxcbi5jaG9ua3ktdG9vbGJhci1idXR0b24taWNvbiwgLmNob25reS10b29sYmFyLWJ1dHRvbi10ZXh0IHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuLmNob25reS10b29sYmFyLWJ1dHRvbi1pY29uIHtcXG4gIG1pbi13aWR0aDogMjhweDtcXG59XFxuLmNob25reS10b29sYmFyLWJ1dHRvbi10ZXh0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDEwcHg7XFxuICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxufVxcbi5jaG9ua3ktdG9vbGJhci1idXR0b24taWNvbiArIC5jaG9ua3ktdG9vbGJhci1idXR0b24tdGV4dCB7XFxuICBwYWRkaW5nLWxlZnQ6IDAgIWltcG9ydGFudDtcXG59XFxuLmNob25reS10b29sYmFyLWJ1dHRvbi10ZXh0ICsgLmNob25reS10b29sYmFyLWJ1dHRvbi1pY29uIHtcXG4gIG1hcmdpbi1sZWZ0OiAtMTBweCAhaW1wb3J0YW50O1xcbn1cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MDBweCkge1xcbiAgLmNob25reS10b29sYmFyLWJ1dHRvbiB7XFxuICAgIGxpbmUtaGVpZ2h0OiAxLjdlbTtcXG4gICAgbWluLXdpZHRoOiAxLjdlbTtcXG4gICAgaGVpZ2h0OiAxLjdlbTtcXG4gIH1cXG4gIC5jaG9ua3ktdG9vbGJhci1idXR0b24taWNvbiB7XFxuICAgIG1pbi13aWR0aDogMS43ZW07XFxuICB9XFxufVxcbi5jaG9ua3ktdG9vbGJhci1idXR0b24uY2hvbmt5LWFjdGl2ZSB7XFxuICBjb2xvcjogIzA5ZjtcXG4gIHotaW5kZXg6IDkzO1xcbn1cXG4uY2hvbmt5LXRvb2xiYXItYnV0dG9uOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7XFxuICB6LWluZGV4OiA5MjtcXG59XFxuLmNob25reS10b29sYmFyLWJ1dHRvbjphY3RpdmUge1xcbiAgYm9yZGVyLWNvbG9yOiAjY2NjO1xcbn1cXG4uY2hvbmt5LXRvb2xiYXItYnV0dG9uID4gc3BhbiB7XFxuICBwYWRkaW5nOiA2cHg7XFxuICBib3JkZXItY29sb3I6ICNjY2M7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbn1cXG4uY2hvbmt5LXRvb2xiYXItYnV0dG9uW2Rpc2FibGVkXSB7XFxuICBjb2xvcjogI2JiYiAhaW1wb3J0YW50O1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxufVxcblxcbi5jaG9ua3ktdG9vbGJhci1kcm9wZG93biB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcbi5jaG9ua3ktdG9vbGJhci1kcm9wZG93biAuY2hvbmt5LXRvb2xiYXItYnV0dG9uLWljb24ge1xcbiAgZm9udC1zaXplOiAwLjhlbTtcXG59XFxuLmNob25reS10b29sYmFyLWRyb3Bkb3duLWNvbnRlbnQge1xcbiAgbWFyZ2luLXRvcDogMi41cHg7XFxuICBib3JkZXI6IHNvbGlkIDFweCAjY2NjO1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgei1pbmRleDogNzA7XFxuICByaWdodDogMDtcXG59XFxuLmNob25reS10b29sYmFyLWRyb3Bkb3duLWJ1dHRvbiB7XFxuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDEwMG1zIGVhc2UtaW4tb3V0O1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbiAgZm9udDogaW5oZXJpdDtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIHBhZGRpbmc6IDA7XFxuICBsaW5lLWhlaWdodDogMjkuOXB4O1xcbiAgYm9yZGVyLWJvdHRvbTogc29saWQgMXB4ICNjY2M7XFxuICBoZWlnaHQ6IDMyLjJweDtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuLmNob25reS10b29sYmFyLWRyb3Bkb3duLWJ1dHRvbi1pY29uIHtcXG4gIHBhZGRpbmctbGVmdDogNy41cHg7XFxuICBvcGFjaXR5OiAwLjU7XFxufVxcbi5jaG9ua3ktdG9vbGJhci1kcm9wZG93bi1idXR0b24tdGV4dCB7XFxuICBwYWRkaW5nLXJpZ2h0OiA3LjVweDtcXG4gIHBhZGRpbmctbGVmdDogNy41cHg7XFxufVxcbi5jaG9ua3ktdG9vbGJhci1kcm9wZG93bi1idXR0b25bZGlzYWJsZWRdIHtcXG4gIGNvbG9yOiAjYmJiICFpbXBvcnRhbnQ7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuLmNob25reS10b29sYmFyLWRyb3Bkb3duLWJ1dHRvbjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmNWY1O1xcbn1cXG5cXG4uY2hvbmt5LWZpbGUtc2VhcmNoIHtcXG4gIHRyYW5zaXRpb246IGhlaWdodCAxMDBtcyBlYXNlLWluLW91dDtcXG4gIG1hcmdpbi1ib3R0b206IDcuNXB4O1xcbiAgbWFyZ2luLXRvcDogLTcuNXB4O1xcbiAgaGVpZ2h0OiAyOHB4O1xcbiAgb3BhY2l0eTogMTtcXG59XFxuLmNob25reS1maWxlLXNlYXJjaC1oaWRkZW4ge1xcbiAgaGVpZ2h0OiAwICFpbXBvcnRhbnQ7XFxuICBvcGFjaXR5OiAwICFpbXBvcnRhbnQ7XFxufVxcblxcbi5jaG9ua3ktZmlsZS1zZWFyY2gtaW5wdXQtZ3JvdXAgbGFiZWwsXFxuLmNob25reS1maWxlLXNlYXJjaC1pbnB1dC1ncm91cCBpbnB1dCB7XFxuICBsaW5lLWhlaWdodDogMjZweDtcXG4gIGhlaWdodDogMjhweDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xcbiAgZm9udC1zaXplOiBpbmhlcml0O1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG59XFxuLmNob25reS1maWxlLXNlYXJjaC1pbnB1dC1ncm91cCBsYWJlbCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIHBhZGRpbmc6IDAgNXB4O1xcbiAgY29sb3I6ICM2NjY7XFxuICBtYXJnaW46IDFweCAwIDAgMnB4O1xcbiAgYm9yZGVyLXJpZ2h0OiBub25lO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbn1cXG4uY2hvbmt5LWZpbGUtc2VhcmNoLWlucHV0LWdyb3VwIGlucHV0IHtcXG4gIHBhZGRpbmctbGVmdDogMzBweDtcXG4gIGJvcmRlcjogc29saWQgMXB4ICNlNGU0ZTQ7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBwYWRkaW5nLXJpZ2h0OiA1cHg7XFxufVxcbi5jaG9ua3ktZmlsZS1zZWFyY2gtaW5wdXQtZ3JvdXAtbG9hZGluZyB7XFxuICBsaW5lLWhlaWdodDogMzAuOHB4O1xcbiAgaGVpZ2h0OiAyOHB4O1xcbiAgd2lkdGg6IDI4cHg7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgY29sb3I6ICNiYmI7XFxufVxcblxcbi5jaG9ua3ktZmlsZS1saXN0IHtcXG4gIGZsZXg6IDEgMTtcXG59XFxuLmNob25reS1maWxlLWxpc3Qtbm90aWZpY2F0aW9uIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLmNob25reS1maWxlLWxpc3Qtbm90aWZpY2F0aW9uLWVtcHR5IHtcXG4gIGNvbG9yOiAjYmJiO1xcbiAgZm9udC1zaXplOiAxLjJlbTtcXG59XFxuLmNob25reS1maWxlLWxpc3Qtbm90aWZpY2F0aW9uLWNvbnRlbnQge1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpIHRyYW5zbGF0ZVkoLTUwJSk7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBsZWZ0OiA1MCU7XFxuICB0b3A6IDUwJTtcXG59XFxuXFxuLmNob25reS1maWxlLWVudHJ5LWNsaWNrYWJsZS13cmFwcGVyIHtcXG4gIG91dGxpbmU6IG5vbmUgIWltcG9ydGFudDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLmNob25reS1maWxlLWVudHJ5LWNsaWNrYWJsZS13cmFwcGVyOmZvY3VzIC5jaG9ua3ktZmlsZS1lbnRyeS1pbnNpZGU6YmVmb3JlIHtcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMCAwIDJweCAjMDAwICFpbXBvcnRhbnQ7XFxufVxcbi5jaG9ua3ktZmlsZS1lbnRyeS1jbGlja2FibGUtd3JhcHBlcjpmb2N1cyAuY2hvbmt5LWZpbGUtZW50cnktZGVzY3JpcHRpb24ge1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogIzAwMCAhaW1wb3J0YW50O1xcbn1cXG4uY2hvbmt5LWZpbGUtZW50cnktY2xpY2thYmxlLXdyYXBwZXI6Zm9jdXMgLmNob25reS1maWxlLWljb24taW5zaWRlIHtcXG4gIGNvbG9yOiAjMDAwO1xcbn1cXG5cXG4uY2hvbmt5LWZpbGUtZHJhZy1wcmV2aWV3IHtcXG4gIHBhZGRpbmc6IDcuNXB4IDEwcHg7XFxuICBib3gtc2hhZG93OiAycHggMnB4IDVweCAjODg4O1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgYm9yZGVyOiBzb2xpZCAycHggIzA5ZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblxcbi5jaG9ua3ktZmlsZS1lbnRyeSB7XFxuICBib3JkZXI6IHNvbGlkIDFweCAjZTRlNGU0O1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBoZWlnaHQ6IDEwMCU7XFxufVxcbi5jaG9ua3ktZmlsZS1lbnRyeS1pbnNpZGUge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG4uY2hvbmt5LWZpbGUtZW50cnktaW5zaWRlOmJlZm9yZSB7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHotaW5kZXg6IDk5OTtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgYm90dG9tOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBsZWZ0OiAwO1xcbiAgdG9wOiAwO1xcbn1cXG4uY2hvbmt5LWZpbGUtZW50cnktZG5kLWluZGljYXRvciB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgZm9udC1zaXplOiAxLjJlbTtcXG4gIG9wYWNpdHk6IDAuNjtcXG4gIHBhZGRpbmc6IDZweDtcXG4gIHotaW5kZXg6IDgwO1xcbiAgbGVmdDogMXB4O1xcbiAgdG9wOiAxcHg7XFxufVxcbi5jaG9ua3ktZmlsZS1lbnRyeS1kbmQtaW5kaWNhdG9yOmJlZm9yZSB7XFxuICBib3JkZXItYm90dG9tOiA1MHB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWxlZnQ6IDUwcHggc29saWQgI2ZmZjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgei1pbmRleDogLTE7XFxuICBoZWlnaHQ6IDA7XFxuICB3aWR0aDogMDtcXG4gIGxlZnQ6IDA7XFxuICB0b3A6IDA7XFxufVxcbi5jaG9ua3ktZmlsZS1lbnRyeS1wcmV2aWV3IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgZmxleC1ncm93OiAxO1xcbn1cXG4uY2hvbmt5LWZpbGUtZW50cnktZGVzY3JpcHRpb24ge1xcbiAgYm9yZGVyLXRvcDogc29saWQgMnB4IHRyYW5zcGFyZW50O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIHBhZGRpbmc6IDNweCA1cHggNXB4IDVweDtcXG59XFxuLmNob25reS1maWxlLWVudHJ5LWRlc2NyaXB0aW9uLXRpdGxlIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLmNob25reS1maWxlLWVudHJ5LWRlc2NyaXB0aW9uLXRpdGxlLW1vZGlmaWVycyB7XFxuICBtYXJnaW4tcmlnaHQ6IDVweDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGNvbG9yOiAjYmJiO1xcbiAgZm9udC1zaXplOiAwLjc1ZW07XFxuICB0b3A6IC0ycHg7XFxufVxcbi5jaG9ua3ktZmlsZS1lbnRyeS1kZXNjcmlwdGlvbi10aXRsZS1leHRlbnNpb24ge1xcbiAgY29sb3I6ICM2NjY7XFxufVxcbi5jaG9ua3ktZmlsZS1lbnRyeS1kaXJlY3RvcnkgLmNob25reS1maWxlLWVudHJ5LWRlc2NyaXB0aW9uLXRpdGxlLWV4dGVuc2lvbiB7XFxuICBjb2xvcjogI2JiYjtcXG59XFxuXFxuLmNob25reS1maWxlLWVudHJ5LXNlbGVjdGVkIC5jaG9ua3ktZmlsZS1lbnRyeS1pbnNpZGU6YmVmb3JlIHtcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMCAwIDJweCAjMzNhZGZmICFpbXBvcnRhbnQ7XFxufVxcbi5jaG9ua3ktZmlsZS1lbnRyeS1zZWxlY3RlZCAuY2hvbmt5LWZpbGUtZW50cnktZGVzY3JpcHRpb24ge1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogIzMzYWRmZiAhaW1wb3J0YW50O1xcbn1cXG4uY2hvbmt5LWZpbGUtZW50cnktc2VsZWN0ZWQgLmNob25reS1maWxlLXNlbGVjdGlvbiB7XFxuICBvcGFjaXR5OiAxICFpbXBvcnRhbnQ7XFxufVxcbi5jaG9ua3ktZmlsZS1lbnRyeS1kcmFnZ2luZyAuY2hvbmt5LWZpbGUtYmFja2dyb3VuZCB7XFxuICBvcGFjaXR5OiAwLjMgIWltcG9ydGFudDtcXG59XFxuLmNob25reS1maWxlLWVudHJ5LWRyb3AtaG92ZXJlZCAuY2hvbmt5LWZpbGUtYmFja2dyb3VuZCB7XFxuICBvcGFjaXR5OiAxICFpbXBvcnRhbnQ7XFxufVxcblxcbi5jaG9ua3ktZmlsZS1pY29uLCAuY2hvbmt5LWZpbGUtZGV0YWlscywgLmNob25reS1maWxlLXNlbGVjdGlvbiwgLmNob25reS1maWxlLXRodW1ibmFpbCwgLmNob25reS1maWxlLWJhY2tncm91bmQge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGxlZnQ6IDA7XFxuICB0b3A6IDA7XFxufVxcbi5jaG9ua3ktZmlsZS1kZXRhaWxzIHtcXG4gIHotaW5kZXg6IDUwO1xcbn1cXG4uY2hvbmt5LWZpbGUtZGV0YWlscy1pbnNpZGUge1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgZm9udC1zaXplOiAxMHB4O1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJvdHRvbTogMDtcXG59XFxuLmNob25reS1maWxlLWRldGFpbHMtaXRlbSB7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDEwMG1zIGVhc2UtaW4tb3V0O1xcbiAgcGFkZGluZzogNXB4O1xcbiAgY29sb3I6ICMwMDA7XFxuICBvcGFjaXR5OiAwLjI7XFxufVxcbi5jaG9ua3ktZmlsZS1lbnRyeTpob3ZlciAuY2hvbmt5LWZpbGUtZGV0YWlscy1pdGVtIHtcXG4gIG9wYWNpdHk6IDAuNzU7XFxufVxcblxcbi5jaG9ua3ktZmlsZS1pY29uIHtcXG4gIHotaW5kZXg6IDQwO1xcbn1cXG4uY2hvbmt5LWZpbGUtaWNvbi1jaGlsZHJlbi1jb3VudCwgLmNob25reS1maWxlLWljb24taW5zaWRlIHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKSB0cmFuc2xhdGVZKC01MCUpO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBsZWZ0OiA1MCU7XFxuICB0b3A6IDUwJTtcXG59XFxuLmNob25reS1maWxlLWljb24tY2hpbGRyZW4tY291bnQge1xcbiAgY29sb3I6ICNiYmI7XFxuICBmb250LXNpemU6IDAuN2VtO1xcbiAgei1pbmRleDogMTA7XFxufVxcbi5jaG9ua3ktZmlsZS1pY29uLWluc2lkZSB7XFxuICBmb250LXNpemU6IDIuMmVtO1xcbiAgY29sb3I6ICNmZmY7XFxuICB6LWluZGV4OiA1O1xcbn1cXG4uY2hvbmt5LWZpbGUtc2VsZWN0aW9uIHtcXG4gIHotaW5kZXg6IDMwO1xcbiAgYmFja2dyb3VuZDogcmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudCg0NWRlZywgcmdiYSgwLCAxNTMsIDI1NSwgMC4xNCksIHJnYmEoMCwgMTUzLCAyNTUsIDAuMTQpIDEwcHgsIHJnYmEoMCwgMTUzLCAyNTUsIDAuMikgMTBweCwgcmdiYSgwLCAxNTMsIDI1NSwgMC4yKSAyMHB4KTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMTUzLCAyNTUsIDAuMTQpO1xcbiAgb3BhY2l0eTogMDtcXG59XFxuLmNob25reS1maWxlLXRodW1ibmFpbCB7XFxuICB6LWluZGV4OiAyMDtcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMTAwbXMgZWFzZS1pbi1vdXQ7XFxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xcbiAgYmFja2dyb3VuZC1zaXplOiBjb250YWluO1xcbiAgb3BhY2l0eTogMTtcXG59XFxuLmNob25reS1maWxlLXRodW1ibmFpbC1oaWRkZW4ge1xcbiAgb3BhY2l0eTogMDtcXG59XFxuLmNob25reS1maWxlLWJhY2tncm91bmQge1xcbiAgei1pbmRleDogMTA7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDEwMG1zIGVhc2UtaW4tb3V0O1xcbiAgb3BhY2l0eTogMC41O1xcbn1cXG4uY2hvbmt5LWZpbGUtZW50cnk6aG92ZXIgLmNob25reS1maWxlLWJhY2tncm91bmQge1xcbiAgb3BhY2l0eTogMC42O1xcbn1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwiXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBtZHggfSBmcm9tICdAbWR4LWpzL3JlYWN0J1xuXG4vKiBAanN4IG1keCAqL1xuaW1wb3J0IHsgYXNzZXJ0SXNGbiwgQWRkQ29udGV4dCB9IGZyb20gXCJAc3Rvcnlib29rL2FkZG9uLWRvY3MvYmxvY2tzXCI7XG5cbmltcG9ydCBDaG9ua3lIZWFkZXIgZnJvbSAnLi4vQ2hvbmt5LWhlYWRlci5tZHgnO1xuaW1wb3J0IHsgU3RvcnlDYXRlZ29yaWVzIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XG5cbmNvbnN0IG1ha2VTaG9ydGNvZGUgPSBuYW1lID0+IGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpIHtcbiAgY29uc29sZS53YXJuKFwiQ29tcG9uZW50IFwiICsgbmFtZSArIFwiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGVcIilcbiAgcmV0dXJuIDxkaXYgey4uLnByb3BzfS8+XG59O1xuY29uc3QgTWV0YSA9IG1ha2VTaG9ydGNvZGUoXCJNZXRhXCIpO1xuY29uc3QgbGF5b3V0UHJvcHMgPSB7XG4gIFxufTtcbmNvbnN0IE1EWExheW91dCA9IFwid3JhcHBlclwiXG5mdW5jdGlvbiBNRFhDb250ZW50KHtcbiAgY29tcG9uZW50cyxcbiAgLi4ucHJvcHNcbn0pIHtcbiAgcmV0dXJuIDxNRFhMYXlvdXQgey4uLmxheW91dFByb3BzfSB7Li4ucHJvcHN9IGNvbXBvbmVudHM9e2NvbXBvbmVudHN9IG1keFR5cGU9XCJNRFhMYXlvdXRcIj5cblxuICAgIDxNZXRhIHRpdGxlPXtgJHtTdG9yeUNhdGVnb3JpZXMuQXBpUmVmZXJlbmNlfXxCdWlsdC1pbiBmaWxlIGFjdGlvbnNgfSBtZHhUeXBlPVwiTWV0YVwiIC8+XG4gICAgPGgxIHsuLi57XG4gICAgICBcImlkXCI6IFwiYnVpbHQtaW4tZmlsZS1hY3Rpb25zXCJcbiAgICB9fT57YEJ1aWx0LWluIGZpbGUgYWN0aW9uc2B9PC9oMT5cbiAgICA8cD57YEV4cGxhaW4gYH08aW5saW5lQ29kZSBwYXJlbnROYW1lPVwicFwiPntgQ2hvbmt5QWN0aW9uc2B9PC9pbmxpbmVDb2RlPntgIG1hcC5gfTwvcD5cbiAgICA8aDIgey4uLntcbiAgICAgIFwiaWRcIjogXCJob3ctdG8tdXNlLWZpbGUtYWN0aW9uc1wiXG4gICAgfX0+e2BIb3cgdG8gdXNlIGZpbGUgYWN0aW9uc2B9PC9oMj5cbiAgICA8aDIgey4uLntcbiAgICAgIFwiaWRcIjogXCJsaXN0LW9mLWJ1aWx0LWluLWZpbGUtYWN0aW9uc1wiXG4gICAgfX0+e2BMaXN0IG9mIGJ1aWx0LWluIGZpbGUgYWN0aW9uc2B9PC9oMj5cbiAgICA8aDMgey4uLntcbiAgICAgIFwiaWRcIjogXCJvcGVuZmlsZXNcIlxuICAgIH19PjxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJoM1wiPntgT3BlbkZpbGVzYH08L2lubGluZUNvZGU+PC9oMz5cbiAgICA8cD48aW5saW5lQ29kZSBwYXJlbnROYW1lPVwicFwiPntgZGF0YS5maWxlc2B9PC9pbmxpbmVDb2RlPntgIHdpbGwgYWx3YXlzIGJlIHNldCwgYnV0IGB9PGlubGluZUNvZGUgcGFyZW50TmFtZT1cInBcIj57YGRhdGEudGFyZ2V0YH08L2lubGluZUNvZGU+e2AgY2FuIHNvbWV0aW1lcyBiZSB1bmRlZmluZWQuIEZvclxuZXhhbXBsZSwgd2hlbiB0aGUgdXNlciBjbGlja3MgYH08aW5saW5lQ29kZSBwYXJlbnROYW1lPVwicFwiPntgQWN0aW9ucyAtPiBPcGVuIHNlbGVjdGlvbmB9PC9pbmxpbmVDb2RlPntgLCB0YXJnZXQgd2lsbCBiZSB1bmRlZmluZWQuYH08L3A+XG4gICAgPC9NRFhMYXlvdXQ+O1xufVxuXG47XG5NRFhDb250ZW50LmlzTURYQ29tcG9uZW50ID0gdHJ1ZTtcblxuZXhwb3J0IGNvbnN0IF9fcGFnZSA9ICgpID0+IHsgdGhyb3cgbmV3IEVycm9yKFwiRG9jcy1vbmx5IHN0b3J5XCIpOyB9O1xuXG5fX3BhZ2UucGFyYW1ldGVycyA9IHsgZG9jc09ubHk6IHRydWUgfTtcblxuY29uc3QgY29tcG9uZW50TWV0YSA9IHsgdGl0bGU6IGAke1N0b3J5Q2F0ZWdvcmllcy5BcGlSZWZlcmVuY2V9fEJ1aWx0LWluIGZpbGUgYWN0aW9uc2AsIGluY2x1ZGVTdG9yaWVzOiBbXCJfX3BhZ2VcIl0sICB9O1xuXG5jb25zdCBtZHhTdG9yeU5hbWVUb0tleSA9IHt9O1xuXG5jb21wb25lbnRNZXRhLnBhcmFtZXRlcnMgPSBjb21wb25lbnRNZXRhLnBhcmFtZXRlcnMgfHwge307XG5jb21wb25lbnRNZXRhLnBhcmFtZXRlcnMuZG9jcyA9IHtcbiAgLi4uKGNvbXBvbmVudE1ldGEucGFyYW1ldGVycy5kb2NzIHx8IHt9KSxcbiAgcGFnZTogKCkgPT4gPEFkZENvbnRleHQgbWR4U3RvcnlOYW1lVG9LZXk9e21keFN0b3J5TmFtZVRvS2V5fSBtZHhDb21wb25lbnRNZXRhPXtjb21wb25lbnRNZXRhfT48TURYQ29udGVudCAvPjwvQWRkQ29udGV4dD4sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnRNZXRhOyIsIi8qKlxuICogQGF1dGhvciBUaW11ciBLdXpoYWdhbGl5ZXYgPHRpbS5rdXpoQGdtYWlsLmNvbT5cbiAqIEBjb3B5cmlnaHQgMjAyMFxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHtcbiAgICBDaG9ua3lBY3Rpb25zLFxuICAgIEZpbGVBY3Rpb25IYW5kbGVyLFxuICAgIEZpbGVBcnJheSxcbiAgICBGaWxlQnJvd3NlcixcbiAgICBGaWxlRGF0YSxcbiAgICBGaWxlSGVscGVyLFxuICAgIEZpbGVMaXN0LFxuICAgIEZpbGVTZWFyY2gsXG4gICAgRmlsZVRvb2xiYXIsXG59IGZyb20gJ2Nob25reSc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTnVsbGFibGUgfSBmcm9tICd0c2RlZic7XG5cbmltcG9ydCB7IHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcbmltcG9ydCBDaG9ua3lTb3VyY2VDb2RlRnNNYXAgZnJvbSAnLi4vMDItRGVtb3MvY2hvbmt5X3NvdXJjZS5mc19tYXAuanNvbic7XG5cbmV4cG9ydCBjb25zdCBEZW1vOiBSZWFjdC5GQyA9ICgpID0+IHtcbiAgICBjb25zdCBbY3VycmVudEZvbGRlcklkLCBzZXRDdXJyZW50Rm9sZGVySWRdID0gdXNlU3RhdGUocm9vdERlbW9Gb2xkZXIuaWQpO1xuXG4gICAgY29uc3QgZmlsZXMgPSB1c2VGaWxlcyhjdXJyZW50Rm9sZGVySWQpO1xuICAgIGNvbnN0IGZvbGRlckNoYWluID0gdXNlRm9sZGVyQ2hhaW4oY3VycmVudEZvbGRlcklkKTtcblxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSB1c2VDYWxsYmFjazxGaWxlQWN0aW9uSGFuZGxlcj4oXG4gICAgICAgIChhY3Rpb24sIGFjdGlvbkRhdGEpID0+IHtcbiAgICAgICAgICAgIGlmIChhY3Rpb24uaWQgPT09IENob25reUFjdGlvbnMuT3BlbkZpbGVzLmlkKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldEZpbGU6IE51bGxhYmxlPEZpbGVEYXRhPiA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbkRhdGEudGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEZpbGUgPSBhY3Rpb25EYXRhLnRhcmdldDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbkRhdGEuZmlsZXMgJiYgYWN0aW9uRGF0YS5maWxlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RmlsZSA9IGFjdGlvbkRhdGEuZmlsZXNbMF07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldEZpbGUgJiYgRmlsZUhlbHBlci5pc0RpcmVjdG9yeSh0YXJnZXRGaWxlKSkge1xuICAgICAgICAgICAgICAgICAgICBzZXRDdXJyZW50Rm9sZGVySWQodGFyZ2V0RmlsZS5pZCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGE6IGFjdGlvbkRhdGEgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIFtzZXRDdXJyZW50Rm9sZGVySWRdXG4gICAgKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA2MDAgfX0+XG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cbmNvbnN0IHJvb3REZW1vRm9sZGVyID0ge1xuICAgIGlkOiAncXdlcnR5MTIzNDU2JyxcbiAgICBuYW1lOiAnQ2hvbmt5IERlbW8nLFxuICAgIGlzRGlyOiB0cnVlLFxuICAgIGNoaWxkcmVuSWRzOiBbQ2hvbmt5U291cmNlQ29kZUZzTWFwLnJvb3RGb2xkZXJJZF0sXG59O1xuY29uc3QgZGVtb0ZpbGVNYXAgPSB7XG4gICAgW3Jvb3REZW1vRm9sZGVyLmlkXTogcm9vdERlbW9Gb2xkZXIsXG4gICAgLi4uQ2hvbmt5U291cmNlQ29kZUZzTWFwLmZpbGVNYXAsXG59O1xuZGVtb0ZpbGVNYXBbQ2hvbmt5U291cmNlQ29kZUZzTWFwLnJvb3RGb2xkZXJJZF0ucGFyZW50SWQgPSByb290RGVtb0ZvbGRlci5pZDtcblxuY29uc3QgdXNlRmlsZXMgPSAoY3VycmVudEZvbGRlcklkOiBzdHJpbmcpOiBGaWxlQXJyYXkgPT4ge1xuICAgIHJldHVybiB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudEZvbGRlciA9IGRlbW9GaWxlTWFwW2N1cnJlbnRGb2xkZXJJZF07XG4gICAgICAgIGNvbnN0IGZpbGVzID0gIWN1cnJlbnRGb2xkZXIuY2hpbGRyZW5JZHNcbiAgICAgICAgICAgID8gW11cbiAgICAgICAgICAgIDogY3VycmVudEZvbGRlci5jaGlsZHJlbklkcy5tYXAoKGZpbGVJZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZSA9IGRlbW9GaWxlTWFwW2ZpbGVJZF07XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmlsZSA/IGZpbGUgOiBudWxsO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZpbGVzO1xuICAgIH0sIFtjdXJyZW50Rm9sZGVySWRdKTtcbn07XG5cbmNvbnN0IHVzZUZvbGRlckNoYWluID0gKGN1cnJlbnRGb2xkZXJJZDogc3RyaW5nKTogRmlsZUFycmF5ID0+IHtcbiAgICByZXR1cm4gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRGb2xkZXIgPSBkZW1vRmlsZU1hcFtjdXJyZW50Rm9sZGVySWRdO1xuXG4gICAgICAgIGNvbnN0IGZvbGRlckNoYWluID0gW2N1cnJlbnRGb2xkZXJdO1xuXG4gICAgICAgIGxldCBwYXJlbnRJZCA9IGN1cnJlbnRGb2xkZXIucGFyZW50SWQ7XG4gICAgICAgIHdoaWxlIChwYXJlbnRJZCkge1xuICAgICAgICAgICAgY29uc3QgcGFyZW50RmlsZSA9IGRlbW9GaWxlTWFwW3BhcmVudElkXTtcbiAgICAgICAgICAgIGlmIChwYXJlbnRGaWxlKSB7XG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW4udW5zaGlmdChwYXJlbnRGaWxlKTtcbiAgICAgICAgICAgICAgICBwYXJlbnRJZCA9IHBhcmVudEZpbGUucGFyZW50SWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcmVudElkID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmb2xkZXJDaGFpbjtcbiAgICB9LCBbY3VycmVudEZvbGRlcklkXSk7XG59O1xuIiwiXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBtZHggfSBmcm9tICdAbWR4LWpzL3JlYWN0J1xuXG4vKiBAanN4IG1keCAqL1xuaW1wb3J0IHsgYXNzZXJ0SXNGbiwgQWRkQ29udGV4dCB9IGZyb20gXCJAc3Rvcnlib29rL2FkZG9uLWRvY3MvYmxvY2tzXCI7XG5cbmltcG9ydCBDaG9ua3lIZWFkZXIgZnJvbSAnLi4vQ2hvbmt5LWhlYWRlci5tZHgnO1xuaW1wb3J0IHsgU3RvcnlDYXRlZ29yaWVzIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XG5pbXBvcnQgeyBEZW1vIH0gZnJvbSAnLi9EZW1vJztcblxuY29uc3QgbWFrZVNob3J0Y29kZSA9IG5hbWUgPT4gZnVuY3Rpb24gTURYRGVmYXVsdFNob3J0Y29kZShwcm9wcykge1xuICBjb25zb2xlLndhcm4oXCJDb21wb25lbnQgXCIgKyBuYW1lICsgXCIgd2FzIG5vdCBpbXBvcnRlZCwgZXhwb3J0ZWQsIG9yIHByb3ZpZGVkIGJ5IE1EWFByb3ZpZGVyIGFzIGdsb2JhbCBzY29wZVwiKVxuICByZXR1cm4gPGRpdiB7Li4ucHJvcHN9Lz5cbn07XG5jb25zdCBNZXRhID0gbWFrZVNob3J0Y29kZShcIk1ldGFcIik7XG5jb25zdCBsYXlvdXRQcm9wcyA9IHtcbiAgXG59O1xuY29uc3QgTURYTGF5b3V0ID0gXCJ3cmFwcGVyXCJcbmZ1bmN0aW9uIE1EWENvbnRlbnQoe1xuICBjb21wb25lbnRzLFxuICAuLi5wcm9wc1xufSkge1xuICByZXR1cm4gPE1EWExheW91dCB7Li4ubGF5b3V0UHJvcHN9IHsuLi5wcm9wc30gY29tcG9uZW50cz17Y29tcG9uZW50c30gbWR4VHlwZT1cIk1EWExheW91dFwiPlxuXG4gICAgPE1ldGEgdGl0bGU9e2Ake1N0b3J5Q2F0ZWdvcmllcy5XZWxjb21lfXxJbnRyb2R1Y3Rpb25gfSBtZHhUeXBlPVwiTWV0YVwiIC8+XG4gICAgPENob25reUhlYWRlciBtZHhUeXBlPVwiQ2hvbmt5SGVhZGVyXCIgLz5cbiAgICA8aDEgey4uLntcbiAgICAgIFwiaWRcIjogXCJpbnRyb2R1Y3Rpb25cIlxuICAgIH19PntgSW50cm9kdWN0aW9uYH08L2gxPlxuICAgIDxwPjxzdHJvbmcgcGFyZW50TmFtZT1cInBcIj57YENob25reSBpcyBhIGZpbGUgYnJvd3NlciBjb21wb25lbnQgZm9yIFJlYWN0LmB9PC9zdHJvbmc+e2AgSXQgdHJpZXMgdG8gcmVjcmVhdGUgdGhlIG5hdGl2ZSBmaWxlXG5icm93c2luZyBleHBlcmllbmNlIGluIHlvdXIgYnJvd3Nlci4gQ2hvbmt5IHN1cHBvcnRzIGRyYWcgJiBkcm9wLCBmaWxlIHNlbGVjdGlvbixcbmltYWdlIHRodW1ibmFpbHMsIGFuZCBtdWNoIG1vcmUhYH08L3A+XG4gICAgPHA+PGEgcGFyZW50TmFtZT1cInBcIiB7Li4ue1xuICAgICAgICBcImhyZWZcIjogXCJodHRwczovL2dpdGh1Yi5jb20vVGltYm9LWi9DaG9ua3lcIixcbiAgICAgICAgXCJ0YXJnZXRcIjogXCJfYmxhbmtcIixcbiAgICAgICAgXCJyZWxcIjogXCJub2ZvbGxvdyBub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgIH19PjxzdHJvbmcgcGFyZW50TmFtZT1cImFcIj57YFZpZXcgb24gR2l0aHViYH08L3N0cm9uZz48L2E+PC9wPlxuICAgIDxiciAvPlxuICAgIDxiciAvPlxuICAgIDxoMSB7Li4ue1xuICAgICAgXCJpZFwiOiBcInBoaWxvc29waHlcIlxuICAgIH19PntgUGhpbG9zb3BoeWB9PC9oMT5cbiAgICA8cD57YFBsZWFzZSByZWFkIHRoaXMgc2VjdGlvbiB0byB1bmRlcnN0YW5kIHdoYXQgQ2hvbmt5IGlzIGFuZCBpcyBub3QuYH08L3A+XG4gICAgPGJyIC8+XG4gICAgPGgzIHsuLi57XG4gICAgICBcImlkXCI6IFwiMS1jaG9ua3ktaXMtdGhlLXByZXNlbnRhdGlvbi1sYXllclwiXG4gICAgfX0+e2AxLiBDaG9ua3kgaXMgdGhlIHByZXNlbnRhdGlvbiBsYXllci5gfTwvaDM+XG4gICAgPHA+e2BDaG9ua3kgdGFrZXMgYSBsaXN0IG9mIGZpbGVzIGFuZCBzaG93cyB0aGVtIHRvIHRoZSB1c2VyLiBJdCBkb2VzIG5vdCBhbmQgc2hvdWxkIG5vdFxua25vdyB3aGVyZSB0aGUgZmlsZXMgY2FtZSBmcm9tLCBub3Igc2hvdWxkIGl0IG5vdyBob3cgZmlsZSBvcGVyYXRpb25zIGFyZSBjYXJyaWVkIG91dC5gfTwvcD5cbiAgICA8YnIgLz5cbiAgICA8aDMgey4uLntcbiAgICAgIFwiaWRcIjogXCIyLWNob25reS1pcy1maWxlc3lzdGVtLWFnbm9zdGljXCJcbiAgICB9fT57YDIuIENob25reSBpcyBmaWxlc3lzdGVtLWFnbm9zdGljLmB9PC9oMz5cbiAgICA8cD57YENob25reSB0cmllcyB0byBzdGF5IGB9PHN0cm9uZyBwYXJlbnROYW1lPVwicFwiPntgdW5vcGluaW9uYXRlZGB9PC9zdHJvbmc+e2Agd2hlbiBpdCBjb21lcyB0byBpbnRlcmFjdGlvbnMgd2l0aCB0aGUgZmlsZVxuc3lzdGVtIChGUykuYH08L3A+XG4gICAgPGJyIC8+XG4gICAgPGgzIHsuLi57XG4gICAgICBcImlkXCI6IFwiMy1kZXZlbG9waW5nLWZpbGUtYnJvd3NlcnMtaXMtaGFyZC1lYWNoLXVzZS1jYXNlLWlzLXVuaXF1ZVwiXG4gICAgfX0+e2AzLiBEZXZlbG9waW5nIGZpbGUgYnJvd3NlcnMgaXMgaGFyZC4gRWFjaCB1c2UgY2FzZSBpcyB1bmlxdWUuYH08L2gzPlxuICAgIDxwPntgQXQgdGhlIHNhbWUgdGltZSwgQ2hvbmt5IHRyaWVzIHRvIGNvdmVyIGFsbCBwb3NzaWJsZSBpbnRlcmFjdGlvbnMgd2l0aCB0aGUgdXNlci4gVGhpcyBpbmNsdWRlcyBzdXBwb3J0IGZvciBrZXlib2FyZFxubmF2aWdhdGlvbiBhbmQgY29tbW9uIGtleWJvYXJkIHNob3J0Y3V0cywgc3VwcG9ydCBmb3IgZmlsZSBzZWxlY3Rpb25zLCBkcmFnICYgZHJvcCwgZGlmZmVyZW50IGZpbGUgdmlld3MsIGFuZCBtdWNoIG1vcmUuYH08L3A+XG4gICAgPGJyIC8+XG4gICAgPGJyIC8+XG4gICAgPGJyIC8+XG4gICAgPGJyIC8+XG4mbmJzcDtcbiAgICA8L01EWExheW91dD47XG59XG5cbjtcbk1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQgPSB0cnVlO1xuXG5leHBvcnQgY29uc3QgX19wYWdlID0gKCkgPT4geyB0aHJvdyBuZXcgRXJyb3IoXCJEb2NzLW9ubHkgc3RvcnlcIik7IH07XG5cbl9fcGFnZS5wYXJhbWV0ZXJzID0geyBkb2NzT25seTogdHJ1ZSB9O1xuXG5jb25zdCBjb21wb25lbnRNZXRhID0geyB0aXRsZTogYCR7U3RvcnlDYXRlZ29yaWVzLldlbGNvbWV9fEludHJvZHVjdGlvbmAsIGluY2x1ZGVTdG9yaWVzOiBbXCJfX3BhZ2VcIl0sICB9O1xuXG5jb25zdCBtZHhTdG9yeU5hbWVUb0tleSA9IHt9O1xuXG5jb21wb25lbnRNZXRhLnBhcmFtZXRlcnMgPSBjb21wb25lbnRNZXRhLnBhcmFtZXRlcnMgfHwge307XG5jb21wb25lbnRNZXRhLnBhcmFtZXRlcnMuZG9jcyA9IHtcbiAgLi4uKGNvbXBvbmVudE1ldGEucGFyYW1ldGVycy5kb2NzIHx8IHt9KSxcbiAgcGFnZTogKCkgPT4gPEFkZENvbnRleHQgbWR4U3RvcnlOYW1lVG9LZXk9e21keFN0b3J5TmFtZVRvS2V5fSBtZHhDb21wb25lbnRNZXRhPXtjb21wb25lbnRNZXRhfT48TURYQ29udGVudCAvPjwvQWRkQ29udGV4dD4sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnRNZXRhOyIsIlxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJcXG4gICAgICBcXG4gICAgICAvLyBAdHMtbm9jaGVja1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19TVE9SWV9fID0gXFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IHtcXFxcbiAgICBDaG9ua3lBY3Rpb25zLFxcXFxuICAgIEZpbGVBY3Rpb25IYW5kbGVyLFxcXFxuICAgIEZpbGVBcnJheSxcXFxcbiAgICBGaWxlQnJvd3NlcixcXFxcbiAgICBGaWxlRGF0YSxcXFxcbiAgICBGaWxlSGVscGVyLFxcXFxuICAgIEZpbGVMaXN0LFxcXFxuICAgIEZpbGVTZWFyY2gsXFxcXG4gICAgRmlsZVRvb2xiYXIsXFxcXG59IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xcXFxuaW1wb3J0IHsgTnVsbGFibGUgfSBmcm9tICd0c2RlZic7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcXFxuICAgIFN0b3J5Q2F0ZWdvcmllcyxcXFxcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAxLUZpbGUtQnJvd3Nlci1kZW1vLm1kJztcXFxcbmltcG9ydCBDaG9ua3lTb3VyY2VDb2RlRnNNYXAgZnJvbSAnLi9jaG9ua3lfc291cmNlLmZzX21hcC5qc29uJztcXFxcblxcXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRGVtb3M7XFxcXG5jb25zdCB0aXRsZSA9ICdGaWxlIEJyb3dzZXIgZGVtbyc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgRmlsZUJyb3dzZXJEZW1vOiBSZWFjdC5GQyA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBbY3VycmVudEZvbGRlcklkLCBzZXRDdXJyZW50Rm9sZGVySWRdID0gdXNlU3RhdGUocm9vdERlbW9Gb2xkZXIuaWQpO1xcXFxuXFxcXG4gICAgY29uc3QgZmlsZXMgPSB1c2VGaWxlcyhjdXJyZW50Rm9sZGVySWQpO1xcXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gdXNlRm9sZGVyQ2hhaW4oY3VycmVudEZvbGRlcklkKTtcXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSB1c2VDYWxsYmFjazxGaWxlQWN0aW9uSGFuZGxlcj4oXFxcXG4gICAgICAgIChhY3Rpb24sIGFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgICAgIGlmIChhY3Rpb24uaWQgPT09IENob25reUFjdGlvbnMuT3BlbkZpbGVzLmlkKSB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldEZpbGU6IE51bGxhYmxlPEZpbGVEYXRhPiA9IG51bGw7XFxcXG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbkRhdGEudGFyZ2V0KSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEZpbGUgPSBhY3Rpb25EYXRhLnRhcmdldDtcXFxcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbkRhdGEuZmlsZXMgJiYgYWN0aW9uRGF0YS5maWxlcy5sZW5ndGggPT09IDEpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RmlsZSA9IGFjdGlvbkRhdGEuZmlsZXNbMF07XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuXFxcXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldEZpbGUgJiYgRmlsZUhlbHBlci5pc0RpcmVjdG9yeSh0YXJnZXRGaWxlKSkge1xcXFxuICAgICAgICAgICAgICAgICAgICBzZXRDdXJyZW50Rm9sZGVySWQodGFyZ2V0RmlsZS5pZCk7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9XFxcXG5cXFxcbiAgICAgICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGE6IGFjdGlvbkRhdGEgfSk7XFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIFtzZXRDdXJyZW50Rm9sZGVySWRdXFxcXG4gICAgKTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA2MDAgfX0+XFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFxcbmNvbnN0IHJvb3REZW1vRm9sZGVyID0ge1xcXFxuICAgIGlkOiAncXdlcnR5MTIzNDU2JyxcXFxcbiAgICBuYW1lOiAnQ2hvbmt5IERlbW8nLFxcXFxuICAgIGlzRGlyOiB0cnVlLFxcXFxuICAgIGNoaWxkcmVuSWRzOiBbQ2hvbmt5U291cmNlQ29kZUZzTWFwLnJvb3RGb2xkZXJJZF0sXFxcXG59O1xcXFxuY29uc3QgZGVtb0ZpbGVNYXAgPSB7XFxcXG4gICAgW3Jvb3REZW1vRm9sZGVyLmlkXTogcm9vdERlbW9Gb2xkZXIsXFxcXG4gICAgLi4uQ2hvbmt5U291cmNlQ29kZUZzTWFwLmZpbGVNYXAsXFxcXG59O1xcXFxuZGVtb0ZpbGVNYXBbQ2hvbmt5U291cmNlQ29kZUZzTWFwLnJvb3RGb2xkZXJJZF0ucGFyZW50SWQgPSByb290RGVtb0ZvbGRlci5pZDtcXFxcblxcXFxuY29uc3QgdXNlRmlsZXMgPSAoY3VycmVudEZvbGRlcklkOiBzdHJpbmcpOiBGaWxlQXJyYXkgPT4ge1xcXFxuICAgIHJldHVybiB1c2VNZW1vKCgpID0+IHtcXFxcbiAgICAgICAgY29uc3QgY3VycmVudEZvbGRlciA9IGRlbW9GaWxlTWFwW2N1cnJlbnRGb2xkZXJJZF07XFxcXG4gICAgICAgIGNvbnN0IGZpbGVzID0gIWN1cnJlbnRGb2xkZXIuY2hpbGRyZW5JZHNcXFxcbiAgICAgICAgICAgID8gW11cXFxcbiAgICAgICAgICAgIDogY3VycmVudEZvbGRlci5jaGlsZHJlbklkcy5tYXAoKGZpbGVJZCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZSA9IGRlbW9GaWxlTWFwW2ZpbGVJZF07XFxcXG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmlsZSA/IGZpbGUgOiBudWxsO1xcXFxuICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgcmV0dXJuIGZpbGVzO1xcXFxuICAgIH0sIFtjdXJyZW50Rm9sZGVySWRdKTtcXFxcbn07XFxcXG5cXFxcbmNvbnN0IHVzZUZvbGRlckNoYWluID0gKGN1cnJlbnRGb2xkZXJJZDogc3RyaW5nKTogRmlsZUFycmF5ID0+IHtcXFxcbiAgICByZXR1cm4gdXNlTWVtbygoKSA9PiB7XFxcXG4gICAgICAgIGNvbnN0IGN1cnJlbnRGb2xkZXIgPSBkZW1vRmlsZU1hcFtjdXJyZW50Rm9sZGVySWRdO1xcXFxuXFxcXG4gICAgICAgIGNvbnN0IGZvbGRlckNoYWluID0gW2N1cnJlbnRGb2xkZXJdO1xcXFxuXFxcXG4gICAgICAgIGxldCBwYXJlbnRJZCA9IGN1cnJlbnRGb2xkZXIucGFyZW50SWQ7XFxcXG4gICAgICAgIHdoaWxlIChwYXJlbnRJZCkge1xcXFxuICAgICAgICAgICAgY29uc3QgcGFyZW50RmlsZSA9IGRlbW9GaWxlTWFwW3BhcmVudElkXTtcXFxcbiAgICAgICAgICAgIGlmIChwYXJlbnRGaWxlKSB7XFxcXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW4udW5zaGlmdChwYXJlbnRGaWxlKTtcXFxcbiAgICAgICAgICAgICAgICBwYXJlbnRJZCA9IHBhcmVudEZpbGUucGFyZW50SWQ7XFxcXG4gICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgIHBhcmVudElkID0gbnVsbDtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuXFxcXG4gICAgICAgIHJldHVybiBmb2xkZXJDaGFpbjtcXFxcbiAgICB9LCBbY3VycmVudEZvbGRlcklkXSk7XFxcXG59O1xcXFxuXFxcIjtcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1xcXCJmaWxlLWJyb3dzZXItZGVtb1xcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjQxLFxcXCJsaW5lXFxcIjozOH0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjc5fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6NDEsXFxcImxpbmVcXFwiOjM4fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjc5fX19O1xcbiAgICBcXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHtcXG4gICAgQ2hvbmt5QWN0aW9ucyxcXG4gICAgRmlsZUFjdGlvbkhhbmRsZXIsXFxuICAgIEZpbGVBcnJheSxcXG4gICAgRmlsZUJyb3dzZXIsXFxuICAgIEZpbGVEYXRhLFxcbiAgICBGaWxlSGVscGVyLFxcbiAgICBGaWxlTGlzdCxcXG4gICAgRmlsZVNlYXJjaCxcXG4gICAgRmlsZVRvb2xiYXIsXFxufSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XFxuaW1wb3J0IHsgTnVsbGFibGUgfSBmcm9tICd0c2RlZic7XFxuXFxuaW1wb3J0IHtcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXG4gICAgU3RvcnlDYXRlZ29yaWVzLFxcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAxLUZpbGUtQnJvd3Nlci1kZW1vLm1kJztcXG5pbXBvcnQgQ2hvbmt5U291cmNlQ29kZUZzTWFwIGZyb20gJy4vY2hvbmt5X3NvdXJjZS5mc19tYXAuanNvbic7XFxuXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRGVtb3M7XFxuY29uc3QgdGl0bGUgPSAnRmlsZSBCcm93c2VyIGRlbW8nO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxuICAgIHBhcmFtZXRlcnM6IHtcXFwic3RvcnlTb3VyY2VcXFwiOntcXFwic291cmNlXFxcIjpcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIENob25reUFjdGlvbnMsXFxcXG4gICAgRmlsZUFjdGlvbkhhbmRsZXIsXFxcXG4gICAgRmlsZUFycmF5LFxcXFxuICAgIEZpbGVCcm93c2VyLFxcXFxuICAgIEZpbGVEYXRhLFxcXFxuICAgIEZpbGVIZWxwZXIsXFxcXG4gICAgRmlsZUxpc3QsXFxcXG4gICAgRmlsZVNlYXJjaCxcXFxcbiAgICBGaWxlVG9vbGJhcixcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XFxcXG5pbXBvcnQgeyBOdWxsYWJsZSB9IGZyb20gJ3RzZGVmJztcXFxcblxcXFxuaW1wb3J0IHtcXFxcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxcXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxcXG4gICAgU3RvcnlDYXRlZ29yaWVzLFxcXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtRmlsZS1Ccm93c2VyLWRlbW8ubWQnO1xcXFxuaW1wb3J0IENob25reVNvdXJjZUNvZGVGc01hcCBmcm9tICcuL2Nob25reV9zb3VyY2UuZnNfbWFwLmpzb24nO1xcXFxuXFxcXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5EZW1vcztcXFxcbmNvbnN0IHRpdGxlID0gJ0ZpbGUgQnJvd3NlciBkZW1vJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBGaWxlQnJvd3NlckRlbW86IFJlYWN0LkZDID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IFtjdXJyZW50Rm9sZGVySWQsIHNldEN1cnJlbnRGb2xkZXJJZF0gPSB1c2VTdGF0ZShyb290RGVtb0ZvbGRlci5pZCk7XFxcXG5cXFxcbiAgICBjb25zdCBmaWxlcyA9IHVzZUZpbGVzKGN1cnJlbnRGb2xkZXJJZCk7XFxcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSB1c2VGb2xkZXJDaGFpbihjdXJyZW50Rm9sZGVySWQpO1xcXFxuXFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IHVzZUNhbGxiYWNrPEZpbGVBY3Rpb25IYW5kbGVyPihcXFxcbiAgICAgICAgKGFjdGlvbiwgYWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICAgICAgaWYgKGFjdGlvbi5pZCA9PT0gQ2hvbmt5QWN0aW9ucy5PcGVuRmlsZXMuaWQpIHtcXFxcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0RmlsZTogTnVsbGFibGU8RmlsZURhdGE+ID0gbnVsbDtcXFxcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uRGF0YS50YXJnZXQpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RmlsZSA9IGFjdGlvbkRhdGEudGFyZ2V0O1xcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uRGF0YS5maWxlcyAmJiBhY3Rpb25EYXRhLmZpbGVzLmxlbmd0aCA9PT0gMSkge1xcXFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRGaWxlID0gYWN0aW9uRGF0YS5maWxlc1swXTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG5cXFxcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0RmlsZSAmJiBGaWxlSGVscGVyLmlzRGlyZWN0b3J5KHRhcmdldEZpbGUpKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHNldEN1cnJlbnRGb2xkZXJJZCh0YXJnZXRGaWxlLmlkKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH1cXFxcblxcXFxuICAgICAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YTogYWN0aW9uRGF0YSB9KTtcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAgW3NldEN1cnJlbnRGb2xkZXJJZF1cXFxcbiAgICApO1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDYwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXFxuY29uc3Qgcm9vdERlbW9Gb2xkZXIgPSB7XFxcXG4gICAgaWQ6ICdxd2VydHkxMjM0NTYnLFxcXFxuICAgIG5hbWU6ICdDaG9ua3kgRGVtbycsXFxcXG4gICAgaXNEaXI6IHRydWUsXFxcXG4gICAgY2hpbGRyZW5JZHM6IFtDaG9ua3lTb3VyY2VDb2RlRnNNYXAucm9vdEZvbGRlcklkXSxcXFxcbn07XFxcXG5jb25zdCBkZW1vRmlsZU1hcCA9IHtcXFxcbiAgICBbcm9vdERlbW9Gb2xkZXIuaWRdOiByb290RGVtb0ZvbGRlcixcXFxcbiAgICAuLi5DaG9ua3lTb3VyY2VDb2RlRnNNYXAuZmlsZU1hcCxcXFxcbn07XFxcXG5kZW1vRmlsZU1hcFtDaG9ua3lTb3VyY2VDb2RlRnNNYXAucm9vdEZvbGRlcklkXS5wYXJlbnRJZCA9IHJvb3REZW1vRm9sZGVyLmlkO1xcXFxuXFxcXG5jb25zdCB1c2VGaWxlcyA9IChjdXJyZW50Rm9sZGVySWQ6IHN0cmluZyk6IEZpbGVBcnJheSA9PiB7XFxcXG4gICAgcmV0dXJuIHVzZU1lbW8oKCkgPT4ge1xcXFxuICAgICAgICBjb25zdCBjdXJyZW50Rm9sZGVyID0gZGVtb0ZpbGVNYXBbY3VycmVudEZvbGRlcklkXTtcXFxcbiAgICAgICAgY29uc3QgZmlsZXMgPSAhY3VycmVudEZvbGRlci5jaGlsZHJlbklkc1xcXFxuICAgICAgICAgICAgPyBbXVxcXFxuICAgICAgICAgICAgOiBjdXJyZW50Rm9sZGVyLmNoaWxkcmVuSWRzLm1hcCgoZmlsZUlkKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICBjb25zdCBmaWxlID0gZGVtb0ZpbGVNYXBbZmlsZUlkXTtcXFxcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlID8gZmlsZSA6IG51bGw7XFxcXG4gICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICByZXR1cm4gZmlsZXM7XFxcXG4gICAgfSwgW2N1cnJlbnRGb2xkZXJJZF0pO1xcXFxufTtcXFxcblxcXFxuY29uc3QgdXNlRm9sZGVyQ2hhaW4gPSAoY3VycmVudEZvbGRlcklkOiBzdHJpbmcpOiBGaWxlQXJyYXkgPT4ge1xcXFxuICAgIHJldHVybiB1c2VNZW1vKCgpID0+IHtcXFxcbiAgICAgICAgY29uc3QgY3VycmVudEZvbGRlciA9IGRlbW9GaWxlTWFwW2N1cnJlbnRGb2xkZXJJZF07XFxcXG5cXFxcbiAgICAgICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbY3VycmVudEZvbGRlcl07XFxcXG5cXFxcbiAgICAgICAgbGV0IHBhcmVudElkID0gY3VycmVudEZvbGRlci5wYXJlbnRJZDtcXFxcbiAgICAgICAgd2hpbGUgKHBhcmVudElkKSB7XFxcXG4gICAgICAgICAgICBjb25zdCBwYXJlbnRGaWxlID0gZGVtb0ZpbGVNYXBbcGFyZW50SWRdO1xcXFxuICAgICAgICAgICAgaWYgKHBhcmVudEZpbGUpIHtcXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbi51bnNoaWZ0KHBhcmVudEZpbGUpO1xcXFxuICAgICAgICAgICAgICAgIHBhcmVudElkID0gcGFyZW50RmlsZS5wYXJlbnRJZDtcXFxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgcGFyZW50SWQgPSBudWxsO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9XFxcXG5cXFxcbiAgICAgICAgcmV0dXJuIGZvbGRlckNoYWluO1xcXFxuICAgIH0sIFtjdXJyZW50Rm9sZGVySWRdKTtcXFxcbn07XFxcXG5cXFwiLFxcXCJsb2NhdGlvbnNNYXBcXFwiOntcXFwiZmlsZS1icm93c2VyLWRlbW9cXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjo0MSxcXFwibGluZVxcXCI6Mzh9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo3OX0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjQxLFxcXCJsaW5lXFxcIjozOH0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo3OX19fX0sXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgRmlsZUJyb3dzZXJEZW1vOiBSZWFjdC5GQyA9ICgpID0+IHtcXG4gICAgY29uc3QgW2N1cnJlbnRGb2xkZXJJZCwgc2V0Q3VycmVudEZvbGRlcklkXSA9IHVzZVN0YXRlKHJvb3REZW1vRm9sZGVyLmlkKTtcXG5cXG4gICAgY29uc3QgZmlsZXMgPSB1c2VGaWxlcyhjdXJyZW50Rm9sZGVySWQpO1xcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IHVzZUZvbGRlckNoYWluKGN1cnJlbnRGb2xkZXJJZCk7XFxuXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSB1c2VDYWxsYmFjazxGaWxlQWN0aW9uSGFuZGxlcj4oXFxuICAgICAgICAoYWN0aW9uLCBhY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICAgICAgaWYgKGFjdGlvbi5pZCA9PT0gQ2hvbmt5QWN0aW9ucy5PcGVuRmlsZXMuaWQpIHtcXG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldEZpbGU6IE51bGxhYmxlPEZpbGVEYXRhPiA9IG51bGw7XFxuICAgICAgICAgICAgICAgIGlmIChhY3Rpb25EYXRhLnRhcmdldCkge1xcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RmlsZSA9IGFjdGlvbkRhdGEudGFyZ2V0O1xcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbkRhdGEuZmlsZXMgJiYgYWN0aW9uRGF0YS5maWxlcy5sZW5ndGggPT09IDEpIHtcXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEZpbGUgPSBhY3Rpb25EYXRhLmZpbGVzWzBdO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRGaWxlICYmIEZpbGVIZWxwZXIuaXNEaXJlY3RvcnkodGFyZ2V0RmlsZSkpIHtcXG4gICAgICAgICAgICAgICAgICAgIHNldEN1cnJlbnRGb2xkZXJJZCh0YXJnZXRGaWxlLmlkKTtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhOiBhY3Rpb25EYXRhIH0pO1xcbiAgICAgICAgfSxcXG4gICAgICAgIFtzZXRDdXJyZW50Rm9sZGVySWRdXFxuICAgICk7XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNjAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cXG5jb25zdCByb290RGVtb0ZvbGRlciA9IHtcXG4gICAgaWQ6ICdxd2VydHkxMjM0NTYnLFxcbiAgICBuYW1lOiAnQ2hvbmt5IERlbW8nLFxcbiAgICBpc0RpcjogdHJ1ZSxcXG4gICAgY2hpbGRyZW5JZHM6IFtDaG9ua3lTb3VyY2VDb2RlRnNNYXAucm9vdEZvbGRlcklkXSxcXG59O1xcbmNvbnN0IGRlbW9GaWxlTWFwID0ge1xcbiAgICBbcm9vdERlbW9Gb2xkZXIuaWRdOiByb290RGVtb0ZvbGRlcixcXG4gICAgLi4uQ2hvbmt5U291cmNlQ29kZUZzTWFwLmZpbGVNYXAsXFxufTtcXG5kZW1vRmlsZU1hcFtDaG9ua3lTb3VyY2VDb2RlRnNNYXAucm9vdEZvbGRlcklkXS5wYXJlbnRJZCA9IHJvb3REZW1vRm9sZGVyLmlkO1xcblxcbmNvbnN0IHVzZUZpbGVzID0gKGN1cnJlbnRGb2xkZXJJZDogc3RyaW5nKTogRmlsZUFycmF5ID0+IHtcXG4gICAgcmV0dXJuIHVzZU1lbW8oKCkgPT4ge1xcbiAgICAgICAgY29uc3QgY3VycmVudEZvbGRlciA9IGRlbW9GaWxlTWFwW2N1cnJlbnRGb2xkZXJJZF07XFxuICAgICAgICBjb25zdCBmaWxlcyA9ICFjdXJyZW50Rm9sZGVyLmNoaWxkcmVuSWRzXFxuICAgICAgICAgICAgPyBbXVxcbiAgICAgICAgICAgIDogY3VycmVudEZvbGRlci5jaGlsZHJlbklkcy5tYXAoKGZpbGVJZCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBkZW1vRmlsZU1hcFtmaWxlSWRdO1xcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlID8gZmlsZSA6IG51bGw7XFxuICAgICAgICAgICAgICB9KTtcXG4gICAgICAgIHJldHVybiBmaWxlcztcXG4gICAgfSwgW2N1cnJlbnRGb2xkZXJJZF0pO1xcbn07XFxuXFxuY29uc3QgdXNlRm9sZGVyQ2hhaW4gPSAoY3VycmVudEZvbGRlcklkOiBzdHJpbmcpOiBGaWxlQXJyYXkgPT4ge1xcbiAgICByZXR1cm4gdXNlTWVtbygoKSA9PiB7XFxuICAgICAgICBjb25zdCBjdXJyZW50Rm9sZGVyID0gZGVtb0ZpbGVNYXBbY3VycmVudEZvbGRlcklkXTtcXG5cXG4gICAgICAgIGNvbnN0IGZvbGRlckNoYWluID0gW2N1cnJlbnRGb2xkZXJdO1xcblxcbiAgICAgICAgbGV0IHBhcmVudElkID0gY3VycmVudEZvbGRlci5wYXJlbnRJZDtcXG4gICAgICAgIHdoaWxlIChwYXJlbnRJZCkge1xcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudEZpbGUgPSBkZW1vRmlsZU1hcFtwYXJlbnRJZF07XFxuICAgICAgICAgICAgaWYgKHBhcmVudEZpbGUpIHtcXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW4udW5zaGlmdChwYXJlbnRGaWxlKTtcXG4gICAgICAgICAgICAgICAgcGFyZW50SWQgPSBwYXJlbnRGaWxlLnBhcmVudElkO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHBhcmVudElkID0gbnVsbDtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuXFxuICAgICAgICByZXR1cm4gZm9sZGVyQ2hhaW47XFxuICAgIH0sIFtjdXJyZW50Rm9sZGVySWRdKTtcXG59O1xcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiZmlsZS1icm93c2VyLWRlbW9cIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjQxLFwibGluZVwiOjQ2fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6ODd9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6NDEsXCJsaW5lXCI6NDZ9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6ODd9fX07XG4gICAgXG5cbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAvLyBAdHMtbm9jaGVja1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7XFxuICAgIENob25reUFjdGlvbnMsXFxuICAgIEZpbGVBY3Rpb25IYW5kbGVyLFxcbiAgICBGaWxlQXJyYXksXFxuICAgIEZpbGVCcm93c2VyLFxcbiAgICBGaWxlRGF0YSxcXG4gICAgRmlsZUhlbHBlcixcXG4gICAgRmlsZUxpc3QsXFxuICAgIEZpbGVTZWFyY2gsXFxuICAgIEZpbGVUb29sYmFyLFxcbn0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xcbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAndHNkZWYnO1xcblxcbmltcG9ydCB7XFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxuICAgIFN0b3J5Q2F0ZWdvcmllcyxcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMS1GaWxlLUJyb3dzZXItZGVtby5tZCc7XFxuaW1wb3J0IENob25reVNvdXJjZUNvZGVGc01hcCBmcm9tICcuL2Nob25reV9zb3VyY2UuZnNfbWFwLmpzb24nO1xcblxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkRlbW9zO1xcbmNvbnN0IHRpdGxlID0gJ0ZpbGUgQnJvd3NlciBkZW1vJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgRmlsZUJyb3dzZXJEZW1vOiBSZWFjdC5GQyA9ICgpID0+IHtcXG4gICAgY29uc3QgW2N1cnJlbnRGb2xkZXJJZCwgc2V0Q3VycmVudEZvbGRlcklkXSA9IHVzZVN0YXRlKHJvb3REZW1vRm9sZGVyLmlkKTtcXG5cXG4gICAgY29uc3QgZmlsZXMgPSB1c2VGaWxlcyhjdXJyZW50Rm9sZGVySWQpO1xcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IHVzZUZvbGRlckNoYWluKGN1cnJlbnRGb2xkZXJJZCk7XFxuXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSB1c2VDYWxsYmFjazxGaWxlQWN0aW9uSGFuZGxlcj4oXFxuICAgICAgICAoYWN0aW9uLCBhY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICAgICAgaWYgKGFjdGlvbi5pZCA9PT0gQ2hvbmt5QWN0aW9ucy5PcGVuRmlsZXMuaWQpIHtcXG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldEZpbGU6IE51bGxhYmxlPEZpbGVEYXRhPiA9IG51bGw7XFxuICAgICAgICAgICAgICAgIGlmIChhY3Rpb25EYXRhLnRhcmdldCkge1xcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RmlsZSA9IGFjdGlvbkRhdGEudGFyZ2V0O1xcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbkRhdGEuZmlsZXMgJiYgYWN0aW9uRGF0YS5maWxlcy5sZW5ndGggPT09IDEpIHtcXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEZpbGUgPSBhY3Rpb25EYXRhLmZpbGVzWzBdO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRGaWxlICYmIEZpbGVIZWxwZXIuaXNEaXJlY3RvcnkodGFyZ2V0RmlsZSkpIHtcXG4gICAgICAgICAgICAgICAgICAgIHNldEN1cnJlbnRGb2xkZXJJZCh0YXJnZXRGaWxlLmlkKTtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhOiBhY3Rpb25EYXRhIH0pO1xcbiAgICAgICAgfSxcXG4gICAgICAgIFtzZXRDdXJyZW50Rm9sZGVySWRdXFxuICAgICk7XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNjAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cXG5jb25zdCByb290RGVtb0ZvbGRlciA9IHtcXG4gICAgaWQ6ICdxd2VydHkxMjM0NTYnLFxcbiAgICBuYW1lOiAnQ2hvbmt5IERlbW8nLFxcbiAgICBpc0RpcjogdHJ1ZSxcXG4gICAgY2hpbGRyZW5JZHM6IFtDaG9ua3lTb3VyY2VDb2RlRnNNYXAucm9vdEZvbGRlcklkXSxcXG59O1xcbmNvbnN0IGRlbW9GaWxlTWFwID0ge1xcbiAgICBbcm9vdERlbW9Gb2xkZXIuaWRdOiByb290RGVtb0ZvbGRlcixcXG4gICAgLi4uQ2hvbmt5U291cmNlQ29kZUZzTWFwLmZpbGVNYXAsXFxufTtcXG5kZW1vRmlsZU1hcFtDaG9ua3lTb3VyY2VDb2RlRnNNYXAucm9vdEZvbGRlcklkXS5wYXJlbnRJZCA9IHJvb3REZW1vRm9sZGVyLmlkO1xcblxcbmNvbnN0IHVzZUZpbGVzID0gKGN1cnJlbnRGb2xkZXJJZDogc3RyaW5nKTogRmlsZUFycmF5ID0+IHtcXG4gICAgcmV0dXJuIHVzZU1lbW8oKCkgPT4ge1xcbiAgICAgICAgY29uc3QgY3VycmVudEZvbGRlciA9IGRlbW9GaWxlTWFwW2N1cnJlbnRGb2xkZXJJZF07XFxuICAgICAgICBjb25zdCBmaWxlcyA9ICFjdXJyZW50Rm9sZGVyLmNoaWxkcmVuSWRzXFxuICAgICAgICAgICAgPyBbXVxcbiAgICAgICAgICAgIDogY3VycmVudEZvbGRlci5jaGlsZHJlbklkcy5tYXAoKGZpbGVJZCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBkZW1vRmlsZU1hcFtmaWxlSWRdO1xcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlID8gZmlsZSA6IG51bGw7XFxuICAgICAgICAgICAgICB9KTtcXG4gICAgICAgIHJldHVybiBmaWxlcztcXG4gICAgfSwgW2N1cnJlbnRGb2xkZXJJZF0pO1xcbn07XFxuXFxuY29uc3QgdXNlRm9sZGVyQ2hhaW4gPSAoY3VycmVudEZvbGRlcklkOiBzdHJpbmcpOiBGaWxlQXJyYXkgPT4ge1xcbiAgICByZXR1cm4gdXNlTWVtbygoKSA9PiB7XFxuICAgICAgICBjb25zdCBjdXJyZW50Rm9sZGVyID0gZGVtb0ZpbGVNYXBbY3VycmVudEZvbGRlcklkXTtcXG5cXG4gICAgICAgIGNvbnN0IGZvbGRlckNoYWluID0gW2N1cnJlbnRGb2xkZXJdO1xcblxcbiAgICAgICAgbGV0IHBhcmVudElkID0gY3VycmVudEZvbGRlci5wYXJlbnRJZDtcXG4gICAgICAgIHdoaWxlIChwYXJlbnRJZCkge1xcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudEZpbGUgPSBkZW1vRmlsZU1hcFtwYXJlbnRJZF07XFxuICAgICAgICAgICAgaWYgKHBhcmVudEZpbGUpIHtcXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW4udW5zaGlmdChwYXJlbnRGaWxlKTtcXG4gICAgICAgICAgICAgICAgcGFyZW50SWQgPSBwYXJlbnRGaWxlLnBhcmVudElkO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHBhcmVudElkID0gbnVsbDtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuXFxuICAgICAgICByZXR1cm4gZm9sZGVyQ2hhaW47XFxuICAgIH0sIFtjdXJyZW50Rm9sZGVySWRdKTtcXG59O1xcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiZmlsZS1icm93c2VyLWRlbW9cIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjQxLFwibGluZVwiOjM4fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6Nzl9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6NDEsXCJsaW5lXCI6Mzh9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6Nzl9fX07XG4gICAgXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XG5cbmltcG9ydCB7XG4gICAgQ2hvbmt5QWN0aW9ucyxcbiAgICBGaWxlQWN0aW9uSGFuZGxlcixcbiAgICBGaWxlQXJyYXksXG4gICAgRmlsZUJyb3dzZXIsXG4gICAgRmlsZURhdGEsXG4gICAgRmlsZUhlbHBlcixcbiAgICBGaWxlTGlzdCxcbiAgICBGaWxlU2VhcmNoLFxuICAgIEZpbGVUb29sYmFyLFxufSBmcm9tICdjaG9ua3knO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAndHNkZWYnO1xuXG5pbXBvcnQge1xuICAgIGNyZWF0ZURvY3NPYmplY3QsXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcbiAgICBTdG9yeUNhdGVnb3JpZXMsXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xuLy8gQHRzLWlnbm9yZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMS1GaWxlLUJyb3dzZXItZGVtby5tZCc7XG5pbXBvcnQgQ2hvbmt5U291cmNlQ29kZUZzTWFwIGZyb20gJy4vY2hvbmt5X3NvdXJjZS5mc19tYXAuanNvbic7XG5cbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkRlbW9zO1xuY29uc3QgdGl0bGUgPSAnRmlsZSBCcm93c2VyIGRlbW8nO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWRlZmF1bHQtZXhwb3J0XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXG4gICAgcGFyYW1ldGVyczoge1wic3RvcnlTb3VyY2VcIjp7XCJzb3VyY2VcIjpcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIENob25reUFjdGlvbnMsXFxcXG4gICAgRmlsZUFjdGlvbkhhbmRsZXIsXFxcXG4gICAgRmlsZUFycmF5LFxcXFxuICAgIEZpbGVCcm93c2VyLFxcXFxuICAgIEZpbGVEYXRhLFxcXFxuICAgIEZpbGVIZWxwZXIsXFxcXG4gICAgRmlsZUxpc3QsXFxcXG4gICAgRmlsZVNlYXJjaCxcXFxcbiAgICBGaWxlVG9vbGJhcixcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XFxcXG5pbXBvcnQgeyBOdWxsYWJsZSB9IGZyb20gJ3RzZGVmJztcXFxcblxcXFxuaW1wb3J0IHtcXFxcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxcXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxcXG4gICAgU3RvcnlDYXRlZ29yaWVzLFxcXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtRmlsZS1Ccm93c2VyLWRlbW8ubWQnO1xcXFxuaW1wb3J0IENob25reVNvdXJjZUNvZGVGc01hcCBmcm9tICcuL2Nob25reV9zb3VyY2UuZnNfbWFwLmpzb24nO1xcXFxuXFxcXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5EZW1vcztcXFxcbmNvbnN0IHRpdGxlID0gJ0ZpbGUgQnJvd3NlciBkZW1vJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBGaWxlQnJvd3NlckRlbW86IFJlYWN0LkZDID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IFtjdXJyZW50Rm9sZGVySWQsIHNldEN1cnJlbnRGb2xkZXJJZF0gPSB1c2VTdGF0ZShyb290RGVtb0ZvbGRlci5pZCk7XFxcXG5cXFxcbiAgICBjb25zdCBmaWxlcyA9IHVzZUZpbGVzKGN1cnJlbnRGb2xkZXJJZCk7XFxcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSB1c2VGb2xkZXJDaGFpbihjdXJyZW50Rm9sZGVySWQpO1xcXFxuXFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IHVzZUNhbGxiYWNrPEZpbGVBY3Rpb25IYW5kbGVyPihcXFxcbiAgICAgICAgKGFjdGlvbiwgYWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICAgICAgaWYgKGFjdGlvbi5pZCA9PT0gQ2hvbmt5QWN0aW9ucy5PcGVuRmlsZXMuaWQpIHtcXFxcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0RmlsZTogTnVsbGFibGU8RmlsZURhdGE+ID0gbnVsbDtcXFxcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uRGF0YS50YXJnZXQpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RmlsZSA9IGFjdGlvbkRhdGEudGFyZ2V0O1xcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uRGF0YS5maWxlcyAmJiBhY3Rpb25EYXRhLmZpbGVzLmxlbmd0aCA9PT0gMSkge1xcXFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRGaWxlID0gYWN0aW9uRGF0YS5maWxlc1swXTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG5cXFxcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0RmlsZSAmJiBGaWxlSGVscGVyLmlzRGlyZWN0b3J5KHRhcmdldEZpbGUpKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHNldEN1cnJlbnRGb2xkZXJJZCh0YXJnZXRGaWxlLmlkKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH1cXFxcblxcXFxuICAgICAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YTogYWN0aW9uRGF0YSB9KTtcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAgW3NldEN1cnJlbnRGb2xkZXJJZF1cXFxcbiAgICApO1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDYwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXFxuY29uc3Qgcm9vdERlbW9Gb2xkZXIgPSB7XFxcXG4gICAgaWQ6ICdxd2VydHkxMjM0NTYnLFxcXFxuICAgIG5hbWU6ICdDaG9ua3kgRGVtbycsXFxcXG4gICAgaXNEaXI6IHRydWUsXFxcXG4gICAgY2hpbGRyZW5JZHM6IFtDaG9ua3lTb3VyY2VDb2RlRnNNYXAucm9vdEZvbGRlcklkXSxcXFxcbn07XFxcXG5jb25zdCBkZW1vRmlsZU1hcCA9IHtcXFxcbiAgICBbcm9vdERlbW9Gb2xkZXIuaWRdOiByb290RGVtb0ZvbGRlcixcXFxcbiAgICAuLi5DaG9ua3lTb3VyY2VDb2RlRnNNYXAuZmlsZU1hcCxcXFxcbn07XFxcXG5kZW1vRmlsZU1hcFtDaG9ua3lTb3VyY2VDb2RlRnNNYXAucm9vdEZvbGRlcklkXS5wYXJlbnRJZCA9IHJvb3REZW1vRm9sZGVyLmlkO1xcXFxuXFxcXG5jb25zdCB1c2VGaWxlcyA9IChjdXJyZW50Rm9sZGVySWQ6IHN0cmluZyk6IEZpbGVBcnJheSA9PiB7XFxcXG4gICAgcmV0dXJuIHVzZU1lbW8oKCkgPT4ge1xcXFxuICAgICAgICBjb25zdCBjdXJyZW50Rm9sZGVyID0gZGVtb0ZpbGVNYXBbY3VycmVudEZvbGRlcklkXTtcXFxcbiAgICAgICAgY29uc3QgZmlsZXMgPSAhY3VycmVudEZvbGRlci5jaGlsZHJlbklkc1xcXFxuICAgICAgICAgICAgPyBbXVxcXFxuICAgICAgICAgICAgOiBjdXJyZW50Rm9sZGVyLmNoaWxkcmVuSWRzLm1hcCgoZmlsZUlkKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICBjb25zdCBmaWxlID0gZGVtb0ZpbGVNYXBbZmlsZUlkXTtcXFxcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlID8gZmlsZSA6IG51bGw7XFxcXG4gICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICByZXR1cm4gZmlsZXM7XFxcXG4gICAgfSwgW2N1cnJlbnRGb2xkZXJJZF0pO1xcXFxufTtcXFxcblxcXFxuY29uc3QgdXNlRm9sZGVyQ2hhaW4gPSAoY3VycmVudEZvbGRlcklkOiBzdHJpbmcpOiBGaWxlQXJyYXkgPT4ge1xcXFxuICAgIHJldHVybiB1c2VNZW1vKCgpID0+IHtcXFxcbiAgICAgICAgY29uc3QgY3VycmVudEZvbGRlciA9IGRlbW9GaWxlTWFwW2N1cnJlbnRGb2xkZXJJZF07XFxcXG5cXFxcbiAgICAgICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbY3VycmVudEZvbGRlcl07XFxcXG5cXFxcbiAgICAgICAgbGV0IHBhcmVudElkID0gY3VycmVudEZvbGRlci5wYXJlbnRJZDtcXFxcbiAgICAgICAgd2hpbGUgKHBhcmVudElkKSB7XFxcXG4gICAgICAgICAgICBjb25zdCBwYXJlbnRGaWxlID0gZGVtb0ZpbGVNYXBbcGFyZW50SWRdO1xcXFxuICAgICAgICAgICAgaWYgKHBhcmVudEZpbGUpIHtcXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbi51bnNoaWZ0KHBhcmVudEZpbGUpO1xcXFxuICAgICAgICAgICAgICAgIHBhcmVudElkID0gcGFyZW50RmlsZS5wYXJlbnRJZDtcXFxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgcGFyZW50SWQgPSBudWxsO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9XFxcXG5cXFxcbiAgICAgICAgcmV0dXJuIGZvbGRlckNoYWluO1xcXFxuICAgIH0sIFtjdXJyZW50Rm9sZGVySWRdKTtcXFxcbn07XFxcXG5cXFwiO1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XFxcImZpbGUtYnJvd3Nlci1kZW1vXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6NDEsXFxcImxpbmVcXFwiOjM4fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6Nzl9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjo0MSxcXFwibGluZVxcXCI6Mzh9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6Nzl9fX07XFxuICAgIFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQge1xcbiAgICBDaG9ua3lBY3Rpb25zLFxcbiAgICBGaWxlQWN0aW9uSGFuZGxlcixcXG4gICAgRmlsZUFycmF5LFxcbiAgICBGaWxlQnJvd3NlcixcXG4gICAgRmlsZURhdGEsXFxuICAgIEZpbGVIZWxwZXIsXFxuICAgIEZpbGVMaXN0LFxcbiAgICBGaWxlU2VhcmNoLFxcbiAgICBGaWxlVG9vbGJhcixcXG59IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcXG5pbXBvcnQgeyBOdWxsYWJsZSB9IGZyb20gJ3RzZGVmJztcXG5cXG5pbXBvcnQge1xcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcbiAgICBTdG9yeUNhdGVnb3JpZXMsXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtRmlsZS1Ccm93c2VyLWRlbW8ubWQnO1xcbmltcG9ydCBDaG9ua3lTb3VyY2VDb2RlRnNNYXAgZnJvbSAnLi9jaG9ua3lfc291cmNlLmZzX21hcC5qc29uJztcXG5cXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5EZW1vcztcXG5jb25zdCB0aXRsZSA9ICdGaWxlIEJyb3dzZXIgZGVtbyc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXG4gICAgcGFyYW1ldGVyczoge1xcXCJzdG9yeVNvdXJjZVxcXCI6e1xcXCJzb3VyY2VcXFwiOlxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgQ2hvbmt5QWN0aW9ucyxcXFxcbiAgICBGaWxlQWN0aW9uSGFuZGxlcixcXFxcbiAgICBGaWxlQXJyYXksXFxcXG4gICAgRmlsZUJyb3dzZXIsXFxcXG4gICAgRmlsZURhdGEsXFxcXG4gICAgRmlsZUhlbHBlcixcXFxcbiAgICBGaWxlTGlzdCxcXFxcbiAgICBGaWxlU2VhcmNoLFxcXFxuICAgIEZpbGVUb29sYmFyLFxcXFxufSBmcm9tICdjaG9ua3knO1xcXFxuaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcXFxcbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAndHNkZWYnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXFxcbiAgICBTdG9yeUNhdGVnb3JpZXMsXFxcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMS1GaWxlLUJyb3dzZXItZGVtby5tZCc7XFxcXG5pbXBvcnQgQ2hvbmt5U291cmNlQ29kZUZzTWFwIGZyb20gJy4vY2hvbmt5X3NvdXJjZS5mc19tYXAuanNvbic7XFxcXG5cXFxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkRlbW9zO1xcXFxuY29uc3QgdGl0bGUgPSAnRmlsZSBCcm93c2VyIGRlbW8nO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEZpbGVCcm93c2VyRGVtbzogUmVhY3QuRkMgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgW2N1cnJlbnRGb2xkZXJJZCwgc2V0Q3VycmVudEZvbGRlcklkXSA9IHVzZVN0YXRlKHJvb3REZW1vRm9sZGVyLmlkKTtcXFxcblxcXFxuICAgIGNvbnN0IGZpbGVzID0gdXNlRmlsZXMoY3VycmVudEZvbGRlcklkKTtcXFxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IHVzZUZvbGRlckNoYWluKGN1cnJlbnRGb2xkZXJJZCk7XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gdXNlQ2FsbGJhY2s8RmlsZUFjdGlvbkhhbmRsZXI+KFxcXFxuICAgICAgICAoYWN0aW9uLCBhY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgICAgICBpZiAoYWN0aW9uLmlkID09PSBDaG9ua3lBY3Rpb25zLk9wZW5GaWxlcy5pZCkge1xcXFxuICAgICAgICAgICAgICAgIGxldCB0YXJnZXRGaWxlOiBOdWxsYWJsZTxGaWxlRGF0YT4gPSBudWxsO1xcXFxuICAgICAgICAgICAgICAgIGlmIChhY3Rpb25EYXRhLnRhcmdldCkge1xcXFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRGaWxlID0gYWN0aW9uRGF0YS50YXJnZXQ7XFxcXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb25EYXRhLmZpbGVzICYmIGFjdGlvbkRhdGEuZmlsZXMubGVuZ3RoID09PSAxKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEZpbGUgPSBhY3Rpb25EYXRhLmZpbGVzWzBdO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcblxcXFxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRGaWxlICYmIEZpbGVIZWxwZXIuaXNEaXJlY3RvcnkodGFyZ2V0RmlsZSkpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgc2V0Q3VycmVudEZvbGRlcklkKHRhcmdldEZpbGUuaWQpO1xcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfVxcXFxuXFxcXG4gICAgICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhOiBhY3Rpb25EYXRhIH0pO1xcXFxuICAgICAgICB9LFxcXFxuICAgICAgICBbc2V0Q3VycmVudEZvbGRlcklkXVxcXFxuICAgICk7XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNjAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcXG5jb25zdCByb290RGVtb0ZvbGRlciA9IHtcXFxcbiAgICBpZDogJ3F3ZXJ0eTEyMzQ1NicsXFxcXG4gICAgbmFtZTogJ0Nob25reSBEZW1vJyxcXFxcbiAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICBjaGlsZHJlbklkczogW0Nob25reVNvdXJjZUNvZGVGc01hcC5yb290Rm9sZGVySWRdLFxcXFxufTtcXFxcbmNvbnN0IGRlbW9GaWxlTWFwID0ge1xcXFxuICAgIFtyb290RGVtb0ZvbGRlci5pZF06IHJvb3REZW1vRm9sZGVyLFxcXFxuICAgIC4uLkNob25reVNvdXJjZUNvZGVGc01hcC5maWxlTWFwLFxcXFxufTtcXFxcbmRlbW9GaWxlTWFwW0Nob25reVNvdXJjZUNvZGVGc01hcC5yb290Rm9sZGVySWRdLnBhcmVudElkID0gcm9vdERlbW9Gb2xkZXIuaWQ7XFxcXG5cXFxcbmNvbnN0IHVzZUZpbGVzID0gKGN1cnJlbnRGb2xkZXJJZDogc3RyaW5nKTogRmlsZUFycmF5ID0+IHtcXFxcbiAgICByZXR1cm4gdXNlTWVtbygoKSA9PiB7XFxcXG4gICAgICAgIGNvbnN0IGN1cnJlbnRGb2xkZXIgPSBkZW1vRmlsZU1hcFtjdXJyZW50Rm9sZGVySWRdO1xcXFxuICAgICAgICBjb25zdCBmaWxlcyA9ICFjdXJyZW50Rm9sZGVyLmNoaWxkcmVuSWRzXFxcXG4gICAgICAgICAgICA/IFtdXFxcXG4gICAgICAgICAgICA6IGN1cnJlbnRGb2xkZXIuY2hpbGRyZW5JZHMubWFwKChmaWxlSWQpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBkZW1vRmlsZU1hcFtmaWxlSWRdO1xcXFxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbGUgPyBmaWxlIDogbnVsbDtcXFxcbiAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgIHJldHVybiBmaWxlcztcXFxcbiAgICB9LCBbY3VycmVudEZvbGRlcklkXSk7XFxcXG59O1xcXFxuXFxcXG5jb25zdCB1c2VGb2xkZXJDaGFpbiA9IChjdXJyZW50Rm9sZGVySWQ6IHN0cmluZyk6IEZpbGVBcnJheSA9PiB7XFxcXG4gICAgcmV0dXJuIHVzZU1lbW8oKCkgPT4ge1xcXFxuICAgICAgICBjb25zdCBjdXJyZW50Rm9sZGVyID0gZGVtb0ZpbGVNYXBbY3VycmVudEZvbGRlcklkXTtcXFxcblxcXFxuICAgICAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFtjdXJyZW50Rm9sZGVyXTtcXFxcblxcXFxuICAgICAgICBsZXQgcGFyZW50SWQgPSBjdXJyZW50Rm9sZGVyLnBhcmVudElkO1xcXFxuICAgICAgICB3aGlsZSAocGFyZW50SWQpIHtcXFxcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudEZpbGUgPSBkZW1vRmlsZU1hcFtwYXJlbnRJZF07XFxcXG4gICAgICAgICAgICBpZiAocGFyZW50RmlsZSkge1xcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluLnVuc2hpZnQocGFyZW50RmlsZSk7XFxcXG4gICAgICAgICAgICAgICAgcGFyZW50SWQgPSBwYXJlbnRGaWxlLnBhcmVudElkO1xcXFxuICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICBwYXJlbnRJZCA9IG51bGw7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH1cXFxcblxcXFxuICAgICAgICByZXR1cm4gZm9sZGVyQ2hhaW47XFxcXG4gICAgfSwgW2N1cnJlbnRGb2xkZXJJZF0pO1xcXFxufTtcXFxcblxcXCIsXFxcImxvY2F0aW9uc01hcFxcXCI6e1xcXCJmaWxlLWJyb3dzZXItZGVtb1xcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjQxLFxcXCJsaW5lXFxcIjozOH0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjc5fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6NDEsXFxcImxpbmVcXFwiOjM4fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjc5fX19fSxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBGaWxlQnJvd3NlckRlbW86IFJlYWN0LkZDID0gKCkgPT4ge1xcbiAgICBjb25zdCBbY3VycmVudEZvbGRlcklkLCBzZXRDdXJyZW50Rm9sZGVySWRdID0gdXNlU3RhdGUocm9vdERlbW9Gb2xkZXIuaWQpO1xcblxcbiAgICBjb25zdCBmaWxlcyA9IHVzZUZpbGVzKGN1cnJlbnRGb2xkZXJJZCk7XFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gdXNlRm9sZGVyQ2hhaW4oY3VycmVudEZvbGRlcklkKTtcXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IHVzZUNhbGxiYWNrPEZpbGVBY3Rpb25IYW5kbGVyPihcXG4gICAgICAgIChhY3Rpb24sIGFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgICAgICBpZiAoYWN0aW9uLmlkID09PSBDaG9ua3lBY3Rpb25zLk9wZW5GaWxlcy5pZCkge1xcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0RmlsZTogTnVsbGFibGU8RmlsZURhdGE+ID0gbnVsbDtcXG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbkRhdGEudGFyZ2V0KSB7XFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRGaWxlID0gYWN0aW9uRGF0YS50YXJnZXQ7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uRGF0YS5maWxlcyAmJiBhY3Rpb25EYXRhLmZpbGVzLmxlbmd0aCA9PT0gMSkge1xcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RmlsZSA9IGFjdGlvbkRhdGEuZmlsZXNbMF07XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldEZpbGUgJiYgRmlsZUhlbHBlci5pc0RpcmVjdG9yeSh0YXJnZXRGaWxlKSkge1xcbiAgICAgICAgICAgICAgICAgICAgc2V0Q3VycmVudEZvbGRlcklkKHRhcmdldEZpbGUuaWQpO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGE6IGFjdGlvbkRhdGEgfSk7XFxuICAgICAgICB9LFxcbiAgICAgICAgW3NldEN1cnJlbnRGb2xkZXJJZF1cXG4gICAgKTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA2MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblxcbmNvbnN0IHJvb3REZW1vRm9sZGVyID0ge1xcbiAgICBpZDogJ3F3ZXJ0eTEyMzQ1NicsXFxuICAgIG5hbWU6ICdDaG9ua3kgRGVtbycsXFxuICAgIGlzRGlyOiB0cnVlLFxcbiAgICBjaGlsZHJlbklkczogW0Nob25reVNvdXJjZUNvZGVGc01hcC5yb290Rm9sZGVySWRdLFxcbn07XFxuY29uc3QgZGVtb0ZpbGVNYXAgPSB7XFxuICAgIFtyb290RGVtb0ZvbGRlci5pZF06IHJvb3REZW1vRm9sZGVyLFxcbiAgICAuLi5DaG9ua3lTb3VyY2VDb2RlRnNNYXAuZmlsZU1hcCxcXG59O1xcbmRlbW9GaWxlTWFwW0Nob25reVNvdXJjZUNvZGVGc01hcC5yb290Rm9sZGVySWRdLnBhcmVudElkID0gcm9vdERlbW9Gb2xkZXIuaWQ7XFxuXFxuY29uc3QgdXNlRmlsZXMgPSAoY3VycmVudEZvbGRlcklkOiBzdHJpbmcpOiBGaWxlQXJyYXkgPT4ge1xcbiAgICByZXR1cm4gdXNlTWVtbygoKSA9PiB7XFxuICAgICAgICBjb25zdCBjdXJyZW50Rm9sZGVyID0gZGVtb0ZpbGVNYXBbY3VycmVudEZvbGRlcklkXTtcXG4gICAgICAgIGNvbnN0IGZpbGVzID0gIWN1cnJlbnRGb2xkZXIuY2hpbGRyZW5JZHNcXG4gICAgICAgICAgICA/IFtdXFxuICAgICAgICAgICAgOiBjdXJyZW50Rm9sZGVyLmNoaWxkcmVuSWRzLm1hcCgoZmlsZUlkKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZSA9IGRlbW9GaWxlTWFwW2ZpbGVJZF07XFxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbGUgPyBmaWxlIDogbnVsbDtcXG4gICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgcmV0dXJuIGZpbGVzO1xcbiAgICB9LCBbY3VycmVudEZvbGRlcklkXSk7XFxufTtcXG5cXG5jb25zdCB1c2VGb2xkZXJDaGFpbiA9IChjdXJyZW50Rm9sZGVySWQ6IHN0cmluZyk6IEZpbGVBcnJheSA9PiB7XFxuICAgIHJldHVybiB1c2VNZW1vKCgpID0+IHtcXG4gICAgICAgIGNvbnN0IGN1cnJlbnRGb2xkZXIgPSBkZW1vRmlsZU1hcFtjdXJyZW50Rm9sZGVySWRdO1xcblxcbiAgICAgICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbY3VycmVudEZvbGRlcl07XFxuXFxuICAgICAgICBsZXQgcGFyZW50SWQgPSBjdXJyZW50Rm9sZGVyLnBhcmVudElkO1xcbiAgICAgICAgd2hpbGUgKHBhcmVudElkKSB7XFxuICAgICAgICAgICAgY29uc3QgcGFyZW50RmlsZSA9IGRlbW9GaWxlTWFwW3BhcmVudElkXTtcXG4gICAgICAgICAgICBpZiAocGFyZW50RmlsZSkge1xcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbi51bnNoaWZ0KHBhcmVudEZpbGUpO1xcbiAgICAgICAgICAgICAgICBwYXJlbnRJZCA9IHBhcmVudEZpbGUucGFyZW50SWQ7XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgcGFyZW50SWQgPSBudWxsO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHJldHVybiBmb2xkZXJDaGFpbjtcXG4gICAgfSwgW2N1cnJlbnRGb2xkZXJJZF0pO1xcbn07XFxuXCIsXCJsb2NhdGlvbnNNYXBcIjp7XCJmaWxlLWJyb3dzZXItZGVtb1wiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6NDEsXCJsaW5lXCI6NDZ9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo4N30sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjo0MSxcImxpbmVcIjo0Nn0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo4N319fX0sXCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7XFxuICAgIENob25reUFjdGlvbnMsXFxuICAgIEZpbGVBY3Rpb25IYW5kbGVyLFxcbiAgICBGaWxlQXJyYXksXFxuICAgIEZpbGVCcm93c2VyLFxcbiAgICBGaWxlRGF0YSxcXG4gICAgRmlsZUhlbHBlcixcXG4gICAgRmlsZUxpc3QsXFxuICAgIEZpbGVTZWFyY2gsXFxuICAgIEZpbGVUb29sYmFyLFxcbn0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xcbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAndHNkZWYnO1xcblxcbmltcG9ydCB7XFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxuICAgIFN0b3J5Q2F0ZWdvcmllcyxcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMS1GaWxlLUJyb3dzZXItZGVtby5tZCc7XFxuaW1wb3J0IENob25reVNvdXJjZUNvZGVGc01hcCBmcm9tICcuL2Nob25reV9zb3VyY2UuZnNfbWFwLmpzb24nO1xcblxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkRlbW9zO1xcbmNvbnN0IHRpdGxlID0gJ0ZpbGUgQnJvd3NlciBkZW1vJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgRmlsZUJyb3dzZXJEZW1vOiBSZWFjdC5GQyA9ICgpID0+IHtcXG4gICAgY29uc3QgW2N1cnJlbnRGb2xkZXJJZCwgc2V0Q3VycmVudEZvbGRlcklkXSA9IHVzZVN0YXRlKHJvb3REZW1vRm9sZGVyLmlkKTtcXG5cXG4gICAgY29uc3QgZmlsZXMgPSB1c2VGaWxlcyhjdXJyZW50Rm9sZGVySWQpO1xcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IHVzZUZvbGRlckNoYWluKGN1cnJlbnRGb2xkZXJJZCk7XFxuXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSB1c2VDYWxsYmFjazxGaWxlQWN0aW9uSGFuZGxlcj4oXFxuICAgICAgICAoYWN0aW9uLCBhY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICAgICAgaWYgKGFjdGlvbi5pZCA9PT0gQ2hvbmt5QWN0aW9ucy5PcGVuRmlsZXMuaWQpIHtcXG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldEZpbGU6IE51bGxhYmxlPEZpbGVEYXRhPiA9IG51bGw7XFxuICAgICAgICAgICAgICAgIGlmIChhY3Rpb25EYXRhLnRhcmdldCkge1xcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RmlsZSA9IGFjdGlvbkRhdGEudGFyZ2V0O1xcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbkRhdGEuZmlsZXMgJiYgYWN0aW9uRGF0YS5maWxlcy5sZW5ndGggPT09IDEpIHtcXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEZpbGUgPSBhY3Rpb25EYXRhLmZpbGVzWzBdO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRGaWxlICYmIEZpbGVIZWxwZXIuaXNEaXJlY3RvcnkodGFyZ2V0RmlsZSkpIHtcXG4gICAgICAgICAgICAgICAgICAgIHNldEN1cnJlbnRGb2xkZXJJZCh0YXJnZXRGaWxlLmlkKTtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhOiBhY3Rpb25EYXRhIH0pO1xcbiAgICAgICAgfSxcXG4gICAgICAgIFtzZXRDdXJyZW50Rm9sZGVySWRdXFxuICAgICk7XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNjAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cXG5jb25zdCByb290RGVtb0ZvbGRlciA9IHtcXG4gICAgaWQ6ICdxd2VydHkxMjM0NTYnLFxcbiAgICBuYW1lOiAnQ2hvbmt5IERlbW8nLFxcbiAgICBpc0RpcjogdHJ1ZSxcXG4gICAgY2hpbGRyZW5JZHM6IFtDaG9ua3lTb3VyY2VDb2RlRnNNYXAucm9vdEZvbGRlcklkXSxcXG59O1xcbmNvbnN0IGRlbW9GaWxlTWFwID0ge1xcbiAgICBbcm9vdERlbW9Gb2xkZXIuaWRdOiByb290RGVtb0ZvbGRlcixcXG4gICAgLi4uQ2hvbmt5U291cmNlQ29kZUZzTWFwLmZpbGVNYXAsXFxufTtcXG5kZW1vRmlsZU1hcFtDaG9ua3lTb3VyY2VDb2RlRnNNYXAucm9vdEZvbGRlcklkXS5wYXJlbnRJZCA9IHJvb3REZW1vRm9sZGVyLmlkO1xcblxcbmNvbnN0IHVzZUZpbGVzID0gKGN1cnJlbnRGb2xkZXJJZDogc3RyaW5nKTogRmlsZUFycmF5ID0+IHtcXG4gICAgcmV0dXJuIHVzZU1lbW8oKCkgPT4ge1xcbiAgICAgICAgY29uc3QgY3VycmVudEZvbGRlciA9IGRlbW9GaWxlTWFwW2N1cnJlbnRGb2xkZXJJZF07XFxuICAgICAgICBjb25zdCBmaWxlcyA9ICFjdXJyZW50Rm9sZGVyLmNoaWxkcmVuSWRzXFxuICAgICAgICAgICAgPyBbXVxcbiAgICAgICAgICAgIDogY3VycmVudEZvbGRlci5jaGlsZHJlbklkcy5tYXAoKGZpbGVJZCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBkZW1vRmlsZU1hcFtmaWxlSWRdO1xcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlID8gZmlsZSA6IG51bGw7XFxuICAgICAgICAgICAgICB9KTtcXG4gICAgICAgIHJldHVybiBmaWxlcztcXG4gICAgfSwgW2N1cnJlbnRGb2xkZXJJZF0pO1xcbn07XFxuXFxuY29uc3QgdXNlRm9sZGVyQ2hhaW4gPSAoY3VycmVudEZvbGRlcklkOiBzdHJpbmcpOiBGaWxlQXJyYXkgPT4ge1xcbiAgICByZXR1cm4gdXNlTWVtbygoKSA9PiB7XFxuICAgICAgICBjb25zdCBjdXJyZW50Rm9sZGVyID0gZGVtb0ZpbGVNYXBbY3VycmVudEZvbGRlcklkXTtcXG5cXG4gICAgICAgIGNvbnN0IGZvbGRlckNoYWluID0gW2N1cnJlbnRGb2xkZXJdO1xcblxcbiAgICAgICAgbGV0IHBhcmVudElkID0gY3VycmVudEZvbGRlci5wYXJlbnRJZDtcXG4gICAgICAgIHdoaWxlIChwYXJlbnRJZCkge1xcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudEZpbGUgPSBkZW1vRmlsZU1hcFtwYXJlbnRJZF07XFxuICAgICAgICAgICAgaWYgKHBhcmVudEZpbGUpIHtcXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW4udW5zaGlmdChwYXJlbnRGaWxlKTtcXG4gICAgICAgICAgICAgICAgcGFyZW50SWQgPSBwYXJlbnRGaWxlLnBhcmVudElkO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHBhcmVudElkID0gbnVsbDtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuXFxuICAgICAgICByZXR1cm4gZm9sZGVyQ2hhaW47XFxuICAgIH0sIFtjdXJyZW50Rm9sZGVySWRdKTtcXG59O1xcblwiLFwibG9jYXRpb25zTWFwXCI6e1wiZmlsZS1icm93c2VyLWRlbW9cIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjQxLFwibGluZVwiOjM4fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6Nzl9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6NDEsXCJsaW5lXCI6Mzh9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6Nzl9fX19LFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXG4gICAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBGaWxlQnJvd3NlckRlbW86IFJlYWN0LkZDID0gKCkgPT4ge1xuICAgIGNvbnN0IFtjdXJyZW50Rm9sZGVySWQsIHNldEN1cnJlbnRGb2xkZXJJZF0gPSB1c2VTdGF0ZShyb290RGVtb0ZvbGRlci5pZCk7XG5cbiAgICBjb25zdCBmaWxlcyA9IHVzZUZpbGVzKGN1cnJlbnRGb2xkZXJJZCk7XG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSB1c2VGb2xkZXJDaGFpbihjdXJyZW50Rm9sZGVySWQpO1xuXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IHVzZUNhbGxiYWNrPEZpbGVBY3Rpb25IYW5kbGVyPihcbiAgICAgICAgKGFjdGlvbiwgYWN0aW9uRGF0YSkgPT4ge1xuICAgICAgICAgICAgaWYgKGFjdGlvbi5pZCA9PT0gQ2hvbmt5QWN0aW9ucy5PcGVuRmlsZXMuaWQpIHtcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0RmlsZTogTnVsbGFibGU8RmlsZURhdGE+ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uRGF0YS50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RmlsZSA9IGFjdGlvbkRhdGEudGFyZ2V0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uRGF0YS5maWxlcyAmJiBhY3Rpb25EYXRhLmZpbGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRGaWxlID0gYWN0aW9uRGF0YS5maWxlc1swXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0RmlsZSAmJiBGaWxlSGVscGVyLmlzRGlyZWN0b3J5KHRhcmdldEZpbGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldEN1cnJlbnRGb2xkZXJJZCh0YXJnZXRGaWxlLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YTogYWN0aW9uRGF0YSB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgW3NldEN1cnJlbnRGb2xkZXJJZF1cbiAgICApO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDYwMCB9fT5cbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuY29uc3Qgcm9vdERlbW9Gb2xkZXIgPSB7XG4gICAgaWQ6ICdxd2VydHkxMjM0NTYnLFxuICAgIG5hbWU6ICdDaG9ua3kgRGVtbycsXG4gICAgaXNEaXI6IHRydWUsXG4gICAgY2hpbGRyZW5JZHM6IFtDaG9ua3lTb3VyY2VDb2RlRnNNYXAucm9vdEZvbGRlcklkXSxcbn07XG5jb25zdCBkZW1vRmlsZU1hcCA9IHtcbiAgICBbcm9vdERlbW9Gb2xkZXIuaWRdOiByb290RGVtb0ZvbGRlcixcbiAgICAuLi5DaG9ua3lTb3VyY2VDb2RlRnNNYXAuZmlsZU1hcCxcbn07XG5kZW1vRmlsZU1hcFtDaG9ua3lTb3VyY2VDb2RlRnNNYXAucm9vdEZvbGRlcklkXS5wYXJlbnRJZCA9IHJvb3REZW1vRm9sZGVyLmlkO1xuXG5jb25zdCB1c2VGaWxlcyA9IChjdXJyZW50Rm9sZGVySWQ6IHN0cmluZyk6IEZpbGVBcnJheSA9PiB7XG4gICAgcmV0dXJuIHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50Rm9sZGVyID0gZGVtb0ZpbGVNYXBbY3VycmVudEZvbGRlcklkXTtcbiAgICAgICAgY29uc3QgZmlsZXMgPSAhY3VycmVudEZvbGRlci5jaGlsZHJlbklkc1xuICAgICAgICAgICAgPyBbXVxuICAgICAgICAgICAgOiBjdXJyZW50Rm9sZGVyLmNoaWxkcmVuSWRzLm1hcCgoZmlsZUlkKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBmaWxlID0gZGVtb0ZpbGVNYXBbZmlsZUlkXTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlID8gZmlsZSA6IG51bGw7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmlsZXM7XG4gICAgfSwgW2N1cnJlbnRGb2xkZXJJZF0pO1xufTtcblxuY29uc3QgdXNlRm9sZGVyQ2hhaW4gPSAoY3VycmVudEZvbGRlcklkOiBzdHJpbmcpOiBGaWxlQXJyYXkgPT4ge1xuICAgIHJldHVybiB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudEZvbGRlciA9IGRlbW9GaWxlTWFwW2N1cnJlbnRGb2xkZXJJZF07XG5cbiAgICAgICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbY3VycmVudEZvbGRlcl07XG5cbiAgICAgICAgbGV0IHBhcmVudElkID0gY3VycmVudEZvbGRlci5wYXJlbnRJZDtcbiAgICAgICAgd2hpbGUgKHBhcmVudElkKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnRGaWxlID0gZGVtb0ZpbGVNYXBbcGFyZW50SWRdO1xuICAgICAgICAgICAgaWYgKHBhcmVudEZpbGUpIHtcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbi51bnNoaWZ0KHBhcmVudEZpbGUpO1xuICAgICAgICAgICAgICAgIHBhcmVudElkID0gcGFyZW50RmlsZS5wYXJlbnRJZDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyZW50SWQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZvbGRlckNoYWluO1xuICAgIH0sIFtjdXJyZW50Rm9sZGVySWRdKTtcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBcIkNoZWNrIG91dCB0aGUgZGVtbyBiZWxvdyB0byBzZWUgd2hhdCBDaG9ua3kgY2FuIGRvLiBUaGluZ3MgdG8gdHJ5Olxcblxcbi0gICBUcnkgb3BlbmluZyBmaWxlcyBhbmQgZW50ZXJpbmcgZm9sZGVycy5cXG4tICAgVHJ5IGtleWJvYXJkIG5hdmlnYXRpb24gLSB1c2UgYFRhYmAsIGBTcGFjZWAgYW5kIGBFbnRlcmAga2V5cy5cXG4tICAgVHJ5IHNlbGVjdGluZyBmaWxlcyBieSBjbGlja2luZyBvbiB0aGVtIG9yIHByZXNzaW5nIGBDdHJsK0FgLlxcbi0gICBUcnkgZHJhZ2dpbmcgJiBkcm9wcGluZyBmaWxlcy5cXG5cXG5Zb3UgY2FuIGZpbmQgdGhlIGZ1bGwgc291cmNlIGNvZGUgb2YgdGhlIGRlbW8gYmVsb3dcXG5bb24gR2l0SHViXShodHRwczovL2dpdGh1Yi5jb20vVGltYm9LWi9DaG9ua3kvYmxvYi8xLngvc3Rvcmllcy8wMi1EZW1vcy8wMS1GaWxlLUJyb3dzZXItZGVtby5zdG9yaWVzLnRzeClcXG4uXFxuXCI7IiwiXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0IHtcXFxcbiAgICBGaWxlQWN0aW9uLFxcXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcXFxuICAgIEZpbGVCcm93c2VyLFxcXFxuICAgIEZpbGVMaXN0LFxcXFxuICAgIEZpbGVTZWFyY2gsXFxcXG4gICAgRmlsZVRvb2xiYXIsXFxcXG59IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXFxcbiAgICBTdG9yeUNhdGVnb3JpZXMsXFxcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMS1Db21wb25lbnQtaGllcmFyY2h5Lm1kJztcXFxcblxcXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxcXG5jb25zdCB0aXRsZSA9ICdDb21wb25lbnQgaGllcmFyY2h5JztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBDb21wb25lbnRIaWVyYXJjaHlFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICd4QVN3JywgbmFtZTogJ0Nob25reSBEZW1vIEZvbGRlcicsIGlzRGlyOiB0cnVlIH1dO1xcXFxuICAgIGNvbnN0IGZpbGVzID0gW3sgaWQ6ICdiRWZYJywgbmFtZTogJ0RlbW8udHMnIH1dO1xcXFxuXFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiO1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XFxcImNvbXBvbmVudC1oaWVyYXJjaHktZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjQxLFxcXCJsaW5lXFxcIjozMn0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjU0fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6NDEsXFxcImxpbmVcXFwiOjMyfSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjU0fX19O1xcbiAgICBcXG5pbXBvcnQge1xcbiAgICBGaWxlQWN0aW9uLFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXG4gICAgRmlsZUJyb3dzZXIsXFxuICAgIEZpbGVMaXN0LFxcbiAgICBGaWxlU2VhcmNoLFxcbiAgICBGaWxlVG9vbGJhcixcXG59IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHtcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXG4gICAgU3RvcnlDYXRlZ29yaWVzLFxcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAxLUNvbXBvbmVudC1oaWVyYXJjaHkubWQnO1xcblxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyQmFzaWNzO1xcbmNvbnN0IHRpdGxlID0gJ0NvbXBvbmVudCBoaWVyYXJjaHknO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxuICAgIHBhcmFtZXRlcnM6IHtcXFwic3RvcnlTb3VyY2VcXFwiOntcXFwic291cmNlXFxcIjpcXFwiaW1wb3J0IHtcXFxcbiAgICBGaWxlQWN0aW9uLFxcXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcXFxuICAgIEZpbGVCcm93c2VyLFxcXFxuICAgIEZpbGVMaXN0LFxcXFxuICAgIEZpbGVTZWFyY2gsXFxcXG4gICAgRmlsZVRvb2xiYXIsXFxcXG59IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXFxcbiAgICBTdG9yeUNhdGVnb3JpZXMsXFxcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMS1Db21wb25lbnQtaGllcmFyY2h5Lm1kJztcXFxcblxcXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxcXG5jb25zdCB0aXRsZSA9ICdDb21wb25lbnQgaGllcmFyY2h5JztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBDb21wb25lbnRIaWVyYXJjaHlFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICd4QVN3JywgbmFtZTogJ0Nob25reSBEZW1vIEZvbGRlcicsIGlzRGlyOiB0cnVlIH1dO1xcXFxuICAgIGNvbnN0IGZpbGVzID0gW3sgaWQ6ICdiRWZYJywgbmFtZTogJ0RlbW8udHMnIH1dO1xcXFxuXFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiLFxcXCJsb2NhdGlvbnNNYXBcXFwiOntcXFwiY29tcG9uZW50LWhpZXJhcmNoeS1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6NDEsXFxcImxpbmVcXFwiOjMyfSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NTR9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjo0MSxcXFwibGluZVxcXCI6MzJ9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NTR9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IENvbXBvbmVudEhpZXJhcmNoeUV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICd4QVN3JywgbmFtZTogJ0Nob25reSBEZW1vIEZvbGRlcicsIGlzRGlyOiB0cnVlIH1dO1xcbiAgICBjb25zdCBmaWxlcyA9IFt7IGlkOiAnYkVmWCcsIG5hbWU6ICdEZW1vLnRzJyB9XTtcXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCI7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCJjb21wb25lbnQtaGllcmFyY2h5LWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjQxLFwibGluZVwiOjQwfSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6NjJ9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6NDEsXCJsaW5lXCI6NDB9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6NjJ9fX07XG4gICAgXG5cbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAvLyBAdHMtbm9jaGVja1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0IHtcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVCcm93c2VyLFxcbiAgICBGaWxlTGlzdCxcXG4gICAgRmlsZVNlYXJjaCxcXG4gICAgRmlsZVRvb2xiYXIsXFxufSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7XFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxuICAgIFN0b3J5Q2F0ZWdvcmllcyxcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMS1Db21wb25lbnQtaGllcmFyY2h5Lm1kJztcXG5cXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5GaWxlQnJvd3NlckJhc2ljcztcXG5jb25zdCB0aXRsZSA9ICdDb21wb25lbnQgaGllcmFyY2h5JztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgQ29tcG9uZW50SGllcmFyY2h5RXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ3hBU3cnLCBuYW1lOiAnQ2hvbmt5IERlbW8gRm9sZGVyJywgaXNEaXI6IHRydWUgfV07XFxuICAgIGNvbnN0IGZpbGVzID0gW3sgaWQ6ICdiRWZYJywgbmFtZTogJ0RlbW8udHMnIH1dO1xcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIjtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcImNvbXBvbmVudC1oaWVyYXJjaHktZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6NDEsXCJsaW5lXCI6MzJ9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo1NH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjo0MSxcImxpbmVcIjozMn0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo1NH19fTtcbiAgICBcbmltcG9ydCB7XG4gICAgRmlsZUFjdGlvbixcbiAgICBGaWxlQWN0aW9uRGF0YSxcbiAgICBGaWxlQnJvd3NlcixcbiAgICBGaWxlTGlzdCxcbiAgICBGaWxlU2VhcmNoLFxuICAgIEZpbGVUb29sYmFyLFxufSBmcm9tICdjaG9ua3knO1xuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHtcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXG4gICAgU3RvcnlDYXRlZ29yaWVzLFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcbi8vIEB0cy1pZ25vcmVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtQ29tcG9uZW50LWhpZXJhcmNoeS5tZCc7XG5cbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyQmFzaWNzO1xuY29uc3QgdGl0bGUgPSAnQ29tcG9uZW50IGhpZXJhcmNoeSc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZGVmYXVsdC1leHBvcnRcbmV4cG9ydCBkZWZhdWx0IHtcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcbiAgICBwYXJhbWV0ZXJzOiB7XCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiXFxuICAgICAgXFxuICAgICAgLy8gQHRzLW5vY2hlY2tcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fU1RPUllfXyA9IFxcXCJpbXBvcnQge1xcXFxuICAgIEZpbGVBY3Rpb24sXFxcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxcXG4gICAgRmlsZUJyb3dzZXIsXFxcXG4gICAgRmlsZUxpc3QsXFxcXG4gICAgRmlsZVNlYXJjaCxcXFxcbiAgICBGaWxlVG9vbGJhcixcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcXFxuICAgIFN0b3J5Q2F0ZWdvcmllcyxcXFxcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAxLUNvbXBvbmVudC1oaWVyYXJjaHkubWQnO1xcXFxuXFxcXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5GaWxlQnJvd3NlckJhc2ljcztcXFxcbmNvbnN0IHRpdGxlID0gJ0NvbXBvbmVudCBoaWVyYXJjaHknO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IENvbXBvbmVudEhpZXJhcmNoeUV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ3hBU3cnLCBuYW1lOiAnQ2hvbmt5IERlbW8gRm9sZGVyJywgaXNEaXI6IHRydWUgfV07XFxcXG4gICAgY29uc3QgZmlsZXMgPSBbeyBpZDogJ2JFZlgnLCBuYW1lOiAnRGVtby50cycgfV07XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwiY29tcG9uZW50LWhpZXJhcmNoeS1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6NDEsXFxcImxpbmVcXFwiOjMyfSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NTR9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjo0MSxcXFwibGluZVxcXCI6MzJ9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NTR9fX07XFxuICAgIFxcbmltcG9ydCB7XFxuICAgIEZpbGVBY3Rpb24sXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcbiAgICBGaWxlQnJvd3NlcixcXG4gICAgRmlsZUxpc3QsXFxuICAgIEZpbGVTZWFyY2gsXFxuICAgIEZpbGVUb29sYmFyLFxcbn0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQge1xcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcbiAgICBTdG9yeUNhdGVnb3JpZXMsXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtQ29tcG9uZW50LWhpZXJhcmNoeS5tZCc7XFxuXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxuY29uc3QgdGl0bGUgPSAnQ29tcG9uZW50IGhpZXJhcmNoeSc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXG4gICAgcGFyYW1ldGVyczoge1xcXCJzdG9yeVNvdXJjZVxcXCI6e1xcXCJzb3VyY2VcXFwiOlxcXCJpbXBvcnQge1xcXFxuICAgIEZpbGVBY3Rpb24sXFxcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxcXG4gICAgRmlsZUJyb3dzZXIsXFxcXG4gICAgRmlsZUxpc3QsXFxcXG4gICAgRmlsZVNlYXJjaCxcXFxcbiAgICBGaWxlVG9vbGJhcixcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcXFxuICAgIFN0b3J5Q2F0ZWdvcmllcyxcXFxcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAxLUNvbXBvbmVudC1oaWVyYXJjaHkubWQnO1xcXFxuXFxcXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5GaWxlQnJvd3NlckJhc2ljcztcXFxcbmNvbnN0IHRpdGxlID0gJ0NvbXBvbmVudCBoaWVyYXJjaHknO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IENvbXBvbmVudEhpZXJhcmNoeUV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ3hBU3cnLCBuYW1lOiAnQ2hvbmt5IERlbW8gRm9sZGVyJywgaXNEaXI6IHRydWUgfV07XFxcXG4gICAgY29uc3QgZmlsZXMgPSBbeyBpZDogJ2JFZlgnLCBuYW1lOiAnRGVtby50cycgfV07XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCIsXFxcImxvY2F0aW9uc01hcFxcXCI6e1xcXCJjb21wb25lbnQtaGllcmFyY2h5LWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjo0MSxcXFwibGluZVxcXCI6MzJ9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo1NH0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjQxLFxcXCJsaW5lXFxcIjozMn0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo1NH19fX0sXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgQ29tcG9uZW50SGllcmFyY2h5RXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ3hBU3cnLCBuYW1lOiAnQ2hvbmt5IERlbW8gRm9sZGVyJywgaXNEaXI6IHRydWUgfV07XFxuICAgIGNvbnN0IGZpbGVzID0gW3sgaWQ6ICdiRWZYJywgbmFtZTogJ0RlbW8udHMnIH1dO1xcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIixcImxvY2F0aW9uc01hcFwiOntcImNvbXBvbmVudC1oaWVyYXJjaHktZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6NDEsXCJsaW5lXCI6NDB9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo2Mn0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjo0MSxcImxpbmVcIjo0MH0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo2Mn19fX0sXCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiaW1wb3J0IHtcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVCcm93c2VyLFxcbiAgICBGaWxlTGlzdCxcXG4gICAgRmlsZVNlYXJjaCxcXG4gICAgRmlsZVRvb2xiYXIsXFxufSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7XFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxuICAgIFN0b3J5Q2F0ZWdvcmllcyxcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMS1Db21wb25lbnQtaGllcmFyY2h5Lm1kJztcXG5cXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5GaWxlQnJvd3NlckJhc2ljcztcXG5jb25zdCB0aXRsZSA9ICdDb21wb25lbnQgaGllcmFyY2h5JztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgQ29tcG9uZW50SGllcmFyY2h5RXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ3hBU3cnLCBuYW1lOiAnQ2hvbmt5IERlbW8gRm9sZGVyJywgaXNEaXI6IHRydWUgfV07XFxuICAgIGNvbnN0IGZpbGVzID0gW3sgaWQ6ICdiRWZYJywgbmFtZTogJ0RlbW8udHMnIH1dO1xcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIixcImxvY2F0aW9uc01hcFwiOntcImNvbXBvbmVudC1oaWVyYXJjaHktZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6NDEsXCJsaW5lXCI6MzJ9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo1NH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjo0MSxcImxpbmVcIjozMn0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo1NH19fX0sXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcbiAgICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IENvbXBvbmVudEhpZXJhcmNoeUV4YW1wbGUgPSAoKSA9PiB7XG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ3hBU3cnLCBuYW1lOiAnQ2hvbmt5IERlbW8gRm9sZGVyJywgaXNEaXI6IHRydWUgfV07XG4gICAgY29uc3QgZmlsZXMgPSBbeyBpZDogJ2JFZlgnLCBuYW1lOiAnRGVtby50cycgfV07XG5cbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IFwiQ2hvbmt5IGluY2x1ZGVzIHNldmVyYWwgbWFqb3IgY29tcG9uZW50cyAtIGBGaWxlQnJvd3NlcmAsIGBGaWxlTGlzdGAsIGBGaWxlVG9vbGJhcmAsXFxuYW5kIHNvbWUgb3RoZXJzLlxcblxcbmBGaWxlQnJvd3NlcmAgaXMgdGhlIG1vc3QgaW1wb3J0YW50IGNvbXBvbmVudC4gSW4geW91ciBjb2RlLCBpdCBzaG91bGQgd3JhcFxcbmFsbCBvdGhlciBDaG9ua3kgY29tcG9uZW50czpcXG5cXG5gYGB0c3hcXG48RmlsZUJyb3dzZXIgZmlsZXM9e1tdfT5cXG4gICAgPEZpbGVUb29sYmFyIC8+XFxuICAgIDxGaWxlU2VhcmNoIC8+XFxuICAgIDxGaWxlTGlzdCAvPlxcbjwvRmlsZUJyb3dzZXI+XFxuYGBgXFxuXFxuVGhpcyBpcyBiZWNhdXNlIGBGaWxlQnJvd3NlcmAgaXMgcmVzcG9uc2libGUgZm9yIHByb3ZpZGluZyB0aGUgY29uZmlndXJhdGlvbiBhbmRcXG5yZWxldmFudCBSZWFjdCBjb250ZXh0cyB0byBhbGwgdGhlIGNoaWxkcmVuIENob25reSBjb21wb25lbnRzLiBJdCBhbHNvIHRoZSBjb21wb25lbnRcXG50aGF0IHlvdSB3aWxsIGJlIHBhc3NpbmcgYWxsIG9mIHlvdXIgcHJvcHMgdG9vLlxcblxcbmBGaWxlQnJvd3NlcmAgaXMgYWxzbyB0aGUgb25seSByZXF1aXJlZCBjb21wb25lbnQgLSBhbGwgb3RoZXJzLCBzdWNoIGFzIGBGaWxlTGlzdGAsXFxuYXJlIG9wdGlvbmFsLiBGb3IgZXhhbXBsZSwgaWYgeW91J3JlIG9ubHkgaW50ZXJlc3RlZCBpbiBkaXNwbGF5aW5nIGZpbGVzLCBidXQgZG9uJ3RcXG5uZWVkIHRvIHRoZSB0b29sYmFyLCB5b3UgY291bGQgdXNlIHRoZSBmb2xsb3dpbmcgaGllcmFyY2h5OlxcblxcbmBgYHRzeFxcbjxGaWxlQnJvd3NlciBmaWxlcz17W119PlxcbiAgICA8RmlsZUxpc3QgLz5cXG48L0ZpbGVCcm93c2VyPlxcbmBgYFxcblxcbk9yLCBpZiB5b3UncmUgYSBwb3dlciB1c2VyLCBhbmQgeW91IHdhbnQgdG8gdXNlIGEgY3VzdG9tIGltcGxlbWVudGF0aW9uIG9mIHRoZSBmaWxlXFxubGlzdCBieSBjb25zdW1pbmcgQ2hvbmt5J3MgW1JlY29pbCBhdG9tc10oaHR0cHM6Ly9yZWNvaWxqcy5vcmcvKSBkaXJlY3RseSwgeW91IGNvdWxkXFxudXNlIHNvbWV0aGluZyBsaWtlOlxcblxcbmBgYHRzeFxcbjxGaWxlQnJvd3NlciBmaWxlcz17W119PlxcbiAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgPEZpbGVTZWFyY2ggLz5cXG4gICAgPE15Q3VzdG9tRmlsZUxpc3QgLz5cXG48L0ZpbGVCcm93c2VyPlxcbmBgYFxcblwiOyIsIlxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJcXG4gICAgICBcXG4gICAgICAvLyBAdHMtbm9jaGVja1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19TVE9SWV9fID0gXFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IHtcXFxcbiAgICBGaWxlQWN0aW9uLFxcXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcXFxuICAgIEZpbGVBcnJheSxcXFxcbiAgICBGaWxlQnJvd3NlcixcXFxcbiAgICBGaWxlTGlzdCxcXFxcbiAgICBGaWxlU2VhcmNoLFxcXFxuICAgIEZpbGVUb29sYmFyLFxcXFxufSBmcm9tICdjaG9ua3knO1xcXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHtcXFxcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxcXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxcXG4gICAgU3RvcnlDYXRlZ29yaWVzLFxcXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDItRGlzcGxheWluZy1maWxlcy5tZCc7XFxcXG5cXFxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyQmFzaWNzO1xcXFxuY29uc3QgdGl0bGUgPSAnRGlzcGxheWluZyBmaWxlcyc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgRmlsZXNBcnJheUV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgZmlsZXM6IEZpbGVBcnJheSA9IFtcXFxcbiAgICAgICAgbnVsbCwgLy8gTG9hZGluZyBhbmltYXRpb24gd2lsbCBiZSBzaG93biBmb3IgdGhpcyBmaWxlXFxcXG4gICAgICAgIG51bGwsXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnblRlJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3JtYWwgZmlsZS55YW1sJyxcXFxcbiAgICAgICAgICAgIHNpemU6IDg5MCxcXFxcbiAgICAgICAgICAgIG1vZERhdGU6IG5ldyBEYXRlKCcyMDEyLTAxLTAxJyksXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnenhjJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdIaWRkZW4gZmlsZS5tcDQnLFxcXFxuICAgICAgICAgICAgaXNIaWRkZW46IHRydWUsXFxcXG4gICAgICAgICAgICBzaXplOiA4OTAsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnYm5tJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3JtYWwgZm9sZGVyJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcXFxuICAgICAgICAgICAgY2hpbGRyZW5Db3VudDogMTIsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAndmZyJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdTeW1saW5rIGZvbGRlcicsXFxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICAgICAgICAgIGlzU3ltbGluazogdHJ1ZSxcXFxcbiAgICAgICAgICAgIGNoaWxkcmVuQ291bnQ6IDAsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAncXdlJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3Qgc2VsZWN0YWJsZS50YXIuZ3onLFxcXFxuICAgICAgICAgICAgZXh0OiAnLnRhci5neicsIC8vIEN1c3RvbSBleHRlbnNpb25cXFxcbiAgICAgICAgICAgIHNlbGVjdGFibGU6IGZhbHNlLCAvLyBEaXNhYmxlIHNlbGVjdGlvblxcXFxuICAgICAgICAgICAgc2l6ZTogNTQzMDAwMDAwMDAsXFxcXG4gICAgICAgICAgICBtb2REYXRlOiBuZXcgRGF0ZSgpLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3J0eScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IG9wZW5hYmxlLnBlbScsXFxcXG4gICAgICAgICAgICBvcGVuYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgb3BlbmluZ1xcXFxuICAgICAgICAgICAgc2l6ZTogMTAwMDAwMDAwLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ2J0aicsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IGRyYWdnYWJsZS5jc3YnLFxcXFxuICAgICAgICAgICAgZHJhZ2dhYmxlOiBmYWxzZSwgLy8gUHJldmVudCB0aGlzIGZpbGVzIGZyb20gYmVpbmcgZHJhZ2dlZFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3VwcScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IGRyb3BwYWJsZScsXFxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICAgICAgICAgIGRyb3BwYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgZmlsZXMgZnJvbSBiZWluZyBkcm9wcGVkIGludG8gdGhpcyBmb2xkZXJcXFxcbiAgICAgICAgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwiZmlsZXMtYXJyYXktZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjMzLFxcXCJsaW5lXFxcIjozNH0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjEwN30sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjMzLFxcXCJsaW5lXFxcIjozNH0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjoxMDd9fX07XFxuICAgIFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQge1xcbiAgICBGaWxlQWN0aW9uLFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXG4gICAgRmlsZUFycmF5LFxcbiAgICBGaWxlQnJvd3NlcixcXG4gICAgRmlsZUxpc3QsXFxuICAgIEZpbGVTZWFyY2gsXFxuICAgIEZpbGVUb29sYmFyLFxcbn0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7XFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxuICAgIFN0b3J5Q2F0ZWdvcmllcyxcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMi1EaXNwbGF5aW5nLWZpbGVzLm1kJztcXG5cXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5GaWxlQnJvd3NlckJhc2ljcztcXG5jb25zdCB0aXRsZSA9ICdEaXNwbGF5aW5nIGZpbGVzJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcInN0b3J5U291cmNlXFxcIjp7XFxcInNvdXJjZVxcXCI6XFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IHtcXFxcbiAgICBGaWxlQWN0aW9uLFxcXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcXFxuICAgIEZpbGVBcnJheSxcXFxcbiAgICBGaWxlQnJvd3NlcixcXFxcbiAgICBGaWxlTGlzdCxcXFxcbiAgICBGaWxlU2VhcmNoLFxcXFxuICAgIEZpbGVUb29sYmFyLFxcXFxufSBmcm9tICdjaG9ua3knO1xcXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHtcXFxcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxcXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxcXG4gICAgU3RvcnlDYXRlZ29yaWVzLFxcXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDItRGlzcGxheWluZy1maWxlcy5tZCc7XFxcXG5cXFxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyQmFzaWNzO1xcXFxuY29uc3QgdGl0bGUgPSAnRGlzcGxheWluZyBmaWxlcyc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgRmlsZXNBcnJheUV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgZmlsZXM6IEZpbGVBcnJheSA9IFtcXFxcbiAgICAgICAgbnVsbCwgLy8gTG9hZGluZyBhbmltYXRpb24gd2lsbCBiZSBzaG93biBmb3IgdGhpcyBmaWxlXFxcXG4gICAgICAgIG51bGwsXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnblRlJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3JtYWwgZmlsZS55YW1sJyxcXFxcbiAgICAgICAgICAgIHNpemU6IDg5MCxcXFxcbiAgICAgICAgICAgIG1vZERhdGU6IG5ldyBEYXRlKCcyMDEyLTAxLTAxJyksXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnenhjJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdIaWRkZW4gZmlsZS5tcDQnLFxcXFxuICAgICAgICAgICAgaXNIaWRkZW46IHRydWUsXFxcXG4gICAgICAgICAgICBzaXplOiA4OTAsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnYm5tJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3JtYWwgZm9sZGVyJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcXFxuICAgICAgICAgICAgY2hpbGRyZW5Db3VudDogMTIsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAndmZyJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdTeW1saW5rIGZvbGRlcicsXFxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICAgICAgICAgIGlzU3ltbGluazogdHJ1ZSxcXFxcbiAgICAgICAgICAgIGNoaWxkcmVuQ291bnQ6IDAsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAncXdlJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3Qgc2VsZWN0YWJsZS50YXIuZ3onLFxcXFxuICAgICAgICAgICAgZXh0OiAnLnRhci5neicsIC8vIEN1c3RvbSBleHRlbnNpb25cXFxcbiAgICAgICAgICAgIHNlbGVjdGFibGU6IGZhbHNlLCAvLyBEaXNhYmxlIHNlbGVjdGlvblxcXFxuICAgICAgICAgICAgc2l6ZTogNTQzMDAwMDAwMDAsXFxcXG4gICAgICAgICAgICBtb2REYXRlOiBuZXcgRGF0ZSgpLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3J0eScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IG9wZW5hYmxlLnBlbScsXFxcXG4gICAgICAgICAgICBvcGVuYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgb3BlbmluZ1xcXFxuICAgICAgICAgICAgc2l6ZTogMTAwMDAwMDAwLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ2J0aicsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IGRyYWdnYWJsZS5jc3YnLFxcXFxuICAgICAgICAgICAgZHJhZ2dhYmxlOiBmYWxzZSwgLy8gUHJldmVudCB0aGlzIGZpbGVzIGZyb20gYmVpbmcgZHJhZ2dlZFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3VwcScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IGRyb3BwYWJsZScsXFxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICAgICAgICAgIGRyb3BwYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgZmlsZXMgZnJvbSBiZWluZyBkcm9wcGVkIGludG8gdGhpcyBmb2xkZXJcXFxcbiAgICAgICAgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCIsXFxcImxvY2F0aW9uc01hcFxcXCI6e1xcXCJmaWxlcy1hcnJheS1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzMsXFxcImxpbmVcXFwiOjM0fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6MTA3fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzMsXFxcImxpbmVcXFwiOjM0fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjEwN319fX0sXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgRmlsZXNBcnJheUV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGZpbGVzOiBGaWxlQXJyYXkgPSBbXFxuICAgICAgICBudWxsLCAvLyBMb2FkaW5nIGFuaW1hdGlvbiB3aWxsIGJlIHNob3duIGZvciB0aGlzIGZpbGVcXG4gICAgICAgIG51bGwsXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICduVGUnLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3JtYWwgZmlsZS55YW1sJyxcXG4gICAgICAgICAgICBzaXplOiA4OTAsXFxuICAgICAgICAgICAgbW9kRGF0ZTogbmV3IERhdGUoJzIwMTItMDEtMDEnKSxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICd6eGMnLFxcbiAgICAgICAgICAgIG5hbWU6ICdIaWRkZW4gZmlsZS5tcDQnLFxcbiAgICAgICAgICAgIGlzSGlkZGVuOiB0cnVlLFxcbiAgICAgICAgICAgIHNpemU6IDg5MCxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdibm0nLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3JtYWwgZm9sZGVyJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgICAgICBjaGlsZHJlbkNvdW50OiAxMixcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICd2ZnInLFxcbiAgICAgICAgICAgIG5hbWU6ICdTeW1saW5rIGZvbGRlcicsXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxuICAgICAgICAgICAgaXNTeW1saW5rOiB0cnVlLFxcbiAgICAgICAgICAgIGNoaWxkcmVuQ291bnQ6IDAsXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAncXdlJyxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IHNlbGVjdGFibGUudGFyLmd6JyxcXG4gICAgICAgICAgICBleHQ6ICcudGFyLmd6JywgLy8gQ3VzdG9tIGV4dGVuc2lvblxcbiAgICAgICAgICAgIHNlbGVjdGFibGU6IGZhbHNlLCAvLyBEaXNhYmxlIHNlbGVjdGlvblxcbiAgICAgICAgICAgIHNpemU6IDU0MzAwMDAwMDAwLFxcbiAgICAgICAgICAgIG1vZERhdGU6IG5ldyBEYXRlKCksXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAncnR5JyxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IG9wZW5hYmxlLnBlbScsXFxuICAgICAgICAgICAgb3BlbmFibGU6IGZhbHNlLCAvLyBQcmV2ZW50IG9wZW5pbmdcXG4gICAgICAgICAgICBzaXplOiAxMDAwMDAwMDAsXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnYnRqJyxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IGRyYWdnYWJsZS5jc3YnLFxcbiAgICAgICAgICAgIGRyYWdnYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgdGhpcyBmaWxlcyBmcm9tIGJlaW5nIGRyYWdnZWRcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICd1cHEnLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgZHJvcHBhYmxlJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgICAgICBkcm9wcGFibGU6IGZhbHNlLCAvLyBQcmV2ZW50IGZpbGVzIGZyb20gYmVpbmcgZHJvcHBlZCBpbnRvIHRoaXMgZm9sZGVyXFxuICAgICAgICB9LFxcbiAgICBdO1xcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCI7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCJmaWxlcy1hcnJheS1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozMyxcImxpbmVcIjo0Mn0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjExNX0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMyxcImxpbmVcIjo0Mn0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjoxMTV9fX07XG4gICAgXG5cbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAvLyBAdHMtbm9jaGVja1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7XFxuICAgIEZpbGVBY3Rpb24sXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcbiAgICBGaWxlQXJyYXksXFxuICAgIEZpbGVCcm93c2VyLFxcbiAgICBGaWxlTGlzdCxcXG4gICAgRmlsZVNlYXJjaCxcXG4gICAgRmlsZVRvb2xiYXIsXFxufSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHtcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXG4gICAgU3RvcnlDYXRlZ29yaWVzLFxcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAyLURpc3BsYXlpbmctZmlsZXMubWQnO1xcblxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyQmFzaWNzO1xcbmNvbnN0IHRpdGxlID0gJ0Rpc3BsYXlpbmcgZmlsZXMnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxuICAgIHBhcmFtZXRlcnM6IHtcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBGaWxlc0FycmF5RXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgZmlsZXM6IEZpbGVBcnJheSA9IFtcXG4gICAgICAgIG51bGwsIC8vIExvYWRpbmcgYW5pbWF0aW9uIHdpbGwgYmUgc2hvd24gZm9yIHRoaXMgZmlsZVxcbiAgICAgICAgbnVsbCxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ25UZScsXFxuICAgICAgICAgICAgbmFtZTogJ05vcm1hbCBmaWxlLnlhbWwnLFxcbiAgICAgICAgICAgIHNpemU6IDg5MCxcXG4gICAgICAgICAgICBtb2REYXRlOiBuZXcgRGF0ZSgnMjAxMi0wMS0wMScpLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ3p4YycsXFxuICAgICAgICAgICAgbmFtZTogJ0hpZGRlbiBmaWxlLm1wNCcsXFxuICAgICAgICAgICAgaXNIaWRkZW46IHRydWUsXFxuICAgICAgICAgICAgc2l6ZTogODkwLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ2JubScsXFxuICAgICAgICAgICAgbmFtZTogJ05vcm1hbCBmb2xkZXInLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgICAgIGNoaWxkcmVuQ291bnQ6IDEyLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ3ZmcicsXFxuICAgICAgICAgICAgbmFtZTogJ1N5bWxpbmsgZm9sZGVyJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgICAgICBpc1N5bWxpbms6IHRydWUsXFxuICAgICAgICAgICAgY2hpbGRyZW5Db3VudDogMCxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdxd2UnLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3Qgc2VsZWN0YWJsZS50YXIuZ3onLFxcbiAgICAgICAgICAgIGV4dDogJy50YXIuZ3onLCAvLyBDdXN0b20gZXh0ZW5zaW9uXFxuICAgICAgICAgICAgc2VsZWN0YWJsZTogZmFsc2UsIC8vIERpc2FibGUgc2VsZWN0aW9uXFxuICAgICAgICAgICAgc2l6ZTogNTQzMDAwMDAwMDAsXFxuICAgICAgICAgICAgbW9kRGF0ZTogbmV3IERhdGUoKSxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdydHknLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3Qgb3BlbmFibGUucGVtJyxcXG4gICAgICAgICAgICBvcGVuYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgb3BlbmluZ1xcbiAgICAgICAgICAgIHNpemU6IDEwMDAwMDAwMCxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdidGonLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgZHJhZ2dhYmxlLmNzdicsXFxuICAgICAgICAgICAgZHJhZ2dhYmxlOiBmYWxzZSwgLy8gUHJldmVudCB0aGlzIGZpbGVzIGZyb20gYmVpbmcgZHJhZ2dlZFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ3VwcScsXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBkcm9wcGFibGUnLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgICAgIGRyb3BwYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgZmlsZXMgZnJvbSBiZWluZyBkcm9wcGVkIGludG8gdGhpcyBmb2xkZXJcXG4gICAgICAgIH0sXFxuICAgIF07XFxuXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXG4gICAgfTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIjtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcImZpbGVzLWFycmF5LWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjMzLFwibGluZVwiOjM0fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6MTA3fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjMzLFwibGluZVwiOjM0fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjEwN319fTtcbiAgICBcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcblxuaW1wb3J0IHtcbiAgICBGaWxlQWN0aW9uLFxuICAgIEZpbGVBY3Rpb25EYXRhLFxuICAgIEZpbGVBcnJheSxcbiAgICBGaWxlQnJvd3NlcixcbiAgICBGaWxlTGlzdCxcbiAgICBGaWxlU2VhcmNoLFxuICAgIEZpbGVUb29sYmFyLFxufSBmcm9tICdjaG9ua3knO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHtcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXG4gICAgU3RvcnlDYXRlZ29yaWVzLFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcbi8vIEB0cy1pZ25vcmVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDItRGlzcGxheWluZy1maWxlcy5tZCc7XG5cbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyQmFzaWNzO1xuY29uc3QgdGl0bGUgPSAnRGlzcGxheWluZyBmaWxlcyc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZGVmYXVsdC1leHBvcnRcbmV4cG9ydCBkZWZhdWx0IHtcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcbiAgICBwYXJhbWV0ZXJzOiB7XCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiXFxuICAgICAgXFxuICAgICAgLy8gQHRzLW5vY2hlY2tcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fU1RPUllfXyA9IFxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQXJyYXksXFxcXG4gICAgRmlsZUJyb3dzZXIsXFxcXG4gICAgRmlsZUxpc3QsXFxcXG4gICAgRmlsZVNlYXJjaCxcXFxcbiAgICBGaWxlVG9vbGJhcixcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcXFxuICAgIFN0b3J5Q2F0ZWdvcmllcyxcXFxcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAyLURpc3BsYXlpbmctZmlsZXMubWQnO1xcXFxuXFxcXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5GaWxlQnJvd3NlckJhc2ljcztcXFxcbmNvbnN0IHRpdGxlID0gJ0Rpc3BsYXlpbmcgZmlsZXMnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEZpbGVzQXJyYXlFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGZpbGVzOiBGaWxlQXJyYXkgPSBbXFxcXG4gICAgICAgIG51bGwsIC8vIExvYWRpbmcgYW5pbWF0aW9uIHdpbGwgYmUgc2hvd24gZm9yIHRoaXMgZmlsZVxcXFxuICAgICAgICBudWxsLFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ25UZScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm9ybWFsIGZpbGUueWFtbCcsXFxcXG4gICAgICAgICAgICBzaXplOiA4OTAsXFxcXG4gICAgICAgICAgICBtb2REYXRlOiBuZXcgRGF0ZSgnMjAxMi0wMS0wMScpLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3p4YycsXFxcXG4gICAgICAgICAgICBuYW1lOiAnSGlkZGVuIGZpbGUubXA0JyxcXFxcbiAgICAgICAgICAgIGlzSGlkZGVuOiB0cnVlLFxcXFxuICAgICAgICAgICAgc2l6ZTogODkwLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ2JubScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm9ybWFsIGZvbGRlcicsXFxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICAgICAgICAgIGNoaWxkcmVuQ291bnQ6IDEyLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3ZmcicsXFxcXG4gICAgICAgICAgICBuYW1lOiAnU3ltbGluayBmb2xkZXInLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgICAgICBpc1N5bWxpbms6IHRydWUsXFxcXG4gICAgICAgICAgICBjaGlsZHJlbkNvdW50OiAwLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3F3ZScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IHNlbGVjdGFibGUudGFyLmd6JyxcXFxcbiAgICAgICAgICAgIGV4dDogJy50YXIuZ3onLCAvLyBDdXN0b20gZXh0ZW5zaW9uXFxcXG4gICAgICAgICAgICBzZWxlY3RhYmxlOiBmYWxzZSwgLy8gRGlzYWJsZSBzZWxlY3Rpb25cXFxcbiAgICAgICAgICAgIHNpemU6IDU0MzAwMDAwMDAwLFxcXFxuICAgICAgICAgICAgbW9kRGF0ZTogbmV3IERhdGUoKSxcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICdydHknLFxcXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBvcGVuYWJsZS5wZW0nLFxcXFxuICAgICAgICAgICAgb3BlbmFibGU6IGZhbHNlLCAvLyBQcmV2ZW50IG9wZW5pbmdcXFxcbiAgICAgICAgICAgIHNpemU6IDEwMDAwMDAwMCxcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICdidGonLFxcXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBkcmFnZ2FibGUuY3N2JyxcXFxcbiAgICAgICAgICAgIGRyYWdnYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgdGhpcyBmaWxlcyBmcm9tIGJlaW5nIGRyYWdnZWRcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICd1cHEnLFxcXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBkcm9wcGFibGUnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgICAgICBkcm9wcGFibGU6IGZhbHNlLCAvLyBQcmV2ZW50IGZpbGVzIGZyb20gYmVpbmcgZHJvcHBlZCBpbnRvIHRoaXMgZm9sZGVyXFxcXG4gICAgICAgIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiO1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XFxcImZpbGVzLWFycmF5LWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozMyxcXFwibGluZVxcXCI6MzR9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjoxMDd9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozMyxcXFwibGluZVxcXCI6MzR9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6MTA3fX19O1xcbiAgICBcXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHtcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVBcnJheSxcXG4gICAgRmlsZUJyb3dzZXIsXFxuICAgIEZpbGVMaXN0LFxcbiAgICBGaWxlU2VhcmNoLFxcbiAgICBGaWxlVG9vbGJhcixcXG59IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQge1xcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcbiAgICBTdG9yeUNhdGVnb3JpZXMsXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDItRGlzcGxheWluZy1maWxlcy5tZCc7XFxuXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxuY29uc3QgdGl0bGUgPSAnRGlzcGxheWluZyBmaWxlcyc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXG4gICAgcGFyYW1ldGVyczoge1xcXCJzdG9yeVNvdXJjZVxcXCI6e1xcXCJzb3VyY2VcXFwiOlxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQXJyYXksXFxcXG4gICAgRmlsZUJyb3dzZXIsXFxcXG4gICAgRmlsZUxpc3QsXFxcXG4gICAgRmlsZVNlYXJjaCxcXFxcbiAgICBGaWxlVG9vbGJhcixcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcXFxuICAgIFN0b3J5Q2F0ZWdvcmllcyxcXFxcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAyLURpc3BsYXlpbmctZmlsZXMubWQnO1xcXFxuXFxcXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5GaWxlQnJvd3NlckJhc2ljcztcXFxcbmNvbnN0IHRpdGxlID0gJ0Rpc3BsYXlpbmcgZmlsZXMnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEZpbGVzQXJyYXlFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGZpbGVzOiBGaWxlQXJyYXkgPSBbXFxcXG4gICAgICAgIG51bGwsIC8vIExvYWRpbmcgYW5pbWF0aW9uIHdpbGwgYmUgc2hvd24gZm9yIHRoaXMgZmlsZVxcXFxuICAgICAgICBudWxsLFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ25UZScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm9ybWFsIGZpbGUueWFtbCcsXFxcXG4gICAgICAgICAgICBzaXplOiA4OTAsXFxcXG4gICAgICAgICAgICBtb2REYXRlOiBuZXcgRGF0ZSgnMjAxMi0wMS0wMScpLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3p4YycsXFxcXG4gICAgICAgICAgICBuYW1lOiAnSGlkZGVuIGZpbGUubXA0JyxcXFxcbiAgICAgICAgICAgIGlzSGlkZGVuOiB0cnVlLFxcXFxuICAgICAgICAgICAgc2l6ZTogODkwLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ2JubScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm9ybWFsIGZvbGRlcicsXFxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICAgICAgICAgIGNoaWxkcmVuQ291bnQ6IDEyLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3ZmcicsXFxcXG4gICAgICAgICAgICBuYW1lOiAnU3ltbGluayBmb2xkZXInLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgICAgICBpc1N5bWxpbms6IHRydWUsXFxcXG4gICAgICAgICAgICBjaGlsZHJlbkNvdW50OiAwLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3F3ZScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IHNlbGVjdGFibGUudGFyLmd6JyxcXFxcbiAgICAgICAgICAgIGV4dDogJy50YXIuZ3onLCAvLyBDdXN0b20gZXh0ZW5zaW9uXFxcXG4gICAgICAgICAgICBzZWxlY3RhYmxlOiBmYWxzZSwgLy8gRGlzYWJsZSBzZWxlY3Rpb25cXFxcbiAgICAgICAgICAgIHNpemU6IDU0MzAwMDAwMDAwLFxcXFxuICAgICAgICAgICAgbW9kRGF0ZTogbmV3IERhdGUoKSxcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICdydHknLFxcXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBvcGVuYWJsZS5wZW0nLFxcXFxuICAgICAgICAgICAgb3BlbmFibGU6IGZhbHNlLCAvLyBQcmV2ZW50IG9wZW5pbmdcXFxcbiAgICAgICAgICAgIHNpemU6IDEwMDAwMDAwMCxcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICdidGonLFxcXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBkcmFnZ2FibGUuY3N2JyxcXFxcbiAgICAgICAgICAgIGRyYWdnYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgdGhpcyBmaWxlcyBmcm9tIGJlaW5nIGRyYWdnZWRcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICd1cHEnLFxcXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBkcm9wcGFibGUnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgICAgICBkcm9wcGFibGU6IGZhbHNlLCAvLyBQcmV2ZW50IGZpbGVzIGZyb20gYmVpbmcgZHJvcHBlZCBpbnRvIHRoaXMgZm9sZGVyXFxcXG4gICAgICAgIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiLFxcXCJsb2NhdGlvbnNNYXBcXFwiOntcXFwiZmlsZXMtYXJyYXktZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjMzLFxcXCJsaW5lXFxcIjozNH0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjEwN30sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjMzLFxcXCJsaW5lXFxcIjozNH0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjoxMDd9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEZpbGVzQXJyYXlFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBmaWxlczogRmlsZUFycmF5ID0gW1xcbiAgICAgICAgbnVsbCwgLy8gTG9hZGluZyBhbmltYXRpb24gd2lsbCBiZSBzaG93biBmb3IgdGhpcyBmaWxlXFxuICAgICAgICBudWxsLFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnblRlJyxcXG4gICAgICAgICAgICBuYW1lOiAnTm9ybWFsIGZpbGUueWFtbCcsXFxuICAgICAgICAgICAgc2l6ZTogODkwLFxcbiAgICAgICAgICAgIG1vZERhdGU6IG5ldyBEYXRlKCcyMDEyLTAxLTAxJyksXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnenhjJyxcXG4gICAgICAgICAgICBuYW1lOiAnSGlkZGVuIGZpbGUubXA0JyxcXG4gICAgICAgICAgICBpc0hpZGRlbjogdHJ1ZSxcXG4gICAgICAgICAgICBzaXplOiA4OTAsXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnYm5tJyxcXG4gICAgICAgICAgICBuYW1lOiAnTm9ybWFsIGZvbGRlcicsXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxuICAgICAgICAgICAgY2hpbGRyZW5Db3VudDogMTIsXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAndmZyJyxcXG4gICAgICAgICAgICBuYW1lOiAnU3ltbGluayBmb2xkZXInLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgICAgIGlzU3ltbGluazogdHJ1ZSxcXG4gICAgICAgICAgICBjaGlsZHJlbkNvdW50OiAwLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ3F3ZScsXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBzZWxlY3RhYmxlLnRhci5neicsXFxuICAgICAgICAgICAgZXh0OiAnLnRhci5neicsIC8vIEN1c3RvbSBleHRlbnNpb25cXG4gICAgICAgICAgICBzZWxlY3RhYmxlOiBmYWxzZSwgLy8gRGlzYWJsZSBzZWxlY3Rpb25cXG4gICAgICAgICAgICBzaXplOiA1NDMwMDAwMDAwMCxcXG4gICAgICAgICAgICBtb2REYXRlOiBuZXcgRGF0ZSgpLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ3J0eScsXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBvcGVuYWJsZS5wZW0nLFxcbiAgICAgICAgICAgIG9wZW5hYmxlOiBmYWxzZSwgLy8gUHJldmVudCBvcGVuaW5nXFxuICAgICAgICAgICAgc2l6ZTogMTAwMDAwMDAwLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ2J0aicsXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBkcmFnZ2FibGUuY3N2JyxcXG4gICAgICAgICAgICBkcmFnZ2FibGU6IGZhbHNlLCAvLyBQcmV2ZW50IHRoaXMgZmlsZXMgZnJvbSBiZWluZyBkcmFnZ2VkXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAndXBxJyxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IGRyb3BwYWJsZScsXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxuICAgICAgICAgICAgZHJvcHBhYmxlOiBmYWxzZSwgLy8gUHJldmVudCBmaWxlcyBmcm9tIGJlaW5nIGRyb3BwZWQgaW50byB0aGlzIGZvbGRlclxcbiAgICAgICAgfSxcXG4gICAgXTtcXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiLFwibG9jYXRpb25zTWFwXCI6e1wiZmlsZXMtYXJyYXktZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzMsXCJsaW5lXCI6NDJ9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjoxMTV9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzMsXCJsaW5lXCI6NDJ9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6MTE1fX19fSxcInN0b3J5U291cmNlXCI6e1wic291cmNlXCI6XCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHtcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVBcnJheSxcXG4gICAgRmlsZUJyb3dzZXIsXFxuICAgIEZpbGVMaXN0LFxcbiAgICBGaWxlU2VhcmNoLFxcbiAgICBGaWxlVG9vbGJhcixcXG59IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQge1xcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcbiAgICBTdG9yeUNhdGVnb3JpZXMsXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDItRGlzcGxheWluZy1maWxlcy5tZCc7XFxuXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxuY29uc3QgdGl0bGUgPSAnRGlzcGxheWluZyBmaWxlcyc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXG4gICAgcGFyYW1ldGVyczoge1xcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEZpbGVzQXJyYXlFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBmaWxlczogRmlsZUFycmF5ID0gW1xcbiAgICAgICAgbnVsbCwgLy8gTG9hZGluZyBhbmltYXRpb24gd2lsbCBiZSBzaG93biBmb3IgdGhpcyBmaWxlXFxuICAgICAgICBudWxsLFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnblRlJyxcXG4gICAgICAgICAgICBuYW1lOiAnTm9ybWFsIGZpbGUueWFtbCcsXFxuICAgICAgICAgICAgc2l6ZTogODkwLFxcbiAgICAgICAgICAgIG1vZERhdGU6IG5ldyBEYXRlKCcyMDEyLTAxLTAxJyksXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnenhjJyxcXG4gICAgICAgICAgICBuYW1lOiAnSGlkZGVuIGZpbGUubXA0JyxcXG4gICAgICAgICAgICBpc0hpZGRlbjogdHJ1ZSxcXG4gICAgICAgICAgICBzaXplOiA4OTAsXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnYm5tJyxcXG4gICAgICAgICAgICBuYW1lOiAnTm9ybWFsIGZvbGRlcicsXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxuICAgICAgICAgICAgY2hpbGRyZW5Db3VudDogMTIsXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAndmZyJyxcXG4gICAgICAgICAgICBuYW1lOiAnU3ltbGluayBmb2xkZXInLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgICAgIGlzU3ltbGluazogdHJ1ZSxcXG4gICAgICAgICAgICBjaGlsZHJlbkNvdW50OiAwLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ3F3ZScsXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBzZWxlY3RhYmxlLnRhci5neicsXFxuICAgICAgICAgICAgZXh0OiAnLnRhci5neicsIC8vIEN1c3RvbSBleHRlbnNpb25cXG4gICAgICAgICAgICBzZWxlY3RhYmxlOiBmYWxzZSwgLy8gRGlzYWJsZSBzZWxlY3Rpb25cXG4gICAgICAgICAgICBzaXplOiA1NDMwMDAwMDAwMCxcXG4gICAgICAgICAgICBtb2REYXRlOiBuZXcgRGF0ZSgpLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ3J0eScsXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBvcGVuYWJsZS5wZW0nLFxcbiAgICAgICAgICAgIG9wZW5hYmxlOiBmYWxzZSwgLy8gUHJldmVudCBvcGVuaW5nXFxuICAgICAgICAgICAgc2l6ZTogMTAwMDAwMDAwLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ2J0aicsXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBkcmFnZ2FibGUuY3N2JyxcXG4gICAgICAgICAgICBkcmFnZ2FibGU6IGZhbHNlLCAvLyBQcmV2ZW50IHRoaXMgZmlsZXMgZnJvbSBiZWluZyBkcmFnZ2VkXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAndXBxJyxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IGRyb3BwYWJsZScsXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxuICAgICAgICAgICAgZHJvcHBhYmxlOiBmYWxzZSwgLy8gUHJldmVudCBmaWxlcyBmcm9tIGJlaW5nIGRyb3BwZWQgaW50byB0aGlzIGZvbGRlclxcbiAgICAgICAgfSxcXG4gICAgXTtcXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiLFwibG9jYXRpb25zTWFwXCI6e1wiZmlsZXMtYXJyYXktZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzMsXCJsaW5lXCI6MzR9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjoxMDd9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzMsXCJsaW5lXCI6MzR9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6MTA3fX19fSxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxuICAgIH0sXG59O1xuXG5leHBvcnQgY29uc3QgRmlsZXNBcnJheUV4YW1wbGUgPSAoKSA9PiB7XG4gICAgY29uc3QgZmlsZXM6IEZpbGVBcnJheSA9IFtcbiAgICAgICAgbnVsbCwgLy8gTG9hZGluZyBhbmltYXRpb24gd2lsbCBiZSBzaG93biBmb3IgdGhpcyBmaWxlXG4gICAgICAgIG51bGwsXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAnblRlJyxcbiAgICAgICAgICAgIG5hbWU6ICdOb3JtYWwgZmlsZS55YW1sJyxcbiAgICAgICAgICAgIHNpemU6IDg5MCxcbiAgICAgICAgICAgIG1vZERhdGU6IG5ldyBEYXRlKCcyMDEyLTAxLTAxJyksXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAnenhjJyxcbiAgICAgICAgICAgIG5hbWU6ICdIaWRkZW4gZmlsZS5tcDQnLFxuICAgICAgICAgICAgaXNIaWRkZW46IHRydWUsXG4gICAgICAgICAgICBzaXplOiA4OTAsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAnYm5tJyxcbiAgICAgICAgICAgIG5hbWU6ICdOb3JtYWwgZm9sZGVyJyxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxuICAgICAgICAgICAgY2hpbGRyZW5Db3VudDogMTIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAndmZyJyxcbiAgICAgICAgICAgIG5hbWU6ICdTeW1saW5rIGZvbGRlcicsXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcbiAgICAgICAgICAgIGlzU3ltbGluazogdHJ1ZSxcbiAgICAgICAgICAgIGNoaWxkcmVuQ291bnQ6IDAsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAncXdlJyxcbiAgICAgICAgICAgIG5hbWU6ICdOb3Qgc2VsZWN0YWJsZS50YXIuZ3onLFxuICAgICAgICAgICAgZXh0OiAnLnRhci5neicsIC8vIEN1c3RvbSBleHRlbnNpb25cbiAgICAgICAgICAgIHNlbGVjdGFibGU6IGZhbHNlLCAvLyBEaXNhYmxlIHNlbGVjdGlvblxuICAgICAgICAgICAgc2l6ZTogNTQzMDAwMDAwMDAsXG4gICAgICAgICAgICBtb2REYXRlOiBuZXcgRGF0ZSgpLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ3J0eScsXG4gICAgICAgICAgICBuYW1lOiAnTm90IG9wZW5hYmxlLnBlbScsXG4gICAgICAgICAgICBvcGVuYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgb3BlbmluZ1xuICAgICAgICAgICAgc2l6ZTogMTAwMDAwMDAwLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ2J0aicsXG4gICAgICAgICAgICBuYW1lOiAnTm90IGRyYWdnYWJsZS5jc3YnLFxuICAgICAgICAgICAgZHJhZ2dhYmxlOiBmYWxzZSwgLy8gUHJldmVudCB0aGlzIGZpbGVzIGZyb20gYmVpbmcgZHJhZ2dlZFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ3VwcScsXG4gICAgICAgICAgICBuYW1lOiAnTm90IGRyb3BwYWJsZScsXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcbiAgICAgICAgICAgIGRyb3BwYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgZmlsZXMgZnJvbSBiZWluZyBkcm9wcGVkIGludG8gdGhpcyBmb2xkZXJcbiAgICAgICAgfSxcbiAgICBdO1xuXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IFwiVGhlIGBGaWxlQnJvd3NlcmAgY29tcG9uZW50IGhhcyBvbmx5IG9uZSByZXF1aXJlZCBwcm9wIC0gdGhlIGBmaWxlc2AgYXJyYXk6XFxuXFxuYGBgdHN4XFxuY29uc3QgRmlsZXNFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBmaWxlcyA9IFtcXG4gICAgICAgIG51bGwsIC8vIFdpbGwgc2hvdyBsb2FkaW5nIGFuaW1hdGlvblxcbiAgICAgICAgeyBpZDogJ3hXYlonLCBuYW1lOiAnSW5zdHJ1Y3Rpb25zLnR4dCcgfSxcXG4gICAgICAgIHsgaWQ6ICd4V2JaJywgbmFtZTogJ1Rvb2xzJywgaXNEaXI6IHRydWUgfSxcXG4gICAgXTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxGaWxlQnJvd3NlciBmaWxlcz17ZmlsZXN9PlxcbiAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxuICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICApO1xcbn07XFxuYGBgXFxuXFxuVGhpcyBhcnJheSBkZXNjcmliZXMgdGhlIGZpbGVzIHRoYXQgQ2hvbmt5IHNob3VsZCBzaG93IHRvIHRoZSB1c2VyLiBJdCBjYW4gY29udGFpblxcbmZpbGUgZGVzY3JpcHRpb25zIChhcyBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMpIGFuZCBgbnVsbGAgdmFsdWVzLiBgbnVsbGAgdmFsdWVzXFxuaW5kaWNhdGUgXFxcImxvYWRpbmdcXFwiIGZpbGVzIC0gYSBsb2FkaW5nIHBsYWNlaG9sZGVyIGFuaW1hdGlvbiB3aWxsIGJlIHNob3duIGluIHRoZWlyIHBsYWNlLlxcblxcbiMjIFRoZSBgRmlsZURhdGFgIHR5cGVcXG5cXG5Gb3JtYWxseSwgdGhlIFR5cGVzY3JpcHQgdHlwZSBmb3IgdGhlIGBmaWxlc2AgYXJyYXkgaXM6XFxuXFxuYGBgdHNcXG50eXBlIEZpbGVBcnJheSA9IE51bGxhYmxlPEZpbGVEYXRhPltdO1xcbi8vIGkuZS4gQXJyYXkgb2YgbnVsbHMgYW5kIGBGaWxlRGF0YWAgb2JqZWN0cyBtaXhlZCB0b2dldGhlclxcbmBgYFxcblxcblRoZSBgRmlsZURhdGFgIHR5cGUgaXMgc2hvd24gYmVsb3cuIEl0IG1pZ2h0IGxvb2sgaW50aW1pZGF0aW5nLCBidXQgcGxlYXNlIG5vdGUgdGhhdFxcbmBpZGAgYW5kIGBuYW1lYCBhcmUgdGhlIG9ubHkgMiByZXF1aXJlZCBmaWVsZHMuIEFsbCBvdGhlciBmaWVsZHMgYXJlIG9wdGlvbmFsLCBhbmRcXG5hcmUgdGhlcmUgdG8gZ2l2ZSB5b3UgbW9yZSBjb250cm9sIG92ZXIgaG93IENob25reSBkaXNwbGF5cyB5b3VyIGZpbGVzLlxcblxcbmBgYHRzXFxuZXhwb3J0IGludGVyZmFjZSBGaWxlRGF0YSB7XFxuICAgIGlkOiBzdHJpbmc7IC8vIChSZXF1aXJlZCkgU3RyaW5nIHRoYXQgdW5pcXVlbHkgaWRlbnRpZmllcyB0aGUgZmlsZVxcblxcbiAgICBuYW1lOiBzdHJpbmc7IC8vIChSZXF1aXJlZCkgRnVsbCBuYW1lLCBlLmcuIGBNeUltYWdlLmpwZ2BcXG4gICAgZXh0Pzogc3RyaW5nOyAvLyBGaWxlIGV4dGVuc2lvbiwgZS5nLiBgLmpwZ2BcXG5cXG4gICAgaXNEaXI/OiBib29sZWFuOyAvLyBJcyBhIGRpcmVjdG9yeSwgZGVmYXVsdDogZmFsc2VcXG4gICAgaXNIaWRkZW4/OiBib29sZWFuOyAvLyBJcyBhIGhpZGRlbiBmaWxlLCBkZWZhdWx0OiBmYWxzZVxcbiAgICBpc1N5bWxpbms/OiBib29sZWFuOyAvLyBJcyBhIHN5bWxpbmssIGRlZmF1bHQ6IGZhbHNlXFxuICAgIG9wZW5hYmxlPzogYm9vbGVhbjsgLy8gQ2FuIGJlIG9wZW5lZCwgZGVmYXVsdDogdHJ1ZVxcbiAgICBzZWxlY3RhYmxlPzogYm9vbGVhbjsgLy8gQ2FuIGJlIHNlbGVjdGVkLCBkZWZhdWx0OiB0cnVlXFxuICAgIGRyYWdnYWJsZT86IGJvb2xlYW47IC8vIENhbiBiZSBkcmFnZ2VkLCBkZWZhdWx0OiB0cnVlXFxuICAgIGRyb3BwYWJsZT86IGJvb2xlYW47IC8vIENhbiBoYXZlIGZpbGVzIGRyb3BwZWQgaW50byBpdCwgZGVmYXVsdDogdHJ1ZVxcblxcbiAgICBzaXplPzogbnVtYmVyOyAvLyBGaWxlIHNpemUgaW4gYnl0ZXNcXG4gICAgbW9kRGF0ZT86IERhdGUgfCBzdHJpbmc7IC8vIExhc3QgY2hhbmdlIGRhdGUgKG9yIGl0cyBzdHJpbmcgcmVwcmVzZW50YXRpb24pXFxuICAgIGNoaWxkcmVuQ291bnQ/OiBudW1iZXI7IC8vIE51bWJlciBvZiBmaWxlcyBpbnNpZGUgb2YgYSBmb2xkZXIgKG9ubHkgZm9yIGZvbGRlcnMpXFxuXFxuICAgIHRodW1ibmFpbFVybD86IHN0cmluZzsgLy8gQXV0b21hdGljYWxseSBsb2FkIHRodW1ibmFpbCBmcm9tIGhlcmVcXG5cXG4gICAgW3Byb3BlcnR5OiBzdHJpbmddOiBhbnk7IC8vIEFueSBvdGhlciB1c2VyLWRlZmluZWQgcHJvcGVydHlcXG59XFxuYGBgXFxuXFxuPHNwYW4gc3R5bGU9XFxcImNvbG9yOiByZWQ7IGZvbnQtd2VpZ2h0OiBib2xkO1xcXCI+XFxuSXQgaXMgdmVyeSBpbXBvcnRhbnQgdGhhdCBmaWxlIElEcyBhcmUgdW5pcXVlOlxcbjwvc3Bhbj5cXG5cXG4+IElmIGZpbGUgSURzIGFyZSBub3QgdW5pcXVlLCB0aGUgY29uc2VxdWVuY2VzIGNhbiBiZSBkaXJlIC0gZm9yIGV4YW1wbGUsIHlvdXIgdXNlciBjYW5cXG4+IGFjY2lkZW50YWxseSBkZWxldGUgdGhlIHdyb25nIGZpbGUuIENob25reSB0cmllcyB0byBwcm90ZWN0IHlvdSBieSBzY2FubmluZyB0aGUgZmlsZXNcXG4+IGFycmF5IGZvciBkdXBsaWNhdGUgSURzLCBidXQgeW91IHNob3VsZCBwdXQgc29tZSBleHRyYSBjaGVja3MgaW4geW91ciBjb2RlIHRvby4gWW91XFxuPiBjYW4gbmV2ZXIgYmUgdG9vIHNhZmUuXFxuXFxuQXBhcnQgZnJvbSB0aGUgYWJvdmUsIHRoZXJlIGFyZSBhIGZldyBvdGhlciBkZXRhaWxzIHlvdSBzaG91bGQga25vdyBhYm91dDpcXG5cXG4tICAgYGZpbGVzYCBhcnJheSBzaG91bGQgYmUgKippbW11dGFibGUqKi4gSWYgeW91J3JlIGZvbGxvd2luZyB0aGUgYmVzdCBSZWR1eCBwcmFjdGljZXMsXFxuICAgIHlvdSdyZSBnb29kLiBJZiB5b3UgZG9uJ3Qga25vdyB3aGF0IGltbXV0YWJpbGl0eSBpcywgcGxlYXNlIHJlYWQgdGhlXFxuICAgIF9JbW11dGFiaWxpdHlfIHNlY3Rpb24gZnJvbSB0aGUgc2lkZWJhci4gVGhpcyBpcyBpbXBvcnRhbnQuXFxuLSAgIFRoZSBmaWxlIGV4dGVuc2lvbiBpcyBhdXRvbWF0aWNhbGx5IGV4dHJhY3RlZCBmcm9tIHRoZSBgbmFtZWAgZmllbGQsIHNvIHlvdSBkb24ndFxcbiAgICBuZWVkIHRvIHByb3ZpZGUgYW4gYGV4dGAgZmllbGQgeW91cnNlbGYuIEluIHRoZSByYXJlIGNhc2Ugd2hlcmUgdGhlIGF1dG9tYXRpY1xcbiAgICBleHRlbnNpb24gZGV0ZWN0aW9uIGZhaWxzIChmb3IgZXhhbXBsZTogYGZpbGUudGFyLmd6YCksIHlvdSBjYW4gcHJvdmlkZSB0aGUgYGV4dGBcXG4gICAgZmllbGQgZXhwbGljaXRseS4gUGxlYXNlIG1ha2Ugc3VyZSBleHRlbnNpb24gaXMgaW5jbHVkZWQgaW4gYm90aCBgbmFtZWAgYW5kIGBleHRgLFxcbiAgICBlLmcuIGB7aWQ6ICdBc1Z6JywgbmFtZTogJ2ZpbGUudGFyLmd6JywgZXh0OiAnLnRhci5neid9YC5cXG5cXG4jIyBFeGFtcGxlIGZpbGUgYXJyYXlcXG5cXG5UaGUgX0xpdmUgRXhhbXBsZV8gYmVsb3cgdHJpZXMgdG8gc2hvdyBjYXNlIGFsbCBkaWZmZXJlbnQgZmlsZSBjb25maWd1cmF0aW9ucy4gVHJ5XFxucGVyZm9ybWluZyBkaWZmZXJlbnQgYWN0aW9ucyAoc2VsZWN0aW9ucywgZHJhZyAmIGRyb3ApIGFuZCBzZWUgaG93IGVhY2ggZmlsZSByZWFjdHMuXFxuQ2xpY2sgb24gYFNob3cgY29kZWAgYXQgdGhlIGJvdHRvbSB0byBzZWUgdGhlIGZpbGUgYXJyYXkgZGVmaW5pdGlvbi5cXG5cIjsiLCJcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAvLyBAdHMtbm9jaGVja1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fU1RPUllfXyA9IFwiXFxuICAgICAgXFxuICAgICAgLy8gQHRzLW5vY2hlY2tcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fU1RPUllfXyA9IFxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcXFxuICAgIFN0b3J5Q2F0ZWdvcmllcyxcXFxcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAzLVNwZWNpZnlpbmctZm9sZGVyLm1kJztcXFxcblxcXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxcXG5jb25zdCB0aXRsZSA9ICdTcGVjaWZ5aW5nIGN1cnJlbnQgZm9sZGVyJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBGb2xkZXJDaGFpbkV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnZ001dFRlJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdNeSBEb2N1bWVudHMnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnbVR4WWVBJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgT3BlbmFibGUnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgICAgICBvcGVuYWJsZTogZmFsc2UsIC8vIFRoaXMgYnV0dG9uIHdpbGwgbm90IGJlIGNsaWNrYWJsZVxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICBudWxsLCAvLyBMb2FkaW5nIGFuaW1hdGlvbiB3aWxsIGJlIHNob3duIGZvciB0aGlzIGZpbGVcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICd2eFd0QScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnVW5pdHkgUHJvamVjdHMnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnbVQ3RXQnLFxcXFxuICAgICAgICAgICAgbmFtZTogJ0dvb2QgUHJvamVjdHMnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e1tdfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwiZm9sZGVyLWNoYWluLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozNCxcXFwibGluZVxcXCI6MjZ9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo2OH0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjM0LFxcXCJsaW5lXFxcIjoyNn0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo2OH19fTtcXG4gICAgXFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7XFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxuICAgIFN0b3J5Q2F0ZWdvcmllcyxcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMy1TcGVjaWZ5aW5nLWZvbGRlci5tZCc7XFxuXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxuY29uc3QgdGl0bGUgPSAnU3BlY2lmeWluZyBjdXJyZW50IGZvbGRlcic7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXG4gICAgcGFyYW1ldGVyczoge1xcXCJzdG9yeVNvdXJjZVxcXCI6e1xcXCJzb3VyY2VcXFwiOlxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcXFxuICAgIFN0b3J5Q2F0ZWdvcmllcyxcXFxcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAzLVNwZWNpZnlpbmctZm9sZGVyLm1kJztcXFxcblxcXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxcXG5jb25zdCB0aXRsZSA9ICdTcGVjaWZ5aW5nIGN1cnJlbnQgZm9sZGVyJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBGb2xkZXJDaGFpbkV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnZ001dFRlJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdNeSBEb2N1bWVudHMnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnbVR4WWVBJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgT3BlbmFibGUnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgICAgICBvcGVuYWJsZTogZmFsc2UsIC8vIFRoaXMgYnV0dG9uIHdpbGwgbm90IGJlIGNsaWNrYWJsZVxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICBudWxsLCAvLyBMb2FkaW5nIGFuaW1hdGlvbiB3aWxsIGJlIHNob3duIGZvciB0aGlzIGZpbGVcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICd2eFd0QScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnVW5pdHkgUHJvamVjdHMnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnbVQ3RXQnLFxcXFxuICAgICAgICAgICAgbmFtZTogJ0dvb2QgUHJvamVjdHMnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e1tdfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCIsXFxcImxvY2F0aW9uc01hcFxcXCI6e1xcXCJmb2xkZXItY2hhaW4tZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjM0LFxcXCJsaW5lXFxcIjoyNn0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjY4fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzQsXFxcImxpbmVcXFwiOjI2fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjY4fX19fSxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBGb2xkZXJDaGFpbkV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW1xcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnZ001dFRlJyxcXG4gICAgICAgICAgICBuYW1lOiAnTXkgRG9jdW1lbnRzJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdtVHhZZUEnLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgT3BlbmFibGUnLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgICAgIG9wZW5hYmxlOiBmYWxzZSwgLy8gVGhpcyBidXR0b24gd2lsbCBub3QgYmUgY2xpY2thYmxlXFxuICAgICAgICB9LFxcbiAgICAgICAgbnVsbCwgLy8gTG9hZGluZyBhbmltYXRpb24gd2lsbCBiZSBzaG93biBmb3IgdGhpcyBmaWxlXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICd2eFd0QScsXFxuICAgICAgICAgICAgbmFtZTogJ1VuaXR5IFByb2plY3RzJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdtVDdFdCcsXFxuICAgICAgICAgICAgbmFtZTogJ0dvb2QgUHJvamVjdHMnLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgfSxcXG4gICAgXTtcXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e1tdfVxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIjtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcImZvbGRlci1jaGFpbi1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozNCxcImxpbmVcIjozNH0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjc2fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjM0LFwibGluZVwiOjM0fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjc2fX19O1xuICAgIFxuXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSwgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQge1xcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcbiAgICBTdG9yeUNhdGVnb3JpZXMsXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDMtU3BlY2lmeWluZy1mb2xkZXIubWQnO1xcblxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyQmFzaWNzO1xcbmNvbnN0IHRpdGxlID0gJ1NwZWNpZnlpbmcgY3VycmVudCBmb2xkZXInO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxuICAgIHBhcmFtZXRlcnM6IHtcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBGb2xkZXJDaGFpbkV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW1xcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnZ001dFRlJyxcXG4gICAgICAgICAgICBuYW1lOiAnTXkgRG9jdW1lbnRzJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdtVHhZZUEnLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgT3BlbmFibGUnLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgICAgIG9wZW5hYmxlOiBmYWxzZSwgLy8gVGhpcyBidXR0b24gd2lsbCBub3QgYmUgY2xpY2thYmxlXFxuICAgICAgICB9LFxcbiAgICAgICAgbnVsbCwgLy8gTG9hZGluZyBhbmltYXRpb24gd2lsbCBiZSBzaG93biBmb3IgdGhpcyBmaWxlXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICd2eFd0QScsXFxuICAgICAgICAgICAgbmFtZTogJ1VuaXR5IFByb2plY3RzJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdtVDdFdCcsXFxuICAgICAgICAgICAgbmFtZTogJ0dvb2QgUHJvamVjdHMnLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgfSxcXG4gICAgXTtcXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e1tdfVxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIjtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcImZvbGRlci1jaGFpbi1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozNCxcImxpbmVcIjoyNn0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjY4fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjM0LFwibGluZVwiOjI2fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjY4fX19O1xuICAgIFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xuXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSwgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQge1xuICAgIGNyZWF0ZURvY3NPYmplY3QsXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcbiAgICBTdG9yeUNhdGVnb3JpZXMsXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xuLy8gQHRzLWlnbm9yZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMy1TcGVjaWZ5aW5nLWZvbGRlci5tZCc7XG5cbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyQmFzaWNzO1xuY29uc3QgdGl0bGUgPSAnU3BlY2lmeWluZyBjdXJyZW50IGZvbGRlcic7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZGVmYXVsdC1leHBvcnRcbmV4cG9ydCBkZWZhdWx0IHtcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcbiAgICBwYXJhbWV0ZXJzOiB7XCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiXFxuICAgICAgXFxuICAgICAgLy8gQHRzLW5vY2hlY2tcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fU1RPUllfXyA9IFxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcXFxuICAgIFN0b3J5Q2F0ZWdvcmllcyxcXFxcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAzLVNwZWNpZnlpbmctZm9sZGVyLm1kJztcXFxcblxcXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxcXG5jb25zdCB0aXRsZSA9ICdTcGVjaWZ5aW5nIGN1cnJlbnQgZm9sZGVyJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBGb2xkZXJDaGFpbkV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnZ001dFRlJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdNeSBEb2N1bWVudHMnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnbVR4WWVBJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgT3BlbmFibGUnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgICAgICBvcGVuYWJsZTogZmFsc2UsIC8vIFRoaXMgYnV0dG9uIHdpbGwgbm90IGJlIGNsaWNrYWJsZVxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICBudWxsLCAvLyBMb2FkaW5nIGFuaW1hdGlvbiB3aWxsIGJlIHNob3duIGZvciB0aGlzIGZpbGVcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICd2eFd0QScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnVW5pdHkgUHJvamVjdHMnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnbVQ3RXQnLFxcXFxuICAgICAgICAgICAgbmFtZTogJ0dvb2QgUHJvamVjdHMnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e1tdfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwiZm9sZGVyLWNoYWluLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozNCxcXFwibGluZVxcXCI6MjZ9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo2OH0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjM0LFxcXCJsaW5lXFxcIjoyNn0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo2OH19fTtcXG4gICAgXFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7XFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxuICAgIFN0b3J5Q2F0ZWdvcmllcyxcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMy1TcGVjaWZ5aW5nLWZvbGRlci5tZCc7XFxuXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxuY29uc3QgdGl0bGUgPSAnU3BlY2lmeWluZyBjdXJyZW50IGZvbGRlcic7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXG4gICAgcGFyYW1ldGVyczoge1xcXCJzdG9yeVNvdXJjZVxcXCI6e1xcXCJzb3VyY2VcXFwiOlxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcXFxuICAgIFN0b3J5Q2F0ZWdvcmllcyxcXFxcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAzLVNwZWNpZnlpbmctZm9sZGVyLm1kJztcXFxcblxcXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxcXG5jb25zdCB0aXRsZSA9ICdTcGVjaWZ5aW5nIGN1cnJlbnQgZm9sZGVyJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBGb2xkZXJDaGFpbkV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnZ001dFRlJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdNeSBEb2N1bWVudHMnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnbVR4WWVBJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgT3BlbmFibGUnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgICAgICBvcGVuYWJsZTogZmFsc2UsIC8vIFRoaXMgYnV0dG9uIHdpbGwgbm90IGJlIGNsaWNrYWJsZVxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICBudWxsLCAvLyBMb2FkaW5nIGFuaW1hdGlvbiB3aWxsIGJlIHNob3duIGZvciB0aGlzIGZpbGVcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICd2eFd0QScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnVW5pdHkgUHJvamVjdHMnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnbVQ3RXQnLFxcXFxuICAgICAgICAgICAgbmFtZTogJ0dvb2QgUHJvamVjdHMnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e1tdfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCIsXFxcImxvY2F0aW9uc01hcFxcXCI6e1xcXCJmb2xkZXItY2hhaW4tZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjM0LFxcXCJsaW5lXFxcIjoyNn0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjY4fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzQsXFxcImxpbmVcXFwiOjI2fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjY4fX19fSxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBGb2xkZXJDaGFpbkV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW1xcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnZ001dFRlJyxcXG4gICAgICAgICAgICBuYW1lOiAnTXkgRG9jdW1lbnRzJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdtVHhZZUEnLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgT3BlbmFibGUnLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgICAgIG9wZW5hYmxlOiBmYWxzZSwgLy8gVGhpcyBidXR0b24gd2lsbCBub3QgYmUgY2xpY2thYmxlXFxuICAgICAgICB9LFxcbiAgICAgICAgbnVsbCwgLy8gTG9hZGluZyBhbmltYXRpb24gd2lsbCBiZSBzaG93biBmb3IgdGhpcyBmaWxlXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICd2eFd0QScsXFxuICAgICAgICAgICAgbmFtZTogJ1VuaXR5IFByb2plY3RzJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdtVDdFdCcsXFxuICAgICAgICAgICAgbmFtZTogJ0dvb2QgUHJvamVjdHMnLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgfSxcXG4gICAgXTtcXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e1tdfVxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIixcImxvY2F0aW9uc01hcFwiOntcImZvbGRlci1jaGFpbi1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozNCxcImxpbmVcIjozNH0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjc2fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjM0LFwibGluZVwiOjM0fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjc2fX19fSxcInN0b3J5U291cmNlXCI6e1wic291cmNlXCI6XCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHtcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXG4gICAgU3RvcnlDYXRlZ29yaWVzLFxcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAzLVNwZWNpZnlpbmctZm9sZGVyLm1kJztcXG5cXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5GaWxlQnJvd3NlckJhc2ljcztcXG5jb25zdCB0aXRsZSA9ICdTcGVjaWZ5aW5nIGN1cnJlbnQgZm9sZGVyJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgRm9sZGVyQ2hhaW5FeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFtcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ2dNNXRUZScsXFxuICAgICAgICAgICAgbmFtZTogJ015IERvY3VtZW50cycsXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnbVR4WWVBJyxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IE9wZW5hYmxlJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgICAgICBvcGVuYWJsZTogZmFsc2UsIC8vIFRoaXMgYnV0dG9uIHdpbGwgbm90IGJlIGNsaWNrYWJsZVxcbiAgICAgICAgfSxcXG4gICAgICAgIG51bGwsIC8vIExvYWRpbmcgYW5pbWF0aW9uIHdpbGwgYmUgc2hvd24gZm9yIHRoaXMgZmlsZVxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAndnhXdEEnLFxcbiAgICAgICAgICAgIG5hbWU6ICdVbml0eSBQcm9qZWN0cycsXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnbVQ3RXQnLFxcbiAgICAgICAgICAgIG5hbWU6ICdHb29kIFByb2plY3RzJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgIH0sXFxuICAgIF07XFxuXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXG4gICAgfTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtbXX1cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCIsXCJsb2NhdGlvbnNNYXBcIjp7XCJmb2xkZXItY2hhaW4tZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzQsXCJsaW5lXCI6MjZ9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo2OH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozNCxcImxpbmVcIjoyNn0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo2OH19fX0sXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcbiAgICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IEZvbGRlckNoYWluRXhhbXBsZSA9ICgpID0+IHtcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFtcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICdnTTV0VGUnLFxuICAgICAgICAgICAgbmFtZTogJ015IERvY3VtZW50cycsXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICdtVHhZZUEnLFxuICAgICAgICAgICAgbmFtZTogJ05vdCBPcGVuYWJsZScsXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcbiAgICAgICAgICAgIG9wZW5hYmxlOiBmYWxzZSwgLy8gVGhpcyBidXR0b24gd2lsbCBub3QgYmUgY2xpY2thYmxlXG4gICAgICAgIH0sXG4gICAgICAgIG51bGwsIC8vIExvYWRpbmcgYW5pbWF0aW9uIHdpbGwgYmUgc2hvd24gZm9yIHRoaXMgZmlsZVxuICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ3Z4V3RBJyxcbiAgICAgICAgICAgIG5hbWU6ICdVbml0eSBQcm9qZWN0cycsXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICdtVDdFdCcsXG4gICAgICAgICAgICBuYW1lOiAnR29vZCBQcm9qZWN0cycsXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICBdO1xuXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcbiAgICAgICAgICAgICAgICBmaWxlcz17W119XG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgXCJMaWtlIGFueSBvdGhlciBmaWxlIGJyb3dzZXIsIENob25reSBjYW4gZGlzcGxheSB0aGUgcGF0aCB0byB0aGUgY3VycmVudCBmb2xkZXIgaW4gdGhlXFxudG9vbGJhciBhYm92ZSB0aGUgZmlsZXMuIFRvIGVuYWJsZSB0aGlzIGZ1bmN0aW9uYWxpdHksIHlvdSB3aWxsIG5lZWQgdG8gYWRkIHRoZVxcbmA8RmlsZVRvb2xiYXIgLz5gIHRvIHlvdXIgY29tcG9uZW50IGFuZCBwYXNzIHRoZSBgZm9sZGVyQ2hhaW5gIGFycmF5IHRvIGBGaWxlQnJvd3NlcmA6XFxuXFxuYGBgdHN4XFxuY29uc3QgRm9sZGVyQ2hhaW5FeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAnZ01UZScsIG5hbWU6ICdNeSBEb2N1bWVudHMnLCBpc0RpcjogdHJ1ZSB9XTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxGaWxlQnJvd3NlciBmaWxlcz17W119IGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn0+XFxuICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+IHsvKiA8LS0tLS0gKi99XFxuICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICApO1xcbn07XFxuYGBgXFxuXFxuRm9sZGVyIGNoYWluIGZvbGxvd3MgdGhlIGV4YWN0IHNhbWUgcnVsZXMgYXMgdGhlIGBmaWxlc2AgYXJyYXkgZGVzY3JpYmVkIGluXFxuX0Rpc3BsYXlpbmcgZmlsZXNfIHNlY3Rpb24uIEl0IGNhbiBhbHNvIGNvbnRhaW4gYG51bGxgIHZhbHVlcyB0byBpbmRpY2F0ZSBsb2FkaW5nXFxuZmlsZXMsIGFuZCB0aGUgb2JqZWN0cyBpbnNpZGUgaXQgc2hvdWxkIGZvbGxvdyB0aGUgYEZpbGVEYXRhYCB0eXBlLlxcblxcblNvbWUgbm90ZXM6XFxuXFxuLSAgIFRoZSBmaWxlcyBpbiB0aGUgYGZvbGRlckNoYWluYCBhcnJheSBkb24ndCBuZWVkIHRvIGhhdmUgYGlzRGlyYCBzZXQgdG8gYHRydWVgLlxcbi0gICBDbGlja2luZyBvbiBhbiBpdGVtIGluIHRoZSBmb2xkZXIgY2hhaW4gd2lsbCBvcGVuIGl0LCB1bmxlc3MgaXQgaXMgYG51bGxgIG9yIGhhc1xcbiAgICBgb3BlbmFibGVgIHNldCB0byBmYWxzZS5cXG4tICAgVGhlIFxcXCJHbyB1cCBhIGRpcmVjdG9yeVxcXCIgYnV0dG9uIG9ubHkgd29ya3Mgd2hlbiB0aGUgc2Vjb25kLXRvLWxhc3QgZmlsZSBpbiB0aGVcXG4gICAgZm9sZGVyIGNoYWluIGlzIG9wZW5hYmxlLlxcblwiOyIsIlxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJcXG4gICAgICBcXG4gICAgICAvLyBAdHMtbm9jaGVja1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19TVE9SWV9fID0gXFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IHtcXFxcbiAgICBDaG9ua3lBY3Rpb25zLFxcXFxuICAgIEZpbGVBY3Rpb24sXFxcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxcXG4gICAgRmlsZUJyb3dzZXIsXFxcXG4gICAgRmlsZUxpc3QsXFxcXG4gICAgRmlsZVRvb2xiYXIsXFxcXG59IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXFxcbiAgICBTdG9yeUNhdGVnb3JpZXNcXFxcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA0LUZpbGUtYWN0aW9ucy5tZCc7XFxcXG5cXFxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyQmFzaWNzO1xcXFxuY29uc3QgdGl0bGUgPSAnVXNpbmcgZmlsZSBhY3Rpb25zJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBBY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgLy8gTG9nIGFjdGlvbiB0byBjb25zb2xlXFxcXG4gICAgICAgIFxcXFxuICAgICAgICBjb25zb2xlLmxvZygnXFxcXFxcXFxuQWN0aW9uIG9iamVjdDonLCBhY3Rpb24sICdcXFxcXFxcXG5BY3Rpb24gZGF0YTonLCBkYXRhKTtcXFxcblxcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IERvY3VtZW50cycsIGlzRGlyOiB0cnVlIH1dO1xcXFxuICAgIGNvbnN0IGZpbGVzID0gW1xcXFxuICAgICAgICB7IGlkOiAnbUhlNEExJywgbmFtZTogJ01lYW5pbmcgb2YgbGlmZS50eHQnLCBzaXplOiAzMTQxNSB9LFxcXFxuICAgICAgICB7IGlkOiAnaHVudGVyMicsIG5hbWU6ICdQYXNzd29yZC50eHQnIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdiRWYyNHEnLCBuYW1lOiAnRHJhZyAmIGRyb3AgZmlsZXMgaGVyZScsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIGNvbnN0IGZpbGVBY3Rpb25zID0gW1xcXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNyZWF0ZUZvbGRlciwgLy8gQWRkcyBhIGJ1dHRvbiB0byB0aGUgdG9vbGJhclxcXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLlVwbG9hZEZpbGVzLCAvLyBBZGRzIGEgYnV0dG9uXFxcXG4gICAgICAgIENob25reUFjdGlvbnMuRG93bmxvYWRGaWxlcywgLy8gQWRkcyBhIGJ1dHRvblxcXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNvcHlGaWxlcywgLy8gQWRkcyBhIGJ1dHRvbiBhbmQgYSBzaG9ydGN1dDogQ3RybCtDXFxcXG4gICAgICAgIENob25reUFjdGlvbnMuRGVsZXRlRmlsZXMsIC8vIEFkZHMgYSBidXR0b24gYW5kIGEgc2hvcnRjdXQ6IERlbGV0ZVxcXFxuICAgIF07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFxcXFxcImxpdmUtZXhhbXBsZVxcXFxcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcXFxcXCJsaXZlLWV4YW1wbGUtYWN0aW9uXFxcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgPHN0cm9uZz5DaGVjayB5b3VyIGJyb3dzZXIgY29uc29sZSBmb3IgbG9nZ2VkIGFjdGlvbnMhPC9zdHJvbmc+XFxcXG4gICAgICAgICAgICA8L2Rpdj5cXFxcblxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICBmaWxlQWN0aW9ucz17ZmlsZUFjdGlvbnN9XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiO1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XFxcImFjdGlvbnMtZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjMwLFxcXCJsaW5lXFxcIjozM30sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjc1fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzAsXFxcImxpbmVcXFwiOjMzfSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjc1fX19O1xcbiAgICBcXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHtcXG4gICAgQ2hvbmt5QWN0aW9ucyxcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVCcm93c2VyLFxcbiAgICBGaWxlTGlzdCxcXG4gICAgRmlsZVRvb2xiYXIsXFxufSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHtcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXG4gICAgU3RvcnlDYXRlZ29yaWVzXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDQtRmlsZS1hY3Rpb25zLm1kJztcXG5cXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5GaWxlQnJvd3NlckJhc2ljcztcXG5jb25zdCB0aXRsZSA9ICdVc2luZyBmaWxlIGFjdGlvbnMnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxuICAgIHBhcmFtZXRlcnM6IHtcXFwic3RvcnlTb3VyY2VcXFwiOntcXFwic291cmNlXFxcIjpcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIENob25reUFjdGlvbnMsXFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQnJvd3NlcixcXFxcbiAgICBGaWxlTGlzdCxcXFxcbiAgICBGaWxlVG9vbGJhcixcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcXFxuICAgIFN0b3J5Q2F0ZWdvcmllc1xcXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDQtRmlsZS1hY3Rpb25zLm1kJztcXFxcblxcXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxcXG5jb25zdCB0aXRsZSA9ICdVc2luZyBmaWxlIGFjdGlvbnMnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICAvLyBMb2cgYWN0aW9uIHRvIGNvbnNvbGVcXFxcbiAgICAgICAgXFxcXG4gICAgICAgIGNvbnNvbGUubG9nKCdcXFxcXFxcXG5BY3Rpb24gb2JqZWN0OicsIGFjdGlvbiwgJ1xcXFxcXFxcbkFjdGlvbiBkYXRhOicsIGRhdGEpO1xcXFxuXFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgRG9jdW1lbnRzJywgaXNEaXI6IHRydWUgfV07XFxcXG4gICAgY29uc3QgZmlsZXMgPSBbXFxcXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXFxcXG4gICAgICAgIHsgaWQ6ICdodW50ZXIyJywgbmFtZTogJ1Bhc3N3b3JkLnR4dCcgfSxcXFxcbiAgICAgICAgeyBpZDogJ2JFZjI0cScsIG5hbWU6ICdEcmFnICYgZHJvcCBmaWxlcyBoZXJlJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgY29uc3QgZmlsZUFjdGlvbnMgPSBbXFxcXG4gICAgICAgIENob25reUFjdGlvbnMuQ3JlYXRlRm9sZGVyLCAvLyBBZGRzIGEgYnV0dG9uIHRvIHRoZSB0b29sYmFyXFxcXG4gICAgICAgIENob25reUFjdGlvbnMuVXBsb2FkRmlsZXMsIC8vIEFkZHMgYSBidXR0b25cXFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Eb3dubG9hZEZpbGVzLCAvLyBBZGRzIGEgYnV0dG9uXFxcXG4gICAgICAgIENob25reUFjdGlvbnMuQ29weUZpbGVzLCAvLyBBZGRzIGEgYnV0dG9uIGFuZCBhIHNob3J0Y3V0OiBDdHJsK0NcXFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5EZWxldGVGaWxlcywgLy8gQWRkcyBhIGJ1dHRvbiBhbmQgYSBzaG9ydGN1dDogRGVsZXRlXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXFxcXFwibGl2ZS1leGFtcGxlXFxcXFxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFxcXFxcImxpdmUtZXhhbXBsZS1hY3Rpb25cXFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICA8c3Ryb25nPkNoZWNrIHlvdXIgYnJvd3NlciBjb25zb2xlIGZvciBsb2dnZWQgYWN0aW9ucyE8L3N0cm9uZz5cXFxcbiAgICAgICAgICAgIDwvZGl2PlxcXFxuXFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcXFxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtmaWxlQWN0aW9uc31cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCIsXFxcImxvY2F0aW9uc01hcFxcXCI6e1xcXCJhY3Rpb25zLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozMCxcXFwibGluZVxcXCI6MzN9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo3NX0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjMwLFxcXCJsaW5lXFxcIjozM30sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo3NX19fX0sXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgQWN0aW9uc0V4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgLy8gTG9nIGFjdGlvbiB0byBjb25zb2xlXFxuICAgICAgICBcXG4gICAgICAgIGNvbnNvbGUubG9nKCdcXFxcbkFjdGlvbiBvYmplY3Q6JywgYWN0aW9uLCAnXFxcXG5BY3Rpb24gZGF0YTonLCBkYXRhKTtcXG5cXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgRG9jdW1lbnRzJywgaXNEaXI6IHRydWUgfV07XFxuICAgIGNvbnN0IGZpbGVzID0gW1xcbiAgICAgICAgeyBpZDogJ21IZTRBMScsIG5hbWU6ICdNZWFuaW5nIG9mIGxpZmUudHh0Jywgc2l6ZTogMzE0MTUgfSxcXG4gICAgICAgIHsgaWQ6ICdodW50ZXIyJywgbmFtZTogJ1Bhc3N3b3JkLnR4dCcgfSxcXG4gICAgICAgIHsgaWQ6ICdiRWYyNHEnLCBuYW1lOiAnRHJhZyAmIGRyb3AgZmlsZXMgaGVyZScsIGlzRGlyOiB0cnVlIH0sXFxuICAgIF07XFxuXFxuICAgIGNvbnN0IGZpbGVBY3Rpb25zID0gW1xcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5DcmVhdGVGb2xkZXIsIC8vIEFkZHMgYSBidXR0b24gdG8gdGhlIHRvb2xiYXJcXG4gICAgICAgIENob25reUFjdGlvbnMuVXBsb2FkRmlsZXMsIC8vIEFkZHMgYSBidXR0b25cXG4gICAgICAgIENob25reUFjdGlvbnMuRG93bmxvYWRGaWxlcywgLy8gQWRkcyBhIGJ1dHRvblxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Db3B5RmlsZXMsIC8vIEFkZHMgYSBidXR0b24gYW5kIGEgc2hvcnRjdXQ6IEN0cmwrQ1xcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5EZWxldGVGaWxlcywgLy8gQWRkcyBhIGJ1dHRvbiBhbmQgYSBzaG9ydGN1dDogRGVsZXRlXFxuICAgIF07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwibGl2ZS1leGFtcGxlXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwibGl2ZS1leGFtcGxlLWFjdGlvblxcXCI+XFxuICAgICAgICAgICAgICAgIDxzdHJvbmc+Q2hlY2sgeW91ciBicm93c2VyIGNvbnNvbGUgZm9yIGxvZ2dlZCBhY3Rpb25zITwvc3Ryb25nPlxcbiAgICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2ZpbGVBY3Rpb25zfVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiYWN0aW9ucy1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozMCxcImxpbmVcIjo0MX0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjgzfSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjMwLFwibGluZVwiOjQxfSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjgzfX19O1xuICAgIFxuXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQge1xcbiAgICBDaG9ua3lBY3Rpb25zLFxcbiAgICBGaWxlQWN0aW9uLFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXG4gICAgRmlsZUJyb3dzZXIsXFxuICAgIEZpbGVMaXN0LFxcbiAgICBGaWxlVG9vbGJhcixcXG59IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQge1xcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcbiAgICBTdG9yeUNhdGVnb3JpZXNcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNC1GaWxlLWFjdGlvbnMubWQnO1xcblxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyQmFzaWNzO1xcbmNvbnN0IHRpdGxlID0gJ1VzaW5nIGZpbGUgYWN0aW9ucyc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXG4gICAgcGFyYW1ldGVyczoge1xcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIC8vIExvZyBhY3Rpb24gdG8gY29uc29sZVxcbiAgICAgICAgXFxuICAgICAgICBjb25zb2xlLmxvZygnXFxcXG5BY3Rpb24gb2JqZWN0OicsIGFjdGlvbiwgJ1xcXFxuQWN0aW9uIGRhdGE6JywgZGF0YSk7XFxuXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IERvY3VtZW50cycsIGlzRGlyOiB0cnVlIH1dO1xcbiAgICBjb25zdCBmaWxlcyA9IFtcXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXFxuICAgICAgICB7IGlkOiAnaHVudGVyMicsIG5hbWU6ICdQYXNzd29yZC50eHQnIH0sXFxuICAgICAgICB7IGlkOiAnYkVmMjRxJywgbmFtZTogJ0RyYWcgJiBkcm9wIGZpbGVzIGhlcmUnLCBpc0RpcjogdHJ1ZSB9LFxcbiAgICBdO1xcblxcbiAgICBjb25zdCBmaWxlQWN0aW9ucyA9IFtcXG4gICAgICAgIENob25reUFjdGlvbnMuQ3JlYXRlRm9sZGVyLCAvLyBBZGRzIGEgYnV0dG9uIHRvIHRoZSB0b29sYmFyXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLlVwbG9hZEZpbGVzLCAvLyBBZGRzIGEgYnV0dG9uXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkRvd25sb2FkRmlsZXMsIC8vIEFkZHMgYSBidXR0b25cXG4gICAgICAgIENob25reUFjdGlvbnMuQ29weUZpbGVzLCAvLyBBZGRzIGEgYnV0dG9uIGFuZCBhIHNob3J0Y3V0OiBDdHJsK0NcXG4gICAgICAgIENob25reUFjdGlvbnMuRGVsZXRlRmlsZXMsIC8vIEFkZHMgYSBidXR0b24gYW5kIGEgc2hvcnRjdXQ6IERlbGV0ZVxcbiAgICBdO1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImxpdmUtZXhhbXBsZVxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImxpdmUtZXhhbXBsZS1hY3Rpb25cXFwiPlxcbiAgICAgICAgICAgICAgICA8c3Ryb25nPkNoZWNrIHlvdXIgYnJvd3NlciBjb25zb2xlIGZvciBsb2dnZWQgYWN0aW9ucyE8L3N0cm9uZz5cXG4gICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtmaWxlQWN0aW9uc31cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIjtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcImFjdGlvbnMtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6MzN9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo3NX0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMCxcImxpbmVcIjozM30sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo3NX19fTtcbiAgICBcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcblxuaW1wb3J0IHtcbiAgICBDaG9ua3lBY3Rpb25zLFxuICAgIEZpbGVBY3Rpb24sXG4gICAgRmlsZUFjdGlvbkRhdGEsXG4gICAgRmlsZUJyb3dzZXIsXG4gICAgRmlsZUxpc3QsXG4gICAgRmlsZVRvb2xiYXIsXG59IGZyb20gJ2Nob25reSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQge1xuICAgIGNyZWF0ZURvY3NPYmplY3QsXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcbiAgICBTdG9yeUNhdGVnb3JpZXNcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XG4vLyBAdHMtaWdub3JlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA0LUZpbGUtYWN0aW9ucy5tZCc7XG5cbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyQmFzaWNzO1xuY29uc3QgdGl0bGUgPSAnVXNpbmcgZmlsZSBhY3Rpb25zJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1kZWZhdWx0LWV4cG9ydFxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxuICAgIHBhcmFtZXRlcnM6IHtcInN0b3J5U291cmNlXCI6e1wic291cmNlXCI6XCJcXG4gICAgICBcXG4gICAgICAvLyBAdHMtbm9jaGVja1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19TVE9SWV9fID0gXFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IHtcXFxcbiAgICBDaG9ua3lBY3Rpb25zLFxcXFxuICAgIEZpbGVBY3Rpb24sXFxcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxcXG4gICAgRmlsZUJyb3dzZXIsXFxcXG4gICAgRmlsZUxpc3QsXFxcXG4gICAgRmlsZVRvb2xiYXIsXFxcXG59IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXFxcbiAgICBTdG9yeUNhdGVnb3JpZXNcXFxcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA0LUZpbGUtYWN0aW9ucy5tZCc7XFxcXG5cXFxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyQmFzaWNzO1xcXFxuY29uc3QgdGl0bGUgPSAnVXNpbmcgZmlsZSBhY3Rpb25zJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBBY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgLy8gTG9nIGFjdGlvbiB0byBjb25zb2xlXFxcXG4gICAgICAgIFxcXFxuICAgICAgICBjb25zb2xlLmxvZygnXFxcXFxcXFxuQWN0aW9uIG9iamVjdDonLCBhY3Rpb24sICdcXFxcXFxcXG5BY3Rpb24gZGF0YTonLCBkYXRhKTtcXFxcblxcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IERvY3VtZW50cycsIGlzRGlyOiB0cnVlIH1dO1xcXFxuICAgIGNvbnN0IGZpbGVzID0gW1xcXFxuICAgICAgICB7IGlkOiAnbUhlNEExJywgbmFtZTogJ01lYW5pbmcgb2YgbGlmZS50eHQnLCBzaXplOiAzMTQxNSB9LFxcXFxuICAgICAgICB7IGlkOiAnaHVudGVyMicsIG5hbWU6ICdQYXNzd29yZC50eHQnIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdiRWYyNHEnLCBuYW1lOiAnRHJhZyAmIGRyb3AgZmlsZXMgaGVyZScsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIGNvbnN0IGZpbGVBY3Rpb25zID0gW1xcXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNyZWF0ZUZvbGRlciwgLy8gQWRkcyBhIGJ1dHRvbiB0byB0aGUgdG9vbGJhclxcXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLlVwbG9hZEZpbGVzLCAvLyBBZGRzIGEgYnV0dG9uXFxcXG4gICAgICAgIENob25reUFjdGlvbnMuRG93bmxvYWRGaWxlcywgLy8gQWRkcyBhIGJ1dHRvblxcXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNvcHlGaWxlcywgLy8gQWRkcyBhIGJ1dHRvbiBhbmQgYSBzaG9ydGN1dDogQ3RybCtDXFxcXG4gICAgICAgIENob25reUFjdGlvbnMuRGVsZXRlRmlsZXMsIC8vIEFkZHMgYSBidXR0b24gYW5kIGEgc2hvcnRjdXQ6IERlbGV0ZVxcXFxuICAgIF07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFxcXFxcImxpdmUtZXhhbXBsZVxcXFxcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcXFxcXCJsaXZlLWV4YW1wbGUtYWN0aW9uXFxcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgPHN0cm9uZz5DaGVjayB5b3VyIGJyb3dzZXIgY29uc29sZSBmb3IgbG9nZ2VkIGFjdGlvbnMhPC9zdHJvbmc+XFxcXG4gICAgICAgICAgICA8L2Rpdj5cXFxcblxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICBmaWxlQWN0aW9ucz17ZmlsZUFjdGlvbnN9XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiO1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XFxcImFjdGlvbnMtZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjMwLFxcXCJsaW5lXFxcIjozM30sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjc1fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzAsXFxcImxpbmVcXFwiOjMzfSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjc1fX19O1xcbiAgICBcXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHtcXG4gICAgQ2hvbmt5QWN0aW9ucyxcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVCcm93c2VyLFxcbiAgICBGaWxlTGlzdCxcXG4gICAgRmlsZVRvb2xiYXIsXFxufSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHtcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXG4gICAgU3RvcnlDYXRlZ29yaWVzXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDQtRmlsZS1hY3Rpb25zLm1kJztcXG5cXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5GaWxlQnJvd3NlckJhc2ljcztcXG5jb25zdCB0aXRsZSA9ICdVc2luZyBmaWxlIGFjdGlvbnMnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxuICAgIHBhcmFtZXRlcnM6IHtcXFwic3RvcnlTb3VyY2VcXFwiOntcXFwic291cmNlXFxcIjpcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIENob25reUFjdGlvbnMsXFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQnJvd3NlcixcXFxcbiAgICBGaWxlTGlzdCxcXFxcbiAgICBGaWxlVG9vbGJhcixcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcXFxuICAgIFN0b3J5Q2F0ZWdvcmllc1xcXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDQtRmlsZS1hY3Rpb25zLm1kJztcXFxcblxcXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxcXG5jb25zdCB0aXRsZSA9ICdVc2luZyBmaWxlIGFjdGlvbnMnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICAvLyBMb2cgYWN0aW9uIHRvIGNvbnNvbGVcXFxcbiAgICAgICAgXFxcXG4gICAgICAgIGNvbnNvbGUubG9nKCdcXFxcXFxcXG5BY3Rpb24gb2JqZWN0OicsIGFjdGlvbiwgJ1xcXFxcXFxcbkFjdGlvbiBkYXRhOicsIGRhdGEpO1xcXFxuXFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgRG9jdW1lbnRzJywgaXNEaXI6IHRydWUgfV07XFxcXG4gICAgY29uc3QgZmlsZXMgPSBbXFxcXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXFxcXG4gICAgICAgIHsgaWQ6ICdodW50ZXIyJywgbmFtZTogJ1Bhc3N3b3JkLnR4dCcgfSxcXFxcbiAgICAgICAgeyBpZDogJ2JFZjI0cScsIG5hbWU6ICdEcmFnICYgZHJvcCBmaWxlcyBoZXJlJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgY29uc3QgZmlsZUFjdGlvbnMgPSBbXFxcXG4gICAgICAgIENob25reUFjdGlvbnMuQ3JlYXRlRm9sZGVyLCAvLyBBZGRzIGEgYnV0dG9uIHRvIHRoZSB0b29sYmFyXFxcXG4gICAgICAgIENob25reUFjdGlvbnMuVXBsb2FkRmlsZXMsIC8vIEFkZHMgYSBidXR0b25cXFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Eb3dubG9hZEZpbGVzLCAvLyBBZGRzIGEgYnV0dG9uXFxcXG4gICAgICAgIENob25reUFjdGlvbnMuQ29weUZpbGVzLCAvLyBBZGRzIGEgYnV0dG9uIGFuZCBhIHNob3J0Y3V0OiBDdHJsK0NcXFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5EZWxldGVGaWxlcywgLy8gQWRkcyBhIGJ1dHRvbiBhbmQgYSBzaG9ydGN1dDogRGVsZXRlXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXFxcXFwibGl2ZS1leGFtcGxlXFxcXFxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFxcXFxcImxpdmUtZXhhbXBsZS1hY3Rpb25cXFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICA8c3Ryb25nPkNoZWNrIHlvdXIgYnJvd3NlciBjb25zb2xlIGZvciBsb2dnZWQgYWN0aW9ucyE8L3N0cm9uZz5cXFxcbiAgICAgICAgICAgIDwvZGl2PlxcXFxuXFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcXFxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtmaWxlQWN0aW9uc31cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCIsXFxcImxvY2F0aW9uc01hcFxcXCI6e1xcXCJhY3Rpb25zLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozMCxcXFwibGluZVxcXCI6MzN9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo3NX0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjMwLFxcXCJsaW5lXFxcIjozM30sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo3NX19fX0sXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgQWN0aW9uc0V4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgLy8gTG9nIGFjdGlvbiB0byBjb25zb2xlXFxuICAgICAgICBcXG4gICAgICAgIGNvbnNvbGUubG9nKCdcXFxcbkFjdGlvbiBvYmplY3Q6JywgYWN0aW9uLCAnXFxcXG5BY3Rpb24gZGF0YTonLCBkYXRhKTtcXG5cXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgRG9jdW1lbnRzJywgaXNEaXI6IHRydWUgfV07XFxuICAgIGNvbnN0IGZpbGVzID0gW1xcbiAgICAgICAgeyBpZDogJ21IZTRBMScsIG5hbWU6ICdNZWFuaW5nIG9mIGxpZmUudHh0Jywgc2l6ZTogMzE0MTUgfSxcXG4gICAgICAgIHsgaWQ6ICdodW50ZXIyJywgbmFtZTogJ1Bhc3N3b3JkLnR4dCcgfSxcXG4gICAgICAgIHsgaWQ6ICdiRWYyNHEnLCBuYW1lOiAnRHJhZyAmIGRyb3AgZmlsZXMgaGVyZScsIGlzRGlyOiB0cnVlIH0sXFxuICAgIF07XFxuXFxuICAgIGNvbnN0IGZpbGVBY3Rpb25zID0gW1xcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5DcmVhdGVGb2xkZXIsIC8vIEFkZHMgYSBidXR0b24gdG8gdGhlIHRvb2xiYXJcXG4gICAgICAgIENob25reUFjdGlvbnMuVXBsb2FkRmlsZXMsIC8vIEFkZHMgYSBidXR0b25cXG4gICAgICAgIENob25reUFjdGlvbnMuRG93bmxvYWRGaWxlcywgLy8gQWRkcyBhIGJ1dHRvblxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Db3B5RmlsZXMsIC8vIEFkZHMgYSBidXR0b24gYW5kIGEgc2hvcnRjdXQ6IEN0cmwrQ1xcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5EZWxldGVGaWxlcywgLy8gQWRkcyBhIGJ1dHRvbiBhbmQgYSBzaG9ydGN1dDogRGVsZXRlXFxuICAgIF07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwibGl2ZS1leGFtcGxlXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwibGl2ZS1leGFtcGxlLWFjdGlvblxcXCI+XFxuICAgICAgICAgICAgICAgIDxzdHJvbmc+Q2hlY2sgeW91ciBicm93c2VyIGNvbnNvbGUgZm9yIGxvZ2dlZCBhY3Rpb25zITwvc3Ryb25nPlxcbiAgICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2ZpbGVBY3Rpb25zfVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiLFwibG9jYXRpb25zTWFwXCI6e1wiYWN0aW9ucy1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozMCxcImxpbmVcIjo0MX0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjgzfSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjMwLFwibGluZVwiOjQxfSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjgzfX19fSxcInN0b3J5U291cmNlXCI6e1wic291cmNlXCI6XCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHtcXG4gICAgQ2hvbmt5QWN0aW9ucyxcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVCcm93c2VyLFxcbiAgICBGaWxlTGlzdCxcXG4gICAgRmlsZVRvb2xiYXIsXFxufSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHtcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXG4gICAgU3RvcnlDYXRlZ29yaWVzXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDQtRmlsZS1hY3Rpb25zLm1kJztcXG5cXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5GaWxlQnJvd3NlckJhc2ljcztcXG5jb25zdCB0aXRsZSA9ICdVc2luZyBmaWxlIGFjdGlvbnMnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxuICAgIHBhcmFtZXRlcnM6IHtcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBBY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICAvLyBMb2cgYWN0aW9uIHRvIGNvbnNvbGVcXG4gICAgICAgIFxcbiAgICAgICAgY29uc29sZS5sb2coJ1xcXFxuQWN0aW9uIG9iamVjdDonLCBhY3Rpb24sICdcXFxcbkFjdGlvbiBkYXRhOicsIGRhdGEpO1xcblxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXG4gICAgfTtcXG5cXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBEb2N1bWVudHMnLCBpc0RpcjogdHJ1ZSB9XTtcXG4gICAgY29uc3QgZmlsZXMgPSBbXFxuICAgICAgICB7IGlkOiAnbUhlNEExJywgbmFtZTogJ01lYW5pbmcgb2YgbGlmZS50eHQnLCBzaXplOiAzMTQxNSB9LFxcbiAgICAgICAgeyBpZDogJ2h1bnRlcjInLCBuYW1lOiAnUGFzc3dvcmQudHh0JyB9LFxcbiAgICAgICAgeyBpZDogJ2JFZjI0cScsIG5hbWU6ICdEcmFnICYgZHJvcCBmaWxlcyBoZXJlJywgaXNEaXI6IHRydWUgfSxcXG4gICAgXTtcXG5cXG4gICAgY29uc3QgZmlsZUFjdGlvbnMgPSBbXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNyZWF0ZUZvbGRlciwgLy8gQWRkcyBhIGJ1dHRvbiB0byB0aGUgdG9vbGJhclxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5VcGxvYWRGaWxlcywgLy8gQWRkcyBhIGJ1dHRvblxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Eb3dubG9hZEZpbGVzLCAvLyBBZGRzIGEgYnV0dG9uXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNvcHlGaWxlcywgLy8gQWRkcyBhIGJ1dHRvbiBhbmQgYSBzaG9ydGN1dDogQ3RybCtDXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkRlbGV0ZUZpbGVzLCAvLyBBZGRzIGEgYnV0dG9uIGFuZCBhIHNob3J0Y3V0OiBEZWxldGVcXG4gICAgXTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJsaXZlLWV4YW1wbGVcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJsaXZlLWV4YW1wbGUtYWN0aW9uXFxcIj5cXG4gICAgICAgICAgICAgICAgPHN0cm9uZz5DaGVjayB5b3VyIGJyb3dzZXIgY29uc29sZSBmb3IgbG9nZ2VkIGFjdGlvbnMhPC9zdHJvbmc+XFxuICAgICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcbiAgICAgICAgICAgICAgICBmaWxlQWN0aW9ucz17ZmlsZUFjdGlvbnN9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCIsXCJsb2NhdGlvbnNNYXBcIjp7XCJhY3Rpb25zLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjMwLFwibGluZVwiOjMzfSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6NzV9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6MzN9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6NzV9fX19LFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXG4gICAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBBY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcbiAgICAgICAgLy8gTG9nIGFjdGlvbiB0byBjb25zb2xlXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUubG9nKCdcXG5BY3Rpb24gb2JqZWN0OicsIGFjdGlvbiwgJ1xcbkFjdGlvbiBkYXRhOicsIGRhdGEpO1xuXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgRG9jdW1lbnRzJywgaXNEaXI6IHRydWUgfV07XG4gICAgY29uc3QgZmlsZXMgPSBbXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXG4gICAgICAgIHsgaWQ6ICdodW50ZXIyJywgbmFtZTogJ1Bhc3N3b3JkLnR4dCcgfSxcbiAgICAgICAgeyBpZDogJ2JFZjI0cScsIG5hbWU6ICdEcmFnICYgZHJvcCBmaWxlcyBoZXJlJywgaXNEaXI6IHRydWUgfSxcbiAgICBdO1xuXG4gICAgY29uc3QgZmlsZUFjdGlvbnMgPSBbXG4gICAgICAgIENob25reUFjdGlvbnMuQ3JlYXRlRm9sZGVyLCAvLyBBZGRzIGEgYnV0dG9uIHRvIHRoZSB0b29sYmFyXG4gICAgICAgIENob25reUFjdGlvbnMuVXBsb2FkRmlsZXMsIC8vIEFkZHMgYSBidXR0b25cbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Eb3dubG9hZEZpbGVzLCAvLyBBZGRzIGEgYnV0dG9uXG4gICAgICAgIENob25reUFjdGlvbnMuQ29weUZpbGVzLCAvLyBBZGRzIGEgYnV0dG9uIGFuZCBhIHNob3J0Y3V0OiBDdHJsK0NcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5EZWxldGVGaWxlcywgLy8gQWRkcyBhIGJ1dHRvbiBhbmQgYSBzaG9ydGN1dDogRGVsZXRlXG4gICAgXTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGl2ZS1leGFtcGxlXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxpdmUtZXhhbXBsZS1hY3Rpb25cIj5cbiAgICAgICAgICAgICAgICA8c3Ryb25nPkNoZWNrIHlvdXIgYnJvd3NlciBjb25zb2xlIGZvciBsb2dnZWQgYWN0aW9ucyE8L3N0cm9uZz5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtmaWxlQWN0aW9uc31cbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IFwiRXZlcnkgYXBwbGljYXRpb24gdXNpbmcgQ2hvbmt5IHdpbGwgYmUgZGlmZmVyZW50LiBTb21lIHdpbGwgcmVxdWlyZSBhIGZlYXR1cmUgdG9cXG51cGxvYWQgZmlsZXMsIG90aGVyIHdpbGwgbmVlZCB0byBzdXBwb3J0IGN1dHRpbmcgJiBwYXN0aW5nLiBCb3R0b20gbGluZSAtXFxucmVxdWlyZW1lbnRzIHdpbGwgZGlmZmVyISBDaG9ua3kgdHJpZXMgdG8gYWRkcmVzcyB0aGlzIHByb2JsZW0gdXNpbmcgKipGaWxlIEFjdGlvbnMqKlxcbmFuZCAqKl9UaGVfIEFjdGlvbiBIYW5kbGVyKiouIFRoaXMgc2VjdGlvbiBjb3ZlcnMgZmlsZSBhY3Rpb25zLCBhbmQgdGhlIG5leHQgc2VjdGlvbixcXG5fRGVmaW5pbmcgYW4gYWN0aW9uIGhhbmRsZXJfLCBjb3ZlcnMgdGhlIGFjdGlvbiBoYW5kbGVyIGl0c2VsZi5cXG5cXG4jIyBGaWxlIGFjdGlvbnNcXG5cXG4qKkZpbGUgQWN0aW9ucyoqIGFyZSBhIHByZXR0eSBicm9hZCBjb25jZXB0IGluIHRoZSBDaG9ua3kgZnJhbWV3b3JrLiBBdCB0aGVpciBlc3NlbmNlLFxcbnRoZXkgZGVzY3JpYmUgd2hhdCBmaWxlIG9wZXJhdGlvbnMgdGhlIHVzZXIgY2FuIGNhcnJ5IG91dC4gVGhyb3VnaCBhZGRpdGlvbmFsXFxuY29uZmlndXJhdGlvbiwgZmlsZSBhY3Rpb25zIGNhbiBiZSB1c2VkIHRvIGRlZmluZSAqKnRvb2xiYXIgYnV0dG9ucyoqIGFuZFxcbioqa2V5Ym9hcmQgc2hvcnRjdXRzKiouIEhlcmUgYXJlIHNvbWUgZXhhbXBsZXMgb2YgZmlsZSBhY3Rpb25zOlxcblxcbi0gICAqKkRlbGV0aW5nIGZpbGVzLioqIFlvdSBjYW4gY3JlYXRlIGEgZmlsZSBhY3Rpb24gdGhhdCB3aWxsIGFkZCBhIGBEZWxldGVgIGJ1dHRvblxcbiAgICB0byB0aGUgdG9vbGJhci4gWW91IGNhbiBhbHNvIG1ha2UgaXQgc28gdGhlIGFjdGlvbiBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgdXNlclxcbiAgICBwcmVzc2VzIGBEZWxldGVgIG9uIHRoZWlyIGtleWJvYXJkLiBUaGUgYWN0aW9uIHdpbGwgb25seSB3b3JrIHdoZW4gb25lIG9yIG1vcmVcXG4gICAgZmlsZXMgYXJlIHNlbGVjdGVkLlxcbi0gICAqKlVwbG9hZCBmaWxlcy4qKiBZb3UgY291bGQgZGVmaW5lIGFuIGFjdGlvbiB0aGF0IHdvdWxkIGFkZCBhbiBgVXBsb2FkIGZpbGVzYFxcbiAgICBidXR0b24gdG8gdGhlIHRvb2xiYXIuIFRoZSBidXR0b24gd2lsbCBhbHdheXMgYmUgZW5hYmxlZCwgcmVnYXJkbGVzcyBvZiBmaWxlXFxuICAgIHNlbGVjdGlvbi5cXG5cXG5Gb3IgeW91ciBjb252ZW5pZW5jZSwgQ2hvbmt5IHBhY2thZ2UgaW5jbHVkZXMgZGVmaW5pdGlvbnMgZm9yIG1hbnkgY29tbW9uIGZpbGVcXG5hY3Rpb25zLCBpbmNsdWRpbmcgdGhlIG9uZXMgZGVzY3JpYmVkIGFib3ZlLiBZb3UgY2FuIGltcG9ydCB0aGVtIGZyb20gdGhlIHBhY2thZ2UgYXNcXG5gQ2hvbmt5QWN0aW9uc2AsIGFuZCBhY2Nlc3Mgc3BlY2lmaWMgYWN0aW9ucyBsaWtlIHRoaXM6IGBDaG9ua3lBY3Rpb25zLkRlbGV0ZUZpbGVzYC5cXG5Zb3UgY2FuIGZpbmQgdGhlIGZ1bGwgbGlzdCBvZiBwcmUtZGVmaW5lZCBhY3Rpb25zXFxuW29uIEdpdEh1Yl0oaHR0cHM6Ly9naXRodWIuY29tL1RpbWJvS1ovQ2hvbmt5L2Jsb2IvMS54L3NyYy91dGlsL2ZpbGUtYWN0aW9ucy1kZWZpbml0aW9ucy50cykuXFxuXFxuSW50ZXJuYWxseSwgQ2hvbmt5IGVuYWJsZXMgc29tZSBiYXNpYyBhY3Rpb25zIGJ5IGRlZmF1bHQuIFRoZXNlIGluY2x1ZGUgXFxcIk9wZW5cXG5GaWxlc1xcXCIsIFxcXCJTZWxlY3QgQWxsIEZpbGVzXFxcIiwgXFxcIkNsZWFyIFNlbGVjdGlvblxcXCIgYW5kIHNldmVyYWwgb3RoZXJzLiBZb3UgY2FuIHNlZSB0aGVcXG5mdWxsIGxpc3Qgb2YgZGVmYXVsdCBhY3Rpb25zIGluIHRoZSBsaW5rIGFib3ZlLlxcblxcbiMjIFBhc3NpbmcgZmlsZSBhY3Rpb25zIHRvIGBGaWxlQnJvd3NlcmBcXG5cXG5BY3Rpb24gZGVmaW5pdGlvbnMgaGF2ZSB0byBiZSBwYXNzZWQgdG8gdGhlIGBGaWxlQnJvd3NlcmAgY29tcG9uZW50IHZpYSB0aGVcXG5gZmlsZUFjdGlvbnNgIHByb3BzLiBUaGUgc25pcHBldCBiZWxvdyBzaG93cyBob3cgeW91IGNvdWxkIGVuYWJsZSBzb21lIG9mIHRoZVxcbnByZWRlZmluZWQgZmlsZSBhY3Rpb25zLlxcblxcbmBgYHRzeFxcbmltcG9ydCB7IEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIsIENob25reUFjdGlvbnMgfSBmcm9tICdjaG9ua3knO1xcblxcbmV4cG9ydCBjb25zdCBNeUNvbXBvbmVudCA9ICgpID0+IHtcXG4gICAgY29uc3QgZmlsZUFjdGlvbnMgPSBbXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNyZWF0ZUZvbGRlciwgLy8gQWRkcyBhIGJ1dHRvbiB0byB0aGUgdG9vbGJhclxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5VcGxvYWRGaWxlcywgLy8gQWRkcyBhIGJ1dHRvblxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Eb3dubG9hZEZpbGVzLCAvLyBBZGRzIGEgYnV0dG9uXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNvcHlGaWxlcywgLy8gQWRkcyBhIGJ1dHRvbiBhbmQgYSBzaG9ydGN1dDogQ3RybCtDXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkRlbGV0ZUZpbGVzLCAvLyBBZGRzIGEgYnV0dG9uIGFuZCBhIHNob3J0Y3V0OiBEZWxldGVcXG4gICAgXTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxGaWxlQnJvd3NlciBmaWxlcz17W119IGZpbGVBY3Rpb25zPXtmaWxlQWN0aW9uc30+XFxuICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cXG4gICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICk7XFxufTtcXG5gYGBcXG5cXG5UaGUgX0xpdmUgRXhhbXBsZV8gYmVsb3cgc2hvdyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgdGhlIGNvZGUgZnJvbSBhYm92ZS4gTm90ZSB0aGVcXG5leHRyYSBidXR0b25zIGluIHRoZSB0b29sYmFyIGFuZCB0aGUgbmV3IHNob3J0Y3V0cyB0aGF0IG5vdyB3b3JrIC0gYEN0cmwrQ2AgYW5kXFxuYERlbGV0ZWAuXFxuXCI7IiwiXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIENob25reUFjdGlvbnMsXFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQnJvd3NlcixcXFxcbiAgICBGaWxlTGlzdCxcXFxcbiAgICBGaWxlVG9vbGJhcixcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcXFxuICAgIFN0b3J5Q2F0ZWdvcmllc1xcXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDUtRmlsZS1hY3Rpb24taGFuZGxlci5tZCc7XFxcXG5cXFxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyQmFzaWNzO1xcXFxuY29uc3QgdGl0bGUgPSAnRGVmaW5pbmcgYW4gYWN0aW9uIGhhbmRsZXInO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICAvLyBMb2cgYWN0aW9uIHRvIGNvbnNvbGVcXFxcbiAgICAgICAgXFxcXG4gICAgICAgIGNvbnNvbGUubG9nKCdcXFxcXFxcXG5BY3Rpb24gb2JqZWN0OicsIGFjdGlvbiwgJ1xcXFxcXFxcbkFjdGlvbiBkYXRhOicsIGRhdGEpO1xcXFxuXFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgRG9jdW1lbnRzJywgaXNEaXI6IHRydWUgfV07XFxcXG4gICAgY29uc3QgZmlsZXMgPSBbXFxcXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXFxcXG4gICAgICAgIHsgaWQ6ICdodW50ZXIyJywgbmFtZTogJ1Bhc3N3b3JkLnR4dCcgfSxcXFxcbiAgICAgICAgeyBpZDogJ2JFZjI0cScsIG5hbWU6ICdEcmFnICYgZHJvcCBmaWxlcyBoZXJlJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgY29uc3QgZmlsZUFjdGlvbnMgPSBbXFxcXG4gICAgICAgIENob25reUFjdGlvbnMuQ3JlYXRlRm9sZGVyLFxcXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLlVwbG9hZEZpbGVzLFxcXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkRvd25sb2FkRmlsZXMsXFxcXG4gICAgICAgIENob25reUFjdGlvbnMuQ29weUZpbGVzLFxcXFxuICAgIF07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFxcXFxcImxpdmUtZXhhbXBsZVxcXFxcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcXFxcXCJsaXZlLWV4YW1wbGUtYWN0aW9uXFxcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgPHN0cm9uZz5DaGVjayB5b3VyIGJyb3dzZXIgY29uc29sZSBmb3IgbG9nZ2VkIGFjdGlvbnMhPC9zdHJvbmc+XFxcXG4gICAgICAgICAgICA8L2Rpdj5cXFxcblxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICBmaWxlQWN0aW9ucz17ZmlsZUFjdGlvbnN9XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiO1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XFxcImFjdGlvbnMtZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjMwLFxcXCJsaW5lXFxcIjozM30sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjc0fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzAsXFxcImxpbmVcXFwiOjMzfSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjc0fX19O1xcbiAgICBcXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHtcXG4gICAgQ2hvbmt5QWN0aW9ucyxcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVCcm93c2VyLFxcbiAgICBGaWxlTGlzdCxcXG4gICAgRmlsZVRvb2xiYXIsXFxufSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHtcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXG4gICAgU3RvcnlDYXRlZ29yaWVzXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDUtRmlsZS1hY3Rpb24taGFuZGxlci5tZCc7XFxuXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxuY29uc3QgdGl0bGUgPSAnRGVmaW5pbmcgYW4gYWN0aW9uIGhhbmRsZXInO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxuICAgIHBhcmFtZXRlcnM6IHtcXFwic3RvcnlTb3VyY2VcXFwiOntcXFwic291cmNlXFxcIjpcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIENob25reUFjdGlvbnMsXFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQnJvd3NlcixcXFxcbiAgICBGaWxlTGlzdCxcXFxcbiAgICBGaWxlVG9vbGJhcixcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcXFxuICAgIFN0b3J5Q2F0ZWdvcmllc1xcXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDUtRmlsZS1hY3Rpb24taGFuZGxlci5tZCc7XFxcXG5cXFxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyQmFzaWNzO1xcXFxuY29uc3QgdGl0bGUgPSAnRGVmaW5pbmcgYW4gYWN0aW9uIGhhbmRsZXInO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICAvLyBMb2cgYWN0aW9uIHRvIGNvbnNvbGVcXFxcbiAgICAgICAgXFxcXG4gICAgICAgIGNvbnNvbGUubG9nKCdcXFxcXFxcXG5BY3Rpb24gb2JqZWN0OicsIGFjdGlvbiwgJ1xcXFxcXFxcbkFjdGlvbiBkYXRhOicsIGRhdGEpO1xcXFxuXFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgRG9jdW1lbnRzJywgaXNEaXI6IHRydWUgfV07XFxcXG4gICAgY29uc3QgZmlsZXMgPSBbXFxcXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXFxcXG4gICAgICAgIHsgaWQ6ICdodW50ZXIyJywgbmFtZTogJ1Bhc3N3b3JkLnR4dCcgfSxcXFxcbiAgICAgICAgeyBpZDogJ2JFZjI0cScsIG5hbWU6ICdEcmFnICYgZHJvcCBmaWxlcyBoZXJlJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgY29uc3QgZmlsZUFjdGlvbnMgPSBbXFxcXG4gICAgICAgIENob25reUFjdGlvbnMuQ3JlYXRlRm9sZGVyLFxcXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLlVwbG9hZEZpbGVzLFxcXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkRvd25sb2FkRmlsZXMsXFxcXG4gICAgICAgIENob25reUFjdGlvbnMuQ29weUZpbGVzLFxcXFxuICAgIF07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFxcXFxcImxpdmUtZXhhbXBsZVxcXFxcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcXFxcXCJsaXZlLWV4YW1wbGUtYWN0aW9uXFxcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgPHN0cm9uZz5DaGVjayB5b3VyIGJyb3dzZXIgY29uc29sZSBmb3IgbG9nZ2VkIGFjdGlvbnMhPC9zdHJvbmc+XFxcXG4gICAgICAgICAgICA8L2Rpdj5cXFxcblxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICBmaWxlQWN0aW9ucz17ZmlsZUFjdGlvbnN9XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiLFxcXCJsb2NhdGlvbnNNYXBcXFwiOntcXFwiYWN0aW9ucy1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzAsXFxcImxpbmVcXFwiOjMzfSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NzR9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozMCxcXFwibGluZVxcXCI6MzN9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NzR9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIC8vIExvZyBhY3Rpb24gdG8gY29uc29sZVxcbiAgICAgICAgXFxuICAgICAgICBjb25zb2xlLmxvZygnXFxcXG5BY3Rpb24gb2JqZWN0OicsIGFjdGlvbiwgJ1xcXFxuQWN0aW9uIGRhdGE6JywgZGF0YSk7XFxuXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IERvY3VtZW50cycsIGlzRGlyOiB0cnVlIH1dO1xcbiAgICBjb25zdCBmaWxlcyA9IFtcXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXFxuICAgICAgICB7IGlkOiAnaHVudGVyMicsIG5hbWU6ICdQYXNzd29yZC50eHQnIH0sXFxuICAgICAgICB7IGlkOiAnYkVmMjRxJywgbmFtZTogJ0RyYWcgJiBkcm9wIGZpbGVzIGhlcmUnLCBpc0RpcjogdHJ1ZSB9LFxcbiAgICBdO1xcblxcbiAgICBjb25zdCBmaWxlQWN0aW9ucyA9IFtcXG4gICAgICAgIENob25reUFjdGlvbnMuQ3JlYXRlRm9sZGVyLFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5VcGxvYWRGaWxlcyxcXG4gICAgICAgIENob25reUFjdGlvbnMuRG93bmxvYWRGaWxlcyxcXG4gICAgICAgIENob25reUFjdGlvbnMuQ29weUZpbGVzLFxcbiAgICBdO1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImxpdmUtZXhhbXBsZVxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImxpdmUtZXhhbXBsZS1hY3Rpb25cXFwiPlxcbiAgICAgICAgICAgICAgICA8c3Ryb25nPkNoZWNrIHlvdXIgYnJvd3NlciBjb25zb2xlIGZvciBsb2dnZWQgYWN0aW9ucyE8L3N0cm9uZz5cXG4gICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtmaWxlQWN0aW9uc31cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIjtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcImFjdGlvbnMtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6NDF9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo4Mn0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMCxcImxpbmVcIjo0MX0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo4Mn19fTtcbiAgICBcblxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHtcXG4gICAgQ2hvbmt5QWN0aW9ucyxcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVCcm93c2VyLFxcbiAgICBGaWxlTGlzdCxcXG4gICAgRmlsZVRvb2xiYXIsXFxufSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHtcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXG4gICAgU3RvcnlDYXRlZ29yaWVzXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDUtRmlsZS1hY3Rpb24taGFuZGxlci5tZCc7XFxuXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxuY29uc3QgdGl0bGUgPSAnRGVmaW5pbmcgYW4gYWN0aW9uIGhhbmRsZXInO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxuICAgIHBhcmFtZXRlcnM6IHtcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBBY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICAvLyBMb2cgYWN0aW9uIHRvIGNvbnNvbGVcXG4gICAgICAgIFxcbiAgICAgICAgY29uc29sZS5sb2coJ1xcXFxuQWN0aW9uIG9iamVjdDonLCBhY3Rpb24sICdcXFxcbkFjdGlvbiBkYXRhOicsIGRhdGEpO1xcblxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXG4gICAgfTtcXG5cXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBEb2N1bWVudHMnLCBpc0RpcjogdHJ1ZSB9XTtcXG4gICAgY29uc3QgZmlsZXMgPSBbXFxuICAgICAgICB7IGlkOiAnbUhlNEExJywgbmFtZTogJ01lYW5pbmcgb2YgbGlmZS50eHQnLCBzaXplOiAzMTQxNSB9LFxcbiAgICAgICAgeyBpZDogJ2h1bnRlcjInLCBuYW1lOiAnUGFzc3dvcmQudHh0JyB9LFxcbiAgICAgICAgeyBpZDogJ2JFZjI0cScsIG5hbWU6ICdEcmFnICYgZHJvcCBmaWxlcyBoZXJlJywgaXNEaXI6IHRydWUgfSxcXG4gICAgXTtcXG5cXG4gICAgY29uc3QgZmlsZUFjdGlvbnMgPSBbXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNyZWF0ZUZvbGRlcixcXG4gICAgICAgIENob25reUFjdGlvbnMuVXBsb2FkRmlsZXMsXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkRvd25sb2FkRmlsZXMsXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNvcHlGaWxlcyxcXG4gICAgXTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJsaXZlLWV4YW1wbGVcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJsaXZlLWV4YW1wbGUtYWN0aW9uXFxcIj5cXG4gICAgICAgICAgICAgICAgPHN0cm9uZz5DaGVjayB5b3VyIGJyb3dzZXIgY29uc29sZSBmb3IgbG9nZ2VkIGFjdGlvbnMhPC9zdHJvbmc+XFxuICAgICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcbiAgICAgICAgICAgICAgICBmaWxlQWN0aW9ucz17ZmlsZUFjdGlvbnN9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCI7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCJhY3Rpb25zLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjMwLFwibGluZVwiOjMzfSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6NzR9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6MzN9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6NzR9fX07XG4gICAgXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XG5cbmltcG9ydCB7XG4gICAgQ2hvbmt5QWN0aW9ucyxcbiAgICBGaWxlQWN0aW9uLFxuICAgIEZpbGVBY3Rpb25EYXRhLFxuICAgIEZpbGVCcm93c2VyLFxuICAgIEZpbGVMaXN0LFxuICAgIEZpbGVUb29sYmFyLFxufSBmcm9tICdjaG9ua3knO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHtcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXG4gICAgU3RvcnlDYXRlZ29yaWVzXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xuLy8gQHRzLWlnbm9yZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNS1GaWxlLWFjdGlvbi1oYW5kbGVyLm1kJztcblxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XG5jb25zdCB0aXRsZSA9ICdEZWZpbmluZyBhbiBhY3Rpb24gaGFuZGxlcic7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZGVmYXVsdC1leHBvcnRcbmV4cG9ydCBkZWZhdWx0IHtcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcbiAgICBwYXJhbWV0ZXJzOiB7XCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiXFxuICAgICAgXFxuICAgICAgLy8gQHRzLW5vY2hlY2tcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fU1RPUllfXyA9IFxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgQ2hvbmt5QWN0aW9ucyxcXFxcbiAgICBGaWxlQWN0aW9uLFxcXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcXFxuICAgIEZpbGVCcm93c2VyLFxcXFxuICAgIEZpbGVMaXN0LFxcXFxuICAgIEZpbGVUb29sYmFyLFxcXFxufSBmcm9tICdjaG9ua3knO1xcXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHtcXFxcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxcXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxcXG4gICAgU3RvcnlDYXRlZ29yaWVzXFxcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNS1GaWxlLWFjdGlvbi1oYW5kbGVyLm1kJztcXFxcblxcXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxcXG5jb25zdCB0aXRsZSA9ICdEZWZpbmluZyBhbiBhY3Rpb24gaGFuZGxlcic7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgQWN0aW9uc0V4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgIC8vIExvZyBhY3Rpb24gdG8gY29uc29sZVxcXFxuICAgICAgICBcXFxcbiAgICAgICAgY29uc29sZS5sb2coJ1xcXFxcXFxcbkFjdGlvbiBvYmplY3Q6JywgYWN0aW9uLCAnXFxcXFxcXFxuQWN0aW9uIGRhdGE6JywgZGF0YSk7XFxcXG5cXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBEb2N1bWVudHMnLCBpc0RpcjogdHJ1ZSB9XTtcXFxcbiAgICBjb25zdCBmaWxlcyA9IFtcXFxcbiAgICAgICAgeyBpZDogJ21IZTRBMScsIG5hbWU6ICdNZWFuaW5nIG9mIGxpZmUudHh0Jywgc2l6ZTogMzE0MTUgfSxcXFxcbiAgICAgICAgeyBpZDogJ2h1bnRlcjInLCBuYW1lOiAnUGFzc3dvcmQudHh0JyB9LFxcXFxuICAgICAgICB7IGlkOiAnYkVmMjRxJywgbmFtZTogJ0RyYWcgJiBkcm9wIGZpbGVzIGhlcmUnLCBpc0RpcjogdHJ1ZSB9LFxcXFxuICAgIF07XFxcXG5cXFxcbiAgICBjb25zdCBmaWxlQWN0aW9ucyA9IFtcXFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5DcmVhdGVGb2xkZXIsXFxcXG4gICAgICAgIENob25reUFjdGlvbnMuVXBsb2FkRmlsZXMsXFxcXG4gICAgICAgIENob25reUFjdGlvbnMuRG93bmxvYWRGaWxlcyxcXFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Db3B5RmlsZXMsXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXFxcXFwibGl2ZS1leGFtcGxlXFxcXFxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFxcXFxcImxpdmUtZXhhbXBsZS1hY3Rpb25cXFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICA8c3Ryb25nPkNoZWNrIHlvdXIgYnJvd3NlciBjb25zb2xlIGZvciBsb2dnZWQgYWN0aW9ucyE8L3N0cm9uZz5cXFxcbiAgICAgICAgICAgIDwvZGl2PlxcXFxuXFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcXFxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtmaWxlQWN0aW9uc31cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwiYWN0aW9ucy1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzAsXFxcImxpbmVcXFwiOjMzfSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NzR9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozMCxcXFwibGluZVxcXCI6MzN9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NzR9fX07XFxuICAgIFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQge1xcbiAgICBDaG9ua3lBY3Rpb25zLFxcbiAgICBGaWxlQWN0aW9uLFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXG4gICAgRmlsZUJyb3dzZXIsXFxuICAgIEZpbGVMaXN0LFxcbiAgICBGaWxlVG9vbGJhcixcXG59IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQge1xcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcbiAgICBTdG9yeUNhdGVnb3JpZXNcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNS1GaWxlLWFjdGlvbi1oYW5kbGVyLm1kJztcXG5cXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5GaWxlQnJvd3NlckJhc2ljcztcXG5jb25zdCB0aXRsZSA9ICdEZWZpbmluZyBhbiBhY3Rpb24gaGFuZGxlcic7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXG4gICAgcGFyYW1ldGVyczoge1xcXCJzdG9yeVNvdXJjZVxcXCI6e1xcXCJzb3VyY2VcXFwiOlxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgQ2hvbmt5QWN0aW9ucyxcXFxcbiAgICBGaWxlQWN0aW9uLFxcXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcXFxuICAgIEZpbGVCcm93c2VyLFxcXFxuICAgIEZpbGVMaXN0LFxcXFxuICAgIEZpbGVUb29sYmFyLFxcXFxufSBmcm9tICdjaG9ua3knO1xcXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHtcXFxcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxcXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxcXG4gICAgU3RvcnlDYXRlZ29yaWVzXFxcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNS1GaWxlLWFjdGlvbi1oYW5kbGVyLm1kJztcXFxcblxcXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxcXG5jb25zdCB0aXRsZSA9ICdEZWZpbmluZyBhbiBhY3Rpb24gaGFuZGxlcic7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgQWN0aW9uc0V4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgIC8vIExvZyBhY3Rpb24gdG8gY29uc29sZVxcXFxuICAgICAgICBcXFxcbiAgICAgICAgY29uc29sZS5sb2coJ1xcXFxcXFxcbkFjdGlvbiBvYmplY3Q6JywgYWN0aW9uLCAnXFxcXFxcXFxuQWN0aW9uIGRhdGE6JywgZGF0YSk7XFxcXG5cXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBEb2N1bWVudHMnLCBpc0RpcjogdHJ1ZSB9XTtcXFxcbiAgICBjb25zdCBmaWxlcyA9IFtcXFxcbiAgICAgICAgeyBpZDogJ21IZTRBMScsIG5hbWU6ICdNZWFuaW5nIG9mIGxpZmUudHh0Jywgc2l6ZTogMzE0MTUgfSxcXFxcbiAgICAgICAgeyBpZDogJ2h1bnRlcjInLCBuYW1lOiAnUGFzc3dvcmQudHh0JyB9LFxcXFxuICAgICAgICB7IGlkOiAnYkVmMjRxJywgbmFtZTogJ0RyYWcgJiBkcm9wIGZpbGVzIGhlcmUnLCBpc0RpcjogdHJ1ZSB9LFxcXFxuICAgIF07XFxcXG5cXFxcbiAgICBjb25zdCBmaWxlQWN0aW9ucyA9IFtcXFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5DcmVhdGVGb2xkZXIsXFxcXG4gICAgICAgIENob25reUFjdGlvbnMuVXBsb2FkRmlsZXMsXFxcXG4gICAgICAgIENob25reUFjdGlvbnMuRG93bmxvYWRGaWxlcyxcXFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Db3B5RmlsZXMsXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXFxcXFwibGl2ZS1leGFtcGxlXFxcXFxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFxcXFxcImxpdmUtZXhhbXBsZS1hY3Rpb25cXFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICA8c3Ryb25nPkNoZWNrIHlvdXIgYnJvd3NlciBjb25zb2xlIGZvciBsb2dnZWQgYWN0aW9ucyE8L3N0cm9uZz5cXFxcbiAgICAgICAgICAgIDwvZGl2PlxcXFxuXFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcXFxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtmaWxlQWN0aW9uc31cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCIsXFxcImxvY2F0aW9uc01hcFxcXCI6e1xcXCJhY3Rpb25zLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozMCxcXFwibGluZVxcXCI6MzN9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo3NH0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjMwLFxcXCJsaW5lXFxcIjozM30sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo3NH19fX0sXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgQWN0aW9uc0V4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgLy8gTG9nIGFjdGlvbiB0byBjb25zb2xlXFxuICAgICAgICBcXG4gICAgICAgIGNvbnNvbGUubG9nKCdcXFxcbkFjdGlvbiBvYmplY3Q6JywgYWN0aW9uLCAnXFxcXG5BY3Rpb24gZGF0YTonLCBkYXRhKTtcXG5cXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgRG9jdW1lbnRzJywgaXNEaXI6IHRydWUgfV07XFxuICAgIGNvbnN0IGZpbGVzID0gW1xcbiAgICAgICAgeyBpZDogJ21IZTRBMScsIG5hbWU6ICdNZWFuaW5nIG9mIGxpZmUudHh0Jywgc2l6ZTogMzE0MTUgfSxcXG4gICAgICAgIHsgaWQ6ICdodW50ZXIyJywgbmFtZTogJ1Bhc3N3b3JkLnR4dCcgfSxcXG4gICAgICAgIHsgaWQ6ICdiRWYyNHEnLCBuYW1lOiAnRHJhZyAmIGRyb3AgZmlsZXMgaGVyZScsIGlzRGlyOiB0cnVlIH0sXFxuICAgIF07XFxuXFxuICAgIGNvbnN0IGZpbGVBY3Rpb25zID0gW1xcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5DcmVhdGVGb2xkZXIsXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLlVwbG9hZEZpbGVzLFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Eb3dubG9hZEZpbGVzLFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Db3B5RmlsZXMsXFxuICAgIF07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwibGl2ZS1leGFtcGxlXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwibGl2ZS1leGFtcGxlLWFjdGlvblxcXCI+XFxuICAgICAgICAgICAgICAgIDxzdHJvbmc+Q2hlY2sgeW91ciBicm93c2VyIGNvbnNvbGUgZm9yIGxvZ2dlZCBhY3Rpb25zITwvc3Ryb25nPlxcbiAgICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2ZpbGVBY3Rpb25zfVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiLFwibG9jYXRpb25zTWFwXCI6e1wiYWN0aW9ucy1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozMCxcImxpbmVcIjo0MX0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjgyfSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjMwLFwibGluZVwiOjQxfSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjgyfX19fSxcInN0b3J5U291cmNlXCI6e1wic291cmNlXCI6XCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHtcXG4gICAgQ2hvbmt5QWN0aW9ucyxcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVCcm93c2VyLFxcbiAgICBGaWxlTGlzdCxcXG4gICAgRmlsZVRvb2xiYXIsXFxufSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHtcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXG4gICAgU3RvcnlDYXRlZ29yaWVzXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDUtRmlsZS1hY3Rpb24taGFuZGxlci5tZCc7XFxuXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxuY29uc3QgdGl0bGUgPSAnRGVmaW5pbmcgYW4gYWN0aW9uIGhhbmRsZXInO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxuICAgIHBhcmFtZXRlcnM6IHtcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBBY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICAvLyBMb2cgYWN0aW9uIHRvIGNvbnNvbGVcXG4gICAgICAgIFxcbiAgICAgICAgY29uc29sZS5sb2coJ1xcXFxuQWN0aW9uIG9iamVjdDonLCBhY3Rpb24sICdcXFxcbkFjdGlvbiBkYXRhOicsIGRhdGEpO1xcblxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXG4gICAgfTtcXG5cXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBEb2N1bWVudHMnLCBpc0RpcjogdHJ1ZSB9XTtcXG4gICAgY29uc3QgZmlsZXMgPSBbXFxuICAgICAgICB7IGlkOiAnbUhlNEExJywgbmFtZTogJ01lYW5pbmcgb2YgbGlmZS50eHQnLCBzaXplOiAzMTQxNSB9LFxcbiAgICAgICAgeyBpZDogJ2h1bnRlcjInLCBuYW1lOiAnUGFzc3dvcmQudHh0JyB9LFxcbiAgICAgICAgeyBpZDogJ2JFZjI0cScsIG5hbWU6ICdEcmFnICYgZHJvcCBmaWxlcyBoZXJlJywgaXNEaXI6IHRydWUgfSxcXG4gICAgXTtcXG5cXG4gICAgY29uc3QgZmlsZUFjdGlvbnMgPSBbXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNyZWF0ZUZvbGRlcixcXG4gICAgICAgIENob25reUFjdGlvbnMuVXBsb2FkRmlsZXMsXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkRvd25sb2FkRmlsZXMsXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNvcHlGaWxlcyxcXG4gICAgXTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJsaXZlLWV4YW1wbGVcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJsaXZlLWV4YW1wbGUtYWN0aW9uXFxcIj5cXG4gICAgICAgICAgICAgICAgPHN0cm9uZz5DaGVjayB5b3VyIGJyb3dzZXIgY29uc29sZSBmb3IgbG9nZ2VkIGFjdGlvbnMhPC9zdHJvbmc+XFxuICAgICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcbiAgICAgICAgICAgICAgICBmaWxlQWN0aW9ucz17ZmlsZUFjdGlvbnN9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCIsXCJsb2NhdGlvbnNNYXBcIjp7XCJhY3Rpb25zLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjMwLFwibGluZVwiOjMzfSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6NzR9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6MzN9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6NzR9fX19LFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXG4gICAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBBY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcbiAgICAgICAgLy8gTG9nIGFjdGlvbiB0byBjb25zb2xlXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUubG9nKCdcXG5BY3Rpb24gb2JqZWN0OicsIGFjdGlvbiwgJ1xcbkFjdGlvbiBkYXRhOicsIGRhdGEpO1xuXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgRG9jdW1lbnRzJywgaXNEaXI6IHRydWUgfV07XG4gICAgY29uc3QgZmlsZXMgPSBbXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXG4gICAgICAgIHsgaWQ6ICdodW50ZXIyJywgbmFtZTogJ1Bhc3N3b3JkLnR4dCcgfSxcbiAgICAgICAgeyBpZDogJ2JFZjI0cScsIG5hbWU6ICdEcmFnICYgZHJvcCBmaWxlcyBoZXJlJywgaXNEaXI6IHRydWUgfSxcbiAgICBdO1xuXG4gICAgY29uc3QgZmlsZUFjdGlvbnMgPSBbXG4gICAgICAgIENob25reUFjdGlvbnMuQ3JlYXRlRm9sZGVyLFxuICAgICAgICBDaG9ua3lBY3Rpb25zLlVwbG9hZEZpbGVzLFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkRvd25sb2FkRmlsZXMsXG4gICAgICAgIENob25reUFjdGlvbnMuQ29weUZpbGVzLFxuICAgIF07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxpdmUtZXhhbXBsZVwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsaXZlLWV4YW1wbGUtYWN0aW9uXCI+XG4gICAgICAgICAgICAgICAgPHN0cm9uZz5DaGVjayB5b3VyIGJyb3dzZXIgY29uc29sZSBmb3IgbG9nZ2VkIGFjdGlvbnMhPC9zdHJvbmc+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cbiAgICAgICAgICAgICAgICBmaWxlQWN0aW9ucz17ZmlsZUFjdGlvbnN9XG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBcIkFuICoqQWN0aW9uIEhhbmRsZXIqKiBpcyBhIGZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIGV2ZXJ5IHRpbWUgYSBmaWxlIGFjdGlvbiBpc1xcbmRpc3BhdGNoZWQuIFlvdSBjYW4gcGFzcyB5b3VyIGhhbmRsZXIgdG8gYEZpbGVCcm93c2VyYCB2aWEgdGhlIGBvbkZpbGVBY3Rpb25gIHByb3A6XFxuXFxuYGBgdHN4XFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIGNvbnNvbGUubG9nKCdBY3Rpb24gZGVmaW5pdGlvbjonLCBhY3Rpb24pO1xcbiAgICAgICAgY29uc29sZS5sb2coJ0FjdGlvbiBkYXRhOicsIGRhdGEpO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImxpdmUtZXhhbXBsZVxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyIGZpbGVzPXtbXX0gb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufT5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcbmBgYFxcblxcbioqQWxsKiogb2YgdGhlIGZpbGUgYWN0aW9ucyB3aWxsIGJlIHNlbnQgdG8geW91ciBhY3Rpb24gaGFuZGxlci4gSXQgaXMgbm9ybWFsIHRvXFxuaWdub3JlIG1vc3Qgb2YgdGhlIGFjdGlvbnMgYW5kIG9ubHkgaGFuZGxlIHRoZSBvbmVzIHlvdSdyZSBpbnRlcmVzdGVkIGluLlxcblxcbkFzIHlvdSBjYW4gc2VlIGZyb20gdGhlIGV4YW1wbGUsIHlvdXIgYWN0aW9uIGhhbmRsZXIgd2lsbCBnZXQgMiBwYXJhbWV0ZXJzIC0gYVxcbmBGaWxlQWN0aW9uYCBvYmplY3QgYW5kIGEgYEZpbGVBY3Rpb25EYXRhYCBvYmplY3QuIFRoZSBmaXJzdCBvYmplY3QsIGBGaWxlQWN0aW9uYCwgaXNcXG5qdXN0IHRoZSBhY3Rpb24gZGVmaW5pdGlvbi4gWW91IGNhbiByZWFkIHNlY3Rpb25zIF9Vc2luZyBmaWxlIGFjdGlvbnNfIGFuZFxcbl9DdXN0b20gZmlsZSBhY3Rpb25zXyB0byBmaW5kIG91dCBtb3JlLiBUaGUgc2Vjb25kIG9iamVjdCwgYEZpbGVBY3Rpb25EYXRhYCwgY29udGFpbnNcXG5pbmZvcm1hdGlvbiBhYm91dCB0aGUgZmlsZXMgcmVsYXRlZCB0byB0aGUgYWN0aW9uIGRpc3BhdGNoLiBUaGUgZm9ybWFsIHR5cGUgaXM6XFxuXFxuYGBgdHNcXG5pbnRlcmZhY2UgRmlsZUFjdGlvbkRhdGEge1xcbiAgICBhY3Rpb25JZDogc3RyaW5nO1xcbiAgICB0YXJnZXQ/OiBSZWFkb25seTxGaWxlRGF0YT47XFxuICAgIGZpbGVzPzogUmVhZG9ubHlBcnJheTxSZWFkb25seTxGaWxlRGF0YT4+O1xcbn1cXG5gYGBcXG5cXG5gYWN0aW9uSWRgIHdpbGwgYWx3YXlzIGJlIHNldCwgYnV0IGB0YXJnZXRgIGFuZCBgZmlsZXNgIG1pZ2h0IG5vdCBiZSBwcmVzZW50LFxcbmRlcGVuZGluZyBvbiB0aGUgYWN0aW9uLiBZb3UgY2FuIHBsYXkgYXJvdW5kIHdpdGggdGhlIGRlZmF1bHQgYWN0aW9ucyB0byB1bmRlcnN0YW5kXFxud2hlbiBlYWNoIGZpZWxkIGlzIHByb3ZpZGVkIGFuZCB3aGVuIGl0IGlzIG5vdC5cXG5cXG4jIyBJZ25vcmluZyBhY3Rpb25zXFxuXFxuSWdub3JpbmcgYWN0aW9ucyBpcyB2ZXJ5IHNpbXBsZSAtIHlvdSBqdXN0IGNyZWF0ZSBhbiBgaWYtZWxzZWAgb3IgYHN3aXRjaGAgY2xhdXNlIGFuZFxcbmNvbmRpdGlvbmFsbHkgb25seSBjYXRjaCBhY3Rpb25zIHlvdSdyZSBpbnRlcmVzdGVkIGluLiBGb3IgZXhhbXBsZSwgaWYgeW91IG9ubHkgd2FudFxcbnRvIGhhbmRsZSBcXFwiT3BlbiBGaWxlc1xcXCIgYWN0aW9uLCB5b3Ugd291bGQgZG8uXFxuXFxuYGBgdHNcXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSwgQ2hvbmt5QWN0aW9ucyB9IGZyb20gJ2Nob25reSc7XFxuXFxuY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgIGlmIChhY3Rpb24uaWQgPT09IENob25reUFjdGlvbnMuT3BlbkZpbGVzLmlkKSB7XFxuICAgICAgICBjb25zb2xlLmxvZygnVGhlIGZvbGxvd2luZyBmaWxlcyB3ZXJlIG9wZW5lZDonLCBhY3Rpb24uZmlsZXMpO1xcbiAgICB9IGVsc2Uge1xcbiAgICAgICAgLy8gRG8gbm90aGluZy5cXG4gICAgfVxcbn07XFxuYGBgXFxuXCI7IiwiXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIENob25reUljb25OYW1lLFxcXFxuICAgIEZpbGVBY3Rpb24sXFxcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxcXG4gICAgRmlsZUJyb3dzZXIsXFxcXG4gICAgRmlsZURhdGEsXFxcXG4gICAgRmlsZUxpc3QsXFxcXG4gICAgRmlsZVNlYXJjaCxcXFxcbiAgICBGaWxlVG9vbGJhcixcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcXFxuICAgIFN0b3J5Q2F0ZWdvcmllc1xcXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDYtQ3VzdG9tLWFjdGlvbnMubWQnO1xcXFxuXFxcXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5GaWxlQnJvd3NlckJhc2ljcztcXFxcbmNvbnN0IHRpdGxlID0gJ0N1c3RvbSBmaWxlIGFjdGlvbnMnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEN1c3RvbUFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICBjb25zdCBkb3dubG9hZFBzZEFjdGlvbjogRmlsZUFjdGlvbiA9IHtcXFxcbiAgICAgICAgaWQ6ICdkb3dubG9hZF9wc2QnLFxcXFxuICAgICAgICByZXF1aXJlc1NlbGVjdGlvbjogdHJ1ZSxcXFxcbiAgICAgICAgZmlsZUZpbHRlcjogKGZpbGU6IEZpbGVEYXRhKSA9PiBmaWxlLm5hbWUuZW5kc1dpdGgoJy5wc2QnKSxcXFxcbiAgICAgICAgaG90a2V5czogWydjdHJsK3EnXSxcXFxcbiAgICAgICAgdG9vbGJhckJ1dHRvbjoge1xcXFxuICAgICAgICAgICAgbmFtZTogJ0Rvd25sb2FkIFBob3Rvc2hvcCBmaWxlcycsXFxcXG4gICAgICAgICAgICBpY29uOiBDaG9ua3lJY29uTmFtZS5kb3dubG9hZCxcXFxcbiAgICAgICAgfSxcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgY29uc3QgY3VzdG9tRmlsZUFjdGlvbnMgPSBbZG93bmxvYWRQc2RBY3Rpb25dO1xcXFxuICAgIGNvbnN0IGZpbGVzID0gW1xcXFxuICAgICAgICB7IGlkOiAneFZkRScsIG5hbWU6ICdGbG93ZXJzLnBzZCcgfSxcXFxcbiAgICAgICAgeyBpZDogJ2JUZVgnLCBuYW1lOiAnTW91bnRhaW5zLnBzZCcgfSxcXFxcbiAgICAgICAgeyBpZDogJ21HZVgnLCBuYW1lOiAnU2t5LnBzZCcgfSxcXFxcbiAgICAgICAgeyBpZDogJ21GdGUnLCBuYW1lOiAnU3RhcnMucHNkJyB9LFxcXFxuICAgICAgICB7IGlkOiAndEx3WicsIG5hbWU6ICdQYXJzZXIucnMnIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdtR3JRJywgbmFtZTogJ3BhY2thZ2UuanNvbicgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2N1c3RvbUZpbGVBY3Rpb25zfVxcXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwiY3VzdG9tLWFjdGlvbnMtZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjM2LFxcXCJsaW5lXFxcIjozNX0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjc1fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzYsXFxcImxpbmVcXFwiOjM1fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjc1fX19O1xcbiAgICBcXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHtcXG4gICAgQ2hvbmt5SWNvbk5hbWUsXFxuICAgIEZpbGVBY3Rpb24sXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcbiAgICBGaWxlQnJvd3NlcixcXG4gICAgRmlsZURhdGEsXFxuICAgIEZpbGVMaXN0LFxcbiAgICBGaWxlU2VhcmNoLFxcbiAgICBGaWxlVG9vbGJhcixcXG59IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQge1xcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcbiAgICBTdG9yeUNhdGVnb3JpZXNcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNi1DdXN0b20tYWN0aW9ucy5tZCc7XFxuXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxuY29uc3QgdGl0bGUgPSAnQ3VzdG9tIGZpbGUgYWN0aW9ucyc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXG4gICAgcGFyYW1ldGVyczoge1xcXCJzdG9yeVNvdXJjZVxcXCI6e1xcXCJzb3VyY2VcXFwiOlxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgQ2hvbmt5SWNvbk5hbWUsXFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQnJvd3NlcixcXFxcbiAgICBGaWxlRGF0YSxcXFxcbiAgICBGaWxlTGlzdCxcXFxcbiAgICBGaWxlU2VhcmNoLFxcXFxuICAgIEZpbGVUb29sYmFyLFxcXFxufSBmcm9tICdjaG9ua3knO1xcXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHtcXFxcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxcXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxcXG4gICAgU3RvcnlDYXRlZ29yaWVzXFxcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNi1DdXN0b20tYWN0aW9ucy5tZCc7XFxcXG5cXFxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyQmFzaWNzO1xcXFxuY29uc3QgdGl0bGUgPSAnQ3VzdG9tIGZpbGUgYWN0aW9ucyc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgQ3VzdG9tQWN0aW9uc0V4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIGNvbnN0IGRvd25sb2FkUHNkQWN0aW9uOiBGaWxlQWN0aW9uID0ge1xcXFxuICAgICAgICBpZDogJ2Rvd25sb2FkX3BzZCcsXFxcXG4gICAgICAgIHJlcXVpcmVzU2VsZWN0aW9uOiB0cnVlLFxcXFxuICAgICAgICBmaWxlRmlsdGVyOiAoZmlsZTogRmlsZURhdGEpID0+IGZpbGUubmFtZS5lbmRzV2l0aCgnLnBzZCcpLFxcXFxuICAgICAgICBob3RrZXlzOiBbJ2N0cmwrcSddLFxcXFxuICAgICAgICB0b29sYmFyQnV0dG9uOiB7XFxcXG4gICAgICAgICAgICBuYW1lOiAnRG93bmxvYWQgUGhvdG9zaG9wIGZpbGVzJyxcXFxcbiAgICAgICAgICAgIGljb246IENob25reUljb25OYW1lLmRvd25sb2FkLFxcXFxuICAgICAgICB9LFxcXFxuICAgIH07XFxcXG5cXFxcbiAgICBjb25zdCBjdXN0b21GaWxlQWN0aW9ucyA9IFtkb3dubG9hZFBzZEFjdGlvbl07XFxcXG4gICAgY29uc3QgZmlsZXMgPSBbXFxcXG4gICAgICAgIHsgaWQ6ICd4VmRFJywgbmFtZTogJ0Zsb3dlcnMucHNkJyB9LFxcXFxuICAgICAgICB7IGlkOiAnYlRlWCcsIG5hbWU6ICdNb3VudGFpbnMucHNkJyB9LFxcXFxuICAgICAgICB7IGlkOiAnbUdlWCcsIG5hbWU6ICdTa3kucHNkJyB9LFxcXFxuICAgICAgICB7IGlkOiAnbUZ0ZScsIG5hbWU6ICdTdGFycy5wc2QnIH0sXFxcXG4gICAgICAgIHsgaWQ6ICd0THdaJywgbmFtZTogJ1BhcnNlci5ycycgfSxcXFxcbiAgICAgICAgeyBpZDogJ21HclEnLCBuYW1lOiAncGFja2FnZS5qc29uJyB9LFxcXFxuICAgIF07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgICAgICBmaWxlQWN0aW9ucz17Y3VzdG9tRmlsZUFjdGlvbnN9XFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcImN1c3RvbS1hY3Rpb25zLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozNixcXFwibGluZVxcXCI6MzV9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo3NX0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjM2LFxcXCJsaW5lXFxcIjozNX0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo3NX19fX0sXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgQ3VzdG9tQWN0aW9uc0V4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXG4gICAgfTtcXG5cXG4gICAgY29uc3QgZG93bmxvYWRQc2RBY3Rpb246IEZpbGVBY3Rpb24gPSB7XFxuICAgICAgICBpZDogJ2Rvd25sb2FkX3BzZCcsXFxuICAgICAgICByZXF1aXJlc1NlbGVjdGlvbjogdHJ1ZSxcXG4gICAgICAgIGZpbGVGaWx0ZXI6IChmaWxlOiBGaWxlRGF0YSkgPT4gZmlsZS5uYW1lLmVuZHNXaXRoKCcucHNkJyksXFxuICAgICAgICBob3RrZXlzOiBbJ2N0cmwrcSddLFxcbiAgICAgICAgdG9vbGJhckJ1dHRvbjoge1xcbiAgICAgICAgICAgIG5hbWU6ICdEb3dubG9hZCBQaG90b3Nob3AgZmlsZXMnLFxcbiAgICAgICAgICAgIGljb246IENob25reUljb25OYW1lLmRvd25sb2FkLFxcbiAgICAgICAgfSxcXG4gICAgfTtcXG5cXG4gICAgY29uc3QgY3VzdG9tRmlsZUFjdGlvbnMgPSBbZG93bmxvYWRQc2RBY3Rpb25dO1xcbiAgICBjb25zdCBmaWxlcyA9IFtcXG4gICAgICAgIHsgaWQ6ICd4VmRFJywgbmFtZTogJ0Zsb3dlcnMucHNkJyB9LFxcbiAgICAgICAgeyBpZDogJ2JUZVgnLCBuYW1lOiAnTW91bnRhaW5zLnBzZCcgfSxcXG4gICAgICAgIHsgaWQ6ICdtR2VYJywgbmFtZTogJ1NreS5wc2QnIH0sXFxuICAgICAgICB7IGlkOiAnbUZ0ZScsIG5hbWU6ICdTdGFycy5wc2QnIH0sXFxuICAgICAgICB7IGlkOiAndEx3WicsIG5hbWU6ICdQYXJzZXIucnMnIH0sXFxuICAgICAgICB7IGlkOiAnbUdyUScsIG5hbWU6ICdwYWNrYWdlLmpzb24nIH0sXFxuICAgIF07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2N1c3RvbUZpbGVBY3Rpb25zfVxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIjtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcImN1c3RvbS1hY3Rpb25zLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjM2LFwibGluZVwiOjQzfSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6ODN9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzYsXCJsaW5lXCI6NDN9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6ODN9fX07XG4gICAgXG5cbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAvLyBAdHMtbm9jaGVja1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7XFxuICAgIENob25reUljb25OYW1lLFxcbiAgICBGaWxlQWN0aW9uLFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXG4gICAgRmlsZUJyb3dzZXIsXFxuICAgIEZpbGVEYXRhLFxcbiAgICBGaWxlTGlzdCxcXG4gICAgRmlsZVNlYXJjaCxcXG4gICAgRmlsZVRvb2xiYXIsXFxufSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHtcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXG4gICAgU3RvcnlDYXRlZ29yaWVzXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDYtQ3VzdG9tLWFjdGlvbnMubWQnO1xcblxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyQmFzaWNzO1xcbmNvbnN0IHRpdGxlID0gJ0N1c3RvbSBmaWxlIGFjdGlvbnMnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxuICAgIHBhcmFtZXRlcnM6IHtcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBDdXN0b21BY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICBjb25zdCBkb3dubG9hZFBzZEFjdGlvbjogRmlsZUFjdGlvbiA9IHtcXG4gICAgICAgIGlkOiAnZG93bmxvYWRfcHNkJyxcXG4gICAgICAgIHJlcXVpcmVzU2VsZWN0aW9uOiB0cnVlLFxcbiAgICAgICAgZmlsZUZpbHRlcjogKGZpbGU6IEZpbGVEYXRhKSA9PiBmaWxlLm5hbWUuZW5kc1dpdGgoJy5wc2QnKSxcXG4gICAgICAgIGhvdGtleXM6IFsnY3RybCtxJ10sXFxuICAgICAgICB0b29sYmFyQnV0dG9uOiB7XFxuICAgICAgICAgICAgbmFtZTogJ0Rvd25sb2FkIFBob3Rvc2hvcCBmaWxlcycsXFxuICAgICAgICAgICAgaWNvbjogQ2hvbmt5SWNvbk5hbWUuZG93bmxvYWQsXFxuICAgICAgICB9LFxcbiAgICB9O1xcblxcbiAgICBjb25zdCBjdXN0b21GaWxlQWN0aW9ucyA9IFtkb3dubG9hZFBzZEFjdGlvbl07XFxuICAgIGNvbnN0IGZpbGVzID0gW1xcbiAgICAgICAgeyBpZDogJ3hWZEUnLCBuYW1lOiAnRmxvd2Vycy5wc2QnIH0sXFxuICAgICAgICB7IGlkOiAnYlRlWCcsIG5hbWU6ICdNb3VudGFpbnMucHNkJyB9LFxcbiAgICAgICAgeyBpZDogJ21HZVgnLCBuYW1lOiAnU2t5LnBzZCcgfSxcXG4gICAgICAgIHsgaWQ6ICdtRnRlJywgbmFtZTogJ1N0YXJzLnBzZCcgfSxcXG4gICAgICAgIHsgaWQ6ICd0THdaJywgbmFtZTogJ1BhcnNlci5ycycgfSxcXG4gICAgICAgIHsgaWQ6ICdtR3JRJywgbmFtZTogJ3BhY2thZ2UuanNvbicgfSxcXG4gICAgXTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgICAgICBmaWxlQWN0aW9ucz17Y3VzdG9tRmlsZUFjdGlvbnN9XFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiY3VzdG9tLWFjdGlvbnMtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzYsXCJsaW5lXCI6MzV9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo3NX0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozNixcImxpbmVcIjozNX0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo3NX19fTtcbiAgICBcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcblxuaW1wb3J0IHtcbiAgICBDaG9ua3lJY29uTmFtZSxcbiAgICBGaWxlQWN0aW9uLFxuICAgIEZpbGVBY3Rpb25EYXRhLFxuICAgIEZpbGVCcm93c2VyLFxuICAgIEZpbGVEYXRhLFxuICAgIEZpbGVMaXN0LFxuICAgIEZpbGVTZWFyY2gsXG4gICAgRmlsZVRvb2xiYXIsXG59IGZyb20gJ2Nob25reSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQge1xuICAgIGNyZWF0ZURvY3NPYmplY3QsXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcbiAgICBTdG9yeUNhdGVnb3JpZXNcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XG4vLyBAdHMtaWdub3JlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA2LUN1c3RvbS1hY3Rpb25zLm1kJztcblxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XG5jb25zdCB0aXRsZSA9ICdDdXN0b20gZmlsZSBhY3Rpb25zJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1kZWZhdWx0LWV4cG9ydFxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxuICAgIHBhcmFtZXRlcnM6IHtcInN0b3J5U291cmNlXCI6e1wic291cmNlXCI6XCJcXG4gICAgICBcXG4gICAgICAvLyBAdHMtbm9jaGVja1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19TVE9SWV9fID0gXFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IHtcXFxcbiAgICBDaG9ua3lJY29uTmFtZSxcXFxcbiAgICBGaWxlQWN0aW9uLFxcXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcXFxuICAgIEZpbGVCcm93c2VyLFxcXFxuICAgIEZpbGVEYXRhLFxcXFxuICAgIEZpbGVMaXN0LFxcXFxuICAgIEZpbGVTZWFyY2gsXFxcXG4gICAgRmlsZVRvb2xiYXIsXFxcXG59IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXFxcbiAgICBTdG9yeUNhdGVnb3JpZXNcXFxcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA2LUN1c3RvbS1hY3Rpb25zLm1kJztcXFxcblxcXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxcXG5jb25zdCB0aXRsZSA9ICdDdXN0b20gZmlsZSBhY3Rpb25zJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBDdXN0b21BY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgY29uc3QgZG93bmxvYWRQc2RBY3Rpb246IEZpbGVBY3Rpb24gPSB7XFxcXG4gICAgICAgIGlkOiAnZG93bmxvYWRfcHNkJyxcXFxcbiAgICAgICAgcmVxdWlyZXNTZWxlY3Rpb246IHRydWUsXFxcXG4gICAgICAgIGZpbGVGaWx0ZXI6IChmaWxlOiBGaWxlRGF0YSkgPT4gZmlsZS5uYW1lLmVuZHNXaXRoKCcucHNkJyksXFxcXG4gICAgICAgIGhvdGtleXM6IFsnY3RybCtxJ10sXFxcXG4gICAgICAgIHRvb2xiYXJCdXR0b246IHtcXFxcbiAgICAgICAgICAgIG5hbWU6ICdEb3dubG9hZCBQaG90b3Nob3AgZmlsZXMnLFxcXFxuICAgICAgICAgICAgaWNvbjogQ2hvbmt5SWNvbk5hbWUuZG93bmxvYWQsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgfTtcXFxcblxcXFxuICAgIGNvbnN0IGN1c3RvbUZpbGVBY3Rpb25zID0gW2Rvd25sb2FkUHNkQWN0aW9uXTtcXFxcbiAgICBjb25zdCBmaWxlcyA9IFtcXFxcbiAgICAgICAgeyBpZDogJ3hWZEUnLCBuYW1lOiAnRmxvd2Vycy5wc2QnIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdiVGVYJywgbmFtZTogJ01vdW50YWlucy5wc2QnIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdtR2VYJywgbmFtZTogJ1NreS5wc2QnIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdtRnRlJywgbmFtZTogJ1N0YXJzLnBzZCcgfSxcXFxcbiAgICAgICAgeyBpZDogJ3RMd1onLCBuYW1lOiAnUGFyc2VyLnJzJyB9LFxcXFxuICAgICAgICB7IGlkOiAnbUdyUScsIG5hbWU6ICdwYWNrYWdlLmpzb24nIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtjdXN0b21GaWxlQWN0aW9uc31cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiO1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XFxcImN1c3RvbS1hY3Rpb25zLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozNixcXFwibGluZVxcXCI6MzV9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo3NX0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjM2LFxcXCJsaW5lXFxcIjozNX0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo3NX19fTtcXG4gICAgXFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7XFxuICAgIENob25reUljb25OYW1lLFxcbiAgICBGaWxlQWN0aW9uLFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXG4gICAgRmlsZUJyb3dzZXIsXFxuICAgIEZpbGVEYXRhLFxcbiAgICBGaWxlTGlzdCxcXG4gICAgRmlsZVNlYXJjaCxcXG4gICAgRmlsZVRvb2xiYXIsXFxufSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHtcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXG4gICAgU3RvcnlDYXRlZ29yaWVzXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDYtQ3VzdG9tLWFjdGlvbnMubWQnO1xcblxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyQmFzaWNzO1xcbmNvbnN0IHRpdGxlID0gJ0N1c3RvbSBmaWxlIGFjdGlvbnMnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxuICAgIHBhcmFtZXRlcnM6IHtcXFwic3RvcnlTb3VyY2VcXFwiOntcXFwic291cmNlXFxcIjpcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIENob25reUljb25OYW1lLFxcXFxuICAgIEZpbGVBY3Rpb24sXFxcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxcXG4gICAgRmlsZUJyb3dzZXIsXFxcXG4gICAgRmlsZURhdGEsXFxcXG4gICAgRmlsZUxpc3QsXFxcXG4gICAgRmlsZVNlYXJjaCxcXFxcbiAgICBGaWxlVG9vbGJhcixcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcXFxuICAgIFN0b3J5Q2F0ZWdvcmllc1xcXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDYtQ3VzdG9tLWFjdGlvbnMubWQnO1xcXFxuXFxcXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5GaWxlQnJvd3NlckJhc2ljcztcXFxcbmNvbnN0IHRpdGxlID0gJ0N1c3RvbSBmaWxlIGFjdGlvbnMnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEN1c3RvbUFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICBjb25zdCBkb3dubG9hZFBzZEFjdGlvbjogRmlsZUFjdGlvbiA9IHtcXFxcbiAgICAgICAgaWQ6ICdkb3dubG9hZF9wc2QnLFxcXFxuICAgICAgICByZXF1aXJlc1NlbGVjdGlvbjogdHJ1ZSxcXFxcbiAgICAgICAgZmlsZUZpbHRlcjogKGZpbGU6IEZpbGVEYXRhKSA9PiBmaWxlLm5hbWUuZW5kc1dpdGgoJy5wc2QnKSxcXFxcbiAgICAgICAgaG90a2V5czogWydjdHJsK3EnXSxcXFxcbiAgICAgICAgdG9vbGJhckJ1dHRvbjoge1xcXFxuICAgICAgICAgICAgbmFtZTogJ0Rvd25sb2FkIFBob3Rvc2hvcCBmaWxlcycsXFxcXG4gICAgICAgICAgICBpY29uOiBDaG9ua3lJY29uTmFtZS5kb3dubG9hZCxcXFxcbiAgICAgICAgfSxcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgY29uc3QgY3VzdG9tRmlsZUFjdGlvbnMgPSBbZG93bmxvYWRQc2RBY3Rpb25dO1xcXFxuICAgIGNvbnN0IGZpbGVzID0gW1xcXFxuICAgICAgICB7IGlkOiAneFZkRScsIG5hbWU6ICdGbG93ZXJzLnBzZCcgfSxcXFxcbiAgICAgICAgeyBpZDogJ2JUZVgnLCBuYW1lOiAnTW91bnRhaW5zLnBzZCcgfSxcXFxcbiAgICAgICAgeyBpZDogJ21HZVgnLCBuYW1lOiAnU2t5LnBzZCcgfSxcXFxcbiAgICAgICAgeyBpZDogJ21GdGUnLCBuYW1lOiAnU3RhcnMucHNkJyB9LFxcXFxuICAgICAgICB7IGlkOiAndEx3WicsIG5hbWU6ICdQYXJzZXIucnMnIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdtR3JRJywgbmFtZTogJ3BhY2thZ2UuanNvbicgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2N1c3RvbUZpbGVBY3Rpb25zfVxcXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCIsXFxcImxvY2F0aW9uc01hcFxcXCI6e1xcXCJjdXN0b20tYWN0aW9ucy1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzYsXFxcImxpbmVcXFwiOjM1fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NzV9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozNixcXFwibGluZVxcXCI6MzV9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NzV9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEN1c3RvbUFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIGNvbnN0IGRvd25sb2FkUHNkQWN0aW9uOiBGaWxlQWN0aW9uID0ge1xcbiAgICAgICAgaWQ6ICdkb3dubG9hZF9wc2QnLFxcbiAgICAgICAgcmVxdWlyZXNTZWxlY3Rpb246IHRydWUsXFxuICAgICAgICBmaWxlRmlsdGVyOiAoZmlsZTogRmlsZURhdGEpID0+IGZpbGUubmFtZS5lbmRzV2l0aCgnLnBzZCcpLFxcbiAgICAgICAgaG90a2V5czogWydjdHJsK3EnXSxcXG4gICAgICAgIHRvb2xiYXJCdXR0b246IHtcXG4gICAgICAgICAgICBuYW1lOiAnRG93bmxvYWQgUGhvdG9zaG9wIGZpbGVzJyxcXG4gICAgICAgICAgICBpY29uOiBDaG9ua3lJY29uTmFtZS5kb3dubG9hZCxcXG4gICAgICAgIH0sXFxuICAgIH07XFxuXFxuICAgIGNvbnN0IGN1c3RvbUZpbGVBY3Rpb25zID0gW2Rvd25sb2FkUHNkQWN0aW9uXTtcXG4gICAgY29uc3QgZmlsZXMgPSBbXFxuICAgICAgICB7IGlkOiAneFZkRScsIG5hbWU6ICdGbG93ZXJzLnBzZCcgfSxcXG4gICAgICAgIHsgaWQ6ICdiVGVYJywgbmFtZTogJ01vdW50YWlucy5wc2QnIH0sXFxuICAgICAgICB7IGlkOiAnbUdlWCcsIG5hbWU6ICdTa3kucHNkJyB9LFxcbiAgICAgICAgeyBpZDogJ21GdGUnLCBuYW1lOiAnU3RhcnMucHNkJyB9LFxcbiAgICAgICAgeyBpZDogJ3RMd1onLCBuYW1lOiAnUGFyc2VyLnJzJyB9LFxcbiAgICAgICAgeyBpZDogJ21HclEnLCBuYW1lOiAncGFja2FnZS5qc29uJyB9LFxcbiAgICBdO1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtjdXN0b21GaWxlQWN0aW9uc31cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCIsXCJsb2NhdGlvbnNNYXBcIjp7XCJjdXN0b20tYWN0aW9ucy1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozNixcImxpbmVcIjo0M30sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjgzfSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjM2LFwibGluZVwiOjQzfSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjgzfX19fSxcInN0b3J5U291cmNlXCI6e1wic291cmNlXCI6XCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHtcXG4gICAgQ2hvbmt5SWNvbk5hbWUsXFxuICAgIEZpbGVBY3Rpb24sXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcbiAgICBGaWxlQnJvd3NlcixcXG4gICAgRmlsZURhdGEsXFxuICAgIEZpbGVMaXN0LFxcbiAgICBGaWxlU2VhcmNoLFxcbiAgICBGaWxlVG9vbGJhcixcXG59IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQge1xcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcbiAgICBTdG9yeUNhdGVnb3JpZXNcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNi1DdXN0b20tYWN0aW9ucy5tZCc7XFxuXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxuY29uc3QgdGl0bGUgPSAnQ3VzdG9tIGZpbGUgYWN0aW9ucyc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXG4gICAgcGFyYW1ldGVyczoge1xcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEN1c3RvbUFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIGNvbnN0IGRvd25sb2FkUHNkQWN0aW9uOiBGaWxlQWN0aW9uID0ge1xcbiAgICAgICAgaWQ6ICdkb3dubG9hZF9wc2QnLFxcbiAgICAgICAgcmVxdWlyZXNTZWxlY3Rpb246IHRydWUsXFxuICAgICAgICBmaWxlRmlsdGVyOiAoZmlsZTogRmlsZURhdGEpID0+IGZpbGUubmFtZS5lbmRzV2l0aCgnLnBzZCcpLFxcbiAgICAgICAgaG90a2V5czogWydjdHJsK3EnXSxcXG4gICAgICAgIHRvb2xiYXJCdXR0b246IHtcXG4gICAgICAgICAgICBuYW1lOiAnRG93bmxvYWQgUGhvdG9zaG9wIGZpbGVzJyxcXG4gICAgICAgICAgICBpY29uOiBDaG9ua3lJY29uTmFtZS5kb3dubG9hZCxcXG4gICAgICAgIH0sXFxuICAgIH07XFxuXFxuICAgIGNvbnN0IGN1c3RvbUZpbGVBY3Rpb25zID0gW2Rvd25sb2FkUHNkQWN0aW9uXTtcXG4gICAgY29uc3QgZmlsZXMgPSBbXFxuICAgICAgICB7IGlkOiAneFZkRScsIG5hbWU6ICdGbG93ZXJzLnBzZCcgfSxcXG4gICAgICAgIHsgaWQ6ICdiVGVYJywgbmFtZTogJ01vdW50YWlucy5wc2QnIH0sXFxuICAgICAgICB7IGlkOiAnbUdlWCcsIG5hbWU6ICdTa3kucHNkJyB9LFxcbiAgICAgICAgeyBpZDogJ21GdGUnLCBuYW1lOiAnU3RhcnMucHNkJyB9LFxcbiAgICAgICAgeyBpZDogJ3RMd1onLCBuYW1lOiAnUGFyc2VyLnJzJyB9LFxcbiAgICAgICAgeyBpZDogJ21HclEnLCBuYW1lOiAncGFja2FnZS5qc29uJyB9LFxcbiAgICBdO1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtjdXN0b21GaWxlQWN0aW9uc31cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCIsXCJsb2NhdGlvbnNNYXBcIjp7XCJjdXN0b20tYWN0aW9ucy1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozNixcImxpbmVcIjozNX0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjc1fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjM2LFwibGluZVwiOjM1fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjc1fX19fSxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxuICAgIH0sXG59O1xuXG5leHBvcnQgY29uc3QgQ3VzdG9tQWN0aW9uc0V4YW1wbGUgPSAoKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGRvd25sb2FkUHNkQWN0aW9uOiBGaWxlQWN0aW9uID0ge1xuICAgICAgICBpZDogJ2Rvd25sb2FkX3BzZCcsXG4gICAgICAgIHJlcXVpcmVzU2VsZWN0aW9uOiB0cnVlLFxuICAgICAgICBmaWxlRmlsdGVyOiAoZmlsZTogRmlsZURhdGEpID0+IGZpbGUubmFtZS5lbmRzV2l0aCgnLnBzZCcpLFxuICAgICAgICBob3RrZXlzOiBbJ2N0cmwrcSddLFxuICAgICAgICB0b29sYmFyQnV0dG9uOiB7XG4gICAgICAgICAgICBuYW1lOiAnRG93bmxvYWQgUGhvdG9zaG9wIGZpbGVzJyxcbiAgICAgICAgICAgIGljb246IENob25reUljb25OYW1lLmRvd25sb2FkLFxuICAgICAgICB9LFxuICAgIH07XG5cbiAgICBjb25zdCBjdXN0b21GaWxlQWN0aW9ucyA9IFtkb3dubG9hZFBzZEFjdGlvbl07XG4gICAgY29uc3QgZmlsZXMgPSBbXG4gICAgICAgIHsgaWQ6ICd4VmRFJywgbmFtZTogJ0Zsb3dlcnMucHNkJyB9LFxuICAgICAgICB7IGlkOiAnYlRlWCcsIG5hbWU6ICdNb3VudGFpbnMucHNkJyB9LFxuICAgICAgICB7IGlkOiAnbUdlWCcsIG5hbWU6ICdTa3kucHNkJyB9LFxuICAgICAgICB7IGlkOiAnbUZ0ZScsIG5hbWU6ICdTdGFycy5wc2QnIH0sXG4gICAgICAgIHsgaWQ6ICd0THdaJywgbmFtZTogJ1BhcnNlci5ycycgfSxcbiAgICAgICAgeyBpZDogJ21HclEnLCBuYW1lOiAncGFja2FnZS5qc29uJyB9LFxuICAgIF07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cbiAgICAgICAgICAgICAgICBmaWxlQWN0aW9ucz17Y3VzdG9tRmlsZUFjdGlvbnN9XG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgXCJUaGlzIHNlY3Rpb24gZGVzY3JpYmVzIGhvdyB5b3UgY2FuIGRlZmluZSB5b3VyIG93biBhY3Rpb24uIEFmdGVyIHlvdSByZWFkIHRoZVxcbmRvY3VtZW50YXRpb24gb24gdGhpcyBwYWdlLCBpdCBpcyBzdHJvbmdseSByZWNvbW1lbmRlZCB0aGF0IHlvdSBhbHNvIHN0dWR5XFxuW3RoZSBwcmVkZWZpbmVkIENob25reSBmaWxlIGFjdGlvbnNdKGh0dHBzOi8vZ2l0aHViLmNvbS9UaW1ib0taL0Nob25reS9ibG9iLzEueC9zcmMvdXRpbC9maWxlLWFjdGlvbnMtZGVmaW5pdGlvbnMudHMpXFxudG8gdW5kZXJzdGFuZCBob3cgdGhleSB3b3JrLlxcblxcblRoZSBkZWZpbml0aW9uIG9mIGEgZmlsZSBhY3Rpb24gaXMgYSBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdCB0aGF0IHNhdGlzZmllcyB0aGVcXG5pbnRlcmZhY2UgYmVsb3cuXFxuXFxuYGBgdHNcXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVBY3Rpb24ge1xcbiAgICBpZDogc3RyaW5nOyAvLyBVbmlxdWUgYWN0aW9uIElEXFxuICAgIG1ldGFkYXRhPzogYW55OyAvLyBBbnkgdXNlci1kZWZpbmVkIHZhbHVlXFxuICAgIHJlcXVpcmVzU2VsZWN0aW9uPzogYm9vbGVhbjsgLy8gUmVxdWlyZXMgc2VsZWN0aW9uIG9mIDErIGZpbGVzXFxuICAgIGZpbGVGaWx0ZXI/OiBGaWxlRmlsdGVyOyAvLyBVc2VkIHRvIGZpbHRlciB0aGUgZmlsZXMgYXJyYXlcXG5cXG4gICAgaG90a2V5cz86IHJlYWRvbmx5IHN0cmluZ1tdOyAvLyBIb3RrZXlzIHVzaW5nIGBob3RrZXktanNgIG5vdGF0aW9uXFxuICAgIHRvb2xiYXJCdXR0b24/OiBUb29sYmFyQnV0dG9uRGF0YTsgLy8gRGVzY3JpcHRpb24gYmVsb3dcXG5cXG4gICAgLy8gU3BlY2lhbCBhY3Rpb24gdGhhdCBzaG91bGQgYmUgZGlzcGF0Y2hlZCBvbiBhY3RpdmF0aW9uIG9mIHRoaXMgYWN0aW9uLiBUaGlzXFxuICAgIC8vIGlzIHVzZWQgYnkgQ2hvbmt5IGludGVybmFsbHksIGtlZXAgaXQgYHVuZGVmaW5lZGAgdW5sZXNzIHlvdSBrbm93IHdoYXQgeW91J3JlXFxuICAgIC8vIGRvaW5nLlxcbiAgICBzcGVjaWFsQWN0aW9uVG9EaXNwYXRjaD86IFNwZWNpYWxBY3Rpb247XFxufVxcblxcbi8vIFdoZXJlLi4uXFxudHlwZSBGaWxlRmlsdGVyID0gKGZpbGU6IE51bGxhYmxlPEZpbGVEYXRhPikgPT4gYm9vbGVhbjtcXG5cXG4vLyAuLi5hbmQuLi5cXG5pbnRlcmZhY2UgVG9vbGJhckJ1dHRvbkRhdGEge1xcbiAgICBuYW1lOiBzdHJpbmc7IC8vIEJ1dHRvbiBuYW1lXFxuICAgIGdyb3VwPzogc3RyaW5nOyAvLyBHcm91cCB0byBhZGQgdGhlIGJ1dHRvbiB0b1xcbiAgICBkcm9wZG93bj86IGJvb2xlYW47IC8vIFdoZXRoZXIgdG8gZGlzcGxheSBncm91cCBhcyBkcm9wZG93blxcbiAgICB0b29sdGlwPzogc3RyaW5nOyAvLyBIZWxwIHRvb2x0aXAgdGV4dFxcbiAgICBpY29uPzogQ2hvbmt5SWNvbk5hbWUgfCBzdHJpbmc7IC8vIEljb24gbmFtZVxcbiAgICBpY29uT25seT86IGJvb2xlYW47IC8vIFdoZXRoZXIgdG8gb25seSBkaXNwbGF5IHRoZSBpY29uXFxufVxcbmBgYFxcblxcbi0gICBBbGwgYWN0aW9uIElEcyBzaG91bGQgYmUgdW5pcXVlLlxcbi0gICBFbmFibGluZyBgcmVxdWlyZXNTZWxlY3Rpb25gIGZsYWcgbWVhbnMgdGhlIGFjdGlvbiB3aWxsIG9ubHkgYmUgdHJpZ2dlcmVkIHdoZW5cXG4gICAgb25lIG9yIG1vcmUgZmlsZXMgYXJlIHNlbGVjdGVkLiBTZXR0aW5nIHRoZSBgZmlsZUZpbHRlcmAgd2lsbCBhcHBseSB0aGUgZmlsdGVyIHRvXFxuICAgIHRoZSBsaXN0IG9mIHNlbGVjdGVkIGZpbGVzIHRvIGNoZWNrIGlmIHRoZSBhY3Rpb24gY2FuIGJlIGFwcGxpZWQuXFxuLSAgIFRoZSBgaG90a2V5c2AgZmllbGQgc2hvdWxkIGJlIGFuIGFycmF5IG9mIGhvdGtleXMgZm9sbG93aW5nIHRoZVxcbiAgICBbaG90a2V5cy1qc10oaHR0cHM6Ly9naXRodWIuY29tL1RpbWJvS1ovQ2hvbmt5L2Jsb2IvMS54L3NyYy91dGlsL2ZpbGUtYWN0aW9ucy1kZWZpbml0aW9ucy50cylcXG4gICAgbm90YXRpb24uXFxuLSAgIGB0b29sYmFyQnV0dG9uYCBmaWVsZCBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGFjdGlvbiBzaG91bGQgYXBwZWFyIGluIHRoZSB0b29sYmFyLFxcbiAgICBhbmQgaG93IHRoZSBidXR0b24gd2lsbCBsb29rLlxcbi0gICBUbyBjb21iaW5lIHNldmVyYWwgYWN0aW9uIGJ1dHRvbnMgaW50byBhIHRvb2xiYXIsIHNwZWNpZnkgdGhlIHNhbWUgYGdyb3VwYCBmb3JcXG4gICAgdGhlbSBhbmQgc2V0IGBkcm9wZG93bmAgdG8gdHJ1ZS5cXG4tICAgSWYgb25lIG9mIHRoZSBhY3Rpb25zIGluIGEgZ3JvdXAgaW5jbHVkZXMgYGRyb3Bkb3duOiB0cnVlYCwgYWxsIGFjdGlvbnMgaW4gdGhhdFxcbiAgICBncm91cCB3aWxsIGJlIHNob3duIGFzIGEgZHJvcGRvd24uXFxuXFxuIyMgRXhhbXBsZSBjdXN0b20gYWN0aW9uOiBcXFwiRG93bmxvYWQgUGhvdG9zaG9wIGZpbGVzXFxcIlxcblxcbkxldCdzIGRlZmluZSBhIGN1c3RvbSBhY3Rpb24gdGhhdCB3aWxsIGRvd25sb2FkIHRoZSBzZWxlY3RlZCBQaG90b3Nob3AgYC5wc2RgIGZpbGVzLlxcbldlIHdpbGwgYWRkIGEgYnV0dG9uIHRvIHRoZSB0b29sYmFyIGFuZCBhIHNob3J0Y3V0LCBgQ3RybCtRYC4gRmlyc3QsIHdlIGRlZmluZSB0aGVcXG5maWxlIGFjdGlvbiBvYmplY3Q6XFxuXFxuYGBgdHN4XFxuaW1wb3J0IHsgRmlsZURhdGEsIEZpbGVBY3Rpb24sIENob25reUljb25OYW1lIH0gZnJvbSAnY2hvbmt5JztcXG5cXG5jb25zdCBkb3dubG9hZFBzZEFjdGlvbjogRmlsZUFjdGlvbiA9IHtcXG4gICAgaWQ6ICdkb3dubG9hZF9wc2QnLFxcbiAgICByZXF1aXJlc1NlbGVjdGlvbjogdHJ1ZSxcXG4gICAgZmlsZUZpbHRlcjogKGZpbGU6IEZpbGVEYXRhKSA9PiBmaWxlLm5hbWUuZW5kc1dpdGgoJy5wc2QnKSxcXG4gICAgaG90a2V5czogWydjdHJsK3EnXSxcXG4gICAgdG9vbGJhckJ1dHRvbjoge1xcbiAgICAgICAgbmFtZTogJ0Rvd25sb2FkIFBob3Rvc2hvcCBmaWxlcycsXFxuICAgICAgICBpY29uOiBDaG9ua3lJY29uTmFtZS5kb3dubG9hZCxcXG4gICAgfSxcXG59O1xcbmBgYFxcblxcbk5leHQsIHdlIG5lZWQgdG8gcGFzcyB0aGlzIGN1c3RvbSBhY3Rpb24gdG8gYEZpbGVCcm93c2VyYCwgYWxvbmcgd2l0aCBzb21lIGZpbGVzOlxcblxcbmBgYHRzeFxcbmV4cG9ydCBjb25zdCBDdXN0b21BY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgY3VzdG9tRmlsZUFjdGlvbnMgPSBbZG93bmxvYWRQc2RBY3Rpb25dOyAvLyA8LS0tLS1cXG4gICAgY29uc3QgZmlsZXMgPSBbXFxuICAgICAgICB7IGlkOiAneFZkRScsIG5hbWU6ICdGbG93ZXJzLnBzZCcgfSxcXG4gICAgICAgIHsgaWQ6ICdiVGVYJywgbmFtZTogJ01vdW50YWlucy5wc2QnIH0sXFxuICAgICAgICB7IGlkOiAnbUdlWCcsIG5hbWU6ICdTa3kucHNkJyB9LFxcbiAgICAgICAgeyBpZDogJ21GdGUnLCBuYW1lOiAnU3RhcnMucHNkJyB9LFxcbiAgICAgICAgeyBpZDogJ3RMd1onLCBuYW1lOiAnUGFyc2VyLnJzJyB9LFxcbiAgICAgICAgeyBpZDogJ21HclEnLCBuYW1lOiAncGFja2FnZS5qc29uJyB9LFxcbiAgICBdO1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXIgZmlsZXM9e2ZpbGVzfSBmaWxlQWN0aW9ucz17Y3VzdG9tRmlsZUFjdGlvbnMgLyogPC0tLS0gKi99PlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuYGBgXFxuXFxuWW91IGNhbiBzZWUgdGhlIG91dGNvbWUgaW4gdGhlIGxpdmUgZXhhbXBsZSBiZWxvdy4gTm90ZSBob3cgdGhlIGJ1dHRvbiBvbmx5IGJlY29tZXNcXG5lbmFibGVkIHdoZW4geW91IHNlbGVjdCBzb21lIGAucHNkYCBmaWxlcy4gQWxzbywgd2hlbiB5b3UgY2xpY2sgXFxcIkRvd25sb2FkIFBob3Rvc2hvcFxcbmZpbGVzXFxcIiwgdGhlIGFjdGlvbiBwb3B1cCBvbmx5IGluY2x1ZGVzIGAucHNkYCBmaWxlcy4gQWZ0ZXIgeW91IG1ha2UgeW91ciBzZWxlY3Rpb24sXFxueW91IGNhbiBhbHNvIHByZXNzIGBDdHJsK1FgIHRvIG1ha2UgeW91ciBzZWxlY3Rpb24uXFxuXCI7IiwiXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XFxcXG5pbXBvcnQge1xcXFxuICAgIEZpbGVBY3Rpb24sXFxcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxcXG4gICAgRmlsZUJyb3dzZXIsXFxcXG4gICAgRmlsZURhdGEsXFxcXG4gICAgRmlsZUxpc3QsXFxcXG4gICAgRmlsZVRvb2xiYXIsXFxcXG59IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXFxcbiAgICBTdG9yeUNhdGVnb3JpZXNcXFxcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA3LVRodW1ibmFpbHMubWQnO1xcXFxuXFxcXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5GaWxlQnJvd3NlckJhc2ljcztcXFxcbmNvbnN0IHRpdGxlID0gJ0ZpbGUgdGh1bWJuYWlscyc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgQWN0aW9uc0V4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgdGh1bWJuYWlsR2VuZXJhdG9yID0gKGZpbGU6IEZpbGVEYXRhICYgeyBkZWxheTogbnVtYmVyIH0pID0+IHtcXFxcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XFxcXG4gICAgICAgICAgICAvLyBEZWxheSBsb2FkaW5nIGJ5IGBmaWxlLmRlbGF5YCBzZWNvbmRzIHRvIHNpbXVsYXRlIHRodW1iIGdlbmVyYXRpb24uXFxcXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUoJy4vTGVubmEucG5nJyksIGZpbGUuZGVsYXkgKiAxMDAwKTtcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgUGljdHVyZXMnLCBpc0RpcjogdHJ1ZSB9XTtcXFxcbiAgICBjb25zdCBmaWxlczogRmlsZURhdGFbXSA9IFtdO1xcXFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjA7ICsraSkge1xcXFxuICAgICAgICBjb25zdCBkZWxheSA9IGkgKiAyO1xcXFxuICAgICAgICBmaWxlcy5wdXNoKHtcXFxcbiAgICAgICAgICAgIGlkOiBgaW1hZ2UtJHtpfWAsXFxcXG4gICAgICAgICAgICBuYW1lOiBgRGVsYXkgLSAke2RlbGF5fSBzZWNvbmRzLmpwZ2AsXFxcXG4gICAgICAgICAgICBkZWxheTogZGVsYXksXFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH1cXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFxcXFxcImxpdmUtZXhhbXBsZVxcXFxcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICB0aHVtYm5haWxHZW5lcmF0b3I9e3RodW1ibmFpbEdlbmVyYXRvcn0gLy8gPC0tLS1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwiYWN0aW9ucy1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzAsXFxcImxpbmVcXFwiOjM0fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NzF9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozMCxcXFwibGluZVxcXCI6MzR9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NzF9fX07XFxuICAgIFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XFxuaW1wb3J0IHtcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVCcm93c2VyLFxcbiAgICBGaWxlRGF0YSxcXG4gICAgRmlsZUxpc3QsXFxuICAgIEZpbGVUb29sYmFyLFxcbn0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7XFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxuICAgIFN0b3J5Q2F0ZWdvcmllc1xcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA3LVRodW1ibmFpbHMubWQnO1xcblxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyQmFzaWNzO1xcbmNvbnN0IHRpdGxlID0gJ0ZpbGUgdGh1bWJuYWlscyc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXG4gICAgcGFyYW1ldGVyczoge1xcXCJzdG9yeVNvdXJjZVxcXCI6e1xcXCJzb3VyY2VcXFwiOlxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCBQcm9taXNlIGZyb20gJ2JsdWViaXJkJztcXFxcbmltcG9ydCB7XFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQnJvd3NlcixcXFxcbiAgICBGaWxlRGF0YSxcXFxcbiAgICBGaWxlTGlzdCxcXFxcbiAgICBGaWxlVG9vbGJhcixcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcXFxuICAgIFN0b3J5Q2F0ZWdvcmllc1xcXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDctVGh1bWJuYWlscy5tZCc7XFxcXG5cXFxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyQmFzaWNzO1xcXFxuY29uc3QgdGl0bGUgPSAnRmlsZSB0aHVtYm5haWxzJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBBY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCB0aHVtYm5haWxHZW5lcmF0b3IgPSAoZmlsZTogRmlsZURhdGEgJiB7IGRlbGF5OiBudW1iZXIgfSkgPT4ge1xcXFxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcXFxcbiAgICAgICAgICAgIC8vIERlbGF5IGxvYWRpbmcgYnkgYGZpbGUuZGVsYXlgIHNlY29uZHMgdG8gc2ltdWxhdGUgdGh1bWIgZ2VuZXJhdGlvbi5cXFxcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSgnLi9MZW5uYS5wbmcnKSwgZmlsZS5kZWxheSAqIDEwMDApO1xcXFxuICAgICAgICB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBQaWN0dXJlcycsIGlzRGlyOiB0cnVlIH1dO1xcXFxuICAgIGNvbnN0IGZpbGVzOiBGaWxlRGF0YVtdID0gW107XFxcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyMDsgKytpKSB7XFxcXG4gICAgICAgIGNvbnN0IGRlbGF5ID0gaSAqIDI7XFxcXG4gICAgICAgIGZpbGVzLnB1c2goe1xcXFxuICAgICAgICAgICAgaWQ6IGBpbWFnZS0ke2l9YCxcXFxcbiAgICAgICAgICAgIG5hbWU6IGBEZWxheSAtICR7ZGVsYXl9IHNlY29uZHMuanBnYCxcXFxcbiAgICAgICAgICAgIGRlbGF5OiBkZWxheSxcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXFxcXFwibGl2ZS1leGFtcGxlXFxcXFxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcXFxuICAgICAgICAgICAgICAgIHRodW1ibmFpbEdlbmVyYXRvcj17dGh1bWJuYWlsR2VuZXJhdG9yfSAvLyA8LS0tLVxcXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcImFjdGlvbnMtZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjMwLFxcXCJsaW5lXFxcIjozNH0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjcxfSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzAsXFxcImxpbmVcXFwiOjM0fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjcxfX19fSxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBBY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgdGh1bWJuYWlsR2VuZXJhdG9yID0gKGZpbGU6IEZpbGVEYXRhICYgeyBkZWxheTogbnVtYmVyIH0pID0+IHtcXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xcbiAgICAgICAgICAgIC8vIERlbGF5IGxvYWRpbmcgYnkgYGZpbGUuZGVsYXlgIHNlY29uZHMgdG8gc2ltdWxhdGUgdGh1bWIgZ2VuZXJhdGlvbi5cXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUoJy4vTGVubmEucG5nJyksIGZpbGUuZGVsYXkgKiAxMDAwKTtcXG4gICAgICAgIH0pO1xcbiAgICB9O1xcblxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IFBpY3R1cmVzJywgaXNEaXI6IHRydWUgfV07XFxuICAgIGNvbnN0IGZpbGVzOiBGaWxlRGF0YVtdID0gW107XFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjA7ICsraSkge1xcbiAgICAgICAgY29uc3QgZGVsYXkgPSBpICogMjtcXG4gICAgICAgIGZpbGVzLnB1c2goe1xcbiAgICAgICAgICAgIGlkOiBgaW1hZ2UtJHtpfWAsXFxuICAgICAgICAgICAgbmFtZTogYERlbGF5IC0gJHtkZWxheX0gc2Vjb25kcy5qcGdgLFxcbiAgICAgICAgICAgIGRlbGF5OiBkZWxheSxcXG4gICAgICAgIH0pO1xcbiAgICB9XFxuXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXG4gICAgfTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJsaXZlLWV4YW1wbGVcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXG4gICAgICAgICAgICAgICAgdGh1bWJuYWlsR2VuZXJhdG9yPXt0aHVtYm5haWxHZW5lcmF0b3J9IC8vIDwtLS0tXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCI7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCJhY3Rpb25zLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjMwLFwibGluZVwiOjQyfSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6Nzl9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6NDJ9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6Nzl9fX07XG4gICAgXG5cbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAvLyBAdHMtbm9jaGVja1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCBQcm9taXNlIGZyb20gJ2JsdWViaXJkJztcXG5pbXBvcnQge1xcbiAgICBGaWxlQWN0aW9uLFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXG4gICAgRmlsZUJyb3dzZXIsXFxuICAgIEZpbGVEYXRhLFxcbiAgICBGaWxlTGlzdCxcXG4gICAgRmlsZVRvb2xiYXIsXFxufSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHtcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXG4gICAgU3RvcnlDYXRlZ29yaWVzXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDctVGh1bWJuYWlscy5tZCc7XFxuXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxuY29uc3QgdGl0bGUgPSAnRmlsZSB0aHVtYm5haWxzJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgQWN0aW9uc0V4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IHRodW1ibmFpbEdlbmVyYXRvciA9IChmaWxlOiBGaWxlRGF0YSAmIHsgZGVsYXk6IG51bWJlciB9KSA9PiB7XFxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcXG4gICAgICAgICAgICAvLyBEZWxheSBsb2FkaW5nIGJ5IGBmaWxlLmRlbGF5YCBzZWNvbmRzIHRvIHNpbXVsYXRlIHRodW1iIGdlbmVyYXRpb24uXFxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKCcuL0xlbm5hLnBuZycpLCBmaWxlLmRlbGF5ICogMTAwMCk7XFxuICAgICAgICB9KTtcXG4gICAgfTtcXG5cXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBQaWN0dXJlcycsIGlzRGlyOiB0cnVlIH1dO1xcbiAgICBjb25zdCBmaWxlczogRmlsZURhdGFbXSA9IFtdO1xcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDIwOyArK2kpIHtcXG4gICAgICAgIGNvbnN0IGRlbGF5ID0gaSAqIDI7XFxuICAgICAgICBmaWxlcy5wdXNoKHtcXG4gICAgICAgICAgICBpZDogYGltYWdlLSR7aX1gLFxcbiAgICAgICAgICAgIG5hbWU6IGBEZWxheSAtICR7ZGVsYXl9IHNlY29uZHMuanBnYCxcXG4gICAgICAgICAgICBkZWxheTogZGVsYXksXFxuICAgICAgICB9KTtcXG4gICAgfVxcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwibGl2ZS1leGFtcGxlXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxuICAgICAgICAgICAgICAgIHRodW1ibmFpbEdlbmVyYXRvcj17dGh1bWJuYWlsR2VuZXJhdG9yfSAvLyA8LS0tLVxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiYWN0aW9ucy1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozMCxcImxpbmVcIjozNH0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjcxfSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjMwLFwibGluZVwiOjM0fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjcxfX19O1xuICAgIFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xuXG5pbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQge1xuICAgIEZpbGVBY3Rpb24sXG4gICAgRmlsZUFjdGlvbkRhdGEsXG4gICAgRmlsZUJyb3dzZXIsXG4gICAgRmlsZURhdGEsXG4gICAgRmlsZUxpc3QsXG4gICAgRmlsZVRvb2xiYXIsXG59IGZyb20gJ2Nob25reSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQge1xuICAgIGNyZWF0ZURvY3NPYmplY3QsXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcbiAgICBTdG9yeUNhdGVnb3JpZXNcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XG4vLyBAdHMtaWdub3JlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA3LVRodW1ibmFpbHMubWQnO1xuXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5GaWxlQnJvd3NlckJhc2ljcztcbmNvbnN0IHRpdGxlID0gJ0ZpbGUgdGh1bWJuYWlscyc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZGVmYXVsdC1leHBvcnRcbmV4cG9ydCBkZWZhdWx0IHtcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcbiAgICBwYXJhbWV0ZXJzOiB7XCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiXFxuICAgICAgXFxuICAgICAgLy8gQHRzLW5vY2hlY2tcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fU1RPUllfXyA9IFxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCBQcm9taXNlIGZyb20gJ2JsdWViaXJkJztcXFxcbmltcG9ydCB7XFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQnJvd3NlcixcXFxcbiAgICBGaWxlRGF0YSxcXFxcbiAgICBGaWxlTGlzdCxcXFxcbiAgICBGaWxlVG9vbGJhcixcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcXFxuICAgIFN0b3J5Q2F0ZWdvcmllc1xcXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDctVGh1bWJuYWlscy5tZCc7XFxcXG5cXFxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyQmFzaWNzO1xcXFxuY29uc3QgdGl0bGUgPSAnRmlsZSB0aHVtYm5haWxzJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBBY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCB0aHVtYm5haWxHZW5lcmF0b3IgPSAoZmlsZTogRmlsZURhdGEgJiB7IGRlbGF5OiBudW1iZXIgfSkgPT4ge1xcXFxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcXFxcbiAgICAgICAgICAgIC8vIERlbGF5IGxvYWRpbmcgYnkgYGZpbGUuZGVsYXlgIHNlY29uZHMgdG8gc2ltdWxhdGUgdGh1bWIgZ2VuZXJhdGlvbi5cXFxcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSgnLi9MZW5uYS5wbmcnKSwgZmlsZS5kZWxheSAqIDEwMDApO1xcXFxuICAgICAgICB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBQaWN0dXJlcycsIGlzRGlyOiB0cnVlIH1dO1xcXFxuICAgIGNvbnN0IGZpbGVzOiBGaWxlRGF0YVtdID0gW107XFxcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyMDsgKytpKSB7XFxcXG4gICAgICAgIGNvbnN0IGRlbGF5ID0gaSAqIDI7XFxcXG4gICAgICAgIGZpbGVzLnB1c2goe1xcXFxuICAgICAgICAgICAgaWQ6IGBpbWFnZS0ke2l9YCxcXFxcbiAgICAgICAgICAgIG5hbWU6IGBEZWxheSAtICR7ZGVsYXl9IHNlY29uZHMuanBnYCxcXFxcbiAgICAgICAgICAgIGRlbGF5OiBkZWxheSxcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXFxcXFwibGl2ZS1leGFtcGxlXFxcXFxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcXFxuICAgICAgICAgICAgICAgIHRodW1ibmFpbEdlbmVyYXRvcj17dGh1bWJuYWlsR2VuZXJhdG9yfSAvLyA8LS0tLVxcXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIjtcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1xcXCJhY3Rpb25zLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozMCxcXFwibGluZVxcXCI6MzR9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo3MX0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjMwLFxcXCJsaW5lXFxcIjozNH0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo3MX19fTtcXG4gICAgXFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCBQcm9taXNlIGZyb20gJ2JsdWViaXJkJztcXG5pbXBvcnQge1xcbiAgICBGaWxlQWN0aW9uLFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXG4gICAgRmlsZUJyb3dzZXIsXFxuICAgIEZpbGVEYXRhLFxcbiAgICBGaWxlTGlzdCxcXG4gICAgRmlsZVRvb2xiYXIsXFxufSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHtcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXG4gICAgU3RvcnlDYXRlZ29yaWVzXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDctVGh1bWJuYWlscy5tZCc7XFxuXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxuY29uc3QgdGl0bGUgPSAnRmlsZSB0aHVtYm5haWxzJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcInN0b3J5U291cmNlXFxcIjp7XFxcInNvdXJjZVxcXCI6XFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnO1xcXFxuaW1wb3J0IHtcXFxcbiAgICBGaWxlQWN0aW9uLFxcXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcXFxuICAgIEZpbGVCcm93c2VyLFxcXFxuICAgIEZpbGVEYXRhLFxcXFxuICAgIEZpbGVMaXN0LFxcXFxuICAgIEZpbGVUb29sYmFyLFxcXFxufSBmcm9tICdjaG9ua3knO1xcXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHtcXFxcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxcXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxcXG4gICAgU3RvcnlDYXRlZ29yaWVzXFxcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNy1UaHVtYm5haWxzLm1kJztcXFxcblxcXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxcXG5jb25zdCB0aXRsZSA9ICdGaWxlIHRodW1ibmFpbHMnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IHRodW1ibmFpbEdlbmVyYXRvciA9IChmaWxlOiBGaWxlRGF0YSAmIHsgZGVsYXk6IG51bWJlciB9KSA9PiB7XFxcXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xcXFxuICAgICAgICAgICAgLy8gRGVsYXkgbG9hZGluZyBieSBgZmlsZS5kZWxheWAgc2Vjb25kcyB0byBzaW11bGF0ZSB0aHVtYiBnZW5lcmF0aW9uLlxcXFxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKCcuL0xlbm5hLnBuZycpLCBmaWxlLmRlbGF5ICogMTAwMCk7XFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IFBpY3R1cmVzJywgaXNEaXI6IHRydWUgfV07XFxcXG4gICAgY29uc3QgZmlsZXM6IEZpbGVEYXRhW10gPSBbXTtcXFxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDIwOyArK2kpIHtcXFxcbiAgICAgICAgY29uc3QgZGVsYXkgPSBpICogMjtcXFxcbiAgICAgICAgZmlsZXMucHVzaCh7XFxcXG4gICAgICAgICAgICBpZDogYGltYWdlLSR7aX1gLFxcXFxuICAgICAgICAgICAgbmFtZTogYERlbGF5IC0gJHtkZWxheX0gc2Vjb25kcy5qcGdgLFxcXFxuICAgICAgICAgICAgZGVsYXk6IGRlbGF5LFxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcXFxcXCJsaXZlLWV4YW1wbGVcXFxcXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxcXG4gICAgICAgICAgICAgICAgdGh1bWJuYWlsR2VuZXJhdG9yPXt0aHVtYm5haWxHZW5lcmF0b3J9IC8vIDwtLS0tXFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiLFxcXCJsb2NhdGlvbnNNYXBcXFwiOntcXFwiYWN0aW9ucy1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzAsXFxcImxpbmVcXFwiOjM0fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NzF9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozMCxcXFwibGluZVxcXCI6MzR9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NzF9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCB0aHVtYm5haWxHZW5lcmF0b3IgPSAoZmlsZTogRmlsZURhdGEgJiB7IGRlbGF5OiBudW1iZXIgfSkgPT4ge1xcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XFxuICAgICAgICAgICAgLy8gRGVsYXkgbG9hZGluZyBieSBgZmlsZS5kZWxheWAgc2Vjb25kcyB0byBzaW11bGF0ZSB0aHVtYiBnZW5lcmF0aW9uLlxcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSgnLi9MZW5uYS5wbmcnKSwgZmlsZS5kZWxheSAqIDEwMDApO1xcbiAgICAgICAgfSk7XFxuICAgIH07XFxuXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgUGljdHVyZXMnLCBpc0RpcjogdHJ1ZSB9XTtcXG4gICAgY29uc3QgZmlsZXM6IEZpbGVEYXRhW10gPSBbXTtcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyMDsgKytpKSB7XFxuICAgICAgICBjb25zdCBkZWxheSA9IGkgKiAyO1xcbiAgICAgICAgZmlsZXMucHVzaCh7XFxuICAgICAgICAgICAgaWQ6IGBpbWFnZS0ke2l9YCxcXG4gICAgICAgICAgICBuYW1lOiBgRGVsYXkgLSAke2RlbGF5fSBzZWNvbmRzLmpwZ2AsXFxuICAgICAgICAgICAgZGVsYXk6IGRlbGF5LFxcbiAgICAgICAgfSk7XFxuICAgIH1cXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImxpdmUtZXhhbXBsZVxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcbiAgICAgICAgICAgICAgICB0aHVtYm5haWxHZW5lcmF0b3I9e3RodW1ibmFpbEdlbmVyYXRvcn0gLy8gPC0tLS1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIixcImxvY2F0aW9uc01hcFwiOntcImFjdGlvbnMtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6NDJ9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo3OX0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMCxcImxpbmVcIjo0Mn0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo3OX19fX0sXCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCBQcm9taXNlIGZyb20gJ2JsdWViaXJkJztcXG5pbXBvcnQge1xcbiAgICBGaWxlQWN0aW9uLFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXG4gICAgRmlsZUJyb3dzZXIsXFxuICAgIEZpbGVEYXRhLFxcbiAgICBGaWxlTGlzdCxcXG4gICAgRmlsZVRvb2xiYXIsXFxufSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHtcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXG4gICAgU3RvcnlDYXRlZ29yaWVzXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDctVGh1bWJuYWlscy5tZCc7XFxuXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxuY29uc3QgdGl0bGUgPSAnRmlsZSB0aHVtYm5haWxzJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgQWN0aW9uc0V4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IHRodW1ibmFpbEdlbmVyYXRvciA9IChmaWxlOiBGaWxlRGF0YSAmIHsgZGVsYXk6IG51bWJlciB9KSA9PiB7XFxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcXG4gICAgICAgICAgICAvLyBEZWxheSBsb2FkaW5nIGJ5IGBmaWxlLmRlbGF5YCBzZWNvbmRzIHRvIHNpbXVsYXRlIHRodW1iIGdlbmVyYXRpb24uXFxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKCcuL0xlbm5hLnBuZycpLCBmaWxlLmRlbGF5ICogMTAwMCk7XFxuICAgICAgICB9KTtcXG4gICAgfTtcXG5cXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBQaWN0dXJlcycsIGlzRGlyOiB0cnVlIH1dO1xcbiAgICBjb25zdCBmaWxlczogRmlsZURhdGFbXSA9IFtdO1xcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDIwOyArK2kpIHtcXG4gICAgICAgIGNvbnN0IGRlbGF5ID0gaSAqIDI7XFxuICAgICAgICBmaWxlcy5wdXNoKHtcXG4gICAgICAgICAgICBpZDogYGltYWdlLSR7aX1gLFxcbiAgICAgICAgICAgIG5hbWU6IGBEZWxheSAtICR7ZGVsYXl9IHNlY29uZHMuanBnYCxcXG4gICAgICAgICAgICBkZWxheTogZGVsYXksXFxuICAgICAgICB9KTtcXG4gICAgfVxcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwibGl2ZS1leGFtcGxlXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxuICAgICAgICAgICAgICAgIHRodW1ibmFpbEdlbmVyYXRvcj17dGh1bWJuYWlsR2VuZXJhdG9yfSAvLyA8LS0tLVxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiLFwibG9jYXRpb25zTWFwXCI6e1wiYWN0aW9ucy1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozMCxcImxpbmVcIjozNH0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjcxfSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjMwLFwibGluZVwiOjM0fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjcxfX19fSxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxuICAgIH0sXG59O1xuXG5leHBvcnQgY29uc3QgQWN0aW9uc0V4YW1wbGUgPSAoKSA9PiB7XG4gICAgY29uc3QgdGh1bWJuYWlsR2VuZXJhdG9yID0gKGZpbGU6IEZpbGVEYXRhICYgeyBkZWxheTogbnVtYmVyIH0pID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAvLyBEZWxheSBsb2FkaW5nIGJ5IGBmaWxlLmRlbGF5YCBzZWNvbmRzIHRvIHNpbXVsYXRlIHRodW1iIGdlbmVyYXRpb24uXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUoJy4vTGVubmEucG5nJyksIGZpbGUuZGVsYXkgKiAxMDAwKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgUGljdHVyZXMnLCBpc0RpcjogdHJ1ZSB9XTtcbiAgICBjb25zdCBmaWxlczogRmlsZURhdGFbXSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjA7ICsraSkge1xuICAgICAgICBjb25zdCBkZWxheSA9IGkgKiAyO1xuICAgICAgICBmaWxlcy5wdXNoKHtcbiAgICAgICAgICAgIGlkOiBgaW1hZ2UtJHtpfWAsXG4gICAgICAgICAgICBuYW1lOiBgRGVsYXkgLSAke2RlbGF5fSBzZWNvbmRzLmpwZ2AsXG4gICAgICAgICAgICBkZWxheTogZGVsYXksXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxpdmUtZXhhbXBsZVwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cbiAgICAgICAgICAgICAgICB0aHVtYm5haWxHZW5lcmF0b3I9e3RodW1ibmFpbEdlbmVyYXRvcn0gLy8gPC0tLS1cbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IFwiRmlsZSB0aHVtYm5haWxzLCB3b28hXFxuXCI7IiwiXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSwgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXFxcbiAgICBTdG9yeUNhdGVnb3JpZXMsXFxcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wOC1EcmFnLW4tZHJvcC5tZCc7XFxcXG5cXFxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyQmFzaWNzO1xcXFxuY29uc3QgdGl0bGUgPSAnRW5hYmxpbmcgZHJhZyAmIGRyb3AnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IERyYWdORHJvcEV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbXFxcXG4gICAgICAgIHsgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgRG9jdW1lbnRzJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICAgICAgeyBpZDogJ2dNNXRUZScsIG5hbWU6ICdPdGhlcicsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgXTtcXFxcbiAgICBjb25zdCBmaWxlcyA9IFtcXFxcbiAgICAgICAgeyBpZDogJ21IZTRBMScsIG5hbWU6ICdNZWFuaW5nIG9mIGxpZmUudHh0Jywgc2l6ZTogMzE0MTUgfSxcXFxcbiAgICAgICAgeyBpZDogJ3l0NDNBeCcsIG5hbWU6ICdTQ1AtMzkzMCBQaG90b3MnLCBpc0RpcjogdHJ1ZSB9LFxcXFxuICAgIF07XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcXFxcXCJsaXZlLWV4YW1wbGVcXFxcXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiO1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XFxcImRyYWctbi1kcm9wLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozMixcXFwibGluZVxcXCI6MjZ9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo1M30sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjMyLFxcXCJsaW5lXFxcIjoyNn0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo1M319fTtcXG4gICAgXFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7XFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxuICAgIFN0b3J5Q2F0ZWdvcmllcyxcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wOC1EcmFnLW4tZHJvcC5tZCc7XFxuXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxuY29uc3QgdGl0bGUgPSAnRW5hYmxpbmcgZHJhZyAmIGRyb3AnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxuICAgIHBhcmFtZXRlcnM6IHtcXFwic3RvcnlTb3VyY2VcXFwiOntcXFwic291cmNlXFxcIjpcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSwgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXFxcbiAgICBTdG9yeUNhdGVnb3JpZXMsXFxcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wOC1EcmFnLW4tZHJvcC5tZCc7XFxcXG5cXFxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyQmFzaWNzO1xcXFxuY29uc3QgdGl0bGUgPSAnRW5hYmxpbmcgZHJhZyAmIGRyb3AnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IERyYWdORHJvcEV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbXFxcXG4gICAgICAgIHsgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgRG9jdW1lbnRzJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICAgICAgeyBpZDogJ2dNNXRUZScsIG5hbWU6ICdPdGhlcicsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgXTtcXFxcbiAgICBjb25zdCBmaWxlcyA9IFtcXFxcbiAgICAgICAgeyBpZDogJ21IZTRBMScsIG5hbWU6ICdNZWFuaW5nIG9mIGxpZmUudHh0Jywgc2l6ZTogMzE0MTUgfSxcXFxcbiAgICAgICAgeyBpZDogJ3l0NDNBeCcsIG5hbWU6ICdTQ1AtMzkzMCBQaG90b3MnLCBpc0RpcjogdHJ1ZSB9LFxcXFxuICAgIF07XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcXFxcXCJsaXZlLWV4YW1wbGVcXFxcXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiLFxcXCJsb2NhdGlvbnNNYXBcXFwiOntcXFwiZHJhZy1uLWRyb3AtZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjMyLFxcXCJsaW5lXFxcIjoyNn0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjUzfSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzIsXFxcImxpbmVcXFwiOjI2fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjUzfX19fSxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBEcmFnTkRyb3BFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFtcXG4gICAgICAgIHsgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgRG9jdW1lbnRzJywgaXNEaXI6IHRydWUgfSxcXG4gICAgICAgIHsgaWQ6ICdnTTV0VGUnLCBuYW1lOiAnT3RoZXInLCBpc0RpcjogdHJ1ZSB9LFxcbiAgICBdO1xcbiAgICBjb25zdCBmaWxlcyA9IFtcXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXFxuICAgICAgICB7IGlkOiAneXQ0M0F4JywgbmFtZTogJ1NDUC0zOTMwIFBob3RvcycsIGlzRGlyOiB0cnVlIH0sXFxuICAgIF07XFxuXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXG4gICAgfTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJsaXZlLWV4YW1wbGVcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIjtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcImRyYWctbi1kcm9wLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjMyLFwibGluZVwiOjM0fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6NjF9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzIsXCJsaW5lXCI6MzR9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6NjF9fX07XG4gICAgXG5cbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAvLyBAdHMtbm9jaGVja1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7XFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxuICAgIFN0b3J5Q2F0ZWdvcmllcyxcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wOC1EcmFnLW4tZHJvcC5tZCc7XFxuXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxuY29uc3QgdGl0bGUgPSAnRW5hYmxpbmcgZHJhZyAmIGRyb3AnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxuICAgIHBhcmFtZXRlcnM6IHtcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBEcmFnTkRyb3BFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFtcXG4gICAgICAgIHsgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgRG9jdW1lbnRzJywgaXNEaXI6IHRydWUgfSxcXG4gICAgICAgIHsgaWQ6ICdnTTV0VGUnLCBuYW1lOiAnT3RoZXInLCBpc0RpcjogdHJ1ZSB9LFxcbiAgICBdO1xcbiAgICBjb25zdCBmaWxlcyA9IFtcXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXFxuICAgICAgICB7IGlkOiAneXQ0M0F4JywgbmFtZTogJ1NDUC0zOTMwIFBob3RvcycsIGlzRGlyOiB0cnVlIH0sXFxuICAgIF07XFxuXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXG4gICAgfTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJsaXZlLWV4YW1wbGVcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIjtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcImRyYWctbi1kcm9wLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjMyLFwibGluZVwiOjI2fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6NTN9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzIsXCJsaW5lXCI6MjZ9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6NTN9fX07XG4gICAgXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XG5cbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7XG4gICAgY3JlYXRlRG9jc09iamVjdCxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxuICAgIFN0b3J5Q2F0ZWdvcmllcyxcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XG4vLyBAdHMtaWdub3JlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA4LURyYWctbi1kcm9wLm1kJztcblxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XG5jb25zdCB0aXRsZSA9ICdFbmFibGluZyBkcmFnICYgZHJvcCc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZGVmYXVsdC1leHBvcnRcbmV4cG9ydCBkZWZhdWx0IHtcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcbiAgICBwYXJhbWV0ZXJzOiB7XCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiXFxuICAgICAgXFxuICAgICAgLy8gQHRzLW5vY2hlY2tcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fU1RPUllfXyA9IFxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcXFxuICAgIFN0b3J5Q2F0ZWdvcmllcyxcXFxcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA4LURyYWctbi1kcm9wLm1kJztcXFxcblxcXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxcXG5jb25zdCB0aXRsZSA9ICdFbmFibGluZyBkcmFnICYgZHJvcCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgRHJhZ05Ecm9wRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFtcXFxcbiAgICAgICAgeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBEb2N1bWVudHMnLCBpc0RpcjogdHJ1ZSB9LFxcXFxuICAgICAgICB7IGlkOiAnZ001dFRlJywgbmFtZTogJ090aGVyJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuICAgIGNvbnN0IGZpbGVzID0gW1xcXFxuICAgICAgICB7IGlkOiAnbUhlNEExJywgbmFtZTogJ01lYW5pbmcgb2YgbGlmZS50eHQnLCBzaXplOiAzMTQxNSB9LFxcXFxuICAgICAgICB7IGlkOiAneXQ0M0F4JywgbmFtZTogJ1NDUC0zOTMwIFBob3RvcycsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFxcXFxcImxpdmUtZXhhbXBsZVxcXFxcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwiZHJhZy1uLWRyb3AtZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjMyLFxcXCJsaW5lXFxcIjoyNn0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjUzfSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzIsXFxcImxpbmVcXFwiOjI2fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjUzfX19O1xcbiAgICBcXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHtcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXG4gICAgU3RvcnlDYXRlZ29yaWVzLFxcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA4LURyYWctbi1kcm9wLm1kJztcXG5cXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5GaWxlQnJvd3NlckJhc2ljcztcXG5jb25zdCB0aXRsZSA9ICdFbmFibGluZyBkcmFnICYgZHJvcCc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXG4gICAgcGFyYW1ldGVyczoge1xcXCJzdG9yeVNvdXJjZVxcXCI6e1xcXCJzb3VyY2VcXFwiOlxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcXFxuICAgIFN0b3J5Q2F0ZWdvcmllcyxcXFxcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA4LURyYWctbi1kcm9wLm1kJztcXFxcblxcXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxcXG5jb25zdCB0aXRsZSA9ICdFbmFibGluZyBkcmFnICYgZHJvcCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgRHJhZ05Ecm9wRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFtcXFxcbiAgICAgICAgeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBEb2N1bWVudHMnLCBpc0RpcjogdHJ1ZSB9LFxcXFxuICAgICAgICB7IGlkOiAnZ001dFRlJywgbmFtZTogJ090aGVyJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuICAgIGNvbnN0IGZpbGVzID0gW1xcXFxuICAgICAgICB7IGlkOiAnbUhlNEExJywgbmFtZTogJ01lYW5pbmcgb2YgbGlmZS50eHQnLCBzaXplOiAzMTQxNSB9LFxcXFxuICAgICAgICB7IGlkOiAneXQ0M0F4JywgbmFtZTogJ1NDUC0zOTMwIFBob3RvcycsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFxcXFxcImxpdmUtZXhhbXBsZVxcXFxcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCIsXFxcImxvY2F0aW9uc01hcFxcXCI6e1xcXCJkcmFnLW4tZHJvcC1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzIsXFxcImxpbmVcXFwiOjI2fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NTN9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozMixcXFwibGluZVxcXCI6MjZ9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NTN9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IERyYWdORHJvcEV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW1xcbiAgICAgICAgeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBEb2N1bWVudHMnLCBpc0RpcjogdHJ1ZSB9LFxcbiAgICAgICAgeyBpZDogJ2dNNXRUZScsIG5hbWU6ICdPdGhlcicsIGlzRGlyOiB0cnVlIH0sXFxuICAgIF07XFxuICAgIGNvbnN0IGZpbGVzID0gW1xcbiAgICAgICAgeyBpZDogJ21IZTRBMScsIG5hbWU6ICdNZWFuaW5nIG9mIGxpZmUudHh0Jywgc2l6ZTogMzE0MTUgfSxcXG4gICAgICAgIHsgaWQ6ICd5dDQzQXgnLCBuYW1lOiAnU0NQLTM5MzAgUGhvdG9zJywgaXNEaXI6IHRydWUgfSxcXG4gICAgXTtcXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImxpdmUtZXhhbXBsZVxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiLFwibG9jYXRpb25zTWFwXCI6e1wiZHJhZy1uLWRyb3AtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzIsXCJsaW5lXCI6MzR9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo2MX0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMixcImxpbmVcIjozNH0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo2MX19fX0sXCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7XFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxuICAgIFN0b3J5Q2F0ZWdvcmllcyxcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wOC1EcmFnLW4tZHJvcC5tZCc7XFxuXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJCYXNpY3M7XFxuY29uc3QgdGl0bGUgPSAnRW5hYmxpbmcgZHJhZyAmIGRyb3AnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxuICAgIHBhcmFtZXRlcnM6IHtcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBEcmFnTkRyb3BFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFtcXG4gICAgICAgIHsgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgRG9jdW1lbnRzJywgaXNEaXI6IHRydWUgfSxcXG4gICAgICAgIHsgaWQ6ICdnTTV0VGUnLCBuYW1lOiAnT3RoZXInLCBpc0RpcjogdHJ1ZSB9LFxcbiAgICBdO1xcbiAgICBjb25zdCBmaWxlcyA9IFtcXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXFxuICAgICAgICB7IGlkOiAneXQ0M0F4JywgbmFtZTogJ1NDUC0zOTMwIFBob3RvcycsIGlzRGlyOiB0cnVlIH0sXFxuICAgIF07XFxuXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXG4gICAgfTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJsaXZlLWV4YW1wbGVcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIixcImxvY2F0aW9uc01hcFwiOntcImRyYWctbi1kcm9wLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjMyLFwibGluZVwiOjI2fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6NTN9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzIsXCJsaW5lXCI6MjZ9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6NTN9fX19LFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXG4gICAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBEcmFnTkRyb3BFeGFtcGxlID0gKCkgPT4ge1xuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW1xuICAgICAgICB7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IERvY3VtZW50cycsIGlzRGlyOiB0cnVlIH0sXG4gICAgICAgIHsgaWQ6ICdnTTV0VGUnLCBuYW1lOiAnT3RoZXInLCBpc0RpcjogdHJ1ZSB9LFxuICAgIF07XG4gICAgY29uc3QgZmlsZXMgPSBbXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXG4gICAgICAgIHsgaWQ6ICd5dDQzQXgnLCBuYW1lOiAnU0NQLTM5MzAgUGhvdG9zJywgaXNEaXI6IHRydWUgfSxcbiAgICBdO1xuXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGl2ZS1leGFtcGxlXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgXCJZb3UgbWlnaHQgbm90aWNlIHRoYXQgZHJhZyAmIGRyb3AgZG9lcyBub3Qgd29yayBvdXQtb2YtdGhlLWJveCBpbiBDaG9ua3kuIFRoaXMgaXNcXG5iZWNhdXNlIENob25reSB1c2VzIFtyZWFjdC1kbmRdKGh0dHBzOi8vcmVhY3QtZG5kLmdpdGh1Yi5pby9yZWFjdC1kbmQvKSBsaWJyYXJ5IHRvXFxuaGFuZGxlIGRyYWcgJiBkcm9wLCB3aGljaCBpcyBub3QgdHVybmVkIGJ5IGRlZmF1bHQuXFxuXFxuVG8gZW5hYmxlIGRyYWcgJiBkcm9wLCB5b3Ugd2lsbCBuZWVkIHRvIHdyYXAgeW91ciBhcHBsaWNhdGlvbiByb290IHdpdGggdGhlXFxuYDxEbmRQcm92aWRlcj5gIGNvbXBvbmVudCBmcm9tIHJlYWN0LWRuZDpcXG5cXG5gYGB0c3hcXG5pbXBvcnQgUmVhY3QsIHsgUmVhY3RET00gfSBmcm9tICdyZWFjdCc7XFxuaW1wb3J0IHsgRG5kUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1kbmQnO1xcbmltcG9ydCB7IEhUTUw1QmFja2VuZCB9IGZyb20gJ3JlYWN0LWRuZC1odG1sNS1iYWNrZW5kJztcXG5cXG5SZWFjdERPTS5yZW5kZXIoXFxuICAgIDxEbmRQcm92aWRlciBiYWNrZW5kPXtIVE1MNUJhY2tlbmR9PlxcbiAgICAgICAgPEFwcCAvPlxcbiAgICA8L0RuZFByb3ZpZGVyPixcXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcCcpXFxuKTtcXG5gYGBcXG5cXG5OZXh0LCBlbmFibGUgZHJhZyAmIGRyb3AgaW4geW91ciBgPEZpbGVCcm93c2VyPmA6XFxuXFxuYGBgdHN4XFxuPEZpbGVCcm93c2VyXFxuICAgIGZpbGVzPXtmaWxlc31cXG4gICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9IC8vIDwtLS0tXFxuPlxcbiAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgPEZpbGVMaXN0IC8+XFxuPC9GaWxlQnJvd3Nlcj5cXG5gYGBcXG5cXG5PbmNlIHlvdSBkbyB0aGlzLCBkcmFnICYgZHJvcCBzaG91bGQgc3RhcnQgd29ya2luZyBpbiBhbGwgQ2hvbmt5IGluc3RhbmNlcy4gRllJLCB5b3VcXG5kb24ndCBoYXZlIHRvIHVzZSBgSFRNTDVCYWNrZW5kYCwgeW91IGNhbiByZXBsYWNlIGl0IHdpdGggYW55IGJhY2tlbmQgeW91IHdhbnQuIENvbnN1bHRcXG5bcmVhY3QtZG5kIGRvY3NdKGh0dHBzOi8vcmVhY3QtZG5kLmdpdGh1Yi5pby9yZWFjdC1kbmQvZG9jcy9vdmVydmlldykgZm9yIGRldGFpbHMuXFxuXCI7IiwiXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQgeyBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIFN0b3J5Q2F0ZWdvcmllcyB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMS1JbnZhbGlkLXByb3BzLm1kJztcXFxcblxcXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJFeGFtcGxlcztcXFxcbmNvbnN0IHRpdGxlID0gJ1Bhc3NpbmcgaW52YWxpZCBwcm9wcyc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgSW52YWxpZFByb3BzRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBiYWRGaWxlcyA9IFtcXFxcbiAgICAgICAgMTIzMTIsIC8vIE5vdCBhbiBvYmplY3Qgb3IgYG51bGxgIVxcXFxuICAgICAgICB7fSwgLy8gTWlzc2luZyBhbGwgcmVxdWlyZWQgZmllbGRzIVxcXFxuICAgICAgICB7IGlkOiAnMnhmNCcgfSwgLy8gTWlzc2luZyBzb21lIHJlcXVpcmVkIGZpZWxkcyFcXFxcbiAgICAgICAgeyBpZDogJzJ4ZjQnLCBuYW1lOiAnU29tZSBvdGhlciBmaWxlIScgfSwgLy8gRHVwbGljYXRlIElEIVxcXFxuXFxcXG4gICAgICAgIHsgaWQ6ICd4YkFyJywgbmFtZTogJ0dvb2QgZmlsZS50eHQnIH0sIC8vIEdvb2QgZmlsZSFcXFxcbiAgICBdO1xcXFxuICAgIGNvbnN0IGJhZEZvbGRlckNoYWluID0gW1xcXFxuICAgICAgICAxMjMxMiwgLy8gTm90IGFuIG9iamVjdCBvciBgbnVsbGAhXFxcXG4gICAgICAgIHsgaWQ6ICdiUnlIJywgbmFtZTogJ0dvb2QgZm9sZGVyJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICAgICAgeyBpZDogJ2JNZ1InLCBuYW1lOiAnR29vZCBmb2xkZXIgIzInLCBpc0RpcjogdHJ1ZSB9LFxcXFxuICAgIF07XFxcXG4gICAgY29uc3QgYmFkRmlsZUFjdGlvbnMgPSBbeyBpZDogJ2R1cGxpY2F0ZV9maWxlcycgfSwgeyBpZDogJ2R1cGxpY2F0ZV9maWxlcycgfV07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2JhZEZpbGVzIGFzIGFueX1cXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17YmFkRm9sZGVyQ2hhaW4gYXMgYW55fVxcXFxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtiYWRGaWxlQWN0aW9uc31cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIjtcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1xcXCJpbnZhbGlkLXByb3BzLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozNSxcXFwibGluZVxcXCI6MjJ9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo1MH0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjM1LFxcXCJsaW5lXFxcIjoyMn0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo1MH19fTtcXG4gICAgXFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7IEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgU3RvcnlDYXRlZ29yaWVzIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAxLUludmFsaWQtcHJvcHMubWQnO1xcblxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyRXhhbXBsZXM7XFxuY29uc3QgdGl0bGUgPSAnUGFzc2luZyBpbnZhbGlkIHByb3BzJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcInN0b3J5U291cmNlXFxcIjp7XFxcInNvdXJjZVxcXCI6XFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IHsgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBTdG9yeUNhdGVnb3JpZXMgfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtSW52YWxpZC1wcm9wcy5tZCc7XFxcXG5cXFxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyRXhhbXBsZXM7XFxcXG5jb25zdCB0aXRsZSA9ICdQYXNzaW5nIGludmFsaWQgcHJvcHMnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEludmFsaWRQcm9wc0V4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgYmFkRmlsZXMgPSBbXFxcXG4gICAgICAgIDEyMzEyLCAvLyBOb3QgYW4gb2JqZWN0IG9yIGBudWxsYCFcXFxcbiAgICAgICAge30sIC8vIE1pc3NpbmcgYWxsIHJlcXVpcmVkIGZpZWxkcyFcXFxcbiAgICAgICAgeyBpZDogJzJ4ZjQnIH0sIC8vIE1pc3Npbmcgc29tZSByZXF1aXJlZCBmaWVsZHMhXFxcXG4gICAgICAgIHsgaWQ6ICcyeGY0JywgbmFtZTogJ1NvbWUgb3RoZXIgZmlsZSEnIH0sIC8vIER1cGxpY2F0ZSBJRCFcXFxcblxcXFxuICAgICAgICB7IGlkOiAneGJBcicsIG5hbWU6ICdHb29kIGZpbGUudHh0JyB9LCAvLyBHb29kIGZpbGUhXFxcXG4gICAgXTtcXFxcbiAgICBjb25zdCBiYWRGb2xkZXJDaGFpbiA9IFtcXFxcbiAgICAgICAgMTIzMTIsIC8vIE5vdCBhbiBvYmplY3Qgb3IgYG51bGxgIVxcXFxuICAgICAgICB7IGlkOiAnYlJ5SCcsIG5hbWU6ICdHb29kIGZvbGRlcicsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdiTWdSJywgbmFtZTogJ0dvb2QgZm9sZGVyICMyJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuICAgIGNvbnN0IGJhZEZpbGVBY3Rpb25zID0gW3sgaWQ6ICdkdXBsaWNhdGVfZmlsZXMnIH0sIHsgaWQ6ICdkdXBsaWNhdGVfZmlsZXMnIH1dO1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtiYWRGaWxlcyBhcyBhbnl9XFxcXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2JhZEZvbGRlckNoYWluIGFzIGFueX1cXFxcbiAgICAgICAgICAgICAgICBmaWxlQWN0aW9ucz17YmFkRmlsZUFjdGlvbnN9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCIsXFxcImxvY2F0aW9uc01hcFxcXCI6e1xcXCJpbnZhbGlkLXByb3BzLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozNSxcXFwibGluZVxcXCI6MjJ9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo1MH0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjM1LFxcXCJsaW5lXFxcIjoyMn0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo1MH19fX0sXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgSW52YWxpZFByb3BzRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgYmFkRmlsZXMgPSBbXFxuICAgICAgICAxMjMxMiwgLy8gTm90IGFuIG9iamVjdCBvciBgbnVsbGAhXFxuICAgICAgICB7fSwgLy8gTWlzc2luZyBhbGwgcmVxdWlyZWQgZmllbGRzIVxcbiAgICAgICAgeyBpZDogJzJ4ZjQnIH0sIC8vIE1pc3Npbmcgc29tZSByZXF1aXJlZCBmaWVsZHMhXFxuICAgICAgICB7IGlkOiAnMnhmNCcsIG5hbWU6ICdTb21lIG90aGVyIGZpbGUhJyB9LCAvLyBEdXBsaWNhdGUgSUQhXFxuXFxuICAgICAgICB7IGlkOiAneGJBcicsIG5hbWU6ICdHb29kIGZpbGUudHh0JyB9LCAvLyBHb29kIGZpbGUhXFxuICAgIF07XFxuICAgIGNvbnN0IGJhZEZvbGRlckNoYWluID0gW1xcbiAgICAgICAgMTIzMTIsIC8vIE5vdCBhbiBvYmplY3Qgb3IgYG51bGxgIVxcbiAgICAgICAgeyBpZDogJ2JSeUgnLCBuYW1lOiAnR29vZCBmb2xkZXInLCBpc0RpcjogdHJ1ZSB9LFxcbiAgICAgICAgeyBpZDogJ2JNZ1InLCBuYW1lOiAnR29vZCBmb2xkZXIgIzInLCBpc0RpcjogdHJ1ZSB9LFxcbiAgICBdO1xcbiAgICBjb25zdCBiYWRGaWxlQWN0aW9ucyA9IFt7IGlkOiAnZHVwbGljYXRlX2ZpbGVzJyB9LCB7IGlkOiAnZHVwbGljYXRlX2ZpbGVzJyB9XTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtiYWRGaWxlcyBhcyBhbnl9XFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtiYWRGb2xkZXJDaGFpbiBhcyBhbnl9XFxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtiYWRGaWxlQWN0aW9uc31cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIjtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcImludmFsaWQtcHJvcHMtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzUsXCJsaW5lXCI6MzB9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo1OH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozNSxcImxpbmVcIjozMH0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo1OH19fTtcbiAgICBcblxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHsgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBTdG9yeUNhdGVnb3JpZXMgfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtSW52YWxpZC1wcm9wcy5tZCc7XFxuXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJFeGFtcGxlcztcXG5jb25zdCB0aXRsZSA9ICdQYXNzaW5nIGludmFsaWQgcHJvcHMnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxuICAgIHBhcmFtZXRlcnM6IHtcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBJbnZhbGlkUHJvcHNFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBiYWRGaWxlcyA9IFtcXG4gICAgICAgIDEyMzEyLCAvLyBOb3QgYW4gb2JqZWN0IG9yIGBudWxsYCFcXG4gICAgICAgIHt9LCAvLyBNaXNzaW5nIGFsbCByZXF1aXJlZCBmaWVsZHMhXFxuICAgICAgICB7IGlkOiAnMnhmNCcgfSwgLy8gTWlzc2luZyBzb21lIHJlcXVpcmVkIGZpZWxkcyFcXG4gICAgICAgIHsgaWQ6ICcyeGY0JywgbmFtZTogJ1NvbWUgb3RoZXIgZmlsZSEnIH0sIC8vIER1cGxpY2F0ZSBJRCFcXG5cXG4gICAgICAgIHsgaWQ6ICd4YkFyJywgbmFtZTogJ0dvb2QgZmlsZS50eHQnIH0sIC8vIEdvb2QgZmlsZSFcXG4gICAgXTtcXG4gICAgY29uc3QgYmFkRm9sZGVyQ2hhaW4gPSBbXFxuICAgICAgICAxMjMxMiwgLy8gTm90IGFuIG9iamVjdCBvciBgbnVsbGAhXFxuICAgICAgICB7IGlkOiAnYlJ5SCcsIG5hbWU6ICdHb29kIGZvbGRlcicsIGlzRGlyOiB0cnVlIH0sXFxuICAgICAgICB7IGlkOiAnYk1nUicsIG5hbWU6ICdHb29kIGZvbGRlciAjMicsIGlzRGlyOiB0cnVlIH0sXFxuICAgIF07XFxuICAgIGNvbnN0IGJhZEZpbGVBY3Rpb25zID0gW3sgaWQ6ICdkdXBsaWNhdGVfZmlsZXMnIH0sIHsgaWQ6ICdkdXBsaWNhdGVfZmlsZXMnIH1dO1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2JhZEZpbGVzIGFzIGFueX1cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2JhZEZvbGRlckNoYWluIGFzIGFueX1cXG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2JhZEZpbGVBY3Rpb25zfVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiaW52YWxpZC1wcm9wcy1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozNSxcImxpbmVcIjoyMn0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjUwfSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjM1LFwibGluZVwiOjIyfSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjUwfX19O1xuICAgIFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xuXG5pbXBvcnQgeyBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIFN0b3J5Q2F0ZWdvcmllcyB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xuLy8gQHRzLWlnbm9yZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMS1JbnZhbGlkLXByb3BzLm1kJztcblxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJFeGFtcGxlcztcbmNvbnN0IHRpdGxlID0gJ1Bhc3NpbmcgaW52YWxpZCBwcm9wcyc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZGVmYXVsdC1leHBvcnRcbmV4cG9ydCBkZWZhdWx0IHtcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcbiAgICBwYXJhbWV0ZXJzOiB7XCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiXFxuICAgICAgXFxuICAgICAgLy8gQHRzLW5vY2hlY2tcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fU1RPUllfXyA9IFxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7IEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgU3RvcnlDYXRlZ29yaWVzIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAxLUludmFsaWQtcHJvcHMubWQnO1xcXFxuXFxcXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5GaWxlQnJvd3NlckV4YW1wbGVzO1xcXFxuY29uc3QgdGl0bGUgPSAnUGFzc2luZyBpbnZhbGlkIHByb3BzJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBJbnZhbGlkUHJvcHNFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGJhZEZpbGVzID0gW1xcXFxuICAgICAgICAxMjMxMiwgLy8gTm90IGFuIG9iamVjdCBvciBgbnVsbGAhXFxcXG4gICAgICAgIHt9LCAvLyBNaXNzaW5nIGFsbCByZXF1aXJlZCBmaWVsZHMhXFxcXG4gICAgICAgIHsgaWQ6ICcyeGY0JyB9LCAvLyBNaXNzaW5nIHNvbWUgcmVxdWlyZWQgZmllbGRzIVxcXFxuICAgICAgICB7IGlkOiAnMnhmNCcsIG5hbWU6ICdTb21lIG90aGVyIGZpbGUhJyB9LCAvLyBEdXBsaWNhdGUgSUQhXFxcXG5cXFxcbiAgICAgICAgeyBpZDogJ3hiQXInLCBuYW1lOiAnR29vZCBmaWxlLnR4dCcgfSwgLy8gR29vZCBmaWxlIVxcXFxuICAgIF07XFxcXG4gICAgY29uc3QgYmFkRm9sZGVyQ2hhaW4gPSBbXFxcXG4gICAgICAgIDEyMzEyLCAvLyBOb3QgYW4gb2JqZWN0IG9yIGBudWxsYCFcXFxcbiAgICAgICAgeyBpZDogJ2JSeUgnLCBuYW1lOiAnR29vZCBmb2xkZXInLCBpc0RpcjogdHJ1ZSB9LFxcXFxuICAgICAgICB7IGlkOiAnYk1nUicsIG5hbWU6ICdHb29kIGZvbGRlciAjMicsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgXTtcXFxcbiAgICBjb25zdCBiYWRGaWxlQWN0aW9ucyA9IFt7IGlkOiAnZHVwbGljYXRlX2ZpbGVzJyB9LCB7IGlkOiAnZHVwbGljYXRlX2ZpbGVzJyB9XTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17YmFkRmlsZXMgYXMgYW55fVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtiYWRGb2xkZXJDaGFpbiBhcyBhbnl9XFxcXG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2JhZEZpbGVBY3Rpb25zfVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiO1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XFxcImludmFsaWQtcHJvcHMtZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjM1LFxcXCJsaW5lXFxcIjoyMn0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjUwfSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzUsXFxcImxpbmVcXFwiOjIyfSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjUwfX19O1xcbiAgICBcXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHsgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBTdG9yeUNhdGVnb3JpZXMgfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtSW52YWxpZC1wcm9wcy5tZCc7XFxuXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJFeGFtcGxlcztcXG5jb25zdCB0aXRsZSA9ICdQYXNzaW5nIGludmFsaWQgcHJvcHMnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxuICAgIHBhcmFtZXRlcnM6IHtcXFwic3RvcnlTb3VyY2VcXFwiOntcXFwic291cmNlXFxcIjpcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQgeyBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIFN0b3J5Q2F0ZWdvcmllcyB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMS1JbnZhbGlkLXByb3BzLm1kJztcXFxcblxcXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJFeGFtcGxlcztcXFxcbmNvbnN0IHRpdGxlID0gJ1Bhc3NpbmcgaW52YWxpZCBwcm9wcyc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgSW52YWxpZFByb3BzRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBiYWRGaWxlcyA9IFtcXFxcbiAgICAgICAgMTIzMTIsIC8vIE5vdCBhbiBvYmplY3Qgb3IgYG51bGxgIVxcXFxuICAgICAgICB7fSwgLy8gTWlzc2luZyBhbGwgcmVxdWlyZWQgZmllbGRzIVxcXFxuICAgICAgICB7IGlkOiAnMnhmNCcgfSwgLy8gTWlzc2luZyBzb21lIHJlcXVpcmVkIGZpZWxkcyFcXFxcbiAgICAgICAgeyBpZDogJzJ4ZjQnLCBuYW1lOiAnU29tZSBvdGhlciBmaWxlIScgfSwgLy8gRHVwbGljYXRlIElEIVxcXFxuXFxcXG4gICAgICAgIHsgaWQ6ICd4YkFyJywgbmFtZTogJ0dvb2QgZmlsZS50eHQnIH0sIC8vIEdvb2QgZmlsZSFcXFxcbiAgICBdO1xcXFxuICAgIGNvbnN0IGJhZEZvbGRlckNoYWluID0gW1xcXFxuICAgICAgICAxMjMxMiwgLy8gTm90IGFuIG9iamVjdCBvciBgbnVsbGAhXFxcXG4gICAgICAgIHsgaWQ6ICdiUnlIJywgbmFtZTogJ0dvb2QgZm9sZGVyJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICAgICAgeyBpZDogJ2JNZ1InLCBuYW1lOiAnR29vZCBmb2xkZXIgIzInLCBpc0RpcjogdHJ1ZSB9LFxcXFxuICAgIF07XFxcXG4gICAgY29uc3QgYmFkRmlsZUFjdGlvbnMgPSBbeyBpZDogJ2R1cGxpY2F0ZV9maWxlcycgfSwgeyBpZDogJ2R1cGxpY2F0ZV9maWxlcycgfV07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2JhZEZpbGVzIGFzIGFueX1cXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17YmFkRm9sZGVyQ2hhaW4gYXMgYW55fVxcXFxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtiYWRGaWxlQWN0aW9uc31cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcImludmFsaWQtcHJvcHMtZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjM1LFxcXCJsaW5lXFxcIjoyMn0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjUwfSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzUsXFxcImxpbmVcXFwiOjIyfSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjUwfX19fSxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBJbnZhbGlkUHJvcHNFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBiYWRGaWxlcyA9IFtcXG4gICAgICAgIDEyMzEyLCAvLyBOb3QgYW4gb2JqZWN0IG9yIGBudWxsYCFcXG4gICAgICAgIHt9LCAvLyBNaXNzaW5nIGFsbCByZXF1aXJlZCBmaWVsZHMhXFxuICAgICAgICB7IGlkOiAnMnhmNCcgfSwgLy8gTWlzc2luZyBzb21lIHJlcXVpcmVkIGZpZWxkcyFcXG4gICAgICAgIHsgaWQ6ICcyeGY0JywgbmFtZTogJ1NvbWUgb3RoZXIgZmlsZSEnIH0sIC8vIER1cGxpY2F0ZSBJRCFcXG5cXG4gICAgICAgIHsgaWQ6ICd4YkFyJywgbmFtZTogJ0dvb2QgZmlsZS50eHQnIH0sIC8vIEdvb2QgZmlsZSFcXG4gICAgXTtcXG4gICAgY29uc3QgYmFkRm9sZGVyQ2hhaW4gPSBbXFxuICAgICAgICAxMjMxMiwgLy8gTm90IGFuIG9iamVjdCBvciBgbnVsbGAhXFxuICAgICAgICB7IGlkOiAnYlJ5SCcsIG5hbWU6ICdHb29kIGZvbGRlcicsIGlzRGlyOiB0cnVlIH0sXFxuICAgICAgICB7IGlkOiAnYk1nUicsIG5hbWU6ICdHb29kIGZvbGRlciAjMicsIGlzRGlyOiB0cnVlIH0sXFxuICAgIF07XFxuICAgIGNvbnN0IGJhZEZpbGVBY3Rpb25zID0gW3sgaWQ6ICdkdXBsaWNhdGVfZmlsZXMnIH0sIHsgaWQ6ICdkdXBsaWNhdGVfZmlsZXMnIH1dO1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2JhZEZpbGVzIGFzIGFueX1cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2JhZEZvbGRlckNoYWluIGFzIGFueX1cXG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2JhZEZpbGVBY3Rpb25zfVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiLFwibG9jYXRpb25zTWFwXCI6e1wiaW52YWxpZC1wcm9wcy1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozNSxcImxpbmVcIjozMH0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjU4fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjM1LFwibGluZVwiOjMwfSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjU4fX19fSxcInN0b3J5U291cmNlXCI6e1wic291cmNlXCI6XCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHsgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBTdG9yeUNhdGVnb3JpZXMgfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtSW52YWxpZC1wcm9wcy5tZCc7XFxuXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJFeGFtcGxlcztcXG5jb25zdCB0aXRsZSA9ICdQYXNzaW5nIGludmFsaWQgcHJvcHMnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxuICAgIHBhcmFtZXRlcnM6IHtcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBJbnZhbGlkUHJvcHNFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBiYWRGaWxlcyA9IFtcXG4gICAgICAgIDEyMzEyLCAvLyBOb3QgYW4gb2JqZWN0IG9yIGBudWxsYCFcXG4gICAgICAgIHt9LCAvLyBNaXNzaW5nIGFsbCByZXF1aXJlZCBmaWVsZHMhXFxuICAgICAgICB7IGlkOiAnMnhmNCcgfSwgLy8gTWlzc2luZyBzb21lIHJlcXVpcmVkIGZpZWxkcyFcXG4gICAgICAgIHsgaWQ6ICcyeGY0JywgbmFtZTogJ1NvbWUgb3RoZXIgZmlsZSEnIH0sIC8vIER1cGxpY2F0ZSBJRCFcXG5cXG4gICAgICAgIHsgaWQ6ICd4YkFyJywgbmFtZTogJ0dvb2QgZmlsZS50eHQnIH0sIC8vIEdvb2QgZmlsZSFcXG4gICAgXTtcXG4gICAgY29uc3QgYmFkRm9sZGVyQ2hhaW4gPSBbXFxuICAgICAgICAxMjMxMiwgLy8gTm90IGFuIG9iamVjdCBvciBgbnVsbGAhXFxuICAgICAgICB7IGlkOiAnYlJ5SCcsIG5hbWU6ICdHb29kIGZvbGRlcicsIGlzRGlyOiB0cnVlIH0sXFxuICAgICAgICB7IGlkOiAnYk1nUicsIG5hbWU6ICdHb29kIGZvbGRlciAjMicsIGlzRGlyOiB0cnVlIH0sXFxuICAgIF07XFxuICAgIGNvbnN0IGJhZEZpbGVBY3Rpb25zID0gW3sgaWQ6ICdkdXBsaWNhdGVfZmlsZXMnIH0sIHsgaWQ6ICdkdXBsaWNhdGVfZmlsZXMnIH1dO1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2JhZEZpbGVzIGFzIGFueX1cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2JhZEZvbGRlckNoYWluIGFzIGFueX1cXG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2JhZEZpbGVBY3Rpb25zfVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiLFwibG9jYXRpb25zTWFwXCI6e1wiaW52YWxpZC1wcm9wcy1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozNSxcImxpbmVcIjoyMn0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjUwfSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjM1LFwibGluZVwiOjIyfSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjUwfX19fSxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxuICAgIH0sXG59O1xuXG5leHBvcnQgY29uc3QgSW52YWxpZFByb3BzRXhhbXBsZSA9ICgpID0+IHtcbiAgICBjb25zdCBiYWRGaWxlcyA9IFtcbiAgICAgICAgMTIzMTIsIC8vIE5vdCBhbiBvYmplY3Qgb3IgYG51bGxgIVxuICAgICAgICB7fSwgLy8gTWlzc2luZyBhbGwgcmVxdWlyZWQgZmllbGRzIVxuICAgICAgICB7IGlkOiAnMnhmNCcgfSwgLy8gTWlzc2luZyBzb21lIHJlcXVpcmVkIGZpZWxkcyFcbiAgICAgICAgeyBpZDogJzJ4ZjQnLCBuYW1lOiAnU29tZSBvdGhlciBmaWxlIScgfSwgLy8gRHVwbGljYXRlIElEIVxuXG4gICAgICAgIHsgaWQ6ICd4YkFyJywgbmFtZTogJ0dvb2QgZmlsZS50eHQnIH0sIC8vIEdvb2QgZmlsZSFcbiAgICBdO1xuICAgIGNvbnN0IGJhZEZvbGRlckNoYWluID0gW1xuICAgICAgICAxMjMxMiwgLy8gTm90IGFuIG9iamVjdCBvciBgbnVsbGAhXG4gICAgICAgIHsgaWQ6ICdiUnlIJywgbmFtZTogJ0dvb2QgZm9sZGVyJywgaXNEaXI6IHRydWUgfSxcbiAgICAgICAgeyBpZDogJ2JNZ1InLCBuYW1lOiAnR29vZCBmb2xkZXIgIzInLCBpc0RpcjogdHJ1ZSB9LFxuICAgIF07XG4gICAgY29uc3QgYmFkRmlsZUFjdGlvbnMgPSBbeyBpZDogJ2R1cGxpY2F0ZV9maWxlcycgfSwgeyBpZDogJ2R1cGxpY2F0ZV9maWxlcycgfV07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXG4gICAgICAgICAgICAgICAgZmlsZXM9e2JhZEZpbGVzIGFzIGFueX1cbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17YmFkRm9sZGVyQ2hhaW4gYXMgYW55fVxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtiYWRGaWxlQWN0aW9uc31cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgXCJXaGVyZSBwb3NzaWJsZSwgQ2hvbmt5IHRyaWVzIHRvIHJlcG9ydCBlcnJvcnMgd2hlbiB0aGV5IGFyaXNlLiBGb3IgZXhhbXBsZSxcXG5gRmlsZUJyb3dzZXJgIGNvbXBvbmVudCBleHBlY3RzIGl0cyBgZmlsZXNgIHByb3AgdG8gYmUgYW4gYXJyYXkuIElmIHlvdSBwYXNzIHNvbWVcXG5pbnZhbGlkIHZhbHVlIGluc3RlYWQsIGUuZy4gYG51bGxgLCB5b3Ugd2lsbCBzZWUgYW4gZXJyb3IgY29tcG9uZW50IGJlaW5nIHJlbmRlcmVkXFxuaW5zdGVhZCBvZiB0aGUgZmlsZSBicm93c2VyLiBTYW1lIGVycm9yIHdpbGwgYWxzbyBiZSBsb2dnZWQgdG8gY29uc29sZS5cXG5cIjsiLCJcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAvLyBAdHMtbm9jaGVja1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fU1RPUllfXyA9IFwiXFxuICAgICAgXFxuICAgICAgLy8gQHRzLW5vY2hlY2tcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fU1RPUllfXyA9IFxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQnJvd3NlcixcXFxcbiAgICBGaWxlRGF0YSxcXFxcbiAgICBGaWxlTGlzdCxcXFxcbiAgICBGaWxlU2VhcmNoLFxcXFxuICAgIEZpbGVUb29sYmFyLFxcXFxufSBmcm9tICdjaG9ua3knO1xcXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHtcXFxcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxcXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxcXG4gICAgU3RvcnlDYXRlZ29yaWVzXFxcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMi1WaXJ0dWFsaXphdGlvbi5tZCc7XFxcXG5cXFxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyRXhhbXBsZXM7XFxcXG5jb25zdCB0aXRsZSA9ICdWaXJ0dWFsaXphdGlvbiB3aXRoIDEwLDAwMCBmaWxlcyc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgVmlydHVhbGl6YXRpb25FeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGZpbGVzOiBGaWxlRGF0YVtdID0gW107XFxcXG5cXFxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwMDAwOyArK2kpIHtcXFxcbiAgICAgICAgZmlsZXMucHVzaCh7XFxcXG4gICAgICAgICAgICBpZDogYGZpbGUtJHtpfWAsXFxcXG4gICAgICAgICAgICBuYW1lOiBpID8gYENocm9tZSAoJHtpfSkuZXhlYCA6ICdDaHJvbWUuZXhlJyxcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwidmlydHVhbGl6YXRpb24tZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjM3LFxcXCJsaW5lXFxcIjozNH0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjYxfSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzcsXFxcImxpbmVcXFwiOjM0fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjYxfX19O1xcbiAgICBcXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHtcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVCcm93c2VyLFxcbiAgICBGaWxlRGF0YSxcXG4gICAgRmlsZUxpc3QsXFxuICAgIEZpbGVTZWFyY2gsXFxuICAgIEZpbGVUb29sYmFyLFxcbn0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7XFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxuICAgIFN0b3J5Q2F0ZWdvcmllc1xcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAyLVZpcnR1YWxpemF0aW9uLm1kJztcXG5cXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5GaWxlQnJvd3NlckV4YW1wbGVzO1xcbmNvbnN0IHRpdGxlID0gJ1ZpcnR1YWxpemF0aW9uIHdpdGggMTAsMDAwIGZpbGVzJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcInN0b3J5U291cmNlXFxcIjp7XFxcInNvdXJjZVxcXCI6XFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IHtcXFxcbiAgICBGaWxlQWN0aW9uLFxcXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcXFxuICAgIEZpbGVCcm93c2VyLFxcXFxuICAgIEZpbGVEYXRhLFxcXFxuICAgIEZpbGVMaXN0LFxcXFxuICAgIEZpbGVTZWFyY2gsXFxcXG4gICAgRmlsZVRvb2xiYXIsXFxcXG59IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXFxcbiAgICBTdG9yeUNhdGVnb3JpZXNcXFxcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAyLVZpcnR1YWxpemF0aW9uLm1kJztcXFxcblxcXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJFeGFtcGxlcztcXFxcbmNvbnN0IHRpdGxlID0gJ1ZpcnR1YWxpemF0aW9uIHdpdGggMTAsMDAwIGZpbGVzJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBWaXJ0dWFsaXphdGlvbkV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgZmlsZXM6IEZpbGVEYXRhW10gPSBbXTtcXFxcblxcXFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwMDA7ICsraSkge1xcXFxuICAgICAgICBmaWxlcy5wdXNoKHtcXFxcbiAgICAgICAgICAgIGlkOiBgZmlsZS0ke2l9YCxcXFxcbiAgICAgICAgICAgIG5hbWU6IGkgPyBgQ2hyb21lICgke2l9KS5leGVgIDogJ0Nocm9tZS5leGUnLFxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcInZpcnR1YWxpemF0aW9uLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozNyxcXFwibGluZVxcXCI6MzR9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo2MX0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjM3LFxcXCJsaW5lXFxcIjozNH0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo2MX19fX0sXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgVmlydHVhbGl6YXRpb25FeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBmaWxlczogRmlsZURhdGFbXSA9IFtdO1xcblxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwMDAwOyArK2kpIHtcXG4gICAgICAgIGZpbGVzLnB1c2goe1xcbiAgICAgICAgICAgIGlkOiBgZmlsZS0ke2l9YCxcXG4gICAgICAgICAgICBuYW1lOiBpID8gYENocm9tZSAoJHtpfSkuZXhlYCA6ICdDaHJvbWUuZXhlJyxcXG4gICAgICAgIH0pO1xcbiAgICB9XFxuXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXG4gICAgfTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIjtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcInZpcnR1YWxpemF0aW9uLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjM3LFwibGluZVwiOjQyfSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6Njl9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzcsXCJsaW5lXCI6NDJ9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6Njl9fX07XG4gICAgXG5cbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAvLyBAdHMtbm9jaGVja1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7XFxuICAgIEZpbGVBY3Rpb24sXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcbiAgICBGaWxlQnJvd3NlcixcXG4gICAgRmlsZURhdGEsXFxuICAgIEZpbGVMaXN0LFxcbiAgICBGaWxlU2VhcmNoLFxcbiAgICBGaWxlVG9vbGJhcixcXG59IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQge1xcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcbiAgICBTdG9yeUNhdGVnb3JpZXNcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMi1WaXJ0dWFsaXphdGlvbi5tZCc7XFxuXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJFeGFtcGxlcztcXG5jb25zdCB0aXRsZSA9ICdWaXJ0dWFsaXphdGlvbiB3aXRoIDEwLDAwMCBmaWxlcyc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXG4gICAgcGFyYW1ldGVyczoge1xcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IFZpcnR1YWxpemF0aW9uRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgZmlsZXM6IEZpbGVEYXRhW10gPSBbXTtcXG5cXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDAwMDsgKytpKSB7XFxuICAgICAgICBmaWxlcy5wdXNoKHtcXG4gICAgICAgICAgICBpZDogYGZpbGUtJHtpfWAsXFxuICAgICAgICAgICAgbmFtZTogaSA/IGBDaHJvbWUgKCR7aX0pLmV4ZWAgOiAnQ2hyb21lLmV4ZScsXFxuICAgICAgICB9KTtcXG4gICAgfVxcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCI7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCJ2aXJ0dWFsaXphdGlvbi1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozNyxcImxpbmVcIjozNH0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjYxfSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjM3LFwibGluZVwiOjM0fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjYxfX19O1xuICAgIFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xuXG5pbXBvcnQge1xuICAgIEZpbGVBY3Rpb24sXG4gICAgRmlsZUFjdGlvbkRhdGEsXG4gICAgRmlsZUJyb3dzZXIsXG4gICAgRmlsZURhdGEsXG4gICAgRmlsZUxpc3QsXG4gICAgRmlsZVNlYXJjaCxcbiAgICBGaWxlVG9vbGJhcixcbn0gZnJvbSAnY2hvbmt5JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7XG4gICAgY3JlYXRlRG9jc09iamVjdCxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxuICAgIFN0b3J5Q2F0ZWdvcmllc1xufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcbi8vIEB0cy1pZ25vcmVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDItVmlydHVhbGl6YXRpb24ubWQnO1xuXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5GaWxlQnJvd3NlckV4YW1wbGVzO1xuY29uc3QgdGl0bGUgPSAnVmlydHVhbGl6YXRpb24gd2l0aCAxMCwwMDAgZmlsZXMnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWRlZmF1bHQtZXhwb3J0XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXG4gICAgcGFyYW1ldGVyczoge1wic3RvcnlTb3VyY2VcIjp7XCJzb3VyY2VcIjpcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIEZpbGVBY3Rpb24sXFxcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxcXG4gICAgRmlsZUJyb3dzZXIsXFxcXG4gICAgRmlsZURhdGEsXFxcXG4gICAgRmlsZUxpc3QsXFxcXG4gICAgRmlsZVNlYXJjaCxcXFxcbiAgICBGaWxlVG9vbGJhcixcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcXFxuICAgIFN0b3J5Q2F0ZWdvcmllc1xcXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDItVmlydHVhbGl6YXRpb24ubWQnO1xcXFxuXFxcXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5GaWxlQnJvd3NlckV4YW1wbGVzO1xcXFxuY29uc3QgdGl0bGUgPSAnVmlydHVhbGl6YXRpb24gd2l0aCAxMCwwMDAgZmlsZXMnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IFZpcnR1YWxpemF0aW9uRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBmaWxlczogRmlsZURhdGFbXSA9IFtdO1xcXFxuXFxcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDAwMDsgKytpKSB7XFxcXG4gICAgICAgIGZpbGVzLnB1c2goe1xcXFxuICAgICAgICAgICAgaWQ6IGBmaWxlLSR7aX1gLFxcXFxuICAgICAgICAgICAgbmFtZTogaSA/IGBDaHJvbWUgKCR7aX0pLmV4ZWAgOiAnQ2hyb21lLmV4ZScsXFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH1cXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiO1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XFxcInZpcnR1YWxpemF0aW9uLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozNyxcXFwibGluZVxcXCI6MzR9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo2MX0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjM3LFxcXCJsaW5lXFxcIjozNH0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo2MX19fTtcXG4gICAgXFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7XFxuICAgIEZpbGVBY3Rpb24sXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcbiAgICBGaWxlQnJvd3NlcixcXG4gICAgRmlsZURhdGEsXFxuICAgIEZpbGVMaXN0LFxcbiAgICBGaWxlU2VhcmNoLFxcbiAgICBGaWxlVG9vbGJhcixcXG59IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQge1xcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxcbiAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uLFxcbiAgICBTdG9yeUNhdGVnb3JpZXNcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMi1WaXJ0dWFsaXphdGlvbi5tZCc7XFxuXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJFeGFtcGxlcztcXG5jb25zdCB0aXRsZSA9ICdWaXJ0dWFsaXphdGlvbiB3aXRoIDEwLDAwMCBmaWxlcyc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXG4gICAgcGFyYW1ldGVyczoge1xcXCJzdG9yeVNvdXJjZVxcXCI6e1xcXCJzb3VyY2VcXFwiOlxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQnJvd3NlcixcXFxcbiAgICBGaWxlRGF0YSxcXFxcbiAgICBGaWxlTGlzdCxcXFxcbiAgICBGaWxlU2VhcmNoLFxcXFxuICAgIEZpbGVUb29sYmFyLFxcXFxufSBmcm9tICdjaG9ua3knO1xcXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHtcXFxcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxcXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxcXG4gICAgU3RvcnlDYXRlZ29yaWVzXFxcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMi1WaXJ0dWFsaXphdGlvbi5tZCc7XFxcXG5cXFxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyRXhhbXBsZXM7XFxcXG5jb25zdCB0aXRsZSA9ICdWaXJ0dWFsaXphdGlvbiB3aXRoIDEwLDAwMCBmaWxlcyc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgVmlydHVhbGl6YXRpb25FeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGZpbGVzOiBGaWxlRGF0YVtdID0gW107XFxcXG5cXFxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwMDAwOyArK2kpIHtcXFxcbiAgICAgICAgZmlsZXMucHVzaCh7XFxcXG4gICAgICAgICAgICBpZDogYGZpbGUtJHtpfWAsXFxcXG4gICAgICAgICAgICBuYW1lOiBpID8gYENocm9tZSAoJHtpfSkuZXhlYCA6ICdDaHJvbWUuZXhlJyxcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCIsXFxcImxvY2F0aW9uc01hcFxcXCI6e1xcXCJ2aXJ0dWFsaXphdGlvbi1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzcsXFxcImxpbmVcXFwiOjM0fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjF9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozNyxcXFwibGluZVxcXCI6MzR9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjF9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IFZpcnR1YWxpemF0aW9uRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgZmlsZXM6IEZpbGVEYXRhW10gPSBbXTtcXG5cXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDAwMDsgKytpKSB7XFxuICAgICAgICBmaWxlcy5wdXNoKHtcXG4gICAgICAgICAgICBpZDogYGZpbGUtJHtpfWAsXFxuICAgICAgICAgICAgbmFtZTogaSA/IGBDaHJvbWUgKCR7aX0pLmV4ZWAgOiAnQ2hyb21lLmV4ZScsXFxuICAgICAgICB9KTtcXG4gICAgfVxcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCIsXCJsb2NhdGlvbnNNYXBcIjp7XCJ2aXJ0dWFsaXphdGlvbi1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozNyxcImxpbmVcIjo0Mn0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjY5fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjM3LFwibGluZVwiOjQyfSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjY5fX19fSxcInN0b3J5U291cmNlXCI6e1wic291cmNlXCI6XCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHtcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVCcm93c2VyLFxcbiAgICBGaWxlRGF0YSxcXG4gICAgRmlsZUxpc3QsXFxuICAgIEZpbGVTZWFyY2gsXFxuICAgIEZpbGVUb29sYmFyLFxcbn0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7XFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxuICAgIFN0b3J5Q2F0ZWdvcmllc1xcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAyLVZpcnR1YWxpemF0aW9uLm1kJztcXG5cXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5GaWxlQnJvd3NlckV4YW1wbGVzO1xcbmNvbnN0IHRpdGxlID0gJ1ZpcnR1YWxpemF0aW9uIHdpdGggMTAsMDAwIGZpbGVzJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgVmlydHVhbGl6YXRpb25FeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBmaWxlczogRmlsZURhdGFbXSA9IFtdO1xcblxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwMDAwOyArK2kpIHtcXG4gICAgICAgIGZpbGVzLnB1c2goe1xcbiAgICAgICAgICAgIGlkOiBgZmlsZS0ke2l9YCxcXG4gICAgICAgICAgICBuYW1lOiBpID8gYENocm9tZSAoJHtpfSkuZXhlYCA6ICdDaHJvbWUuZXhlJyxcXG4gICAgICAgIH0pO1xcbiAgICB9XFxuXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXG4gICAgfTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIixcImxvY2F0aW9uc01hcFwiOntcInZpcnR1YWxpemF0aW9uLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjM3LFwibGluZVwiOjM0fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6NjF9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzcsXCJsaW5lXCI6MzR9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6NjF9fX19LFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXG4gICAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBWaXJ0dWFsaXphdGlvbkV4YW1wbGUgPSAoKSA9PiB7XG4gICAgY29uc3QgZmlsZXM6IEZpbGVEYXRhW10gPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwMDA7ICsraSkge1xuICAgICAgICBmaWxlcy5wdXNoKHtcbiAgICAgICAgICAgIGlkOiBgZmlsZS0ke2l9YCxcbiAgICAgICAgICAgIG5hbWU6IGkgPyBgQ2hyb21lICgke2l9KS5leGVgIDogJ0Nocm9tZS5leGUnLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgXCJUaGlzIGNvbXBvbmVudCB1c2VzIFtgcmVhY3QtdmlydHVhbGl6ZWRgXShodHRwczovL2J2YXVnaG4uZ2l0aHViLmlvL3JlYWN0LXZpcnR1YWxpemVkLykuXFxuXCI7IiwiXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIENob25reUFjdGlvbnMsXFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQnJvd3NlcixcXFxcbiAgICBGaWxlTGlzdCxcXFxcbiAgICBGaWxlU2VhcmNoLFxcXFxuICAgIEZpbGVUb29sYmFyLFxcXFxufSBmcm9tICdjaG9ua3knO1xcXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHtcXFxcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxcXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxcXG4gICAgU3RvcnlDYXRlZ29yaWVzXFxcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMy1EaXNhYmxlLWRlZmF1bHQtYWN0aW9ucy5tZCc7XFxcXG5cXFxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyRXhhbXBsZXM7XFxcXG5jb25zdCB0aXRsZSA9ICdEaXNhYmxpbmcgZGVmYXVsdCBmaWxlIGFjdGlvbnMnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IERpc2FibGVFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgRG9jdW1lbnRzJywgaXNEaXI6IHRydWUgfV07XFxcXG4gICAgY29uc3QgZmlsZXMgPSBbXFxcXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXFxcXG4gICAgICAgIHsgaWQ6ICdodW50ZXIyJywgbmFtZTogJ1Bhc3N3b3JkLnR4dCcgfSxcXFxcbiAgICAgICAgeyBpZDogJ2JFZjI0cScsIG5hbWU6ICdEcmFnICYgZHJvcCBmaWxlcyBoZXJlJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIGNvbnN0IGZpbGVBY3Rpb25zOiBGaWxlQWN0aW9uW10gPSBbXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIC4uLkNob25reUFjdGlvbnMuT3BlbkZpbGVzLFxcXFxuICAgICAgICAgICAgdG9vbGJhckJ1dHRvbjogdW5kZWZpbmVkLFxcXFxuICAgICAgICB9LFxcXFxuICAgIF07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2ZpbGVBY3Rpb25zfVxcXFxuICAgICAgICAgICAgICAgIGRpc2FibGVEZWZhdWx0RmlsZUFjdGlvbnM9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIjtcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1xcXCJkaXNhYmxlLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozMCxcXFwibGluZVxcXCI6MzR9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo2OH0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjMwLFxcXCJsaW5lXFxcIjozNH0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo2OH19fTtcXG4gICAgXFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7XFxuICAgIENob25reUFjdGlvbnMsXFxuICAgIEZpbGVBY3Rpb24sXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcbiAgICBGaWxlQnJvd3NlcixcXG4gICAgRmlsZUxpc3QsXFxuICAgIEZpbGVTZWFyY2gsXFxuICAgIEZpbGVUb29sYmFyLFxcbn0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7XFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxuICAgIFN0b3J5Q2F0ZWdvcmllc1xcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAzLURpc2FibGUtZGVmYXVsdC1hY3Rpb25zLm1kJztcXG5cXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5GaWxlQnJvd3NlckV4YW1wbGVzO1xcbmNvbnN0IHRpdGxlID0gJ0Rpc2FibGluZyBkZWZhdWx0IGZpbGUgYWN0aW9ucyc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXG4gICAgcGFyYW1ldGVyczoge1xcXCJzdG9yeVNvdXJjZVxcXCI6e1xcXCJzb3VyY2VcXFwiOlxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgQ2hvbmt5QWN0aW9ucyxcXFxcbiAgICBGaWxlQWN0aW9uLFxcXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcXFxuICAgIEZpbGVCcm93c2VyLFxcXFxuICAgIEZpbGVMaXN0LFxcXFxuICAgIEZpbGVTZWFyY2gsXFxcXG4gICAgRmlsZVRvb2xiYXIsXFxcXG59IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXFxcbiAgICBTdG9yeUNhdGVnb3JpZXNcXFxcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAzLURpc2FibGUtZGVmYXVsdC1hY3Rpb25zLm1kJztcXFxcblxcXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJFeGFtcGxlcztcXFxcbmNvbnN0IHRpdGxlID0gJ0Rpc2FibGluZyBkZWZhdWx0IGZpbGUgYWN0aW9ucyc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgRGlzYWJsZUV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBEb2N1bWVudHMnLCBpc0RpcjogdHJ1ZSB9XTtcXFxcbiAgICBjb25zdCBmaWxlcyA9IFtcXFxcbiAgICAgICAgeyBpZDogJ21IZTRBMScsIG5hbWU6ICdNZWFuaW5nIG9mIGxpZmUudHh0Jywgc2l6ZTogMzE0MTUgfSxcXFxcbiAgICAgICAgeyBpZDogJ2h1bnRlcjInLCBuYW1lOiAnUGFzc3dvcmQudHh0JyB9LFxcXFxuICAgICAgICB7IGlkOiAnYkVmMjRxJywgbmFtZTogJ0RyYWcgJiBkcm9wIGZpbGVzIGhlcmUnLCBpc0RpcjogdHJ1ZSB9LFxcXFxuICAgIF07XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgY29uc3QgZmlsZUFjdGlvbnM6IEZpbGVBY3Rpb25bXSA9IFtcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgLi4uQ2hvbmt5QWN0aW9ucy5PcGVuRmlsZXMsXFxcXG4gICAgICAgICAgICB0b29sYmFyQnV0dG9uOiB1bmRlZmluZWQsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgICAgICBmaWxlQWN0aW9ucz17ZmlsZUFjdGlvbnN9XFxcXG4gICAgICAgICAgICAgICAgZGlzYWJsZURlZmF1bHRGaWxlQWN0aW9ucz17dHJ1ZX1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiLFxcXCJsb2NhdGlvbnNNYXBcXFwiOntcXFwiZGlzYWJsZS1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzAsXFxcImxpbmVcXFwiOjM0fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6Njh9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozMCxcXFwibGluZVxcXCI6MzR9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6Njh9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IERpc2FibGVFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IERvY3VtZW50cycsIGlzRGlyOiB0cnVlIH1dO1xcbiAgICBjb25zdCBmaWxlcyA9IFtcXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXFxuICAgICAgICB7IGlkOiAnaHVudGVyMicsIG5hbWU6ICdQYXNzd29yZC50eHQnIH0sXFxuICAgICAgICB7IGlkOiAnYkVmMjRxJywgbmFtZTogJ0RyYWcgJiBkcm9wIGZpbGVzIGhlcmUnLCBpc0RpcjogdHJ1ZSB9LFxcbiAgICBdO1xcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIGNvbnN0IGZpbGVBY3Rpb25zOiBGaWxlQWN0aW9uW10gPSBbXFxuICAgICAgICB7XFxuICAgICAgICAgICAgLi4uQ2hvbmt5QWN0aW9ucy5PcGVuRmlsZXMsXFxuICAgICAgICAgICAgdG9vbGJhckJ1dHRvbjogdW5kZWZpbmVkLFxcbiAgICAgICAgfSxcXG4gICAgXTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtmaWxlQWN0aW9uc31cXG4gICAgICAgICAgICAgICAgZGlzYWJsZURlZmF1bHRGaWxlQWN0aW9ucz17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIjtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcImRpc2FibGUtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6NDJ9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo3Nn0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMCxcImxpbmVcIjo0Mn0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo3Nn19fTtcbiAgICBcblxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHtcXG4gICAgQ2hvbmt5QWN0aW9ucyxcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVCcm93c2VyLFxcbiAgICBGaWxlTGlzdCxcXG4gICAgRmlsZVNlYXJjaCxcXG4gICAgRmlsZVRvb2xiYXIsXFxufSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHtcXG4gICAgY3JlYXRlRG9jc09iamVjdCxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXG4gICAgU3RvcnlDYXRlZ29yaWVzXFxufSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDMtRGlzYWJsZS1kZWZhdWx0LWFjdGlvbnMubWQnO1xcblxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyRXhhbXBsZXM7XFxuY29uc3QgdGl0bGUgPSAnRGlzYWJsaW5nIGRlZmF1bHQgZmlsZSBhY3Rpb25zJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgRGlzYWJsZUV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgRG9jdW1lbnRzJywgaXNEaXI6IHRydWUgfV07XFxuICAgIGNvbnN0IGZpbGVzID0gW1xcbiAgICAgICAgeyBpZDogJ21IZTRBMScsIG5hbWU6ICdNZWFuaW5nIG9mIGxpZmUudHh0Jywgc2l6ZTogMzE0MTUgfSxcXG4gICAgICAgIHsgaWQ6ICdodW50ZXIyJywgbmFtZTogJ1Bhc3N3b3JkLnR4dCcgfSxcXG4gICAgICAgIHsgaWQ6ICdiRWYyNHEnLCBuYW1lOiAnRHJhZyAmIGRyb3AgZmlsZXMgaGVyZScsIGlzRGlyOiB0cnVlIH0sXFxuICAgIF07XFxuXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXG4gICAgfTtcXG5cXG4gICAgY29uc3QgZmlsZUFjdGlvbnM6IEZpbGVBY3Rpb25bXSA9IFtcXG4gICAgICAgIHtcXG4gICAgICAgICAgICAuLi5DaG9ua3lBY3Rpb25zLk9wZW5GaWxlcyxcXG4gICAgICAgICAgICB0b29sYmFyQnV0dG9uOiB1bmRlZmluZWQsXFxuICAgICAgICB9LFxcbiAgICBdO1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2ZpbGVBY3Rpb25zfVxcbiAgICAgICAgICAgICAgICBkaXNhYmxlRGVmYXVsdEZpbGVBY3Rpb25zPXt0cnVlfVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiZGlzYWJsZS1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozMCxcImxpbmVcIjozNH0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjY4fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjMwLFwibGluZVwiOjM0fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjY4fX19O1xuICAgIFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xuXG5pbXBvcnQge1xuICAgIENob25reUFjdGlvbnMsXG4gICAgRmlsZUFjdGlvbixcbiAgICBGaWxlQWN0aW9uRGF0YSxcbiAgICBGaWxlQnJvd3NlcixcbiAgICBGaWxlTGlzdCxcbiAgICBGaWxlU2VhcmNoLFxuICAgIEZpbGVUb29sYmFyLFxufSBmcm9tICdjaG9ua3knO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHtcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXG4gICAgU3RvcnlDYXRlZ29yaWVzXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xuLy8gQHRzLWlnbm9yZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMy1EaXNhYmxlLWRlZmF1bHQtYWN0aW9ucy5tZCc7XG5cbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyRXhhbXBsZXM7XG5jb25zdCB0aXRsZSA9ICdEaXNhYmxpbmcgZGVmYXVsdCBmaWxlIGFjdGlvbnMnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWRlZmF1bHQtZXhwb3J0XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgdGl0bGU6IGAke2NhdGVnb3J5fXwke3RpdGxlfWAsXG4gICAgcGFyYW1ldGVyczoge1wic3RvcnlTb3VyY2VcIjp7XCJzb3VyY2VcIjpcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIENob25reUFjdGlvbnMsXFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQnJvd3NlcixcXFxcbiAgICBGaWxlTGlzdCxcXFxcbiAgICBGaWxlU2VhcmNoLFxcXFxuICAgIEZpbGVUb29sYmFyLFxcXFxufSBmcm9tICdjaG9ua3knO1xcXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHtcXFxcbiAgICBjcmVhdGVEb2NzT2JqZWN0LFxcXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxcXG4gICAgU3RvcnlDYXRlZ29yaWVzXFxcXG59IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMy1EaXNhYmxlLWRlZmF1bHQtYWN0aW9ucy5tZCc7XFxcXG5cXFxcbmNvbnN0IGNhdGVnb3J5ID0gU3RvcnlDYXRlZ29yaWVzLkZpbGVCcm93c2VyRXhhbXBsZXM7XFxcXG5jb25zdCB0aXRsZSA9ICdEaXNhYmxpbmcgZGVmYXVsdCBmaWxlIGFjdGlvbnMnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IERpc2FibGVFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgRG9jdW1lbnRzJywgaXNEaXI6IHRydWUgfV07XFxcXG4gICAgY29uc3QgZmlsZXMgPSBbXFxcXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXFxcXG4gICAgICAgIHsgaWQ6ICdodW50ZXIyJywgbmFtZTogJ1Bhc3N3b3JkLnR4dCcgfSxcXFxcbiAgICAgICAgeyBpZDogJ2JFZjI0cScsIG5hbWU6ICdEcmFnICYgZHJvcCBmaWxlcyBoZXJlJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIGNvbnN0IGZpbGVBY3Rpb25zOiBGaWxlQWN0aW9uW10gPSBbXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIC4uLkNob25reUFjdGlvbnMuT3BlbkZpbGVzLFxcXFxuICAgICAgICAgICAgdG9vbGJhckJ1dHRvbjogdW5kZWZpbmVkLFxcXFxuICAgICAgICB9LFxcXFxuICAgIF07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2ZpbGVBY3Rpb25zfVxcXFxuICAgICAgICAgICAgICAgIGRpc2FibGVEZWZhdWx0RmlsZUFjdGlvbnM9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIjtcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1xcXCJkaXNhYmxlLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozMCxcXFwibGluZVxcXCI6MzR9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo2OH0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjMwLFxcXCJsaW5lXFxcIjozNH0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo2OH19fTtcXG4gICAgXFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7XFxuICAgIENob25reUFjdGlvbnMsXFxuICAgIEZpbGVBY3Rpb24sXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcbiAgICBGaWxlQnJvd3NlcixcXG4gICAgRmlsZUxpc3QsXFxuICAgIEZpbGVTZWFyY2gsXFxuICAgIEZpbGVUb29sYmFyLFxcbn0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7XFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxuICAgIFN0b3J5Q2F0ZWdvcmllc1xcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAzLURpc2FibGUtZGVmYXVsdC1hY3Rpb25zLm1kJztcXG5cXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5GaWxlQnJvd3NlckV4YW1wbGVzO1xcbmNvbnN0IHRpdGxlID0gJ0Rpc2FibGluZyBkZWZhdWx0IGZpbGUgYWN0aW9ucyc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXG4gICAgcGFyYW1ldGVyczoge1xcXCJzdG9yeVNvdXJjZVxcXCI6e1xcXCJzb3VyY2VcXFwiOlxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgQ2hvbmt5QWN0aW9ucyxcXFxcbiAgICBGaWxlQWN0aW9uLFxcXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcXFxuICAgIEZpbGVCcm93c2VyLFxcXFxuICAgIEZpbGVMaXN0LFxcXFxuICAgIEZpbGVTZWFyY2gsXFxcXG4gICAgRmlsZVRvb2xiYXIsXFxcXG59IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxcXG4gICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbixcXFxcbiAgICBTdG9yeUNhdGVnb3JpZXNcXFxcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAzLURpc2FibGUtZGVmYXVsdC1hY3Rpb25zLm1kJztcXFxcblxcXFxuY29uc3QgY2F0ZWdvcnkgPSBTdG9yeUNhdGVnb3JpZXMuRmlsZUJyb3dzZXJFeGFtcGxlcztcXFxcbmNvbnN0IHRpdGxlID0gJ0Rpc2FibGluZyBkZWZhdWx0IGZpbGUgYWN0aW9ucyc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiBgJHtjYXRlZ29yeX18JHt0aXRsZX1gLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgRGlzYWJsZUV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBEb2N1bWVudHMnLCBpc0RpcjogdHJ1ZSB9XTtcXFxcbiAgICBjb25zdCBmaWxlcyA9IFtcXFxcbiAgICAgICAgeyBpZDogJ21IZTRBMScsIG5hbWU6ICdNZWFuaW5nIG9mIGxpZmUudHh0Jywgc2l6ZTogMzE0MTUgfSxcXFxcbiAgICAgICAgeyBpZDogJ2h1bnRlcjInLCBuYW1lOiAnUGFzc3dvcmQudHh0JyB9LFxcXFxuICAgICAgICB7IGlkOiAnYkVmMjRxJywgbmFtZTogJ0RyYWcgJiBkcm9wIGZpbGVzIGhlcmUnLCBpc0RpcjogdHJ1ZSB9LFxcXFxuICAgIF07XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgY29uc3QgZmlsZUFjdGlvbnM6IEZpbGVBY3Rpb25bXSA9IFtcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgLi4uQ2hvbmt5QWN0aW9ucy5PcGVuRmlsZXMsXFxcXG4gICAgICAgICAgICB0b29sYmFyQnV0dG9uOiB1bmRlZmluZWQsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgICAgICBmaWxlQWN0aW9ucz17ZmlsZUFjdGlvbnN9XFxcXG4gICAgICAgICAgICAgICAgZGlzYWJsZURlZmF1bHRGaWxlQWN0aW9ucz17dHJ1ZX1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiLFxcXCJsb2NhdGlvbnNNYXBcXFwiOntcXFwiZGlzYWJsZS1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzAsXFxcImxpbmVcXFwiOjM0fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6Njh9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozMCxcXFwibGluZVxcXCI6MzR9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6Njh9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IERpc2FibGVFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IERvY3VtZW50cycsIGlzRGlyOiB0cnVlIH1dO1xcbiAgICBjb25zdCBmaWxlcyA9IFtcXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXFxuICAgICAgICB7IGlkOiAnaHVudGVyMicsIG5hbWU6ICdQYXNzd29yZC50eHQnIH0sXFxuICAgICAgICB7IGlkOiAnYkVmMjRxJywgbmFtZTogJ0RyYWcgJiBkcm9wIGZpbGVzIGhlcmUnLCBpc0RpcjogdHJ1ZSB9LFxcbiAgICBdO1xcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIGNvbnN0IGZpbGVBY3Rpb25zOiBGaWxlQWN0aW9uW10gPSBbXFxuICAgICAgICB7XFxuICAgICAgICAgICAgLi4uQ2hvbmt5QWN0aW9ucy5PcGVuRmlsZXMsXFxuICAgICAgICAgICAgdG9vbGJhckJ1dHRvbjogdW5kZWZpbmVkLFxcbiAgICAgICAgfSxcXG4gICAgXTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtmaWxlQWN0aW9uc31cXG4gICAgICAgICAgICAgICAgZGlzYWJsZURlZmF1bHRGaWxlQWN0aW9ucz17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIixcImxvY2F0aW9uc01hcFwiOntcImRpc2FibGUtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6NDJ9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo3Nn0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMCxcImxpbmVcIjo0Mn0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo3Nn19fX0sXCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7XFxuICAgIENob25reUFjdGlvbnMsXFxuICAgIEZpbGVBY3Rpb24sXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcbiAgICBGaWxlQnJvd3NlcixcXG4gICAgRmlsZUxpc3QsXFxuICAgIEZpbGVTZWFyY2gsXFxuICAgIEZpbGVUb29sYmFyLFxcbn0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7XFxuICAgIGNyZWF0ZURvY3NPYmplY3QsXFxuICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24sXFxuICAgIFN0b3J5Q2F0ZWdvcmllc1xcbn0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAzLURpc2FibGUtZGVmYXVsdC1hY3Rpb25zLm1kJztcXG5cXG5jb25zdCBjYXRlZ29yeSA9IFN0b3J5Q2F0ZWdvcmllcy5GaWxlQnJvd3NlckV4YW1wbGVzO1xcbmNvbnN0IHRpdGxlID0gJ0Rpc2FibGluZyBkZWZhdWx0IGZpbGUgYWN0aW9ucyc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogYCR7Y2F0ZWdvcnl9fCR7dGl0bGV9YCxcXG4gICAgcGFyYW1ldGVyczoge1xcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IERpc2FibGVFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IERvY3VtZW50cycsIGlzRGlyOiB0cnVlIH1dO1xcbiAgICBjb25zdCBmaWxlcyA9IFtcXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXFxuICAgICAgICB7IGlkOiAnaHVudGVyMicsIG5hbWU6ICdQYXNzd29yZC50eHQnIH0sXFxuICAgICAgICB7IGlkOiAnYkVmMjRxJywgbmFtZTogJ0RyYWcgJiBkcm9wIGZpbGVzIGhlcmUnLCBpc0RpcjogdHJ1ZSB9LFxcbiAgICBdO1xcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIGNvbnN0IGZpbGVBY3Rpb25zOiBGaWxlQWN0aW9uW10gPSBbXFxuICAgICAgICB7XFxuICAgICAgICAgICAgLi4uQ2hvbmt5QWN0aW9ucy5PcGVuRmlsZXMsXFxuICAgICAgICAgICAgdG9vbGJhckJ1dHRvbjogdW5kZWZpbmVkLFxcbiAgICAgICAgfSxcXG4gICAgXTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtmaWxlQWN0aW9uc31cXG4gICAgICAgICAgICAgICAgZGlzYWJsZURlZmF1bHRGaWxlQWN0aW9ucz17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIixcImxvY2F0aW9uc01hcFwiOntcImRpc2FibGUtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6MzR9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo2OH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMCxcImxpbmVcIjozNH0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo2OH19fX0sXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcbiAgICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IERpc2FibGVFeGFtcGxlID0gKCkgPT4ge1xuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgRG9jdW1lbnRzJywgaXNEaXI6IHRydWUgfV07XG4gICAgY29uc3QgZmlsZXMgPSBbXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXG4gICAgICAgIHsgaWQ6ICdodW50ZXIyJywgbmFtZTogJ1Bhc3N3b3JkLnR4dCcgfSxcbiAgICAgICAgeyBpZDogJ2JFZjI0cScsIG5hbWU6ICdEcmFnICYgZHJvcCBmaWxlcyBoZXJlJywgaXNEaXI6IHRydWUgfSxcbiAgICBdO1xuXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGZpbGVBY3Rpb25zOiBGaWxlQWN0aW9uW10gPSBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIC4uLkNob25reUFjdGlvbnMuT3BlbkZpbGVzLFxuICAgICAgICAgICAgdG9vbGJhckJ1dHRvbjogdW5kZWZpbmVkLFxuICAgICAgICB9LFxuICAgIF07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2ZpbGVBY3Rpb25zfVxuICAgICAgICAgICAgICAgIGRpc2FibGVEZWZhdWx0RmlsZUFjdGlvbnM9e3RydWV9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgXCJBcyBkaXNjdXNzZWQgaW4gdGhlIF9Vc2luZyBmaWxlIGFjdGlvbnNfIHNlY3Rpb24sIENob25reSBzcGVjaWZpZXMgc29tZSBkZWZhdWx0IGZpbGVcXG5hY3Rpb25zLCBzdWNoIGFzIFxcXCJPcGVuIHNlbGVjdGlvblxcXCIgYW5kIFxcXCJHbyB1cCBhIGRpcmVjdG9yeVxcXCIgYWN0aW9ucy9idXR0b25zLiBJZiB5b3VcXG53YW50IHRvIGRpc2FibGUgYWxsIGRlZmF1bHQgZnVuY3Rpb25hbGl0eSBhbmQgb25seSB1c2UgY3VzdG9tIGZ1bmN0aW9uLCB5b3UgY2FuIHBhc3NcXG50aGUgYGRpc2FibGVEZWZhdWx0RmlsZUFjdGlvbnNgIHByb3AgdG8gYEZpbGVCcm93c2VyYC5cXG5cXG5Gb3IgZXhhbXBsZSwgaW1hZ2luZSB3ZSB3YW50IHRvIGRpc2FibGUgYWxsIENob25reSBmaWxlIGFjdGlvbnMgZXhjZXB0IGZvciBvbmUgLVxcbmBvcGVuX2ZpbGVzYC4gQW5kIGV2ZW4gZm9yIGBvcGVuX2ZpbGVzYCwgd2Ugd2FudCB0byBoaWRlIHRoZSBtZW51IGJ1dHRvbiBzbyB0aGF0IHlvdVxcbmNhbiBvbmx5IG9wZW4gZmlsZXMgYnkgZG91YmxlIGNsaWNraW5nIHRoZW0uIFdlIGRvIHRoaXMgYnkgZGlzYWJsaW5nIGFsbCBmaWxlIGFjdGlvbnMsXFxuYW5kIHJlLWVuYWJsaW5nIGEgY3VzdG9taXNlZCB2ZXJzaW9uIG9mIGBvcGVuX2ZpbGVzYDpcXG5cXG5gYGB0c3hcXG5leHBvcnQgY29uc3QgRGlzYWJsZUV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGZpbGVBY3Rpb25zOiBGaWxlQWN0aW9uW10gPSBbXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6IENob25reUFjdGlvbnMuT3BlbkZpbGVzLmlkLFxcbiAgICAgICAgfSxcXG4gICAgXTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxGaWxlQnJvd3NlciBkaXNhYmxlRGVmYXVsdEZpbGVBY3Rpb25zPXt0cnVlfSBmaWxlQWN0aW9ucz17ZmlsZUFjdGlvbnN9PlxcbiAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxuICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICApO1xcbn07XFxuYGBgXFxuXFxuWW91IGNhbiBzZWUgdGhlIG91dGNvbWUgaW4gdGhlIF9MaXZlIEV4YW1wbGVfIGJlbG93LiBOb3RlIHRoYXQgdGhlcmUgYXJlIG5vIGJ1dHRvbnNcXG5pbiB0aGUgdG9vbGJhciwgdW5saWtlIGFsbCBvdGhlciBleGFtcGxlcyBpbiB0aGUgZG9jdW1lbnRhdGlvbi4gQWxzbywgbm90ZSB0aGF0LFxcbmJlY2F1c2Ugd2UgcmUtZW5hYmxlZCBgb3Blbl9maWxlc2AgbWFudWFsbHksIHlvdSBjYW4gc3RpbGwgb3BlbiBmaWxlcywgYnV0IG5vd1xcbndpdGhvdXQgdGhlIGJ1dHRvbiBpbiB0aGUgbWVudS5cXG5cIjsiXSwic291cmNlUm9vdCI6IiJ9