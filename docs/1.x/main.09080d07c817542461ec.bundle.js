/*! For license information please see main.09080d07c817542461ec.bundle.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ERkP")},,function(module,exports){module.exports=storybook_docs_dll},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("1t7P")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ho0z")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("IAdD")},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"c",(function(){return FileBrowser_FileBrowser})),__webpack_require__.d(__webpack_exports__,"g",(function(){return FileToolbar})),__webpack_require__.d(__webpack_exports__,"f",(function(){return FileSearch_FileSearch})),__webpack_require__.d(__webpack_exports__,"e",(function(){return FileList})),__webpack_require__.d(__webpack_exports__,"a",(function(){return ChonkyActions})),__webpack_require__.d(__webpack_exports__,"d",(function(){return file_helper_FileHelper})),__webpack_require__.d(__webpack_exports__,"b",(function(){return ChonkyIconName}));__webpack_require__(4),__webpack_require__(12),__webpack_require__(22),__webpack_require__(13),__webpack_require__(25),__webpack_require__(14),__webpack_require__(18),__webpack_require__(15),__webpack_require__(21),__webpack_require__(5),__webpack_require__(6),__webpack_require__(11),__webpack_require__(23),__webpack_require__(16),__webpack_require__(19);var ChonkyIconName,SpecialAction,delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),dist=__webpack_require__(3);__webpack_require__(28),__webpack_require__(64);!function(ChonkyIconName){ChonkyIconName.loading="loading",ChonkyIconName.dropdown="dropdown",ChonkyIconName.circle="circle",ChonkyIconName.dndDragging="dndDragging",ChonkyIconName.dndCanDrop="dndCanDrop",ChonkyIconName.dndCannotDrop="dndCannotDrop",ChonkyIconName.openFiles="openFiles",ChonkyIconName.openParentFolder="openParentFolder",ChonkyIconName.copy="copy",ChonkyIconName.search="search",ChonkyIconName.selectAllFiles="selectAllFiles",ChonkyIconName.clearSelection="clearSelection",ChonkyIconName.sortAsc="sortAsc",ChonkyIconName.sortDesc="sortDesc",ChonkyIconName.checkActive="checkActive",ChonkyIconName.checkInactive="checkInactive",ChonkyIconName.list="list",ChonkyIconName.folder="folder",ChonkyIconName.folderCreate="folderCreate",ChonkyIconName.folderOpen="folderOpen",ChonkyIconName.smallThumbnail="smallThumbnail",ChonkyIconName.largeThumbnail="largeThumbnail",ChonkyIconName.folderChainSeparator="folderChainSeparator",ChonkyIconName.download="download",ChonkyIconName.upload="upload",ChonkyIconName.trash="trash",ChonkyIconName.fallbackIcon="fallbackIcon",ChonkyIconName.symlink="symlink",ChonkyIconName.hidden="hidden",ChonkyIconName.file="file",ChonkyIconName.license="license",ChonkyIconName.code="code",ChonkyIconName.config="config",ChonkyIconName.model="model",ChonkyIconName.database="database",ChonkyIconName.text="text",ChonkyIconName.archive="archive",ChonkyIconName.image="image",ChonkyIconName.video="video",ChonkyIconName.info="info",ChonkyIconName.key="key",ChonkyIconName.lock="lock",ChonkyIconName.music="music",ChonkyIconName.terminal="terminal",ChonkyIconName.users="users",ChonkyIconName.linux="linux",ChonkyIconName.ubuntu="ubuntu",ChonkyIconName.windows="windows",ChonkyIconName.rust="rust",ChonkyIconName.python="python",ChonkyIconName.nodejs="nodejs",ChonkyIconName.php="php",ChonkyIconName.git="git",ChonkyIconName.adobe="adobe",ChonkyIconName.pdf="pdf",ChonkyIconName.excel="excel",ChonkyIconName.word="word",ChonkyIconName.flash="flash"}(ChonkyIconName||(ChonkyIconName={})),function(SpecialAction){SpecialAction.MouseClickFile="mouse_click_file",SpecialAction.KeyboardClickFile="keyboard_click_file",SpecialAction.OpenParentFolder="open_parent_folder",SpecialAction.OpenFolderChainFolder="open_folder_chain_folder",SpecialAction.ToggleSearchBar="toggle_search_bar",SpecialAction.SelectAllFiles="select_all_files",SpecialAction.ClearSelection="clear_selection",SpecialAction.DragNDropStart="drag_n_drop_start",SpecialAction.DragNDropEnd="drag_n_drop_end"}(SpecialAction||(SpecialAction={}));__webpack_require__(27);var dateformat=__webpack_require__(190),dateformat_default=__webpack_require__.n(dateformat),filesize_min=__webpack_require__(289),filesize_min_default=__webpack_require__.n(filesize_min);function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}var file_helper_FileHelper=function(){function FileHelper(){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,FileHelper)}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}(FileHelper,null,[{key:"isDirectory",value:function isDirectory(file){return!!file&&!0===file.isDir}},{key:"isHidden",value:function isHidden(file){return!!file&&!0===file.isHidden}},{key:"isSymlink",value:function isSymlink(file){return!!file&&!0===file.isSymlink}},{key:"isClickable",value:function isClickable(file){return!!file}},{key:"isOpenable",value:function isOpenable(file){return!!file&&!1!==file.openable}},{key:"isSelectable",value:function isSelectable(file){return!!file&&!1!==file.selectable}},{key:"isDraggable",value:function isDraggable(file){return!!file&&!1!==file.draggable}},{key:"isDroppable",value:function isDroppable(file){return!!file&&(!(!file.isDir||!1===file.droppable)||!0===file.droppable)}},{key:"getReadableFileSize",value:function getReadableFileSize(file){if(!file||"number"!=typeof file.size)return null;var size=file.size,sizeData=filesize_min_default()(size,{bits:!1,output:"object"});return"B"===sizeData.symbol?"".concat(Math.round(sizeData.value/10)/100," KB"):"KB"===sizeData.symbol?"".concat(Math.round(sizeData.value)," ").concat(sizeData.symbol):"".concat(sizeData.value," ").concat(sizeData.symbol)}},{key:"getReadableDate",value:function getReadableDate(file){if(!file||!(file.modDate instanceof Date||"string"==typeof file.modDate))return null;var date=file.modDate;return"string"==typeof date&&(date=new Date(date)),isNaN(date.getTime())?null:date.getFullYear()===(new Date).getFullYear()?dateformat_default()(date,"d mmmm, HH:MM"):dateformat_default()(date,"d mmm yyyy, HH:MM")}},{key:"getChildrenCount",value:function getChildrenCount(file){return file&&"number"==typeof file.childrenCount?file.childrenCount:null}}]),FileHelper}(),ChonkyActions={MoveFilesTo:{id:"move_files_to"},DuplicateFilesTo:{id:"duplicate_files_to"},OpenFiles:{id:"open_files",requiresSelection:!0,hotkeys:["enter"],fileFilter:file_helper_FileHelper.isOpenable,toolbarButton:{name:"Open selection",group:"Actions",dropdown:!0,icon:ChonkyIconName.openFiles}},OpenParentFolder:{id:"open_parent_folder",hotkeys:["backspace"],toolbarButton:{name:"Go up a directory",icon:ChonkyIconName.openParentFolder,iconOnly:!0},specialActionToDispatch:SpecialAction.OpenParentFolder},ToggleSearch:{id:"toggle_search",hotkeys:["ctrl+f"],toolbarButton:{name:"Search",icon:ChonkyIconName.search,iconOnly:!0},specialActionToDispatch:SpecialAction.ToggleSearchBar},SelectAllFiles:{id:"select_all_files",hotkeys:["ctrl+a"],toolbarButton:{name:"Select all files",group:"Actions",dropdown:!0,icon:ChonkyIconName.selectAllFiles,iconOnly:!0},specialActionToDispatch:SpecialAction.SelectAllFiles},ClearSelection:{id:"clear_selection",hotkeys:["escape"],toolbarButton:{name:"Clear selection",group:"Actions",dropdown:!0,icon:ChonkyIconName.clearSelection,iconOnly:!0},specialActionToDispatch:SpecialAction.ClearSelection},SortFilesByName:{id:"sort_files_by_name",sortKeySelector:function sortKeySelector(file){return file?file.name:void 0},toolbarButton:{name:"Sort by name",group:"Sort",dropdown:!0}},SortFilesBySize:{id:"sort_files_by_size",sortKeySelector:function sortKeySelector(file){return file?file.size:void 0},toolbarButton:{name:"Sort by size",group:"Sort",dropdown:!0}},SortFilesByDate:{id:"sort_files_by_date",sortKeySelector:function sortKeySelector(file){return file?file.modDate:void 0},toolbarButton:{name:"Sort by date",group:"Sort",dropdown:!0}},ToggleHiddenFiles:{id:"toggle_hidden_files",option:{id:"show_hidden_files",defaultValue:!0},toolbarButton:{name:"Show hidden files",group:"Options",dropdown:!0}},ToggleShowFoldersFirst:{id:"toggle_show_folders_first",option:{id:"show_folders_first",defaultValue:!0},toolbarButton:{name:"Show folders first",group:"Options",dropdown:!0}},CopyFiles:{id:"copy_files",requiresSelection:!0,hotkeys:["ctrl+c"],toolbarButton:{name:"Copy selection",group:"Actions",dropdown:!0,icon:ChonkyIconName.copy}},CreateFolder:{id:"create_folder",toolbarButton:{name:"Create folder",tooltip:"Create a folder",icon:ChonkyIconName.folderCreate}},UploadFiles:{id:"upload_files",toolbarButton:{name:"Upload files",tooltip:"Upload files",icon:ChonkyIconName.upload}},DownloadFiles:{id:"download_files",requiresSelection:!0,toolbarButton:{name:"Download files",group:"Actions",tooltip:"Download files",dropdown:!0,icon:ChonkyIconName.download}},DeleteFiles:{id:"delete_files",requiresSelection:!0,hotkeys:["delete"],toolbarButton:{name:"Delete files",group:"Actions",tooltip:"Delete files",dropdown:!0,icon:ChonkyIconName.trash}}},DefaultFileActions=[ChonkyActions.MoveFilesTo,ChonkyActions.DuplicateFilesTo,ChonkyActions.OpenParentFolder,ChonkyActions.ToggleSearch,ChonkyActions.OpenFiles,ChonkyActions.SelectAllFiles,ChonkyActions.ClearSelection,ChonkyActions.SortFilesByName,ChonkyActions.SortFilesBySize,ChonkyActions.SortFilesByDate,ChonkyActions.ToggleHiddenFiles,ChonkyActions.ToggleShowFoldersFirst];__webpack_require__(29),__webpack_require__(20),__webpack_require__(32),__webpack_require__(24),__webpack_require__(149);function logger_defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}var Logger=function(){function Logger(){!function logger_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Logger)}return function logger_createClass(Constructor,protoProps,staticProps){return protoProps&&logger_defineProperties(Constructor.prototype,protoProps),staticProps&&logger_defineProperties(Constructor,staticProps),Constructor}(Logger,null,[{key:"error",value:function error(){for(var _console,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];(_console=console).error.apply(_console,["[Chonky runtime error]"].concat(args))}},{key:"warn",value:function warn(){for(var _console2,_len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++)args[_key2]=arguments[_key2];(_console2=console).warn.apply(_console2,["[Chonky runtime warning]"].concat(args))}},{key:"debug",value:function debug(){for(var _console3,_len3=arguments.length,args=new Array(_len3),_key3=0;_key3<_len3;_key3++)args[_key3]=arguments[_key3];(_console3=console).debug.apply(_console3,["[Chonky runtime debug]"].concat(args))}},{key:"formatBullets",value:function formatBullets(bullets){return"\n- ".concat(bullets.join("\n- "))}}]),Logger}();function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(iter))return Array.from(iter)}(arr)||_unsupportedIterableToArray(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}var isPlainObject=function isPlainObject(value){return"[object Object]"===Object.prototype.toString.call(value)},cleanupFileArray=function cleanupFileArray(fileArray,allowNull){var cleanFileArray,warningMessage=null,warningBullets=[];if(Array.isArray(fileArray)){for(var indicesToBeRemoved=new Set,seenIds={},duplicateIdSet=new Set,missingIdIndices=[],missingNameIndices=[],invalidTypeIndices=[],i=0;i<fileArray.length;++i){var file=fileArray[i];isPlainObject(file)?(file.id&&seenIds[file.id]?(duplicateIdSet.add(file.id),indicesToBeRemoved.add(i)):seenIds[file.id]=!0,file.name||(missingNameIndices.push(i),indicesToBeRemoved.add(i)),file.id||(missingIdIndices.push(i),indicesToBeRemoved.add(i))):null!==file&&(invalidTypeIndices.push(i),indicesToBeRemoved.add(i))}duplicateIdSet.size>0&&warningBullets.push("Some files have duplicate IDs. These IDs appeared multiple "+"times: ".concat(Array.from(duplicateIdSet))),missingIdIndices.length>0&&warningBullets.push('Some files are missing the "id" field. '+"Relevant file indices: ".concat(missingIdIndices.join(", "))),missingNameIndices.length>0&&warningBullets.push('Some files are missing the "name" field. '+"Relevant file indices: ".concat(missingNameIndices.join(", "))),invalidTypeIndices.length>0&&warningBullets.push('Some files have invalid type (they are neither a plain object nor "null"). '+"Relevant file indices: ".concat(invalidTypeIndices.join(", "))),indicesToBeRemoved.size>0?(cleanFileArray=fileArray.filter((function(value,index){return!indicesToBeRemoved.has(index)})),warningMessage="".concat(indicesToBeRemoved.size," offending ")+"file".concat(1===indicesToBeRemoved.size?" was":"s were"," ")+" removed from the array."):cleanFileArray=fileArray}else cleanFileArray=allowNull?null:[],allowNull&&null===fileArray||(warningMessage="Provided value was replaced "+"with ".concat(allowNull?"null":"empty array","."),warningBullets.push('Expected "files" to be an array, got type '+'"'.concat(_typeof(fileArray),'" instead (value: ').concat(fileArray,").")));return{cleanFileArray:cleanFileArray,warningMessage:warningMessage,warningBullets:warningBullets}},validation_useFileActionsValidation=function useFileActionsValidation(fileActions,defaultFileActions,includeDefaultFileActions){var extendedFileActions=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){if(!includeDefaultFileActions)return fileActions;var seenFileActionIds={};fileActions.map((function(action){action&&action.id&&(seenFileActionIds[action.id]=!0)}));var _step,extendedFileActions=_toConsumableArray(fileActions),_iterator=function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}(defaultFileActions);try{for(_iterator.s();!(_step=_iterator.n()).done;){var action=_step.value;seenFileActionIds[action.id]||extendedFileActions.push(action)}}catch(err){_iterator.e(err)}finally{_iterator.f()}return extendedFileActions}),[fileActions,defaultFileActions,includeDefaultFileActions]),_useMemo3=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var errorMessages=[],cleanFilesResult=cleanupFileActions(extendedFileActions);if(cleanFilesResult.warningMessage){var errorMessage='The "fileActions" prop passed to FileBrowser did not pass '+"validation. ".concat(cleanFilesResult.warningMessage," ")+"The following errors were encountered:";Logger.error(errorMessage,Logger.formatBullets(cleanFilesResult.warningBullets)),errorMessages.push({message:errorMessage,bullets:cleanFilesResult.warningBullets})}return{cleanFileActions:cleanFilesResult.cleanFileActions,errorMessages:errorMessages}}),[extendedFileActions]);return{cleanFileActions:_useMemo3.cleanFileActions,errorMessages:_useMemo3.errorMessages}},cleanupFileActions=function cleanupFileActions(fileActions){var cleanFileActions,warningMessage=null,warningBullets=[];if(Array.isArray(fileActions)){for(var indicesToBeRemoved=new Set,seenIds={},duplicateIdSet=new Set,missingIdIndices=[],invalidTypeIndices=[],i=0;i<fileActions.length;++i){var fileAction=fileActions[i];isPlainObject(fileAction)?(fileAction.id&&seenIds[fileAction.id]?(duplicateIdSet.add(fileAction.id),indicesToBeRemoved.add(i)):seenIds[fileAction.id]=!0,fileAction.id||(missingIdIndices.push(i),indicesToBeRemoved.add(i))):(invalidTypeIndices.push(i),indicesToBeRemoved.add(i))}duplicateIdSet.size>0&&warningBullets.push("Some file actions have duplicate IDs. These IDs appeared multiple "+"times: ".concat(Array.from(duplicateIdSet))),missingIdIndices.length>0&&warningBullets.push('Some file actions are missing the "id" field. '+"Relevant file indices: ".concat(missingIdIndices.join(", "))),invalidTypeIndices.length>0&&warningBullets.push("Some files actions have invalid type (they are not plain object). "+"Relevant file indices: ".concat(invalidTypeIndices.join(", "))),indicesToBeRemoved.size>0?(cleanFileActions=fileActions.filter((function(value,index){return!indicesToBeRemoved.has(index)})),warningMessage="".concat(indicesToBeRemoved.size," offending ")+"file action".concat(1===indicesToBeRemoved.size?" was":"s were"," ")+" removed from the array."):cleanFileActions=fileActions}else cleanFileActions=[],warningMessage="Provided value was replaced with an empty array.",warningBullets.push('Expected "fileActions" to be an array, got type '+'"'.concat(_typeof(fileActions),'" instead (value: ').concat(fileActions,")."));return{cleanFileActions:cleanFileActions,warningMessage:warningMessage,warningBullets:warningBullets}},enableDragAndDropState=Object(dist.atom)({key:"enableDragAndDropState",default:!1}),constants_NOOP_FUNCTION=function NOOP_FUNCTION(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];Logger.warn('The "NOOP_FUNCTION" from the constants module was called. This can indicate a bug in one of the components. Supplied args:',args)};__webpack_require__(49),__webpack_require__(113),__webpack_require__(96),__webpack_require__(9),__webpack_require__(114),__webpack_require__(115);function selection_typeof(obj){return(selection_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function _createSuperInternal(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==selection_typeof(call)&&"function"!=typeof call?function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}function selection_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function selection_defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function selection_createClass(Constructor,protoProps,staticProps){return protoProps&&selection_defineProperties(Constructor.prototype,protoProps),staticProps&&selection_defineProperties(Constructor,staticProps),Constructor}function selection_createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=selection_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e2){throw _e2},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e3){didErr=!0,err=_e3},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||selection_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function selection_unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return selection_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?selection_arrayLikeToArray(o,minLen):void 0}}function selection_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var selection_useSelectionModifiers=function useSelectionModifiers(disableSelection,setSelection){var selectFiles=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(fileIds){var reset=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];disableSelection||setSelection((function(selection){var _step,newSelection=reset?{}:Object.assign({},selection),_iterator=selection_createForOfIteratorHelper(fileIds);try{for(_iterator.s();!(_step=_iterator.n()).done;){newSelection[_step.value]=!0}}catch(err){_iterator.e(err)}finally{_iterator.f()}return newSelection}))}),[disableSelection,setSelection]),toggleSelection=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(fileId){var exclusive=arguments.length>1&&void 0!==arguments[1]&&arguments[1];disableSelection||setSelection((function(selection){var newSelection=exclusive?{}:Object.assign({},selection);return!0===selection[fileId]?delete newSelection[fileId]:newSelection[fileId]=!0,newSelection}))}),[disableSelection,setSelection]),clearSelection=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(){disableSelection||setSelection((function(oldSelection){return 0===Object.keys(oldSelection).length?oldSelection:{}}))}),[disableSelection,setSelection]);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return{selectFiles:selectFiles,toggleSelection:toggleSelection,clearSelection:clearSelection}}),[selectFiles,toggleSelection,clearSelection])},selection_SelectionHelper=function(){function SelectionHelper(){selection_classCallCheck(this,SelectionHelper)}return selection_createClass(SelectionHelper,null,[{key:"getSelectedFiles",value:function getSelectedFiles(files,selection){for(var selectedFiles=files.filter((function(file){return file_helper_FileHelper.isSelectable(file)&&!0===selection[file.id]})),_len=arguments.length,filters=new Array(_len>2?_len-2:0),_key=2;_key<_len;_key++)filters[_key-2]=arguments[_key];return filters.reduce((function(prevFiles,filter){return filter?prevFiles.filter(filter):prevFiles}),selectedFiles)}},{key:"getSelectionSize",value:function getSelectionSize(files,selection){for(var _len2=arguments.length,filters=new Array(_len2>2?_len2-2:0),_key2=2;_key2<_len2;_key2++)filters[_key2-2]=arguments[_key2];return SelectionHelper.getSelectedFiles.apply(SelectionHelper,[files,selection].concat(filters)).length}},{key:"isSelected",value:function isSelected(selection,file){return file_helper_FileHelper.isSelectable(file)&&!0===selection[file.id]}}]),SelectionHelper}(),UpdateableSelectionUtil=function(_SelectionUtil){!function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(UpdateableSelectionUtil,_SelectionUtil);var _super=_createSuper(UpdateableSelectionUtil);function UpdateableSelectionUtil(){return selection_classCallCheck(this,UpdateableSelectionUtil),_super.apply(this,arguments)}return selection_createClass(UpdateableSelectionUtil,[{key:"update",value:function update(){this.protectedUpdate.apply(this,arguments)}}]),UpdateableSelectionUtil}(function(){function SelectionUtil(){var files=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],selection=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};selection_classCallCheck(this,SelectionUtil),this.files=void 0,this.selection=void 0,this.protectedUpdate(files,selection)}return selection_createClass(SelectionUtil,[{key:"protectedUpdate",value:function protectedUpdate(files,selection){this.files=files,this.selection=selection}},{key:"getSelection",value:function getSelection(){return this.selection}},{key:"getSelectedFiles",value:function getSelectedFiles(){for(var _len3=arguments.length,filters=new Array(_len3),_key3=0;_key3<_len3;_key3++)filters[_key3]=arguments[_key3];return selection_SelectionHelper.getSelectedFiles.apply(selection_SelectionHelper,[this.files,this.selection].concat(filters))}},{key:"getSelectionSize",value:function getSelectionSize(){for(var _len4=arguments.length,filters=new Array(_len4),_key4=0;_key4<_len4;_key4++)filters[_key4]=arguments[_key4];return selection_SelectionHelper.getSelectionSize.apply(selection_SelectionHelper,[this.files,this.selection].concat(filters))}},{key:"isSelected",value:function isSelected(file){return selection_SelectionHelper.isSelected(this.selection,file)}}]),SelectionUtil}());function files_recoil_createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=function files_recoil_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return files_recoil_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return files_recoil_arrayLikeToArray(o,minLen)}(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function files_recoil_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var filesState=Object(dist.atom)({key:"filesState",default:[]}),folderChainState=Object(dist.atom)({key:"folderChainState",default:null}),parentFolderState=Object(dist.atom)({key:"parentFolderState",default:null}),fileMapState=Object(dist.selector)({key:"fileMapState",get:function get(_ref){var _step,fileMap={},_iterator=files_recoil_createForOfIteratorHelper((0,_ref.get)(filesState));try{for(_iterator.s();!(_step=_iterator.n()).done;){var file=_step.value;file&&(fileMap[file.id]=file)}}catch(err){_iterator.e(err)}finally{_iterator.f()}return fileMap}}),fileDataState=Object(dist.selectorFamily)({key:"fileDataState",get:function get(fileId){return function(_ref2){var get=_ref2.get;if(!fileId)return null;var file=get(fileMapState)[fileId];return null!=file?file:null}}}),selectionState=Object(dist.atom)({key:"selectionState",default:{}}),selectionModifiersState=Object(dist.atom)({key:"selectionModifiersState",default:{selectFiles:constants_NOOP_FUNCTION,toggleSelection:constants_NOOP_FUNCTION,clearSelection:constants_NOOP_FUNCTION}}),selectedFilesState=Object(dist.selector)({key:"selectedFilesState",get:function get(_ref){var _get=_ref.get,files=_get(filesState),selection=_get(selectionState);return selection_SelectionHelper.getSelectedFiles(files,selection)}}),selectionSizeState=Object(dist.selector)({key:"selectionSizeState",get:function get(_ref2){var selection=(0,_ref2.get)(selectionState),selectionSize=0;for(var fileId in selection)selection.hasOwnProperty(fileId)&&!0===selection[fileId]&&selectionSize++;return selectionSize}}),fileSelectedState=Object(dist.selectorFamily)({key:"fileSelectedState",get:function get(fileId){return function(_ref3){var get=_ref3.get;return!!fileId&&!0===get(selectionState)[fileId]}}}),fileActionsState=Object(dist.atom)({key:"fileActionsState",default:[]}),fileActionMapState=Object(dist.atom)({key:"fileActionMapState",default:{}}),dispatchFileActionState=Object(dist.atom)({key:"dispatchFileActionState",default:constants_NOOP_FUNCTION}),requestFileActionState=Object(dist.atom)({key:"requestFileActionState",default:constants_NOOP_FUNCTION}),doubleClickDelayState=Object(dist.atom)({key:"doubleClickDelayState",default:300}),fileActionDataState=Object(dist.selectorFamily)({key:"fileActionDataState",get:function get(fileActionId){return function(_ref){var get=_ref.get;if(!fileActionId)return null;var fileAction=get(fileActionMapState)[fileActionId];return null!=fileAction?fileAction:null}}}),fileActionSelectedFilesState=Object(dist.selectorFamily)({key:"fileActionSelectedFilesState",get:function get(fileActionId){return function(_ref2){var get=_ref2.get;if(!fileActionId)return[];var fileAction=get(fileActionMapState)[fileActionId];if(!fileAction)return[];var selectedFiles=get(selectedFilesState);return fileAction.fileFilter?selectedFiles.filter(fileAction.fileFilter):selectedFiles}}}),fileActionSelectedFilesCountState=Object(dist.selectorFamily)({key:"fileActionSelectedFilesCountState",get:function get(fileActionId){return function(_ref3){return(0,_ref3.get)(fileActionSelectedFilesState(fileActionId)).length}}}),classnames=__webpack_require__(38),classnames_default=__webpack_require__.n(classnames),Grid=__webpack_require__(290),ClickableWrapper_hooks_useKeyDownHandler=(__webpack_require__(99),function useKeyDownHandler(onKeyboardClick){return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){if(onKeyboardClick){var keyboardClickEvent={enterKey:"Enter"===event.nativeEvent.code,spaceKey:"Space"===event.nativeEvent.code,altKey:event.altKey,ctrlKey:event.ctrlKey,shiftKey:event.shiftKey};(keyboardClickEvent.spaceKey||keyboardClickEvent.enterKey)&&(event.preventDefault(),event.stopPropagation(),onKeyboardClick(keyboardClickEvent))}}),[onKeyboardClick])});try{ClickableWrapper_hooks_useKeyDownHandler.displayName="useKeyDownHandler",ClickableWrapper_hooks_useKeyDownHandler.__docgenInfo={description:"",displayName:"useKeyDownHandler",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/ClickableWrapper-hooks.tsx#useKeyDownHandler"]={docgenInfo:ClickableWrapper_hooks_useKeyDownHandler.__docgenInfo,name:"useKeyDownHandler",path:"src/components/internal/ClickableWrapper-hooks.tsx#useKeyDownHandler"})}catch(__react_docgen_typescript_loader_error){}var ClickableWrapper_ClickableWrapper=function ClickableWrapper(props){var children=props.children,WrapperTag=props.wrapperTag,passthroughProps=props.passthroughProps,onSingleClick=props.onSingleClick,onDoubleClick=props.onDoubleClick,onKeyboardClick=props.onKeyboardClick,handleClick=function useClickHandler(onSingleClick,onDoubleClick){var doubleClickDelay=Object(dist.useRecoilValue)(doubleClickDelayState),counter=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useRef)({clickCount:0,clickTimeout:null});return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){var mouseClickEvent={altKey:event.altKey,ctrlKey:event.ctrlKey,shiftKey:event.shiftKey};counter.current.clickCount++,1===counter.current.clickCount?(onSingleClick&&(event.preventDefault(),onSingleClick(mouseClickEvent)),counter.current.clickCount=1,counter.current.clickTimeout=setTimeout((function(){return counter.current.clickCount=0}),doubleClickDelay)):2===counter.current.clickCount&&(onDoubleClick&&(event.preventDefault(),onDoubleClick(mouseClickEvent)),"number"==typeof counter.current.clickTimeout&&(clearTimeout(counter.current.clickTimeout),counter.current.clickTimeout=null,counter.current.clickCount=0))}),[doubleClickDelay,onSingleClick,onDoubleClick,counter])}(onSingleClick,onDoubleClick),handleKeyDown=ClickableWrapper_hooks_useKeyDownHandler(onKeyboardClick),compProps={};(onSingleClick||onDoubleClick||onKeyboardClick)&&(compProps.onClick=handleClick,compProps.onKeyDown=handleKeyDown,compProps.tabIndex=0);var mergedProps=Object.assign({},compProps,passthroughProps);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(WrapperTag,mergedProps,children)};ClickableWrapper_ClickableWrapper.displayName="ClickableWrapper";try{ClickableWrapper_ClickableWrapper.displayName="ClickableWrapper",ClickableWrapper_ClickableWrapper.__docgenInfo={description:"",displayName:"ClickableWrapper",props:{wrapperTag:{defaultValue:null,description:"",name:"wrapperTag",required:!0,type:{name:"any"}},passthroughProps:{defaultValue:null,description:"",name:"passthroughProps",required:!1,type:{name:"any"}},onSingleClick:{defaultValue:null,description:"",name:"onSingleClick",required:!1,type:{name:"MouseClickEventHandler | undefined"}},onDoubleClick:{defaultValue:null,description:"",name:"onDoubleClick",required:!1,type:{name:"MouseClickEventHandler | undefined"}},onKeyboardClick:{defaultValue:null,description:"",name:"onKeyboardClick",required:!1,type:{name:"KeyboardClickEventHandler | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/ClickableWrapper.tsx#ClickableWrapper"]={docgenInfo:ClickableWrapper_ClickableWrapper.__docgenInfo,name:"ClickableWrapper",path:"src/components/internal/ClickableWrapper.tsx#ClickableWrapper"})}catch(__react_docgen_typescript_loader_error){}var exact_trie=__webpack_require__(291),exact_trie_default=__webpack_require__.n(exact_trie),memoizee=__webpack_require__(292);function file_icon_helper_slicedToArray(arr,i){return function file_icon_helper_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function file_icon_helper_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function file_icon_helper_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return file_icon_helper_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return file_icon_helper_arrayLikeToArray(o,minLen)}(arr,i)||function file_icon_helper_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function file_icon_helper_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var _IconMap,getIconTrie=__webpack_require__.n(memoizee)()((function(){for(var colourIndex=0,IconsToExtensions=[[ChonkyIconName.license,["license"]],[ChonkyIconName.config,["sfk","ini","yml","toml","iml"]],[ChonkyIconName.model,["3ds","obj","ply","fbx"]],[ChonkyIconName.database,["csv","json","sql","sqlite","sqlite3","npy","npz","rec","idx","hdf5"]],[ChonkyIconName.text,["txt","md"]],[ChonkyIconName.archive,["zip","rar","tar","tar.gz"]],[ChonkyIconName.image,ImageExtensions],[ChonkyIconName.video,VideoExtensions],[ChonkyIconName.code,["html","php","css","sass","scss","less","cpp","h","hpp","c","xml"]],[ChonkyIconName.info,["bib","readme","nfo"]],[ChonkyIconName.key,["pem","pub"]],[ChonkyIconName.lock,["lock","lock.json","shrinkwrap.json"]],[ChonkyIconName.music,AudioExtensions],[ChonkyIconName.terminal,["run","sh"]],[ChonkyIconName.trash,[".Trashes"]],[ChonkyIconName.users,["authors","contributors"]],[ChonkyIconName.linux,["AppImage"]],[ChonkyIconName.ubuntu,["deb"]],[ChonkyIconName.windows,["exe"]],[ChonkyIconName.rust,["rs","rlib"]],[ChonkyIconName.python,["py","ipynb"]],[ChonkyIconName.nodejs,["js","jsx","ts","tsx","d.ts"]],[ChonkyIconName.php,["php"]],[ChonkyIconName.git,[".gitignore"]],[ChonkyIconName.adobe,["psd"]],[ChonkyIconName.pdf,["pdf"]],[ChonkyIconName.excel,["xls","xlsx"]],[ChonkyIconName.word,["doc","docx","odt"]],[ChonkyIconName.flash,["swf"]]],exactTrie=new exact_trie_default.a({ignoreCase:!0}),_i=0,_IconsToExtensions=IconsToExtensions;_i<_IconsToExtensions.length;_i++)for(var _pair=file_icon_helper_slicedToArray(_IconsToExtensions[_i],2),icon=_pair[0],extensions=_pair[1],i=0;i<extensions.length;++i){var iconData={icon:icon,colorCode:(colourIndex+=5)%(ColorsLight.length-1)+1};exactTrie.put(extensions[i],iconData,!0)}return exactTrie})),VideoExtensions=["3g2","3gp","3gpp","asf","asx","avi","dvb","f4v","fli","flv","fvt","h261","h263","h264","jpgm","jpgv","jpm","m1v","m2v","m4u","m4v","mj2","mjp2","mk3d","mks","mkv","mng","mov","movie","mp4","mp4v","mpe","mpeg","mpg","mpg4","mxu","ogv","pyv","qt","smv","ts","uvh","uvm","uvp","uvs","uvu","uvv","uvvh","uvvm","uvvp","uvvs","uvvu","uvvv","viv","vob","webm","wm","wmv","wmx","wvx"],ImageExtensions=["3ds","apng","azv","bmp","bmp","btif","cgm","cmx","djv","djvu","drle","dwg","dxf","emf","exr","fbs","fh","fh4","fh5","fh7","fhc","fits","fpx","fst","g3","gif","heic","heics","heif","heifs","ico","ico","ief","jls","jng","jp2","jpe","jpeg","jpf","jpg","jpg2","jpm","jpx","jxr","ktx","mdi","mmr","npx","pbm","pct","pcx","pcx","pgm","pic","png","pnm","ppm","psd","pti","ras","rgb","rlc","sgi","sid","sub","svg","svgz","t38","tap","tfx","tga","tif","tiff","uvg","uvi","uvvg","uvvi","vtf","wbmp","wdp","webp","wmf","xbm","xif","xpm","xwd"],AudioExtensions=["3gpp","aac","adp","aif","aifc","aiff","au","caf","dra","dts","dtshd","ecelp4800","ecelp7470","ecelp9600","eol","flac","kar","lvp","m2a","m3a","m3u","m4a","m4a","mid","midi","mka","mp2","mp2a","mp3","mp3","mp4a","mpga","oga","ogg","pya","ra","ra","ram","rip","rmi","rmp","s3m","sil","snd","spx","uva","uvva","wav","wav","wav","wax","weba","wma","xm"],ColorsLight=["#bbbbbb","#d65c5c","#d6665c","#d6705c","#d67a5c","#d6855c","#d68f5c","#d6995c","#d6a35c","#d6ad5c","#d6b85c","#d6c25c","#d6cc5c","#d6d65c","#ccd65c","#c2d65c","#b8d65c","#add65c","#a3d65c","#99d65c","#8fd65c","#85d65c","#7ad65c","#70d65c","#66d65c","#5cd65c","#5cd666","#5cd670","#5cd67a","#5cd685","#5cd68f","#5cd699","#5cd6a3","#5cd6ad","#5cd6b8","#5cd6c2","#5cd6cc","#5cd6d6","#5cccd6","#5cc2d6","#5cb8d6","#5cadd6","#5ca3d6","#5c99d6","#5c8fd6","#5c85d6","#5c7ad6","#5c70d6","#5c66d6","#5c5cd6","#665cd6","#705cd6","#7a5cd6","#855cd6","#8f5cd6","#995cd6","#a35cd6","#ad5cd6","#b85cd6","#c25cd6","#cc5cd6","#d65cd6","#d65ccc","#d65cc2","#d65cb8","#d65cad","#d65ca3","#d65c99","#d65c8f","#d65c85","#d65c7a","#d65c70","#d65c66"],ColorsDark=["#777","#8f3d3d","#8f443d","#8f4b3d","#8f523d","#8f583d","#8f5f3d","#8f663d","#8f6d3d","#8f743d","#8f7a3d","#8f813d","#8f883d","#8f8f3d","#888f3d","#818f3d","#7a8f3d","#748f3d","#6d8f3d","#668f3d","#5f8f3d","#588f3d","#528f3d","#4b8f3d","#448f3d","#3d8f3d","#3d8f44","#3d8f4b","#3d8f52","#3d8f58","#3d8f5f","#3d8f66","#3d8f6d","#3d8f74","#3d8f7a","#3d8f81","#3d8f88","#3d8f8f","#3d888f","#3d818f","#3d7a8f","#3d748f","#3d6d8f","#3d668f","#3d5f8f","#3d588f","#3d528f","#3d4b8f","#3d448f","#3d3d8f","#443d8f","#4b3d8f","#523d8f","#583d8f","#5f3d8f","#663d8f","#6d3d8f","#743d8f","#7a3d8f","#813d8f","#883d8f","#8f3d8f","#8f3d88","#8f3d81","#8f3d7a","#8f3d74","#8f3d6d","#8f3d66","#8f3d5f","#8f3d58","#8f3d52","#8f3d4b","#8f3d44"],faAdobe=__webpack_require__(347),faGitAlt=__webpack_require__(346),faLinux=__webpack_require__(339),faNodeJs=__webpack_require__(344),faPhp=__webpack_require__(345),faPython=__webpack_require__(343),faRust=__webpack_require__(342),faUbuntu=__webpack_require__(340),faWindows=__webpack_require__(341),faArrowDown=__webpack_require__(298),faBalanceScale=__webpack_require__(324),faBoxOpen=__webpack_require__(300),faCheckCircle=__webpack_require__(308),faChevronDown=__webpack_require__(295),faChevronRight=__webpack_require__(316),faCircle=__webpack_require__(309),faCircleNotch=__webpack_require__(294),faCogs=__webpack_require__(326),faCopy=__webpack_require__(302),faCubes=__webpack_require__(327),faDatabase=__webpack_require__(328),faDownload=__webpack_require__(317),faEraser=__webpack_require__(305),faExclamationTriangle=__webpack_require__(320),faExternalLinkAlt=__webpack_require__(321),faEyeSlash=__webpack_require__(322),faFile=__webpack_require__(323),faFileAlt=__webpack_require__(329),faFileArchive=__webpack_require__(330),faFileCode=__webpack_require__(325),faFileExcel=__webpack_require__(349),faFileImage=__webpack_require__(331),faFilePdf=__webpack_require__(348),faFileWord=__webpack_require__(350),faFilm=__webpack_require__(332),faFistRaised=__webpack_require__(297),faFolder=__webpack_require__(311),faFolderOpen=__webpack_require__(313),faFolderPlus=__webpack_require__(312),faGenderless=__webpack_require__(296),faInfoCircle=__webpack_require__(333),faKey=__webpack_require__(334),faLevelUpAlt=__webpack_require__(301),faList=__webpack_require__(310),faLock=__webpack_require__(335),faMusic=__webpack_require__(336),faObjectGroup=__webpack_require__(304),faRunning=__webpack_require__(351),faSearch=__webpack_require__(303),faSortAmountDownAlt=__webpack_require__(306),faSortAmountUpAlt=__webpack_require__(307),faTerminal=__webpack_require__(337),faTh=__webpack_require__(314),faThLarge=__webpack_require__(315),faTimes=__webpack_require__(299),faTrash=__webpack_require__(319),faUpload=__webpack_require__(318),faUsers=__webpack_require__(338),index_es=__webpack_require__(293);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var IconMap=(_defineProperty(_IconMap={},ChonkyIconName.loading,faCircleNotch.faCircleNotch),_defineProperty(_IconMap,ChonkyIconName.dropdown,faChevronDown.faChevronDown),_defineProperty(_IconMap,ChonkyIconName.circle,faGenderless.faGenderless),_defineProperty(_IconMap,ChonkyIconName.dndDragging,faFistRaised.faFistRaised),_defineProperty(_IconMap,ChonkyIconName.dndCanDrop,faArrowDown.faArrowDown),_defineProperty(_IconMap,ChonkyIconName.dndCannotDrop,faTimes.faTimes),_defineProperty(_IconMap,ChonkyIconName.openFiles,faBoxOpen.faBoxOpen),_defineProperty(_IconMap,ChonkyIconName.openParentFolder,faLevelUpAlt.faLevelUpAlt),_defineProperty(_IconMap,ChonkyIconName.copy,faCopy.faCopy),_defineProperty(_IconMap,ChonkyIconName.search,faSearch.faSearch),_defineProperty(_IconMap,ChonkyIconName.selectAllFiles,faObjectGroup.faObjectGroup),_defineProperty(_IconMap,ChonkyIconName.clearSelection,faEraser.faEraser),_defineProperty(_IconMap,ChonkyIconName.sortAsc,faSortAmountDownAlt.faSortAmountDownAlt),_defineProperty(_IconMap,ChonkyIconName.sortDesc,faSortAmountUpAlt.faSortAmountUpAlt),_defineProperty(_IconMap,ChonkyIconName.checkActive,faCheckCircle.faCheckCircle),_defineProperty(_IconMap,ChonkyIconName.checkInactive,faCircle.faCircle),_defineProperty(_IconMap,ChonkyIconName.list,faList.faList),_defineProperty(_IconMap,ChonkyIconName.folder,faFolder.faFolder),_defineProperty(_IconMap,ChonkyIconName.folderCreate,faFolderPlus.faFolderPlus),_defineProperty(_IconMap,ChonkyIconName.folderOpen,faFolderOpen.faFolderOpen),_defineProperty(_IconMap,ChonkyIconName.smallThumbnail,faTh.faTh),_defineProperty(_IconMap,ChonkyIconName.largeThumbnail,faThLarge.faThLarge),_defineProperty(_IconMap,ChonkyIconName.folderChainSeparator,faChevronRight.faChevronRight),_defineProperty(_IconMap,ChonkyIconName.download,faDownload.faDownload),_defineProperty(_IconMap,ChonkyIconName.upload,faUpload.faUpload),_defineProperty(_IconMap,ChonkyIconName.trash,faTrash.faTrash),_defineProperty(_IconMap,ChonkyIconName.fallbackIcon,faExclamationTriangle.faExclamationTriangle),_defineProperty(_IconMap,ChonkyIconName.symlink,faExternalLinkAlt.faExternalLinkAlt),_defineProperty(_IconMap,ChonkyIconName.hidden,faEyeSlash.faEyeSlash),_defineProperty(_IconMap,ChonkyIconName.file,faFile.faFile),_defineProperty(_IconMap,ChonkyIconName.license,faBalanceScale.faBalanceScale),_defineProperty(_IconMap,ChonkyIconName.code,faFileCode.faFileCode),_defineProperty(_IconMap,ChonkyIconName.config,faCogs.faCogs),_defineProperty(_IconMap,ChonkyIconName.model,faCubes.faCubes),_defineProperty(_IconMap,ChonkyIconName.database,faDatabase.faDatabase),_defineProperty(_IconMap,ChonkyIconName.text,faFileAlt.faFileAlt),_defineProperty(_IconMap,ChonkyIconName.archive,faFileArchive.faFileArchive),_defineProperty(_IconMap,ChonkyIconName.image,faFileImage.faFileImage),_defineProperty(_IconMap,ChonkyIconName.video,faFilm.faFilm),_defineProperty(_IconMap,ChonkyIconName.info,faInfoCircle.faInfoCircle),_defineProperty(_IconMap,ChonkyIconName.key,faKey.faKey),_defineProperty(_IconMap,ChonkyIconName.lock,faLock.faLock),_defineProperty(_IconMap,ChonkyIconName.music,faMusic.faMusic),_defineProperty(_IconMap,ChonkyIconName.terminal,faTerminal.faTerminal),_defineProperty(_IconMap,ChonkyIconName.users,faUsers.faUsers),_defineProperty(_IconMap,ChonkyIconName.linux,faLinux.faLinux),_defineProperty(_IconMap,ChonkyIconName.ubuntu,faUbuntu.faUbuntu),_defineProperty(_IconMap,ChonkyIconName.windows,faWindows.faWindows),_defineProperty(_IconMap,ChonkyIconName.rust,faRust.faRust),_defineProperty(_IconMap,ChonkyIconName.python,faPython.faPython),_defineProperty(_IconMap,ChonkyIconName.nodejs,faNodeJs.faNodeJs),_defineProperty(_IconMap,ChonkyIconName.php,faPhp.faPhp),_defineProperty(_IconMap,ChonkyIconName.git,faGitAlt.faGitAlt),_defineProperty(_IconMap,ChonkyIconName.adobe,faAdobe.faAdobe),_defineProperty(_IconMap,ChonkyIconName.pdf,faFilePdf.faFilePdf),_defineProperty(_IconMap,ChonkyIconName.excel,faFileExcel.faFileExcel),_defineProperty(_IconMap,ChonkyIconName.word,faFileWord.faFileWord),_defineProperty(_IconMap,ChonkyIconName.flash,faRunning.faRunning),_IconMap),ChonkyIconFA=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var icon=props.icon,faProps=Object.assign({},props,{icon:IconMap[icon]?IconMap[icon]:IconMap.fallbackIcon});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(index_es.a,faProps)}));try{ChonkyIconFA.displayName="ChonkyIconFA",ChonkyIconFA.__docgenInfo={description:"",displayName:"ChonkyIconFA",props:{icon:{defaultValue:null,description:"",name:"icon",required:!0,type:{name:"string"}},spin:{defaultValue:null,description:"",name:"spin",required:!1,type:{name:"boolean | undefined"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string | undefined"}},color:{defaultValue:null,description:"",name:"color",required:!1,type:{name:"string | undefined"}},fixedWidth:{defaultValue:null,description:"",name:"fixedWidth",required:!1,type:{name:"boolean | undefined"}},size:{defaultValue:null,description:"",name:"size",required:!1,type:{name:'"xs" | "lg" | "sm" | undefined'}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/ChonkyIcon.tsx#ChonkyIconFA"]={docgenInfo:ChonkyIconFA.__docgenInfo,name:"ChonkyIconFA",path:"src/components/external/ChonkyIcon.tsx#ChonkyIconFA"})}catch(__react_docgen_typescript_loader_error){}var FileThumbnail=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var thumbnailUrl=props.thumbnailUrl,thumbnailStyle=thumbnailUrl?{backgroundImage:"url('".concat(thumbnailUrl,"')")}:{},className=classnames_default()({"chonky-file-thumbnail":!0,"chonky-file-thumbnail-hidden":!thumbnailUrl});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:className,style:thumbnailStyle})}));try{FileThumbnail.displayName="FileThumbnail",FileThumbnail.__docgenInfo={description:"",displayName:"FileThumbnail",props:{thumbnailUrl:{defaultValue:null,description:"",name:"thumbnailUrl",required:!0,type:{name:"Nullable<string>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/FileThumbnail.tsx#FileThumbnail"]={docgenInfo:FileThumbnail.__docgenInfo,name:"FileThumbnail",path:"src/components/internal/FileThumbnail.tsx#FileThumbnail"})}catch(__react_docgen_typescript_loader_error){}__webpack_require__(72);var path_browserify=__webpack_require__(352),path_browserify_default=__webpack_require__.n(path_browserify),thumbnailGeneratorState=Object(dist.atom)({key:"thumbnailGeneratorState",default:null}),TextPlaceholder=(__webpack_require__(748),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var placeholderLength=function getRandomInt(min,max){return min+Math.floor(Math.random()*Math.floor(max-min))}(props.minLength,props.maxLength),whitespace="&nbsp;".repeat(placeholderLength);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-text-placeholder",dangerouslySetInnerHTML:{__html:whitespace}})})));try{TextPlaceholder.displayName="TextPlaceholder",TextPlaceholder.__docgenInfo={description:"",displayName:"TextPlaceholder",props:{minLength:{defaultValue:null,description:"",name:"minLength",required:!0,type:{name:"number"}},maxLength:{defaultValue:null,description:"",name:"maxLength",required:!0,type:{name:"number"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/TextPlaceholder.tsx#TextPlaceholder"]={docgenInfo:TextPlaceholder.__docgenInfo,name:"TextPlaceholder",path:"src/components/external/TextPlaceholder.tsx#TextPlaceholder"})}catch(__react_docgen_typescript_loader_error){}var BaseFileEntry_hooks_useModifierIconComponents=function useModifierIconComponents(file){var modifierIcons=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var modifierIcons=[];return file_helper_FileHelper.isHidden(file)&&modifierIcons.push(ChonkyIconName.hidden),file_helper_FileHelper.isSymlink(file)&&modifierIcons.push(ChonkyIconName.symlink),modifierIcons}),[file]);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return modifierIcons.map((function(icon,index){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{key:"file-modifier-".concat(index),icon:icon})}))}),[modifierIcons])},BaseFileEntry_hooks_useFileNameComponent=function useFileNameComponent(file){return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){if(!file)return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(TextPlaceholder,{minLength:15,maxLength:20});var name,extension,_file$ext;file_helper_FileHelper.isDirectory(file)?(name=file.name,extension="/"):(extension=null!==(_file$ext=file.ext)&&void 0!==_file$ext?_file$ext:path_browserify_default.a.extname(file.name),name=file.name.substr(0,file.name.length-extension.length));return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.Fragment,null,name,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-file-entry-description-title-extension"},extension))}),[file])};try{BaseFileEntry_hooks_useModifierIconComponents.displayName="useModifierIconComponents",BaseFileEntry_hooks_useModifierIconComponents.__docgenInfo={description:"",displayName:"useModifierIconComponents",props:{id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},name:{defaultValue:null,description:"",name:"name",required:!0,type:{name:"string"}},ext:{defaultValue:null,description:"",name:"ext",required:!1,type:{name:"string | undefined"}},isDir:{defaultValue:null,description:"",name:"isDir",required:!1,type:{name:"boolean | undefined"}},isHidden:{defaultValue:null,description:"",name:"isHidden",required:!1,type:{name:"boolean | undefined"}},isSymlink:{defaultValue:null,description:"",name:"isSymlink",required:!1,type:{name:"boolean | undefined"}},openable:{defaultValue:null,description:"",name:"openable",required:!1,type:{name:"boolean | undefined"}},selectable:{defaultValue:null,description:"",name:"selectable",required:!1,type:{name:"boolean | undefined"}},draggable:{defaultValue:null,description:"",name:"draggable",required:!1,type:{name:"boolean | undefined"}},droppable:{defaultValue:null,description:"",name:"droppable",required:!1,type:{name:"boolean | undefined"}},size:{defaultValue:null,description:"",name:"size",required:!1,type:{name:"number | undefined"}},modDate:{defaultValue:null,description:"",name:"modDate",required:!1,type:{name:"string | Date | undefined"}},childrenCount:{defaultValue:null,description:"",name:"childrenCount",required:!1,type:{name:"number | undefined"}},thumbnailUrl:{defaultValue:null,description:"",name:"thumbnailUrl",required:!1,type:{name:"string | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/file-entry/BaseFileEntry-hooks.tsx#useModifierIconComponents"]={docgenInfo:BaseFileEntry_hooks_useModifierIconComponents.__docgenInfo,name:"useModifierIconComponents",path:"src/components/file-entry/BaseFileEntry-hooks.tsx#useModifierIconComponents"})}catch(__react_docgen_typescript_loader_error){}try{BaseFileEntry_hooks_useFileNameComponent.displayName="useFileNameComponent",BaseFileEntry_hooks_useFileNameComponent.__docgenInfo={description:"",displayName:"useFileNameComponent",props:{id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},name:{defaultValue:null,description:"",name:"name",required:!0,type:{name:"string"}},ext:{defaultValue:null,description:"",name:"ext",required:!1,type:{name:"string | undefined"}},isDir:{defaultValue:null,description:"",name:"isDir",required:!1,type:{name:"boolean | undefined"}},isHidden:{defaultValue:null,description:"",name:"isHidden",required:!1,type:{name:"boolean | undefined"}},isSymlink:{defaultValue:null,description:"",name:"isSymlink",required:!1,type:{name:"boolean | undefined"}},openable:{defaultValue:null,description:"",name:"openable",required:!1,type:{name:"boolean | undefined"}},selectable:{defaultValue:null,description:"",name:"selectable",required:!1,type:{name:"boolean | undefined"}},draggable:{defaultValue:null,description:"",name:"draggable",required:!1,type:{name:"boolean | undefined"}},droppable:{defaultValue:null,description:"",name:"droppable",required:!1,type:{name:"boolean | undefined"}},size:{defaultValue:null,description:"",name:"size",required:!1,type:{name:"number | undefined"}},modDate:{defaultValue:null,description:"",name:"modDate",required:!1,type:{name:"string | Date | undefined"}},childrenCount:{defaultValue:null,description:"",name:"childrenCount",required:!1,type:{name:"number | undefined"}},thumbnailUrl:{defaultValue:null,description:"",name:"thumbnailUrl",required:!1,type:{name:"string | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/file-entry/BaseFileEntry-hooks.tsx#useFileNameComponent"]={docgenInfo:BaseFileEntry_hooks_useFileNameComponent.__docgenInfo,name:"useFileNameComponent",path:"src/components/file-entry/BaseFileEntry-hooks.tsx#useFileNameComponent"})}catch(__react_docgen_typescript_loader_error){}function BaseFileEntry_slicedToArray(arr,i){return function BaseFileEntry_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function BaseFileEntry_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function BaseFileEntry_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return BaseFileEntry_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return BaseFileEntry_arrayLikeToArray(o,minLen)}(arr,i)||function BaseFileEntry_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function BaseFileEntry_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var BaseFileEntry=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var file=props.file,selected=props.selected,style=props.style,dndIsDragging=props.dndIsDragging,dndIsOver=props.dndIsOver,dndCanDrop=props.dndCanDrop,_useState2=BaseFileEntry_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(null),2),thumbnailUrl=_useState2[0],setThumbnailUrl=_useState2[1],_useState4=BaseFileEntry_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(!1),2),thumbnailLoading=_useState4[0];!function useThumbnailUrl(file,setThumbnailUrl,setThumbnailLoading){var thumbnailGenerator=Object(dist.useRecoilValue)(thumbnailGeneratorState);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){var loadingCancelled=!1;return file&&(thumbnailGenerator?(setThumbnailLoading(!0),Promise.resolve().then((function(){return thumbnailGenerator(file)})).then((function(thumbnailUrl){loadingCancelled||(setThumbnailLoading(!1),thumbnailUrl&&"string"==typeof thumbnailUrl&&setThumbnailUrl(thumbnailUrl))})).catch((function(error){loadingCancelled||setThumbnailLoading(!1),Logger.error('User-defined "thumbnailGenerator" handler threw an error: '.concat(error.message))}))):file.thumbnailUrl&&setThumbnailUrl(file.thumbnailUrl)),function(){loadingCancelled=!0}}),[file,setThumbnailUrl,setThumbnailLoading,thumbnailGenerator])}(file,setThumbnailUrl,_useState4[1]);var iconData=function useIconData(file){return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){if(!file)return{icon:ChonkyIconName.loading,colorCode:0};if(!0===file.isDir)return{icon:ChonkyIconName.folder,colorCode:0};var match=getIconTrie().getWithCheckpoints(file.name,".",!0);return match||{icon:ChonkyIconName.file,colorCode:32}}),[file])}(file),backgroundColor=thumbnailUrl?ColorsDark[iconData.colorCode]:ColorsLight[iconData.colorCode],iconSpin=thumbnailLoading||!file,icon=thumbnailLoading?ChonkyIconName.loading:iconData.icon,dndIcon=function useDndIcon(selected,isDragging,isOver,canDrop){return isOver?canDrop&&!selected?ChonkyIconName.dndCanDrop:ChonkyIconName.dndCannotDrop:isDragging?ChonkyIconName.dndDragging:null}(selected,dndIsDragging,dndIsOver,dndCanDrop),modifierIconComponents=BaseFileEntry_hooks_useModifierIconComponents(file),fileNameComponent=BaseFileEntry_hooks_useFileNameComponent(file),className=classnames_default()({"chonky-file-entry":!0,"chonky-file-entry-directory":file_helper_FileHelper.isDirectory(file),"chonky-file-entry-selected":selected,"chonky-file-entry-dragging":dndIsDragging,"chonky-file-entry-drop-hovered":dndIsOver&&dndCanDrop});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:className,style:style},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-entry-inside"},dndIcon&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-entry-dnd-indicator"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:dndIcon})),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-entry-preview"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-details"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-details-inside"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-details-item"},file_helper_FileHelper.getReadableDate(file)),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-details-item"},file_helper_FileHelper.getReadableFileSize(file)))),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-icon"},file_helper_FileHelper.isDirectory(file)&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-icon-children-count"},file_helper_FileHelper.getChildrenCount(file)),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-icon-inside"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:icon,spin:iconSpin}))),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-selection"}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(FileThumbnail,{thumbnailUrl:thumbnailUrl}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-background",style:{backgroundColor:backgroundColor}})),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-entry-description"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-entry-description-title",title:file?file.name:void 0},modifierIconComponents.length>0&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-file-entry-description-title-modifiers"},modifierIconComponents),fileNameComponent))))}));try{BaseFileEntry.displayName="BaseFileEntry",BaseFileEntry.__docgenInfo={description:"",displayName:"BaseFileEntry",props:{file:{defaultValue:null,description:"",name:"file",required:!0,type:{name:"Nullable<FileData>"}},displayIndex:{defaultValue:null,description:"",name:"displayIndex",required:!0,type:{name:"number"}},selected:{defaultValue:null,description:"",name:"selected",required:!0,type:{name:"boolean"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties | undefined"}},dndIsDragging:{defaultValue:null,description:"",name:"dndIsDragging",required:!1,type:{name:"boolean | undefined"}},dndIsOver:{defaultValue:null,description:"",name:"dndIsOver",required:!1,type:{name:"boolean | undefined"}},dndCanDrop:{defaultValue:null,description:"",name:"dndCanDrop",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/file-entry/BaseFileEntry.tsx#BaseFileEntry"]={docgenInfo:BaseFileEntry.__docgenInfo,name:"BaseFileEntry",path:"src/components/file-entry/BaseFileEntry.tsx#BaseFileEntry"})}catch(__react_docgen_typescript_loader_error){}var dispatchSpecialActionState=Object(dist.atom)({key:"dispatchSpecialActionState",default:constants_NOOP_FUNCTION}),ClickableFileEntry=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var file=props.file,fileClickHandlers=function useFileClickHandlers(file,displayIndex){var dispatchSpecialAction=Object(dist.useRecoilValue)(dispatchSpecialActionState),onMouseClick=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event,clickType){file&&dispatchSpecialAction({actionId:SpecialAction.MouseClickFile,clickType:clickType,file:file,fileDisplayIndex:displayIndex,altKey:event.altKey,ctrlKey:event.ctrlKey,shiftKey:event.shiftKey})}),[file,displayIndex,dispatchSpecialAction]),onKeyboardClick=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){file&&dispatchSpecialAction({actionId:SpecialAction.KeyboardClickFile,file:file,fileDisplayIndex:displayIndex,enterKey:event.enterKey,spaceKey:event.spaceKey,altKey:event.altKey,ctrlKey:event.ctrlKey,shiftKey:event.shiftKey})}),[file,displayIndex,dispatchSpecialAction]);return{onSingleClick:Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){return onMouseClick(event,"single")}),[onMouseClick]),onDoubleClick:Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){return onMouseClick(event,"double")}),[onMouseClick]),onKeyboardClick:onKeyboardClick}}(file,props.displayIndex),wrapperProps=Object.assign({wrapperTag:"div",passthroughProps:{className:"chonky-file-entry-clickable-wrapper chonky-fill-parent"}},file_helper_FileHelper.isClickable(file)?fileClickHandlers:void 0);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ClickableWrapper_ClickableWrapper,wrapperProps,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(BaseFileEntry,props))}));try{ClickableFileEntry.displayName="ClickableFileEntry",ClickableFileEntry.__docgenInfo={description:"",displayName:"ClickableFileEntry",props:{file:{defaultValue:null,description:"",name:"file",required:!0,type:{name:"Nullable<FileData>"}},displayIndex:{defaultValue:null,description:"",name:"displayIndex",required:!0,type:{name:"number"}},selected:{defaultValue:null,description:"",name:"selected",required:!0,type:{name:"boolean"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties | undefined"}},dndIsDragging:{defaultValue:null,description:"",name:"dndIsDragging",required:!1,type:{name:"boolean | undefined"}},dndIsOver:{defaultValue:null,description:"",name:"dndIsOver",required:!1,type:{name:"boolean | undefined"}},dndCanDrop:{defaultValue:null,description:"",name:"dndCanDrop",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/file-entry/ClickableFileEntry.tsx#ClickableFileEntry"]={docgenInfo:ClickableFileEntry.__docgenInfo,name:"ClickableFileEntry",path:"src/components/file-entry/ClickableFileEntry.tsx#ClickableFileEntry"})}catch(__react_docgen_typescript_loader_error){}var useDrag=__webpack_require__(771),useDrop=__webpack_require__(772),getEmptyImage=__webpack_require__(284);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function DnDFileEntry_slicedToArray(arr,i){return function DnDFileEntry_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function DnDFileEntry_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function DnDFileEntry_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return DnDFileEntry_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return DnDFileEntry_arrayLikeToArray(o,minLen)}(arr,i)||function DnDFileEntry_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function DnDFileEntry_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var DnDFileEntry=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var file=props.file,dispatchSpecialAction=Object(dist.useRecoilValue)(dispatchSpecialActionState),canDrag=file_helper_FileHelper.isDraggable(file),onDragStart=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(){file_helper_FileHelper.isDraggable(file)&&dispatchSpecialAction({actionId:SpecialAction.DragNDropStart,dragSource:file})}),[dispatchSpecialAction,file]),onDragEnd=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(item,monitor){var dropResult=monitor.getDropResult();file_helper_FileHelper.isDraggable(file)&&dropResult&&dropResult.dropTarget&&dispatchSpecialAction({actionId:SpecialAction.DragNDropEnd,dragSource:file,dropTarget:dropResult.dropTarget,dropEffect:dropResult.dropEffect})}),[dispatchSpecialAction,file]),onDrop=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(item,monitor){if(monitor.canDrop())return{dropTarget:file}}),[file]),canDrop=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(item){var isSameFile=file&&item.file&&file.id===item.file.id;return file_helper_FileHelper.isDroppable(file)&&!isSameFile}),[file]),_useDrag2=DnDFileEntry_slicedToArray(Object(useDrag.a)({item:{type:"chonky-file-entry",file:file},canDrag:canDrag,begin:onDragStart,end:onDragEnd,collect:function collect(monitor){return{isDragging:monitor.isDragging()}}}),3),dndIsDragging=_useDrag2[0].isDragging,drag=_useDrag2[1],preview=_useDrag2[2],_useDrop2=DnDFileEntry_slicedToArray(Object(useDrop.a)({accept:"chonky-file-entry",drop:onDrop,canDrop:canDrop,collect:function collect(monitor){return{isOver:monitor.isOver(),canDrop:monitor.canDrop()}}}),2),_useDrop2$=_useDrop2[0],dndIsOver=_useDrop2$.isOver,dndCanDrop=_useDrop2$.canDrop,drop=_useDrop2[1];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){preview(Object(getEmptyImage.a)(),{captureDraggingState:!0})}),[preview]),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{ref:drop,className:"chonky-file-entry-droppable-wrapper chonky-fill-parent"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{ref:file_helper_FileHelper.isDraggable(file)?drag:null,className:"chonky-file-entry-draggable-wrapper chonky-fill-parent"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ClickableFileEntry,_extends({},props,{dndIsDragging:dndIsDragging,dndIsOver:dndIsOver,dndCanDrop:dndCanDrop}))))}));try{DnDFileEntry.displayName="DnDFileEntry",DnDFileEntry.__docgenInfo={description:"",displayName:"DnDFileEntry",props:{file:{defaultValue:null,description:"",name:"file",required:!0,type:{name:"Nullable<FileData>"}},displayIndex:{defaultValue:null,description:"",name:"displayIndex",required:!0,type:{name:"number"}},selected:{defaultValue:null,description:"",name:"selected",required:!0,type:{name:"boolean"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties | undefined"}},dndIsDragging:{defaultValue:null,description:"",name:"dndIsDragging",required:!1,type:{name:"boolean | undefined"}},dndIsOver:{defaultValue:null,description:"",name:"dndIsOver",required:!1,type:{name:"boolean | undefined"}},dndCanDrop:{defaultValue:null,description:"",name:"dndCanDrop",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/file-entry/DnDFileEntry.tsx#DnDFileEntry"]={docgenInfo:DnDFileEntry.__docgenInfo,name:"DnDFileEntry",path:"src/components/file-entry/DnDFileEntry.tsx#DnDFileEntry"})}catch(__react_docgen_typescript_loader_error){}var SmartFileEntry=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var fileId=props.fileId,displayIndex=props.displayIndex,entryProps={file:Object(dist.useRecoilValue)(fileDataState(fileId)),displayIndex:displayIndex,selected:Object(dist.useRecoilValue)(fileSelectedState(fileId))};return Object(dist.useRecoilValue)(enableDragAndDropState)?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(DnDFileEntry,entryProps):delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ClickableFileEntry,entryProps)}));try{SmartFileEntry.displayName="SmartFileEntry",SmartFileEntry.__docgenInfo={description:"",displayName:"SmartFileEntry",props:{fileId:{defaultValue:null,description:"",name:"fileId",required:!0,type:{name:"Nullable<string>"}},displayIndex:{defaultValue:null,description:"",name:"displayIndex",required:!0,type:{name:"number"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/file-entry/SmartFileEntry.tsx#SmartFileEntry"]={docgenInfo:SmartFileEntry.__docgenInfo,name:"SmartFileEntry",path:"src/components/file-entry/SmartFileEntry.tsx#SmartFileEntry"})}catch(__react_docgen_typescript_loader_error){}var DefaultEntrySize={width:165,height:130},FileList_virtualization_useEntryRenderer=function useEntryRenderer(files){return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(virtualKey,index,style,parent,gutterSize,lastRow,lastColumn){if("number"==typeof gutterSize&&(lastColumn||(style.width=style.width-gutterSize),style.height=style.height-gutterSize),lastRow&&(style.height=style.height-1),lastColumn&&(style.width=style.width-1),index>=files.length)return null;var file=files[index],key=file?file.id:"loading-file-".concat(virtualKey);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{key:key,className:"chonky-virtualization-wrapper",style:style},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(SmartFileEntry,{fileId:file?file.id:null,displayIndex:index}))}),[files])},_noContentRenderer=function noContentRenderer(height){var placeholderProps={className:classnames_default()({"chonky-file-list-notification":!0,"chonky-file-list-notification-empty":!0})};return"number"==typeof height&&(placeholderProps.style={height:height}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",placeholderProps,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-list-notification-content"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:ChonkyIconName.folderOpen}),"  Nothing to show"))};_noContentRenderer.displayName="noContentRenderer";var FileList_virtualization_useGridRenderer=function useGridRenderer(files,entrySize,entryRenderer,thumbsGridRef,fillParentContainer){return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(_ref){var width=_ref.width,height=_ref.height,isMobile=function isMobileDevice(){return void 0!==window.orientation||-1!==navigator.userAgent.indexOf("IEMobile")}(),gutter=isMobile?5:8,columnCountFloat=(width+gutter-(!fillParentContainer||isMobile?0:16))/(entrySize.width+gutter),columnCount=Math.max(1,Math.floor(columnCountFloat)),rowCount=Math.ceil(files.length/columnCount);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(Grid.Grid,{style:{minHeight:entrySize.height+10},ref:thumbsGridRef,cellRenderer:function cellRenderer(data){var index=data.rowIndex*columnCount+data.columnIndex;return entryRenderer(data.key,index,Object.assign({},data.style),data.parent,gutter,data.rowIndex===rowCount-1,data.columnIndex===columnCount-1)},noContentRenderer:function noContentRenderer(){return _noContentRenderer(entrySize.height)},rowCount:rowCount,columnCount:columnCount,columnWidth:function columnWidth(_ref2){return function getColWidth(index,columnCount,entrySize,gutterSize){return index===columnCount-1?entrySize.width:entrySize.width+gutterSize}(_ref2.index,columnCount,entrySize,gutter)},rowHeight:function rowHeight(_ref3){_ref3.index;return function getRowHeight(index,rowCount,entrySize,gutterSize){return entrySize.height+gutterSize}(0,0,entrySize,gutter)},overscanRowCount:2,width:width,containerStyle:{minHeight:50},height:"number"==typeof height?height:500,autoHeight:!fillParentContainer,tabIndex:null})}),[files,entrySize,entryRenderer,thumbsGridRef,fillParentContainer])};try{FileList_virtualization_useEntryRenderer.displayName="useEntryRenderer",FileList_virtualization_useEntryRenderer.__docgenInfo={description:"",displayName:"useEntryRenderer",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileList-virtualization.tsx#useEntryRenderer"]={docgenInfo:FileList_virtualization_useEntryRenderer.__docgenInfo,name:"useEntryRenderer",path:"src/components/external/FileList-virtualization.tsx#useEntryRenderer"})}catch(__react_docgen_typescript_loader_error){}try{noContentRenderer.displayName="noContentRenderer",noContentRenderer.__docgenInfo={description:"",displayName:"noContentRenderer",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileList-virtualization.tsx#noContentRenderer"]={docgenInfo:noContentRenderer.__docgenInfo,name:"noContentRenderer",path:"src/components/external/FileList-virtualization.tsx#noContentRenderer"})}catch(__react_docgen_typescript_loader_error){}var SortOrder,fileEntrySizeState=Object(dist.atom)({key:"fileEntrySizeState",default:DefaultEntrySize}),optionMapState=Object(dist.atom)({key:"optionMapState",default:{}}),optionState=Object(dist.selectorFamily)({key:"optionEnabledState",get:function get(optionId){return function(_ref){return(0,_ref.get)(optionMapState)[optionId]}}}),searchBarEnabledState=Object(dist.atom)({key:"searchBarEnabledState",default:!1}),searchBarVisibleState=Object(dist.atom)({key:"searchBarVisibleState",default:!1}),searchFilterState=Object(dist.atom)({key:"searchFilterState",default:""});!function(SortOrder){SortOrder.Asc="asc",SortOrder.Desc="desc"}(SortOrder||(SortOrder={}));var sortConfigState=Object(dist.atom)({key:"sortConfigState",default:{fileActionId:ChonkyActions.SortFilesByName.id,sortKeySelector:ChonkyActions.SortFilesByName.sortKeySelector,order:SortOrder.Asc}});function hooks_helpers_slicedToArray(arr,i){return function hooks_helpers_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function hooks_helpers_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function hooks_helpers_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return hooks_helpers_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return hooks_helpers_arrayLikeToArray(o,minLen)}(arr,i)||function hooks_helpers_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function hooks_helpers_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var hooks_helpers_useInstanceVariable=function useInstanceVariable(value){var ref=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useRef)(value);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){ref.current=value}),[ref,value]),ref},hooks_helpers_useClickListener=function useClickListener(params){var onClick=params.onClick,onInsideClick=params.onInsideClick,onOutsideClick=params.onOutsideClick,triggerComponentRef=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useRef)(null),clickListener=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){!triggerComponentRef.current||triggerComponentRef.current.contains(event.target)?onInsideClick&&onInsideClick(event):onOutsideClick&&onOutsideClick(event),onClick&&onClick(event)}),[onClick,onInsideClick,onOutsideClick,triggerComponentRef]);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){return document.addEventListener("mousedown",clickListener,!1),function(){document.removeEventListener("mousedown",clickListener,!1)}}),[clickListener]),triggerComponentRef},hooks_helpers_useRefCallbackWithErrorHandling=function useRefCallbackWithErrorHandling(callbackFunc,displayName){var callbackFuncRef=hooks_helpers_useInstanceVariable(callbackFunc);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(){try{callbackFuncRef.current.apply(callbackFuncRef,arguments)}catch(error){Logger.error("An error occurred inside ".concat(displayName,":"),error)}}),[callbackFuncRef,displayName])};function file_actions_createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=function file_actions_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return file_actions_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return file_actions_arrayLikeToArray(o,minLen)}(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function file_actions_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var file_actions_useFileActions=function useFileActions(fileActions,externalFileActonHandler){var setFileActions=Object(dist.useSetRecoilState)(fileActionsState),setFileActionMap=Object(dist.useSetRecoilState)(fileActionMapState);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){var _step,fileActionMap={},_iterator=file_actions_createForOfIteratorHelper(fileActions);try{for(_iterator.s();!(_step=_iterator.n()).done;){var action=_step.value;fileActionMap[action.id]=action}}catch(err){_iterator.e(err)}finally{_iterator.f()}setFileActions(fileActions),setFileActionMap(fileActionMap)}),[fileActions,setFileActions,setFileActionMap]);var internalFileActionDispatcher=function useInternalFileActionDispatcher(externalFileActonHandler){var externalFileActonHandlerRef=hooks_helpers_useInstanceVariable(externalFileActonHandler),fileActionMapRef=hooks_helpers_useInstanceVariable(Object(dist.useRecoilValue)(fileActionMapState));return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(actionData){Logger.debug("FILE ACTION DISPATCH:",actionData);var actionId=actionData.actionId,action=fileActionMapRef.current[actionId];action?function isFunction(value){return!!(value&&value.constructor&&value.call&&value.apply)}(externalFileActonHandlerRef.current)&&Promise.resolve(externalFileActonHandlerRef.current(action,actionData)).catch((function(error){return Logger.error('User-defined "onAction" handler threw an error: '.concat(error.message))})):Logger.error('Internal components dispatched a "'.concat(actionId,'" file action, ')+"but such action was not registered.")}),[externalFileActonHandlerRef,fileActionMapRef])}(externalFileActonHandler),safeInternalFileActionDispatcher=hooks_helpers_useRefCallbackWithErrorHandling(internalFileActionDispatcher,"the internal file action requester"),setDispatchFileAction=Object(dist.useSetRecoilState)(dispatchFileActionState);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){return setDispatchFileAction((function(){return safeInternalFileActionDispatcher}))}),[safeInternalFileActionDispatcher,setDispatchFileAction]);var internalFileActionRequester=function useInternalFileActionRequester(){var fileActionMapRef=hooks_helpers_useInstanceVariable(Object(dist.useRecoilValue)(fileActionMapState)),setSortConfigRef=hooks_helpers_useInstanceVariable(Object(dist.useSetRecoilState)(sortConfigState)),setOptionMapRef=hooks_helpers_useInstanceVariable(Object(dist.useSetRecoilState)(optionMapState)),dispatchFileActionRef=hooks_helpers_useInstanceVariable(Object(dist.useRecoilValue)(dispatchFileActionState)),dispatchSpecialActionRef=hooks_helpers_useInstanceVariable(Object(dist.useRecoilValue)(dispatchSpecialActionState)),filesRef=hooks_helpers_useInstanceVariable(Object(dist.useRecoilValue)(filesState)),selectionRef=hooks_helpers_useInstanceVariable(Object(dist.useRecoilValue)(selectionState));return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(fileActionId){Logger.debug("FILE ACTION REQUEST:",fileActionId);var action=fileActionMapRef.current[fileActionId];if(action){var selectedFilesForAction=action.requiresSelection?selection_SelectionHelper.getSelectedFiles(filesRef.current,selectionRef.current,action.fileFilter):void 0;if(!action.requiresSelection||selectedFilesForAction&&0!==selectedFilesForAction.length){var actionData={actionId:action.id,target:void 0,files:selectedFilesForAction};dispatchFileActionRef.current(actionData);var sortKeySelector=action.sortKeySelector;sortKeySelector&&setSortConfigRef.current((function(sortConfig){var order=SortOrder.Asc;return sortConfig.fileActionId===action.id&&(order=sortConfig.order===SortOrder.Asc?SortOrder.Desc:SortOrder.Asc),{fileActionId:action.id,sortKeySelector:sortKeySelector,order:order}}));var option=action.option;option&&setOptionMapRef.current((function(optionMap){var newOptionMap=Object.assign({},optionMap);return newOptionMap[option.id]=!optionMap[option.id],newOptionMap}));var specialActionId=action.specialActionToDispatch;if(specialActionId)switch(specialActionId){case SpecialAction.OpenParentFolder:case SpecialAction.ToggleSearchBar:case SpecialAction.SelectAllFiles:case SpecialAction.ClearSelection:dispatchSpecialActionRef.current({actionId:specialActionId});break;default:Logger.warn('File action "'.concat(action.id,'" tried to dispatch a ')+'special action "'.concat(specialActionId,'", but that ')+"special action was not marked as simple. File actions can only trigger simple special actions.")}}else Logger.warn('Internal components requested the "'.concat(fileActionId,'" file ')+"action, but the selection for this action was empty. This might a bug in the code of the presentational components.")}else Logger.warn('Internal components requested the "'.concat(fileActionId,'" file ')+"action, but such action was not registered.")}),[fileActionMapRef,setSortConfigRef,setOptionMapRef,dispatchFileActionRef,dispatchSpecialActionRef,filesRef,selectionRef])}(),safeInternalFileActionRequester=hooks_helpers_useRefCallbackWithErrorHandling(internalFileActionRequester,"the internal file action requester"),setRequestFileAction=Object(dist.useSetRecoilState)(requestFileActionState);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){return setRequestFileAction((function(){return safeInternalFileActionRequester}))}),[safeInternalFileActionRequester,setRequestFileAction]),{internalFileActionDispatcher:internalFileActionDispatcher,internalFileActionRequester:internalFileActionRequester}},file_actions_useFileActionTrigger=function useFileActionTrigger(fileActionId){var requestFileAction=Object(dist.useRecoilValue)(requestFileActionState);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(){return requestFileAction(fileActionId)}),[fileActionId,requestFileAction])},file_actions_useFileActionProps=function useFileActionProps(fileActionId){var parentFolder=Object(dist.useRecoilValue)(parentFolderState),sortConfig=Object(dist.useRecoilValue)(sortConfigState),optionMap=Object(dist.useRecoilValue)(optionMapState),searchBarVisible=Object(dist.useRecoilValue)(searchBarVisibleState),action=Object(dist.useRecoilValue)(fileActionDataState(fileActionId)),actionSelectionEmpty=0===Object(dist.useRecoilValue)(fileActionSelectedFilesCountState(fileActionId));return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var _action$toolbarButton,_action$toolbarButton2;if(!action)return{icon:null,active:!1,disabled:!0};var icon=null!==(_action$toolbarButton=null===(_action$toolbarButton2=action.toolbarButton)||void 0===_action$toolbarButton2?void 0:_action$toolbarButton2.icon)&&void 0!==_action$toolbarButton?_action$toolbarButton:null;action.sortKeySelector?icon=sortConfig.fileActionId===action.id?sortConfig.order===SortOrder.Asc?ChonkyIconName.sortAsc:ChonkyIconName.sortDesc:ChonkyIconName.circle:action.option&&(icon=optionMap[action.option.id]?ChonkyIconName.checkActive:ChonkyIconName.checkInactive);var isSearchButtonAndSearchVisible=action.id===ChonkyActions.ToggleSearch.id&&searchBarVisible,isSortButtonAndCurrentSort=action.id===sortConfig.fileActionId,isOptionAndEnabled=!!action.option&&!!optionMap[action.option.id],active=isSearchButtonAndSearchVisible||isSortButtonAndCurrentSort||isOptionAndEnabled,disabled=!!action.requiresSelection&&actionSelectionEmpty;return action.id===ChonkyActions.OpenParentFolder.id&&(disabled=disabled||!file_helper_FileHelper.isOpenable(parentFolder)),{icon:icon,active:active,disabled:disabled}}),[action,sortConfig,optionMap,searchBarVisible,parentFolder,actionSelectionEmpty])};function options_createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=function options_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return options_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return options_arrayLikeToArray(o,minLen)}(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function options_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var FuzzySearch=__webpack_require__(356),sort_es=__webpack_require__(353);function sort_toConsumableArray(arr){return function sort_arrayWithoutHoles(arr){if(Array.isArray(arr))return sort_arrayLikeToArray(arr)}(arr)||function sort_iterableToArray(iter){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(iter))return Array.from(iter)}(arr)||function sort_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return sort_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return sort_arrayLikeToArray(o,minLen)}(arr)||function sort_nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function sort_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function special_actions_defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var special_actions_useSpecialFileActionHandlerMap=function useSpecialFileActionHandlerMap(selectionUtil,selectionModifiers){var _recoilFiles=Object(dist.useRecoilValue)(filesState),filesRef=hooks_helpers_useInstanceVariable(_recoilFiles),parentFolderRef=hooks_helpers_useInstanceVariable(Object(dist.useRecoilValue)(parentFolderState)),selectedFilesRef=hooks_helpers_useInstanceVariable(Object(dist.useRecoilValue)(selectedFilesState)),dispatchFileActionRef=hooks_helpers_useInstanceVariable(Object(dist.useRecoilValue)(dispatchFileActionState)),setSearchBarVisible=Object(dist.useSetRecoilState)(searchBarVisibleState),lastClickDisplayIndexRef=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useRef)(null);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){lastClickDisplayIndexRef.current=null}),[_recoilFiles]),Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var _ref2;return special_actions_defineProperty(_ref2={},SpecialAction.MouseClickFile,(function(data){if("double"===data.clickType)file_helper_FileHelper.isOpenable(data.file)&&dispatchFileActionRef.current({actionId:ChonkyActions.OpenFiles.id,target:data.file,files:[data.file]});else if(file_helper_FileHelper.isSelectable(data.file))if(data.ctrlKey)selectionModifiers.toggleSelection(data.file.id,!1),lastClickDisplayIndexRef.current=data.fileDisplayIndex;else if(data.shiftKey)if("number"==typeof lastClickDisplayIndexRef.current){var rangeStart=lastClickDisplayIndexRef.current,rangeEnd=data.fileDisplayIndex;if(rangeStart>rangeEnd){var _ref=[rangeEnd,rangeStart];rangeStart=_ref[0],rangeEnd=_ref[1]}var fileIds=filesRef.current.slice(rangeStart,rangeEnd+1).filter((function(file){return file_helper_FileHelper.isSelectable(file)})).map((function(file){return file.id}));selectionModifiers.selectFiles(fileIds,!0)}else selectionModifiers.toggleSelection(data.file.id,!1),lastClickDisplayIndexRef.current=data.fileDisplayIndex;else selectionModifiers.toggleSelection(data.file.id,!0),lastClickDisplayIndexRef.current=data.fileDisplayIndex;else data.ctrlKey||selectionModifiers.clearSelection(),lastClickDisplayIndexRef.current=data.fileDisplayIndex})),special_actions_defineProperty(_ref2,SpecialAction.KeyboardClickFile,(function(data){lastClickDisplayIndexRef.current=data.fileDisplayIndex,data.enterKey?0===selectedFilesRef.current.length&&dispatchFileActionRef.current({actionId:ChonkyActions.OpenFiles.id,target:data.file,files:[data.file]}):data.spaceKey&&file_helper_FileHelper.isSelectable(data.file)&&selectionModifiers.toggleSelection(data.file.id,data.ctrlKey)})),special_actions_defineProperty(_ref2,SpecialAction.OpenParentFolder,(function(){file_helper_FileHelper.isOpenable(parentFolderRef.current)?dispatchFileActionRef.current({actionId:ChonkyActions.OpenFiles.id,target:parentFolderRef.current,files:[parentFolderRef.current]}):Logger.warn('Special action "'.concat(SpecialAction.OpenParentFolder,'" was ')+"dispatched even though the parent folder is not openable. This indicates a bug in presentation components.")})),special_actions_defineProperty(_ref2,SpecialAction.OpenFolderChainFolder,(function(data){dispatchFileActionRef.current({actionId:ChonkyActions.OpenFiles.id,target:data.file,files:[data.file]})})),special_actions_defineProperty(_ref2,SpecialAction.ToggleSearchBar,(function(){setSearchBarVisible((function(visible){return!visible}))})),special_actions_defineProperty(_ref2,SpecialAction.SelectAllFiles,(function(){var fileIds=filesRef.current.filter((function(file){return file_helper_FileHelper.isSelectable(file)})).map((function(file){return file.id}));selectionModifiers.selectFiles(fileIds,!0)})),special_actions_defineProperty(_ref2,SpecialAction.ClearSelection,(function(){selectionModifiers.clearSelection()})),special_actions_defineProperty(_ref2,SpecialAction.DragNDropStart,(function(data){var file=data.dragSource;selectionUtil.isSelected(file)||(selectionModifiers.clearSelection(),file_helper_FileHelper.isSelectable(file)&&selectionModifiers.selectFiles([file.id]))})),special_actions_defineProperty(_ref2,SpecialAction.DragNDropEnd,(function(data){if(!selectionUtil.isSelected(data.dropTarget)){var selectedFiles=selectionUtil.getSelectedFiles(file_helper_FileHelper.isDraggable),droppedFiles=selectedFiles.length>0?selectedFiles:[data.dragSource];dispatchFileActionRef.current({actionId:"copy"===data.dropEffect?ChonkyActions.DuplicateFilesTo.id:ChonkyActions.MoveFilesTo.id,target:data.dropTarget,files:droppedFiles})}})),_ref2}),[selectionUtil,selectionModifiers,filesRef,parentFolderRef,selectedFilesRef,dispatchFileActionRef,setSearchBarVisible])};function ChonkyBusinessLogic_slicedToArray(arr,i){return function ChonkyBusinessLogic_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function ChonkyBusinessLogic_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function ChonkyBusinessLogic_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return ChonkyBusinessLogic_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ChonkyBusinessLogic_arrayLikeToArray(o,minLen)}(arr,i)||function ChonkyBusinessLogic_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ChonkyBusinessLogic_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var ChonkyBusinessLogic=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var files=props.files,folderChain=props.folderChain?props.folderChain:null,fileActions=props.fileActions?props.fileActions:[],onFileAction=props.onFileAction?props.onFileAction:null,thumbnailGenerator=props.thumbnailGenerator?props.thumbnailGenerator:null,doubleClickDelay="number"==typeof props.doubleClickDelay?props.doubleClickDelay:300,disableSelection=!!props.disableSelection,enableDragAndDrop=!!props.enableDragAndDrop,sortedFiles=function useFileSorting(files){var sortConfig=Object(dist.useRecoilValue)(sortConfigState),showFolderFirstState=Object(dist.useRecoilValue)(optionState(ChonkyActions.ToggleShowFoldersFirst.option.id));return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var sortFunctions=[];return showFolderFirstState&&sortFunctions.push({desc:file_helper_FileHelper.isDirectory}),sortConfig.order===SortOrder.Asc?sortFunctions.push({asc:sortConfig.sortKeySelector}):sortFunctions.push({desc:sortConfig.sortKeySelector}),sortFunctions.push({asc:ChonkyActions.SortFilesByName.sortKeySelector}),Object(sort_es.a)(sort_toConsumableArray(files)).by(sortFunctions)}),[files,sortConfig,showFolderFirstState])}(files),_useSelection=function useSelection(files,disableSelection){var _useState2=_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)({}),2),selection=_useState2[0],setSelection=_useState2[1],selectionSize=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return selection_SelectionHelper.getSelectionSize(files,selection)}),[files,selection]),selectionModifiers=selection_useSelectionModifiers(disableSelection,setSelection),selectionUtilRef=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useRef)(new UpdateableSelectionUtil(files,selection));return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){selectionUtilRef.current.update(files,selection)}),[files,selection]),{selection:selection,selectionSize:selectionSize,selectionUtilRef:selectionUtilRef,selectionModifiers:selectionModifiers}}(sortedFiles,disableSelection),selection=_useSelection.selection,selectionUtilRef=_useSelection.selectionUtilRef,selectionModifiers=_useSelection.selectionModifiers,setRecoilSelectionModifiers=Object(dist.useSetRecoilState)(selectionModifiersState);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){setRecoilSelectionModifiers(selectionModifiers)}),[selectionModifiers,setRecoilSelectionModifiers]),file_actions_useFileActions(fileActions,onFileAction);var searchFilteredFiles=function useFileSearch(files){var searchFilter=Object(dist.useRecoilValue)(searchFilterState);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return searchFilter?new FuzzySearch.a(files.filter((function(f){return!!f})),["name"],{caseSensitive:!1,sort:!0}).search(searchFilter):files}),[files,searchFilter])}(function useOptions(files){var fileActions=Object(dist.useRecoilValue)(fileActionsState),setOptionMap=Object(dist.useSetRecoilState)(optionMapState);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){var _step,optionMap={},_iterator=options_createForOfIteratorHelper(fileActions);try{for(_iterator.s();!(_step=_iterator.n()).done;){var action=_step.value;action.option&&(optionMap[action.option.id]=action.option.defaultValue)}}catch(err){_iterator.e(err)}finally{_iterator.f()}setOptionMap(optionMap)}),[fileActions,setOptionMap]);var showHiddenFileState=Object(dist.useRecoilValue)(optionState(ChonkyActions.ToggleHiddenFiles.option.id));return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return!1!==showHiddenFileState?files:files.filter((function(file){return!file||!file.isHidden}))}),[files,showHiddenFileState])}(sortedFiles));!function useSpecialActionDispatcher(files,selection,selectionUtil,selectionModifiers){var specialActionHandlerMap=special_actions_useSpecialFileActionHandlerMap(selectionUtil,selectionModifiers),dispatchSpecialAction=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(actionData){Logger.debug("SPECIAL ACTION REQUEST:",actionData);var actionId=actionData.actionId,handler=specialActionHandlerMap[actionId];if(handler)try{handler(actionData)}catch(error){Logger.error('Handler for special action "'.concat(actionId,'" threw an error.'),error)}else Logger.error('Internal components dispatched a "'.concat(actionId,'" special action, ')+"but no internal handler is available to process it.")}),[specialActionHandlerMap]),setRecoilDispatchSpecialAction=Object(dist.useSetRecoilState)(dispatchSpecialActionState);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){setRecoilDispatchSpecialAction((function(){return dispatchSpecialAction}))}),[dispatchSpecialAction,setRecoilDispatchSpecialAction])}(0,0,selectionUtilRef.current,selectionModifiers);var setRecoilFiles=Object(dist.useSetRecoilState)(filesState);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){setRecoilFiles(searchFilteredFiles)}),[searchFilteredFiles,setRecoilFiles]);var setFolderChain=Object(dist.useSetRecoilState)(folderChainState),setParentFolder=Object(dist.useSetRecoilState)(parentFolderState);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){var parentFolder=folderChain&&folderChain.length>1?folderChain[(null==folderChain?void 0:folderChain.length)-2]:null;setFolderChain(folderChain),setParentFolder(parentFolder)}),[folderChain,setFolderChain,setParentFolder]);var setRecoilSelection=Object(dist.useSetRecoilState)(selectionState);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){setRecoilSelection(selection)}),[selection,setRecoilSelection]);var setRecoilThumbnailGenerator=Object(dist.useSetRecoilState)(thumbnailGeneratorState);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){setRecoilThumbnailGenerator((function(){return thumbnailGenerator}))}),[thumbnailGenerator,setRecoilThumbnailGenerator]);var setRecoilDoubleClickDelay=Object(dist.useSetRecoilState)(doubleClickDelayState);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){setRecoilDoubleClickDelay(doubleClickDelay)}),[doubleClickDelay,setRecoilDoubleClickDelay]);ChonkyBusinessLogic_slicedToArray(Object(dist.useRecoilState)(fileEntrySizeState),1);var setRecoilEnableDragAndDrop=Object(dist.useSetRecoilState)(enableDragAndDropState);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){setRecoilEnableDragAndDrop(enableDragAndDrop)}),[enableDragAndDrop,setRecoilEnableDragAndDrop]),null}));try{ChonkyBusinessLogic.displayName="ChonkyBusinessLogic",ChonkyBusinessLogic.__docgenInfo={description:"",displayName:"ChonkyBusinessLogic",props:{files:{defaultValue:null,description:"List of files that will be displayed in the main container. The provided value\n**must** be an array, where each element is either `null` or an object that\nsatisfies the `FileData` type. If an element is `null`, a loading placeholder\nwill be displayed in its place.",name:"files",required:!0,type:{name:"FileArray"}},folderChain:{defaultValue:null,description:"The current folder hierarchy. This should be an array of `files`, every\nelement should either be `null` or an object of `FileData` type. The first\nelement should represent the top-level directory, and the last element\nshould be the current folder.",name:"folderChain",required:!1,type:{name:"FileArray | null | undefined"}},fileActions:{defaultValue:null,description:"",name:"fileActions",required:!1,type:{name:"FileAction[] | undefined"}},onFileAction:{defaultValue:null,description:"",name:"onFileAction",required:!1,type:{name:"FileActionHandler | undefined"}},thumbnailGenerator:{defaultValue:null,description:"The function that determines the thumbnail image URL for a file. It gets a file object as the input, and\nshould return a `string` or `null`. It can also return a promise that resolves into a `string` or `null`.\n[See relevant section](#section-displaying-file-thumbnails).",name:"thumbnailGenerator",required:!1,type:{name:"ThumbnailGenerator | undefined"}},doubleClickDelay:{defaultValue:null,description:"Maximum delay between the two clicks in a double click, in milliseconds.",name:"doubleClickDelay",required:!1,type:{name:"number | undefined"}},disableSelection:{defaultValue:null,description:"The flag that completely disables file selection functionality. If any handlers depend on file selections, their\ninput will look like no files are selected.",name:"disableSelection",required:!1,type:{name:"boolean | undefined"}},disableDefaultFileActions:{defaultValue:null,description:"",name:"disableDefaultFileActions",required:!1,type:{name:"boolean | undefined"}},enableDragAndDrop:{defaultValue:null,description:"The flag that completely disables drag & drop functionality.\n[See relevant section](#section-managing-file-selection).",name:"enableDragAndDrop",required:!1,type:{name:"boolean | undefined"}},fillParentContainer:{defaultValue:null,description:"The flag that determines whether Chonky should fill the height parent container. When set to `true`, the maximum\nheight of the file browser will be limited to the height of the parent container, and scrollbar will be shown\nwhen necessary. When set to `false`, file browser height will be extended to display all files at the same time.",name:"fillParentContainer",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/ChonkyBusinessLogic.tsx#ChonkyBusinessLogic"]={docgenInfo:ChonkyBusinessLogic.__docgenInfo,name:"ChonkyBusinessLogic",path:"src/components/internal/ChonkyBusinessLogic.tsx#ChonkyBusinessLogic"})}catch(__react_docgen_typescript_loader_error){}var useDragLayer=__webpack_require__(770),layerStyles={position:"fixed",pointerEvents:"none",zIndex:100,left:0,top:0,width:"100%",height:"100%"},getItemStyles=function getItemStyles(initialCursorOffset,initialFileOffset,currentFileOffset){if(!initialCursorOffset||!initialFileOffset||!currentFileOffset)return{display:"none"};var x=initialCursorOffset.x+(currentFileOffset.x-initialFileOffset.x),y=initialCursorOffset.y+(currentFileOffset.y-initialFileOffset.y),transform="translate(".concat(x,"px, ").concat(y,"px)");return{transform:transform,WebkitTransform:transform}},DnDFileListDragLayer_DnDFileListDragLayer=function DnDFileListDragLayer(){var selectionSize=Object(dist.useRecoilValue)(selectionSizeState),_useDragLayer=Object(useDragLayer.a)((function(monitor){return{item:monitor.getItem(),itemType:monitor.getItemType(),initialCursorOffset:monitor.getInitialClientOffset(),initialFileOffset:monitor.getInitialSourceClientOffset(),currentFileOffset:monitor.getSourceClientOffset(),isDragging:monitor.isDragging()}})),itemType=_useDragLayer.itemType,item=_useDragLayer.item,initialCursorOffset=_useDragLayer.initialCursorOffset,initialFileOffset=_useDragLayer.initialFileOffset,currentFileOffset=_useDragLayer.currentFileOffset;return _useDragLayer.isDragging?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:layerStyles},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:getItemStyles(initialCursorOffset,initialFileOffset,currentFileOffset)},function renderItem(){if(item.file&&"chonky-file-entry"===itemType)return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-drag-preview"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("b",null,item.file.name),selectionSize>1&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.Fragment,null," and ",delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("strong",null,selectionSize-1," other file",selectionSize-1!=1?"s":"")))}())):null};DnDFileListDragLayer_DnDFileListDragLayer.displayName="DnDFileListDragLayer";try{DnDFileListDragLayer_DnDFileListDragLayer.displayName="DnDFileListDragLayer",DnDFileListDragLayer_DnDFileListDragLayer.__docgenInfo={description:"",displayName:"DnDFileListDragLayer",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/file-entry/DnDFileListDragLayer.tsx#DnDFileListDragLayer"]={docgenInfo:DnDFileListDragLayer_DnDFileListDragLayer.__docgenInfo,name:"DnDFileListDragLayer",path:"src/components/file-entry/DnDFileListDragLayer.tsx#DnDFileListDragLayer"})}catch(__react_docgen_typescript_loader_error){}var ErrorMessage=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var message=props.message,bullets=props.bullets,bulletList=null;if(bullets&&bullets.length>0){for(var items=[],i=0;i<bullets.length;++i)items.push(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("li",{key:"error-bullet-".concat(i)},bullets[i]));bulletList=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("ul",null,items)}return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-error"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-error-name"},"Chonky runtime error:")," ",message,bulletList)}));try{ErrorMessage.displayName="ErrorMessage",ErrorMessage.__docgenInfo={description:"",displayName:"ErrorMessage",props:{message:{defaultValue:null,description:"",name:"message",required:!0,type:{name:"string"}},bullets:{defaultValue:null,description:"",name:"bullets",required:!1,type:{name:"string[] | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/ErrorMessage.tsx#ErrorMessage"]={docgenInfo:ErrorMessage.__docgenInfo,name:"ErrorMessage",path:"src/components/internal/ErrorMessage.tsx#ErrorMessage"})}catch(__react_docgen_typescript_loader_error){}var hotkeys_esm=__webpack_require__(192),HotkeyListener=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var fileActionId=props.fileActionId,fileAction=Object(dist.useRecoilValue)(fileActionDataState(fileActionId)),requestFileAction=Object(dist.useRecoilValue)(requestFileActionState);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){if(fileAction&&fileAction.hotkeys&&0!==fileAction.hotkeys.length){var hotkeysStr=fileAction.hotkeys.join(","),hotkeyCallback=function hotkeyCallback(event){event.preventDefault(),requestFileAction(fileAction.id)};return Object(hotkeys_esm.a)(hotkeysStr,hotkeyCallback),function(){return hotkeys_esm.a.unbind(hotkeysStr,hotkeyCallback)}}}),[fileAction,requestFileAction]),null}));try{HotkeyListener.displayName="HotkeyListener",HotkeyListener.__docgenInfo={description:"",displayName:"HotkeyListener",props:{fileActionId:{defaultValue:null,description:"",name:"fileActionId",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/HotkeyListener.tsx#HotkeyListener"]={docgenInfo:HotkeyListener.__docgenInfo,name:"HotkeyListener",path:"src/components/internal/HotkeyListener.tsx#HotkeyListener"})}catch(__react_docgen_typescript_loader_error){}var ChonkyPresentationLayer_ChonkyPresentationLayer=function ChonkyPresentationLayer(props){var validationErrors=props.validationErrors,children=props.children,fileActions=Object(dist.useRecoilValue)(fileActionsState),selectionModifiers=Object(dist.useRecoilValue)(selectionModifiersState),enableDragAndDrop=Object(dist.useRecoilValue)(enableDragAndDropState),chonkyRootRef=hooks_helpers_useClickListener({onOutsideClick:selectionModifiers.clearSelection}),hotkeyListenerComponents=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return fileActions.map((function(action){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(HotkeyListener,{key:"file-action-listener-".concat(action.id),fileActionId:action.id})}))}),[fileActions]),validationErrorComponents=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return validationErrors.map((function(data,index){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ErrorMessage,{key:"error-message-".concat(index),message:data.message,bullets:data.bullets})}))}),[validationErrors]);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{ref:chonkyRootRef,className:"chonky-root chonky-no-select"},enableDragAndDrop&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(DnDFileListDragLayer_DnDFileListDragLayer,null),hotkeyListenerComponents,validationErrorComponents,children||null)};ChonkyPresentationLayer_ChonkyPresentationLayer.displayName="ChonkyPresentationLayer";try{ChonkyPresentationLayer_ChonkyPresentationLayer.displayName="ChonkyPresentationLayer",ChonkyPresentationLayer_ChonkyPresentationLayer.__docgenInfo={description:"",displayName:"ChonkyPresentationLayer",props:{validationErrors:{defaultValue:null,description:"",name:"validationErrors",required:!0,type:{name:"ErrorMessageData[]"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/ChonkyPresentationLayer.tsx#ChonkyPresentationLayer"]={docgenInfo:ChonkyPresentationLayer_ChonkyPresentationLayer.__docgenInfo,name:"ChonkyPresentationLayer",path:"src/components/internal/ChonkyPresentationLayer.tsx#ChonkyPresentationLayer"})}catch(__react_docgen_typescript_loader_error){}function FileBrowser_toConsumableArray(arr){return function FileBrowser_arrayWithoutHoles(arr){if(Array.isArray(arr))return FileBrowser_arrayLikeToArray(arr)}(arr)||function FileBrowser_iterableToArray(iter){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(iter))return Array.from(iter)}(arr)||function FileBrowser_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return FileBrowser_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return FileBrowser_arrayLikeToArray(o,minLen)}(arr)||function FileBrowser_nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function FileBrowser_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var FileBrowser_FileBrowser=function FileBrowser(props){var files=props.files,children=props.children,folderChain=props.folderChain?props.folderChain:null,fileActions=props.fileActions?props.fileActions:[],disableDefaultFileActions=!!props.disableDefaultFileActions,_useFileArrayValidati=function useFileArrayValidation(files,folderChain){var _useMemo=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var errorMessages=[],cleanFilesResult=cleanupFileArray(files,!1);if(cleanFilesResult.warningMessage){var errorMessage='The "files" prop passed to FileBrowser did not pass validation. '+"".concat(cleanFilesResult.warningMessage," ")+"The following errors were encountered:";Logger.error(errorMessage,Logger.formatBullets(cleanFilesResult.warningBullets)),errorMessages.push({message:errorMessage,bullets:cleanFilesResult.warningBullets})}return{cleanFiles:cleanFilesResult.cleanFileArray,errorMessages:errorMessages}}),[files]),cleanFiles=_useMemo.cleanFiles,filesErrorMessages=_useMemo.errorMessages,_useMemo2=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var errorMessages=[],cleanFolderChainResult=cleanupFileArray(folderChain,!0);if(cleanFolderChainResult.warningMessage){var errorMessage='The "folderChain" prop passed to FileBrowser did not pass validation. '+"".concat(cleanFolderChainResult.warningMessage," ")+"The following errors were encountered:";Logger.error(errorMessage,Logger.formatBullets(cleanFolderChainResult.warningBullets)),errorMessages.push({message:errorMessage,bullets:cleanFolderChainResult.warningBullets})}return{cleanFolderChain:cleanFolderChainResult.cleanFileArray,errorMessages:errorMessages}}),[folderChain]),cleanFolderChain=_useMemo2.cleanFolderChain,folderChainErrorMessages=_useMemo2.errorMessages;return{cleanFiles:cleanFiles,cleanFolderChain:cleanFolderChain,errorMessages:[].concat(_toConsumableArray(filesErrorMessages),_toConsumableArray(folderChainErrorMessages))}}(files,folderChain),cleanFiles=_useFileArrayValidati.cleanFiles,cleanFolderChain=_useFileArrayValidati.cleanFolderChain,fileArrayErrors=_useFileArrayValidati.errorMessages,_useFileActionsValida=validation_useFileActionsValidation(fileActions,DefaultFileActions,!disableDefaultFileActions),cleanFileActions=_useFileActionsValida.cleanFileActions,fileActionsErrors=_useFileActionsValida.errorMessages,validationErrors=[].concat(FileBrowser_toConsumableArray(fileArrayErrors),FileBrowser_toConsumableArray(fileActionsErrors)),businessLogicProps=Object.assign({},props,{files:cleanFiles,folderChain:cleanFolderChain,fileActions:cleanFileActions});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(dist.RecoilRoot,null,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyBusinessLogic,businessLogicProps),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyPresentationLayer_ChonkyPresentationLayer,{validationErrors:validationErrors},children))};FileBrowser_FileBrowser.displayName="FileBrowser";try{FileBrowser_FileBrowser.displayName="FileBrowser",FileBrowser_FileBrowser.__docgenInfo={description:"",displayName:"FileBrowser",props:{files:{defaultValue:null,description:"List of files that will be displayed in the main container. The provided value\n**must** be an array, where each element is either `null` or an object that\nsatisfies the `FileData` type. If an element is `null`, a loading placeholder\nwill be displayed in its place.",name:"files",required:!0,type:{name:"FileArray"}},folderChain:{defaultValue:null,description:"The current folder hierarchy. This should be an array of `files`, every\nelement should either be `null` or an object of `FileData` type. The first\nelement should represent the top-level directory, and the last element\nshould be the current folder.",name:"folderChain",required:!1,type:{name:"FileArray | null | undefined"}},fileActions:{defaultValue:null,description:"",name:"fileActions",required:!1,type:{name:"FileAction[] | undefined"}},onFileAction:{defaultValue:null,description:"",name:"onFileAction",required:!1,type:{name:"FileActionHandler | undefined"}},thumbnailGenerator:{defaultValue:null,description:"The function that determines the thumbnail image URL for a file. It gets a file object as the input, and\nshould return a `string` or `null`. It can also return a promise that resolves into a `string` or `null`.\n[See relevant section](#section-displaying-file-thumbnails).",name:"thumbnailGenerator",required:!1,type:{name:"ThumbnailGenerator | undefined"}},doubleClickDelay:{defaultValue:null,description:"Maximum delay between the two clicks in a double click, in milliseconds.",name:"doubleClickDelay",required:!1,type:{name:"number | undefined"}},disableSelection:{defaultValue:null,description:"The flag that completely disables file selection functionality. If any handlers depend on file selections, their\ninput will look like no files are selected.",name:"disableSelection",required:!1,type:{name:"boolean | undefined"}},disableDefaultFileActions:{defaultValue:null,description:"",name:"disableDefaultFileActions",required:!1,type:{name:"boolean | undefined"}},enableDragAndDrop:{defaultValue:null,description:"The flag that completely disables drag & drop functionality.\n[See relevant section](#section-managing-file-selection).",name:"enableDragAndDrop",required:!1,type:{name:"boolean | undefined"}},fillParentContainer:{defaultValue:null,description:"The flag that determines whether Chonky should fill the height parent container. When set to `true`, the maximum\nheight of the file browser will be limited to the height of the parent container, and scrollbar will be shown\nwhen necessary. When set to `false`, file browser height will be extended to display all files at the same time.",name:"fillParentContainer",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileBrowser.tsx#FileBrowser"]={docgenInfo:FileBrowser_FileBrowser.__docgenInfo,name:"FileBrowser",path:"src/components/external/FileBrowser.tsx#FileBrowser"})}catch(__react_docgen_typescript_loader_error){}var delegated_prop_typesfrom_dll_reference_storybook_docs_dll=__webpack_require__(26),delegated_prop_typesfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_prop_typesfrom_dll_reference_storybook_docs_dll);function FileToolbar_hooks_createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=function FileToolbar_hooks_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return FileToolbar_hooks_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return FileToolbar_hooks_arrayLikeToArray(o,minLen)}(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function FileToolbar_hooks_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var FileToolbar_hooks_useFolderChainComponent=function useFolderChainComponent(){var folderChain=Object(dist.useRecoilValue)(folderChainState),dispatchSpecialAction=Object(dist.useRecoilValue)(dispatchSpecialActionState);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){if(!folderChain)return folderChain;for(var comps=new Array(Math.max(0,2*folderChain.length-1)),_loop=function _loop(i){var file=folderChain[i],isLast=i===folderChain.length-1,j=2*i,compProps={key:"folder-chain-entry-".concat(j),className:classnames_default()({"chonky-folder-chain-entry":!0,"chonky-loading":!file})};file_helper_FileHelper.isOpenable(file)&&!isLast&&(compProps.onClick=function(){dispatchSpecialAction({actionId:SpecialAction.OpenFolderChainFolder,file:file})});var TagToUse=compProps.onClick?"button":"div";comps[j]=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(TagToUse,compProps,0===j&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-text-subtle-dark"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:ChonkyIconName.folder}),"  "),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-folder-chain-entry-name"},file?file.name:"Loading...")),isLast||(comps[j+1]=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{key:"folder-chain-separator-".concat(j),className:"chonky-folder-chain-separator"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:ChonkyIconName.folderChainSeparator,size:"xs"})))},i=0;i<folderChain.length;++i)_loop(i);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-folder-chain"},comps)}),[folderChain,dispatchSpecialAction])};try{FileToolbar_hooks_useFolderChainComponent.displayName="useFolderChainComponent",FileToolbar_hooks_useFolderChainComponent.__docgenInfo={description:"Generates folder chain HTML components for the `FileToolbar` component.",displayName:"useFolderChainComponent",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileToolbar-hooks.tsx#useFolderChainComponent"]={docgenInfo:FileToolbar_hooks_useFolderChainComponent.__docgenInfo,name:"useFolderChainComponent",path:"src/components/external/FileToolbar-hooks.tsx#useFolderChainComponent"})}catch(__react_docgen_typescript_loader_error){}var DropdownButton=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var text=props.text,tooltip=props.tooltip,active=props.active,icon=props.icon,onClick=props.onClick,disabled=props.disabled,className=classnames_default()({"chonky-toolbar-dropdown-button":!0,"chonky-active":!!active});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("button",{className:className,onClick:onClick,title:tooltip||text,disabled:!onClick||disabled},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-dropdown-button-icon"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:icon||ChonkyIconName.circle,fixedWidth:!0})),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-dropdown-button-text"},text))})),DropdownButton_SmartDropdownButton=function SmartDropdownButton(props){var fileActionId=props.fileActionId,action=Object(dist.useRecoilValue)(fileActionDataState(fileActionId)),triggerAction=file_actions_useFileActionTrigger(fileActionId),_useFileActionProps=file_actions_useFileActionProps(fileActionId),icon=_useFileActionProps.icon,active=_useFileActionProps.active,disabled=_useFileActionProps.disabled;if(!action)return null;var button=action.toolbarButton;return button?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(DropdownButton,{text:button.name,tooltip:button.tooltip,icon:icon,onClick:triggerAction,active:active,disabled:disabled}):null};DropdownButton_SmartDropdownButton.displayName="SmartDropdownButton";try{DropdownButton.displayName="DropdownButton",DropdownButton.__docgenInfo={description:"",displayName:"DropdownButton",props:{text:{defaultValue:null,description:"",name:"text",required:!0,type:{name:"string"}},tooltip:{defaultValue:null,description:"",name:"tooltip",required:!1,type:{name:"string | undefined"}},active:{defaultValue:null,description:"",name:"active",required:!1,type:{name:"boolean | undefined"}},icon:{defaultValue:null,description:"",name:"icon",required:!1,type:{name:"string | null | undefined"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"(() => void) | undefined"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/DropdownButton.tsx#DropdownButton"]={docgenInfo:DropdownButton.__docgenInfo,name:"DropdownButton",path:"src/components/external/DropdownButton.tsx#DropdownButton"})}catch(__react_docgen_typescript_loader_error){}try{DropdownButton_SmartDropdownButton.displayName="SmartDropdownButton",DropdownButton_SmartDropdownButton.__docgenInfo={description:"",displayName:"SmartDropdownButton",props:{fileActionId:{defaultValue:null,description:"",name:"fileActionId",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/DropdownButton.tsx#SmartDropdownButton"]={docgenInfo:DropdownButton_SmartDropdownButton.__docgenInfo,name:"SmartDropdownButton",path:"src/components/external/DropdownButton.tsx#SmartDropdownButton"})}catch(__react_docgen_typescript_loader_error){}var ToolbarButton=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var text=props.text,tooltip=props.tooltip,active=props.active,icon=props.icon,iconOnly=props.iconOnly,iconOnRight=props.iconOnRight,onClick=props.onClick,disabled=props.disabled,iconComponent=icon||iconOnly?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-button-icon"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:icon||ChonkyIconName.fallbackIcon,fixedWidth:!0})):null,className=classnames_default()({"chonky-toolbar-button":!0,"chonky-active":!!active});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("button",{className:className,onClick:onClick,title:tooltip||text,disabled:!onClick||disabled},!iconOnRight&&iconComponent,text&&!iconOnly&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-button-text"},text),iconOnRight&&iconComponent)})),SmartToolbarButton=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var fileActionId=props.fileActionId,action=Object(dist.useRecoilValue)(fileActionDataState(fileActionId)),triggerAction=file_actions_useFileActionTrigger(fileActionId),_useFileActionProps=file_actions_useFileActionProps(fileActionId),icon=_useFileActionProps.icon,active=_useFileActionProps.active,disabled=_useFileActionProps.disabled;if(!action)return null;var button=action.toolbarButton;return button?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ToolbarButton,{text:button.name,tooltip:button.tooltip,icon:icon,iconOnly:button.iconOnly,active:active,onClick:triggerAction,disabled:disabled}):null}));try{ToolbarButton.displayName="ToolbarButton",ToolbarButton.__docgenInfo={description:"",displayName:"ToolbarButton",props:{text:{defaultValue:null,description:"",name:"text",required:!0,type:{name:"string"}},tooltip:{defaultValue:null,description:"",name:"tooltip",required:!1,type:{name:"string | undefined"}},active:{defaultValue:null,description:"",name:"active",required:!1,type:{name:"boolean | undefined"}},icon:{defaultValue:null,description:"",name:"icon",required:!1,type:{name:"string | null | undefined"}},iconOnly:{defaultValue:null,description:"",name:"iconOnly",required:!1,type:{name:"boolean | undefined"}},iconOnRight:{defaultValue:null,description:"",name:"iconOnRight",required:!1,type:{name:"boolean | undefined"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"(() => void) | undefined"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/ToolbarButton.tsx#ToolbarButton"]={docgenInfo:ToolbarButton.__docgenInfo,name:"ToolbarButton",path:"src/components/external/ToolbarButton.tsx#ToolbarButton"})}catch(__react_docgen_typescript_loader_error){}try{SmartToolbarButton.displayName="SmartToolbarButton",SmartToolbarButton.__docgenInfo={description:"",displayName:"SmartToolbarButton",props:{fileActionId:{defaultValue:null,description:"",name:"fileActionId",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/ToolbarButton.tsx#SmartToolbarButton"]={docgenInfo:SmartToolbarButton.__docgenInfo,name:"SmartToolbarButton",path:"src/components/external/ToolbarButton.tsx#SmartToolbarButton"})}catch(__react_docgen_typescript_loader_error){}function Dropdown_slicedToArray(arr,i){return function Dropdown_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function Dropdown_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function Dropdown_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return Dropdown_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Dropdown_arrayLikeToArray(o,minLen)}(arr,i)||function Dropdown_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Dropdown_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var Dropdown=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var group=props.group,_useState2=Dropdown_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(!1),2),showDropdown=_useState2[0],setShowDropdown=_useState2[1],hideDropdown=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(){return setShowDropdown(!1)}),[setShowDropdown]),dropdownRef=hooks_helpers_useClickListener({onOutsideClick:hideDropdown}),triggerClick=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(){setShowDropdown(!0)}),[setShowDropdown]);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{ref:dropdownRef,className:"chonky-toolbar-dropdown"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ToolbarButton,{text:group.name,active:showDropdown,icon:ChonkyIconName.dropdown,iconOnRight:!0,onClick:triggerClick}),showDropdown&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-dropdown-content"},group.fileActionIds.map((function(actionId){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(DropdownButton_SmartDropdownButton,{key:"action-button-".concat(actionId),fileActionId:actionId})}))))}));try{Dropdown.displayName="Dropdown",Dropdown.__docgenInfo={description:"",displayName:"Dropdown",props:{group:{defaultValue:null,description:"",name:"group",required:!0,type:{name:"ActionGroupData"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/Dropdown.tsx#Dropdown"]={docgenInfo:Dropdown.__docgenInfo,name:"Dropdown",path:"src/components/external/Dropdown.tsx#Dropdown"})}catch(__react_docgen_typescript_loader_error){}var ToolbarButtonGroup=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var groupContents,group=props.group;return groupContents=group.dropdown?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(Dropdown,{group:group}):group.fileActionIds.map((function(actionId){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(SmartToolbarButton,{key:"action-button-".concat(actionId),fileActionId:actionId})})),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-button-group"},groupContents)}));try{ToolbarButtonGroup.displayName="ToolbarButtonGroup",ToolbarButtonGroup.__docgenInfo={description:"",displayName:"ToolbarButtonGroup",props:{group:{defaultValue:null,description:"",name:"group",required:!0,type:{name:"ActionGroupData"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/ToolbarButtonGroup.tsx#ToolbarButtonGroup"]={docgenInfo:ToolbarButtonGroup.__docgenInfo,name:"ToolbarButtonGroup",path:"src/components/external/ToolbarButtonGroup.tsx#ToolbarButtonGroup"})}catch(__react_docgen_typescript_loader_error){}var FileToolbar=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(){var searchBarEnabled=Object(dist.useRecoilValue)(searchBarEnabledState),folderChainComp=FileToolbar_hooks_useFolderChainComponent(),_useActionGroups=function useActionGroups(){var fileActions=Object(dist.useRecoilValue)(fileActionsState);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var _step,buttonGroups=[],buttonGroupMap={},openParentFolderButtonGroup=null,searchButtonGroup=null,_iterator=FileToolbar_hooks_createForOfIteratorHelper(fileActions);try{for(_iterator.s();!(_step=_iterator.n()).done;){var action=_step.value;if(action.toolbarButton){var button=action.toolbarButton,group=void 0;button.group?buttonGroupMap[button.group]?((group=buttonGroupMap[button.group]).dropdown=group.dropdown||button.dropdown,group.fileActionIds.push(action.id)):(group={name:button.group,dropdown:button.dropdown,fileActionIds:[action.id]},buttonGroups.push(group),buttonGroupMap[group.name]=group):(group={name:button.group,dropdown:button.dropdown,fileActionIds:[action.id]},action.id===ChonkyActions.OpenParentFolder.id?openParentFolderButtonGroup=group:action.id===ChonkyActions.ToggleSearch.id?searchButtonGroup=group:buttonGroups.push(group))}}}catch(err){_iterator.e(err)}finally{_iterator.f()}return{buttonGroups:buttonGroups,openParentFolderButtonGroup:openParentFolderButtonGroup,searchButtonGroup:searchButtonGroup}}),[fileActions])}(),buttonGroups=_useActionGroups.buttonGroups,openParentFolderButtonGroup=_useActionGroups.openParentFolderButtonGroup,searchButtonGroup=_useActionGroups.searchButtonGroup;return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-side chonky-toolbar-side-left"},openParentFolderButtonGroup&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ToolbarButtonGroup,{group:openParentFolderButtonGroup}),folderChainComp),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-side chonky-toolbar-side-right"},buttonGroups.map((function(group,index){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ToolbarButtonGroup,{key:"button-group-".concat(group.name?group.name:index),group:group})})),searchBarEnabled&&searchButtonGroup&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ToolbarButtonGroup,{group:searchButtonGroup})))}));FileToolbar.propTypes={folderChain:delegated_prop_typesfrom_dll_reference_storybook_docs_dll_default.a.arrayOf(delegated_prop_typesfrom_dll_reference_storybook_docs_dll_default.a.oneOfType([delegated_prop_typesfrom_dll_reference_storybook_docs_dll_default.a.string.isRequired,delegated_prop_typesfrom_dll_reference_storybook_docs_dll_default.a.oneOf([null]).isRequired]))};try{FileToolbar.displayName="FileToolbar",FileToolbar.__docgenInfo={description:"",displayName:"FileToolbar",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileToolbar.tsx#FileToolbar"]={docgenInfo:FileToolbar.__docgenInfo,name:"FileToolbar",path:"src/components/external/FileToolbar.tsx#FileToolbar"})}catch(__react_docgen_typescript_loader_error){}__webpack_require__(86);function FileSearch_slicedToArray(arr,i){return function FileSearch_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function FileSearch_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function FileSearch_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return FileSearch_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return FileSearch_arrayLikeToArray(o,minLen)}(arr,i)||function FileSearch_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function FileSearch_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var FileSearch_FileSearch=function FileSearch(){var setSearchBarEnabled=Object(dist.useSetRecoilState)(searchBarEnabledState),_useRecoilState2=FileSearch_slicedToArray(Object(dist.useRecoilState)(searchBarVisibleState),2),searchBarVisible=_useRecoilState2[0],setSearchBarVisible=_useRecoilState2[1],_useRecoilState4=FileSearch_slicedToArray(Object(dist.useRecoilState)(searchFilterState),2),globalSearchFilter=_useRecoilState4[0],setGlobalSearchFilter=_useRecoilState4[1];Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){return setSearchBarEnabled(!0),function(){return setSearchBarEnabled(!1)}}),[setSearchBarEnabled]);var _useState2=FileSearch_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(!1),2),showLoadingIndicator=_useState2[0],setShowLoadingIndicator=_useState2[1],_useState4=FileSearch_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(globalSearchFilter),2),localFilter=_useState4[0],setLocalFilter=_useState4[1],_useDebounce2=FileSearch_slicedToArray(function useDebounce(value,delay){var _useState2=hooks_helpers_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(value),2),debouncedValue=_useState2[0],setDebouncedValue=_useState2[1];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){var handler=setTimeout((function(){setDebouncedValue(value)}),delay);return function(){clearTimeout(handler)}}),[value,delay]),[debouncedValue,setDebouncedValue]}(localFilter,500),2),debouncedFilter=_useDebounce2[0],setDebouncedFilter=_useDebounce2[1];Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){setShowLoadingIndicator(!1);var trimmedFilter=debouncedFilter.trim();setGlobalSearchFilter(trimmedFilter)}),[debouncedFilter,setShowLoadingIndicator,setGlobalSearchFilter]);var inputRef=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.useRef(null);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){searchBarVisible?inputRef.current&&inputRef.current.focus():(setShowLoadingIndicator(!1),setLocalFilter(""),setDebouncedFilter(""))}),[inputRef,searchBarVisible,setShowLoadingIndicator,setLocalFilter,setDebouncedFilter]);var handleInputChange=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){setShowLoadingIndicator(!0),setLocalFilter(event.target.value)}),[setShowLoadingIndicator,setLocalFilter]),onInputKeyDown=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){"Escape"===event.nativeEvent.code&&setSearchBarVisible(!1)}),[setSearchBarVisible]),className=classnames_default()({"chonky-file-search":!0,"chonky-file-search-hidden":!searchBarVisible});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:className},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-search-input-group"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("label",{htmlFor:"chonky-file-search"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:ChonkyIconName.search,fixedWidth:!0})),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("input",{ref:inputRef,type:"text",id:"chonky-file-search",value:localFilter,placeholder:"Type to search...",onChange:handleInputChange,onKeyDown:onInputKeyDown}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-search-input-group-loading"},showLoadingIndicator&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-file-search-input-group-loading-indicator"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:ChonkyIconName.loading,spin:!0})))))};FileSearch_FileSearch.displayName="FileSearch";try{FileSearch_FileSearch.displayName="FileSearch",FileSearch_FileSearch.__docgenInfo={description:"",displayName:"FileSearch",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileSearch.tsx#FileSearch"]={docgenInfo:FileSearch_FileSearch.__docgenInfo,name:"FileSearch",path:"src/components/external/FileSearch.tsx#FileSearch"})}catch(__react_docgen_typescript_loader_error){}var AutoSizer=__webpack_require__(354),FileList=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(){var files=Object(dist.useRecoilValue)(filesState),entrySize=Object(dist.useRecoilValue)(fileEntrySizeState),entryRenderer=FileList_virtualization_useEntryRenderer(files),thumbsGridRef=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useRef)(),gridRenderer=FileList_virtualization_useGridRenderer(files,entrySize,entryRenderer,thumbsGridRef,!0);if(!files){var errorMessage="".concat(FileList.name,' cannot find the "files" array via React context. This ')+"happens when ".concat(FileList.name,' is placed outside of "FileBrowser"')+"component.";return Logger.error(errorMessage),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ErrorMessage,{message:errorMessage})}return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-list",style:{minHeight:entrySize.height}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(AutoSizer.AutoSizer,{disableHeight:!1},gridRenderer))}));try{FileList.displayName="FileList",FileList.__docgenInfo={description:"",displayName:"FileList",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileList.tsx#FileList"]={docgenInfo:FileList.__docgenInfo,name:"FileList",path:"src/components/external/FileList.tsx#FileList"})}catch(__react_docgen_typescript_loader_error){}__webpack_require__(138),__webpack_require__(94),__webpack_require__(285),__webpack_require__(286)},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return StoryCategories})),__webpack_require__.d(__webpack_exports__,"b",(function(){return story_helpers_createDocsObject})),__webpack_require__.d(__webpack_exports__,"c",(function(){return story_helpers_showActionNotification}));__webpack_require__(4),__webpack_require__(12),__webpack_require__(22),__webpack_require__(13),__webpack_require__(62),__webpack_require__(25),__webpack_require__(20),__webpack_require__(14),__webpack_require__(18),__webpack_require__(32),__webpack_require__(24),__webpack_require__(15),__webpack_require__(21),__webpack_require__(5),__webpack_require__(6),__webpack_require__(11),__webpack_require__(28),__webpack_require__(23),__webpack_require__(16),__webpack_require__(86),__webpack_require__(19),__webpack_require__(608),__webpack_require__(610),__webpack_require__(612);var StoryCategories,blocks=__webpack_require__(34),utils=__webpack_require__(84),dist=__webpack_require__(47),lib_noty=__webpack_require__(287),lib_noty_default=__webpack_require__.n(lib_noty),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),DndProvider=__webpack_require__(769),esm=__webpack_require__(187);function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}!function(StoryCategories){StoryCategories.Welcome="1) Welcome",StoryCategories.Demos="2) Demos",StoryCategories.FileBrowserBasics="3) File Browser basics",StoryCategories.FileBrowserExamples="4) File Browser examples",StoryCategories.ApiReference="5) API Reference"}(StoryCategories||(StoryCategories={}));var story_helpers_createDocsObject=function createDocsObject(params){var markdown=params.markdown,hideStory=params.hideStory;return{page:function page(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.Fragment,null,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(DndProvider.a,{backend:esm.a},story_helpers_parseMarkdown('<div class="unstable-warning">\n\n> Chonky `1.x` is still in beta. If you found a bug or want to request a feature, please\n> [create an issue](https://github.com/TimboKZ/Chonky/issues) on GitHub. Chonky was\n> also designed to be very flexible, so if you have a use case that is not described\n> in the docs, please create an issue. There is a good change your use case is\n> supported, just not documented.\n\n</div>\n'),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(blocks.Title,null),story_helpers_parseMarkdown(markdown),!hideStory&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.Fragment,null,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(story_helpers_CustomPrimary,null),story_helpers_parseMarkdown("### A note about live examples...\n\nAll live examples are written in Typescript. All components and types are imported\nfrom the `chonky` package, e.g.:\n\n```ts\nimport 'chonky/style/main.css';\nimport { FileBrowser, FileToolbar, FileList, FileData } from 'chonky';\n```\n\nThe only exception is the `showActionNotification()` function, which calls\n[the Noty notification library](https://ned.im/noty/) (not packaged with Chonky). To\nrun the examples locally, you can replace `showActionNotification()` with\n`console.log()`.\n"))))}}},story_helpers_CustomPrimary=function CustomPrimary(_ref){var story,name=_ref.name,context=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(blocks.DocsContext),componentStories=Object(utils.getDocsStories)(context);return componentStories&&(story=name?componentStories.find((function(s){return s.name===name})):componentStories[0]),story?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(blocks.DocsStory,_extends({},story,{expanded:!1})):null},story_helpers_parseMarkdown=function parseMarkdown(markdown){var _step,occurrences=[],_iterator=function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e2){throw _e2},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e3){didErr=!0,err=_e3},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}(getIndicesOf("```",markdown));try{for(_iterator.s();!(_step=_iterator.n()).done;){var index=_step.value,lineEnd=markdown.indexOf("\n",index),line=markdown.substring(index,lineEnd).trim(),opening_matches=/^```([a-z-]+)(\s+{.*?})?$/i.exec(line);if(opening_matches){var _opening_matches=_slicedToArray(opening_matches,3),language=_opening_matches[1],jsonConfig=_opening_matches[2];occurrences.push({type:"start",language:language,jsonConfig:jsonConfig,markdownEnd:index,codeStart:lineEnd+1})}else/^```$/i.exec(line)&&occurrences.push({type:"end",codeEnd:index,markdownStart:lineEnd+1})}}catch(err){_iterator.e(err)}finally{_iterator.f()}for(var components=[],markdownStart=0,i=0;i<occurrences.length-1;++i){var start=occurrences[i],end=occurrences[i+1];if("start"===start.type&&"end"===end.type){i+=1;var mdSlice=markdown.substring(markdownStart,start.markdownEnd),codeSlice=markdown.substring(start.codeStart,end.codeEnd);components.push(story_helpers_prepareMarkdownComp(i,mdSlice)),components.push(story_helpers_prepareCodeComp(i,start.language,codeSlice,start.jsonConfig)),markdownStart=end.markdownStart}}return components.push(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(blocks.Description,{key:"markdown-last",markdown:markdown.substring(markdownStart)})),components},story_helpers_prepareMarkdownComp=function prepareMarkdownComp(index,markdown){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(blocks.Description,{key:"md-".concat(index),markdown:markdown})};story_helpers_prepareMarkdownComp.displayName="prepareMarkdownComp";var story_helpers_prepareCodeComp=function prepareCodeComp(index,language,code,jsonConfig){var displayCode,key="code-".concat(2*index+1);return displayCode=jsonConfig?"Sorry, JSON config loading is currently not supported. "+"\nYour config: ".concat(jsonConfig):code,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(dist.Source,{key:key,language:language,code:displayCode})};story_helpers_prepareCodeComp.displayName="prepareCodeComp";var getIndicesOf=function getIndicesOf(needle,haystack){var index,searchStrLen=needle.length;if(0==searchStrLen)return[];for(var startIndex=0,indices=[];(index=haystack.indexOf(needle,startIndex))>-1;)indices.push(index),startIndex=index+searchStrLen;return indices},story_helpers_showActionNotification=function showActionNotification(params){var action=params.action,data=params.data,textParts=[];if(textParts.push("<b>Action:</b> ".concat(action.id)),data.target&&textParts.push("<b>Target:</b> <code>".concat(data.target.name,"</code>")),data.files){var fileComps=data.files.map((function(f){return f.name})).map((function(name){return"<code>".concat(name,"</code>")})),fileCount=fileComps.length,fileTitle="".concat(fileCount," ").concat(1===fileCount?"file":"files",":");textParts.push("<b>".concat(fileTitle,"</b> [").concat(fileComps.join(", "),"]"))}var text=textParts.join("<br/>");new lib_noty_default.a({text:text,type:"success",theme:"relax",timeout:3e3}).show()};try{story_helpers_createDocsObject.displayName="createDocsObject",story_helpers_createDocsObject.__docgenInfo={description:"",displayName:"createDocsObject",props:{markdown:{defaultValue:null,description:"",name:"markdown",required:!0,type:{name:"string"}},hideStory:{defaultValue:null,description:"",name:"hideStory",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/story-helpers.tsx#createDocsObject"]={docgenInfo:story_helpers_createDocsObject.__docgenInfo,name:"createDocsObject",path:"stories/story-helpers.tsx#createDocsObject"})}catch(__react_docgen_typescript_loader_error){}try{story_helpers_CustomPrimary.displayName="CustomPrimary",story_helpers_CustomPrimary.__docgenInfo={description:"",displayName:"CustomPrimary",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/story-helpers.tsx#CustomPrimary"]={docgenInfo:story_helpers_CustomPrimary.__docgenInfo,name:"CustomPrimary",path:"stories/story-helpers.tsx#CustomPrimary"})}catch(__react_docgen_typescript_loader_error){}try{story_helpers_showActionNotification.displayName="showActionNotification",story_helpers_showActionNotification.__docgenInfo={description:"",displayName:"showActionNotification",props:{action:{defaultValue:null,description:"",name:"action",required:!0,type:{name:"FileAction"}},data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"FileActionData"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/story-helpers.tsx#showActionNotification"]={docgenInfo:story_helpers_showActionNotification.__docgenInfo,name:"showActionNotification",path:"stories/story-helpers.tsx#showActionNotification"})}catch(__react_docgen_typescript_loader_error){}},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("+KXO")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("7x/C")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("jQ/y")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("2G9S")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("plBw")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("M+/F")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("87if")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("lTEL")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("kYxP")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("vrRf")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("cARO")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("aLgo")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("DZ+c")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("z84I")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("hCOa")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("aWzz")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("UvmB")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("KqXw")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("LW0h")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("NyMY")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("aokA")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("7xRU")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("lN5B")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("MvUL")},,function(module,exports,__webpack_require__){var api=__webpack_require__(127),content=__webpack_require__(618);"string"==typeof(content=content.__esModule?content.default:content)&&(content=[[module.i,content,""]]);var options={insert:"head",singleton:!1};api(content,options);module.exports=content.locals||{}},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("jwue")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("+oxZ")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Ysgh")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("EgRP")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("KOtZ")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("yH/f")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("fRV1")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Yct5")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("jQ3i")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("1Iuc")},,,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return MDXContent}));__webpack_require__(4),__webpack_require__(20),__webpack_require__(6),__webpack_require__(9),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",{style:{textAlign:"center"}},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{src:"./Chonky_clear.png",alt:"Chonky logo",style:{width:500}}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",{href:"https://www.npmjs.com/package/chonky",target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{alt:"NPM package",src:"https://img.shields.io/npm/v/chonky.svg"})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",{href:"https://tldrlegal.com/license/mit-license",style:{marginLeft:5},target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{alt:"MIT license",src:"https://img.shields.io/npm/l/chonky"})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",{href:"https://www.npmjs.com/package/chonky",style:{marginLeft:5},target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{alt:"NPM downloads",src:"https://img.shields.io/npm/dt/chonky"})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",{href:"https://github.com/TimboKZ/Chonky",style:{marginLeft:5},target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{alt:"GitHub stars",src:"https://img.shields.io/github/stars/TimboKZ/Chonky"})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",{href:"https://discord.gg/4HJaFn9",style:{marginLeft:5},target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{alt:"Chat on Discord",src:"https://img.shields.io/discord/696033621986770957?label=Chat%20on%20Discord"})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null)),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",{class:"unstable-warning"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("blockquote",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",{parentName:"blockquote"},"Chonky ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"p"},"1.x")," is still in beta. If you found a bug or want to request a feature, please\n",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"p"},{href:"https://github.com/TimboKZ/Chonky/issues",target:"_blank",rel:"nofollow noopener noreferrer"}),"create an issue")," on GitHub."))))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("A3UQ")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("hBpG")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("x4t0")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("LJOr")},,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("WNMA")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("1IsZ")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("JtPf")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ZVkB")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("vbDw")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("y2Ah")},,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("tVqn")},,,,,,,,function(module,exports){},function(module){module.exports=JSON.parse('{"rootFolderId":"qwerty123456","fileMap":{"qwerty123456":{"id":"qwerty123456","name":"Chonky Demo","isDir":true,"childrenIds":["e598a85f843c","b53aa057fad1","b6667221f24b","a9fd7c8a04db","549c1f93247a"],"childrenCount":5},"e598a85f843c":{"id":"e598a85f843c","name":"Chonky Source Code","isDir":true,"modDate":"2020-06-27T17:58:02.101Z","childrenIds":["9514a3d74d57","ed918037b975","bfd2d437f45d","c21e08daf308","e4820c1b4ffb","0729af954fe6","a1361e98e01d","12dd195bb146","f4a747f4304b","bf3277c59175","24c33e69f0f1","a3a6f4860f0a","3710ab721ac1","ed2b6126cf96","da51714da4cb","c58b591bd793","eca6a4fd0d17","d14aa4c43d90"],"childrenCount":18,"parentId":"qwerty123456"},"9514a3d74d57":{"id":"9514a3d74d57","name":".eslintrc.js","isHidden":true,"size":2293,"modDate":"2020-06-21T17:59:01.227Z","parentId":"e598a85f843c"},"ed918037b975":{"id":"ed918037b975","name":".gitignore","isHidden":true,"size":347,"modDate":"2020-06-12T14:19:32.296Z","parentId":"e598a85f843c"},"bfd2d437f45d":{"id":"bfd2d437f45d","name":".npmignore","isHidden":true,"size":93,"modDate":"2020-06-20T12:26:47.289Z","parentId":"e598a85f843c"},"c21e08daf308":{"id":"c21e08daf308","name":".prettierrc.js","isHidden":true,"size":144,"modDate":"2020-06-12T20:28:03.230Z","parentId":"e598a85f843c"},"e4820c1b4ffb":{"id":"e4820c1b4ffb","name":".storybook","isDir":true,"isHidden":true,"modDate":"2020-06-18T00:09:38.460Z","parentId":"e598a85f843c","childrenIds":["a2c867cfe659","15f87fcc0439","79ebc02f0a8e","eac842b85a33","db4896af3712","f701cec28026"],"childrenCount":6},"a2c867cfe659":{"id":"a2c867cfe659","name":"chonky-theme.js","size":241,"modDate":"2020-06-12T21:38:02.557Z","parentId":"e4820c1b4ffb"},"15f87fcc0439":{"id":"15f87fcc0439","name":"main.js","size":907,"modDate":"2020-06-26T15:20:12.315Z","parentId":"e4820c1b4ffb"},"79ebc02f0a8e":{"id":"79ebc02f0a8e","name":"manager-head.html","size":223,"modDate":"2020-06-14T03:01:32.472Z","parentId":"e4820c1b4ffb"},"eac842b85a33":{"id":"eac842b85a33","name":"manager.js","size":134,"modDate":"2020-06-12T21:52:13.495Z","parentId":"e4820c1b4ffb"},"db4896af3712":{"id":"db4896af3712","name":"preview-body.html","size":485,"modDate":"2020-06-27T13:13:16.049Z","parentId":"e4820c1b4ffb"},"f701cec28026":{"id":"f701cec28026","name":"preview.js","size":0,"modDate":"2020-06-13T01:23:58.927Z","parentId":"e4820c1b4ffb"},"0729af954fe6":{"id":"0729af954fe6","name":".travis.yml","isHidden":true,"size":314,"modDate":"2020-06-21T19:47:33.471Z","parentId":"e598a85f843c"},"a1361e98e01d":{"id":"a1361e98e01d","name":"LICENSE","size":1073,"modDate":"2020-06-12T13:57:59.718Z","parentId":"e598a85f843c"},"12dd195bb146":{"id":"12dd195bb146","name":"README.md","size":3120,"modDate":"2020-06-27T13:27:28.745Z","parentId":"e598a85f843c"},"f4a747f4304b":{"id":"f4a747f4304b","name":"assets","isDir":true,"modDate":"2020-06-27T13:12:43.657Z","parentId":"e598a85f843c","childrenIds":["1b13ddd3d93d","7823b7d6a042","033e00567ee0","87ee3052e8b1","001a0ad16eca"],"childrenCount":5},"1b13ddd3d93d":{"id":"1b13ddd3d93d","name":"Chonky.jpg","size":15357,"modDate":"2020-06-12T20:28:03.230Z","parentId":"f4a747f4304b","thumbnailUrl":"./thumbnails/1b13ddd3d93d.jpg"},"7823b7d6a042":{"id":"7823b7d6a042","name":"Chonky_clear.png","size":44584,"modDate":"2020-06-12T20:28:03.230Z","parentId":"f4a747f4304b","thumbnailUrl":"./thumbnails/7823b7d6a042.jpg"},"033e00567ee0":{"id":"033e00567ee0","name":"Chonky_preview.gif","size":662107,"modDate":"2020-06-27T13:12:13.190Z","parentId":"f4a747f4304b"},"87ee3052e8b1":{"id":"87ee3052e8b1","name":"Lenna.png","size":88235,"modDate":"2020-06-27T12:36:38.656Z","parentId":"f4a747f4304b","thumbnailUrl":"./thumbnails/87ee3052e8b1.jpg"},"001a0ad16eca":{"id":"001a0ad16eca","name":"favicon.png","size":1977,"modDate":"2020-06-12T20:28:03.230Z","parentId":"f4a747f4304b","thumbnailUrl":"./thumbnails/001a0ad16eca.jpg"},"bf3277c59175":{"id":"bf3277c59175","name":"jest.config.js","size":447,"modDate":"2020-06-21T19:53:12.354Z","parentId":"e598a85f843c"},"24c33e69f0f1":{"id":"24c33e69f0f1","name":"package-lock.json","size":890644,"modDate":"2020-06-27T14:54:08.902Z","parentId":"e598a85f843c"},"a3a6f4860f0a":{"id":"a3a6f4860f0a","name":"package.json","size":3515,"modDate":"2020-06-27T14:54:08.158Z","parentId":"e598a85f843c"},"3710ab721ac1":{"id":"3710ab721ac1","name":"src","isDir":true,"modDate":"2020-06-22T00:04:40.321Z","parentId":"e598a85f843c","childrenIds":["54610aa4ba87","020abeee6c77","74bb440256a8","6debd6f88a8c","65b108840862"],"childrenCount":5},"54610aa4ba87":{"id":"54610aa4ba87","name":"components","isDir":true,"modDate":"2020-06-22T01:58:22.864Z","parentId":"3710ab721ac1","childrenIds":["193c316d82f3","71b959393742","ab92d3babbb2"],"childrenCount":3},"193c316d82f3":{"id":"193c316d82f3","name":"external","isDir":true,"modDate":"2020-06-21T17:18:04.706Z","parentId":"54610aa4ba87","childrenIds":["4c05aa3aa10b","8ac5e2fa2d52","afb508669d8e","7d12c006d8f2","019a818f0414","ac38e4f37657","dd62fd2bc9eb","b7f5121e6bde","9beefc08b677","bde70304d1c0","46b632b342f5","37d600dc0500"],"childrenCount":12},"4c05aa3aa10b":{"id":"4c05aa3aa10b","name":"ChonkyIcon.tsx","size":7859,"modDate":"2020-06-27T15:55:35.704Z","parentId":"193c316d82f3"},"8ac5e2fa2d52":{"id":"8ac5e2fa2d52","name":"Dropdown.tsx","size":1700,"modDate":"2020-06-22T21:21:11.463Z","parentId":"193c316d82f3"},"afb508669d8e":{"id":"afb508669d8e","name":"DropdownButton.tsx","size":2247,"modDate":"2020-06-27T15:31:56.391Z","parentId":"193c316d82f3"},"7d12c006d8f2":{"id":"7d12c006d8f2","name":"FileBrowser.tsx","size":1960,"modDate":"2020-06-23T23:23:22.594Z","parentId":"193c316d82f3"},"019a818f0414":{"id":"019a818f0414","name":"FileList-virtualization.tsx","size":5877,"modDate":"2020-06-27T12:08:33.602Z","parentId":"193c316d82f3"},"ac38e4f37657":{"id":"ac38e4f37657","name":"FileList.tsx","size":1836,"modDate":"2020-06-27T12:08:35.634Z","parentId":"193c316d82f3"},"dd62fd2bc9eb":{"id":"dd62fd2bc9eb","name":"FileSearch.tsx","size":4244,"modDate":"2020-06-27T13:04:47.956Z","parentId":"193c316d82f3"},"b7f5121e6bde":{"id":"b7f5121e6bde","name":"FileToolbar-hooks.tsx","size":5550,"modDate":"2020-06-24T00:11:38.672Z","parentId":"193c316d82f3"},"9beefc08b677":{"id":"9beefc08b677","name":"FileToolbar.tsx","size":1750,"modDate":"2020-06-23T23:28:59.186Z","parentId":"193c316d82f3"},"bde70304d1c0":{"id":"bde70304d1c0","name":"TextPlaceholder.tsx","size":752,"modDate":"2020-06-16T20:59:09.219Z","parentId":"193c316d82f3"},"46b632b342f5":{"id":"46b632b342f5","name":"ToolbarButton.tsx","size":2616,"modDate":"2020-06-27T15:31:56.387Z","parentId":"193c316d82f3"},"37d600dc0500":{"id":"37d600dc0500","name":"ToolbarButtonGroup.tsx","size":1002,"modDate":"2020-06-22T21:21:11.459Z","parentId":"193c316d82f3"},"71b959393742":{"id":"71b959393742","name":"file-entry","isDir":true,"modDate":"2020-06-22T01:58:57.755Z","parentId":"54610aa4ba87","childrenIds":["1a524404e402","b07e8d67b2a4","3dd2112ff49b","f072f39b6113","5dd802ad72dc","e629bdc5d52c","6f5f4ce265c6"],"childrenCount":7},"1a524404e402":{"id":"1a524404e402","name":"BaseFileEntry-hooks.tsx","size":3789,"modDate":"2020-06-27T12:53:46.078Z","parentId":"71b959393742"},"b07e8d67b2a4":{"id":"b07e8d67b2a4","name":"BaseFileEntry.tsx","size":4637,"modDate":"2020-06-26T20:22:14.258Z","parentId":"71b959393742"},"3dd2112ff49b":{"id":"3dd2112ff49b","name":"ClickableFileEntry-hooks.tsx","size":2216,"modDate":"2020-06-26T20:42:18.963Z","parentId":"71b959393742"},"f072f39b6113":{"id":"f072f39b6113","name":"ClickableFileEntry.tsx","size":920,"modDate":"2020-06-26T15:28:51.728Z","parentId":"71b959393742"},"5dd802ad72dc":{"id":"5dd802ad72dc","name":"DnDFileEntry.tsx","size":4246,"modDate":"2020-06-22T02:25:05.108Z","parentId":"71b959393742"},"e629bdc5d52c":{"id":"e629bdc5d52c","name":"DnDFileListDragLayer.tsx","size":2860,"modDate":"2020-06-22T01:58:36.907Z","parentId":"71b959393742"},"6f5f4ce265c6":{"id":"6f5f4ce265c6","name":"SmartFileEntry.tsx","size":1221,"modDate":"2020-06-22T02:21:47.131Z","parentId":"71b959393742"},"ab92d3babbb2":{"id":"ab92d3babbb2","name":"internal","isDir":true,"modDate":"2020-06-24T22:35:53.173Z","parentId":"54610aa4ba87","childrenIds":["ec11785e95ff","964bfaf958fa","1281b1fd233e","baa14f293e18","8081a927a7e5","40ef8217a3fa","7d9bfc8a2631"],"childrenCount":7},"ec11785e95ff":{"id":"ec11785e95ff","name":"ChonkyBusinessLogic.tsx","size":4606,"modDate":"2020-06-27T16:33:16.804Z","parentId":"ab92d3babbb2"},"964bfaf958fa":{"id":"964bfaf958fa","name":"ChonkyPresentationLayer.tsx","size":2278,"modDate":"2020-06-24T22:42:08.235Z","parentId":"ab92d3babbb2"},"1281b1fd233e":{"id":"1281b1fd233e","name":"ClickableWrapper-hooks.tsx","size":2884,"modDate":"2020-06-26T20:34:37.598Z","parentId":"ab92d3babbb2"},"baa14f293e18":{"id":"baa14f293e18","name":"ClickableWrapper.tsx","size":1643,"modDate":"2020-06-21T00:01:01.841Z","parentId":"ab92d3babbb2"},"8081a927a7e5":{"id":"8081a927a7e5","name":"ErrorMessage.tsx","size":689,"modDate":"2020-06-13T20:05:05.310Z","parentId":"ab92d3babbb2"},"40ef8217a3fa":{"id":"40ef8217a3fa","name":"FileThumbnail.tsx","size":711,"modDate":"2020-06-24T22:35:53.353Z","parentId":"ab92d3babbb2"},"7d9bfc8a2631":{"id":"7d9bfc8a2631","name":"HotkeyListener.tsx","size":1174,"modDate":"2020-06-24T23:37:18.194Z","parentId":"ab92d3babbb2"},"020abeee6c77":{"id":"020abeee6c77","name":"index.ts","size":1438,"modDate":"2020-06-26T19:41:41.015Z","parentId":"3710ab721ac1"},"74bb440256a8":{"id":"74bb440256a8","name":"recoil","isDir":true,"modDate":"2020-06-27T15:58:08.298Z","parentId":"3710ab721ac1","childrenIds":["d47280d37e7d","4221309128f9","0185deaabeed","fc2391af492d","e692fa33b2a8","11447a2b4807","f60c6e53c09c","555abc645c09","f63e0de55ede","285a67cb5c09","634d460386d6"],"childrenCount":11},"d47280d37e7d":{"id":"d47280d37e7d","name":"drag-and-drop.recoil.ts","size":162,"modDate":"2020-06-22T00:48:27.651Z","parentId":"74bb440256a8"},"4221309128f9":{"id":"4221309128f9","name":"errors.recoil.ts","size":230,"modDate":"2020-06-22T01:46:33.614Z","parentId":"74bb440256a8"},"0185deaabeed":{"id":"0185deaabeed","name":"file-actions.recoil.ts","size":2496,"modDate":"2020-06-23T23:32:26.896Z","parentId":"74bb440256a8"},"fc2391af492d":{"id":"fc2391af492d","name":"file-list.recoil.ts","size":318,"modDate":"2020-06-22T00:49:59.282Z","parentId":"74bb440256a8"},"e692fa33b2a8":{"id":"e692fa33b2a8","name":"files.recoil.ts","size":1151,"modDate":"2020-06-24T00:16:14.577Z","parentId":"74bb440256a8"},"11447a2b4807":{"id":"11447a2b4807","name":"options.recoil.ts","size":473,"modDate":"2020-06-27T16:40:32.334Z","parentId":"74bb440256a8"},"f60c6e53c09c":{"id":"f60c6e53c09c","name":"search.recoil.ts","size":372,"modDate":"2020-06-22T01:26:58.382Z","parentId":"74bb440256a8"},"555abc645c09":{"id":"555abc645c09","name":"selection.recoil.ts","size":1822,"modDate":"2020-06-22T22:08:00.910Z","parentId":"74bb440256a8"},"f63e0de55ede":{"id":"f63e0de55ede","name":"sort.recoil.ts","size":439,"modDate":"2020-06-27T15:11:10.796Z","parentId":"74bb440256a8"},"285a67cb5c09":{"id":"285a67cb5c09","name":"special-actions.recoil.ts","size":336,"modDate":"2020-06-22T01:12:21.006Z","parentId":"74bb440256a8"},"634d460386d6":{"id":"634d460386d6","name":"thumbnails.recoil.ts","size":283,"modDate":"2020-06-22T00:57:05.276Z","parentId":"74bb440256a8"},"6debd6f88a8c":{"id":"6debd6f88a8c","name":"types","isDir":true,"modDate":"2020-06-27T15:58:30.061Z","parentId":"3710ab721ac1","childrenIds":["aa90ea453dee","0a0e53bef8b5","984a55fd2c4b","be97535c9514","8c4f72c6fcc6","68bd0d53f952","2db78405614d","ac75f5a6538d","6daa196da479","6f566aee5d20","c614fbcdafc0","897b0026e553"],"childrenCount":12},"aa90ea453dee":{"id":"aa90ea453dee","name":"file-actions.types.ts","size":2237,"modDate":"2020-06-27T16:05:44.211Z","parentId":"6debd6f88a8c"},"0a0e53bef8b5":{"id":"0a0e53bef8b5","name":"file-browser.types.ts","size":2315,"modDate":"2020-06-24T00:35:18.809Z","parentId":"6debd6f88a8c"},"984a55fd2c4b":{"id":"984a55fd2c4b","name":"file-list-view.types.ts","size":130,"modDate":"2020-06-21T00:14:30.209Z","parentId":"6debd6f88a8c"},"be97535c9514":{"id":"be97535c9514","name":"files.types.ts","size":1312,"modDate":"2020-06-26T19:51:10.282Z","parentId":"6debd6f88a8c"},"8c4f72c6fcc6":{"id":"8c4f72c6fcc6","name":"icons.types.ts","size":1979,"modDate":"2020-06-27T15:55:35.712Z","parentId":"6debd6f88a8c"},"68bd0d53f952":{"id":"68bd0d53f952","name":"options.types.ts","size":113,"modDate":"2020-06-27T16:00:11.116Z","parentId":"6debd6f88a8c"},"2db78405614d":{"id":"2db78405614d","name":"react.types.ts","size":103,"modDate":"2020-06-21T17:57:14.940Z","parentId":"6debd6f88a8c"},"ac75f5a6538d":{"id":"ac75f5a6538d","name":"selection.types.ts","size":380,"modDate":"2020-06-21T16:44:16.545Z","parentId":"6debd6f88a8c"},"6daa196da479":{"id":"6daa196da479","name":"sort.types.ts","size":333,"modDate":"2020-06-27T14:53:08.079Z","parentId":"6debd6f88a8c"},"6f566aee5d20":{"id":"6f566aee5d20","name":"special-actions.types.ts","size":2054,"modDate":"2020-06-26T16:21:23.796Z","parentId":"6debd6f88a8c"},"c614fbcdafc0":{"id":"c614fbcdafc0","name":"thumbnails.types.ts","size":180,"modDate":"2020-06-21T00:39:18.556Z","parentId":"6debd6f88a8c"},"897b0026e553":{"id":"897b0026e553","name":"validation.types.ts","size":82,"modDate":"2020-06-21T19:57:23.562Z","parentId":"6debd6f88a8c"},"65b108840862":{"id":"65b108840862","name":"util","isDir":true,"modDate":"2020-06-27T15:56:25.883Z","parentId":"3710ab721ac1","childrenIds":["b2a42542a20e","4798d4b59e8e","41fa3f5d488b","685e22b1d976","ca5eb3b982dc","a9ee1b82aad5","eb0e1f8c6642","232f1e4d8fda","038f9f4d5117","86f5f12c541e","54b5be82b9f3","2776e4d24f03","45f838150ad5","208bcd1a24f0","877787c01d44"],"childrenCount":15},"b2a42542a20e":{"id":"b2a42542a20e","name":"constants.ts","size":559,"modDate":"2020-06-24T00:05:15.992Z","parentId":"65b108840862"},"4798d4b59e8e":{"id":"4798d4b59e8e","name":"context.ts","size":1228,"modDate":"2020-06-22T01:13:30.605Z","parentId":"65b108840862"},"41fa3f5d488b":{"id":"41fa3f5d488b","name":"file-action-handlers.ts","size":7535,"modDate":"2020-06-27T16:16:55.142Z","parentId":"65b108840862"},"685e22b1d976":{"id":"685e22b1d976","name":"file-actions-definitions.ts","size":5604,"modDate":"2020-06-27T17:57:28.578Z","parentId":"65b108840862"},"ca5eb3b982dc":{"id":"ca5eb3b982dc","name":"file-actions.ts","size":5891,"modDate":"2020-06-27T16:09:12.232Z","parentId":"65b108840862"},"a9ee1b82aad5":{"id":"a9ee1b82aad5","name":"file-helper.ts","size":3098,"modDate":"2020-06-26T19:51:08.619Z","parentId":"65b108840862"},"eb0e1f8c6642":{"id":"eb0e1f8c6642","name":"file-icon-helper.ts","size":8390,"modDate":"2020-06-26T20:19:47.364Z","parentId":"65b108840862"},"232f1e4d8fda":{"id":"232f1e4d8fda","name":"hooks-helpers.ts","size":2861,"modDate":"2020-06-23T23:36:05.982Z","parentId":"65b108840862"},"038f9f4d5117":{"id":"038f9f4d5117","name":"logger.ts","size":617,"modDate":"2020-06-24T00:22:33.313Z","parentId":"65b108840862"},"86f5f12c541e":{"id":"86f5f12c541e","name":"options.ts","size":1181,"modDate":"2020-06-27T16:40:29.550Z","parentId":"65b108840862"},"54b5be82b9f3":{"id":"54b5be82b9f3","name":"search.ts","size":686,"modDate":"2020-06-23T22:01:38.605Z","parentId":"65b108840862"},"2776e4d24f03":{"id":"2776e4d24f03","name":"selection.ts","size":5872,"modDate":"2020-06-23T21:55:43.856Z","parentId":"65b108840862"},"45f838150ad5":{"id":"45f838150ad5","name":"sort.ts","size":1486,"modDate":"2020-06-27T17:57:27.242Z","parentId":"65b108840862"},"208bcd1a24f0":{"id":"208bcd1a24f0","name":"special-actions.ts","size":11231,"modDate":"2020-06-26T21:17:06.141Z","parentId":"65b108840862"},"877787c01d44":{"id":"877787c01d44","name":"validation.ts","size":12208,"modDate":"2020-06-24T22:29:27.237Z","parentId":"65b108840862"},"ed2b6126cf96":{"id":"ed2b6126cf96","name":"stories","isDir":true,"modDate":"2020-06-27T17:58:05.785Z","parentId":"e598a85f843c","childrenIds":["6fe422fbd8bf","d860c3f42ea2","33c5f337de75","c27df2e26ae7","ebef3c82bc39","e6dc184bb70a","bcfd4e35e859","26f3ad90e8d2","2794f41fe1f8","8a276f11bab4","c89cb3f09718","ff851d69eab4","24798b11527f","2ca5e6578c1e"],"childrenCount":14},"6fe422fbd8bf":{"id":"6fe422fbd8bf","name":"01-Welcome","isDir":true,"modDate":"2020-06-27T11:23:19.743Z","parentId":"ed2b6126cf96","childrenIds":["94a0a695bb21","e968815b2448","ed4d27adf7b1","fc6da36c3383"],"childrenCount":4},"94a0a695bb21":{"id":"94a0a695bb21","name":"01-Welcome.stories.mdx","size":1993,"modDate":"2020-06-27T17:04:37.442Z","parentId":"6fe422fbd8bf"},"e968815b2448":{"id":"e968815b2448","name":"02-Features.stories.mdx","size":1696,"modDate":"2020-06-27T17:06:39.892Z","parentId":"6fe422fbd8bf"},"ed4d27adf7b1":{"id":"ed4d27adf7b1","name":"03-Installation.stories.mdx","size":1037,"modDate":"2020-06-27T11:26:10.479Z","parentId":"6fe422fbd8bf"},"fc6da36c3383":{"id":"fc6da36c3383","name":"04-Immutability.stories.mdx","size":2638,"modDate":"2020-06-27T17:31:05.964Z","parentId":"6fe422fbd8bf"},"d860c3f42ea2":{"id":"d860c3f42ea2","name":"02-Demos","isDir":true,"modDate":"2020-06-27T12:49:16.213Z","parentId":"ed2b6126cf96","childrenIds":["b0ebfc492141","e977835b0c90","c407cb40e028","81a6caba9678"],"childrenCount":4},"b0ebfc492141":{"id":"b0ebfc492141","name":"01-File-Browser-demo.md","size":627,"modDate":"2020-06-27T17:05:57.585Z","parentId":"d860c3f42ea2"},"e977835b0c90":{"id":"e977835b0c90","name":"01-File-Browser-demo.stories.tsx","size":3256,"modDate":"2020-06-27T12:50:21.629Z","parentId":"d860c3f42ea2"},"c407cb40e028":{"id":"c407cb40e028","name":"chonky_source.fs_map.json","size":27738,"modDate":"2020-06-26T21:06:14.974Z","parentId":"d860c3f42ea2"},"81a6caba9678":{"id":"81a6caba9678","name":"demo.fs_map.json","size":31783,"modDate":"2020-06-27T17:24:58.033Z","parentId":"d860c3f42ea2"},"33c5f337de75":{"id":"33c5f337de75","name":"03-File-Browser-basics","isDir":true,"modDate":"2020-06-27T17:47:14.562Z","parentId":"ed2b6126cf96","childrenIds":["3b64eb18c3b0","6f382703c52d","0140a88e7e38","b6bbf29b76e2","282a14205f90","4c6f8ecc93ec","e322cc959550","f4f0aa6c34dc","96ff3b884fe4","82a86b642555","97f808600830","16b30abf1660","394ce48721c8","231521cf8956","5467b00fb8bb","b66897a58d25","ec319382e428","1ca4458edeb5"],"childrenCount":18},"3b64eb18c3b0":{"id":"3b64eb18c3b0","name":"01-Component-hierarchy.md","size":1135,"modDate":"2020-06-24T22:34:18.082Z","parentId":"33c5f337de75"},"6f382703c52d":{"id":"6f382703c52d","name":"01-Component-hierarchy.stories.tsx","size":1374,"modDate":"2020-06-26T20:56:07.911Z","parentId":"33c5f337de75"},"0140a88e7e38":{"id":"0140a88e7e38","name":"02-Displaying-files.md","size":3485,"modDate":"2020-06-26T21:32:52.079Z","parentId":"33c5f337de75"},"b6bbf29b76e2":{"id":"b6bbf29b76e2","name":"02-Displaying-files.stories.tsx","size":2727,"modDate":"2020-06-27T15:00:37.313Z","parentId":"33c5f337de75"},"282a14205f90":{"id":"282a14205f90","name":"03-Specifying-folder.md","size":1101,"modDate":"2020-06-21T14:58:32.883Z","parentId":"33c5f337de75"},"4c6f8ecc93ec":{"id":"4c6f8ecc93ec","name":"03-Specifying-folder.stories.tsx","size":1711,"modDate":"2020-06-26T20:56:40.835Z","parentId":"33c5f337de75"},"e322cc959550":{"id":"e322cc959550","name":"04-File-actions.md","size":2828,"modDate":"2020-06-26T21:51:31.862Z","parentId":"33c5f337de75"},"f4f0aa6c34dc":{"id":"f4f0aa6c34dc","name":"04-File-actions.stories.tsx","size":2212,"modDate":"2020-06-26T21:43:07.186Z","parentId":"33c5f337de75"},"96ff3b884fe4":{"id":"96ff3b884fe4","name":"05-File-action-handler.md","size":2125,"modDate":"2020-06-26T22:11:38.872Z","parentId":"33c5f337de75"},"82a86b642555":{"id":"82a86b642555","name":"05-File-action-handler.stories.tsx","size":2046,"modDate":"2020-06-26T21:27:51.835Z","parentId":"33c5f337de75"},"97f808600830":{"id":"97f808600830","name":"06-Custom-actions.md","size":4026,"modDate":"2020-06-27T15:44:03.654Z","parentId":"33c5f337de75"},"16b30abf1660":{"id":"16b30abf1660","name":"06-Custom-actions.stories.tsx","size":1946,"modDate":"2020-06-26T21:25:33.341Z","parentId":"33c5f337de75"},"394ce48721c8":{"id":"394ce48721c8","name":"07-Thumbnails.md","size":1844,"modDate":"2020-06-27T17:45:29.896Z","parentId":"33c5f337de75"},"231521cf8956":{"id":"231521cf8956","name":"07-Thumbnails.stories.tsx","size":1916,"modDate":"2020-06-27T12:36:44.864Z","parentId":"33c5f337de75"},"5467b00fb8bb":{"id":"5467b00fb8bb","name":"08-Drag-n-drop.md","size":1062,"modDate":"2020-06-26T21:24:59.374Z","parentId":"33c5f337de75"},"b66897a58d25":{"id":"b66897a58d25","name":"08-Drag-n-drop.stories.tsx","size":1487,"modDate":"2020-06-26T21:25:33.345Z","parentId":"33c5f337de75"},"ec319382e428":{"id":"ec319382e428","name":"09-Custom-styling.md","size":1922,"modDate":"2020-06-27T17:56:23.703Z","parentId":"33c5f337de75"},"1ca4458edeb5":{"id":"1ca4458edeb5","name":"09-Custom-styling.stories.tsx","size":519,"modDate":"2020-06-27T17:51:14.403Z","parentId":"33c5f337de75"},"c27df2e26ae7":{"id":"c27df2e26ae7","name":"04-File-Browser-advanced","isDir":true,"modDate":"2020-06-26T21:00:27.563Z","parentId":"ed2b6126cf96","childrenIds":["ff8648f4878f","0197647e6cbd","88eb0a8dff22","ef8879a6a99c","e7b739a7fea5","2df0144f30e0","d7cfb61556c8"],"childrenCount":7},"ff8648f4878f":{"id":"ff8648f4878f","name":"01-Invalid-props.md","size":313,"modDate":"2020-06-13T02:59:08.560Z","parentId":"c27df2e26ae7"},"0197647e6cbd":{"id":"0197647e6cbd","name":"01-Invalid-props.stories.tsx","size":1523,"modDate":"2020-06-26T20:58:42.997Z","parentId":"c27df2e26ae7"},"88eb0a8dff22":{"id":"88eb0a8dff22","name":"02-Virtualization.md","size":89,"modDate":"2020-06-13T03:20:21.046Z","parentId":"c27df2e26ae7"},"ef8879a6a99c":{"id":"ef8879a6a99c","name":"02-Virtualization.stories.tsx","size":1415,"modDate":"2020-06-26T20:58:57.513Z","parentId":"c27df2e26ae7"},"e7b739a7fea5":{"id":"e7b739a7fea5","name":"03-Disable-default-actions.md","size":1262,"modDate":"2020-06-21T20:47:48.716Z","parentId":"c27df2e26ae7"},"2df0144f30e0":{"id":"2df0144f30e0","name":"03-Disable-default-actions.stories.tsx","size":1754,"modDate":"2020-06-26T20:59:27.448Z","parentId":"c27df2e26ae7"},"d7cfb61556c8":{"id":"d7cfb61556c8","name":"index.ts","size":53,"modDate":"2020-06-13T02:56:36.099Z","parentId":"c27df2e26ae7"},"ebef3c82bc39":{"id":"ebef3c82bc39","name":"05-API-Reference","isDir":true,"modDate":"2020-06-26T21:00:44.055Z","parentId":"ed2b6126cf96","childrenIds":["ebdfc12dbc7d"],"childrenCount":1},"ebdfc12dbc7d":{"id":"ebdfc12dbc7d","name":"02-Built-in-actions.stories.mdx","size":424,"modDate":"2020-06-27T15:03:48.694Z","parentId":"ebef3c82bc39"},"e6dc184bb70a":{"id":"e6dc184bb70a","name":"Chonky-header.mdx","size":1449,"modDate":"2020-06-26T21:19:48.526Z","parentId":"ed2b6126cf96"},"bcfd4e35e859":{"id":"bcfd4e35e859","name":"Live-examples.md","size":517,"modDate":"2020-06-16T00:30:43.742Z","parentId":"ed2b6126cf96"},"26f3ad90e8d2":{"id":"26f3ad90e8d2","name":"Unstable-warning.md","size":411,"modDate":"2020-06-27T11:29:20.752Z","parentId":"ed2b6126cf96"},"2794f41fe1f8":{"id":"2794f41fe1f8","name":"markdown.d.ts","size":140,"modDate":"2020-06-13T03:01:56.018Z","parentId":"ed2b6126cf96"},"8a276f11bab4":{"id":"8a276f11bab4","name":"story-helpers.tsx","size":5769,"modDate":"2020-06-27T17:50:51.591Z","parentId":"ed2b6126cf96"},"c89cb3f09718":{"id":"c89cb3f09718","name":"storybook.css","size":1689,"modDate":"2020-06-27T13:13:25.521Z","parentId":"ed2b6126cf96"},"ff851d69eab4":{"id":"ff851d69eab4","name":"storybook.css.map","size":413,"modDate":"2020-06-27T13:13:25.517Z","parentId":"ed2b6126cf96"},"24798b11527f":{"id":"24798b11527f","name":"storybook.scss","size":1787,"modDate":"2020-06-27T13:13:25.237Z","parentId":"ed2b6126cf96"},"2ca5e6578c1e":{"id":"2ca5e6578c1e","name":"tsconfig.json","size":214,"modDate":"2020-06-21T19:53:12.206Z","parentId":"ed2b6126cf96"},"da51714da4cb":{"id":"da51714da4cb","name":"style","isDir":true,"modDate":"2020-06-18T00:35:58.421Z","parentId":"e598a85f843c","childrenIds":["a9ce520a5b0c","6c526e56e87a","8532e9041309","0cdb99592058","132999c90c29","74b709848c73","416f17ff9ff3","d6bc6238e1fb","53706ac5ca55","0879236d82b3","81fd03ad4d32"],"childrenCount":11},"a9ce520a5b0c":{"id":"a9ce520a5b0c","name":"_file-entry.scss","size":5815,"modDate":"2020-06-27T16:48:24.751Z","parentId":"da51714da4cb"},"6c526e56e87a":{"id":"6c526e56e87a","name":"_file-list.scss","size":401,"modDate":"2020-06-21T01:11:21.072Z","parentId":"da51714da4cb"},"8532e9041309":{"id":"8532e9041309","name":"_file-search.scss","size":1463,"modDate":"2020-06-27T12:57:13.147Z","parentId":"da51714da4cb"},"0cdb99592058":{"id":"0cdb99592058","name":"_file-toolbar-buttons.scss","size":3362,"modDate":"2020-06-27T16:10:43.899Z","parentId":"da51714da4cb"},"132999c90c29":{"id":"132999c90c29","name":"_file-toolbar.scss","size":2552,"modDate":"2020-06-20T00:17:38.792Z","parentId":"da51714da4cb"},"74b709848c73":{"id":"74b709848c73","name":"_shared.scss","size":2005,"modDate":"2020-06-26T11:25:11.323Z","parentId":"da51714da4cb"},"416f17ff9ff3":{"id":"416f17ff9ff3","name":"_text-placeholder.scss","size":462,"modDate":"2020-06-16T21:02:53.404Z","parentId":"da51714da4cb"},"d6bc6238e1fb":{"id":"d6bc6238e1fb","name":"_util.scss","size":3487,"modDate":"2020-06-26T15:00:35.547Z","parentId":"da51714da4cb"},"53706ac5ca55":{"id":"53706ac5ca55","name":"main.css","size":15318,"modDate":"2020-06-27T16:48:25.131Z","parentId":"da51714da4cb"},"0879236d82b3":{"id":"0879236d82b3","name":"main.css.map","size":3868,"modDate":"2020-06-27T16:48:25.131Z","parentId":"da51714da4cb"},"81fd03ad4d32":{"id":"81fd03ad4d32","name":"main.scss","size":184,"modDate":"2020-06-18T00:36:05.641Z","parentId":"da51714da4cb"},"c58b591bd793":{"id":"c58b591bd793","name":"test","isDir":true,"modDate":"2020-06-21T18:35:39.636Z","parentId":"e598a85f843c","childrenIds":["867012021ee7"],"childrenCount":1},"867012021ee7":{"id":"867012021ee7","name":"storyshots.test.ts","size":112,"modDate":"2020-06-21T18:35:44.780Z","parentId":"c58b591bd793"},"eca6a4fd0d17":{"id":"eca6a4fd0d17","name":"tsconfig.json","size":676,"modDate":"2020-06-21T18:58:50.480Z","parentId":"e598a85f843c"},"d14aa4c43d90":{"id":"d14aa4c43d90","name":"typedoc.js","size":171,"modDate":"2020-06-17T22:25:27.884Z","parentId":"e598a85f843c"},"b53aa057fad1":{"id":"b53aa057fad1","name":"Images with thumbnails","isDir":true,"modDate":"2020-06-27T12:28:53.648Z","childrenIds":["353f63dbd169","28f0f5f391eb","d1b9dc5457b8","0c8fa73e4685","0b74a148c890","7cd701884c5d","6655c71cdc8d","653f1108cf87"],"childrenCount":8,"parentId":"qwerty123456"},"353f63dbd169":{"id":"353f63dbd169","name":"Dotonbori.jpg","size":212024,"modDate":"2020-06-27T12:16:46.392Z","parentId":"b53aa057fad1","thumbnailUrl":"./thumbnails/353f63dbd169.jpg"},"28f0f5f391eb":{"id":"28f0f5f391eb","name":"Itsukushima.jpg","size":90820,"modDate":"2020-06-27T12:14:34.529Z","parentId":"b53aa057fad1","thumbnailUrl":"./thumbnails/28f0f5f391eb.jpg"},"d1b9dc5457b8":{"id":"d1b9dc5457b8","name":"Kyoto Station.jpg","size":204463,"modDate":"2020-06-27T12:21:44.549Z","parentId":"b53aa057fad1","thumbnailUrl":"./thumbnails/d1b9dc5457b8.jpg"},"0c8fa73e4685":{"id":"0c8fa73e4685","name":"Mount Fuji.jpg","size":62851,"modDate":"2020-06-27T12:13:19.034Z","parentId":"b53aa057fad1","thumbnailUrl":"./thumbnails/0c8fa73e4685.jpg"},"0b74a148c890":{"id":"0b74a148c890","name":"Osaka Castle.jpg","size":87531,"modDate":"2020-06-27T12:15:28.237Z","parentId":"b53aa057fad1","thumbnailUrl":"./thumbnails/0b74a148c890.jpg"},"7cd701884c5d":{"id":"7cd701884c5d","name":"Tokyo Skytree.jpg","size":164850,"modDate":"2020-06-27T12:21:21.209Z","parentId":"b53aa057fad1","thumbnailUrl":"./thumbnails/7cd701884c5d.jpg"},"6655c71cdc8d":{"id":"6655c71cdc8d","name":"Tokyo.jpg","size":109441,"modDate":"2020-06-27T12:17:34.935Z","parentId":"b53aa057fad1","thumbnailUrl":"./thumbnails/6655c71cdc8d.jpg"},"653f1108cf87":{"id":"653f1108cf87","name":"Yoshinoyama.jpg","size":201866,"modDate":"2020-06-27T12:22:07.869Z","parentId":"b53aa057fad1","thumbnailUrl":"./thumbnails/653f1108cf87.jpg"},"b6667221f24b":{"id":"b6667221f24b","name":"Files with long names","isDir":true,"modDate":"2020-06-27T13:38:08.776Z","childrenIds":["8d6a608dbd08","6b8711a21780","4a2c1afcc755"],"childrenCount":3,"parentId":"qwerty123456"},"8d6a608dbd08":{"id":"8d6a608dbd08","name":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas quis nunc diam. Etiam accumsan, diam non sodales sollicitudin.txt","size":0,"modDate":"2020-06-27T13:38:08.776Z","parentId":"b6667221f24b"},"6b8711a21780":{"id":"6b8711a21780","name":"Sed at tempus arcu. Vestibulum viverra nisl eget mi porta sodales. In suscipit luctus vestibulum.pdf","size":0,"modDate":"2020-06-27T13:35:40.786Z","parentId":"b6667221f24b"},"4a2c1afcc755":{"id":"4a2c1afcc755","name":"this_is_a_python_script_with_an_extremely_long_name_that_tries_to_be_descriptive_but_ends_up_being_too_verbose.py","size":0,"modDate":"2020-06-27T13:31:15.978Z","parentId":"b6667221f24b"},"a9fd7c8a04db":{"id":"a9fd7c8a04db","name":"15 nested folders","isDir":true,"modDate":"2020-06-27T13:32:07.253Z","childrenIds":["e3bcade90390"],"childrenCount":1,"parentId":"qwerty123456"},"e3bcade90390":{"id":"e3bcade90390","name":"Level 1","isDir":true,"modDate":"2020-06-27T13:32:10.805Z","parentId":"a9fd7c8a04db","childrenIds":["99a4ce856444"],"childrenCount":1},"99a4ce856444":{"id":"99a4ce856444","name":"Level 2","isDir":true,"modDate":"2020-06-27T13:32:14.109Z","parentId":"e3bcade90390","childrenIds":["7263c24adb31"],"childrenCount":1},"7263c24adb31":{"id":"7263c24adb31","name":"Level 3","isDir":true,"modDate":"2020-06-27T13:32:17.225Z","parentId":"99a4ce856444","childrenIds":["ca1a1fd357a3"],"childrenCount":1},"ca1a1fd357a3":{"id":"ca1a1fd357a3","name":"Level 4","isDir":true,"modDate":"2020-06-27T13:32:20.329Z","parentId":"7263c24adb31","childrenIds":["f5962105e6bf"],"childrenCount":1},"f5962105e6bf":{"id":"f5962105e6bf","name":"Level 5","isDir":true,"modDate":"2020-06-27T13:32:24.209Z","parentId":"ca1a1fd357a3","childrenIds":["eb99622b6bf7"],"childrenCount":1},"eb99622b6bf7":{"id":"eb99622b6bf7","name":"Level 6","isDir":true,"modDate":"2020-06-27T13:32:28.661Z","parentId":"f5962105e6bf","childrenIds":["eb6ef39dcf7e"],"childrenCount":1},"eb6ef39dcf7e":{"id":"eb6ef39dcf7e","name":"Level 7","isDir":true,"modDate":"2020-06-27T13:32:33.273Z","parentId":"eb99622b6bf7","childrenIds":["a09fd90e8a3e"],"childrenCount":1},"a09fd90e8a3e":{"id":"a09fd90e8a3e","name":"Level 8","isDir":true,"modDate":"2020-06-27T13:32:36.993Z","parentId":"eb6ef39dcf7e","childrenIds":["8e7120860c41"],"childrenCount":1},"8e7120860c41":{"id":"8e7120860c41","name":"Level 9","isDir":true,"modDate":"2020-06-27T13:32:40.877Z","parentId":"a09fd90e8a3e","childrenIds":["3dc12662a950"],"childrenCount":1},"3dc12662a950":{"id":"3dc12662a950","name":"Level 10","isDir":true,"modDate":"2020-06-27T13:32:44.009Z","parentId":"8e7120860c41","childrenIds":["1062ab9dec65"],"childrenCount":1},"1062ab9dec65":{"id":"1062ab9dec65","name":"Level 11","isDir":true,"modDate":"2020-06-27T13:32:46.497Z","parentId":"3dc12662a950","childrenIds":["ca09fe075bf4"],"childrenCount":1},"ca09fe075bf4":{"id":"ca09fe075bf4","name":"Level 12","isDir":true,"modDate":"2020-06-27T13:32:49.597Z","parentId":"1062ab9dec65","childrenIds":["29fda22251ec"],"childrenCount":1},"29fda22251ec":{"id":"29fda22251ec","name":"Level 13","isDir":true,"modDate":"2020-06-27T13:32:52.861Z","parentId":"ca09fe075bf4","childrenIds":["8270c2231d78"],"childrenCount":1},"8270c2231d78":{"id":"8270c2231d78","name":"Level 14","isDir":true,"modDate":"2020-06-27T13:32:56.657Z","parentId":"29fda22251ec","childrenIds":["e3c798d6abf7"],"childrenCount":1},"e3c798d6abf7":{"id":"e3c798d6abf7","name":"Level 15","isDir":true,"modDate":"2020-06-27T13:34:35.083Z","parentId":"8270c2231d78","childrenIds":["d2551145553d"],"childrenCount":1},"d2551145553d":{"id":"d2551145553d","name":"Bigfoot Footage.avi","size":3601921,"modDate":"2020-06-27T13:34:35.083Z","parentId":"e3c798d6abf7"},"549c1f93247a":{"id":"549c1f93247a","name":"Files that load forever","isDir":true,"modDate":"2020-06-27T13:58:16.428Z","childrenIds":["34308fe0264f","79e0e1372800","a358142e72e3"],"childrenCount":3,"parentId":"qwerty123456"},"34308fe0264f":null,"79e0e1372800":null,"a358142e72e3":null}}')},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("5o43")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ax0f")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("sVFb")},,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("/Qos")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("j4Sf")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("LUwd")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("OZaJ")},,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("F63i")},,,,,,,,,,,,,,,function(module,exports){},,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("3yYM")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("aYSr")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("P2aG")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("DfhM")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("LqLs")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("pu3o")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("6U7i")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Cm4o")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("7nmT")},,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("GFpt")},,,,,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("+kY7")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("5BYb")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("5878")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("m9LP")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("l1C2")},,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("CUMQ")},,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("3voH")},,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("cww3")},,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("N4z3")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("1Mu/")},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports){},function(module,exports){},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){__webpack_require__(358),__webpack_require__(383),__webpack_require__(384),__webpack_require__(424),__webpack_require__(554),__webpack_require__(593),__webpack_require__(598),module.exports=__webpack_require__(605)},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ARua")},,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("9JhN")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("PjZX")},,,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(195)},,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("JY+C")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ZUdG")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("PuIx")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("tQbP")},,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("dSaG")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("hQin")},,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("LJ7e")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("I2fK")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("DY47")},,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("3kp9")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("/bc2")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("/JuR")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("+Bxv")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("muFx")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Wci6")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("WoRU")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("o3fS")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("JmTi")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("xaiR")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("SlD/")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Monn")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("iKE+")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("fmNP")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("uFXj")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("V0IW")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("OCSl")},,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("kA4r")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Blm6")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ssvU")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("lZm3")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Ee2X")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("b2e3")},,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("maj8")},,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("H87J")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("S3pA")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("O1Sc")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("zF5n")},,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("kvVz")},,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("tJVe")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("nuol")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("PjJO")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("DpO5")},,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Kkar")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("2q8g")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("nDih")},,,,,,,,,,function(module,exports,__webpack_require__){"use strict";__webpack_require__(4),__webpack_require__(29),__webpack_require__(44),__webpack_require__(48),__webpack_require__(27),__webpack_require__(599),__webpack_require__(601),__webpack_require__(9),__webpack_require__(45);var _clientApi=__webpack_require__(53),_clientLogger=__webpack_require__(35),_configFilename=__webpack_require__(604);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(_configFilename.args||_configFilename.argTypes)&&_clientLogger.logger.warn("Invalid args/argTypes in config, ignoring.",JSON.stringify({args:_configFilename.args,argTypes:_configFilename.argTypes})),_configFilename.decorators&&_configFilename.decorators.forEach((function(decorator){return(0,_clientApi.addDecorator)(decorator)})),(_configFilename.parameters||_configFilename.globalArgs||_configFilename.globalArgTypes)&&(0,_clientApi.addParameters)(_objectSpread(_objectSpread({},_configFilename.parameters),{},{globalArgs:_configFilename.globalArgs,globalArgTypes:_configFilename.globalArgTypes})),_configFilename.argTypesEnhancers&&_configFilename.argTypesEnhancers.forEach((function(enhancer){return(0,_clientApi.addArgTypesEnhancer)(enhancer)}))},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ct80")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("oD4t")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("2sZ7")},function(module,exports){},function(module,exports,__webpack_require__){"use strict";(function(module){var _framework=__webpack_require__(195);module._StorybookPreserveDecorators=!0,(0,_framework.configure)([__webpack_require__(606)],module)}).call(this,__webpack_require__(144)(module))},function(module,exports,__webpack_require__){var map={"./01-Welcome/01-Welcome.stories.mdx":607,"./01-Welcome/02-Features.stories.mdx":615,"./01-Welcome/03-Installation.stories.mdx":616,"./01-Welcome/04-Immutability.stories.mdx":617,"./02-Demos/01-File-Browser-demo.stories.tsx":754,"./03-File-Browser-basics/01-Component-hierarchy.stories.tsx":755,"./03-File-Browser-basics/02-Displaying-files.stories.tsx":756,"./03-File-Browser-basics/03-Specifying-folder.stories.tsx":757,"./03-File-Browser-basics/04-File-actions.stories.tsx":758,"./03-File-Browser-basics/05-File-action-handler.stories.tsx":759,"./03-File-Browser-basics/06-Custom-actions.stories.tsx":760,"./03-File-Browser-basics/07-Thumbnails.stories.tsx":761,"./03-File-Browser-basics/08-Drag-n-drop.stories.tsx":762,"./03-File-Browser-basics/09-Custom-styling.stories.tsx":763,"./04-File-Browser-advanced/01-Invalid-props.stories.tsx":764,"./04-File-Browser-advanced/02-Virtualization.stories.tsx":765,"./04-File-Browser-advanced/03-Disable-default-actions.stories.tsx":766,"./05-API-Reference/02-Built-in-actions.stories.mdx":753};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=606},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(4),__webpack_require__(20),__webpack_require__(6),__webpack_require__(9),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(34),_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(60),_story_helpers__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(8);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Meta=function makeShortcode(name){return function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",props)}}("Meta"),layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(Meta,{title:"".concat(_story_helpers__WEBPACK_IMPORTED_MODULE_8__.a.Welcome,"|Introduction"),mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__.a,{mdxType:"ChonkyHeader"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"introduction"},"Introduction"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("strong",{parentName:"p"},"Chonky is a file browser component for React.")," It tries to recreate the native file\nbrowsing experience in your browser. Chonky supports drag & drop, file selection,\nimage thumbnails, and much more!"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"p"},{href:"https://github.com/TimboKZ/Chonky",target:"_blank",rel:"nofollow noopener noreferrer"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("strong",{parentName:"a"},"View on Github"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"philosophy"},"Philosophy"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Please read this section to understand what Chonky is and is not."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h3",{id:"1-chonky-is-the-presentation-layer"},"1. Chonky is the presentation layer."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Chonky takes a list of files and shows them to the user. It does not and should not\nknow where the files come from, nor should it know how file operations are carried out."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"That said, when it comes to file browser UI, ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("strong",{parentName:"p"},"Chonky tries to cover as many ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("em",{parentName:"strong"},"UI"),"\nfeatures as possible.")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h3",{id:"2-chonky-is-just-the-tip-of-the-fs-iceberg-you-will-need-to-implement-many-things-yourself"},"2. Chonky is just the tip of the FS iceberg. You will need to implement many things yourself."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Chonky saves you ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("strong",{parentName:"p"},"a lot")," of time by providing a pretty file browser UI for your\nusers. However, apart from a pretty UI, working with the file system requires a lot of\ncustom business logic. ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("strong",{parentName:"p"},"You will have to implement this business logic yourself.")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"In the future, Chonky might provide extensions like S3 or FTP adapters, but this is\nnot the case today."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h3",{id:"3-developing-file-browsers-is-hard-each-use-case-is-unique"},"3. Developing file browsers is hard. Each use case is unique."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"It is not possible for Chonky to address ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("em",{parentName:"p"},"all")," use cases explicitly. To solve this\nproblem, Chonky was written to be very flexible, and ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("em",{parentName:"p"},"all")," internal interfaces and\ncontexts are exported in some way. ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("strong",{parentName:"p"},"Feel free to dive into the source code of Chonky\nand customise logic as necessary"),"."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"However, before you start making adjustments to Chonky's source code, please\n",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"p"},{href:"https://github.com/TimboKZ/Chonky/issues",target:"_blank",rel:"nofollow noopener noreferrer"}),"create an issue")," on GitHub describing your\nuse case. There's a good chance your use case is supported, just not documented."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null)," ")}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"".concat(_story_helpers__WEBPACK_IMPORTED_MODULE_8__.a.Welcome,"|Introduction"),includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},,,,,function(module,exports,__webpack_require__){var api=__webpack_require__(127),content=__webpack_require__(613);"string"==typeof(content=content.__esModule?content.default:content)&&(content=[[module.i,content,""]]);var options={insert:"head",singleton:!1};api(content,options);module.exports=content.locals||{}},function(module,exports,__webpack_require__){(exports=__webpack_require__(128)(!1)).push([module.i,'.sbdocs-content .sbdocs-p, .sbdocs-content .sbdocs-p *,\n.sbdocs-content .sbdocs-ul,\n.sbdocs-content .sbdocs-ul *,\n.sbdocs-content .sbdocs-ol,\n.sbdocs-content .sbdocs-ol * {\n  line-height: 25px !important;\n  font-size: 17px !important;\n}\n.sbdocs-content .sbdocs-p code,\n.sbdocs-content .sbdocs-ul code,\n.sbdocs-content .sbdocs-ol code {\n  padding: 0 5px !important;\n  font-size: 14px !important;\n}\n.sbdocs-content .sbdocs-h2 {\n  margin-top: 40px !important;\n}\n\n.sbdocs-preview {\n  border: solid 3px #09f !important;\n  margin: 50px 0 40px 0 !important;\n  border-radius: 3px !important;\n  position: relative !important;\n  overflow: visible !important;\n}\n.sbdocs-preview:before {\n  border-top-right-radius: 3px;\n  border-top-left-radius: 3px;\n  font-family: sans-serif;\n  content: "Live Example";\n  background-color: #09f;\n  position: absolute;\n  margin-left: -3px;\n  margin-top: -25px;\n  font-weight: bold;\n  line-height: 25px;\n  font-size: 14px;\n  padding: 0 8px;\n  display: block;\n  height: 25px;\n  color: #fff;\n}\n.sbdocs-preview > div:first-child > div:first-child {\n  padding: 10px 10px 30px 10px !important;\n  margin: 0 !important;\n  overflow: visible !important;\n}\n\n.noty_bar {\n  line-height: 24px;\n}\n.noty_bar code {\n  background-color: rgba(255, 255, 255, 0.7);\n  display: inline-block;\n  border-radius: 4px;\n  line-height: 20px;\n  padding: 0 4px;\n}\n\n.unstable-warning blockquote {\n  background-color: #fde0e0;\n  border-color: #9e0808;\n  margin-bottom: 40px;\n  padding: 20px 30px;\n}\n\n.live-example-action {\n  font-family: sans-serif !important;\n  font-size: 1.2em !important;\n  margin-bottom: 16px;\n  text-align: center;\n  color: #5f0707;\n}\n',""]),module.exports=exports},,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(4),__webpack_require__(20),__webpack_require__(6),__webpack_require__(9),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(34),_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(60),_story_helpers__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(8);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Meta=function makeShortcode(name){return function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",props)}}("Meta"),layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(Meta,{title:"".concat(_story_helpers__WEBPACK_IMPORTED_MODULE_8__.a.Welcome,"|Chonky features"),mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__.a,{mdxType:"ChonkyHeader"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"chonky-features"},"Chonky features:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("blockquote",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",{parentName:"blockquote"},"Want to request a feature? Post a feature request in Chonky's\n",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"p"},{href:"https://github.com/TimboKZ/Chonky/issues",target:"_blank",rel:"nofollow noopener noreferrer"}),"GitHub issues"),".")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("ul",{className:"contains-task-list"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Backend-agnostic - files can come from any source (remote server, S3, virtual FS)."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports file sorting."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports text search."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports drag & drop."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","Mobile-friendly design."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports image thumbnails."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports keyboard shortcuts."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports common and custom file actions."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Provides unique icons for each file extension."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("strong",{parentName:"li"},"(WIP)")," Supports ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("em",{parentName:"li"},"detailed list")," and ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("em",{parentName:"li"},"thumbnails")," views."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports file selections (excluding drag selection, ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("em",{parentName:"li"},"for now"),")."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports loading animations and async thumbnail generation."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Performs well with large file collections thanks to\n",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"li"},{href:"https://github.com/bvaughn/react-virtualized",target:"_blank",rel:"nofollow noopener noreferrer"}),"virtualization"),".")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h2",{id:"notes-about-1x"},"Notes about 1.x"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"Chonky ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"li"},"1.x")," is a complete rewrite of ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"li"},"0.x"),", now using hooks under the hood!"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"Chonky ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"li"},"1.x")," package is 5 times smaller than ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"li"},"0.x")," version when minified & gzipped!"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"Internal state management is done using ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"li"},{href:"https://recoiljs.org/",target:"_blank",rel:"nofollow noopener noreferrer"}),"Recoil"),"."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"Keyboard shortcuts are implemented using ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"li"},{href:"https://wangchujiang.com/hotkeys/",target:"_blank",rel:"nofollow noopener noreferrer"}),"HotKeys.js"),"."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"File sorting functionality uses ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"li"},{href:"https://www.npmjs.com/package/fast-sort",target:"_blank",rel:"nofollow noopener noreferrer"}),"fast-sort"),"."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"Text search is implemented using ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"li"},{href:"https://www.npmjs.com/package/fuzzy-search",target:"_blank",rel:"nofollow noopener noreferrer"}),"fuzzy-search"),"."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"Drag & drop uses ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"li"},{href:"https://github.com/react-dnd/react-dnd",target:"_blank",rel:"nofollow noopener noreferrer"}),"react-dnd"),".")))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"".concat(_story_helpers__WEBPACK_IMPORTED_MODULE_8__.a.Welcome,"|Chonky features"),includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(4),__webpack_require__(20),__webpack_require__(6),__webpack_require__(9),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(34),_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(60),_story_helpers__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(8);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Meta=function makeShortcode(name){return function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",props)}}("Meta"),layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(Meta,{title:"".concat(_story_helpers__WEBPACK_IMPORTED_MODULE_8__.a.Welcome,"|Installation & usage"),mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__.a,{mdxType:"ChonkyHeader"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"installation"},"Installation"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Add Chonky to your NPM project:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("code",_extends({parentName:"pre"},{className:"language-bash"}),"npm install chonky\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Then, import relevant components and styles:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("code",_extends({parentName:"pre"},{className:"language-js"}),"import 'chonky/style/main.css';\nimport { FileBrowser, FileList } from 'chonky';\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"And you're good to go! Check other sections in the documentation to see how Chonky\ncomponents can be used."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h3",{id:"usage-with-typescript"},"Usage with Typescript"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Chonky was built using Typescript. For your static typing needs, many of the internal\ntypes and interfaces are exported. Some types are generic, to make it easier for you\nto integrate Chonky into you Typescript package."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"If you're also using Typescript, you can add Chonky types to your project using\nstandard imports:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("code",_extends({parentName:"pre"},{className:"language-ts"}),"// FileArray is a TS type\nimport { FileArray } from 'chonky';\n\nconst myFiles: FileArray = [\n    {\n        id: 'abD3',\n        name: 'README.txt',\n    },\n    null,\n];\n")))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"".concat(_story_helpers__WEBPACK_IMPORTED_MODULE_8__.a.Welcome,"|Installation & usage"),includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(4),__webpack_require__(20),__webpack_require__(6),__webpack_require__(9),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(34),_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(60),_story_helpers__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(8);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Meta=function makeShortcode(name){return function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",props)}}("Meta"),layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(Meta,{title:"".concat(_story_helpers__WEBPACK_IMPORTED_MODULE_8__.a.Welcome,"|Immutability"),mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__.a,{mdxType:"ChonkyHeader"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"immutability-in-chonky"},"Immutability in Chonky"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Chonky assumes that the objects and arrays you provide through ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"p"},"FileBrowser")," props (or\nany other props) are ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("strong",{parentName:"p"},"immutable"),". It is very important for your application to\nguarantee immutability, otherwise Chonky components will not update correctly."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h2",{id:"what-is-immutability"},"What is immutability?"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Immutability is a crucial concept in React performance optimizations, and is used in\nmany React libraries, such as Redux. If you're a seasoned React developer, you\nalready know what immutability is. If you're new to React, you should learn this\nconcept as soon as possible."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"I will not go into the details of data immutability here. Instead, I'll point you to\nsome useful resources which you can study yourself:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"li"},{href:"https://daveceddia.com/react-redux-immutability-guide/",target:"_blank",rel:"nofollow noopener noreferrer"}),"Dave Ceddia - Immutability in React and Redux: The Complete Guide")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"li"},{href:"https://redux.js.org/faq/immutable-data",target:"_blank",rel:"nofollow noopener noreferrer"}),"Redux FAX - Immutable Data")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"li"},{href:"https://stackoverflow.com/questions/34958775/why-should-objects-in-redux-be-immutable/34962065#34962065",target:"_blank",rel:"nofollow noopener noreferrer"}),"StackOverflow - Why should objects in Redux be immutable?"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h2",{id:"example-of-a-mutable-data-mistake"},"Example of a mutable data mistake"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"A common mistake for new Chonky users is mutating the ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"p"},"files")," array directly. For\nexample, we pass Chonky some initial file array:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("code",_extends({parentName:"pre"},{className:"language-tsx"}),"const [files, setFiles] = React.useState([]);\n\n<FileBrowser files={files}>\n    <FileList />\n</FileBrowser>;\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"And later, we try to add a new file by ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("em",{parentName:"p"},"mutating")," (changing without creating a new\ncopy) the array:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("code",_extends({parentName:"pre"},{className:"language-tsx"}),"setFiles((files) => {\n    // vvv This is bad, don't do this!\n    files.push({ id: 'vdSw', name: 'passwords.txt' });\n    // Newer React versions will actually throw an error if you try to extend the array.\n    return files;\n});\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"If this update goes through without React throwing an error, you will notice that\nyour new file will not appear in the file browser. This is because the array\nreference did not change (we reused the same array), and Chonky thinks it doesn't\nneed to re-render."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"The correct way to add a new file is to create a new copy of the array and populate\nit using the ES6 spread operator:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("code",_extends({parentName:"pre"},{className:"language-tsx"}),"setFiles((oldFiles) => {\n    const newFiles = [...oldFiles, { id: 'VsE', name: 'robots.txt' }];\n    return newFiles;\n});\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"With the code above, the array reference will change after the update, and Chonky\nwill show your new file in the file browser. The same rules apply to ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"p"},"folderChain"),",\n",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"p"},"fileActions")," and any other object or array you pass to Chonky."))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"".concat(_story_helpers__WEBPACK_IMPORTED_MODULE_8__.a.Welcome,"|Immutability"),includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},function(module,exports,__webpack_require__){(exports=__webpack_require__(128)(!1)).push([module.i,'.chonky-fill-parent {\n  height: 100%;\n}\n\n.chonky-no-select {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n.chonky-root {\n  border: solid 1px #e4e4e4;\n  border-radius: 4px;\n  padding: 7.5px;\n  touch-action: manipulation;\n  font-size: 15px;\n  font-family: sans-serif;\n  flex-direction: column;\n  position: relative;\n  text-align: left;\n  display: flex;\n  height: 100%;\n}\n\n.chonky-error {\n  border: solid 1px rgba(108, 72, 72, 0.11);\n  margin-bottom: 7.5px;\n  border-radius: 4px;\n  background-color: #fdebeb;\n  font-family: sans-serif;\n  color: #8e2121;\n  padding: 1em;\n}\n.chonky-error-name {\n  opacity: 0.5;\n}\n.chonky-error ul {\n  padding-top: 0.1em;\n  margin: 0;\n}\n.chonky-error li {\n  margin-top: 0.5em;\n}\n\n.chonky-tooltip {\n  position: relative;\n}\n.chonky-tooltip:hover::before, .chonky-tooltip:hover::after, .chonky-tooltip:focus::before, .chonky-tooltip:focus::after, .chonky-tooltip:active::before, .chonky-tooltip:active::after {\n  display: block;\n  opacity: 1;\n}\n.chonky-tooltip::before, .chonky-tooltip::after {\n  transition: opacity 100ms ease-in-out;\n  pointer-events: none;\n  position: absolute;\n  display: none;\n  z-index: 9999;\n  bottom: 100%;\n  opacity: 0;\n  left: 50%;\n}\n.chonky-tooltip::before {\n  transform: translateX(-75%);\n  background-color: rgba(0, 0, 0, 0.8);\n  border-radius: 2px;\n  content: attr(data-tooltip);\n  padding: 0.4em 0.5em;\n  white-space: nowrap;\n  margin-bottom: 6px;\n  line-height: 1em;\n  color: #fff;\n  font-size: 0.8em;\n  height: 1em;\n}\n.chonky-tooltip::after {\n  transform: translateX(-50%) rotate(45deg);\n  border: solid 2px rgba(0, 0, 0, 0.8);\n  border-left-color: transparent;\n  border-top-color: transparent;\n  margin-bottom: 4px;\n  content: "";\n}\n\n.chonky-text-placeholder {\n  -webkit-animation: loading-placeholder 1.5s infinite linear;\n  animation: loading-placeholder 1.5s infinite linear;\n  background-color: #ccc;\n  white-space: nowrap;\n  border-radius: 4px;\n  overflow: hidden;\n  min-width: 20px;\n  max-width: 40%;\n}\n@-webkit-keyframes loading-placeholder {\n  0% {\n    opacity: 0.2;\n  }\n  50% {\n    opacity: 0.4;\n  }\n  100% {\n    opacity: 0.2;\n  }\n}\n@keyframes loading-placeholder {\n  0% {\n    opacity: 0.2;\n  }\n  50% {\n    opacity: 0.4;\n  }\n  100% {\n    opacity: 0.2;\n  }\n}\n\n.chonky-toolbar {\n  justify-content: space-between;\n  flex-wrap: wrap-reverse;\n  flex-direction: row;\n  display: flex;\n}\n.chonky-toolbar-side {\n  margin-bottom: 7.5px;\n  flex-direction: row;\n  padding-bottom: 0;\n  display: flex;\n  flex-grow: 1;\n}\n.chonky-toolbar-side-left {\n  flex-grow: 10000;\n}\n.chonky-toolbar-side-right {\n  justify-content: space-between;\n}\n.chonky-toolbar-side-inside {\n  flex-direction: row;\n  display: flex;\n}\n.chonky-toolbar-side-inside > * {\n  vertical-align: middle;\n  display: inline-block;\n}\n@media screen and (max-width: 400px) {\n  .chonky-toolbar {\n    flex-direction: column-reverse;\n  }\n  .chonky-side-right {\n    justify-content: space-between;\n  }\n}\n.chonky-folder-chain-entry, .chonky-folder-chain-separator {\n  vertical-align: middle;\n  display: inline-block;\n}\n.chonky-folder-chain-entry {\n  background: none;\n  cursor: pointer;\n  color: inherit;\n  font: inherit;\n  border: none;\n  padding: 0;\n  transition: background-color 100ms ease-in-out;\n  border-radius: 4px;\n  border: solid 1px transparent;\n  line-height: 28px;\n  padding: 0 0.3em !important;\n  height: 28px;\n  box-sizing: border-box;\n}\n@media screen and (max-width: 400px) {\n  .chonky-folder-chain-entry {\n    line-height: 1.7em;\n    height: 1.7em;\n  }\n}\n.chonky-folder-chain-entry:last-child .chonky-folder-chain-entry-name {\n  -webkit-text-decoration: underline #bbb;\n          text-decoration: underline #bbb;\n}\n.chonky-folder-chain-entry.chonky-loading {\n  font-style: italic;\n  color: #bbb;\n}\ndiv.chonky-folder-chain-entry {\n  cursor: default;\n}\n\nbutton.chonky-folder-chain-entry:hover {\n  background-color: #f5f5f5;\n}\nbutton.chonky-folder-chain-entry:active {\n  border-color: #ccc;\n}\n\n.chonky-folder-chain-separator {\n  line-height: 28px;\n  height: 28px;\n  color: #bbb;\n  padding: 0 0.1em;\n}\n@media screen and (max-width: 400px) {\n  .chonky-folder-chain-separator {\n    line-height: 1.7em;\n    height: 1.7em;\n    padding: 0 0.1em;\n  }\n}\n\n.chonky-toolbar-button-group .chonky-toolbar-button {\n  border-radius: 0;\n}\n.chonky-toolbar-button-group .chonky-toolbar-button:first-of-type {\n  border-bottom-left-radius: 4px;\n  border-top-left-radius: 4px;\n}\n.chonky-toolbar-button-group .chonky-toolbar-button:last-of-type {\n  border-bottom-right-radius: 4px;\n  border-top-right-radius: 4px;\n}\n.chonky-toolbar-button-group .chonky-toolbar-button:focus {\n  z-index: 15;\n}\n.chonky-toolbar-button-group .chonky-toolbar-button:not(:first-child) {\n  margin-left: -1px;\n}\n\n.chonky-toolbar-button {\n  transition: background-color 100ms ease-in-out;\n  background: none;\n  cursor: pointer;\n  color: inherit;\n  font: inherit;\n  border: none;\n  padding: 0;\n  line-height: 26px;\n  border-radius: 4px;\n  border: solid 1px transparent;\n  min-width: 28px;\n  height: 28px;\n  vertical-align: middle;\n  box-sizing: border-box;\n  flex-direction: row;\n  text-align: center;\n  position: relative;\n  z-index: 10;\n}\n.chonky-toolbar-button-icon, .chonky-toolbar-button-text {\n  display: inline-block;\n}\n.chonky-toolbar-button-icon {\n  min-width: 28px;\n}\n.chonky-toolbar-button-text {\n  padding-right: 10px;\n  padding-left: 10px;\n}\n.chonky-toolbar-button-icon + .chonky-toolbar-button-text {\n  padding-left: 0 !important;\n}\n.chonky-toolbar-button-text + .chonky-toolbar-button-icon {\n  margin-left: -10px !important;\n}\n@media screen and (max-width: 400px) {\n  .chonky-toolbar-button {\n    line-height: 1.7em;\n    min-width: 1.7em;\n    height: 1.7em;\n  }\n  .chonky-toolbar-button-icon {\n    min-width: 1.7em;\n  }\n}\n.chonky-toolbar-button.chonky-active {\n  color: #09f;\n  z-index: 93;\n}\n.chonky-toolbar-button:hover, .chonky-toolbar-button:focus {\n  background-color: #f5f5f5;\n  z-index: 92;\n}\n.chonky-toolbar-button:active {\n  border-color: #ccc;\n}\n.chonky-toolbar-button > span {\n  padding: 6px;\n  border-color: #ccc;\n  white-space: nowrap;\n}\n.chonky-toolbar-button[disabled] {\n  color: #bbb !important;\n  pointer-events: none;\n}\n\n.chonky-toolbar-dropdown {\n  position: relative;\n}\n.chonky-toolbar-dropdown .chonky-toolbar-button-icon {\n  font-size: 0.8em;\n}\n.chonky-toolbar-dropdown-content {\n  margin-top: 2.5px;\n  border: solid 1px #ccc;\n  border-radius: 4px;\n  background-color: #fff;\n  flex-direction: column;\n  position: absolute;\n  display: flex;\n  z-index: 70;\n  right: 0;\n}\n.chonky-toolbar-dropdown-button {\n  transition: background-color 100ms ease-in-out;\n  background: none;\n  cursor: pointer;\n  color: inherit;\n  font: inherit;\n  border: none;\n  padding: 0;\n  line-height: 29.9px;\n  border-bottom: solid 1px #ccc;\n  height: 32.2px;\n  white-space: nowrap;\n  text-align: left;\n  display: flex;\n}\n.chonky-toolbar-dropdown-button-icon {\n  padding-left: 7.5px;\n  margin-top: 2px;\n  opacity: 0.5;\n}\n.chonky-toolbar-dropdown-button-text {\n  padding-right: 7.5px;\n  padding-left: 7.5px;\n}\n.chonky-toolbar-dropdown-button[disabled] {\n  color: #bbb !important;\n  pointer-events: none;\n}\n.chonky-toolbar-dropdown-button:hover, .chonky-toolbar-dropdown-button:focus {\n  background-color: #f5f5f5;\n  z-index: 93;\n}\n.chonky-toolbar-dropdown-button.chonky-active {\n  color: #09f;\n  z-index: 93;\n}\n\n.chonky-file-search {\n  transition: height 100ms ease-in-out;\n  margin-bottom: 7.5px;\n  margin-top: -7.5px;\n  height: 28px;\n  opacity: 1;\n}\n.chonky-file-search-hidden {\n  opacity: 0 !important;\n  height: 0 !important;\n}\n\n.chonky-file-search-hidden .chonky-file-search-input-group {\n  display: none !important;\n}\n\n.chonky-file-search-input-group label,\n.chonky-file-search-input-group input {\n  line-height: 26px;\n  height: 28px;\n  box-sizing: border-box;\n  display: inline-block;\n  vertical-align: top;\n  font-size: inherit;\n  padding: 0;\n  margin: 0;\n}\n.chonky-file-search-input-group label {\n  background-color: transparent;\n  padding: 0 5px;\n  color: #666;\n  margin: 1px 0 0 2px;\n  border-right: none;\n  position: absolute;\n}\n.chonky-file-search-input-group input {\n  padding-left: 30px;\n  border: solid 1px #e4e4e4;\n  border-radius: 4px;\n  padding-right: 5px;\n}\n.chonky-file-search-input-group-loading {\n  line-height: 30.8px;\n  height: 28px;\n  width: 28px;\n  box-sizing: border-box;\n  display: inline-block;\n  text-align: center;\n  color: #bbb;\n}\n\n.chonky-file-list {\n  flex: 1 1;\n}\n.chonky-file-list-notification {\n  text-align: center;\n  position: relative;\n}\n.chonky-file-list-notification-empty {\n  color: #bbb;\n  font-size: 1.2em;\n}\n.chonky-file-list-notification-content {\n  transform: translateX(-50%) translateY(-50%);\n  position: absolute;\n  left: 50%;\n  top: 50%;\n}\n\n.chonky-file-entry-clickable-wrapper {\n  outline: none !important;\n  position: relative;\n}\n.chonky-file-entry-clickable-wrapper:focus .chonky-file-entry-inside:before {\n  box-shadow: inset 0 0 0 2px #000 !important;\n}\n.chonky-file-entry-clickable-wrapper:focus .chonky-file-entry-description {\n  border-top-color: #000 !important;\n}\n.chonky-file-entry-clickable-wrapper:focus .chonky-file-icon-inside {\n  color: #000;\n}\n\n.chonky-file-drag-preview {\n  padding: 7.5px 10px;\n  box-shadow: 2px 2px 5px #888;\n  border-radius: 2px;\n  border: solid 2px #09f;\n  background-color: #f5f5f5;\n  display: inline-block;\n}\n\n.chonky-file-entry {\n  border: solid 1px #e4e4e4;\n  border-radius: 2px;\n  box-sizing: border-box;\n  overflow: hidden;\n  height: 100%;\n}\n.chonky-file-entry-inside {\n  box-sizing: border-box;\n  flex-direction: column;\n  display: flex;\n  height: 100%;\n}\n.chonky-file-entry-inside:before {\n  border-radius: 4px;\n  position: absolute;\n  display: block;\n  z-index: 999;\n  content: "";\n  bottom: 0;\n  right: 0;\n  left: 0;\n  top: 0;\n}\n.chonky-file-entry-dnd-indicator {\n  box-sizing: border-box;\n  position: absolute;\n  font-size: 1.2em;\n  opacity: 0.6;\n  padding: 6px;\n  z-index: 80;\n  left: 1px;\n  top: 1px;\n}\n.chonky-file-entry-dnd-indicator:before {\n  border-bottom: 50px solid transparent;\n  border-left: 50px solid #fff;\n  position: absolute;\n  content: "";\n  z-index: -1;\n  height: 0;\n  width: 0;\n  left: 0;\n  top: 0;\n}\n.chonky-file-entry-preview {\n  background-color: #fff;\n  position: relative;\n  overflow: hidden;\n  flex-grow: 1;\n}\n.chonky-file-entry-description {\n  border-top: solid 2px transparent;\n  background-color: #fff;\n  font-size: 14px;\n  padding: 3px 5px 5px 5px;\n}\n.chonky-file-entry-description-title {\n  word-break: break-word;\n  position: relative;\n}\n.chonky-file-entry-description-title-modifiers {\n  margin-right: 5px;\n  position: relative;\n  color: #bbb;\n  font-size: 0.75em;\n  top: -2px;\n}\n.chonky-file-entry-description-title-extension {\n  color: #666;\n}\n.chonky-file-entry-directory .chonky-file-entry-description-title-extension {\n  color: #bbb;\n}\n\n.chonky-file-entry-selected .chonky-file-entry-inside:before {\n  box-shadow: inset 0 0 0 2px #33adff !important;\n}\n.chonky-file-entry-selected .chonky-file-entry-description {\n  border-top-color: #33adff !important;\n}\n.chonky-file-entry-selected .chonky-file-selection {\n  opacity: 1 !important;\n}\n.chonky-file-entry-dragging .chonky-file-background {\n  opacity: 0.3 !important;\n}\n.chonky-file-entry-drop-hovered .chonky-file-background {\n  opacity: 1 !important;\n}\n\n.chonky-file-icon, .chonky-file-details, .chonky-file-selection, .chonky-file-thumbnail, .chonky-file-background {\n  position: absolute;\n  display: block;\n  height: 100%;\n  width: 100%;\n  left: 0;\n  top: 0;\n}\n.chonky-file-details {\n  z-index: 50;\n}\n.chonky-file-details-inside {\n  justify-content: space-between;\n  font-size: 10px;\n  box-sizing: border-box;\n  position: absolute;\n  display: flex;\n  width: 100%;\n  bottom: 0;\n}\n.chonky-file-details-item {\n  transition: opacity 100ms ease-in-out;\n  padding: 5px;\n  color: #000;\n  opacity: 0.2;\n}\n.chonky-file-entry:hover .chonky-file-details-item {\n  opacity: 0.75;\n}\n\n.chonky-file-icon {\n  z-index: 40;\n}\n.chonky-file-icon-children-count, .chonky-file-icon-inside {\n  transform: translateX(-50%) translateY(-50%);\n  text-align: center;\n  position: absolute;\n  display: block;\n  left: 50%;\n  top: 50%;\n}\n.chonky-file-icon-children-count {\n  color: #bbb;\n  font-size: 0.7em;\n  z-index: 10;\n}\n.chonky-file-icon-inside {\n  font-size: 2.2em;\n  color: #fff;\n  z-index: 5;\n}\n.chonky-file-selection {\n  z-index: 30;\n  background: repeating-linear-gradient(45deg, rgba(0, 153, 255, 0.14), rgba(0, 153, 255, 0.14) 10px, rgba(0, 153, 255, 0.2) 10px, rgba(0, 153, 255, 0.2) 20px);\n  background-color: rgba(0, 153, 255, 0.14);\n  opacity: 0;\n}\n.chonky-file-thumbnail {\n  z-index: 20;\n  transition: opacity 100ms ease-in-out;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: contain;\n  opacity: 1;\n}\n.chonky-file-thumbnail-hidden {\n  opacity: 0;\n}\n.chonky-file-background {\n  z-index: 10;\n  transition: opacity 100ms ease-in-out;\n  opacity: 0.5;\n}\n.chonky-file-entry:hover .chonky-file-background {\n  opacity: 0.6;\n}\n',""]),module.exports=exports},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("HUCg")},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("i7Kn")},,,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(4),__webpack_require__(20),__webpack_require__(6),__webpack_require__(9),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(34),_story_helpers__WEBPACK_IMPORTED_MODULE_8__=(__webpack_require__(60),__webpack_require__(8));function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Meta=function makeShortcode(name){return function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",props)}}("Meta"),layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(Meta,{title:"".concat(_story_helpers__WEBPACK_IMPORTED_MODULE_8__.a.ApiReference,"|Built-in file actions"),mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"built-in-file-actions"},"Built-in file actions"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h2",{id:"notes-about-built-in-file-actions"},"Notes about built-in file actions"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h3",{id:"openfiles"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"h3"},"OpenFiles")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"p"},"data.files")," will always be set, but ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"p"},"data.target")," can sometimes be undefined. For\nexample, when the user clicks ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"p"},"Actions -> Open selection"),", target will be undefined."))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"".concat(_story_helpers__WEBPACK_IMPORTED_MODULE_8__.a.ApiReference,"|Built-in file actions"),includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"FileBrowserDemo",(function(){return _01_File_Browser_demo_stories_FileBrowserDemo}));__webpack_require__(4),__webpack_require__(12),__webpack_require__(22),__webpack_require__(13),__webpack_require__(25),__webpack_require__(14),__webpack_require__(18),__webpack_require__(24),__webpack_require__(15),__webpack_require__(21),__webpack_require__(5),__webpack_require__(27),__webpack_require__(11),__webpack_require__(23),__webpack_require__(16),__webpack_require__(19),__webpack_require__(41);var _parameters,src=__webpack_require__(7),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(8),demo_fs_map=__webpack_require__(95);function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var category=story_helpers.a.Demos,_01_File_Browser_demo_stories_FileBrowserDemo=(__webpack_exports__.default={title:"".concat(category,"|").concat("File Browser demo"),parameters:(_parameters={storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import \'chonky/style/main.css\';\\n\\nimport {\\n    ChonkyActions,\\n    FileActionHandler,\\n    FileArray,\\n    FileBrowser,\\n    FileData,\\n    FileHelper,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from \'chonky\';\\nimport React, { useCallback, useMemo, useState } from \'react\';\\nimport { Nullable } from \'tsdef\';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories,\\n} from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./01-File-Browser-demo.md\';\\nimport DemoFsMap from \'./demo.fs_map.json\';\\n\\nconst category = StoryCategories.Demos;\\nconst title = \'File Browser demo\';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const FileBrowserDemo: React.FC = () => {\\n    const [currentFolderId, setCurrentFolderId] = useState(DemoFsMap.rootFolderId);\\n\\n    const files = useFiles(currentFolderId);\\n    const folderChain = useFolderChain(currentFolderId);\\n\\n    const handleFileAction = useCallback<FileActionHandler>(\\n        (action, actionData) => {\\n            if (action.id === ChonkyActions.OpenFiles.id) {\\n                let targetFile: Nullable<FileData> = null;\\n                if (actionData.target) {\\n                    targetFile = actionData.target;\\n                } else if (actionData.files && actionData.files.length === 1) {\\n                    targetFile = actionData.files[0];\\n                }\\n\\n                if (targetFile && FileHelper.isDirectory(targetFile)) {\\n                    setCurrentFolderId(targetFile.id);\\n                    return;\\n                }\\n            }\\n\\n            showActionNotification({ action, data: actionData });\\n        },\\n        [setCurrentFolderId]\\n    );\\n\\n    return (\\n        <div style={{ height: 600 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\\nconst useFiles = (currentFolderId: string): FileArray => {\\n    return useMemo(() => {\\n        const currentFolder = DemoFsMap.fileMap[currentFolderId];\\n        const files = !currentFolder.childrenIds\\n            ? []\\n            : currentFolder.childrenIds.map((fileId) => {\\n                  const file = DemoFsMap.fileMap[fileId];\\n                  return file ? file : null;\\n              });\\n        return files;\\n    }, [currentFolderId]);\\n};\\n\\nconst useFolderChain = (currentFolderId: string): FileArray => {\\n    return useMemo(() => {\\n        const currentFolder = DemoFsMap.fileMap[currentFolderId];\\n\\n        const folderChain = [currentFolder];\\n\\n        let parentId = currentFolder.parentId;\\n        while (parentId) {\\n            const parentFile = DemoFsMap.fileMap[parentId];\\n            if (parentFile) {\\n                folderChain.unshift(parentFile);\\n                parentId = parentFile.parentId;\\n            } else {\\n                parentId = null;\\n            }\\n        }\\n\\n        return folderChain;\\n    }, [currentFolderId]);\\n};\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"file-browser-demo":{"startLoc":{"col":41,"line":38},"endLoc":{"col":1,"line":79},"startBody":{"col":41,"line":38},"endBody":{"col":1,"line":79}}};\n    \nimport \'chonky/style/main.css\';\n\nimport {\n    ChonkyActions,\n    FileActionHandler,\n    FileArray,\n    FileBrowser,\n    FileData,\n    FileHelper,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from \'chonky\';\nimport React, { useCallback, useMemo, useState } from \'react\';\nimport { Nullable } from \'tsdef\';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories,\n} from \'../story-helpers\';\n// @ts-ignore\n\nimport markdown from \'./01-File-Browser-demo.md\';\nimport DemoFsMap from \'./demo.fs_map.json\';\n\nconst category = StoryCategories.Demos;\nconst title = \'File Browser demo\';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {"storySource":{"source":"import \'chonky/style/main.css\';\\n\\nimport {\\n    ChonkyActions,\\n    FileActionHandler,\\n    FileArray,\\n    FileBrowser,\\n    FileData,\\n    FileHelper,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from \'chonky\';\\nimport React, { useCallback, useMemo, useState } from \'react\';\\nimport { Nullable } from \'tsdef\';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories,\\n} from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./01-File-Browser-demo.md\';\\nimport DemoFsMap from \'./demo.fs_map.json\';\\n\\nconst category = StoryCategories.Demos;\\nconst title = \'File Browser demo\';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const FileBrowserDemo: React.FC = () => {\\n    const [currentFolderId, setCurrentFolderId] = useState(DemoFsMap.rootFolderId);\\n\\n    const files = useFiles(currentFolderId);\\n    const folderChain = useFolderChain(currentFolderId);\\n\\n    const handleFileAction = useCallback<FileActionHandler>(\\n        (action, actionData) => {\\n            if (action.id === ChonkyActions.OpenFiles.id) {\\n                let targetFile: Nullable<FileData> = null;\\n                if (actionData.target) {\\n                    targetFile = actionData.target;\\n                } else if (actionData.files && actionData.files.length === 1) {\\n                    targetFile = actionData.files[0];\\n                }\\n\\n                if (targetFile && FileHelper.isDirectory(targetFile)) {\\n                    setCurrentFolderId(targetFile.id);\\n                    return;\\n                }\\n            }\\n\\n            showActionNotification({ action, data: actionData });\\n        },\\n        [setCurrentFolderId]\\n    );\\n\\n    return (\\n        <div style={{ height: 600 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\\nconst useFiles = (currentFolderId: string): FileArray => {\\n    return useMemo(() => {\\n        const currentFolder = DemoFsMap.fileMap[currentFolderId];\\n        const files = !currentFolder.childrenIds\\n            ? []\\n            : currentFolder.childrenIds.map((fileId) => {\\n                  const file = DemoFsMap.fileMap[fileId];\\n                  return file ? file : null;\\n              });\\n        return files;\\n    }, [currentFolderId]);\\n};\\n\\nconst useFolderChain = (currentFolderId: string): FileArray => {\\n    return useMemo(() => {\\n        const currentFolder = DemoFsMap.fileMap[currentFolderId];\\n\\n        const folderChain = [currentFolder];\\n\\n        let parentId = currentFolder.parentId;\\n        while (parentId) {\\n            const parentFile = DemoFsMap.fileMap[parentId];\\n            if (parentFile) {\\n                folderChain.unshift(parentFile);\\n                parentId = parentFile.parentId;\\n            } else {\\n                parentId = null;\\n            }\\n        }\\n\\n        return folderChain;\\n    }, [currentFolderId]);\\n};\\n","locationsMap":{"file-browser-demo":{"startLoc":{"col":41,"line":38},"endLoc":{"col":1,"line":79},"startBody":{"col":41,"line":38},"endBody":{"col":1,"line":79}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const FileBrowserDemo: React.FC = () => {\n    const [currentFolderId, setCurrentFolderId] = useState(DemoFsMap.rootFolderId);\n\n    const files = useFiles(currentFolderId);\n    const folderChain = useFolderChain(currentFolderId);\n\n    const handleFileAction = useCallback<FileActionHandler>(\n        (action, actionData) => {\n            if (action.id === ChonkyActions.OpenFiles.id) {\n                let targetFile: Nullable<FileData> = null;\n                if (actionData.target) {\n                    targetFile = actionData.target;\n                } else if (actionData.files && actionData.files.length === 1) {\n                    targetFile = actionData.files[0];\n                }\n\n                if (targetFile && FileHelper.isDirectory(targetFile)) {\n                    setCurrentFolderId(targetFile.id);\n                    return;\n                }\n            }\n\n            showActionNotification({ action, data: actionData });\n        },\n        [setCurrentFolderId]\n    );\n\n    return (\n        <div style={{ height: 600 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n\nconst useFiles = (currentFolderId: string): FileArray => {\n    return useMemo(() => {\n        const currentFolder = DemoFsMap.fileMap[currentFolderId];\n        const files = !currentFolder.childrenIds\n            ? []\n            : currentFolder.childrenIds.map((fileId) => {\n                  const file = DemoFsMap.fileMap[fileId];\n                  return file ? file : null;\n              });\n        return files;\n    }, [currentFolderId]);\n};\n\nconst useFolderChain = (currentFolderId: string): FileArray => {\n    return useMemo(() => {\n        const currentFolder = DemoFsMap.fileMap[currentFolderId];\n\n        const folderChain = [currentFolder];\n\n        let parentId = currentFolder.parentId;\n        while (parentId) {\n            const parentFile = DemoFsMap.fileMap[parentId];\n            if (parentFile) {\n                folderChain.unshift(parentFile);\n                parentId = parentFile.parentId;\n            } else {\n                parentId = null;\n            }\n        }\n\n        return folderChain;\n    }, [currentFolderId]);\n};\n',locationsMap:{"file-browser-demo":{startLoc:{col:41,line:46},endLoc:{col:1,line:87},startBody:{col:41,line:46},endBody:{col:1,line:87}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    ChonkyActions,\n    FileActionHandler,\n    FileArray,\n    FileBrowser,\n    FileData,\n    FileHelper,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { Nullable } from 'tsdef';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories,\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './01-File-Browser-demo.md';\nimport DemoFsMap from './demo.fs_map.json';\n\nconst category = StoryCategories.Demos;\nconst title = 'File Browser demo';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const FileBrowserDemo: React.FC = () => {\n    const [currentFolderId, setCurrentFolderId] = useState(DemoFsMap.rootFolderId);\n\n    const files = useFiles(currentFolderId);\n    const folderChain = useFolderChain(currentFolderId);\n\n    const handleFileAction = useCallback<FileActionHandler>(\n        (action, actionData) => {\n            if (action.id === ChonkyActions.OpenFiles.id) {\n                let targetFile: Nullable<FileData> = null;\n                if (actionData.target) {\n                    targetFile = actionData.target;\n                } else if (actionData.files && actionData.files.length === 1) {\n                    targetFile = actionData.files[0];\n                }\n\n                if (targetFile && FileHelper.isDirectory(targetFile)) {\n                    setCurrentFolderId(targetFile.id);\n                    return;\n                }\n            }\n\n            showActionNotification({ action, data: actionData });\n        },\n        [setCurrentFolderId]\n    );\n\n    return (\n        <div style={{ height: 600 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n\nconst useFiles = (currentFolderId: string): FileArray => {\n    return useMemo(() => {\n        const currentFolder = DemoFsMap.fileMap[currentFolderId];\n        const files = !currentFolder.childrenIds\n            ? []\n            : currentFolder.childrenIds.map((fileId) => {\n                  const file = DemoFsMap.fileMap[fileId];\n                  return file ? file : null;\n              });\n        return files;\n    }, [currentFolderId]);\n};\n\nconst useFolderChain = (currentFolderId: string): FileArray => {\n    return useMemo(() => {\n        const currentFolder = DemoFsMap.fileMap[currentFolderId];\n\n        const folderChain = [currentFolder];\n\n        let parentId = currentFolder.parentId;\n        while (parentId) {\n            const parentFile = DemoFsMap.fileMap[parentId];\n            if (parentFile) {\n                folderChain.unshift(parentFile);\n                parentId = parentFile.parentId;\n            } else {\n                parentId = null;\n            }\n        }\n\n        return folderChain;\n    }, [currentFolderId]);\n};\n",locationsMap:{"file-browser-demo":{startLoc:{col:41,line:38},endLoc:{col:1,line:79},startBody:{col:41,line:38},endBody:{col:1,line:79}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.b)({markdown:"Check out the demo below to see what Chonky can do. Things to try:\n\n-   Try opening files and entering folders.\n-   Try keyboard navigation - use `Tab`, `Space`, `Enter` and `Backspace` keys.\n-   Try selecting files by clicking on them or pressing `Ctrl+A`.\n-   Try dragging & dropping files.\n-   Try using search, by pressing the search button or `Ctrl+F`.\n-   Try sorting files using the `Sort` dropdown.\n-   Try toggling hidden files using the `Options` dropdown.\n\nYou can find the full source code of the demo below\n[on GitHub](https://github.com/TimboKZ/Chonky/blob/1.x/stories/02-Demos/01-File-Browser-demo.stories.tsx).\n"})),_parameters)},function FileBrowserDemo(){var _useState2=_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(demo_fs_map.rootFolderId),2),currentFolderId=_useState2[0],setCurrentFolderId=_useState2[1],files=_01_File_Browser_demo_stories_useFiles(currentFolderId),folderChain=_01_File_Browser_demo_stories_useFolderChain(currentFolderId),handleFileAction=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(action,actionData){if(action.id===src.a.OpenFiles.id){var targetFile=null;if(actionData.target?targetFile=actionData.target:actionData.files&&1===actionData.files.length&&(targetFile=actionData.files[0]),targetFile&&src.d.isDirectory(targetFile))return void setCurrentFolderId(targetFile.id)}Object(story_helpers.c)({action:action,data:actionData})}),[setCurrentFolderId]);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:600}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:files,folderChain:folderChain,onFileAction:handleFileAction,enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.g,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null)))});_01_File_Browser_demo_stories_FileBrowserDemo.displayName="FileBrowserDemo";var _01_File_Browser_demo_stories_useFiles=function useFiles(currentFolderId){return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var currentFolder=demo_fs_map.fileMap[currentFolderId];return currentFolder.childrenIds?currentFolder.childrenIds.map((function(fileId){var file=demo_fs_map.fileMap[fileId];return file||null})):[]}),[currentFolderId])},_01_File_Browser_demo_stories_useFolderChain=function useFolderChain(currentFolderId){return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){for(var currentFolder=demo_fs_map.fileMap[currentFolderId],folderChain=[currentFolder],parentId=currentFolder.parentId;parentId;){var parentFile=demo_fs_map.fileMap[parentId];parentFile?(folderChain.unshift(parentFile),parentId=parentFile.parentId):parentId=null}return folderChain}),[currentFolderId])};try{_01_File_Browser_demo_stories_FileBrowserDemo.displayName="FileBrowserDemo",_01_File_Browser_demo_stories_FileBrowserDemo.__docgenInfo={description:"",displayName:"FileBrowserDemo",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/02-Demos/01-File-Browser-demo.stories.tsx#FileBrowserDemo"]={docgenInfo:_01_File_Browser_demo_stories_FileBrowserDemo.__docgenInfo,name:"FileBrowserDemo",path:"stories/02-Demos/01-File-Browser-demo.stories.tsx#FileBrowserDemo"})}catch(__react_docgen_typescript_loader_error){}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ComponentHierarchyExample",(function(){return _01_Component_hierarchy_stories_ComponentHierarchyExample}));__webpack_require__(13),__webpack_require__(27);var _parameters,src=__webpack_require__(7),delegated_reactfrom_dll_reference_storybook_docs_dll=(__webpack_require__(41),__webpack_require__(0)),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(8);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var category=story_helpers.a.FileBrowserBasics,_01_Component_hierarchy_stories_ComponentHierarchyExample=(__webpack_exports__.default={title:"".concat(category,"|").concat("Component hierarchy"),parameters:(_parameters={storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import {\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from \'chonky\';\\nimport \'chonky/style/main.css\';\\nimport React from \'react\';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories,\\n} from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./01-Component-hierarchy.md\';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = \'Component hierarchy\';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ComponentHierarchyExample = () => {\\n    const folderChain = [{ id: \'xASw\', name: \'Chonky Demo Folder\', isDir: true }];\\n    const files = [{ id: \'bEfX\', name: \'Demo.ts\' }];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"component-hierarchy-example":{"startLoc":{"col":41,"line":32},"endLoc":{"col":1,"line":54},"startBody":{"col":41,"line":32},"endBody":{"col":1,"line":54}}};\n    \nimport {\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from \'chonky\';\nimport \'chonky/style/main.css\';\nimport React from \'react\';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories,\n} from \'../story-helpers\';\n// @ts-ignore\n\nimport markdown from \'./01-Component-hierarchy.md\';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = \'Component hierarchy\';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {"storySource":{"source":"import {\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from \'chonky\';\\nimport \'chonky/style/main.css\';\\nimport React from \'react\';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories,\\n} from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./01-Component-hierarchy.md\';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = \'Component hierarchy\';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ComponentHierarchyExample = () => {\\n    const folderChain = [{ id: \'xASw\', name: \'Chonky Demo Folder\', isDir: true }];\\n    const files = [{ id: \'bEfX\', name: \'Demo.ts\' }];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n","locationsMap":{"component-hierarchy-example":{"startLoc":{"col":41,"line":32},"endLoc":{"col":1,"line":54},"startBody":{"col":41,"line":32},"endBody":{"col":1,"line":54}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ComponentHierarchyExample = () => {\n    const folderChain = [{ id: \'xASw\', name: \'Chonky Demo Folder\', isDir: true }];\n    const files = [{ id: \'bEfX\', name: \'Demo.ts\' }];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n',locationsMap:{"component-hierarchy-example":{startLoc:{col:41,line:40},endLoc:{col:1,line:62},startBody:{col:41,line:40},endBody:{col:1,line:62}}}}},_defineProperty(_parameters,"storySource",{source:"import {\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport 'chonky/style/main.css';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories,\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './01-Component-hierarchy.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Component hierarchy';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ComponentHierarchyExample = () => {\n    const folderChain = [{ id: 'xASw', name: 'Chonky Demo Folder', isDir: true }];\n    const files = [{ id: 'bEfX', name: 'Demo.ts' }];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"component-hierarchy-example":{startLoc:{col:41,line:32},endLoc:{col:1,line:54},startBody:{col:41,line:32},endBody:{col:1,line:54}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.b)({markdown:"Chonky includes several major components - `FileBrowser`, `FileList`, `FileToolbar`,\nand some others.\n\n`FileBrowser` is the most important component. In your code, it should wrap\nall other Chonky components:\n\n```tsx\n<FileBrowser files={[]}>\n    <FileToolbar />\n    <FileSearch />\n    <FileList />\n</FileBrowser>\n```\n\nThis is because `FileBrowser` is responsible for providing the configuration and\nrelevant React contexts to all the children Chonky components. It also the component\nthat you will be passing all of your props too.\n\n`FileBrowser` is also the only required component - all others, such as `FileList`,\nare optional. For example, if you're only interested in displaying files, but don't\nneed to the toolbar, you could use the following hierarchy:\n\n```tsx\n<FileBrowser files={[]}>\n    <FileList />\n</FileBrowser>\n```\n\nOr, if you're a power user, and you want to use a custom implementation of the file\nlist by consuming Chonky's [Recoil atoms](https://recoiljs.org/) directly, you could\nuse something like:\n\n```tsx\n<FileBrowser files={[]}>\n    <FileToolbar />\n    <FileSearch />\n    <MyCustomFileList />\n</FileBrowser>\n```\n"})),_parameters)},function ComponentHierarchyExample(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[{id:"bEfX",name:"Demo.ts"}],folderChain:[{id:"xASw",name:"Chonky Demo Folder",isDir:!0}],onFileAction:function handleFileAction(action,data){Object(story_helpers.c)({action:action,data:data})},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.g,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null)))});_01_Component_hierarchy_stories_ComponentHierarchyExample.displayName="ComponentHierarchyExample"},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"FilesArrayExample",(function(){return _02_Displaying_files_stories_FilesArrayExample}));__webpack_require__(13),__webpack_require__(21),__webpack_require__(27),__webpack_require__(41);var _parameters,src=__webpack_require__(7),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(8);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var category=story_helpers.a.FileBrowserBasics,_02_Displaying_files_stories_FilesArrayExample=(__webpack_exports__.default={title:"".concat(category,"|").concat("Displaying files"),parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileArray,\\n    FileBrowser,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories,\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './02-Displaying-files.md';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = 'Displaying files';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const FilesArrayExample = () => {\\n    const files: FileArray = [\\n        null, // Loading animation will be shown for this file\\n        null,\\n        {\\n            id: 'nTe',\\n            name: 'Normal file.yml',\\n            size: 890,\\n            modDate: new Date('2012-01-01'),\\n        },\\n        {\\n            id: 'zxc',\\n            name: 'Hidden file.mp4',\\n            isHidden: true,\\n            size: 890,\\n        },\\n        {\\n            id: 'bnm',\\n            name: 'Normal folder',\\n            isDir: true,\\n            childrenCount: 12,\\n        },\\n        {\\n            id: 'vfr',\\n            name: 'Symlink folder',\\n            isDir: true,\\n            isSymlink: true,\\n            childrenCount: 0,\\n        },\\n        {\\n            id: 'qwe',\\n            name: 'Not selectable.tar.gz',\\n            ext: '.tar.gz', // Custom extension\\n            selectable: false, // Disable selection\\n            size: 54300000000,\\n            modDate: new Date(),\\n        },\\n        {\\n            id: 'rty',\\n            name: 'Not openable.pem',\\n            openable: false, // Prevent opening\\n            size: 100000000,\\n        },\\n        {\\n            id: 'btj',\\n            name: 'Not draggable.csv',\\n            draggable: false, // Prevent this files from being dragged\\n        },\\n        {\\n            id: 'upq',\\n            name: 'Not droppable',\\n            isDir: true,\\n            droppable: false, // Prevent files from being dropped into this folder\\n        },\\n        {\\n            id: 'mRw',\\n            name: 'Unknown file name',\\n        },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"files-array-example\":{\"startLoc\":{\"col\":33,\"line\":34},\"endLoc\":{\"col\":1,\"line\":111},\"startBody\":{\"col\":33,\"line\":34},\"endBody\":{\"col\":1,\"line\":111}}};\n    \nimport 'chonky/style/main.css';\n\nimport {\n    FileAction,\n    FileActionData,\n    FileArray,\n    FileBrowser,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories,\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './02-Displaying-files.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Displaying files';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileArray,\\n    FileBrowser,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories,\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './02-Displaying-files.md';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = 'Displaying files';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const FilesArrayExample = () => {\\n    const files: FileArray = [\\n        null, // Loading animation will be shown for this file\\n        null,\\n        {\\n            id: 'nTe',\\n            name: 'Normal file.yml',\\n            size: 890,\\n            modDate: new Date('2012-01-01'),\\n        },\\n        {\\n            id: 'zxc',\\n            name: 'Hidden file.mp4',\\n            isHidden: true,\\n            size: 890,\\n        },\\n        {\\n            id: 'bnm',\\n            name: 'Normal folder',\\n            isDir: true,\\n            childrenCount: 12,\\n        },\\n        {\\n            id: 'vfr',\\n            name: 'Symlink folder',\\n            isDir: true,\\n            isSymlink: true,\\n            childrenCount: 0,\\n        },\\n        {\\n            id: 'qwe',\\n            name: 'Not selectable.tar.gz',\\n            ext: '.tar.gz', // Custom extension\\n            selectable: false, // Disable selection\\n            size: 54300000000,\\n            modDate: new Date(),\\n        },\\n        {\\n            id: 'rty',\\n            name: 'Not openable.pem',\\n            openable: false, // Prevent opening\\n            size: 100000000,\\n        },\\n        {\\n            id: 'btj',\\n            name: 'Not draggable.csv',\\n            draggable: false, // Prevent this files from being dragged\\n        },\\n        {\\n            id: 'upq',\\n            name: 'Not droppable',\\n            isDir: true,\\n            droppable: false, // Prevent files from being dropped into this folder\\n        },\\n        {\\n            id: 'mRw',\\n            name: 'Unknown file name',\\n        },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"files-array-example\":{\"startLoc\":{\"col\":33,\"line\":34},\"endLoc\":{\"col\":1,\"line\":111},\"startBody\":{\"col\":33,\"line\":34},\"endBody\":{\"col\":1,\"line\":111}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const FilesArrayExample = () => {\n    const files: FileArray = [\n        null, // Loading animation will be shown for this file\n        null,\n        {\n            id: 'nTe',\n            name: 'Normal file.yml',\n            size: 890,\n            modDate: new Date('2012-01-01'),\n        },\n        {\n            id: 'zxc',\n            name: 'Hidden file.mp4',\n            isHidden: true,\n            size: 890,\n        },\n        {\n            id: 'bnm',\n            name: 'Normal folder',\n            isDir: true,\n            childrenCount: 12,\n        },\n        {\n            id: 'vfr',\n            name: 'Symlink folder',\n            isDir: true,\n            isSymlink: true,\n            childrenCount: 0,\n        },\n        {\n            id: 'qwe',\n            name: 'Not selectable.tar.gz',\n            ext: '.tar.gz', // Custom extension\n            selectable: false, // Disable selection\n            size: 54300000000,\n            modDate: new Date(),\n        },\n        {\n            id: 'rty',\n            name: 'Not openable.pem',\n            openable: false, // Prevent opening\n            size: 100000000,\n        },\n        {\n            id: 'btj',\n            name: 'Not draggable.csv',\n            draggable: false, // Prevent this files from being dragged\n        },\n        {\n            id: 'upq',\n            name: 'Not droppable',\n            isDir: true,\n            droppable: false, // Prevent files from being dropped into this folder\n        },\n        {\n            id: 'mRw',\n            name: 'Unknown file name',\n        },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"files-array-example":{startLoc:{col:33,line:42},endLoc:{col:1,line:119},startBody:{col:33,line:42},endBody:{col:1,line:119}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    FileAction,\n    FileActionData,\n    FileArray,\n    FileBrowser,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories,\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './02-Displaying-files.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Displaying files';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const FilesArrayExample = () => {\n    const files: FileArray = [\n        null, // Loading animation will be shown for this file\n        null,\n        {\n            id: 'nTe',\n            name: 'Normal file.yml',\n            size: 890,\n            modDate: new Date('2012-01-01'),\n        },\n        {\n            id: 'zxc',\n            name: 'Hidden file.mp4',\n            isHidden: true,\n            size: 890,\n        },\n        {\n            id: 'bnm',\n            name: 'Normal folder',\n            isDir: true,\n            childrenCount: 12,\n        },\n        {\n            id: 'vfr',\n            name: 'Symlink folder',\n            isDir: true,\n            isSymlink: true,\n            childrenCount: 0,\n        },\n        {\n            id: 'qwe',\n            name: 'Not selectable.tar.gz',\n            ext: '.tar.gz', // Custom extension\n            selectable: false, // Disable selection\n            size: 54300000000,\n            modDate: new Date(),\n        },\n        {\n            id: 'rty',\n            name: 'Not openable.pem',\n            openable: false, // Prevent opening\n            size: 100000000,\n        },\n        {\n            id: 'btj',\n            name: 'Not draggable.csv',\n            draggable: false, // Prevent this files from being dragged\n        },\n        {\n            id: 'upq',\n            name: 'Not droppable',\n            isDir: true,\n            droppable: false, // Prevent files from being dropped into this folder\n        },\n        {\n            id: 'mRw',\n            name: 'Unknown file name',\n        },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"files-array-example":{startLoc:{col:33,line:34},endLoc:{col:1,line:111},startBody:{col:33,line:34},endBody:{col:1,line:111}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.b)({markdown:"The `FileBrowser` component has only one required prop - the `files` array:\n\n```tsx\nconst FilesExample = () => {\n    const files = [\n        null, // Will show loading animation\n        { id: 'xWbZ', name: 'Instructions.txt' },\n        { id: 'xWbZ', name: 'Tools', isDir: true },\n    ];\n\n    return (\n        <FileBrowser files={files}>\n            <FileToolbar />\n            <FileSearch />\n            <FileList />\n        </FileBrowser>\n    );\n};\n```\n\nThis array describes the files that Chonky should show to the user. It can contain\nfile descriptions (as plain JavaScript objects) and `null` values. `null` values\nindicate \"loading\" files - a loading placeholder animation will be shown in their place.\n\n## The `FileData` type\n\nFormally, the Typescript type for the `files` array is:\n\n```ts\ntype FileArray = Nullable<FileData>[];\n// i.e. Array of nulls and `FileData` objects mixed together\n```\n\nThe `FileData` type is shown below. It might look intimidating, but please note that\n`id` and `name` are the only 2 required fields. All other fields are optional, and\nare there to give you more control over how Chonky displays your files.\n\n```ts\nexport interface FileData {\n    id: string; // (Required) String that uniquely identifies the file\n\n    name: string; // (Required) Full name, e.g. `MyImage.jpg`\n    ext?: string; // File extension, e.g. `.jpg`\n\n    isDir?: boolean; // Is a directory, default: false\n    isHidden?: boolean; // Is a hidden file, default: false\n    isSymlink?: boolean; // Is a symlink, default: false\n    openable?: boolean; // Can be opened, default: true\n    selectable?: boolean; // Can be selected, default: true\n    draggable?: boolean; // Can be dragged, default: true\n    droppable?: boolean; // Can have files dropped into it, default: true\n\n    size?: number; // File size in bytes\n    modDate?: Date | string; // Last change date (or its string representation)\n    childrenCount?: number; // Number of files inside of a folder (only for folders)\n\n    thumbnailUrl?: string; // Automatically load thumbnail from here\n\n    [property: string]: any; // Any other user-defined property\n}\n```\n\n<span style=\"color: red; font-weight: bold;\">\nIt is very important that file IDs are unique:\n</span>\n\n> If file IDs are not unique, the consequences can be dire - for example, your user can\n> accidentally delete the wrong file. Chonky tries to protect you by scanning the files\n> array for duplicate IDs, but you should put some extra checks in your code too. You\n> can never be too safe.\n\nApart from the above, there are a few other details you should know about:\n\n-   `files` array should be **immutable**. If you're following the best Redux practices,\n    you're good. If you don't know what immutability is, please read the\n    _Immutability_ section from the sidebar. This is important.\n-   The file extension is automatically extracted from the `name` field, so you don't\n    need to provide an `ext` field yourself. In the rare case where the automatic\n    extension detection fails (for example: `file.tar.gz`), you can provide the `ext`\n    field explicitly. Please make sure extension is included in both `name` and `ext`,\n    e.g. `{id: 'AsVz', name: 'file.tar.gz', ext: '.tar.gz'}`.\n\n## Example file array\n\nThe _Live Example_ below tries to show case all different file configurations. Try\nperforming different actions (selections, drag & drop) and see how each file reacts.\nClick on `Show code` at the bottom to see the file array definition.\n"})),_parameters)},function FilesArrayExample(){var files=[null,null,{id:"nTe",name:"Normal file.yml",size:890,modDate:new Date("2012-01-01")},{id:"zxc",name:"Hidden file.mp4",isHidden:!0,size:890},{id:"bnm",name:"Normal folder",isDir:!0,childrenCount:12},{id:"vfr",name:"Symlink folder",isDir:!0,isSymlink:!0,childrenCount:0},{id:"qwe",name:"Not selectable.tar.gz",ext:".tar.gz",selectable:!1,size:543e8,modDate:new Date},{id:"rty",name:"Not openable.pem",openable:!1,size:1e8},{id:"btj",name:"Not draggable.csv",draggable:!1},{id:"upq",name:"Not droppable",isDir:!0,droppable:!1},{id:"mRw",name:"Unknown file name"}];return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:files,onFileAction:function handleFileAction(action,data){Object(story_helpers.c)({action:action,data:data})},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.g,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null)))});_02_Displaying_files_stories_FilesArrayExample.displayName="FilesArrayExample"},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"FolderChainExample",(function(){return _03_Specifying_folder_stories_FolderChainExample}));__webpack_require__(13),__webpack_require__(27),__webpack_require__(41);var _parameters,src=__webpack_require__(7),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(8);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var category=story_helpers.a.FileBrowserBasics,_03_Specifying_folder_stories_FolderChainExample=(__webpack_exports__.default={title:"".concat(category,"|").concat("Specifying current folder"),parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories,\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './03-Specifying-folder.md';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = 'Specifying current folder';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const FolderChainExample = () => {\\n    const folderChain = [\\n        {\\n            id: 'gM5tTe',\\n            name: 'My Documents',\\n            isDir: true,\\n        },\\n        {\\n            id: 'mTxYeA',\\n            name: 'Not Openable',\\n            isDir: true,\\n            openable: false, // This button will not be clickable\\n        },\\n        null, // Loading animation will be shown for this file\\n        {\\n            id: 'vxWtA',\\n            name: 'Unity Projects',\\n            isDir: true,\\n        },\\n        {\\n            id: 'mT7Et',\\n            name: 'Good Projects',\\n            isDir: true,\\n        },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={[]}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"folder-chain-example\":{\"startLoc\":{\"col\":34,\"line\":26},\"endLoc\":{\"col\":1,\"line\":68},\"startBody\":{\"col\":34,\"line\":26},\"endBody\":{\"col\":1,\"line\":68}}};\n    \nimport 'chonky/style/main.css';\n\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories,\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './03-Specifying-folder.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Specifying current folder';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories,\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './03-Specifying-folder.md';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = 'Specifying current folder';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const FolderChainExample = () => {\\n    const folderChain = [\\n        {\\n            id: 'gM5tTe',\\n            name: 'My Documents',\\n            isDir: true,\\n        },\\n        {\\n            id: 'mTxYeA',\\n            name: 'Not Openable',\\n            isDir: true,\\n            openable: false, // This button will not be clickable\\n        },\\n        null, // Loading animation will be shown for this file\\n        {\\n            id: 'vxWtA',\\n            name: 'Unity Projects',\\n            isDir: true,\\n        },\\n        {\\n            id: 'mT7Et',\\n            name: 'Good Projects',\\n            isDir: true,\\n        },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={[]}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"folder-chain-example\":{\"startLoc\":{\"col\":34,\"line\":26},\"endLoc\":{\"col\":1,\"line\":68},\"startBody\":{\"col\":34,\"line\":26},\"endBody\":{\"col\":1,\"line\":68}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const FolderChainExample = () => {\n    const folderChain = [\n        {\n            id: 'gM5tTe',\n            name: 'My Documents',\n            isDir: true,\n        },\n        {\n            id: 'mTxYeA',\n            name: 'Not Openable',\n            isDir: true,\n            openable: false, // This button will not be clickable\n        },\n        null, // Loading animation will be shown for this file\n        {\n            id: 'vxWtA',\n            name: 'Unity Projects',\n            isDir: true,\n        },\n        {\n            id: 'mT7Et',\n            name: 'Good Projects',\n            isDir: true,\n        },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={[]}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"folder-chain-example":{startLoc:{col:34,line:34},endLoc:{col:1,line:76},startBody:{col:34,line:34},endBody:{col:1,line:76}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories,\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './03-Specifying-folder.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Specifying current folder';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const FolderChainExample = () => {\n    const folderChain = [\n        {\n            id: 'gM5tTe',\n            name: 'My Documents',\n            isDir: true,\n        },\n        {\n            id: 'mTxYeA',\n            name: 'Not Openable',\n            isDir: true,\n            openable: false, // This button will not be clickable\n        },\n        null, // Loading animation will be shown for this file\n        {\n            id: 'vxWtA',\n            name: 'Unity Projects',\n            isDir: true,\n        },\n        {\n            id: 'mT7Et',\n            name: 'Good Projects',\n            isDir: true,\n        },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={[]}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"folder-chain-example":{startLoc:{col:34,line:26},endLoc:{col:1,line:68},startBody:{col:34,line:26},endBody:{col:1,line:68}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.b)({markdown:"Like any other file browser, Chonky can display the path to the current folder in the\ntoolbar above the files. To enable this functionality, you will need to add the\n`<FileToolbar />` to your component and pass the `folderChain` array to `FileBrowser`:\n\n```tsx\nconst FolderChainExample = () => {\n    const folderChain = [{ id: 'gMTe', name: 'My Documents', isDir: true }];\n\n    return (\n        <FileBrowser files={[]} folderChain={folderChain}>\n            <FileToolbar /> {/* <----- */}\n            <FileList />\n        </FileBrowser>\n    );\n};\n```\n\nFolder chain follows the exact same rules as the `files` array described in\n_Displaying files_ section. It can also contain `null` values to indicate loading\nfiles, and the objects inside it should follow the `FileData` type.\n\nSome notes:\n\n-   The files in the `folderChain` array don't need to have `isDir` set to `true`.\n-   Clicking on an item in the folder chain will open it, unless it is `null` or has\n    `openable` set to false.\n-   The \"Go up a directory\" button only works when the second-to-last file in the\n    folder chain is openable.\n"})),_parameters)},function FolderChainExample(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[],folderChain:[{id:"gM5tTe",name:"My Documents",isDir:!0},{id:"mTxYeA",name:"Not Openable",isDir:!0,openable:!1},null,{id:"vxWtA",name:"Unity Projects",isDir:!0},{id:"mT7Et",name:"Good Projects",isDir:!0}],onFileAction:function handleFileAction(action,data){Object(story_helpers.c)({action:action,data:data})}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.g,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null)))});_03_Specifying_folder_stories_FolderChainExample.displayName="FolderChainExample"},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ActionsExample",(function(){return _04_File_actions_stories_ActionsExample}));__webpack_require__(13),__webpack_require__(27),__webpack_require__(41);var _parameters,src=__webpack_require__(7),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(8);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var category=story_helpers.a.FileBrowserBasics,_04_File_actions_stories_ActionsExample=(__webpack_exports__.default={title:"".concat(category,"|").concat("Using file actions"),parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyActions,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './04-File-actions.md';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = 'Using file actions';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ActionsExample = () => {\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        // Log action to console\\n        \\n        console.log('\\\\nAction object:', action, '\\\\nAction data:', data);\\n\\n        showActionNotification({ action, data });\\n    };\\n\\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'hunter2', name: 'Password.txt' },\\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\\n    ];\\n\\n    const fileActions = [\\n        ChonkyActions.CreateFolder, // Adds a button to the toolbar\\n        ChonkyActions.UploadFiles, // Adds a button\\n        ChonkyActions.DownloadFiles, // Adds a button\\n        ChonkyActions.CopyFiles, // Adds a button and a shortcut: Ctrl+C\\n        ChonkyActions.DeleteFiles, // Adds a button and a shortcut: Delete\\n    ];\\n\\n    return (\\n        <div className=\\\"live-example\\\" style={{ height: 500 }}>\\n            <div className=\\\"live-example-action\\\">\\n                <strong>Check your browser console for logged actions!</strong>\\n            </div>\\n\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                fileActions={fileActions}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"actions-example\":{\"startLoc\":{\"col\":30,\"line\":33},\"endLoc\":{\"col\":1,\"line\":75},\"startBody\":{\"col\":30,\"line\":33},\"endBody\":{\"col\":1,\"line\":75}}};\n    \nimport 'chonky/style/main.css';\n\nimport {\n    ChonkyActions,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './04-File-actions.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Using file actions';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyActions,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './04-File-actions.md';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = 'Using file actions';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ActionsExample = () => {\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        // Log action to console\\n        \\n        console.log('\\\\nAction object:', action, '\\\\nAction data:', data);\\n\\n        showActionNotification({ action, data });\\n    };\\n\\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'hunter2', name: 'Password.txt' },\\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\\n    ];\\n\\n    const fileActions = [\\n        ChonkyActions.CreateFolder, // Adds a button to the toolbar\\n        ChonkyActions.UploadFiles, // Adds a button\\n        ChonkyActions.DownloadFiles, // Adds a button\\n        ChonkyActions.CopyFiles, // Adds a button and a shortcut: Ctrl+C\\n        ChonkyActions.DeleteFiles, // Adds a button and a shortcut: Delete\\n    ];\\n\\n    return (\\n        <div className=\\\"live-example\\\" style={{ height: 500 }}>\\n            <div className=\\\"live-example-action\\\">\\n                <strong>Check your browser console for logged actions!</strong>\\n            </div>\\n\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                fileActions={fileActions}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"actions-example\":{\"startLoc\":{\"col\":30,\"line\":33},\"endLoc\":{\"col\":1,\"line\":75},\"startBody\":{\"col\":30,\"line\":33},\"endBody\":{\"col\":1,\"line\":75}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ActionsExample = () => {\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        // Log action to console\n        \n        console.log('\\nAction object:', action, '\\nAction data:', data);\n\n        showActionNotification({ action, data });\n    };\n\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'hunter2', name: 'Password.txt' },\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\n    ];\n\n    const fileActions = [\n        ChonkyActions.CreateFolder, // Adds a button to the toolbar\n        ChonkyActions.UploadFiles, // Adds a button\n        ChonkyActions.DownloadFiles, // Adds a button\n        ChonkyActions.CopyFiles, // Adds a button and a shortcut: Ctrl+C\n        ChonkyActions.DeleteFiles, // Adds a button and a shortcut: Delete\n    ];\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <div className=\"live-example-action\">\n                <strong>Check your browser console for logged actions!</strong>\n            </div>\n\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                fileActions={fileActions}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"actions-example":{startLoc:{col:30,line:41},endLoc:{col:1,line:83},startBody:{col:30,line:41},endBody:{col:1,line:83}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    ChonkyActions,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './04-File-actions.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Using file actions';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ActionsExample = () => {\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        // Log action to console\n        \n        console.log('\\nAction object:', action, '\\nAction data:', data);\n\n        showActionNotification({ action, data });\n    };\n\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'hunter2', name: 'Password.txt' },\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\n    ];\n\n    const fileActions = [\n        ChonkyActions.CreateFolder, // Adds a button to the toolbar\n        ChonkyActions.UploadFiles, // Adds a button\n        ChonkyActions.DownloadFiles, // Adds a button\n        ChonkyActions.CopyFiles, // Adds a button and a shortcut: Ctrl+C\n        ChonkyActions.DeleteFiles, // Adds a button and a shortcut: Delete\n    ];\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <div className=\"live-example-action\">\n                <strong>Check your browser console for logged actions!</strong>\n            </div>\n\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                fileActions={fileActions}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"actions-example":{startLoc:{col:30,line:33},endLoc:{col:1,line:75},startBody:{col:30,line:33},endBody:{col:1,line:75}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.b)({markdown:'Every application using Chonky will be different. Some will require a feature to\nupload files, other will need to support cutting & pasting. Bottom line -\nrequirements will differ! Chonky tries to address this problem using **File Actions**\nand **_The_ Action Handler**. This section covers file actions, and the next section,\n_Defining an action handler_, covers the action handler itself.\n\n## File actions\n\n**File Actions** are a pretty broad concept in the Chonky framework. At their essence,\nthey describe what file operations the user can carry out. Through additional\nconfiguration, file actions can be used to define **toolbar buttons** and\n**keyboard shortcuts**. Here are some examples of file actions:\n\n-   **Deleting files.** You can create a file action that will add a `Delete` button\n    to the toolbar. You can also make it so the action is triggered when the user\n    presses `Delete` on their keyboard. The action will only work when one or more\n    files are selected.\n-   **Upload files.** You could define an action that would add an `Upload files`\n    button to the toolbar. The button will always be enabled, regardless of file\n    selection.\n\nFor your convenience, Chonky package includes definitions for many common file\nactions, including the ones described above. You can import them from the package as\n`ChonkyActions`, and access specific actions like this: `ChonkyActions.DeleteFiles`.\nYou can find the full list of pre-defined actions\n[on GitHub](https://github.com/TimboKZ/Chonky/blob/1.x/src/util/file-actions-definitions.ts).\n\nInternally, Chonky enables some basic actions by default. These include "Open\nFiles", "Select All Files", "Clear Selection" and several others. You can see the\nfull list of default actions in the link above.\n\n## Passing file actions to `FileBrowser`\n\nAction definitions have to be passed to the `FileBrowser` component via the\n`fileActions` props. The snippet below shows how you could enable some of the\npredefined file actions.\n\n```tsx\nimport { FileBrowser, FileList, FileToolbar, ChonkyActions } from \'chonky\';\n\nexport const MyComponent = () => {\n    const fileActions = [\n        ChonkyActions.CreateFolder, // Adds a button to the toolbar\n        ChonkyActions.UploadFiles, // Adds a button\n        ChonkyActions.DownloadFiles, // Adds a button\n        ChonkyActions.CopyFiles, // Adds a button and a shortcut: Ctrl+C\n        ChonkyActions.DeleteFiles, // Adds a button and a shortcut: Delete\n    ];\n\n    return (\n        <FileBrowser files={[]} fileActions={fileActions}>\n            <FileToolbar />\n            <FileSearch />\n            <FileList />\n        </FileBrowser>\n    );\n};\n```\n\nThe _Live Example_ below show the result of running the code from above. Note the\nextra buttons in the toolbar and the new shortcuts that now work - `Ctrl+C` and\n`Delete`.\n'})),_parameters)},function ActionsExample(){var fileActions=[src.a.CreateFolder,src.a.UploadFiles,src.a.DownloadFiles,src.a.CopyFiles,src.a.DeleteFiles];return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"live-example",style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"live-example-action"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("strong",null,"Check your browser console for logged actions!")),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[{id:"mHe4A1",name:"Meaning of life.txt",size:31415},{id:"hunter2",name:"Password.txt"},{id:"bEf24q",name:"Drag & drop files here",isDir:!0}],folderChain:[{id:"gBt4z3",name:"My Documents",isDir:!0}],fileActions:fileActions,onFileAction:function handleFileAction(action,data){console.log("\nAction object:",action,"\nAction data:",data),Object(story_helpers.c)({action:action,data:data})},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.g,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null)))});_04_File_actions_stories_ActionsExample.displayName="ActionsExample"},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ActionsExample",(function(){return _05_File_action_handler_stories_ActionsExample}));__webpack_require__(13),__webpack_require__(27),__webpack_require__(41);var _parameters,src=__webpack_require__(7),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(8);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var category=story_helpers.a.FileBrowserBasics,_05_File_action_handler_stories_ActionsExample=(__webpack_exports__.default={title:"".concat(category,"|").concat("Defining an action handler"),parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyActions,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './05-File-action-handler.md';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = 'Defining an action handler';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ActionsExample = () => {\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        // Log action to console\\n        \\n        console.log('\\\\nAction object:', action, '\\\\nAction data:', data);\\n\\n        showActionNotification({ action, data });\\n    };\\n\\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'hunter2', name: 'Password.txt' },\\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\\n    ];\\n\\n    const fileActions = [\\n        ChonkyActions.CreateFolder,\\n        ChonkyActions.UploadFiles,\\n        ChonkyActions.DownloadFiles,\\n        ChonkyActions.CopyFiles,\\n    ];\\n\\n    return (\\n        <div className=\\\"live-example\\\" style={{ height: 500 }}>\\n            <div className=\\\"live-example-action\\\">\\n                <strong>Check your browser console for logged actions!</strong>\\n            </div>\\n\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                fileActions={fileActions}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"actions-example\":{\"startLoc\":{\"col\":30,\"line\":33},\"endLoc\":{\"col\":1,\"line\":74},\"startBody\":{\"col\":30,\"line\":33},\"endBody\":{\"col\":1,\"line\":74}}};\n    \nimport 'chonky/style/main.css';\n\nimport {\n    ChonkyActions,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './05-File-action-handler.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Defining an action handler';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyActions,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './05-File-action-handler.md';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = 'Defining an action handler';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ActionsExample = () => {\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        // Log action to console\\n        \\n        console.log('\\\\nAction object:', action, '\\\\nAction data:', data);\\n\\n        showActionNotification({ action, data });\\n    };\\n\\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'hunter2', name: 'Password.txt' },\\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\\n    ];\\n\\n    const fileActions = [\\n        ChonkyActions.CreateFolder,\\n        ChonkyActions.UploadFiles,\\n        ChonkyActions.DownloadFiles,\\n        ChonkyActions.CopyFiles,\\n    ];\\n\\n    return (\\n        <div className=\\\"live-example\\\" style={{ height: 500 }}>\\n            <div className=\\\"live-example-action\\\">\\n                <strong>Check your browser console for logged actions!</strong>\\n            </div>\\n\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                fileActions={fileActions}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"actions-example\":{\"startLoc\":{\"col\":30,\"line\":33},\"endLoc\":{\"col\":1,\"line\":74},\"startBody\":{\"col\":30,\"line\":33},\"endBody\":{\"col\":1,\"line\":74}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ActionsExample = () => {\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        // Log action to console\n        \n        console.log('\\nAction object:', action, '\\nAction data:', data);\n\n        showActionNotification({ action, data });\n    };\n\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'hunter2', name: 'Password.txt' },\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\n    ];\n\n    const fileActions = [\n        ChonkyActions.CreateFolder,\n        ChonkyActions.UploadFiles,\n        ChonkyActions.DownloadFiles,\n        ChonkyActions.CopyFiles,\n    ];\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <div className=\"live-example-action\">\n                <strong>Check your browser console for logged actions!</strong>\n            </div>\n\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                fileActions={fileActions}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"actions-example":{startLoc:{col:30,line:41},endLoc:{col:1,line:82},startBody:{col:30,line:41},endBody:{col:1,line:82}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    ChonkyActions,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './05-File-action-handler.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Defining an action handler';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ActionsExample = () => {\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        // Log action to console\n        \n        console.log('\\nAction object:', action, '\\nAction data:', data);\n\n        showActionNotification({ action, data });\n    };\n\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'hunter2', name: 'Password.txt' },\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\n    ];\n\n    const fileActions = [\n        ChonkyActions.CreateFolder,\n        ChonkyActions.UploadFiles,\n        ChonkyActions.DownloadFiles,\n        ChonkyActions.CopyFiles,\n    ];\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <div className=\"live-example-action\">\n                <strong>Check your browser console for logged actions!</strong>\n            </div>\n\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                fileActions={fileActions}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"actions-example":{startLoc:{col:30,line:33},endLoc:{col:1,line:74},startBody:{col:30,line:33},endBody:{col:1,line:74}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.b)({markdown:"An **Action Handler** is a function that is called every time a file action is\ndispatched. You can pass your handler to `FileBrowser` via the `onFileAction` prop:\n\n```tsx\nexport const ActionsExample = () => {\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        console.log('Action definition:', action);\n        console.log('Action data:', data);\n    };\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <FileBrowser files={[]} onFileAction={handleFileAction}>\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n```\n\n**All** of the file actions will be sent to your action handler. It is normal to\nignore most of the actions and only handle the ones you're interested in.\n\nAs you can see from the example, your action handler will get 2 parameters - a\n`FileAction` object and a `FileActionData` object. The first object, `FileAction`, is\njust the action definition. You can read sections _Using file actions_ and\n_Custom file actions_ to find out more. The second object, `FileActionData`, contains\ninformation about the files related to the action dispatch. The formal type is:\n\n```ts\ninterface FileActionData {\n    actionId: string;\n    target?: Readonly<FileData>;\n    files?: ReadonlyArray<Readonly<FileData>>;\n}\n```\n\n`actionId` will always be set, but `target` and `files` might not be present,\ndepending on the action. You can play around with the default actions to understand\nwhen each field is provided and when it is not.\n\n## Ignoring actions\n\nIgnoring actions is very simple - you just create an `if-else` or `switch` clause and\nconditionally only catch actions you're interested in. For example, if you only want\nto handle \"Open Files\" action, you would do.\n\n```ts\nimport { FileAction, FileActionData, ChonkyActions } from 'chonky';\n\nconst handleFileAction = (action: FileAction, data: FileActionData) => {\n    if (action.id === ChonkyActions.OpenFiles.id) {\n        console.log('The following files were opened:', action.files);\n    } else {\n        // Do nothing.\n    }\n};\n```\n"})),_parameters)},function ActionsExample(){var fileActions=[src.a.CreateFolder,src.a.UploadFiles,src.a.DownloadFiles,src.a.CopyFiles];return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"live-example",style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"live-example-action"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("strong",null,"Check your browser console for logged actions!")),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[{id:"mHe4A1",name:"Meaning of life.txt",size:31415},{id:"hunter2",name:"Password.txt"},{id:"bEf24q",name:"Drag & drop files here",isDir:!0}],folderChain:[{id:"gBt4z3",name:"My Documents",isDir:!0}],fileActions:fileActions,onFileAction:function handleFileAction(action,data){console.log("\nAction object:",action,"\nAction data:",data),Object(story_helpers.c)({action:action,data:data})},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.g,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null)))});_05_File_action_handler_stories_ActionsExample.displayName="ActionsExample"},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"CustomActionsExample",(function(){return _06_Custom_actions_stories_CustomActionsExample}));__webpack_require__(13),__webpack_require__(5),__webpack_require__(27),__webpack_require__(238),__webpack_require__(41);var _parameters,src=__webpack_require__(7),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(8);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var category=story_helpers.a.FileBrowserBasics,_06_Custom_actions_stories_CustomActionsExample=(__webpack_exports__.default={title:"".concat(category,"|").concat("Custom file actions"),parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyIconName,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileData,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './06-Custom-actions.md';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = 'Custom file actions';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const CustomActionsExample = () => {\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    const downloadPsdAction: FileAction = {\\n        id: 'download_psd',\\n        requiresSelection: true,\\n        fileFilter: (file: FileData) => file.name.endsWith('.psd'),\\n        hotkeys: ['ctrl+q'],\\n        toolbarButton: {\\n            name: 'Download Photoshop files',\\n            icon: ChonkyIconName.download,\\n        },\\n    };\\n\\n    const customFileActions = [downloadPsdAction];\\n    const files = [\\n        { id: 'xVdE', name: 'Flowers.psd' },\\n        { id: 'bTeX', name: 'Mountains.psd' },\\n        { id: 'mGeX', name: 'Sky.psd' },\\n        { id: 'mFte', name: 'Stars.psd' },\\n        { id: 'tLwZ', name: 'Parser.rs' },\\n        { id: 'mGrQ', name: 'package.json' },\\n    ];\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                fileActions={customFileActions}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"custom-actions-example\":{\"startLoc\":{\"col\":36,\"line\":35},\"endLoc\":{\"col\":1,\"line\":75},\"startBody\":{\"col\":36,\"line\":35},\"endBody\":{\"col\":1,\"line\":75}}};\n    \nimport 'chonky/style/main.css';\n\nimport {\n    ChonkyIconName,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileData,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './06-Custom-actions.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Custom file actions';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyIconName,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileData,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './06-Custom-actions.md';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = 'Custom file actions';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const CustomActionsExample = () => {\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    const downloadPsdAction: FileAction = {\\n        id: 'download_psd',\\n        requiresSelection: true,\\n        fileFilter: (file: FileData) => file.name.endsWith('.psd'),\\n        hotkeys: ['ctrl+q'],\\n        toolbarButton: {\\n            name: 'Download Photoshop files',\\n            icon: ChonkyIconName.download,\\n        },\\n    };\\n\\n    const customFileActions = [downloadPsdAction];\\n    const files = [\\n        { id: 'xVdE', name: 'Flowers.psd' },\\n        { id: 'bTeX', name: 'Mountains.psd' },\\n        { id: 'mGeX', name: 'Sky.psd' },\\n        { id: 'mFte', name: 'Stars.psd' },\\n        { id: 'tLwZ', name: 'Parser.rs' },\\n        { id: 'mGrQ', name: 'package.json' },\\n    ];\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                fileActions={customFileActions}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"custom-actions-example\":{\"startLoc\":{\"col\":36,\"line\":35},\"endLoc\":{\"col\":1,\"line\":75},\"startBody\":{\"col\":36,\"line\":35},\"endBody\":{\"col\":1,\"line\":75}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const CustomActionsExample = () => {\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    const downloadPsdAction: FileAction = {\n        id: 'download_psd',\n        requiresSelection: true,\n        fileFilter: (file: FileData) => file.name.endsWith('.psd'),\n        hotkeys: ['ctrl+q'],\n        toolbarButton: {\n            name: 'Download Photoshop files',\n            icon: ChonkyIconName.download,\n        },\n    };\n\n    const customFileActions = [downloadPsdAction];\n    const files = [\n        { id: 'xVdE', name: 'Flowers.psd' },\n        { id: 'bTeX', name: 'Mountains.psd' },\n        { id: 'mGeX', name: 'Sky.psd' },\n        { id: 'mFte', name: 'Stars.psd' },\n        { id: 'tLwZ', name: 'Parser.rs' },\n        { id: 'mGrQ', name: 'package.json' },\n    ];\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                fileActions={customFileActions}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"custom-actions-example":{startLoc:{col:36,line:43},endLoc:{col:1,line:83},startBody:{col:36,line:43},endBody:{col:1,line:83}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    ChonkyIconName,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileData,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './06-Custom-actions.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Custom file actions';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const CustomActionsExample = () => {\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    const downloadPsdAction: FileAction = {\n        id: 'download_psd',\n        requiresSelection: true,\n        fileFilter: (file: FileData) => file.name.endsWith('.psd'),\n        hotkeys: ['ctrl+q'],\n        toolbarButton: {\n            name: 'Download Photoshop files',\n            icon: ChonkyIconName.download,\n        },\n    };\n\n    const customFileActions = [downloadPsdAction];\n    const files = [\n        { id: 'xVdE', name: 'Flowers.psd' },\n        { id: 'bTeX', name: 'Mountains.psd' },\n        { id: 'mGeX', name: 'Sky.psd' },\n        { id: 'mFte', name: 'Stars.psd' },\n        { id: 'tLwZ', name: 'Parser.rs' },\n        { id: 'mGrQ', name: 'package.json' },\n    ];\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                fileActions={customFileActions}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"custom-actions-example":{startLoc:{col:36,line:35},endLoc:{col:1,line:75},startBody:{col:36,line:35},endBody:{col:1,line:75}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.b)({markdown:"This section describes how you can define your own action. After you read the\ndocumentation on this page, it is strongly recommended that you also study\n[the predefined Chonky file actions](https://github.com/TimboKZ/Chonky/blob/1.x/src/util/file-actions-definitions.ts)\nto understand how they work.\n\nThe definition of a file action is a plain JavaScript object that satisfies the\ninterface below.\n\n```ts\nexport interface FileAction {\n    id: string; // Unique action ID\n    metadata?: any; // Any user-defined value\n    requiresSelection?: boolean; // Requires selection of 1+ files\n    fileFilter?: FileFilter; // Used to filter the files array\n\n    hotkeys?: readonly string[]; // Hotkeys using `hotkey-js` notation\n    toolbarButton?: ToolbarButtonData; // Description below\n\n    // Special action that should be dispatched on activation of this action. This\n    // is used by Chonky internally, keep it `undefined` unless you know what you're\n    // doing.\n    specialActionToDispatch?: SpecialAction;\n}\n\n// Where...\ntype FileFilter = (file: Nullable<FileData>) => boolean;\n\n// ...and...\ninterface ToolbarButtonData {\n    name: string; // Button name\n    group?: string; // Group to add the button to\n    dropdown?: boolean; // Whether to display group as dropdown\n    tooltip?: string; // Help tooltip text\n    icon?: ChonkyIconName | string; // Icon name\n    iconOnly?: boolean; // Whether to only display the icon\n}\n```\n\n-   All action IDs should be unique.\n-   You can overwrite default file actions by creating custom actions with the same ID.\n-   Enabling `requiresSelection` flag means the action will only be triggered when\n    one or more files are selected. Setting the `fileFilter` will apply the filter to\n    the list of selected files to check if the action can be applied.\n-   The `hotkeys` field should be an array of hotkeys following the\n    [hotkeys-js](https://github.com/TimboKZ/Chonky/blob/1.x/src/util/file-actions-definitions.ts)\n    notation.\n-   `toolbarButton` field determines whether the action should appear in the toolbar,\n    and how the button will look.\n-   To combine several action buttons into a toolbar, specify the same `group` for\n    them and set `dropdown` to true.\n-   If one of the actions in a group includes `dropdown: true`, all actions in that\n    group will be shown as a dropdown.\n\n## Example custom action: \"Download Photoshop files\"\n\nLet's define a custom action that will download the selected Photoshop `.psd` files.\nWe will add a button to the toolbar and a shortcut, `Ctrl+Q`. First, we define the\nfile action object:\n\n```tsx\nimport { FileData, FileAction, ChonkyIconName } from 'chonky';\n\nconst downloadPsdAction: FileAction = {\n    id: 'download_psd',\n    requiresSelection: true,\n    fileFilter: (file: FileData) => file.name.endsWith('.psd'),\n    hotkeys: ['ctrl+q'],\n    toolbarButton: {\n        name: 'Download Photoshop files',\n        icon: ChonkyIconName.download,\n    },\n};\n```\n\nNext, we need to pass this custom action to `FileBrowser`, along with some files:\n\n```tsx\nexport const CustomActionsExample = () => {\n    const customFileActions = [downloadPsdAction]; // <-----\n    const files = [\n        { id: 'xVdE', name: 'Flowers.psd' },\n        { id: 'bTeX', name: 'Mountains.psd' },\n        { id: 'mGeX', name: 'Sky.psd' },\n        { id: 'mFte', name: 'Stars.psd' },\n        { id: 'tLwZ', name: 'Parser.rs' },\n        { id: 'mGrQ', name: 'package.json' },\n    ];\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser files={files} fileActions={customFileActions /* <---- */}>\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n```\n\nYou can see the outcome in the live example below. Note how the button only becomes\nenabled when you select some `.psd` files. Also, when you click \"Download Photoshop\nfiles\", the action popup only includes `.psd` files. After you make your selection,\nyou can also press `Ctrl+Q` to make your selection.\n"})),_parameters)},function CustomActionsExample(){var customFileActions=[{id:"download_psd",requiresSelection:!0,fileFilter:function fileFilter(file){return file.name.endsWith(".psd")},hotkeys:["ctrl+q"],toolbarButton:{name:"Download Photoshop files",icon:src.b.download}}];return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[{id:"xVdE",name:"Flowers.psd"},{id:"bTeX",name:"Mountains.psd"},{id:"mGeX",name:"Sky.psd"},{id:"mFte",name:"Stars.psd"},{id:"tLwZ",name:"Parser.rs"},{id:"mGrQ",name:"package.json"}],onFileAction:function handleFileAction(action,data){Object(story_helpers.c)({action:action,data:data})},fileActions:customFileActions,enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.g,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null)))});_06_Custom_actions_stories_CustomActionsExample.displayName="CustomActionsExample"},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ActionsExample",(function(){return _07_Thumbnails_stories_ActionsExample}));__webpack_require__(13),__webpack_require__(27),__webpack_require__(99),__webpack_require__(41);var _parameters,bluebird=__webpack_require__(355),bluebird_default=__webpack_require__.n(bluebird),src=__webpack_require__(7),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(8);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var category=story_helpers.a.FileBrowserBasics,_07_Thumbnails_stories_ActionsExample=(__webpack_exports__.default={title:"".concat(category,"|").concat("File thumbnails"),parameters:(_parameters={storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import \'chonky/style/main.css\';\\n\\nimport Promise from \'bluebird\';\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileData,\\n    FileList,\\n    FileToolbar,\\n} from \'chonky\';\\nimport React from \'react\';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories,\\n} from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./07-Thumbnails.md\';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = \'File thumbnails\';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ActionsExample = () => {\\n    const thumbnailGenerator = (file: FileData & { delay: number }) => {\\n        return new Promise((resolve) => {\\n            // Delay loading by `file.delay` seconds to simulate thumb generation.\\n            setTimeout(() => resolve(\'./Lenna.png\'), file.delay * 1000);\\n        });\\n    };\\n\\n    const folderChain = [{ id: \'gBt4z3\', name: \'My Pictures\', isDir: true }];\\n    const files: FileData[] = [];\\n    for (let i = 0; i < 20; ++i) {\\n        const delay = i * 2;\\n        files.push({\\n            id: `image-${i}`,\\n            name: `Delay - ${delay} seconds.jpg`,\\n            delay: delay,\\n        });\\n    }\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div className=\\"live-example\\" style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                thumbnailGenerator={thumbnailGenerator} // <----\\n                enableDragAndDrop={true}\\n                onFileAction={handleFileAction}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"actions-example":{"startLoc":{"col":30,"line":34},"endLoc":{"col":1,"line":71},"startBody":{"col":30,"line":34},"endBody":{"col":1,"line":71}}};\n    \nimport \'chonky/style/main.css\';\n\nimport Promise from \'bluebird\';\nimport {\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileData,\n    FileList,\n    FileToolbar,\n} from \'chonky\';\nimport React from \'react\';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories,\n} from \'../story-helpers\';\n// @ts-ignore\n\nimport markdown from \'./07-Thumbnails.md\';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = \'File thumbnails\';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {"storySource":{"source":"import \'chonky/style/main.css\';\\n\\nimport Promise from \'bluebird\';\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileData,\\n    FileList,\\n    FileToolbar,\\n} from \'chonky\';\\nimport React from \'react\';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories,\\n} from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./07-Thumbnails.md\';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = \'File thumbnails\';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ActionsExample = () => {\\n    const thumbnailGenerator = (file: FileData & { delay: number }) => {\\n        return new Promise((resolve) => {\\n            // Delay loading by `file.delay` seconds to simulate thumb generation.\\n            setTimeout(() => resolve(\'./Lenna.png\'), file.delay * 1000);\\n        });\\n    };\\n\\n    const folderChain = [{ id: \'gBt4z3\', name: \'My Pictures\', isDir: true }];\\n    const files: FileData[] = [];\\n    for (let i = 0; i < 20; ++i) {\\n        const delay = i * 2;\\n        files.push({\\n            id: `image-${i}`,\\n            name: `Delay - ${delay} seconds.jpg`,\\n            delay: delay,\\n        });\\n    }\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div className=\\"live-example\\" style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                thumbnailGenerator={thumbnailGenerator} // <----\\n                enableDragAndDrop={true}\\n                onFileAction={handleFileAction}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n","locationsMap":{"actions-example":{"startLoc":{"col":30,"line":34},"endLoc":{"col":1,"line":71},"startBody":{"col":30,"line":34},"endBody":{"col":1,"line":71}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ActionsExample = () => {\n    const thumbnailGenerator = (file: FileData & { delay: number }) => {\n        return new Promise((resolve) => {\n            // Delay loading by `file.delay` seconds to simulate thumb generation.\n            setTimeout(() => resolve(\'./Lenna.png\'), file.delay * 1000);\n        });\n    };\n\n    const folderChain = [{ id: \'gBt4z3\', name: \'My Pictures\', isDir: true }];\n    const files: FileData[] = [];\n    for (let i = 0; i < 20; ++i) {\n        const delay = i * 2;\n        files.push({\n            id: `image-${i}`,\n            name: `Delay - ${delay} seconds.jpg`,\n            delay: delay,\n        });\n    }\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div className="live-example" style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                thumbnailGenerator={thumbnailGenerator} // <----\n                enableDragAndDrop={true}\n                onFileAction={handleFileAction}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n',locationsMap:{"actions-example":{startLoc:{col:30,line:42},endLoc:{col:1,line:79},startBody:{col:30,line:42},endBody:{col:1,line:79}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport Promise from 'bluebird';\nimport {\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileData,\n    FileList,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories,\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './07-Thumbnails.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'File thumbnails';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ActionsExample = () => {\n    const thumbnailGenerator = (file: FileData & { delay: number }) => {\n        return new Promise((resolve) => {\n            // Delay loading by `file.delay` seconds to simulate thumb generation.\n            setTimeout(() => resolve('./Lenna.png'), file.delay * 1000);\n        });\n    };\n\n    const folderChain = [{ id: 'gBt4z3', name: 'My Pictures', isDir: true }];\n    const files: FileData[] = [];\n    for (let i = 0; i < 20; ++i) {\n        const delay = i * 2;\n        files.push({\n            id: `image-${i}`,\n            name: `Delay - ${delay} seconds.jpg`,\n            delay: delay,\n        });\n    }\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                thumbnailGenerator={thumbnailGenerator} // <----\n                enableDragAndDrop={true}\n                onFileAction={handleFileAction}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"actions-example":{startLoc:{col:30,line:34},endLoc:{col:1,line:71},startBody:{col:30,line:34},endBody:{col:1,line:71}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.b)({markdown:"There are two ways you can add thumbnails to your files. The _easy way_ and the\n_hard way_.\n\n## The easy way\n\nThe easiest way to add a thumbnail to a file in Chonky is to specify the\n`thumbnailUrl` field in the file object:\n\n```tsx\nconst files = [\n    {\n        id: 'xsQwe',\n        name: 'Lenna.png',\n        thumbnailUrl: 'https://example.com/Lenna.png', // <----\n    },\n];\n```\n\nThis is useful when you know the URLs for all thumbnails beforehand. Chonky will\nautomatically load the image from `thumbnailUrl` and display it as the thumbnail.\n\n## The hard way\n\nHowever, there are situations where thumbnails will not be available beforehand. For\nexample, you could have a system that generates thumbnails on demand, in a lazy-loading\nfashion. In this case, you can pass a custom `thumbnailGenerator` prop to the\n`FileBrowser` component:\n\n```tsx\nconst files = [\n    {\n        id: 'xsQwe',\n        name: 'Lenna.png',\n    },\n];\n\nconst thumbnailGenerator = (file) => {\n    return Promise.resolve()\n        .then(() => ajaxRequestThumbnailGeneration(file))\n        .then((thumbnailUrl) => {\n            // Do some additional processing of the thumbnail url\n            return thumbnailUrl;\n        });\n};\n\n<FileBrowser files={files} thumbnailGenerator={thumbnailGenerator}>\n    <FileToolbar />\n    <FileSearch />\n    <FileList />\n</FileBrowser>;\n```\n\nYour thumbnail generator can be a sync or an async function, and it should return\neither the thumbnail URL string or a `null`. Formal type of the thumbnail generator is:\n\n```ts\ntype MaybeThumbnail = Nullable<string>;\ntype ThumbnailGenerator = (file: FileData) => MaybeThumbnail | Promise<MaybeThumbnail>;\n```\n\n## Example with arbitrary loading delay\n\nThe _Live Example_ below demonstrates how thumbnail loading can be carried out in\nasync fashion. Click `Show code` button to see the source code.\n"})),_parameters)},function ActionsExample(){for(var files=[],i=0;i<20;++i){var delay=2*i;files.push({id:"image-".concat(i),name:"Delay - ".concat(delay," seconds.jpg"),delay:delay})}return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"live-example",style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:files,folderChain:[{id:"gBt4z3",name:"My Pictures",isDir:!0}],thumbnailGenerator:function thumbnailGenerator(file){return new bluebird_default.a((function(resolve){setTimeout((function(){return resolve("./Lenna.png")}),1e3*file.delay)}))},enableDragAndDrop:!0,onFileAction:function handleFileAction(action,data){Object(story_helpers.c)({action:action,data:data})}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.g,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null)))});_07_Thumbnails_stories_ActionsExample.displayName="ActionsExample"},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"DragNDropExample",(function(){return _08_Drag_n_drop_stories_DragNDropExample}));__webpack_require__(13),__webpack_require__(27),__webpack_require__(41);var _parameters,src=__webpack_require__(7),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(8);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var category=story_helpers.a.FileBrowserBasics,_08_Drag_n_drop_stories_DragNDropExample=(__webpack_exports__.default={title:"".concat(category,"|").concat("Enabling drag & drop"),parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories,\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './08-Drag-n-drop.md';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = 'Enabling drag & drop';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const DragNDropExample = () => {\\n    const folderChain = [\\n        { id: 'gBt4z3', name: 'My Documents', isDir: true },\\n        { id: 'gM5tTe', name: 'Other', isDir: true },\\n    ];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'yt43Ax', name: 'SCP-3930 Photos', isDir: true },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div className=\\\"live-example\\\" style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"drag-n-drop-example\":{\"startLoc\":{\"col\":32,\"line\":26},\"endLoc\":{\"col\":1,\"line\":53},\"startBody\":{\"col\":32,\"line\":26},\"endBody\":{\"col\":1,\"line\":53}}};\n    \nimport 'chonky/style/main.css';\n\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories,\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './08-Drag-n-drop.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Enabling drag & drop';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories,\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './08-Drag-n-drop.md';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = 'Enabling drag & drop';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const DragNDropExample = () => {\\n    const folderChain = [\\n        { id: 'gBt4z3', name: 'My Documents', isDir: true },\\n        { id: 'gM5tTe', name: 'Other', isDir: true },\\n    ];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'yt43Ax', name: 'SCP-3930 Photos', isDir: true },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div className=\\\"live-example\\\" style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"drag-n-drop-example\":{\"startLoc\":{\"col\":32,\"line\":26},\"endLoc\":{\"col\":1,\"line\":53},\"startBody\":{\"col\":32,\"line\":26},\"endBody\":{\"col\":1,\"line\":53}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const DragNDropExample = () => {\n    const folderChain = [\n        { id: 'gBt4z3', name: 'My Documents', isDir: true },\n        { id: 'gM5tTe', name: 'Other', isDir: true },\n    ];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'yt43Ax', name: 'SCP-3930 Photos', isDir: true },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"drag-n-drop-example":{startLoc:{col:32,line:34},endLoc:{col:1,line:61},startBody:{col:32,line:34},endBody:{col:1,line:61}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories,\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './08-Drag-n-drop.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Enabling drag & drop';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const DragNDropExample = () => {\n    const folderChain = [\n        { id: 'gBt4z3', name: 'My Documents', isDir: true },\n        { id: 'gM5tTe', name: 'Other', isDir: true },\n    ];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'yt43Ax', name: 'SCP-3930 Photos', isDir: true },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"drag-n-drop-example":{startLoc:{col:32,line:26},endLoc:{col:1,line:53},startBody:{col:32,line:26},endBody:{col:1,line:53}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.b)({markdown:"You might notice that drag & drop does not work out-of-the-box in Chonky. This is\nbecause Chonky uses [react-dnd](https://react-dnd.github.io/react-dnd/) library to\nhandle drag & drop, which is not turned by default.\n\nTo enable drag & drop, you will need to wrap your application root with the\n`<DndProvider>` component from react-dnd:\n\n```tsx\nimport React, { ReactDOM } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nReactDOM.render(\n    <DndProvider backend={HTML5Backend}>\n        <App />\n    </DndProvider>,\n    document.getElementById('app')\n);\n```\n\nNext, enable drag & drop in your `<FileBrowser>`:\n\n```tsx\n<FileBrowser\n    files={files}\n    enableDragAndDrop={true} // <----\n>\n    <FileToolbar />\n    <FileList />\n</FileBrowser>\n```\n\nOnce you do this, drag & drop should start working in all Chonky instances. FYI, you\ndon't have to use `HTML5Backend`, you can replace it with any backend you want. Consult\n[react-dnd docs](https://react-dnd.github.io/react-dnd/docs/overview) for details.\n"})),_parameters)},function DragNDropExample(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"live-example",style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[{id:"mHe4A1",name:"Meaning of life.txt",size:31415},{id:"yt43Ax",name:"SCP-3930 Photos",isDir:!0}],folderChain:[{id:"gBt4z3",name:"My Documents",isDir:!0},{id:"gM5tTe",name:"Other",isDir:!0}],onFileAction:function handleFileAction(action,data){Object(story_helpers.c)({action:action,data:data})},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.g,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null)))});_08_Drag_n_drop_stories_DragNDropExample.displayName="DragNDropExample"},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"DragNDropExample",(function(){return DragNDropExample}));__webpack_require__(13),__webpack_require__(27),__webpack_require__(41);var _parameters,story_helpers=__webpack_require__(8);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var category=story_helpers.a.FileBrowserBasics,DragNDropExample=(__webpack_exports__.default={title:"".concat(category,"|").concat("Custom styling"),parameters:(_parameters={storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import \'chonky/style/main.css\';\\n\\nimport { createDocsObject, StoryCategories } from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./09-Custom-styling.md\';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = \'Custom styling\';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown, hideStory: true }),\\n    },\\n};\\n\\nexport const DragNDropExample = () => null;\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"drag-n-drop-example":{"startLoc":{"col":32,"line":19},"endLoc":{"col":42,"line":19},"startBody":{"col":32,"line":19},"endBody":{"col":42,"line":19}}};\n    \nimport \'chonky/style/main.css\';\n\nimport { createDocsObject, StoryCategories } from \'../story-helpers\';\n// @ts-ignore\n\nimport markdown from \'./09-Custom-styling.md\';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = \'Custom styling\';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {"storySource":{"source":"import \'chonky/style/main.css\';\\n\\nimport { createDocsObject, StoryCategories } from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./09-Custom-styling.md\';\\n\\nconst category = StoryCategories.FileBrowserBasics;\\nconst title = \'Custom styling\';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown, hideStory: true }),\\n    },\\n};\\n\\nexport const DragNDropExample = () => null;\\n","locationsMap":{"drag-n-drop-example":{"startLoc":{"col":32,"line":19},"endLoc":{"col":42,"line":19},"startBody":{"col":32,"line":19},"endBody":{"col":42,"line":19}}}},\n        docs: createDocsObject({ markdown, hideStory: true }),\n    },\n};\n\nexport const DragNDropExample = () => null;\n',locationsMap:{"drag-n-drop-example":{startLoc:{col:32,line:27},endLoc:{col:42,line:27},startBody:{col:32,line:27},endBody:{col:42,line:27}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport { createDocsObject, StoryCategories } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './09-Custom-styling.md';\n\nconst category = StoryCategories.FileBrowserBasics;\nconst title = 'Custom styling';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\n        docs: createDocsObject({ markdown, hideStory: true }),\n    },\n};\n\nexport const DragNDropExample = () => null;\n",locationsMap:{"drag-n-drop-example":{startLoc:{col:32,line:19},endLoc:{col:42,line:19},startBody:{col:32,line:19},endBody:{col:42,line:19}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.b)({markdown:"As explained in _Installation_ section, you need to use a separate import statement\nto import Chonky's styles:\n\n```ts\nimport 'chonky/style/main.css'; // <----\nimport { FileBrowser } from 'chonky';\n\n// ... Use them in your code\n```\n\nThere are 3 main ways to customise the styles, all of which are described below.\n\nThis approach is not recommended since it increases the chance of your custom styles breaking once a new version\nof Chonky is released.\n\n## Method #1 (_recommended_):\n\nYou can add your own `style.css` import that overrides or extends Chonky's stylesheet,\nand import it **after** after Chonky's `main.css`:\n\n```ts\nimport 'chonky/style/main.css';\nimport './styles.css';\nimport { FileBrowser } from 'chonky';\n```\n\n## Method #2 (_recommended_):\n\nThe original [SASS](https://sass-lang.com/) source for Chonky styles can also be\nfound in the `./node_modules/chonky/styles/` directory. The file called `_util.sass`\ndefines some styling variables and their default values. You can override these\ndefaults by including Chonky's styles in your custom `style.sass`. For example, on\ncould change the selection colour from light blue to orange using:\n\n```scss\n// `style.scss`\n$fg-active: #f90;\n$bg-active: #f90;\n@import '~chonky/style/main.scss';\n```\n\nGiven you have a [SASS loader](https://github.com/webpack-contrib/sass-loader#imports)\nconfigured, you can then import your custom `style.sass` as shown below. Chonky\nstyles will be included automatically.\n\n```js\nimport './my_styles/style.scss';\nimport { FileBrowser, FolderView } from 'chonky';\n```\n\n## Method #3 (_Not recommended_):\n\nYou can create a copy of `./node_modules/chonky/styles/main.css` and place it somewhere\nin your project directory. You can then make necessary changes to the styles, and\nimport your custom `main.css` **in place** of Chonky's version:\n\n```ts\nimport './my_styles/custom_main.css';\nimport { FileBrowser, FolderView } from 'chonky';\n```\n",hideStory:!0})),_parameters)},function DragNDropExample(){return null})},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"InvalidPropsExample",(function(){return _01_Invalid_props_stories_InvalidPropsExample}));__webpack_require__(13),__webpack_require__(27),__webpack_require__(41);var _parameters,src=__webpack_require__(7),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(8);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var category=story_helpers.a.FileBrowserExamples,_01_Invalid_props_stories_InvalidPropsExample=(__webpack_exports__.default={title:"".concat(category,"|").concat("Passing invalid props"),parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport { FileBrowser, FileList, FileToolbar } from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, StoryCategories } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './01-Invalid-props.md';\\n\\nconst category = StoryCategories.FileBrowserExamples;\\nconst title = 'Passing invalid props';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const InvalidPropsExample = () => {\\n    const badFiles = [\\n        12312, // Not an object or `null`!\\n        {}, // Missing all required fields!\\n        { id: '2xf4' }, // Missing some required fields!\\n        { id: '2xf4', name: 'Some other file!' }, // Duplicate ID!\\n\\n        { id: 'xbAr', name: 'Good file.txt' }, // Good file!\\n    ];\\n    const badFolderChain = [\\n        12312, // Not an object or `null`!\\n        { id: 'bRyH', name: 'Good folder', isDir: true },\\n        { id: 'bMgR', name: 'Good folder #2', isDir: true },\\n    ];\\n    const badFileActions = [{ id: 'duplicate_files' }, { id: 'duplicate_files' }];\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={badFiles as any}\\n                folderChain={badFolderChain as any}\\n                fileActions={badFileActions}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"invalid-props-example\":{\"startLoc\":{\"col\":35,\"line\":22},\"endLoc\":{\"col\":1,\"line\":50},\"startBody\":{\"col\":35,\"line\":22},\"endBody\":{\"col\":1,\"line\":50}}};\n    \nimport 'chonky/style/main.css';\n\nimport { FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, StoryCategories } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './01-Invalid-props.md';\n\nconst category = StoryCategories.FileBrowserExamples;\nconst title = 'Passing invalid props';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport { FileBrowser, FileList, FileToolbar } from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, StoryCategories } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './01-Invalid-props.md';\\n\\nconst category = StoryCategories.FileBrowserExamples;\\nconst title = 'Passing invalid props';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const InvalidPropsExample = () => {\\n    const badFiles = [\\n        12312, // Not an object or `null`!\\n        {}, // Missing all required fields!\\n        { id: '2xf4' }, // Missing some required fields!\\n        { id: '2xf4', name: 'Some other file!' }, // Duplicate ID!\\n\\n        { id: 'xbAr', name: 'Good file.txt' }, // Good file!\\n    ];\\n    const badFolderChain = [\\n        12312, // Not an object or `null`!\\n        { id: 'bRyH', name: 'Good folder', isDir: true },\\n        { id: 'bMgR', name: 'Good folder #2', isDir: true },\\n    ];\\n    const badFileActions = [{ id: 'duplicate_files' }, { id: 'duplicate_files' }];\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={badFiles as any}\\n                folderChain={badFolderChain as any}\\n                fileActions={badFileActions}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"invalid-props-example\":{\"startLoc\":{\"col\":35,\"line\":22},\"endLoc\":{\"col\":1,\"line\":50},\"startBody\":{\"col\":35,\"line\":22},\"endBody\":{\"col\":1,\"line\":50}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const InvalidPropsExample = () => {\n    const badFiles = [\n        12312, // Not an object or `null`!\n        {}, // Missing all required fields!\n        { id: '2xf4' }, // Missing some required fields!\n        { id: '2xf4', name: 'Some other file!' }, // Duplicate ID!\n\n        { id: 'xbAr', name: 'Good file.txt' }, // Good file!\n    ];\n    const badFolderChain = [\n        12312, // Not an object or `null`!\n        { id: 'bRyH', name: 'Good folder', isDir: true },\n        { id: 'bMgR', name: 'Good folder #2', isDir: true },\n    ];\n    const badFileActions = [{ id: 'duplicate_files' }, { id: 'duplicate_files' }];\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={badFiles as any}\n                folderChain={badFolderChain as any}\n                fileActions={badFileActions}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"invalid-props-example":{startLoc:{col:35,line:30},endLoc:{col:1,line:58},startBody:{col:35,line:30},endBody:{col:1,line:58}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport { FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, StoryCategories } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './01-Invalid-props.md';\n\nconst category = StoryCategories.FileBrowserExamples;\nconst title = 'Passing invalid props';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const InvalidPropsExample = () => {\n    const badFiles = [\n        12312, // Not an object or `null`!\n        {}, // Missing all required fields!\n        { id: '2xf4' }, // Missing some required fields!\n        { id: '2xf4', name: 'Some other file!' }, // Duplicate ID!\n\n        { id: 'xbAr', name: 'Good file.txt' }, // Good file!\n    ];\n    const badFolderChain = [\n        12312, // Not an object or `null`!\n        { id: 'bRyH', name: 'Good folder', isDir: true },\n        { id: 'bMgR', name: 'Good folder #2', isDir: true },\n    ];\n    const badFileActions = [{ id: 'duplicate_files' }, { id: 'duplicate_files' }];\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={badFiles as any}\n                folderChain={badFolderChain as any}\n                fileActions={badFileActions}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"invalid-props-example":{startLoc:{col:35,line:22},endLoc:{col:1,line:50},startBody:{col:35,line:22},endBody:{col:1,line:50}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.b)({markdown:"Where possible, Chonky tries to report errors when they arise. For example,\n`FileBrowser` component expects its `files` prop to be an array. If you pass some\ninvalid value instead, e.g. `null`, you will see an error component being rendered\ninstead of the file browser. Same error will also be logged to console.\n"})),_parameters)},function InvalidPropsExample(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[12312,{},{id:"2xf4"},{id:"2xf4",name:"Some other file!"},{id:"xbAr",name:"Good file.txt"}],folderChain:[12312,{id:"bRyH",name:"Good folder",isDir:!0},{id:"bMgR",name:"Good folder #2",isDir:!0}],fileActions:[{id:"duplicate_files"},{id:"duplicate_files"}]},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.g,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null)))});_01_Invalid_props_stories_InvalidPropsExample.displayName="InvalidPropsExample"},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"VirtualizationExample",(function(){return _02_Virtualization_stories_VirtualizationExample}));__webpack_require__(13),__webpack_require__(27),__webpack_require__(41);var _parameters,src=__webpack_require__(7),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(8);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var category=story_helpers.a.FileBrowserExamples,_02_Virtualization_stories_VirtualizationExample=(__webpack_exports__.default={title:"".concat(category,"|").concat("Virtualization with 10,000 files"),parameters:(_parameters={storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import \'chonky/style/main.css\';\\n\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileData,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from \'chonky\';\\nimport React from \'react\';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories\\n} from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./02-Virtualization.md\';\\n\\nconst category = StoryCategories.FileBrowserExamples;\\nconst title = \'Virtualization with 10,000 files\';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const VirtualizationExample = () => {\\n    const files: FileData[] = [];\\n\\n    for (let i = 0; i < 10000; ++i) {\\n        files.push({\\n            id: `file-${i}`,\\n            name: i ? `Chrome (${i}).exe` : \'Chrome.exe\',\\n        });\\n    }\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"virtualization-example":{"startLoc":{"col":37,"line":34},"endLoc":{"col":1,"line":61},"startBody":{"col":37,"line":34},"endBody":{"col":1,"line":61}}};\n    \nimport \'chonky/style/main.css\';\n\nimport {\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileData,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from \'chonky\';\nimport React from \'react\';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories\n} from \'../story-helpers\';\n// @ts-ignore\n\nimport markdown from \'./02-Virtualization.md\';\n\nconst category = StoryCategories.FileBrowserExamples;\nconst title = \'Virtualization with 10,000 files\';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {"storySource":{"source":"import \'chonky/style/main.css\';\\n\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileData,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from \'chonky\';\\nimport React from \'react\';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories\\n} from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./02-Virtualization.md\';\\n\\nconst category = StoryCategories.FileBrowserExamples;\\nconst title = \'Virtualization with 10,000 files\';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const VirtualizationExample = () => {\\n    const files: FileData[] = [];\\n\\n    for (let i = 0; i < 10000; ++i) {\\n        files.push({\\n            id: `file-${i}`,\\n            name: i ? `Chrome (${i}).exe` : \'Chrome.exe\',\\n        });\\n    }\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n","locationsMap":{"virtualization-example":{"startLoc":{"col":37,"line":34},"endLoc":{"col":1,"line":61},"startBody":{"col":37,"line":34},"endBody":{"col":1,"line":61}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const VirtualizationExample = () => {\n    const files: FileData[] = [];\n\n    for (let i = 0; i < 10000; ++i) {\n        files.push({\n            id: `file-${i}`,\n            name: i ? `Chrome (${i}).exe` : \'Chrome.exe\',\n        });\n    }\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n',locationsMap:{"virtualization-example":{startLoc:{col:37,line:42},endLoc:{col:1,line:69},startBody:{col:37,line:42},endBody:{col:1,line:69}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileData,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './02-Virtualization.md';\n\nconst category = StoryCategories.FileBrowserExamples;\nconst title = 'Virtualization with 10,000 files';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const VirtualizationExample = () => {\n    const files: FileData[] = [];\n\n    for (let i = 0; i < 10000; ++i) {\n        files.push({\n            id: `file-${i}`,\n            name: i ? `Chrome (${i}).exe` : 'Chrome.exe',\n        });\n    }\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"virtualization-example":{startLoc:{col:37,line:34},endLoc:{col:1,line:61},startBody:{col:37,line:34},endBody:{col:1,line:61}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.b)({markdown:"This component uses [`react-virtualized`](https://bvaughn.github.io/react-virtualized/).\n"})),_parameters)},function VirtualizationExample(){for(var files=[],i=0;i<1e4;++i)files.push({id:"file-".concat(i),name:i?"Chrome (".concat(i,").exe"):"Chrome.exe"});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:files,onFileAction:function handleFileAction(action,data){Object(story_helpers.c)({action:action,data:data})},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.g,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null)))});_02_Virtualization_stories_VirtualizationExample.displayName="VirtualizationExample"},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"DisableExample",(function(){return _03_Disable_default_actions_stories_DisableExample}));__webpack_require__(13),__webpack_require__(6),__webpack_require__(27),__webpack_require__(41);var _parameters,src=__webpack_require__(7),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(8);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var category=story_helpers.a.FileBrowserExamples,_03_Disable_default_actions_stories_DisableExample=(__webpack_exports__.default={title:"".concat(category,"|").concat("Disabling default file actions"),parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyActions,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './03-Disable-default-actions.md';\\n\\nconst category = StoryCategories.FileBrowserExamples;\\nconst title = 'Disabling default file actions';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const DisableExample = () => {\\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'hunter2', name: 'Password.txt' },\\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    const fileActions: FileAction[] = [\\n        {\\n            ...ChonkyActions.OpenFiles,\\n            toolbarButton: undefined,\\n        },\\n    ];\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                fileActions={fileActions}\\n                disableDefaultFileActions={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"disable-example\":{\"startLoc\":{\"col\":30,\"line\":34},\"endLoc\":{\"col\":1,\"line\":68},\"startBody\":{\"col\":30,\"line\":34},\"endBody\":{\"col\":1,\"line\":68}}};\n    \nimport 'chonky/style/main.css';\n\nimport {\n    ChonkyActions,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './03-Disable-default-actions.md';\n\nconst category = StoryCategories.FileBrowserExamples;\nconst title = 'Disabling default file actions';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyActions,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport {\\n    createDocsObject,\\n    showActionNotification,\\n    StoryCategories\\n} from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './03-Disable-default-actions.md';\\n\\nconst category = StoryCategories.FileBrowserExamples;\\nconst title = 'Disabling default file actions';\\n\\n\\nexport default {\\n    title: `${category}|${title}`,\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const DisableExample = () => {\\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'hunter2', name: 'Password.txt' },\\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    const fileActions: FileAction[] = [\\n        {\\n            ...ChonkyActions.OpenFiles,\\n            toolbarButton: undefined,\\n        },\\n    ];\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                fileActions={fileActions}\\n                disableDefaultFileActions={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"disable-example\":{\"startLoc\":{\"col\":30,\"line\":34},\"endLoc\":{\"col\":1,\"line\":68},\"startBody\":{\"col\":30,\"line\":34},\"endBody\":{\"col\":1,\"line\":68}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const DisableExample = () => {\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'hunter2', name: 'Password.txt' },\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    const fileActions: FileAction[] = [\n        {\n            ...ChonkyActions.OpenFiles,\n            toolbarButton: undefined,\n        },\n    ];\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                fileActions={fileActions}\n                disableDefaultFileActions={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"disable-example":{startLoc:{col:30,line:42},endLoc:{col:1,line:76},startBody:{col:30,line:42},endBody:{col:1,line:76}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    ChonkyActions,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport {\n    createDocsObject,\n    showActionNotification,\n    StoryCategories\n} from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './03-Disable-default-actions.md';\n\nconst category = StoryCategories.FileBrowserExamples;\nconst title = 'Disabling default file actions';\n\n\nexport default {\n    title: `${category}|${title}`,\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const DisableExample = () => {\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'hunter2', name: 'Password.txt' },\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    const fileActions: FileAction[] = [\n        {\n            ...ChonkyActions.OpenFiles,\n            toolbarButton: undefined,\n        },\n    ];\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                fileActions={fileActions}\n                disableDefaultFileActions={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"disable-example":{startLoc:{col:30,line:34},endLoc:{col:1,line:68},startBody:{col:30,line:34},endBody:{col:1,line:68}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.b)({markdown:'As discussed in the _Using file actions_ section, Chonky specifies some default file\nactions, such as "Open selection" and "Go up a directory" actions/buttons. If you\nwant to disable all default functionality and only use custom function, you can pass\nthe `disableDefaultFileActions` prop to `FileBrowser`.\n\nFor example, imagine we want to disable all Chonky file actions except for one -\n`open_files`. And even for `open_files`, we want to hide the menu button so that you\ncan only open files by double clicking them. We do this by disabling all file actions,\nand re-enabling a customised version of `open_files`:\n\n```tsx\nexport const DisableExample = () => {\n    const fileActions: FileAction[] = [\n        {\n            id: ChonkyActions.OpenFiles.id,\n        },\n    ];\n\n    return (\n        <FileBrowser disableDefaultFileActions={true} fileActions={fileActions}>\n            <FileToolbar />\n            <FileSearch />\n            <FileList />\n        </FileBrowser>\n    );\n};\n```\n\nYou can see the outcome in the _Live Example_ below. Note that there are no buttons\nin the toolbar, unlike all other examples in the documentation. Also, note that,\nbecause we re-enabled `open_files` manually, you can still open files, but now\nwithout the button in the menu.\n'})),_parameters)},function DisableExample(){var fileActions=[Object.assign({},src.a.OpenFiles,{toolbarButton:void 0})];return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[{id:"mHe4A1",name:"Meaning of life.txt",size:31415},{id:"hunter2",name:"Password.txt"},{id:"bEf24q",name:"Drag & drop files here",isDir:!0}],folderChain:[{id:"gBt4z3",name:"My Documents",isDir:!0}],onFileAction:function handleFileAction(action,data){Object(story_helpers.c)({action:action,data:data})},fileActions:fileActions,disableDefaultFileActions:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.g,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null)))});_03_Disable_default_actions_stories_DisableExample.displayName="DisableExample"}],[[357,1,2]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,