/*! For license information please see main.9f419c154c0cd33906ab.bundle.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{0:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ERkP")},10:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("jQ/y")},107:function(module,exports){},108:function(module,exports){},109:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("5o43")},110:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("P2aG")},111:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("sVFb")},12:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("plBw")},124:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("aYSr")},125:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("/Qos")},126:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("j4Sf")},127:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("LUwd")},128:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("OZaJ")},14:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("M+/F")},15:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("87if")},156:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("3yYM")},159:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("DfhM")},16:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("vrRf")},160:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("LqLs")},161:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("pu3o")},162:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("6U7i")},163:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Cm4o")},17:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("lTEL")},175:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("F63i")},178:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("GFpt")},18:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("kYxP")},19:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("DZ+c")},2:function(module,exports){module.exports=storybook_docs_dll},20:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("aLgo")},21:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("cARO")},211:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("+kY7")},213:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("5BYb")},216:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("5878")},219:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("m9LP")},223:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("l1C2")},228:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("iKE+")},23:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"c",(function(){return FileBrowser_FileBrowser})),__webpack_require__.d(__webpack_exports__,"f",(function(){return FileToolbar})),__webpack_require__.d(__webpack_exports__,"e",(function(){return FileSearch_FileSearch})),__webpack_require__.d(__webpack_exports__,"d",(function(){return FileList})),__webpack_require__.d(__webpack_exports__,"a",(function(){return ChonkyActions})),__webpack_require__.d(__webpack_exports__,"b",(function(){return ChonkyIconName}));__webpack_require__(3),__webpack_require__(10),__webpack_require__(20),__webpack_require__(26),__webpack_require__(27),__webpack_require__(12),__webpack_require__(17),__webpack_require__(25),__webpack_require__(14),__webpack_require__(21),__webpack_require__(4),__webpack_require__(9),__webpack_require__(19),__webpack_require__(15),__webpack_require__(18);var ChonkyIconName,delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),shortid=__webpack_require__(298),shortid_default=__webpack_require__.n(shortid),classnames=(__webpack_require__(5),__webpack_require__(58)),classnames_default=__webpack_require__.n(classnames),es=__webpack_require__(154);__webpack_require__(28),__webpack_require__(74);!function(ChonkyIconName){ChonkyIconName.loading="loading",ChonkyIconName.dropdown="dropdown",ChonkyIconName.dndDragging="dndDragging",ChonkyIconName.dndCanDrop="dndCanDrop",ChonkyIconName.dndCannotDrop="dndCannotDrop",ChonkyIconName.openFiles="openFiles",ChonkyIconName.openParentFolder="openParentFolder",ChonkyIconName.search="search",ChonkyIconName.checkActive="checkActive",ChonkyIconName.checkInactive="checkInactive",ChonkyIconName.desc="desc",ChonkyIconName.asc="asc",ChonkyIconName.list="list",ChonkyIconName.folder="folder",ChonkyIconName.folderCreate="folderCreate",ChonkyIconName.folderOpen="folderOpen",ChonkyIconName.smallThumbnail="smallThumbnail",ChonkyIconName.largeThumbnail="largeThumbnail",ChonkyIconName.folderChainSeparator="folderChainSeparator",ChonkyIconName.download="download",ChonkyIconName.upload="upload",ChonkyIconName.trash="trash",ChonkyIconName.fallbackIcon="fallbackIcon",ChonkyIconName.symlink="symlink",ChonkyIconName.hidden="hidden",ChonkyIconName.file="file",ChonkyIconName.license="license",ChonkyIconName.code="code",ChonkyIconName.config="config",ChonkyIconName.model="model",ChonkyIconName.database="database",ChonkyIconName.text="text",ChonkyIconName.archive="archive",ChonkyIconName.csv="csv",ChonkyIconName.image="image",ChonkyIconName.pdf="pdf",ChonkyIconName.word="word",ChonkyIconName.video="video",ChonkyIconName.info="info",ChonkyIconName.key="key",ChonkyIconName.lock="lock",ChonkyIconName.music="music",ChonkyIconName.flash="flash",ChonkyIconName.terminal="terminal",ChonkyIconName.authors="authors",ChonkyIconName.adobe="adobe",ChonkyIconName.git="git",ChonkyIconName.linux="linux",ChonkyIconName.windows="windows",ChonkyIconName.nodejs="nodejs",ChonkyIconName.php="php",ChonkyIconName.python="python",ChonkyIconName.ubuntu="ubuntu"}(ChonkyIconName||(ChonkyIconName={}));__webpack_require__(36),__webpack_require__(16),__webpack_require__(40),__webpack_require__(160),__webpack_require__(30);function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}var Logger=function(){function Logger(){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Logger)}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}(Logger,null,[{key:"error",value:function error(){for(var _console,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];(_console=console).error.apply(_console,["[Chonky runtime error]"].concat(args))}},{key:"formatBullets",value:function formatBullets(bullets){return"\n- ".concat(bullets.join("\n- "))}}]),Logger}();function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(iter))return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}var isPlainObject=function isPlainObject(value){return"[object Object]"===Object.prototype.toString.call(value)},useCleanFileArray=function useCleanFileArray(fileArray,allowNull){var cleanFileArray,warningMessage=null,warningBullets=[];if(Array.isArray(fileArray)){for(var indicesToBeRemoved=new Set,seenIds={},duplicateIdSet=new Set,missingIdIndices=[],missingNameIndices=[],invalidTypeIndices=[],i=0;i<fileArray.length;++i){var file=fileArray[i];isPlainObject(file)?(file.id&&seenIds[file.id]?(duplicateIdSet.add(file.id),indicesToBeRemoved.add(i)):seenIds[file.id]=!0,file.name||(missingNameIndices.push(i),indicesToBeRemoved.add(i)),file.id||(missingIdIndices.push(i),indicesToBeRemoved.add(i))):null!==file&&(invalidTypeIndices.push(i),indicesToBeRemoved.add(i))}duplicateIdSet.size>0&&warningBullets.push("Some files have duplicate IDs. These IDs appeared multiple "+"times: ".concat(Array.from(duplicateIdSet))),missingIdIndices.length>0&&warningBullets.push('Some files are missing the "id" field. '+"Relevant file indices: ".concat(missingIdIndices.join(", "))),missingNameIndices.length>0&&warningBullets.push('Some files are missing the "name" field. '+"Relevant file indices: ".concat(missingNameIndices.join(", "))),invalidTypeIndices.length>0&&warningBullets.push('Some files have invalid type (they are neither a plain object nor "null"). '+"Relevant file indices: ".concat(invalidTypeIndices.join(", "))),indicesToBeRemoved.size>0?(cleanFileArray=fileArray.filter((function(value,index){return!indicesToBeRemoved.has(index)})),warningMessage="".concat(indicesToBeRemoved.size," offending ")+"file".concat(1===indicesToBeRemoved.size?" was":"s were"," ")+" removed from the array."):cleanFileArray=fileArray}else cleanFileArray=allowNull?null:[],allowNull&&null===fileArray||(warningMessage="Provided value was replaced "+"with ".concat(allowNull?"null":"empty array","."),warningBullets.push('Expected "files" to be an array, got type '+'"'.concat(_typeof(fileArray),'" instead (value: ').concat(fileArray,").")));return{cleanFileArray:cleanFileArray,warningMessage:warningMessage,warningBullets:warningBullets}};function file_helper_defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}var FileHelper=function(){function FileHelper(){!function file_helper_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,FileHelper)}return function file_helper_createClass(Constructor,protoProps,staticProps){return protoProps&&file_helper_defineProperties(Constructor.prototype,protoProps),staticProps&&file_helper_defineProperties(Constructor,staticProps),Constructor}(FileHelper,null,[{key:"isClickable",value:function isClickable(file){return!!file}},{key:"isOpenable",value:function isOpenable(file){return!!file&&!1!==file.openable}},{key:"isSelectable",value:function isSelectable(file){return!!file&&!1!==file.selectable}},{key:"isDraggable",value:function isDraggable(file){return!!file&&!1!==file.draggable}},{key:"isDroppable",value:function isDroppable(file){return!!file&&(!(!file.isDir||!1===file.droppable)||!0===file.droppable)}}]),FileHelper}(),exact_trie=__webpack_require__(303),exact_trie_default=__webpack_require__.n(exact_trie),memoizee=__webpack_require__(304);function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function file_icon_helper_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return file_icon_helper_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return file_icon_helper_arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function file_icon_helper_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var _IconMap,getIconTrie=__webpack_require__.n(memoizee)()((function(){for(var colourIndex=0,IconsToExtensions=[[ChonkyIconName.license,["license"]],[ChonkyIconName.config,["sfk","ini","yaml","toml","iml"]],[ChonkyIconName.model,["3ds","obj","ply","fbx"]],[ChonkyIconName.database,["json","sql","npy","npz"]],[ChonkyIconName.text,["txt","md"]],[ChonkyIconName.archive,["zip","rar","tar","tar.gz"]],[ChonkyIconName.csv,["csv","xls","xlsx"]],[ChonkyIconName.image,ImageExtensions],[ChonkyIconName.pdf,["pdf"]],[ChonkyIconName.word,["doc","docx","odt"]],[ChonkyIconName.video,VideoExtensions],[ChonkyIconName.code,["html","php","css","sass","scss","less","cpp","h","hpp","c","xml","ipynb"]],[ChonkyIconName.info,["bib","readme","nfo"]],[ChonkyIconName.key,["pem","pub"]],[ChonkyIconName.lock,["lock","lock.json","shrinkwrap.json"]],[ChonkyIconName.music,AudioExtensions],[ChonkyIconName.flash,["swf"]],[ChonkyIconName.terminal,["run","sh"]],[ChonkyIconName.trash,[".Trashes"]],[ChonkyIconName.authors,["authors","contributors"]],[ChonkyIconName.adobe,["psd"]],[ChonkyIconName.git,[".gitignore"]],[ChonkyIconName.linux,["AppImage"]],[ChonkyIconName.windows,["exe"]],[ChonkyIconName.nodejs,["js","jsx","ts","tsx","d.ts"]],[ChonkyIconName.php,["php"]],[ChonkyIconName.python,["py"]],[ChonkyIconName.ubuntu,["deb"]]],exactTrie=new exact_trie_default.a,_i=0,_IconsToExtensions=IconsToExtensions;_i<_IconsToExtensions.length;_i++)for(var _pair=_slicedToArray(_IconsToExtensions[_i],2),icon=_pair[0],extensions=_pair[1],i=0;i<extensions.length;++i){var iconData={icon:icon,colorCode:(colourIndex+=5)%(ColorsLight.length-1)+1};exactTrie.put(extensions[i],iconData,!0)}return exactTrie})),VideoExtensions=["3g2","3gp","3gpp","asf","asx","avi","dvb","f4v","fli","flv","fvt","h261","h263","h264","jpgm","jpgv","jpm","m1v","m2v","m4u","m4v","mj2","mjp2","mk3d","mks","mkv","mng","mov","movie","mp4","mp4v","mpe","mpeg","mpg","mpg4","mxu","ogv","pyv","qt","smv","ts","uvh","uvm","uvp","uvs","uvu","uvv","uvvh","uvvm","uvvp","uvvs","uvvu","uvvv","viv","vob","webm","wm","wmv","wmx","wvx"],ImageExtensions=["3ds","apng","azv","bmp","bmp","btif","cgm","cmx","djv","djvu","drle","dwg","dxf","emf","exr","fbs","fh","fh4","fh5","fh7","fhc","fits","fpx","fst","g3","gif","heic","heics","heif","heifs","ico","ico","ief","jls","jng","jp2","jpe","jpeg","jpf","jpg","jpg2","jpm","jpx","jxr","ktx","mdi","mmr","npx","pbm","pct","pcx","pcx","pgm","pic","png","pnm","ppm","psd","pti","ras","rgb","rlc","sgi","sid","sub","svg","svgz","t38","tap","tfx","tga","tif","tiff","uvg","uvi","uvvg","uvvi","vtf","wbmp","wdp","webp","wmf","xbm","xif","xpm","xwd"],AudioExtensions=["3gpp","aac","adp","aif","aifc","aiff","au","caf","dra","dts","dtshd","ecelp4800","ecelp7470","ecelp9600","eol","flac","kar","lvp","m2a","m3a","m3u","m4a","m4a","mid","midi","mka","mp2","mp2a","mp3","mp3","mp4a","mpga","oga","ogg","pya","ra","ra","ram","rip","rmi","rmp","s3m","sil","snd","spx","uva","uvva","wav","wav","wav","wax","weba","wma","xm"],ColorsLight=["#bbbbbb","#d65c5c","#d6665c","#d6705c","#d67a5c","#d6855c","#d68f5c","#d6995c","#d6a35c","#d6ad5c","#d6b85c","#d6c25c","#d6cc5c","#d6d65c","#ccd65c","#c2d65c","#b8d65c","#add65c","#a3d65c","#99d65c","#8fd65c","#85d65c","#7ad65c","#70d65c","#66d65c","#5cd65c","#5cd666","#5cd670","#5cd67a","#5cd685","#5cd68f","#5cd699","#5cd6a3","#5cd6ad","#5cd6b8","#5cd6c2","#5cd6cc","#5cd6d6","#5cccd6","#5cc2d6","#5cb8d6","#5cadd6","#5ca3d6","#5c99d6","#5c8fd6","#5c85d6","#5c7ad6","#5c70d6","#5c66d6","#5c5cd6","#665cd6","#705cd6","#7a5cd6","#855cd6","#8f5cd6","#995cd6","#a35cd6","#ad5cd6","#b85cd6","#c25cd6","#cc5cd6","#d65cd6","#d65ccc","#d65cc2","#d65cb8","#d65cad","#d65ca3","#d65c99","#d65c8f","#d65c85","#d65c7a","#d65c70","#d65c66"],ColorsDark=["#777","#8f3d3d","#8f443d","#8f4b3d","#8f523d","#8f583d","#8f5f3d","#8f663d","#8f6d3d","#8f743d","#8f7a3d","#8f813d","#8f883d","#8f8f3d","#888f3d","#818f3d","#7a8f3d","#748f3d","#6d8f3d","#668f3d","#5f8f3d","#588f3d","#528f3d","#4b8f3d","#448f3d","#3d8f3d","#3d8f44","#3d8f4b","#3d8f52","#3d8f58","#3d8f5f","#3d8f66","#3d8f6d","#3d8f74","#3d8f7a","#3d8f81","#3d8f88","#3d8f8f","#3d888f","#3d818f","#3d7a8f","#3d748f","#3d6d8f","#3d668f","#3d5f8f","#3d588f","#3d528f","#3d4b8f","#3d448f","#3d3d8f","#443d8f","#4b3d8f","#523d8f","#583d8f","#5f3d8f","#663d8f","#6d3d8f","#743d8f","#7a3d8f","#813d8f","#883d8f","#8f3d8f","#8f3d88","#8f3d81","#8f3d7a","#8f3d74","#8f3d6d","#8f3d66","#8f3d5f","#8f3d58","#8f3d52","#8f3d4b","#8f3d44"],faAdobe=__webpack_require__(349),faGitAlt=__webpack_require__(350),faLinux=__webpack_require__(351),faNodeJs=__webpack_require__(353),faPhp=__webpack_require__(354),faPython=__webpack_require__(355),faUbuntu=__webpack_require__(356),faWindows=__webpack_require__(352),faArrowDown=__webpack_require__(207),faArrowUp=__webpack_require__(315),faBalanceScale=__webpack_require__(330),faBoxOpen=__webpack_require__(310),faCheckCircle=__webpack_require__(313),faChevronDown=__webpack_require__(307),faChevronRight=__webpack_require__(322),faCircle=__webpack_require__(314),faCircleNotch=__webpack_require__(306),faCogs=__webpack_require__(332),faCubes=__webpack_require__(333),faDatabase=__webpack_require__(334),faDownload=__webpack_require__(323),faExclamationTriangle=__webpack_require__(326),faExternalLinkAlt=__webpack_require__(327),faEyeSlash=__webpack_require__(328),faFile=__webpack_require__(329),faFileAlt=__webpack_require__(335),faFileArchive=__webpack_require__(336),faFileCode=__webpack_require__(331),faFileExcel=__webpack_require__(337),faFileImage=__webpack_require__(338),faFilePdf=__webpack_require__(339),faFileWord=__webpack_require__(340),faFilm=__webpack_require__(341),faFistRaised=__webpack_require__(308),faFolder=__webpack_require__(317),faFolderOpen=__webpack_require__(319),faFolderPlus=__webpack_require__(318),faInfoCircle=__webpack_require__(342),faKey=__webpack_require__(343),faLevelUpAlt=__webpack_require__(311),faList=__webpack_require__(316),faLock=__webpack_require__(344),faMusic=__webpack_require__(345),faRunning=__webpack_require__(346),faSearch=__webpack_require__(312),faTerminal=__webpack_require__(347),faTh=__webpack_require__(320),faThLarge=__webpack_require__(321),faTimes=__webpack_require__(309),faTrash=__webpack_require__(325),faUpload=__webpack_require__(324),faUsers=__webpack_require__(348),index_es=__webpack_require__(305);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var IconMap=(_defineProperty(_IconMap={},ChonkyIconName.loading,faCircleNotch.faCircleNotch),_defineProperty(_IconMap,ChonkyIconName.dropdown,faChevronDown.faChevronDown),_defineProperty(_IconMap,ChonkyIconName.dndDragging,faFistRaised.faFistRaised),_defineProperty(_IconMap,ChonkyIconName.dndCanDrop,faArrowDown.faArrowDown),_defineProperty(_IconMap,ChonkyIconName.dndCannotDrop,faTimes.faTimes),_defineProperty(_IconMap,ChonkyIconName.openFiles,faBoxOpen.faBoxOpen),_defineProperty(_IconMap,ChonkyIconName.openParentFolder,faLevelUpAlt.faLevelUpAlt),_defineProperty(_IconMap,ChonkyIconName.search,faSearch.faSearch),_defineProperty(_IconMap,ChonkyIconName.checkActive,faCheckCircle.faCheckCircle),_defineProperty(_IconMap,ChonkyIconName.checkInactive,faCircle.faCircle),_defineProperty(_IconMap,ChonkyIconName.desc,faArrowDown.faArrowDown),_defineProperty(_IconMap,ChonkyIconName.asc,faArrowUp.faArrowUp),_defineProperty(_IconMap,ChonkyIconName.list,faList.faList),_defineProperty(_IconMap,ChonkyIconName.folder,faFolder.faFolder),_defineProperty(_IconMap,ChonkyIconName.folderCreate,faFolderPlus.faFolderPlus),_defineProperty(_IconMap,ChonkyIconName.folderOpen,faFolderOpen.faFolderOpen),_defineProperty(_IconMap,ChonkyIconName.smallThumbnail,faTh.faTh),_defineProperty(_IconMap,ChonkyIconName.largeThumbnail,faThLarge.faThLarge),_defineProperty(_IconMap,ChonkyIconName.folderChainSeparator,faChevronRight.faChevronRight),_defineProperty(_IconMap,ChonkyIconName.download,faDownload.faDownload),_defineProperty(_IconMap,ChonkyIconName.upload,faUpload.faUpload),_defineProperty(_IconMap,ChonkyIconName.trash,faTrash.faTrash),_defineProperty(_IconMap,ChonkyIconName.fallbackIcon,faExclamationTriangle.faExclamationTriangle),_defineProperty(_IconMap,ChonkyIconName.symlink,faExternalLinkAlt.faExternalLinkAlt),_defineProperty(_IconMap,ChonkyIconName.hidden,faEyeSlash.faEyeSlash),_defineProperty(_IconMap,ChonkyIconName.file,faFile.faFile),_defineProperty(_IconMap,ChonkyIconName.license,faBalanceScale.faBalanceScale),_defineProperty(_IconMap,ChonkyIconName.code,faFileCode.faFileCode),_defineProperty(_IconMap,ChonkyIconName.config,faCogs.faCogs),_defineProperty(_IconMap,ChonkyIconName.model,faCubes.faCubes),_defineProperty(_IconMap,ChonkyIconName.database,faDatabase.faDatabase),_defineProperty(_IconMap,ChonkyIconName.text,faFileAlt.faFileAlt),_defineProperty(_IconMap,ChonkyIconName.archive,faFileArchive.faFileArchive),_defineProperty(_IconMap,ChonkyIconName.csv,faFileExcel.faFileExcel),_defineProperty(_IconMap,ChonkyIconName.image,faFileImage.faFileImage),_defineProperty(_IconMap,ChonkyIconName.pdf,faFilePdf.faFilePdf),_defineProperty(_IconMap,ChonkyIconName.word,faFileWord.faFileWord),_defineProperty(_IconMap,ChonkyIconName.video,faFilm.faFilm),_defineProperty(_IconMap,ChonkyIconName.info,faInfoCircle.faInfoCircle),_defineProperty(_IconMap,ChonkyIconName.key,faKey.faKey),_defineProperty(_IconMap,ChonkyIconName.lock,faLock.faLock),_defineProperty(_IconMap,ChonkyIconName.music,faMusic.faMusic),_defineProperty(_IconMap,ChonkyIconName.flash,faRunning.faRunning),_defineProperty(_IconMap,ChonkyIconName.terminal,faTerminal.faTerminal),_defineProperty(_IconMap,ChonkyIconName.authors,faUsers.faUsers),_defineProperty(_IconMap,ChonkyIconName.adobe,faAdobe.faAdobe),_defineProperty(_IconMap,ChonkyIconName.git,faGitAlt.faGitAlt),_defineProperty(_IconMap,ChonkyIconName.linux,faLinux.faLinux),_defineProperty(_IconMap,ChonkyIconName.windows,faWindows.faWindows),_defineProperty(_IconMap,ChonkyIconName.nodejs,faNodeJs.faNodeJs),_defineProperty(_IconMap,ChonkyIconName.php,faPhp.faPhp),_defineProperty(_IconMap,ChonkyIconName.python,faPython.faPython),_defineProperty(_IconMap,ChonkyIconName.ubuntu,faUbuntu.faUbuntu),_IconMap),ChonkyIconFA=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var icon=props.icon,faProps=Object.assign({},props,{icon:IconMap[icon]?IconMap[icon]:IconMap.fallbackIcon});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(index_es.a,faProps)})),TextPlaceholder=(__webpack_require__(756),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var placeholderLength=function getRandomInt(min,max){return min+Math.floor(Math.random()*Math.floor(max-min))}(props.minLength,props.maxLength),whitespace="&nbsp;".repeat(placeholderLength);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-text-placeholder",dangerouslySetInnerHTML:{__html:whitespace}})}))),FileThumbnail_FileThumbnail=(__webpack_require__(95),function FileThumbnail(props){var thumbnailUrl=props.thumbnailUrl,thumbnailStyle=thumbnailUrl?{backgroundImage:"url('".concat(thumbnailUrl,"')")}:{},className=classnames_default()({"chonky-file-thumbnail":!0,"chonky-file-thumbnail-hidden":!thumbnailUrl});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:className,style:thumbnailStyle})});function BaseFileEntry_slicedToArray(arr,i){return function BaseFileEntry_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function BaseFileEntry_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function BaseFileEntry_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return BaseFileEntry_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return BaseFileEntry_arrayLikeToArray(o,minLen)}(arr,i)||function BaseFileEntry_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function BaseFileEntry_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}FileThumbnail_FileThumbnail.displayName="FileThumbnail";var SpecialAction,BaseFileEntry=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var file=props.file,selected=props.selected,style=props.style,dndIsDragging=props.dndIsDragging,dndIsOver=props.dndIsOver,dndCanDrop=props.dndCanDrop,_useState2=BaseFileEntry_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(null),2),thumbnailUrl=_useState2[0],setThumbnailUrl=_useState2[1],_useState4=BaseFileEntry_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(!1),2),thumbnailLoading=_useState4[0];!function useThumbnailUrl(file,setThumbnailUrl,setThumbnailLoading){var thumbnailGenerator=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyThumbnailGeneratorContext),deps=[file,setThumbnailUrl,setThumbnailLoading,thumbnailGenerator];Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){var loadingCancelled=!1;return file&&(thumbnailGenerator?(setThumbnailLoading(!0),Promise.resolve().then((function(){return thumbnailGenerator(file)})).then((function(thumbnailUrl){loadingCancelled||(setThumbnailLoading(!1),thumbnailUrl&&"string"==typeof thumbnailUrl&&setThumbnailUrl(thumbnailUrl))})).catch((function(error){loadingCancelled||setThumbnailLoading(!1),Logger.error('User-defined "thumbnailGenerator" handler threw an error: '.concat(error.message))}))):file.thumbnailUrl&&setThumbnailUrl(file.thumbnailUrl)),function(){loadingCancelled=!0}}),deps)}(file,setThumbnailUrl,_useState4[1]);var iconData=function useIconData(file){var deps=[file];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){if(!file)return{icon:ChonkyIconName.loading,colorCode:0};if(!0===file.isDir)return{icon:ChonkyIconName.folder,colorCode:0};var match=getIconTrie().getWithCheckpoints(file.name,".",!0);return match||{icon:ChonkyIconName.file,colorCode:32}}),deps)}(file),backgroundColor=thumbnailUrl?ColorsDark[iconData.colorCode]:ColorsLight[iconData.colorCode],iconSpin=thumbnailLoading||!file,icon=thumbnailLoading?ChonkyIconName.loading:iconData.icon,dndIcon=function useDndIcon(selected,isDragging,isOver,canDrop){return isOver?canDrop&&!selected?ChonkyIconName.dndCanDrop:ChonkyIconName.dndCannotDrop:isDragging?ChonkyIconName.dndDragging:null}(selected,dndIsDragging,dndIsOver,dndCanDrop),className=classnames_default()({"chonky-file-entry":!0,"chonky-file-entry-selected":selected,"chonky-file-entry-dragging":dndIsDragging,"chonky-file-entry-drop-hovered":dndIsOver&&dndCanDrop});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:className,style:style},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-entry-inside"},dndIcon&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-entry-dnd-indicator"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:dndIcon})),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-entry-preview"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-icon"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-icon-inside"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:icon,spin:iconSpin}))),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-selection"}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(FileThumbnail_FileThumbnail,{thumbnailUrl:thumbnailUrl}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-background",style:{backgroundColor:backgroundColor}})),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-entry-description"},file?file.name:delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(TextPlaceholder,{minLength:15,maxLength:20}))))}));!function(SpecialAction){SpecialAction.MouseClickFile="mouse_click_file",SpecialAction.KeyboardClickFile="keyboard_click_file",SpecialAction.ToggleSearchBar="toggle_search_bar",SpecialAction.DragNDropStart="drag_n_drop_start",SpecialAction.DragNDropEnd="drag_n_drop_end"}(SpecialAction||(SpecialAction={}));var ClickableFileEntry_hooks_useFileClickHandlers=function useFileClickHandlers(file){var dispatchSpecialAction=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyDispatchSpecialActionContext),handlerDeps=[file,dispatchSpecialAction],onMouseClick=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event,clickType){file&&dispatchSpecialAction({actionName:SpecialAction.MouseClickFile,clickType:clickType,file:file,altKey:event.altKey,ctrlKey:event.ctrlKey,shiftKey:event.shiftKey})}),handlerDeps),onKeyboardClick=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){file&&dispatchSpecialAction({actionName:SpecialAction.KeyboardClickFile,file:file,enterKey:event.enterKey,spaceKey:event.spaceKey,altKey:event.altKey,ctrlKey:event.ctrlKey,shiftKey:event.shiftKey})}),handlerDeps);return{onSingleClick:Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){return onMouseClick(event,"single")}),[onMouseClick]),onDoubleClick:Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){return onMouseClick(event,"double")}),[onMouseClick]),onKeyboardClick:onKeyboardClick}};try{ClickableFileEntry_hooks_useFileClickHandlers.displayName="useFileClickHandlers",ClickableFileEntry_hooks_useFileClickHandlers.__docgenInfo={description:"",displayName:"useFileClickHandlers",props:{id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},name:{defaultValue:null,description:"",name:"name",required:!0,type:{name:"string"}},ext:{defaultValue:null,description:"",name:"ext",required:!1,type:{name:"string"}},isDir:{defaultValue:null,description:"",name:"isDir",required:!1,type:{name:"boolean"}},isHidden:{defaultValue:null,description:"",name:"isHidden",required:!1,type:{name:"boolean"}},isSymlink:{defaultValue:null,description:"",name:"isSymlink",required:!1,type:{name:"boolean"}},openable:{defaultValue:null,description:"",name:"openable",required:!1,type:{name:"boolean"}},selectable:{defaultValue:null,description:"",name:"selectable",required:!1,type:{name:"boolean"}},draggable:{defaultValue:null,description:"",name:"draggable",required:!1,type:{name:"boolean"}},droppable:{defaultValue:null,description:"",name:"droppable",required:!1,type:{name:"boolean"}},size:{defaultValue:null,description:"",name:"size",required:!1,type:{name:"number"}},modDate:{defaultValue:null,description:"",name:"modDate",required:!1,type:{name:"Date"}},parentId:{defaultValue:null,description:"",name:"parentId",required:!1,type:{name:"string"}},childrenIds:{defaultValue:null,description:"",name:"childrenIds",required:!1,type:{name:"string[]"}},thumbnailUrl:{defaultValue:null,description:"",name:"thumbnailUrl",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/ClickableFileEntry-hooks.tsx#useFileClickHandlers"]={docgenInfo:ClickableFileEntry_hooks_useFileClickHandlers.__docgenInfo,name:"useFileClickHandlers",path:"src/components/internal/ClickableFileEntry-hooks.tsx#useFileClickHandlers"})}catch(__react_docgen_typescript_loader_error){}__webpack_require__(111);var ClickableWrapper_hooks_useKeyDownHandler=function useKeyDownHandler(onKeyboardClick){var deps=[onKeyboardClick];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){if(onKeyboardClick){var keyboardClickEvent={enterKey:"Enter"===event.nativeEvent.code,spaceKey:"Space"===event.nativeEvent.code,altKey:event.altKey,ctrlKey:event.ctrlKey,shiftKey:event.shiftKey};(keyboardClickEvent.spaceKey||keyboardClickEvent.enterKey)&&(event.preventDefault(),onKeyboardClick(keyboardClickEvent))}}),deps)};try{ClickableWrapper_hooks_useKeyDownHandler.displayName="useKeyDownHandler",ClickableWrapper_hooks_useKeyDownHandler.__docgenInfo={description:"",displayName:"useKeyDownHandler",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/ClickableWrapper-hooks.tsx#useKeyDownHandler"]={docgenInfo:ClickableWrapper_hooks_useKeyDownHandler.__docgenInfo,name:"useKeyDownHandler",path:"src/components/internal/ClickableWrapper-hooks.tsx#useKeyDownHandler"})}catch(__react_docgen_typescript_loader_error){}var ClickableWrapper_ClickableWrapper=function ClickableWrapper(props){var children=props.children,WrapperTag=props.wrapperTag,passthroughProps=props.passthroughProps,onSingleClick=props.onSingleClick,onDoubleClick=props.onDoubleClick,onKeyboardClick=props.onKeyboardClick,handleClick=function useClickHandler(onSingleClick,onDoubleClick){var doubleClickDelay=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyDoubleClickDelayContext),counter=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return{clickCount:0,clickTimeout:null}}),[]),deps=[doubleClickDelay,onSingleClick,onDoubleClick];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){var mouseClickEvent={altKey:event.altKey,ctrlKey:event.ctrlKey,shiftKey:event.shiftKey};counter.clickCount++,1===counter.clickCount?(onSingleClick&&(event.preventDefault(),onSingleClick(mouseClickEvent)),counter.clickCount=1,counter.clickTimeout=setTimeout((function(){return counter.clickCount=0}),doubleClickDelay)):2===counter.clickCount&&(onDoubleClick&&(event.preventDefault(),onDoubleClick(mouseClickEvent)),"number"==typeof counter.clickTimeout&&(clearTimeout(counter.clickTimeout),counter.clickTimeout=null,counter.clickCount=0))}),deps)}(onSingleClick,onDoubleClick),handleKeyDown=ClickableWrapper_hooks_useKeyDownHandler(onKeyboardClick),compProps={};(onSingleClick||onDoubleClick||onKeyboardClick)&&(compProps.onClick=handleClick,compProps.onKeyDown=handleKeyDown,compProps.tabIndex=0);var mergedProps=Object.assign({},compProps,passthroughProps);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(WrapperTag,mergedProps,children)};ClickableWrapper_ClickableWrapper.displayName="ClickableWrapper";var ClickableFileEntry_ClickableFileEntry=function ClickableFileEntry(props){var file=props.file,fileClickHandlers=ClickableFileEntry_hooks_useFileClickHandlers(file),wrapperProps=Object.assign({wrapperTag:"div",passthroughProps:{className:"chonky-file-entry-clickable-wrapper chonky-fill-parent"}},FileHelper.isClickable(file)?fileClickHandlers:void 0);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ClickableWrapper_ClickableWrapper,wrapperProps,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(BaseFileEntry,props))};ClickableFileEntry_ClickableFileEntry.displayName="ClickableFileEntry";var useDrag=__webpack_require__(784),useDrop=__webpack_require__(785),getEmptyImage=__webpack_require__(296);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function DnDFileEntry_slicedToArray(arr,i){return function DnDFileEntry_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function DnDFileEntry_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function DnDFileEntry_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return DnDFileEntry_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return DnDFileEntry_arrayLikeToArray(o,minLen)}(arr,i)||function DnDFileEntry_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function DnDFileEntry_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var DnDFileEntry_DnDFileEntry=function DnDFileEntry(props){var file=props.file,dispatchSpecialAction=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyDispatchSpecialActionContext),canDrag=FileHelper.isDraggable(file),onDragStart=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(){FileHelper.isDraggable(file)&&dispatchSpecialAction({actionName:SpecialAction.DragNDropStart,dragSource:file})}),[dispatchSpecialAction,file]),onDragEnd=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(item,monitor){var dropResult=monitor.getDropResult();FileHelper.isDraggable(file)&&dropResult&&dropResult.dropTarget&&dispatchSpecialAction({actionName:SpecialAction.DragNDropEnd,dragSource:file,dropTarget:dropResult.dropTarget,dropEffect:dropResult.dropEffect})}),[dispatchSpecialAction,file]),onDrop=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(item,monitor){if(monitor.canDrop())return{dropTarget:file}}),[file]),canDrop=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(item){var _item$file,isSameFile=(null===(_item$file=item.file)||void 0===_item$file?void 0:_item$file.id)===(null==file?void 0:file.id);return FileHelper.isDroppable(file)&&!isSameFile}),[file]),_useDrag2=DnDFileEntry_slicedToArray(Object(useDrag.a)({item:{type:"chonky-file-entry",file:file},canDrag:canDrag,begin:onDragStart,end:onDragEnd,collect:function collect(monitor){return{isDragging:monitor.isDragging()}}}),3),dndIsDragging=_useDrag2[0].isDragging,drag=_useDrag2[1],preview=_useDrag2[2],_useDrop2=DnDFileEntry_slicedToArray(Object(useDrop.a)({accept:"chonky-file-entry",drop:onDrop,canDrop:canDrop,collect:function collect(monitor){return{isOver:monitor.isOver(),canDrop:monitor.canDrop()}}}),2),_useDrop2$=_useDrop2[0],dndIsOver=_useDrop2$.isOver,dndCanDrop=_useDrop2$.canDrop,drop=_useDrop2[1];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){preview(Object(getEmptyImage.a)(),{captureDraggingState:!0})}),[]),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{ref:drop,className:"chonky-file-entry-droppable-wrapper chonky-fill-parent"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{ref:FileHelper.isDraggable(file)?drag:null,className:"chonky-file-entry-draggable-wrapper chonky-fill-parent"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ClickableFileEntry_ClickableFileEntry,_extends({},props,{dndIsDragging:dndIsDragging,dndIsOver:dndIsOver,dndCanDrop:dndCanDrop}))))};DnDFileEntry_DnDFileEntry.displayName="DnDFileEntry";var DefaultEntrySize={width:160,height:120},FileList_virtualization_useEntryRenderer=function useEntryRenderer(files){var selection=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkySelectionContext),enableDragAndDrop=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyEnableDragAndDropContext),deps=[files,selection,enableDragAndDrop];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(virtualKey,index,style,parent,gutterSize,lastRow,lastColumn){if("number"==typeof gutterSize&&(lastColumn||(style.width=style.width-gutterSize),style.height=style.height-gutterSize),lastRow&&(style.height=style.height-1),lastColumn&&(style.width=style.width-1),index>=files.length)return null;var file=files[index],key=file?file.id:"loading-file-".concat(virtualKey),entryProps={file:file,displayIndex:index,selected:!!file&&!0===selection[file.id]},fileEntryComponent=enableDragAndDrop?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(DnDFileEntry_DnDFileEntry,entryProps):delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ClickableFileEntry_ClickableFileEntry,entryProps);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{key:key,className:"chonky-virtualization-wrapper",style:style},fileEntryComponent)}),deps)},_noContentRenderer=function noContentRenderer(height){var placeholderProps={className:classnames_default()({"chonky-file-list-notification":!0,"chonky-file-list-notification-empty":!0})};return"number"==typeof height&&(placeholderProps.style={height:height}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",placeholderProps,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-list-notification-content"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:ChonkyIconName.folderOpen}),"  Nothing to show"))};_noContentRenderer.displayName="noContentRenderer";var FileList_virtualization_useGridRenderer=function useGridRenderer(files,entrySize,entryRenderer,thumbsGridRef,fillParentContainer){var deps=[files,entrySize,entryRenderer,thumbsGridRef,fillParentContainer];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(_ref){var width=_ref.width,height=_ref.height,isMobile=function isMobileDevice(){return void 0!==window.orientation||-1!==navigator.userAgent.indexOf("IEMobile")}(),gutter=isMobile?5:8,columnCountFloat=(width+gutter-(!fillParentContainer||isMobile?0:16))/(entrySize.width+gutter),columnCount=Math.max(1,Math.floor(columnCountFloat)),rowCount=Math.ceil(files.length/columnCount);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(es.b,{style:{minHeight:entrySize.height+10},ref:thumbsGridRef,cellRenderer:function cellRenderer(data){var index=data.rowIndex*columnCount+data.columnIndex;return entryRenderer(data.key,index,Object.assign({},data.style),data.parent,gutter,data.rowIndex===rowCount-1,data.columnIndex===columnCount-1)},noContentRenderer:function noContentRenderer(){return _noContentRenderer(entrySize.height)},rowCount:rowCount,columnCount:columnCount,columnWidth:function columnWidth(_ref2){return function getColWidth(index,columnCount,entrySize,gutterSize){return index===columnCount-1?entrySize.width:entrySize.width+gutterSize}(_ref2.index,columnCount,entrySize,gutter)},rowHeight:function rowHeight(_ref3){_ref3.index;return function getRowHeight(index,rowCount,entrySize,gutterSize){return entrySize.height+gutterSize}(0,0,entrySize,gutter)},overscanRowCount:2,width:width,containerStyle:{minHeight:50},height:"number"==typeof height?height:500,autoHeight:!fillParentContainer,tabIndex:null})}),deps)};try{FileList_virtualization_useEntryRenderer.displayName="useEntryRenderer",FileList_virtualization_useEntryRenderer.__docgenInfo={description:"",displayName:"useEntryRenderer",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileList-virtualization.tsx#useEntryRenderer"]={docgenInfo:FileList_virtualization_useEntryRenderer.__docgenInfo,name:"useEntryRenderer",path:"src/components/external/FileList-virtualization.tsx#useEntryRenderer"})}catch(__react_docgen_typescript_loader_error){}try{noContentRenderer.displayName="noContentRenderer",noContentRenderer.__docgenInfo={description:"",displayName:"noContentRenderer",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileList-virtualization.tsx#noContentRenderer"]={docgenInfo:noContentRenderer.__docgenInfo,name:"noContentRenderer",path:"src/components/external/FileList-virtualization.tsx#noContentRenderer"})}catch(__react_docgen_typescript_loader_error){}var INTENTIONAL_EMPTY_DEPS=[],NOOP_FUNCTION=function NOOP_FUNCTION(){};__webpack_require__(54),__webpack_require__(126),__webpack_require__(109),__webpack_require__(127),__webpack_require__(128);function selection_typeof(obj){return(selection_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function _createSuperInternal(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==selection_typeof(call)&&"function"!=typeof call?function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}function selection_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function selection_defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function selection_createClass(Constructor,protoProps,staticProps){return protoProps&&selection_defineProperties(Constructor.prototype,protoProps),staticProps&&selection_defineProperties(Constructor,staticProps),Constructor}function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=selection_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e2){throw _e2},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e3){didErr=!0,err=_e3},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function selection_slicedToArray(arr,i){return function selection_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function selection_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||selection_unsupportedIterableToArray(arr,i)||function selection_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function selection_unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return selection_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?selection_arrayLikeToArray(o,minLen):void 0}}function selection_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var selection_useSelectionModifiers=function useSelectionModifiers(disableSelection,setSelection){var deps=[disableSelection,setSelection];return{selectFiles:Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(fileIds){var reset=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];disableSelection||setSelection((function(selection){var _step,newSelection=reset?{}:Object.assign({},selection),_iterator=_createForOfIteratorHelper(fileIds);try{for(_iterator.s();!(_step=_iterator.n()).done;){newSelection[_step.value]=!0}}catch(err){_iterator.e(err)}finally{_iterator.f()}return newSelection}))}),deps),toggleSelection:Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(fileId){var exclusive=arguments.length>1&&void 0!==arguments[1]&&arguments[1];disableSelection||setSelection((function(selection){var newSelection=exclusive?{}:Object.assign({},selection);return!0===selection[fileId]?delete newSelection[fileId]:newSelection[fileId]=!0,newSelection}))}),deps),clearSelection:Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(){disableSelection||setSelection({})}),deps)}},selection_SelectionHelper=function(){function SelectionHelper(){selection_classCallCheck(this,SelectionHelper)}return selection_createClass(SelectionHelper,null,[{key:"getSelectedFiles",value:function getSelectedFiles(files,selection){for(var selectedFiles=files.filter((function(file){return FileHelper.isSelectable(file)&&!0===selection[file.id]})),_len=arguments.length,filters=new Array(_len>2?_len-2:0),_key=2;_key<_len;_key++)filters[_key-2]=arguments[_key];return filters.reduce((function(prevFiles,filter){return prevFiles.filter(filter)}),selectedFiles)}},{key:"getSelectionSize",value:function getSelectionSize(files,selection){for(var _len2=arguments.length,filters=new Array(_len2>2?_len2-2:0),_key2=2;_key2<_len2;_key2++)filters[_key2-2]=arguments[_key2];return SelectionHelper.getSelectedFiles.apply(SelectionHelper,[files,selection].concat(filters)).length}},{key:"isSelected",value:function isSelected(selection,file){return FileHelper.isSelectable(file)&&!0===selection[file.id]}}]),SelectionHelper}(),SelectionUtil=function(){function SelectionUtil(){var files=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],selection=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};selection_classCallCheck(this,SelectionUtil),this.files=void 0,this.selection=void 0,this.protectedUpdate(files,selection)}return selection_createClass(SelectionUtil,[{key:"protectedUpdate",value:function protectedUpdate(files,selection){this.files=files,this.selection=selection}},{key:"getSelection",value:function getSelection(){return this.selection}},{key:"getSelectedFiles",value:function getSelectedFiles(){for(var _len3=arguments.length,filters=new Array(_len3),_key3=0;_key3<_len3;_key3++)filters[_key3]=arguments[_key3];return selection_SelectionHelper.getSelectedFiles.apply(selection_SelectionHelper,[this.files,this.selection].concat(filters))}},{key:"getSelectionSize",value:function getSelectionSize(){for(var _len4=arguments.length,filters=new Array(_len4),_key4=0;_key4<_len4;_key4++)filters[_key4]=arguments[_key4];return selection_SelectionHelper.getSelectionSize.apply(selection_SelectionHelper,[this.files,this.selection].concat(filters))}},{key:"isSelected",value:function isSelected(file){return selection_SelectionHelper.isSelected(this.selection,file)}}]),SelectionUtil}(),UpdateableSelectionUtil=function(_SelectionUtil){!function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(UpdateableSelectionUtil,_SelectionUtil);var _super=_createSuper(UpdateableSelectionUtil);function UpdateableSelectionUtil(){return selection_classCallCheck(this,UpdateableSelectionUtil),_super.apply(this,arguments)}return selection_createClass(UpdateableSelectionUtil,[{key:"update",value:function update(){this.protectedUpdate.apply(this,arguments)}}]),UpdateableSelectionUtil}(SelectionUtil),ChonkyInstanceIdContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext("no-instance-id"),ChonkyFilesContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext([]),ChonkyFolderChainContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(null),ChonkySelectionContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext({}),ChonkySelectionSizeContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(0),ChonkySelectionUtilContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(new SelectionUtil),ChonkyFileActionsContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext([]),ChonkyDispatchFileActionContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(NOOP_FUNCTION),ChonkyDispatchSpecialActionContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(NOOP_FUNCTION),ChonkySearchBarEnabledContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(!1),ChonkySetSearchBarEnabledContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(NOOP_FUNCTION),ChonkySearchBarVisibleContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(!1),ChonkySetSearchBarVisibleContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(NOOP_FUNCTION),ChonkySearchFilterContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(""),ChonkySetSearchFilterContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(NOOP_FUNCTION),ChonkyThumbnailGeneratorContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(null),ChonkyDoubleClickDelayContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(300),ChonkyFileEntrySizeContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(DefaultEntrySize),ChonkyDisableSelectionContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(!1),ChonkyEnableDragAndDropContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(!1),bluebird=__webpack_require__(153),bluebird_default=__webpack_require__.n(bluebird);function file_actions_createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=function file_actions_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return file_actions_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return file_actions_arrayLikeToArray(o,minLen)}(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function file_actions_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var ChonkyActions={MoveFilesTo:{id:"move_files_to"},DuplicateFilesTo:{id:"duplicate_files_to"},OpenParentFolder:{id:"open_parent_folder",requiresParentFolder:!0,fileFilter:function fileFilter(file){return FileHelper.isOpenable(file)},hotkeys:["backspace"],toolbarButton:{name:"Go up a directory",tooltip:"Go up a directory",icon:ChonkyIconName.openParentFolder,iconOnly:!0}},OpenFiles:{id:"open_files",requiresSelection:!0,fileFilter:FileHelper.isOpenable,toolbarButton:{name:"Open selection",group:"Actions",dropdown:!0,icon:ChonkyIconName.openFiles}},ToggleSearch:{id:"toggle_search",hotkeys:["ctrl+f"],toolbarButton:{name:"Search",icon:ChonkyIconName.search,iconOnly:!0},specialActionToDispatch:SpecialAction.ToggleSearchBar},CopyFiles:{id:"copy_files",requiresSelection:!0},CreateFolder:{id:"create_folder",toolbarButton:{name:"Create folder",tooltip:"Create a folder",icon:ChonkyIconName.folderCreate}},UploadFiles:{id:"upload_files",toolbarButton:{name:"Upload files",tooltip:"Upload files",icon:ChonkyIconName.upload}},DownloadFiles:{id:"download_files",requiresSelection:!0,toolbarButton:{name:"Download files",group:"Actions",tooltip:"Download files",dropdown:!0,icon:ChonkyIconName.download}}},DefaultActions=[ChonkyActions.MoveFilesTo,ChonkyActions.DuplicateFilesTo,ChonkyActions.OpenParentFolder,ChonkyActions.OpenFiles,ChonkyActions.ToggleSearch];function hooks_helpers_slicedToArray(arr,i){return function hooks_helpers_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function hooks_helpers_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function hooks_helpers_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return hooks_helpers_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return hooks_helpers_arrayLikeToArray(o,minLen)}(arr,i)||function hooks_helpers_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function hooks_helpers_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var UNINITIALIZED_SENTINEL={},hooks_helpers_useClickListener=function useClickListener(params){var triggerComponentRef=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useRef)(),clickListener=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){!triggerComponentRef.current||triggerComponentRef.current.contains(event.target)?params.onInsideClick&&params.onInsideClick(event):params.onOutsideClick&&params.onOutsideClick(event),params.onClick&&params.onClick(event)}),[params.onClick,params.onInsideClick,params.onOutsideClick,triggerComponentRef]);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){return document.addEventListener("mousedown",clickListener,!1),function(){document.removeEventListener("mousedown",clickListener,!1)}}),[clickListener]),triggerComponentRef},FuzzySearch=__webpack_require__(359);function search_slicedToArray(arr,i){return function search_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function search_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function search_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return search_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return search_arrayLikeToArray(o,minLen)}(arr,i)||function search_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function search_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var search_useSearchState=function useSearchState(){var _useState2=search_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(!1),2),searchBarEnabled=_useState2[0],setSearchBarEnabled=_useState2[1],_useState4=search_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(!1),2),searchBarVisible=_useState4[0],setSearchBarVisible=_useState4[1],_useState6=search_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(""),2);return{searchBarEnabled:searchBarEnabled,setSearchBarEnabled:setSearchBarEnabled,searchBarVisible:searchBarVisible,setSearchBarVisible:setSearchBarVisible,searchFilter:_useState6[0],setSearchFilter:_useState6[1]}},search_useSearchContexts=function useSearchContexts(searchState){return[{context:ChonkySearchBarEnabledContext,value:searchState.searchBarEnabled},{context:ChonkySetSearchBarEnabledContext,value:searchState.setSearchBarEnabled},{context:ChonkySearchBarVisibleContext,value:searchState.searchBarVisible},{context:ChonkySetSearchBarVisibleContext,value:searchState.setSearchBarVisible},{context:ChonkySearchFilterContext,value:searchState.searchFilter},{context:ChonkySetSearchFilterContext,value:searchState.setSearchFilter}]};function special_actions_defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var special_actions_useSpecialFileActionHandlerMap=function useSpecialFileActionHandlerMap(selectionUtil,selectFiles,toggleSelection,clearSelection,dispatchFileAction){var specialActionHandlerMapDeps=[selectFiles,toggleSelection,clearSelection,dispatchFileAction];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var _ref;return special_actions_defineProperty(_ref={},SpecialAction.MouseClickFile,(function(data){"double"===data.clickType&&FileHelper.isOpenable(data.file)?dispatchFileAction({actionId:ChonkyActions.OpenFiles.id,target:data.file,files:[data.file]}):FileHelper.isSelectable(data.file)?toggleSelection(data.file.id,!data.ctrlKey):data.ctrlKey||clearSelection()})),special_actions_defineProperty(_ref,SpecialAction.KeyboardClickFile,(function(data){data.enterKey&&FileHelper.isOpenable(data.file)?dispatchFileAction({actionId:ChonkyActions.OpenFiles.id,target:data.file,files:selectionUtil.getSelectedFiles(FileHelper.isOpenable)}):data.spaceKey&&FileHelper.isSelectable(data.file)&&toggleSelection(data.file.id,data.ctrlKey)})),special_actions_defineProperty(_ref,SpecialAction.DragNDropStart,(function(data){var file=data.dragSource;selectionUtil.isSelected(file)||(clearSelection(),FileHelper.isSelectable(file)&&selectFiles([file.id]))})),special_actions_defineProperty(_ref,SpecialAction.DragNDropEnd,(function(data){if(!selectionUtil.isSelected(data.dropTarget)){var selectedFiles=selectionUtil.getSelectedFiles(FileHelper.isDraggable),droppedFiles=selectedFiles.length>0?selectedFiles:[data.dragSource];dispatchFileAction({actionId:"copy"===data.dropEffect?ChonkyActions.DuplicateFilesTo.id:ChonkyActions.MoveFilesTo.id,target:data.dropTarget,files:droppedFiles})}})),_ref}),specialActionHandlerMapDeps)},ContextComposer_ContextComposer=(__webpack_require__(760),function ContextComposer(props){var providers=props.providers,children=props.children;return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.Fragment,null,providers.reduceRight((function(acc,data){var Provider=data.provider;return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(Provider,{value:data.value},acc)}),children))});ContextComposer_ContextComposer.displayName="ContextComposer";try{ContextComposer_ContextComposer.displayName="ContextComposer",ContextComposer_ContextComposer.__docgenInfo={description:"Takes an array of context providers and composes them into a\nhierarchy:\n\n<Comp1 {...props}>\n     <Comp2 {...props}>\n         <Comp3 {...props}>\n             {children}\n         </Comp3>\n     </Comp2>\n</Comp1>",displayName:"ContextComposer",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/ContextComposer.tsx#ContextComposer"]={docgenInfo:ContextComposer_ContextComposer.__docgenInfo,name:"ContextComposer",path:"src/components/internal/ContextComposer.tsx#ContextComposer"})}catch(__react_docgen_typescript_loader_error){}var useDragLayer=__webpack_require__(782),layerStyles={position:"fixed",pointerEvents:"none",zIndex:100,left:0,top:0,width:"100%",height:"100%"},getItemStyles=function getItemStyles(initialCursorOffset,initialFileOffset,currentFileOffset){if(!initialCursorOffset||!initialFileOffset||!currentFileOffset)return{display:"none"};var x=initialCursorOffset.x+(currentFileOffset.x-initialFileOffset.x),y=initialCursorOffset.y+(currentFileOffset.y-initialFileOffset.y),transform="translate(".concat(x,"px, ").concat(y,"px)");return{transform:transform,WebkitTransform:transform}},DnDFileListDragLayer_DnDFileListDragLayer=function DnDFileListDragLayer(){var selectionSize=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkySelectionSizeContext),_useDragLayer=Object(useDragLayer.a)((function(monitor){return{item:monitor.getItem(),itemType:monitor.getItemType(),initialCursorOffset:monitor.getInitialClientOffset(),initialFileOffset:monitor.getInitialSourceClientOffset(),currentFileOffset:monitor.getSourceClientOffset(),isDragging:monitor.isDragging()}})),itemType=_useDragLayer.itemType,item=_useDragLayer.item,initialCursorOffset=_useDragLayer.initialCursorOffset,initialFileOffset=_useDragLayer.initialFileOffset,currentFileOffset=_useDragLayer.currentFileOffset;return _useDragLayer.isDragging?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:layerStyles},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:getItemStyles(initialCursorOffset,initialFileOffset,currentFileOffset)},function renderItem(){if(item.file&&"chonky-file-entry"===itemType)return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-drag-preview"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("b",null,item.file.name),selectionSize>1&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.Fragment,null," and ",delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("strong",null,selectionSize-1," other file",selectionSize-1!=1?"s":"")))}())):null};DnDFileListDragLayer_DnDFileListDragLayer.displayName="DnDFileListDragLayer";var ErrorMessage=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var message=props.message,bullets=props.bullets,bulletList=null;if(bullets&&bullets.length>0){for(var items=[],i=0;i<bullets.length;++i)items.push(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("li",{key:"error-bullet-".concat(i)},bullets[i]));bulletList=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("ul",null,items)}return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-error"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-error-name"},"Chonky runtime error:")," ",message,bulletList)}));function FileBrowser_toConsumableArray(arr){return function FileBrowser_arrayWithoutHoles(arr){if(Array.isArray(arr))return FileBrowser_arrayLikeToArray(arr)}(arr)||function FileBrowser_iterableToArray(iter){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(iter))return Array.from(iter)}(arr)||function FileBrowser_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return FileBrowser_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return FileBrowser_arrayLikeToArray(o,minLen)}(arr)||function FileBrowser_nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function FileBrowser_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var FileBrowser_FileBrowser=function FileBrowser(props){var files=props.files,children=props.children,chonkyInstanceId=function useStaticValue(factory){var valueRef=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useRef)(UNINITIALIZED_SENTINEL);return valueRef.current===UNINITIALIZED_SENTINEL&&(valueRef.current=factory()),valueRef.current}(shortid_default.a.generate),folderChain=props.folderChain?props.folderChain:null,fileActions=props.fileActions?props.fileActions:[],onFileAction=props.onFileAction?props.onFileAction:null,thumbnailGenerator=props.thumbnailGenerator?props.thumbnailGenerator:null,doubleClickDelay="number"==typeof props.doubleClickDelay?props.doubleClickDelay:300,disableSelection=!!props.disableSelection,enableDragAndDrop=!!props.enableDragAndDrop,validationResult=function useFileBrowserValidation(files,folderChain){var filesDeps=[files],_useMemo=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var errorMessages=[],cleanFilesResult=useCleanFileArray(files,!1);if(cleanFilesResult.warningMessage){var errorMessage='The "files" prop passed to '.concat(FileBrowser_FileBrowser.name," did not pass validation. ")+"".concat(cleanFilesResult.warningMessage," ")+"The following errors were encountered:";Logger.error(errorMessage,Logger.formatBullets(cleanFilesResult.warningBullets)),errorMessages.push({message:errorMessage,bullets:cleanFilesResult.warningBullets})}return{cleanFiles:cleanFilesResult.cleanFileArray,errorMessages:errorMessages}}),filesDeps),cleanFiles=_useMemo.cleanFiles,filesErrorMessages=_useMemo.errorMessages,folderChainDeps=[folderChain],_useMemo2=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var errorMessages=[],cleanFolderChainResult=useCleanFileArray(folderChain,!0);if(cleanFolderChainResult.warningMessage){var errorMessage='The "folderChain" prop passed to '.concat(FileBrowser_FileBrowser.name," did not pass validation. ")+"".concat(cleanFolderChainResult.warningMessage," ")+"The following errors were encountered:";Logger.error(errorMessage,Logger.formatBullets(cleanFolderChainResult.warningBullets)),errorMessages.push({message:errorMessage,bullets:cleanFolderChainResult.warningBullets})}return{cleanFolderChain:cleanFolderChainResult.cleanFileArray,errorMessages:errorMessages}}),folderChainDeps),cleanFolderChain=_useMemo2.cleanFolderChain,folderChainErrorMessages=_useMemo2.errorMessages;return{cleanFiles:cleanFiles,cleanFolderChain:cleanFolderChain,errorMessages:[].concat(_toConsumableArray(filesErrorMessages),_toConsumableArray(folderChainErrorMessages))}}(files,folderChain),sortedFiles=validationResult.cleanFiles,cleanFolderChain=validationResult.cleanFolderChain,_useSelection=function useSelection(files,disableSelection){var _useState2=selection_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)({}),2),selection=_useState2[0],setSelection=_useState2[1],selectionSize=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return selection_SelectionHelper.getSelectionSize(files,selection)}),[files,selection]),_useSelectionModifier=selection_useSelectionModifiers(disableSelection,setSelection),selectFiles=_useSelectionModifier.selectFiles,toggleSelection=_useSelectionModifier.toggleSelection,clearSelection=_useSelectionModifier.clearSelection,selectionUtilRef=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useRef)(new UpdateableSelectionUtil(files,selection));return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){selectionUtilRef.current.update(files,selection)}),[files,selection]),{selection:selection,selectionSize:selectionSize,selectionUtilRef:selectionUtilRef,selectFiles:selectFiles,toggleSelection:toggleSelection,clearSelection:clearSelection}}(sortedFiles,disableSelection),selection=_useSelection.selection,selectionSize=_useSelection.selectionSize,selectionUtilRef=_useSelection.selectionUtilRef,selectFiles=_useSelection.selectFiles,toggleSelection=_useSelection.toggleSelection,clearSelection=_useSelection.clearSelection,extendedFileActions=[].concat(FileBrowser_toConsumableArray(fileActions),FileBrowser_toConsumableArray(DefaultActions)),dispatchFileAction=function useFileActionDispatcher(fileActions,onFileAction){var actionMapDeps=[fileActions],actionMap=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var actionMap={};if(Array.isArray(fileActions)){var _step,_iterator=file_actions_createForOfIteratorHelper(fileActions);try{for(_iterator.s();!(_step=_iterator.n()).done;){var fileAction=_step.value;actionMap[fileAction.id]=fileAction}}catch(err){_iterator.e(err)}finally{_iterator.f()}}return actionMap}),actionMapDeps),dispatchFileActionDeps=[actionMap,onFileAction];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(actionData){var actionId=actionData.actionId,action=actionMap[actionId];action?function isFunction(value){return!!(value&&value.constructor&&value.call&&value.apply)}(onFileAction)&&bluebird_default.a.resolve().then((function(){return onFileAction(action,actionData)})).catch((function(error){return Logger.error('User-defined "onAction" handler threw an error: '.concat(error.message))})):Logger.error('Internal components dispatched a "'.concat(actionId,'" file action, ')+"but such action was not registered.")}),dispatchFileActionDeps)}(extendedFileActions,onFileAction),dispatchSpecialAction=function useSpecialActionDispatcher(files,selection,selectionUtil,selectFiles,toggleSelection,clearSelection,dispatchFileAction){var specialStateDeps=[files,selection],specialState=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return{files:files,selection:selection}}),INTENTIONAL_EMPTY_DEPS);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){specialState.files=files,specialState.selection=selection}),specialStateDeps);var specialActionHandlerMap=special_actions_useSpecialFileActionHandlerMap(selectionUtil,selectFiles,toggleSelection,clearSelection,dispatchFileAction),dispatchSpecialActionDeps=[specialActionHandlerMap];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(actionData){var actionName=actionData.actionName,handler=specialActionHandlerMap[actionName];if(handler)try{handler(actionData)}catch(error){Logger.error('Handler for special action "'.concat(actionName,'" threw an error.'),error)}else Logger.error('Internal components dispatched a "'.concat(actionName,'" special action, ')+"but no internal handler is available to process it.")}),dispatchSpecialActionDeps)}(sortedFiles,selection,selectionUtilRef.current,selectFiles,toggleSelection,clearSelection,dispatchFileAction),_useSearch=function useSearch(){var searchState=search_useSearchState();return{searchState:searchState,searchContexts:search_useSearchContexts(searchState)}}(),searchState=_useSearch.searchState,searchContexts=_useSearch.searchContexts,filteredFiles=function useFilteredFiles(files,searchFilter){var deps=[files,searchFilter];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return searchFilter?new FuzzySearch.a(files.filter((function(f){return!!f})),["name"],{caseSensitive:!1,sort:!0}).search(searchFilter):files}),deps)}(sortedFiles,searchState.searchFilter),chonkyRootRef=hooks_helpers_useClickListener({onOutsideClick:clearSelection}),contexts=[].concat(FileBrowser_toConsumableArray(searchContexts),[{context:ChonkyInstanceIdContext,value:chonkyInstanceId},{context:ChonkyFilesContext,value:filteredFiles},{context:ChonkyFolderChainContext,value:cleanFolderChain},{context:ChonkySelectionContext,value:selection},{context:ChonkySelectionSizeContext,value:selectionSize},{context:ChonkySelectionUtilContext,value:selectionUtilRef.current},{context:ChonkyFileActionsContext,value:extendedFileActions},{context:ChonkyDispatchFileActionContext,value:dispatchFileAction},{context:ChonkyDispatchSpecialActionContext,value:dispatchSpecialAction},{context:ChonkyThumbnailGeneratorContext,value:thumbnailGenerator},{context:ChonkyDoubleClickDelayContext,value:doubleClickDelay},{context:ChonkyFileEntrySizeContext,value:DefaultEntrySize},{context:ChonkyDisableSelectionContext,value:disableSelection},{context:ChonkyEnableDragAndDropContext,value:enableDragAndDrop}]),contextProviders=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return contexts.map((function(data){return{provider:data.context.Provider,value:data.value}}))}),contexts.map((function(data){return data.value})));return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ContextComposer_ContextComposer,{providers:contextProviders},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{ref:chonkyRootRef,className:"chonky-root chonky-no-select"},enableDragAndDrop&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(DnDFileListDragLayer_DnDFileListDragLayer,null),validationResult.errorMessages.map((function(data,index){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ErrorMessage,{key:"error-message-".concat(index),message:data.message,bullets:data.bullets})})),children||null))};FileBrowser_FileBrowser.displayName="FileBrowser";var delegated_prop_typesfrom_dll_reference_storybook_docs_dll=__webpack_require__(6),delegated_prop_typesfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_prop_typesfrom_dll_reference_storybook_docs_dll);function FileToolbar_hooks_createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=function FileToolbar_hooks_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return FileToolbar_hooks_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return FileToolbar_hooks_arrayLikeToArray(o,minLen)}(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function FileToolbar_hooks_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var FileToolbar_hooks_useFolderChainComponent=function useFolderChainComponent(){var folderChain=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyFolderChainContext),dispatchChonkyAction=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyDispatchFileActionContext),deps=[folderChain,dispatchChonkyAction];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){if(!folderChain)return folderChain;for(var comps=new Array(Math.max(0,2*folderChain.length-1)),_loop=function _loop(i){var file=folderChain[i],isLast=i===folderChain.length-1,j=2*i,compProps={key:"folder-chain-entry-".concat(j),className:classnames_default()({"chonky-folder-chain-entry":!0,"chonky-loading":!file})};FileHelper.isOpenable(file)&&!isLast&&(compProps.onClick=function(){dispatchChonkyAction({actionId:ChonkyActions.OpenFiles.id,target:file,files:[file]})});var TagToUse=compProps.onClick?"button":"div";comps[j]=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(TagToUse,compProps,0===j&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-text-subtle-dark"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:ChonkyIconName.folder}),"  "),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-folder-chain-entry-name"},file?file.name:"Loading...")),isLast||(comps[j+1]=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{key:"folder-chain-separator-".concat(j),className:"chonky-folder-chain-separator"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:ChonkyIconName.folderChainSeparator,size:"xs"})))},i=0;i<folderChain.length;++i)_loop(i);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-folder-chain"},comps)}),deps)};try{FileToolbar_hooks_useFolderChainComponent.displayName="useFolderChainComponent",FileToolbar_hooks_useFolderChainComponent.__docgenInfo={description:"Generates folder chain HTML components for the `FileToolbar` component.",displayName:"useFolderChainComponent",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileToolbar-hooks.tsx#useFolderChainComponent"]={docgenInfo:FileToolbar_hooks_useFolderChainComponent.__docgenInfo,name:"useFolderChainComponent",path:"src/components/external/FileToolbar-hooks.tsx#useFolderChainComponent"})}catch(__react_docgen_typescript_loader_error){}var ToolbarButton_hooks_useSmartToolbarButtonProps=function useSmartToolbarButtonProps(action){var files=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyFilesContext),folderChain=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyFolderChainContext),selection=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkySelectionContext),selectionSize=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkySelectionSizeContext),searchBarVisible=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkySearchBarVisibleContext),dispatchChonkyAction=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyDispatchFileActionContext),parentFolder=folderChain&&folderChain.length>1?folderChain[(null==folderChain?void 0:folderChain.length)-2]:null,deps=[action,files,selection,selectionSize,dispatchChonkyAction,parentFolder];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var actionSelectionSize=void 0,actionFiles=void 0;action.requiresSelection&&(action.fileFilter?(actionSelectionSize=selection_SelectionHelper.getSelectionSize(files,selection,action.fileFilter),actionFiles=selection_SelectionHelper.getSelectedFiles(files,selection,action.fileFilter)):(actionSelectionSize=selectionSize,actionFiles=selection_SelectionHelper.getSelectedFiles(files,selection)));var active=action.id===ChonkyActions.ToggleSearch.id&&searchBarVisible,actionTarget=void 0;action.requiresParentFolder&&parentFolder&&(action.fileFilter?action.fileFilter(parentFolder)&&(actionTarget=parentFolder):actionTarget=parentFolder);return{active:active,onClick:function onClick(){return dispatchChonkyAction({actionId:action.id,target:actionTarget,files:actionFiles})},disabled:action.requiresSelection&&0===actionSelectionSize||action.requiresParentFolder&&!actionTarget}}),deps)};try{ToolbarButton_hooks_useSmartToolbarButtonProps.displayName="useSmartToolbarButtonProps",ToolbarButton_hooks_useSmartToolbarButtonProps.__docgenInfo={description:"",displayName:"useSmartToolbarButtonProps",props:{id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},metadata:{defaultValue:null,description:"",name:"metadata",required:!1,type:{name:"any"}},requiresParentFolder:{defaultValue:null,description:"",name:"requiresParentFolder",required:!1,type:{name:"boolean"}},requiresSelection:{defaultValue:null,description:"",name:"requiresSelection",required:!1,type:{name:"boolean"}},fileFilter:{defaultValue:null,description:"",name:"fileFilter",required:!1,type:{name:"FileFilter"}},hotkeys:{defaultValue:null,description:"",name:"hotkeys",required:!1,type:{name:"readonly string[]"}},toolbarButton:{defaultValue:null,description:"",name:"toolbarButton",required:!1,type:{name:"ToolbarButtonData"}},specialActionToDispatch:{defaultValue:null,description:"",name:"specialActionToDispatch",required:!1,type:{name:"enum",value:[{value:'"mouse_click_file"'},{value:'"keyboard_click_file"'},{value:'"toggle_search_bar"'},{value:'"drag_n_drop_start"'},{value:'"drag_n_drop_end"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/ToolbarButton-hooks.tsx#useSmartToolbarButtonProps"]={docgenInfo:ToolbarButton_hooks_useSmartToolbarButtonProps.__docgenInfo,name:"useSmartToolbarButtonProps",path:"src/components/external/ToolbarButton-hooks.tsx#useSmartToolbarButtonProps"})}catch(__react_docgen_typescript_loader_error){}var DropdownButton=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var text=props.text,tooltip=props.tooltip,icon=props.icon,onClick=props.onClick,disabled=props.disabled;return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("button",{className:"chonky-toolbar-dropdown-button",onClick:onClick,title:tooltip||text,disabled:!onClick||disabled},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-dropdown-button-icon"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:icon||ChonkyIconName.fallbackIcon,fixedWidth:!0})),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-dropdown-button-text"},text))})),DropdownButton_SmartDropdownButton=function SmartDropdownButton(props){var action=props.fileAction,button=action.toolbarButton;if(!button)return null;var _useSmartToolbarButto=ToolbarButton_hooks_useSmartToolbarButtonProps(action),onClick=_useSmartToolbarButto.onClick,disabled=_useSmartToolbarButto.disabled;return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(DropdownButton,{text:button.name,tooltip:button.tooltip,icon:button.icon,onClick:onClick,disabled:disabled})};DropdownButton_SmartDropdownButton.displayName="SmartDropdownButton";var ToolbarButton=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var text=props.text,tooltip=props.tooltip,active=props.active,icon=props.icon,iconOnly=props.iconOnly,iconOnRight=props.iconOnRight,onClick=props.onClick,disabled=props.disabled,iconComponent=icon||iconOnly?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-button-icon"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:icon||ChonkyIconName.fallbackIcon,fixedWidth:!0})):null,className=classnames_default()({"chonky-toolbar-button":!0,"chonky-active":!!active});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("button",{className:className,onClick:onClick,title:tooltip||text,disabled:!onClick||disabled},!iconOnRight&&iconComponent,text&&!iconOnly&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-button-text"},text),iconOnRight&&iconComponent)})),SmartToolbarButton=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var action=props.fileAction,button=action.toolbarButton;if(!button)return null;var _useSmartToolbarButto=ToolbarButton_hooks_useSmartToolbarButtonProps(action),active=_useSmartToolbarButto.active,onClick=_useSmartToolbarButto.onClick,disabled=_useSmartToolbarButto.disabled;return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ToolbarButton,{text:button.name,tooltip:button.tooltip,icon:button.icon,iconOnly:button.iconOnly,active:active,onClick:onClick,disabled:disabled})}));function Dropdown_slicedToArray(arr,i){return function Dropdown_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function Dropdown_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function Dropdown_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return Dropdown_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Dropdown_arrayLikeToArray(o,minLen)}(arr,i)||function Dropdown_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Dropdown_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var Dropdown=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var group=props.group,_useState2=Dropdown_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(!1),2),showDropdown=_useState2[0],setShowDropdown=_useState2[1],hideDropdown=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(){return setShowDropdown(!1)}),[setShowDropdown]),dropdownRef=hooks_helpers_useClickListener({onOutsideClick:hideDropdown}),triggerClick=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(){setShowDropdown(!0)}),[setShowDropdown]);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{ref:dropdownRef,className:"chonky-toolbar-dropdown"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ToolbarButton,{text:group.name,active:showDropdown,icon:ChonkyIconName.dropdown,iconOnRight:!0,onClick:triggerClick}),showDropdown&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-dropdown-content"},group.fileActions.map((function(action){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(DropdownButton_SmartDropdownButton,{key:"action-button-".concat(action.id),fileAction:action})}))))})),ToolbarButtonGroup=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var groupContents,group=props.group;return groupContents=group.dropdown?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(Dropdown,{group:group}):group.fileActions.map((function(action){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(SmartToolbarButton,{key:"action-button-".concat(action.id),fileAction:action})})),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-button-group"},groupContents)})),FileToolbar=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(){var searchBarEnabled=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkySearchBarEnabledContext),folderChainComp=FileToolbar_hooks_useFolderChainComponent(),_useToolbarButtonGrou=function useToolbarButtonGroups(){var fileActions=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyFileActionsContext),deps=[fileActions];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var _step,buttonGroups=[],buttonGroupMap={},openParentFolderButtonGroup=null,searchButtonGroup=null,_iterator=FileToolbar_hooks_createForOfIteratorHelper(fileActions);try{for(_iterator.s();!(_step=_iterator.n()).done;){var action=_step.value;if(action.toolbarButton){var button=action.toolbarButton,group=void 0;button.group?buttonGroupMap[button.group]?((group=buttonGroupMap[button.group]).dropdown=group.dropdown||button.dropdown,group.fileActions.push(action)):(group={name:button.group,dropdown:button.dropdown,fileActions:[action]},buttonGroups.push(group),buttonGroupMap[group.name]=group):(group={name:button.group,dropdown:button.dropdown,fileActions:[action]},action.id===ChonkyActions.OpenParentFolder.id?openParentFolderButtonGroup=group:action.id===ChonkyActions.ToggleSearch.id?searchButtonGroup=group:buttonGroups.push(group))}}}catch(err){_iterator.e(err)}finally{_iterator.f()}return{buttonGroups:buttonGroups,openParentFolderButtonGroup:openParentFolderButtonGroup,searchButtonGroup:searchButtonGroup}}),deps)}(),buttonGroups=_useToolbarButtonGrou.buttonGroups,openParentFolderButtonGroup=_useToolbarButtonGrou.openParentFolderButtonGroup,searchButtonGroup=_useToolbarButtonGrou.searchButtonGroup;return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-side chonky-toolbar-side-left"},openParentFolderButtonGroup&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ToolbarButtonGroup,{group:openParentFolderButtonGroup}),folderChainComp),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-side chonky-toolbar-side-right"},buttonGroups.map((function(group,index){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ToolbarButtonGroup,{key:"button-group-".concat(group.name?group.name:index),group:group})})),searchBarEnabled&&searchButtonGroup&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ToolbarButtonGroup,{group:searchButtonGroup})))}));FileToolbar.propTypes={folderChain:delegated_prop_typesfrom_dll_reference_storybook_docs_dll_default.a.arrayOf(delegated_prop_typesfrom_dll_reference_storybook_docs_dll_default.a.oneOfType([delegated_prop_typesfrom_dll_reference_storybook_docs_dll_default.a.string.isRequired,delegated_prop_typesfrom_dll_reference_storybook_docs_dll_default.a.oneOf([null]).isRequired]))};__webpack_require__(97);function FileSearch_slicedToArray(arr,i){return function FileSearch_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function FileSearch_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function FileSearch_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return FileSearch_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return FileSearch_arrayLikeToArray(o,minLen)}(arr,i)||function FileSearch_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function FileSearch_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var FileSearch_FileSearch=function FileSearch(){var setSearchBarEnabled=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkySetSearchBarEnabledContext),globalSearchFilter=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkySearchFilterContext),setGlobalSearchFilter=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkySetSearchFilterContext);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){return setSearchBarEnabled(!0),function(){return setSearchBarEnabled(!1)}}),INTENTIONAL_EMPTY_DEPS);var _useState2=FileSearch_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(globalSearchFilter),2),localSearchFilter=_useState2[0],setLocalSearchFilter=_useState2[1];Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){globalSearchFilter!==localSearchFilter&&setLocalSearchFilter(globalSearchFilter)}),[globalSearchFilter,setLocalSearchFilter]);var debouncedLocalSearchFilter=function useDebounce(value,delay){var _useState2=hooks_helpers_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(value),2),debouncedValue=_useState2[0],setDebouncedValue=_useState2[1];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){var handler=setTimeout((function(){setDebouncedValue(value)}),delay);return function(){clearTimeout(handler)}}),[value,delay]),debouncedValue}(localSearchFilter,500);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){var trimmedFilter=debouncedLocalSearchFilter.trim();trimmedFilter!==globalSearchFilter&&setGlobalSearchFilter(trimmedFilter)}),[globalSearchFilter,debouncedLocalSearchFilter]);var handleInputChange=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){setLocalSearchFilter(event.target.value)}),[setLocalSearchFilter]);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-search"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-search-input-group"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("label",{htmlFor:"chonky-file-search"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:ChonkyIconName.search,fixedWidth:!0})),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("input",{type:"text",id:"chonky-file-search",value:localSearchFilter,placeholder:"Type to search...",onChange:handleInputChange})))};FileSearch_FileSearch.displayName="FileSearch";var FileList=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(){var files=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyFilesContext),entrySize=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyFileEntrySizeContext),entryRenderer=FileList_virtualization_useEntryRenderer(files),thumbsGridRef=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useRef)(),gridRenderer=FileList_virtualization_useGridRenderer(files,entrySize,entryRenderer,thumbsGridRef,!0);if(!files){var errorMessage="".concat(FileList.name,' cannot find the "files" array via React context. This ')+"happens when ".concat(FileList.name,' is placed outside of "FileBrowser"')+"component.";return Logger.error(errorMessage),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ErrorMessage,{message:errorMessage})}return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-list",style:{minHeight:entrySize.height}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(es.a,{disableHeight:!1},gridRenderer))}));__webpack_require__(107),__webpack_require__(108),__webpack_require__(297)},233:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("CUMQ")},249:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("3voH")},25:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("z84I")},257:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("cww3")},26:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("2G9S")},266:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("N4z3")},267:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("1Mu/")},27:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("hCOa")},28:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("KqXw")},297:function(module,exports){},3:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("1t7P")},30:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("UvmB")},33:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return story_helpers_createDocsObject})),__webpack_require__.d(__webpack_exports__,"b",(function(){return story_helpers_showActionNotification}));__webpack_require__(3),__webpack_require__(10),__webpack_require__(20),__webpack_require__(26),__webpack_require__(71),__webpack_require__(27),__webpack_require__(16),__webpack_require__(12),__webpack_require__(17),__webpack_require__(40),__webpack_require__(25),__webpack_require__(14),__webpack_require__(21),__webpack_require__(4),__webpack_require__(5),__webpack_require__(9),__webpack_require__(28),__webpack_require__(19),__webpack_require__(15),__webpack_require__(97),__webpack_require__(18),__webpack_require__(764),__webpack_require__(766),__webpack_require__(768);var blocks=__webpack_require__(39),utils=__webpack_require__(93),dist=__webpack_require__(53),lib_noty=__webpack_require__(358),lib_noty_default=__webpack_require__.n(lib_noty),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),DndProvider=__webpack_require__(783),esm=__webpack_require__(205);function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}var story_helpers_createDocsObject=function createDocsObject(params){var markdown=params.markdown;return{page:function page(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.Fragment,null,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(DndProvider.a,{backend:esm.a},story_helpers_parseMarkdown('<div class="unstable-warning">\n\n> **Stop right there!**\n>\n> You are reading the documentation for an **unreleased** 1.x\n> version of Chonky. The API described here can change - it will not be\n> frozen until the official 1.x release.\n>\n> If you need to use Chonky right now, use the 0.x version from the\n> [Documentation Index](https://timbokz.github.io/Chonky/).\n>\n> **Want to request a feature for 1.x or report a 1.x issue?** Post it in\n> [Chonky GitHub issues](https://github.com/TimboKZ/Chonky/issues).\n\n</div>\n'),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(blocks.Title,null),story_helpers_parseMarkdown(markdown),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(story_helpers_CustomPrimary,null),story_helpers_parseMarkdown("### A note about live examples...\n\nAll live examples are written in Typescript. All components and types are imported\nfrom the `chonky` package, e.g.:\n\n```ts\nimport 'chonky/style/main.css';\nimport { FileBrowser, FileToolbar, FileList, FileData } from 'chonky';\n```\n\nThe only exception is the `showActionNotification()` function, which calls\n[the Noty notification library](https://ned.im/noty/) (not packaged with Chonky). To\nrun the examples locally, you can replace `showActionNotification()` with\n`console.log()`.\n")))}}},story_helpers_CustomPrimary=function CustomPrimary(_ref){var story,name=_ref.name,context=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(blocks.DocsContext),componentStories=Object(utils.getDocsStories)(context);return componentStories&&(story=name?componentStories.find((function(s){return s.name===name})):componentStories[0]),story?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(blocks.DocsStory,_extends({},story,{expanded:!1})):null},story_helpers_parseMarkdown=function parseMarkdown(markdown){var _step,occurrences=[],_iterator=function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e2){throw _e2},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e3){didErr=!0,err=_e3},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}(getIndicesOf("```",markdown));try{for(_iterator.s();!(_step=_iterator.n()).done;){var index=_step.value,lineEnd=markdown.indexOf("\n",index),line=markdown.substring(index,lineEnd).trim(),opening_matches=/^```([a-z-]+)(\s+{.*?})?$/i.exec(line);if(opening_matches){var _opening_matches=_slicedToArray(opening_matches,3),language=_opening_matches[1],jsonConfig=_opening_matches[2];occurrences.push({type:"start",language:language,jsonConfig:jsonConfig,markdownEnd:index,codeStart:lineEnd+1})}else/^```$/i.exec(line)&&occurrences.push({type:"end",codeEnd:index,markdownStart:lineEnd+1})}}catch(err){_iterator.e(err)}finally{_iterator.f()}for(var components=[],markdownStart=0,i=0;i<occurrences.length-1;++i){var start=occurrences[i],end=occurrences[i+1];if("start"===start.type&&"end"===end.type){i+=1;var mdSlice=markdown.substring(markdownStart,start.markdownEnd),codeSlice=markdown.substring(start.codeStart,end.codeEnd);components.push(story_helpers_prepareMarkdownComp(i,mdSlice)),components.push(story_helpers_prepareCodeComp(i,start.language,codeSlice,start.jsonConfig)),markdownStart=end.markdownStart}}return components.push(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(blocks.Description,{key:"markdown-last",markdown:markdown.substring(markdownStart)})),components},story_helpers_prepareMarkdownComp=function prepareMarkdownComp(index,markdown){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(blocks.Description,{key:"md-".concat(index),markdown:markdown})};story_helpers_prepareMarkdownComp.displayName="prepareMarkdownComp";var story_helpers_prepareCodeComp=function prepareCodeComp(index,language,code,jsonConfig){var displayCode,key="code-".concat(2*index+1);return displayCode=jsonConfig?"Sorry, JSON config loading is currently not supported. "+"\nYour config: ".concat(jsonConfig):code,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(dist.Source,{key:key,language:language,code:displayCode})};story_helpers_prepareCodeComp.displayName="prepareCodeComp";var getIndicesOf=function getIndicesOf(needle,haystack){var index,searchStrLen=needle.length;if(0==searchStrLen)return[];for(var startIndex=0,indices=[];(index=haystack.indexOf(needle,startIndex))>-1;)indices.push(index),startIndex=index+searchStrLen;return indices},story_helpers_showActionNotification=function showActionNotification(params){var action=params.action,data=params.data,textParts=[];if(textParts.push("<b>Action:</b> ".concat(action.id)),data.target&&textParts.push("<b>Target:</b> <code>".concat(data.target.name,"</code>")),data.files){var fileComps=data.files.map((function(f){return f.name})).map((function(name){return"<code>".concat(name,"</code>")})),fileCount=fileComps.length,fileTitle="".concat(fileCount," ").concat(1===fileCount?"file":"files",":");textParts.push("<b>".concat(fileTitle,"</b> [").concat(fileComps.join(", "),"]"))}var text=textParts.join("<br/>");new lib_noty_default.a({text:text,type:"success",theme:"relax",timeout:3e3}).show()};try{story_helpers_createDocsObject.displayName="createDocsObject",story_helpers_createDocsObject.__docgenInfo={description:"",displayName:"createDocsObject",props:{markdown:{defaultValue:null,description:"",name:"markdown",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/story-helpers.tsx#createDocsObject"]={docgenInfo:story_helpers_createDocsObject.__docgenInfo,name:"createDocsObject",path:"stories/story-helpers.tsx#createDocsObject"})}catch(__react_docgen_typescript_loader_error){}try{story_helpers_showActionNotification.displayName="showActionNotification",story_helpers_showActionNotification.__docgenInfo={description:"",displayName:"showActionNotification",props:{action:{defaultValue:null,description:"",name:"action",required:!0,type:{name:"FileAction"}},data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"FileActionData"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/story-helpers.tsx#showActionNotification"]={docgenInfo:story_helpers_showActionNotification.__docgenInfo,name:"showActionNotification",path:"stories/story-helpers.tsx#showActionNotification"})}catch(__react_docgen_typescript_loader_error){}},34:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("NyMY")},36:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("LW0h")},360:function(module,exports,__webpack_require__){__webpack_require__(361),__webpack_require__(386),__webpack_require__(387),__webpack_require__(427),__webpack_require__(555),__webpack_require__(594),__webpack_require__(606),__webpack_require__(608),__webpack_require__(613),module.exports=__webpack_require__(620)},362:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ARua")},37:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("aokA")},379:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("9JhN")},380:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("PjZX")},387:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(212)},393:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("JY+C")},397:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ZUdG")},398:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("PuIx")},4:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ho0z")},40:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("7xRU")},400:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("tQbP")},41:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("jwue")},411:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("dSaG")},412:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("hQin")},42:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("+oxZ")},43:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("lN5B")},430:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("LJ7e")},432:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("I2fK")},433:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("DY47")},439:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("3kp9")},443:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("/bc2")},444:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("/JuR")},445:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("+Bxv")},446:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("muFx")},447:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Wci6")},448:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("WoRU")},449:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("o3fS")},450:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("JmTi")},451:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("xaiR")},452:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("SlD/")},453:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Monn")},455:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("fmNP")},459:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("uFXj")},46:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("EgRP")},462:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("V0IW")},463:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("OCSl")},488:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("kA4r")},490:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Blm6")},491:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ssvU")},492:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("lZm3")},496:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Ee2X")},5:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("IAdD")},50:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("MvUL")},500:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("b2e3")},51:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("yH/f")},52:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Ysgh")},521:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("maj8")},54:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("KOtZ")},545:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("H87J")},546:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("S3pA")},547:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("O1Sc")},548:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("zF5n")},559:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("kvVz")},56:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("A3UQ")},565:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("tJVe")},566:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("nuol")},567:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("PjJO")},568:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("DpO5")},587:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Kkar")},588:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("2q8g")},589:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("nDih")},59:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("HUCg")},6:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("aWzz")},60:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Yct5")},613:function(module,exports,__webpack_require__){"use strict";__webpack_require__(3),__webpack_require__(36),__webpack_require__(41),__webpack_require__(46),__webpack_require__(30),__webpack_require__(614),__webpack_require__(616),__webpack_require__(7),__webpack_require__(42);var _clientApi=__webpack_require__(49),_clientLogger=__webpack_require__(38),_configFilename=__webpack_require__(619);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(_configFilename.args||_configFilename.argTypes)&&_clientLogger.logger.warn("Invalid args/argTypes in config, ignoring.",JSON.stringify({args:_configFilename.args,argTypes:_configFilename.argTypes})),_configFilename.decorators&&_configFilename.decorators.forEach((function(decorator){return(0,_clientApi.addDecorator)(decorator)})),(_configFilename.parameters||_configFilename.globalArgs||_configFilename.globalArgTypes)&&(0,_clientApi.addParameters)(_objectSpread(_objectSpread({},_configFilename.parameters),{},{globalArgs:_configFilename.globalArgs,globalArgTypes:_configFilename.globalArgTypes})),_configFilename.argTypesEnhancers&&_configFilename.argTypesEnhancers.forEach((function(enhancer){return(0,_clientApi.addArgTypesEnhancer)(enhancer)}))},615:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ct80")},617:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("oD4t")},618:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("2sZ7")},619:function(module,exports){},62:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("jQ3i")},620:function(module,exports,__webpack_require__){"use strict";(function(module){var _framework=__webpack_require__(212);module._StorybookPreserveDecorators=!0,(0,_framework.configure)([__webpack_require__(621)],module)}).call(this,__webpack_require__(124)(module))},621:function(module,exports,__webpack_require__){var map={"./00-Welcome/01-Welcome.stories.mdx":622,"./00-Welcome/02-Features.stories.mdx":623,"./00-Welcome/03-Installation.stories.mdx":624,"./00-Welcome/04-Immutability.stories.mdx":625,"./01-File-Browser-basics/01-Component-hierarchy.stories.tsx":772,"./01-File-Browser-basics/02-Displaying-files.stories.tsx":773,"./01-File-Browser-basics/03-Specifying-folder.stories.tsx":774,"./01-File-Browser-basics/04-Actions.stories.tsx":775,"./01-File-Browser-basics/05-Custom-actions.stories.tsx":776,"./01-File-Browser-basics/06-Thumbnails.stories.tsx":777,"./01-File-Browser-basics/07-Drag-n-drop.stories.tsx":778,"./02-File-Browser-advanced/01-Invalid-props.stories.tsx":779,"./02-File-Browser-advanced/02-Virtualization.stories.tsx":780,"./03-API-Reference/02-Built-in-actions.stories.mdx":770};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=621},622:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(3),__webpack_require__(16),__webpack_require__(5),__webpack_require__(7),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(39),_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(68);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Meta=function makeShortcode(name){return function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",props)}}("Meta"),layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(Meta,{title:"0 Chonky Overview|Introduction",mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__.a,{mdxType:"ChonkyHeader"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"introduction"},"Introduction"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("strong",{parentName:"p"},"Chonky is a file browser component for React.")," It tries to recreate the native file\nbrowsing experience in your browser. Chonky supports drag & drop, file selection,\nimage thumbnails, and much more!"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"p"},{href:"https://github.com/TimboKZ/Chonky",target:"_blank",rel:"nofollow noopener noreferrer"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("strong",{parentName:"a"},"View on Github"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"philosophy"},"Philosophy"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Please read this section to understand what Chonky is and is not."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h3",{id:"1-chonky-is-the-presentation-layer"},"1. Chonky is the presentation layer."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Chonky takes a list of files and shows them to the user. It does not and should not\nknow where the files came from, nor should it now how file operations are carried out."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h3",{id:"2-chonky-is-filesystem-agnostic"},"2. Chonky is filesystem-agnostic."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Chonky tries to stay ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("strong",{parentName:"p"},"unopinionated")," when it comes to interactions with the file\nsystem (FS)."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h3",{id:"3-developing-file-browsers-is-hard-each-use-case-is-unique"},"3. Developing file browsers is hard. Each use case is unique."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"At the same time, Chonky tries to cover all possible interactions with the user. This includes support for keyboard\nnavigation and common keyboard shortcuts, support for file selections, drag & drop, different file views, and much more."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null)," ")}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"0 Chonky Overview|Introduction",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},623:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(3),__webpack_require__(16),__webpack_require__(5),__webpack_require__(7),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(39),_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(68);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Meta=function makeShortcode(name){return function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",props)}}("Meta"),layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(Meta,{title:"0 Chonky Overview|Chonky features",mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__.a,{mdxType:"ChonkyHeader"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"chonky-features"},"Chonky features:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("blockquote",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",{parentName:"blockquote"},"Want to request a feature? Post a feature request in Chonky's\n",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"p"},{href:"https://github.com/TimboKZ/Chonky/issues",target:"_blank",rel:"nofollow noopener noreferrer"}),"GitHub issues"),".")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("ul",{className:"contains-task-list"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Backend-agnostic - files can come from any source (remote server, S3, virtual FS)."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","Supports text search."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports drag & drop."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports image thumbnails."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","Supports keyboard shortcuts."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports common and custom file actions."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","Supports ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("em",{parentName:"li"},"detailed list")," and ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("em",{parentName:"li"},"thumbnails")," views."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Provides unique icons for each file extension."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports file selections (excluding drag selection, ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("em",{parentName:"li"},"for now"),")."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports loading animations and async thumbnail generation."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Performs well with large file collections thanks to\n",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"li"},{href:"https://github.com/bvaughn/react-virtualized",target:"_blank",rel:"nofollow noopener noreferrer"}),"virtualization"),".")))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"0 Chonky Overview|Chonky features",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},624:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(3),__webpack_require__(16),__webpack_require__(5),__webpack_require__(7),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(39),_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(68);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Meta=function makeShortcode(name){return function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",props)}}("Meta"),layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(Meta,{title:"0 Chonky Overview|Installation & usage",mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__.a,{mdxType:"ChonkyHeader"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"installation"},"Installation"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Add Chonky to your NPM project:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("code",_extends({parentName:"pre"},{className:"language-shell"}),"npm install chonky\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Then, import relevant components and styles:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("code",_extends({parentName:"pre"},{className:"language-js"}),"import 'chonky/style/main.css';\nimport { FileBrowser, FileList } from 'chonky';\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"And you're good to go! Check other sections in the documentation to see how Chonky\ncomponents can be used."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h3",{id:"usage-with-typescript"},"Usage with Typescript"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Chonky was built using Typescript. As such, many of the internal types and interfaces\nare exported. Some types are generic, to make it easier for you to integrate Chonky\ninto you Typescript package."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"If you're also using Typescript, you can add Chonky types to your project using\nstandard\nimports:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("code",_extends({parentName:"pre"},{className:"language-ts"}),"// FileArray is a TS type\nimport { FileArray } from 'chonky';\n\nconst myFiles: FileArray = [\n    {\n        id: 'abD3',\n        name: 'README.txt',\n    },\n    null,\n];\n")))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"0 Chonky Overview|Installation & usage",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},625:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(3),__webpack_require__(16),__webpack_require__(5),__webpack_require__(7),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(39),_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(68);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Meta=function makeShortcode(name){return function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",props)}}("Meta"),layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(Meta,{title:"0 Chonky Overview|Immutability",mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__.a,{mdxType:"ChonkyHeader"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"immutability-in-chonky"},"Immutability in Chonky"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"TODO explain:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"Chonky assumes data is immutable to be performant."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"Link to Redux docs."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"Examples of common beginner problems?")))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"0 Chonky Overview|Immutability",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},626:function(module,exports,__webpack_require__){(exports=__webpack_require__(139)(!1)).push([module.i,'.chonky-fill-parent {\n  height: 100%;\n}\n\n.chonky-no-select {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n.chonky-root {\n  border: solid 1px #e4e4e4;\n  border-radius: 4px;\n  padding: 7.5px;\n  touch-action: manipulation;\n  font-size: 15px;\n  font-family: sans-serif;\n  flex-direction: column;\n  position: relative;\n  display: flex;\n  height: 100%;\n}\n\n.chonky-error {\n  border: solid 1px rgba(108, 72, 72, 0.11);\n  margin-bottom: 7.5px;\n  border-radius: 4px;\n  background-color: #fdebeb;\n  font-family: sans-serif;\n  color: #8e2121;\n  padding: 1em;\n}\n.chonky-error-name {\n  opacity: 0.5;\n}\n.chonky-error ul {\n  padding-top: 0.1em;\n  margin: 0;\n}\n.chonky-error li {\n  margin-top: 0.5em;\n}\n\n.chonky-tooltip {\n  position: relative;\n}\n.chonky-tooltip:hover::before, .chonky-tooltip:hover::after, .chonky-tooltip:focus::before, .chonky-tooltip:focus::after, .chonky-tooltip:active::before, .chonky-tooltip:active::after {\n  display: block;\n  opacity: 1;\n}\n.chonky-tooltip::before, .chonky-tooltip::after {\n  transition: opacity 100ms ease-in-out;\n  pointer-events: none;\n  position: absolute;\n  display: none;\n  z-index: 9999;\n  bottom: 100%;\n  opacity: 0;\n  left: 50%;\n}\n.chonky-tooltip::before {\n  transform: translateX(-75%);\n  background-color: rgba(0, 0, 0, 0.8);\n  border-radius: 2px;\n  content: attr(data-tooltip);\n  padding: 0.4em 0.5em;\n  white-space: nowrap;\n  margin-bottom: 6px;\n  line-height: 1em;\n  color: #fff;\n  font-size: 0.8em;\n  height: 1em;\n}\n.chonky-tooltip::after {\n  transform: translateX(-50%) rotate(45deg);\n  border: solid 2px rgba(0, 0, 0, 0.8);\n  border-left-color: transparent;\n  border-top-color: transparent;\n  margin-bottom: 4px;\n  content: "";\n}\n\n.chonky-text-placeholder {\n  -webkit-animation: loading-placeholder 1.5s infinite linear;\n  animation: loading-placeholder 1.5s infinite linear;\n  background-color: #ccc;\n  white-space: nowrap;\n  border-radius: 4px;\n  overflow: hidden;\n  min-width: 20px;\n  max-width: 40%;\n}\n@-webkit-keyframes loading-placeholder {\n  0% {\n    opacity: 0.2;\n  }\n  50% {\n    opacity: 0.4;\n  }\n  100% {\n    opacity: 0.2;\n  }\n}\n@keyframes loading-placeholder {\n  0% {\n    opacity: 0.2;\n  }\n  50% {\n    opacity: 0.4;\n  }\n  100% {\n    opacity: 0.2;\n  }\n}\n\n.chonky-toolbar {\n  justify-content: space-between;\n  flex-wrap: wrap-reverse;\n  flex-direction: row;\n  display: flex;\n}\n.chonky-toolbar-side {\n  margin-bottom: 7.5px;\n  flex-direction: row;\n  padding-bottom: 0;\n  display: flex;\n  flex-grow: 1;\n}\n.chonky-toolbar-side-left {\n  flex-grow: 10000;\n}\n.chonky-toolbar-side-right {\n  justify-content: space-between;\n}\n.chonky-toolbar-side-inside {\n  flex-direction: row;\n  display: flex;\n}\n.chonky-toolbar-side-inside > * {\n  vertical-align: middle;\n  display: inline-block;\n}\n@media screen and (max-width: 400px) {\n  .chonky-toolbar {\n    flex-direction: column-reverse;\n  }\n  .chonky-side-right {\n    justify-content: space-between;\n  }\n}\n.chonky-folder-chain-entry, .chonky-folder-chain-separator {\n  vertical-align: middle;\n  display: inline-block;\n}\n.chonky-folder-chain-entry {\n  background: none;\n  cursor: pointer;\n  color: inherit;\n  font: inherit;\n  border: none;\n  padding: 0;\n  transition: background-color 100ms ease-in-out;\n  border-radius: 4px;\n  border: solid 1px transparent;\n  line-height: 28px;\n  padding: 0 0.3em !important;\n  height: 28px;\n  box-sizing: border-box;\n}\n@media screen and (max-width: 400px) {\n  .chonky-folder-chain-entry {\n    line-height: 1.7em;\n    height: 1.7em;\n  }\n}\n.chonky-folder-chain-entry:last-child .chonky-folder-chain-entry-name {\n  -webkit-text-decoration: underline #bbb;\n          text-decoration: underline #bbb;\n}\n.chonky-folder-chain-entry.chonky-loading {\n  font-style: italic;\n  color: #bbb;\n}\ndiv.chonky-folder-chain-entry {\n  cursor: default;\n}\n\nbutton.chonky-folder-chain-entry:hover {\n  background-color: #f5f5f5;\n}\nbutton.chonky-folder-chain-entry:active {\n  border-color: #ccc;\n}\n\n.chonky-folder-chain-separator {\n  line-height: 28px;\n  height: 28px;\n  color: #bbb;\n  padding: 0 0.1em;\n}\n@media screen and (max-width: 400px) {\n  .chonky-folder-chain-separator {\n    line-height: 1.7em;\n    height: 1.7em;\n    padding: 0 0.1em;\n  }\n}\n\n.chonky-toolbar-button-group .chonky-toolbar-button {\n  border-radius: 0;\n}\n.chonky-toolbar-button-group .chonky-toolbar-button:first-of-type {\n  border-bottom-left-radius: 4px;\n  border-top-left-radius: 4px;\n}\n.chonky-toolbar-button-group .chonky-toolbar-button:last-of-type {\n  border-bottom-right-radius: 4px;\n  border-top-right-radius: 4px;\n}\n.chonky-toolbar-button-group .chonky-toolbar-button:focus {\n  z-index: 15;\n}\n.chonky-toolbar-button-group .chonky-toolbar-button:not(:first-child) {\n  margin-left: -1px;\n}\n\n.chonky-toolbar-button {\n  transition: background-color 100ms ease-in-out;\n  background: none;\n  cursor: pointer;\n  color: inherit;\n  font: inherit;\n  border: none;\n  padding: 0;\n  line-height: 26px;\n  border-radius: 4px;\n  border: solid 1px transparent;\n  min-width: 28px;\n  height: 28px;\n  vertical-align: middle;\n  box-sizing: border-box;\n  flex-direction: row;\n  text-align: center;\n  position: relative;\n  z-index: 10;\n}\n.chonky-toolbar-button-icon, .chonky-toolbar-button-text {\n  display: inline-block;\n}\n.chonky-toolbar-button-icon {\n  min-width: 28px;\n}\n.chonky-toolbar-button-text {\n  padding-right: 10px;\n  padding-left: 10px;\n}\n.chonky-toolbar-button-icon + .chonky-toolbar-button-text {\n  padding-left: 0 !important;\n}\n.chonky-toolbar-button-text + .chonky-toolbar-button-icon {\n  margin-left: -10px !important;\n}\n@media screen and (max-width: 400px) {\n  .chonky-toolbar-button {\n    line-height: 1.7em;\n    min-width: 1.7em;\n    height: 1.7em;\n  }\n  .chonky-toolbar-button-icon {\n    min-width: 1.7em;\n  }\n}\n.chonky-toolbar-button.chonky-active {\n  color: #09f;\n  z-index: 93;\n}\n.chonky-toolbar-button:hover {\n  background-color: #f5f5f5;\n  z-index: 92;\n}\n.chonky-toolbar-button:active {\n  border-color: #ccc;\n}\n.chonky-toolbar-button > span {\n  padding: 6px;\n  border-color: #ccc;\n  white-space: nowrap;\n}\n.chonky-toolbar-button[disabled] {\n  color: #bbb !important;\n  pointer-events: none;\n}\n\n.chonky-toolbar-dropdown {\n  position: relative;\n}\n.chonky-toolbar-dropdown .chonky-toolbar-button-icon {\n  font-size: 0.8em;\n}\n.chonky-toolbar-dropdown-content {\n  margin-top: 2.5px;\n  border: solid 1px #ccc;\n  border-radius: 4px;\n  background-color: #fff;\n  flex-direction: column;\n  position: absolute;\n  display: flex;\n  z-index: 70;\n  right: 0;\n}\n.chonky-toolbar-dropdown-button {\n  transition: background-color 100ms ease-in-out;\n  background: none;\n  cursor: pointer;\n  color: inherit;\n  font: inherit;\n  border: none;\n  padding: 0;\n  line-height: 29.9px;\n  border-bottom: solid 1px #ccc;\n  height: 32.2px;\n  white-space: nowrap;\n  text-align: left;\n  display: flex;\n}\n.chonky-toolbar-dropdown-button-icon {\n  padding-left: 7.5px;\n  opacity: 0.5;\n}\n.chonky-toolbar-dropdown-button-text {\n  padding-right: 7.5px;\n  padding-left: 7.5px;\n}\n.chonky-toolbar-dropdown-button[disabled] {\n  color: #bbb !important;\n  pointer-events: none;\n}\n.chonky-toolbar-dropdown-button:hover {\n  background-color: #f5f5f5;\n}\n\n.chonky-file-search {\n  margin-bottom: 7.5px;\n  margin-top: -7.5px;\n}\n.chonky-file-search-input-group label,\n.chonky-file-search-input-group input {\n  line-height: 26px;\n  height: 28px;\n  box-sizing: border-box;\n  display: inline-block;\n  vertical-align: top;\n  font-size: inherit;\n  padding: 0;\n  margin: 0;\n}\n.chonky-file-search-input-group label {\n  background-color: transparent;\n  padding: 0 5px;\n  color: #666;\n  margin: 1px 0 0 2px;\n  border-right: none;\n  position: absolute;\n}\n.chonky-file-search-input-group input {\n  padding-left: 30px;\n  border: solid 1px #e4e4e4;\n  border-radius: 4px;\n  padding-right: 5px;\n}\n\n.chonky-file-list {\n  flex: 1 1;\n}\n.chonky-file-list-notification {\n  text-align: center;\n  position: relative;\n}\n.chonky-file-list-notification-empty {\n  color: #bbb;\n  font-size: 1.2em;\n}\n.chonky-file-list-notification-content {\n  transform: translateX(-50%) translateY(-50%);\n  position: absolute;\n  left: 50%;\n  top: 50%;\n}\n\n.chonky-file-entry-clickable-wrapper {\n  outline: none !important;\n  position: relative;\n}\n.chonky-file-entry-clickable-wrapper:focus .chonky-file-entry-inside:before {\n  box-shadow: inset 0 0 0 2px #000 !important;\n}\n.chonky-file-entry-clickable-wrapper:focus .chonky-file-entry-description {\n  border-top-color: #000 !important;\n}\n.chonky-file-entry-clickable-wrapper:focus .chonky-file-icon-inside {\n  color: #000;\n}\n\n.chonky-file-drag-preview {\n  padding: 7.5px 10px;\n  box-shadow: 2px 2px 5px #888;\n  border-radius: 2px;\n  border: solid 2px #09f;\n  background-color: #f5f5f5;\n  display: inline-block;\n}\n\n.chonky-file-entry {\n  border: solid 1px #e4e4e4;\n  border-radius: 2px;\n  box-sizing: border-box;\n  overflow: hidden;\n  height: 100%;\n}\n.chonky-file-entry-inside {\n  box-sizing: border-box;\n  flex-direction: column;\n  display: flex;\n  height: 100%;\n}\n.chonky-file-entry-inside:before {\n  border-radius: 4px;\n  position: absolute;\n  display: block;\n  z-index: 999;\n  content: "";\n  bottom: 0;\n  right: 0;\n  left: 0;\n  top: 0;\n}\n.chonky-file-entry-dnd-indicator {\n  box-sizing: border-box;\n  position: absolute;\n  font-size: 1.2em;\n  opacity: 0.6;\n  padding: 6px;\n  z-index: 80;\n  left: 1px;\n  top: 1px;\n}\n.chonky-file-entry-dnd-indicator:before {\n  border-bottom: 50px solid transparent;\n  border-left: 50px solid #fff;\n  position: absolute;\n  content: "";\n  z-index: -1;\n  height: 0;\n  width: 0;\n  left: 0;\n  top: 0;\n}\n.chonky-file-entry-preview {\n  background-color: #fff;\n  position: relative;\n  overflow: hidden;\n  flex-grow: 1;\n}\n.chonky-file-entry-description {\n  border-top: solid 2px transparent;\n  background-color: #fff;\n  font-size: 14px;\n  padding: 3px 5px 5px 5px;\n}\n.chonky-file-entry-selected .chonky-file-entry-inside:before {\n  box-shadow: inset 0 0 0 2px #33adff !important;\n}\n.chonky-file-entry-selected .chonky-file-entry-description {\n  border-top-color: #33adff !important;\n}\n.chonky-file-entry-selected .chonky-file-selection {\n  opacity: 1 !important;\n}\n.chonky-file-entry-dragging .chonky-file-background {\n  opacity: 0.3 !important;\n}\n.chonky-file-entry-drop-hovered .chonky-file-background {\n  opacity: 1 !important;\n}\n\n.chonky-file-icon, .chonky-file-selection, .chonky-file-thumbnail, .chonky-file-background {\n  position: absolute;\n  display: block;\n  height: 100%;\n  width: 100%;\n  left: 0;\n  top: 0;\n}\n.chonky-file-icon {\n  z-index: 40;\n}\n.chonky-file-icon-inside {\n  transform: translateX(-50%) translateY(-50%);\n  text-align: center;\n  position: absolute;\n  font-size: 2.2em;\n  display: block;\n  color: #fff;\n  left: 50%;\n  top: 50%;\n}\n.chonky-file-selection {\n  z-index: 30;\n  background: repeating-linear-gradient(45deg, rgba(0, 153, 255, 0.14), rgba(0, 153, 255, 0.14) 10px, rgba(0, 153, 255, 0.2) 10px, rgba(0, 153, 255, 0.2) 20px);\n  background-color: rgba(0, 153, 255, 0.14);\n  opacity: 0;\n}\n.chonky-file-thumbnail {\n  z-index: 20;\n  transition: opacity 100ms ease-in-out;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: contain;\n  opacity: 1;\n}\n.chonky-file-thumbnail-hidden {\n  opacity: 0;\n}\n.chonky-file-background {\n  z-index: 10;\n  transition: opacity 100ms ease-in-out;\n  opacity: 0.5;\n}\n',""]),module.exports=exports},63:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("1Iuc")},64:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("fRV1")},65:function(module,exports,__webpack_require__){var api=__webpack_require__(138),content=__webpack_require__(626);"string"==typeof(content=content.__esModule?content.default:content)&&(content=[[module.i,content,""]]);var options={insert:"head",singleton:!1};api(content,options);module.exports=content.locals||{}},68:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return MDXContent}));__webpack_require__(3),__webpack_require__(16),__webpack_require__(5),__webpack_require__(7),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",{style:{textAlign:"center"}},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{src:"./Chonky_clear.png",alt:"Chonky logo",style:{width:500}}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",{href:"https://www.npmjs.com/package/chonky",target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{alt:"NPM package",src:"https://img.shields.io/npm/v/chonky.svg"})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",{href:"https://tldrlegal.com/license/mit-license",style:{marginLeft:5},target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{alt:"MIT license",src:"https://img.shields.io/npm/l/chonky"})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",{href:"https://www.npmjs.com/package/chonky",style:{marginLeft:5},target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{alt:"NPM downloads",src:"https://img.shields.io/npm/dt/chonky"})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",{href:"https://github.com/TimboKZ/Chonky",style:{marginLeft:5},target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{alt:"GitHub stars",src:"https://img.shields.io/github/stars/TimboKZ/Chonky"})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",{href:"https://discord.gg/4HJaFn9",style:{marginLeft:5},target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{alt:"Chat on Discord",src:"https://img.shields.io/discord/696033621986770957?label=Chat%20on%20Discord"})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null)),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",{class:"unstable-warning"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("blockquote",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",{parentName:"blockquote"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("strong",{parentName:"p"},"Stop right there!")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",{parentName:"blockquote"},"You are reading the documentation for an ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("strong",{parentName:"p"},"unreleased")," 1.x\nversion of Chonky. The API described here can change - it will not be\nfrozen until the official 1.x release."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",{parentName:"blockquote"},"If you need to use Chonky right now, use the 0.x version from the\n",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"p"},{href:"https://timbokz.github.io/Chonky/",target:"_blank",rel:"nofollow noopener noreferrer"}),"Documentation Index"),"."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",{parentName:"blockquote"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("strong",{parentName:"p"},"Want to request a feature for 1.x or report a 1.x issue?")," Post it in\n",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"p"},{href:"https://github.com/TimboKZ/Chonky/issues",target:"_blank",rel:"nofollow noopener noreferrer"}),"Chonky GitHub issues"),"."))))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0},7:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("+KXO")},71:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("hBpG")},72:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ZVkB")},73:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("x4t0")},74:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("LJOr")},758:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("i7Kn")},761:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("mPOS")},762:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("f4p7")},763:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("znGZ")},768:function(module,exports,__webpack_require__){var api=__webpack_require__(138),content=__webpack_require__(769);"string"==typeof(content=content.__esModule?content.default:content)&&(content=[[module.i,content,""]]);var options={insert:"head",singleton:!1};api(content,options);module.exports=content.locals||{}},769:function(module,exports,__webpack_require__){(exports=__webpack_require__(139)(!1)).push([module.i,'.sbdocs-content .sbdocs-p, .sbdocs-content .sbdocs-p *,\n.sbdocs-content .sbdocs-ul,\n.sbdocs-content .sbdocs-ul *,\n.sbdocs-content .sbdocs-ol,\n.sbdocs-content .sbdocs-ol * {\n  line-height: 25px !important;\n  font-size: 17px !important;\n}\n.sbdocs-content .sbdocs-p code,\n.sbdocs-content .sbdocs-ul code,\n.sbdocs-content .sbdocs-ol code {\n  padding: 0 5px !important;\n  font-size: 14px !important;\n}\n.sbdocs-content .sbdocs-h2 {\n  margin-top: 40px !important;\n}\n\n.sbdocs-preview {\n  border: solid 3px #09f !important;\n  margin: 50px 0 40px 0 !important;\n  border-radius: 3px !important;\n  position: relative !important;\n  overflow: visible !important;\n}\n.sbdocs-preview:before {\n  border-top-right-radius: 3px;\n  border-top-left-radius: 3px;\n  font-family: sans-serif;\n  content: "Live Example";\n  background-color: #09f;\n  position: absolute;\n  margin-left: -3px;\n  margin-top: -25px;\n  font-weight: bold;\n  line-height: 25px;\n  font-size: 14px;\n  padding: 0 8px;\n  display: block;\n  height: 25px;\n  color: #fff;\n}\n.sbdocs-preview > div:first-child > div:first-child {\n  padding: 10px 10px 30px 10px !important;\n  margin: 0 !important;\n  overflow: visible !important;\n}\n\n.noty_bar {\n  line-height: 24px;\n}\n.noty_bar code {\n  background-color: rgba(255, 255, 255, 0.7);\n  display: inline-block;\n  border-radius: 4px;\n  line-height: 20px;\n  padding: 0 4px;\n}\n\n.unstable-warning blockquote {\n  background-color: #fde0e0;\n  border-color: #9e0808;\n  margin-bottom: 40px;\n  padding: 20px 30px;\n}\n\n.live-example-action {\n  font-family: sans-serif !important;\n  font-size: 1.2em !important;\n  margin-bottom: 16px;\n  text-align: center;\n  color: #5f0707;\n}\n',""]),module.exports=exports},77:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("7nmT")},770:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(3),__webpack_require__(16),__webpack_require__(5),__webpack_require__(7),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(39);__webpack_require__(68);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Meta=function makeShortcode(name){return function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",props)}}("Meta"),layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(Meta,{title:"3 API Reference|Built-in file actions",mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"built-in-file-actions"},"Built-in file actions"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Explain ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"p"},"ChonkyActions")," map."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h2",{id:"how-to-use-file-actions"},"How to use file actions"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h2",{id:"list-of-built-in-file-actions"},"List of built-in file actions"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h3",{id:"openfiles"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"h3"},"OpenFiles")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"p"},"data.files")," will always be set, but ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"p"},"data.target")," can sometimes be undefined. For\nexample, when the user clicks ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"p"},"Actions -> Open selection"),", target will be undefined."))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"3 API Reference|Built-in file actions",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},772:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ComponentHierarchyExample",(function(){return _01_Component_hierarchy_stories_ComponentHierarchyExample}));__webpack_require__(30),__webpack_require__(65);var _parameters,src=__webpack_require__(23),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"1 File Browser basics|Component hierarchy",parameters:(_parameters={storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import \'chonky/style/main.css\';\\n\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileSearch,\\n    FileToolbar\\n} from \'chonky\';\\nimport React from \'react\';\\n\\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./01-Component-hierarchy.md\';\\n\\n\\nexport default {\\n    title: \'1 File Browser basics|Component hierarchy\',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ComponentHierarchyExample = () => {\\n    const folderChain = [{ id: \'xASw\', name: \'Chonky Demo Folder\', isDir: true }];\\n    const files = [{ id: \'bEfX\', name: \'Demo.ts\' }];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"1-file-browser-basics-component-hierarchy--component-hierarchy-example":{"startLoc":{"col":41,"line":26},"endLoc":{"col":1,"line":48},"startBody":{"col":41,"line":26},"endBody":{"col":1,"line":48}}};\n    \nimport \'chonky/style/main.css\';\n\nimport {\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileSearch,\n    FileToolbar\n} from \'chonky\';\nimport React from \'react\';\n\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\n// @ts-ignore\n\nimport markdown from \'./01-Component-hierarchy.md\';\n\n\nexport default {\n    title: \'1 File Browser basics|Component hierarchy\',\n    parameters: {"storySource":{"source":"import \'chonky/style/main.css\';\\n\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileSearch,\\n    FileToolbar\\n} from \'chonky\';\\nimport React from \'react\';\\n\\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./01-Component-hierarchy.md\';\\n\\n\\nexport default {\\n    title: \'1 File Browser basics|Component hierarchy\',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ComponentHierarchyExample = () => {\\n    const folderChain = [{ id: \'xASw\', name: \'Chonky Demo Folder\', isDir: true }];\\n    const files = [{ id: \'bEfX\', name: \'Demo.ts\' }];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n","locationsMap":{"1-file-browser-basics-component-hierarchy--component-hierarchy-example":{"startLoc":{"col":41,"line":26},"endLoc":{"col":1,"line":48},"startBody":{"col":41,"line":26},"endBody":{"col":1,"line":48}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ComponentHierarchyExample = () => {\n    const folderChain = [{ id: \'xASw\', name: \'Chonky Demo Folder\', isDir: true }];\n    const files = [{ id: \'bEfX\', name: \'Demo.ts\' }];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n',locationsMap:{"1-file-browser-basics-component-hierarchy--component-hierarchy-example":{startLoc:{col:41,line:34},endLoc:{col:1,line:56},startBody:{col:41,line:34},endBody:{col:1,line:56}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileSearch,\n    FileToolbar\n} from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './01-Component-hierarchy.md';\n\n\nexport default {\n    title: '1 File Browser basics|Component hierarchy',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ComponentHierarchyExample = () => {\n    const folderChain = [{ id: 'xASw', name: 'Chonky Demo Folder', isDir: true }];\n    const files = [{ id: 'bEfX', name: 'Demo.ts' }];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"1-file-browser-basics-component-hierarchy--component-hierarchy-example":{startLoc:{col:41,line:26},endLoc:{col:1,line:48},startBody:{col:41,line:26},endBody:{col:1,line:48}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"Chonky includes several major components - `FileBrowser`, `FileList`, `FileToolbar`,\nand some others.\n\n`FileBrowser` is the most important component. In your code, it should wrap\nall other Chonky components:\n\n```tsx\n<FileBrowser files={[]}>\n    <FileToolbar />\n    <FileSearch />\n    <FileList />\n</FileBrowser>\n```\n\nThis is because `FileBrowser` is responsible for providing the configuration and\nrelevant React contexts to all the children Chonky components. It also the component\nthat you will be passing all of your props too.\n\n`FileBrowser` is also the only required component - all others, such as `FileList`,\nare optional. For example, if you're only interested in displaying files, but don't\nneed to the toolbar, you could use the following hierarchy:\n\n```tsx\n<FileBrowser files={[]}>\n    <FileList />\n</FileBrowser>\n```\n\nOr, if you're a power user, and you want to use a custom implementation of the file\nlist by consuming Chonky's React contexts directly, you could use something like:\n\n```tsx\n<FileBrowser files={[]}>\n    <FileToolbar />\n    <FileSearch />\n    <MyCustomFileList />\n</FileBrowser>\n```\n"})),_parameters)};var _01_Component_hierarchy_stories_ComponentHierarchyExample=function ComponentHierarchyExample(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[{id:"bEfX",name:"Demo.ts"}],folderChain:[{id:"xASw",name:"Chonky Demo Folder",isDir:!0}],onFileAction:function handleFileAction(action,data){Object(story_helpers.b)({action:action,data:data})},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null)))};_01_Component_hierarchy_stories_ComponentHierarchyExample.displayName="ComponentHierarchyExample"},773:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"FilesArrayExample",(function(){return _02_Displaying_files_stories_FilesArrayExample}));__webpack_require__(21),__webpack_require__(30),__webpack_require__(65);var _parameters,src=__webpack_require__(23),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"1 File Browser basics|Displaying files",parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileArray,\\n    FileBrowser,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './02-Displaying-files.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Displaying files',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const FilesArrayExample = () => {\\n    const files: FileArray = [\\n        null, // Loading animation will be shown for this file\\n        null,\\n        {\\n            id: 'nTe',\\n            name: 'Normal file.yaml',\\n            isDir: false,\\n            isHidden: true,\\n            size: 890,\\n        },\\n        {\\n            id: 'zxc',\\n            name: 'Hidden file.mp4',\\n            isDir: false,\\n            isHidden: true,\\n            size: 890,\\n        },\\n        {\\n            id: 'bnm',\\n            name: 'Normal folder',\\n            isDir: true,\\n            childrenIds: ['random-id-1', 'random-id-2'],\\n        },\\n        {\\n            id: 'vfr',\\n            name: 'Symlink folder',\\n            isDir: true,\\n            isSymlink: true,\\n        },\\n        {\\n            id: 'qwe',\\n            name: 'Not selectable.tar.gz',\\n            ext: '.tar.gz', // Custom extension\\n            selectable: false, // Disable selection\\n            size: 54300000000,\\n            modDate: new Date(),\\n        },\\n        {\\n            id: 'rty',\\n            name: 'Not openable.pem',\\n            openable: false, // Prevent opening\\n            size: 100000000,\\n        },\\n        {\\n            id: 'btj',\\n            name: 'Not draggable.exe',\\n            draggable: false, // Prevent this files from being dragged\\n        },\\n        {\\n            id: 'upq',\\n            name: 'Not droppable',\\n            isDir: true,\\n            droppable: false, // Prevent files from being dropped into this folder\\n        },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"1-file-browser-basics-displaying-files--files-array-example\":{\"startLoc\":{\"col\":33,\"line\":27},\"endLoc\":{\"col\":1,\"line\":101},\"startBody\":{\"col\":33,\"line\":27},\"endBody\":{\"col\":1,\"line\":101}}};\n    \nimport 'chonky/style/main.css';\n\nimport {\n    FileAction,\n    FileActionData,\n    FileArray,\n    FileBrowser,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './02-Displaying-files.md';\n\n\nexport default {\n    title: '1 File Browser basics|Displaying files',\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileArray,\\n    FileBrowser,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './02-Displaying-files.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Displaying files',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const FilesArrayExample = () => {\\n    const files: FileArray = [\\n        null, // Loading animation will be shown for this file\\n        null,\\n        {\\n            id: 'nTe',\\n            name: 'Normal file.yaml',\\n            isDir: false,\\n            isHidden: true,\\n            size: 890,\\n        },\\n        {\\n            id: 'zxc',\\n            name: 'Hidden file.mp4',\\n            isDir: false,\\n            isHidden: true,\\n            size: 890,\\n        },\\n        {\\n            id: 'bnm',\\n            name: 'Normal folder',\\n            isDir: true,\\n            childrenIds: ['random-id-1', 'random-id-2'],\\n        },\\n        {\\n            id: 'vfr',\\n            name: 'Symlink folder',\\n            isDir: true,\\n            isSymlink: true,\\n        },\\n        {\\n            id: 'qwe',\\n            name: 'Not selectable.tar.gz',\\n            ext: '.tar.gz', // Custom extension\\n            selectable: false, // Disable selection\\n            size: 54300000000,\\n            modDate: new Date(),\\n        },\\n        {\\n            id: 'rty',\\n            name: 'Not openable.pem',\\n            openable: false, // Prevent opening\\n            size: 100000000,\\n        },\\n        {\\n            id: 'btj',\\n            name: 'Not draggable.exe',\\n            draggable: false, // Prevent this files from being dragged\\n        },\\n        {\\n            id: 'upq',\\n            name: 'Not droppable',\\n            isDir: true,\\n            droppable: false, // Prevent files from being dropped into this folder\\n        },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"1-file-browser-basics-displaying-files--files-array-example\":{\"startLoc\":{\"col\":33,\"line\":27},\"endLoc\":{\"col\":1,\"line\":101},\"startBody\":{\"col\":33,\"line\":27},\"endBody\":{\"col\":1,\"line\":101}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const FilesArrayExample = () => {\n    const files: FileArray = [\n        null, // Loading animation will be shown for this file\n        null,\n        {\n            id: 'nTe',\n            name: 'Normal file.yaml',\n            isDir: false,\n            isHidden: true,\n            size: 890,\n        },\n        {\n            id: 'zxc',\n            name: 'Hidden file.mp4',\n            isDir: false,\n            isHidden: true,\n            size: 890,\n        },\n        {\n            id: 'bnm',\n            name: 'Normal folder',\n            isDir: true,\n            childrenIds: ['random-id-1', 'random-id-2'],\n        },\n        {\n            id: 'vfr',\n            name: 'Symlink folder',\n            isDir: true,\n            isSymlink: true,\n        },\n        {\n            id: 'qwe',\n            name: 'Not selectable.tar.gz',\n            ext: '.tar.gz', // Custom extension\n            selectable: false, // Disable selection\n            size: 54300000000,\n            modDate: new Date(),\n        },\n        {\n            id: 'rty',\n            name: 'Not openable.pem',\n            openable: false, // Prevent opening\n            size: 100000000,\n        },\n        {\n            id: 'btj',\n            name: 'Not draggable.exe',\n            draggable: false, // Prevent this files from being dragged\n        },\n        {\n            id: 'upq',\n            name: 'Not droppable',\n            isDir: true,\n            droppable: false, // Prevent files from being dropped into this folder\n        },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"1-file-browser-basics-displaying-files--files-array-example":{startLoc:{col:33,line:35},endLoc:{col:1,line:109},startBody:{col:33,line:35},endBody:{col:1,line:109}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    FileAction,\n    FileActionData,\n    FileArray,\n    FileBrowser,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './02-Displaying-files.md';\n\n\nexport default {\n    title: '1 File Browser basics|Displaying files',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const FilesArrayExample = () => {\n    const files: FileArray = [\n        null, // Loading animation will be shown for this file\n        null,\n        {\n            id: 'nTe',\n            name: 'Normal file.yaml',\n            isDir: false,\n            isHidden: true,\n            size: 890,\n        },\n        {\n            id: 'zxc',\n            name: 'Hidden file.mp4',\n            isDir: false,\n            isHidden: true,\n            size: 890,\n        },\n        {\n            id: 'bnm',\n            name: 'Normal folder',\n            isDir: true,\n            childrenIds: ['random-id-1', 'random-id-2'],\n        },\n        {\n            id: 'vfr',\n            name: 'Symlink folder',\n            isDir: true,\n            isSymlink: true,\n        },\n        {\n            id: 'qwe',\n            name: 'Not selectable.tar.gz',\n            ext: '.tar.gz', // Custom extension\n            selectable: false, // Disable selection\n            size: 54300000000,\n            modDate: new Date(),\n        },\n        {\n            id: 'rty',\n            name: 'Not openable.pem',\n            openable: false, // Prevent opening\n            size: 100000000,\n        },\n        {\n            id: 'btj',\n            name: 'Not draggable.exe',\n            draggable: false, // Prevent this files from being dragged\n        },\n        {\n            id: 'upq',\n            name: 'Not droppable',\n            isDir: true,\n            droppable: false, // Prevent files from being dropped into this folder\n        },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"1-file-browser-basics-displaying-files--files-array-example":{startLoc:{col:33,line:27},endLoc:{col:1,line:101},startBody:{col:33,line:27},endBody:{col:1,line:101}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"The `FileBrowser` component has only one required prop - the `files` array:\n\n```tsx\nconst FilesExample = () => {\n    const files = [\n        null, // Will show loading animation\n        { id: 'xWbZ', name: 'Instructions.txt' },\n        { id: 'xWbZ', name: 'Tools', isDir: true },\n    ];\n\n    return (\n        <FileBrowser files={files}>\n            <FileToolbar />\n            <FileSearch />\n            <FileList />\n        </FileBrowser>\n    );\n};\n```\n\nThis array describes the files that Chonky should show to the user. It can contain\nfile descriptions (as plain JavaScript objects) or `null` values. `null` values\nindicate \"loading\" files - a loading placeholder animation will be shown in their place.\n\n## The `FileData` type\n\nFormally, the Typescript type for the `files` array is:\n\n```ts\ntype FileArray = Nullable<FileData>[];\n// i.e. Array of nulls and `FileData` objects mixed together\n```\n\nThe `FileData` type is shown below. It might look intimidating, but please note that\n`id` and `name` are the only 2 required fields. All other fields are optional, and\nare there to give you more control over how Chonky displays your files.\n\n```ts\ninterface FileData {\n    id: string; // (Required) String that uniquely identifies the file\n\n    name: string; // (Required) Full name, e.g. `MyImage.jpg`\n    ext?: string; // File extension, e.g. `.jpg`\n\n    isDir?: boolean; // Is a directory, default: false\n    isHidden?: boolean; // Is a hidden file, default: false\n    isSymlink?: boolean; // Is a symlink, default: false\n    openable?: boolean; // Can be opened, default: true\n    selectable?: boolean; // Can be selected, default: true\n    draggable?: boolean; // Can be dragged, default: true\n    droppable?: boolean; // Can have files dropped into it, default: true\n\n    size?: number; // File size in bytes\n    modDate?: Date; // Last change date\n\n    parentId?: string; // ID of the parent folder\n    childrenIds?: string[]; // An array of IDs of children (only for folders)\n\n    thumbnailUrl?: string; // Automatically load thumbnail from here\n\n    [property: string]: any; // Any other user-defined property\n}\n```\n\n<span style=\"color: red; font-weight: bold;\">\nIt is very important that file IDs are unique:\n</span>\n\n> If file IDs are not unique, the consequences can be dire - for example, your user can\n> accidentally delete the wrong file. Chonky tries to protect you by scanning the files\n> array for duplicate IDs, but you should put some extra checks in your code too. You\n> can never be too safe.\n\nApart from the above, there are a few other details you should know about:\n\n-   `files` array should be **immutable**. If you're following the best Redux practices,\n    you're good. If you don't know what immutability is, please read the\n    _Immutability_ section from the sidebar. This is important.\n-   The file extension is automatically extracted from the `name` field, so you don't\n    need to provide an `ext` field yourself. In the rare case where the automatic\n    extension detection fails (for example: `file.tar.gz`), you can provide the `ext`\n    field explicitly. Please make sure extension is included in both `name` and `ext`,\n    e.g. `{id: 'AsVz', name: 'file.tar.gz', ext: '.tar.gz'}`.\n\n## Example file array\n\nThe _Live Example_ below tries to show case all different file configurations. Try\nperforming different actions (selections, drag & drop) and see how each file reacts.\nClick on `View Code` at the bottom to see the file array definition.\n"})),_parameters)};var _02_Displaying_files_stories_FilesArrayExample=function FilesArrayExample(){var files=[null,null,{id:"nTe",name:"Normal file.yaml",isDir:!1,isHidden:!0,size:890},{id:"zxc",name:"Hidden file.mp4",isDir:!1,isHidden:!0,size:890},{id:"bnm",name:"Normal folder",isDir:!0,childrenIds:["random-id-1","random-id-2"]},{id:"vfr",name:"Symlink folder",isDir:!0,isSymlink:!0},{id:"qwe",name:"Not selectable.tar.gz",ext:".tar.gz",selectable:!1,size:543e8,modDate:new Date},{id:"rty",name:"Not openable.pem",openable:!1,size:1e8},{id:"btj",name:"Not draggable.exe",draggable:!1},{id:"upq",name:"Not droppable",isDir:!0,droppable:!1}];return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:files,onFileAction:function handleFileAction(action,data){Object(story_helpers.b)({action:action,data:data})},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null)))};_02_Displaying_files_stories_FilesArrayExample.displayName="FilesArrayExample"},774:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"FolderChainExample",(function(){return _03_Specifying_folder_stories_FolderChainExample}));__webpack_require__(30),__webpack_require__(65);var _parameters,src=__webpack_require__(23),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"1 File Browser basics|Specifying current folder",parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './03-Specifying-folder.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Specifying current folder',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const FolderChainExample = () => {\\n    const folderChain = [\\n        {\\n            id: 'gM5tTe',\\n            name: 'My Documents',\\n            isDir: true,\\n        },\\n        {\\n            id: 'mTxYeA',\\n            name: 'Not Openable',\\n            isDir: true,\\n            openable: false, // This button will not be clickable\\n        },\\n        null, // Loading animation will be shown for this file\\n        {\\n            id: 'vxWtA',\\n            name: 'Unity Projects',\\n            isDir: true,\\n        },\\n        {\\n            id: 'mT7Et',\\n            name: 'Good Projects',\\n            isDir: true,\\n        },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={[]}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"1-file-browser-basics-specifying-current-folder--folder-chain-example\":{\"startLoc\":{\"col\":34,\"line\":19},\"endLoc\":{\"col\":1,\"line\":61},\"startBody\":{\"col\":34,\"line\":19},\"endBody\":{\"col\":1,\"line\":61}}};\n    \nimport 'chonky/style/main.css';\n\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './03-Specifying-folder.md';\n\n\nexport default {\n    title: '1 File Browser basics|Specifying current folder',\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './03-Specifying-folder.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Specifying current folder',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const FolderChainExample = () => {\\n    const folderChain = [\\n        {\\n            id: 'gM5tTe',\\n            name: 'My Documents',\\n            isDir: true,\\n        },\\n        {\\n            id: 'mTxYeA',\\n            name: 'Not Openable',\\n            isDir: true,\\n            openable: false, // This button will not be clickable\\n        },\\n        null, // Loading animation will be shown for this file\\n        {\\n            id: 'vxWtA',\\n            name: 'Unity Projects',\\n            isDir: true,\\n        },\\n        {\\n            id: 'mT7Et',\\n            name: 'Good Projects',\\n            isDir: true,\\n        },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={[]}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"1-file-browser-basics-specifying-current-folder--folder-chain-example\":{\"startLoc\":{\"col\":34,\"line\":19},\"endLoc\":{\"col\":1,\"line\":61},\"startBody\":{\"col\":34,\"line\":19},\"endBody\":{\"col\":1,\"line\":61}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const FolderChainExample = () => {\n    const folderChain = [\n        {\n            id: 'gM5tTe',\n            name: 'My Documents',\n            isDir: true,\n        },\n        {\n            id: 'mTxYeA',\n            name: 'Not Openable',\n            isDir: true,\n            openable: false, // This button will not be clickable\n        },\n        null, // Loading animation will be shown for this file\n        {\n            id: 'vxWtA',\n            name: 'Unity Projects',\n            isDir: true,\n        },\n        {\n            id: 'mT7Et',\n            name: 'Good Projects',\n            isDir: true,\n        },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={[]}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"1-file-browser-basics-specifying-current-folder--folder-chain-example":{startLoc:{col:34,line:27},endLoc:{col:1,line:69},startBody:{col:34,line:27},endBody:{col:1,line:69}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './03-Specifying-folder.md';\n\n\nexport default {\n    title: '1 File Browser basics|Specifying current folder',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const FolderChainExample = () => {\n    const folderChain = [\n        {\n            id: 'gM5tTe',\n            name: 'My Documents',\n            isDir: true,\n        },\n        {\n            id: 'mTxYeA',\n            name: 'Not Openable',\n            isDir: true,\n            openable: false, // This button will not be clickable\n        },\n        null, // Loading animation will be shown for this file\n        {\n            id: 'vxWtA',\n            name: 'Unity Projects',\n            isDir: true,\n        },\n        {\n            id: 'mT7Et',\n            name: 'Good Projects',\n            isDir: true,\n        },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={[]}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"1-file-browser-basics-specifying-current-folder--folder-chain-example":{startLoc:{col:34,line:19},endLoc:{col:1,line:61},startBody:{col:34,line:19},endBody:{col:1,line:61}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"Like any other file browser, Chonky can display the path to the current folder in the\ntoolbar above the files. To enable this functionality, you will need to add the\n`<FileToolbar />` to your component and pass the `folderChain` array to `FileBrowser`:\n\n```tsx\nconst FolderChainExample = () => {\n    const folderChain = [{ id: 'gMTe', name: 'My Documents', isDir: true }];\n\n    return (\n        <FileBrowser files={[]} folderChain={folderChain}>\n            <FileToolbar /> {/* <----- */}\n            <FileList />\n        </FileBrowser>\n    );\n};\n```\n\nFolder chain follows the exact same rules as the `files` array described in\n_Displaying files_ section. It can also contain `null` values to indicate loading\nfiles, and the objects inside it should follow the `FileData` type.\n\nSome notes:\n\n-   The files in the `folderChain` array don't need to have `isDir` set to `true`.\n-   Clicking on an item in the folder chain will open it, unless it is `null` or has\n    `openable` set to false.\n-   The \"Go up a directory\" button only works when the second-to-last file in the\n    folder chain is openable.\n"})),_parameters)};var _03_Specifying_folder_stories_FolderChainExample=function FolderChainExample(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[],folderChain:[{id:"gM5tTe",name:"My Documents",isDir:!0},{id:"mTxYeA",name:"Not Openable",isDir:!0,openable:!1},null,{id:"vxWtA",name:"Unity Projects",isDir:!0},{id:"mT7Et",name:"Good Projects",isDir:!0}],onFileAction:function handleFileAction(action,data){Object(story_helpers.b)({action:action,data:data})}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null)))};_03_Specifying_folder_stories_FolderChainExample.displayName="FolderChainExample"},775:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ActionsExample",(function(){return _04_Actions_stories_ActionsExample}));__webpack_require__(30),__webpack_require__(65);var _parameters,src=__webpack_require__(23),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"1 File Browser basics|Using file actions",parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyActions,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './04-Actions.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Using file actions',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ActionsExample = () => {\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        // Log action to console\\n        \\n        console.log('\\\\nAction object:', action, '\\\\nAction data:', data);\\n\\n        showActionNotification({ action, data });\\n    };\\n\\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'hunter2', name: 'Password.txt' },\\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\\n    ];\\n\\n    const fileActions = [\\n        ChonkyActions.CreateFolder,\\n        ChonkyActions.UploadFiles,\\n        ChonkyActions.DownloadFiles,\\n        ChonkyActions.CopyFiles,\\n    ];\\n\\n    return (\\n        <div className=\\\"live-example\\\" style={{ height: 500 }}>\\n            <div className=\\\"live-example-action\\\">\\n                <strong>Check your browser console for logged actions!</strong>\\n            </div>\\n\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                fileActions={fileActions}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"1-file-browser-basics-using-file-actions--actions-example\":{\"startLoc\":{\"col\":30,\"line\":26},\"endLoc\":{\"col\":1,\"line\":67},\"startBody\":{\"col\":30,\"line\":26},\"endBody\":{\"col\":1,\"line\":67}}};\n    \nimport 'chonky/style/main.css';\n\nimport {\n    ChonkyActions,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './04-Actions.md';\n\n\nexport default {\n    title: '1 File Browser basics|Using file actions',\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyActions,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './04-Actions.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Using file actions',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ActionsExample = () => {\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        // Log action to console\\n        \\n        console.log('\\\\nAction object:', action, '\\\\nAction data:', data);\\n\\n        showActionNotification({ action, data });\\n    };\\n\\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'hunter2', name: 'Password.txt' },\\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\\n    ];\\n\\n    const fileActions = [\\n        ChonkyActions.CreateFolder,\\n        ChonkyActions.UploadFiles,\\n        ChonkyActions.DownloadFiles,\\n        ChonkyActions.CopyFiles,\\n    ];\\n\\n    return (\\n        <div className=\\\"live-example\\\" style={{ height: 500 }}>\\n            <div className=\\\"live-example-action\\\">\\n                <strong>Check your browser console for logged actions!</strong>\\n            </div>\\n\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                fileActions={fileActions}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"1-file-browser-basics-using-file-actions--actions-example\":{\"startLoc\":{\"col\":30,\"line\":26},\"endLoc\":{\"col\":1,\"line\":67},\"startBody\":{\"col\":30,\"line\":26},\"endBody\":{\"col\":1,\"line\":67}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ActionsExample = () => {\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        // Log action to console\n        \n        console.log('\\nAction object:', action, '\\nAction data:', data);\n\n        showActionNotification({ action, data });\n    };\n\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'hunter2', name: 'Password.txt' },\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\n    ];\n\n    const fileActions = [\n        ChonkyActions.CreateFolder,\n        ChonkyActions.UploadFiles,\n        ChonkyActions.DownloadFiles,\n        ChonkyActions.CopyFiles,\n    ];\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <div className=\"live-example-action\">\n                <strong>Check your browser console for logged actions!</strong>\n            </div>\n\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                fileActions={fileActions}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"1-file-browser-basics-using-file-actions--actions-example":{startLoc:{col:30,line:34},endLoc:{col:1,line:75},startBody:{col:30,line:34},endBody:{col:1,line:75}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    ChonkyActions,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './04-Actions.md';\n\n\nexport default {\n    title: '1 File Browser basics|Using file actions',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ActionsExample = () => {\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        // Log action to console\n        \n        console.log('\\nAction object:', action, '\\nAction data:', data);\n\n        showActionNotification({ action, data });\n    };\n\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'hunter2', name: 'Password.txt' },\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\n    ];\n\n    const fileActions = [\n        ChonkyActions.CreateFolder,\n        ChonkyActions.UploadFiles,\n        ChonkyActions.DownloadFiles,\n        ChonkyActions.CopyFiles,\n    ];\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <div className=\"live-example-action\">\n                <strong>Check your browser console for logged actions!</strong>\n            </div>\n\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                fileActions={fileActions}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"1-file-browser-basics-using-file-actions--actions-example":{startLoc:{col:30,line:26},endLoc:{col:1,line:67},startBody:{col:30,line:26},endBody:{col:1,line:67}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"Every application using Chonky will be different. Some will require a feature to\nupload files, other will need to support cutting & pasting. Bottom line -\nrequirements will differ! Chonky tries to address this problem using **File Actions**\nand **Action Handlers**.\n\n## File actions\n\n**File Actions** define _what_ can happen. These actions can be triggered by some\nhotkey, user clicking on a button, or a special event like drag & drop. Here are some\nexamples of file actions:\n\n-   User deletes some files by making a selection and pressing `Delete`.\n-   User initializes a file upload by clicking on \"Upload File\" button.\n-   User moves some files from one folder to another using drag & drop.\n\nAction definitions can be passed to the `FileBrowser` component via the `actions`.\nFor your convenience, Chonky includes definitions for many common actions. You just\nneed to import and enable them as follows:\n\n```tsx\nimport { FileBrowser, FileList, FileToolbar, ChonkyActions } from 'chonky';\n\nexport const MyComponent = () => {\n    const actions = [\n        ChonkyActions.CreateFolder, // Adds a button to the toolbar\n        ChonkyActions.UploadFiles, // Adds a button\n        ChonkyActions.DownloadFiles, // Adds a button\n        ChonkyActions.CopyFiles, // Adds a button and a shortcut: Ctrl+C\n    ];\n\n    return (\n        <FileBrowser files={[]} actions={actions}>\n            <FileToolbar />\n            <FileList />\n        </FileBrowser>\n    );\n};\n```\n\n## Action handlers\n\n```ts\nconst helloWorld = '123';\n```\n"})),_parameters)};var _04_Actions_stories_ActionsExample=function ActionsExample(){var fileActions=[src.a.CreateFolder,src.a.UploadFiles,src.a.DownloadFiles,src.a.CopyFiles];return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"live-example",style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"live-example-action"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("strong",null,"Check your browser console for logged actions!")),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[{id:"mHe4A1",name:"Meaning of life.txt",size:31415},{id:"hunter2",name:"Password.txt"},{id:"bEf24q",name:"Drag & drop files here",isDir:!0}],folderChain:[{id:"gBt4z3",name:"My Documents",isDir:!0}],fileActions:fileActions,onFileAction:function handleFileAction(action,data){console.log("\nAction object:",action,"\nAction data:",data),Object(story_helpers.b)({action:action,data:data})},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null)))};_04_Actions_stories_ActionsExample.displayName="ActionsExample"},776:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"CustomActionsExample",(function(){return _05_Custom_actions_stories_CustomActionsExample}));__webpack_require__(4),__webpack_require__(30),__webpack_require__(256),__webpack_require__(65);var _parameters,src=__webpack_require__(23),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"1 File Browser basics|Custom file actions",parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyIconName,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileData,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './05-Custom-actions.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Custom file actions',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const CustomActionsExample = () => {\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    const downloadPsdAction: FileAction = {\\n        id: 'download_psd',\\n        requiresSelection: true,\\n        fileFilter: (file: FileData) => file.name.endsWith('.psd'),\\n        hotkeys: ['ctrl+q'],\\n        toolbarButton: {\\n            name: 'Download Photoshop files',\\n            icon: ChonkyIconName.download,\\n        },\\n    };\\n\\n    const customFileActions = [downloadPsdAction];\\n    const files = [\\n        { id: 'xVdE', name: 'Flowers.psd' },\\n        { id: 'bTeX', name: 'Mountains.psd' },\\n        { id: 'mGeX', name: 'Sky.psd' },\\n        { id: 'mFte', name: 'Stars.psd' },\\n        { id: 'tLwZ', name: 'Parser.rs' },\\n        { id: 'mGrQ', name: 'package.json' },\\n    ];\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                fileActions={customFileActions}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"1-file-browser-basics-custom-file-actions--custom-actions-example\":{\"startLoc\":{\"col\":36,\"line\":28},\"endLoc\":{\"col\":1,\"line\":67},\"startBody\":{\"col\":36,\"line\":28},\"endBody\":{\"col\":1,\"line\":67}}};\n    \nimport 'chonky/style/main.css';\n\nimport {\n    ChonkyIconName,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileData,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './05-Custom-actions.md';\n\n\nexport default {\n    title: '1 File Browser basics|Custom file actions',\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyIconName,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileData,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './05-Custom-actions.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Custom file actions',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const CustomActionsExample = () => {\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    const downloadPsdAction: FileAction = {\\n        id: 'download_psd',\\n        requiresSelection: true,\\n        fileFilter: (file: FileData) => file.name.endsWith('.psd'),\\n        hotkeys: ['ctrl+q'],\\n        toolbarButton: {\\n            name: 'Download Photoshop files',\\n            icon: ChonkyIconName.download,\\n        },\\n    };\\n\\n    const customFileActions = [downloadPsdAction];\\n    const files = [\\n        { id: 'xVdE', name: 'Flowers.psd' },\\n        { id: 'bTeX', name: 'Mountains.psd' },\\n        { id: 'mGeX', name: 'Sky.psd' },\\n        { id: 'mFte', name: 'Stars.psd' },\\n        { id: 'tLwZ', name: 'Parser.rs' },\\n        { id: 'mGrQ', name: 'package.json' },\\n    ];\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                fileActions={customFileActions}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"1-file-browser-basics-custom-file-actions--custom-actions-example\":{\"startLoc\":{\"col\":36,\"line\":28},\"endLoc\":{\"col\":1,\"line\":67},\"startBody\":{\"col\":36,\"line\":28},\"endBody\":{\"col\":1,\"line\":67}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const CustomActionsExample = () => {\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    const downloadPsdAction: FileAction = {\n        id: 'download_psd',\n        requiresSelection: true,\n        fileFilter: (file: FileData) => file.name.endsWith('.psd'),\n        hotkeys: ['ctrl+q'],\n        toolbarButton: {\n            name: 'Download Photoshop files',\n            icon: ChonkyIconName.download,\n        },\n    };\n\n    const customFileActions = [downloadPsdAction];\n    const files = [\n        { id: 'xVdE', name: 'Flowers.psd' },\n        { id: 'bTeX', name: 'Mountains.psd' },\n        { id: 'mGeX', name: 'Sky.psd' },\n        { id: 'mFte', name: 'Stars.psd' },\n        { id: 'tLwZ', name: 'Parser.rs' },\n        { id: 'mGrQ', name: 'package.json' },\n    ];\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                fileActions={customFileActions}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"1-file-browser-basics-custom-file-actions--custom-actions-example":{startLoc:{col:36,line:36},endLoc:{col:1,line:75},startBody:{col:36,line:36},endBody:{col:1,line:75}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    ChonkyIconName,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileData,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './05-Custom-actions.md';\n\n\nexport default {\n    title: '1 File Browser basics|Custom file actions',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const CustomActionsExample = () => {\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    const downloadPsdAction: FileAction = {\n        id: 'download_psd',\n        requiresSelection: true,\n        fileFilter: (file: FileData) => file.name.endsWith('.psd'),\n        hotkeys: ['ctrl+q'],\n        toolbarButton: {\n            name: 'Download Photoshop files',\n            icon: ChonkyIconName.download,\n        },\n    };\n\n    const customFileActions = [downloadPsdAction];\n    const files = [\n        { id: 'xVdE', name: 'Flowers.psd' },\n        { id: 'bTeX', name: 'Mountains.psd' },\n        { id: 'mGeX', name: 'Sky.psd' },\n        { id: 'mFte', name: 'Stars.psd' },\n        { id: 'tLwZ', name: 'Parser.rs' },\n        { id: 'mGrQ', name: 'package.json' },\n    ];\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                fileActions={customFileActions}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"1-file-browser-basics-custom-file-actions--custom-actions-example":{startLoc:{col:36,line:28},endLoc:{col:1,line:67},startBody:{col:36,line:28},endBody:{col:1,line:67}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"_Passing invalid props_ section shows _how_ to use file actions, but it doesn't\nexplain _what_ they are. A file action is a plain JavaScript object that desribes\nwhat can happen to files.\n\nThe interface of a file action object is defined as follows:\n\n```ts\ninterface FileAction {\n    name: string; // Unique action name\n    metadata?: any; // Any user-defined value\n    requiresParentFolder?: boolean; // Requires parent folder in folder chain\n    requiresSelection?: boolean; // Requires selection of 1+ files\n    fileFilter?: FileFilter; // Used to filter the files array\n\n    hotkeys?: string[]; // Hotkeys using `hotkey-js` notation\n    toolbarButton?: ToolbarButtonData; // Description below\n}\n\n// Where...\ntype FileFilter = (file: Nullable<FileData>) => boolean;\n\n// ...and...\ninterface ToolbarButtonData {\n    name: string; // Button name\n    group?: string; // Group to add the button too\n    dropdown?: boolean; // Whether to display group as dropdown\n    tooltip?: string; // Help tooltip text\n    icon?: ChonkyIconName | string; // Icon name\n    iconOnly?: boolean; // Whether to only display the icon\n}\n```\n\n-   If one of the actions in a group includes `dropdown: true`, all actions in that\n    group will be shown as a dropdown.\n\n## Example custom action: \"Download Photoshop files\"\n\nLet's define a custom action that will download the selected Photoshop `.psd` files.\nWe will add a button to the toolbar and a shortcut, `Ctrl+Q`. First, we define the\nfile action object:\n\n```tsx\nimport { FileData, FileAction, ChonkyIconName } from 'chonky';\n\nconst downloadPsdAction: FileAction = {\n    id: 'download_psd',\n    requiresSelection: true,\n    fileFilter: (file: FileData) => file.name.endsWith('.psd'),\n    hotkeys: ['ctrl+q'],\n    toolbarButton: {\n        name: 'Download Photoshop files',\n        icon: ChonkyIconName.download,\n    },\n};\n```\n\nNext, we need to pass this custom action to `FileBrowser`, along with some files:\n\n```tsx\nexport const CustomActionsExample = () => {\n    const customFileActions = [downloadPsdAction]; // <-----\n    const files = [\n        { id: 'xVdE', name: 'Flowers.psd' },\n        { id: 'bTeX', name: 'Mountains.psd' },\n        { id: 'mGeX', name: 'Sky.psd' },\n        { id: 'mFte', name: 'Stars.psd' },\n        { id: 'tLwZ', name: 'Parser.rs' },\n        { id: 'mGrQ', name: 'package.json' },\n    ];\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser files={files} fileActions={customFileActions /* <---- */}>\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n```\n\nYou can see the outcome in the live example below. Note how the button only becomes\nenabled when you select some `.psd` files. Also, when you click \"Download Photoshop\nfiles\", the action popup only includes `.psd` files. After you make your selection,\nyou can also press `Ctrl+Q` to make your selection.\n"})),_parameters)};var _05_Custom_actions_stories_CustomActionsExample=function CustomActionsExample(){var customFileActions=[{id:"download_psd",requiresSelection:!0,fileFilter:function fileFilter(file){return file.name.endsWith(".psd")},hotkeys:["ctrl+q"],toolbarButton:{name:"Download Photoshop files",icon:src.b.download}}];return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[{id:"xVdE",name:"Flowers.psd"},{id:"bTeX",name:"Mountains.psd"},{id:"mGeX",name:"Sky.psd"},{id:"mFte",name:"Stars.psd"},{id:"tLwZ",name:"Parser.rs"},{id:"mGrQ",name:"package.json"}],onFileAction:function handleFileAction(action,data){Object(story_helpers.b)({action:action,data:data})},fileActions:customFileActions},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null)))};_05_Custom_actions_stories_CustomActionsExample.displayName="CustomActionsExample"},777:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ActionsExample",(function(){return _06_Thumbnails_stories_ActionsExample}));__webpack_require__(30),__webpack_require__(111),__webpack_require__(65);var _parameters,bluebird=__webpack_require__(153),bluebird_default=__webpack_require__.n(bluebird),src=__webpack_require__(23),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"1 File Browser basics|File thumbnails",parameters:(_parameters={storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import \'chonky/style/main.css\';\\n\\nimport Promise from \'bluebird\';\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileData,\\n    FileList,\\n    FileToolbar,\\n} from \'chonky\';\\nimport React from \'react\';\\n\\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./06-Thumbnails.md\';\\n\\n\\nexport default {\\n    title: \'1 File Browser basics|File thumbnails\',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ActionsExample = () => {\\n    const thumbnailGenerator = (file: FileData & { delay: number }) => {\\n        return new Promise((resolve) => {\\n            // Delay loading by `file.delay` seconds to simulate thumb generation.\\n            setTimeout(() => resolve(\'./Lenna.png\'), file.delay * 1000);\\n        });\\n    };\\n\\n    const folderChain = [{ id: \'gBt4z3\', name: \'My Pictures\', isDir: true }];\\n    const files: FileData[] = [];\\n    for (let i = 0; i < 20; ++i) {\\n        const delay = i * 2;\\n        files.push({\\n            id: `image-${i}`,\\n            name: `Delay - ${delay} seconds.jpg`,\\n            delay: delay,\\n        });\\n    }\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div className=\\"live-example\\" style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                thumbnailGenerator={thumbnailGenerator} // <----\\n                enableDragAndDrop={true}\\n                onFileAction={handleFileAction}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"1-file-browser-basics-file-thumbnails--actions-example":{"startLoc":{"col":30,"line":27},"endLoc":{"col":1,"line":64},"startBody":{"col":30,"line":27},"endBody":{"col":1,"line":64}}};\n    \nimport \'chonky/style/main.css\';\n\nimport Promise from \'bluebird\';\nimport {\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileData,\n    FileList,\n    FileToolbar,\n} from \'chonky\';\nimport React from \'react\';\n\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\n// @ts-ignore\n\nimport markdown from \'./06-Thumbnails.md\';\n\n\nexport default {\n    title: \'1 File Browser basics|File thumbnails\',\n    parameters: {"storySource":{"source":"import \'chonky/style/main.css\';\\n\\nimport Promise from \'bluebird\';\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileData,\\n    FileList,\\n    FileToolbar,\\n} from \'chonky\';\\nimport React from \'react\';\\n\\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./06-Thumbnails.md\';\\n\\n\\nexport default {\\n    title: \'1 File Browser basics|File thumbnails\',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ActionsExample = () => {\\n    const thumbnailGenerator = (file: FileData & { delay: number }) => {\\n        return new Promise((resolve) => {\\n            // Delay loading by `file.delay` seconds to simulate thumb generation.\\n            setTimeout(() => resolve(\'./Lenna.png\'), file.delay * 1000);\\n        });\\n    };\\n\\n    const folderChain = [{ id: \'gBt4z3\', name: \'My Pictures\', isDir: true }];\\n    const files: FileData[] = [];\\n    for (let i = 0; i < 20; ++i) {\\n        const delay = i * 2;\\n        files.push({\\n            id: `image-${i}`,\\n            name: `Delay - ${delay} seconds.jpg`,\\n            delay: delay,\\n        });\\n    }\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div className=\\"live-example\\" style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                thumbnailGenerator={thumbnailGenerator} // <----\\n                enableDragAndDrop={true}\\n                onFileAction={handleFileAction}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n","locationsMap":{"1-file-browser-basics-file-thumbnails--actions-example":{"startLoc":{"col":30,"line":27},"endLoc":{"col":1,"line":64},"startBody":{"col":30,"line":27},"endBody":{"col":1,"line":64}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ActionsExample = () => {\n    const thumbnailGenerator = (file: FileData & { delay: number }) => {\n        return new Promise((resolve) => {\n            // Delay loading by `file.delay` seconds to simulate thumb generation.\n            setTimeout(() => resolve(\'./Lenna.png\'), file.delay * 1000);\n        });\n    };\n\n    const folderChain = [{ id: \'gBt4z3\', name: \'My Pictures\', isDir: true }];\n    const files: FileData[] = [];\n    for (let i = 0; i < 20; ++i) {\n        const delay = i * 2;\n        files.push({\n            id: `image-${i}`,\n            name: `Delay - ${delay} seconds.jpg`,\n            delay: delay,\n        });\n    }\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div className="live-example" style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                thumbnailGenerator={thumbnailGenerator} // <----\n                enableDragAndDrop={true}\n                onFileAction={handleFileAction}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n',locationsMap:{"1-file-browser-basics-file-thumbnails--actions-example":{startLoc:{col:30,line:35},endLoc:{col:1,line:72},startBody:{col:30,line:35},endBody:{col:1,line:72}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport Promise from 'bluebird';\nimport {\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileData,\n    FileList,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './06-Thumbnails.md';\n\n\nexport default {\n    title: '1 File Browser basics|File thumbnails',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ActionsExample = () => {\n    const thumbnailGenerator = (file: FileData & { delay: number }) => {\n        return new Promise((resolve) => {\n            // Delay loading by `file.delay` seconds to simulate thumb generation.\n            setTimeout(() => resolve('./Lenna.png'), file.delay * 1000);\n        });\n    };\n\n    const folderChain = [{ id: 'gBt4z3', name: 'My Pictures', isDir: true }];\n    const files: FileData[] = [];\n    for (let i = 0; i < 20; ++i) {\n        const delay = i * 2;\n        files.push({\n            id: `image-${i}`,\n            name: `Delay - ${delay} seconds.jpg`,\n            delay: delay,\n        });\n    }\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                thumbnailGenerator={thumbnailGenerator} // <----\n                enableDragAndDrop={true}\n                onFileAction={handleFileAction}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"1-file-browser-basics-file-thumbnails--actions-example":{startLoc:{col:30,line:27},endLoc:{col:1,line:64},startBody:{col:30,line:27},endBody:{col:1,line:64}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"File thumbnails, woo!\n"})),_parameters)};var _06_Thumbnails_stories_ActionsExample=function ActionsExample(){for(var files=[],i=0;i<20;++i){var delay=2*i;files.push({id:"image-".concat(i),name:"Delay - ".concat(delay," seconds.jpg"),delay:delay})}return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"live-example",style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:files,folderChain:[{id:"gBt4z3",name:"My Pictures",isDir:!0}],thumbnailGenerator:function thumbnailGenerator(file){return new bluebird_default.a((function(resolve){setTimeout((function(){return resolve("./Lenna.png")}),1e3*file.delay)}))},enableDragAndDrop:!0,onFileAction:function handleFileAction(action,data){Object(story_helpers.b)({action:action,data:data})}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null)))};_06_Thumbnails_stories_ActionsExample.displayName="ActionsExample"},778:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"DragNDropExample",(function(){return _07_Drag_n_drop_stories_DragNDropExample}));__webpack_require__(30),__webpack_require__(65);var _parameters,src=__webpack_require__(23),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"1 File Browser basics|Enabling drag & drop",parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './07-Drag-n-drop.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Enabling drag & drop',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const DragNDropExample = () => {\\n    const folderChain = [\\n        { id: 'gBt4z3', name: 'My Documents', isDir: true },\\n        { id: 'gM5tTe', name: 'Other', isDir: true },\\n    ];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'yt43Ax', name: 'SCP-3930 Photos', isDir: true },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div className=\\\"live-example\\\" style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"1-file-browser-basics-enabling-drag-drop--drag-n-drop-example\":{\"startLoc\":{\"col\":32,\"line\":19},\"endLoc\":{\"col\":1,\"line\":46},\"startBody\":{\"col\":32,\"line\":19},\"endBody\":{\"col\":1,\"line\":46}}};\n    \nimport 'chonky/style/main.css';\n\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './07-Drag-n-drop.md';\n\n\nexport default {\n    title: '1 File Browser basics|Enabling drag & drop',\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './07-Drag-n-drop.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Enabling drag & drop',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const DragNDropExample = () => {\\n    const folderChain = [\\n        { id: 'gBt4z3', name: 'My Documents', isDir: true },\\n        { id: 'gM5tTe', name: 'Other', isDir: true },\\n    ];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'yt43Ax', name: 'SCP-3930 Photos', isDir: true },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div className=\\\"live-example\\\" style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"1-file-browser-basics-enabling-drag-drop--drag-n-drop-example\":{\"startLoc\":{\"col\":32,\"line\":19},\"endLoc\":{\"col\":1,\"line\":46},\"startBody\":{\"col\":32,\"line\":19},\"endBody\":{\"col\":1,\"line\":46}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const DragNDropExample = () => {\n    const folderChain = [\n        { id: 'gBt4z3', name: 'My Documents', isDir: true },\n        { id: 'gM5tTe', name: 'Other', isDir: true },\n    ];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'yt43Ax', name: 'SCP-3930 Photos', isDir: true },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"1-file-browser-basics-enabling-drag-drop--drag-n-drop-example":{startLoc:{col:32,line:27},endLoc:{col:1,line:54},startBody:{col:32,line:27},endBody:{col:1,line:54}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './07-Drag-n-drop.md';\n\n\nexport default {\n    title: '1 File Browser basics|Enabling drag & drop',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const DragNDropExample = () => {\n    const folderChain = [\n        { id: 'gBt4z3', name: 'My Documents', isDir: true },\n        { id: 'gM5tTe', name: 'Other', isDir: true },\n    ];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'yt43Ax', name: 'SCP-3930 Photos', isDir: true },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"1-file-browser-basics-enabling-drag-drop--drag-n-drop-example":{startLoc:{col:32,line:19},endLoc:{col:1,line:46},startBody:{col:32,line:19},endBody:{col:1,line:46}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"You might notice that drag & drop does not work out-of-the-box in Chonky. This is\nbecause Chonky uses [react-dnd](https://react-dnd.github.io/react-dnd/) library to\nhandle drag & drop, which is not turned by default.\n\nTo enable drag & drop, you will need to wrap your application root with the\n`<DndProvider>` component from react-dnd:\n\n```tsx\nimport React, { ReactDOM } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nReactDOM.render(\n    <DndProvider backend={HTML5Backend}>\n        <App />\n    </DndProvider>,\n    document.getElementById('app')\n);\n```\n\nNext, enable drag & drop in your `<FileBrowser>`:\n\n```tsx\n<FileBrowser\n    files={files}\n    enableDragAndDrop={true} // <----\n>\n    <FileToolbar />\n    <FileList />\n</FileBrowser>\n```\n\nOnce you do this, drag & drop should start working in all Chonky instances. FYI, you\ndon't have to use `HTML5Backend`, you can replace it with any backend you want. Consult\n[react-dnd docs](https://react-dnd.github.io/react-dnd/docs/overview) for details.\n"})),_parameters)};var _07_Drag_n_drop_stories_DragNDropExample=function DragNDropExample(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"live-example",style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[{id:"mHe4A1",name:"Meaning of life.txt",size:31415},{id:"yt43Ax",name:"SCP-3930 Photos",isDir:!0}],folderChain:[{id:"gBt4z3",name:"My Documents",isDir:!0},{id:"gM5tTe",name:"Other",isDir:!0}],onFileAction:function handleFileAction(action,data){Object(story_helpers.b)({action:action,data:data})},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null)))};_07_Drag_n_drop_stories_DragNDropExample.displayName="DragNDropExample"},779:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"InvalidPropsExample",(function(){return _01_Invalid_props_stories_InvalidPropsExample}));__webpack_require__(30);var _parameters,delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),src=(__webpack_require__(65),__webpack_require__(23)),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"2 File Browser examples|Passing invalid props",parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import React from 'react';\\n\\nimport 'chonky/style/main.css';\\nimport { FileBrowser, FileList, FileToolbar } from 'chonky';\\n\\nimport { createDocsObject } from '../story-helpers';\\n\\n// @ts-ignore\\n\\nimport markdown from './01-Invalid-props.md';\\n\\n\\nexport default {\\n    title: '2 File Browser examples|Passing invalid props',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const InvalidPropsExample = () => {\\n    const badFiles = [\\n        12312, // Not an object or `null`!\\n        {}, // Missing all required fields!\\n        { id: '2xf4' }, // Missing some required fields!\\n        { id: '2xf4', name: 'Some other file!' }, // Duplicate ID!\\n\\n        { id: 'xbAr', name: 'Good file.txt' }, // Good file!\\n    ];\\n    const badFolderChain = [\\n        12312, // Not an object or `null`!\\n        { id: 'bRyH', name: 'Good folder', isDir: true },\\n        { id: 'bMgR', name: 'Good folder #2', isDir: true },\\n    ];\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            {/* @ts-ignore */}\\n            <FileBrowser files={badFiles} folderChain={badFolderChain}>\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"2-file-browser-examples-passing-invalid-props--invalid-props-example\":{\"startLoc\":{\"col\":35,\"line\":20},\"endLoc\":{\"col\":1,\"line\":44},\"startBody\":{\"col\":35,\"line\":20},\"endBody\":{\"col\":1,\"line\":44}}};\n    \nimport React from 'react';\n\nimport 'chonky/style/main.css';\nimport { FileBrowser, FileList, FileToolbar } from 'chonky';\n\nimport { createDocsObject } from '../story-helpers';\n\n// @ts-ignore\n\nimport markdown from './01-Invalid-props.md';\n\n\nexport default {\n    title: '2 File Browser examples|Passing invalid props',\n    parameters: {\"storySource\":{\"source\":\"import React from 'react';\\n\\nimport 'chonky/style/main.css';\\nimport { FileBrowser, FileList, FileToolbar } from 'chonky';\\n\\nimport { createDocsObject } from '../story-helpers';\\n\\n// @ts-ignore\\n\\nimport markdown from './01-Invalid-props.md';\\n\\n\\nexport default {\\n    title: '2 File Browser examples|Passing invalid props',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const InvalidPropsExample = () => {\\n    const badFiles = [\\n        12312, // Not an object or `null`!\\n        {}, // Missing all required fields!\\n        { id: '2xf4' }, // Missing some required fields!\\n        { id: '2xf4', name: 'Some other file!' }, // Duplicate ID!\\n\\n        { id: 'xbAr', name: 'Good file.txt' }, // Good file!\\n    ];\\n    const badFolderChain = [\\n        12312, // Not an object or `null`!\\n        { id: 'bRyH', name: 'Good folder', isDir: true },\\n        { id: 'bMgR', name: 'Good folder #2', isDir: true },\\n    ];\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            {/* @ts-ignore */}\\n            <FileBrowser files={badFiles} folderChain={badFolderChain}>\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"2-file-browser-examples-passing-invalid-props--invalid-props-example\":{\"startLoc\":{\"col\":35,\"line\":20},\"endLoc\":{\"col\":1,\"line\":44},\"startBody\":{\"col\":35,\"line\":20},\"endBody\":{\"col\":1,\"line\":44}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const InvalidPropsExample = () => {\n    const badFiles = [\n        12312, // Not an object or `null`!\n        {}, // Missing all required fields!\n        { id: '2xf4' }, // Missing some required fields!\n        { id: '2xf4', name: 'Some other file!' }, // Duplicate ID!\n\n        { id: 'xbAr', name: 'Good file.txt' }, // Good file!\n    ];\n    const badFolderChain = [\n        12312, // Not an object or `null`!\n        { id: 'bRyH', name: 'Good folder', isDir: true },\n        { id: 'bMgR', name: 'Good folder #2', isDir: true },\n    ];\n\n    return (\n        <div style={{ height: 500 }}>\n            {/* @ts-ignore */}\n            <FileBrowser files={badFiles} folderChain={badFolderChain}>\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"2-file-browser-examples-passing-invalid-props--invalid-props-example":{startLoc:{col:35,line:28},endLoc:{col:1,line:52},startBody:{col:35,line:28},endBody:{col:1,line:52}}}}},_defineProperty(_parameters,"storySource",{source:"import React from 'react';\n\nimport 'chonky/style/main.css';\nimport { FileBrowser, FileList, FileToolbar } from 'chonky';\n\nimport { createDocsObject } from '../story-helpers';\n\n// @ts-ignore\n\nimport markdown from './01-Invalid-props.md';\n\n\nexport default {\n    title: '2 File Browser examples|Passing invalid props',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const InvalidPropsExample = () => {\n    const badFiles = [\n        12312, // Not an object or `null`!\n        {}, // Missing all required fields!\n        { id: '2xf4' }, // Missing some required fields!\n        { id: '2xf4', name: 'Some other file!' }, // Duplicate ID!\n\n        { id: 'xbAr', name: 'Good file.txt' }, // Good file!\n    ];\n    const badFolderChain = [\n        12312, // Not an object or `null`!\n        { id: 'bRyH', name: 'Good folder', isDir: true },\n        { id: 'bMgR', name: 'Good folder #2', isDir: true },\n    ];\n\n    return (\n        <div style={{ height: 500 }}>\n            {/* @ts-ignore */}\n            <FileBrowser files={badFiles} folderChain={badFolderChain}>\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"2-file-browser-examples-passing-invalid-props--invalid-props-example":{startLoc:{col:35,line:20},endLoc:{col:1,line:44},startBody:{col:35,line:20},endBody:{col:1,line:44}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"Where possible, Chonky tries to report errors when they arise. For example,\n`FileBrowser` component expects its `files` prop to be an array. If you pass some\ninvalid value instead, e.g. `null`, you will see an error component being rendered\ninstead of the file browser. Same error will also be logged to console.\n"})),_parameters)};var _01_Invalid_props_stories_InvalidPropsExample=function InvalidPropsExample(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[12312,{},{id:"2xf4"},{id:"2xf4",name:"Some other file!"},{id:"xbAr",name:"Good file.txt"}],folderChain:[12312,{id:"bRyH",name:"Good folder",isDir:!0},{id:"bMgR",name:"Good folder #2",isDir:!0}]},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null)))};_01_Invalid_props_stories_InvalidPropsExample.displayName="InvalidPropsExample"},780:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"VirtualizationExample",(function(){return _02_Virtualization_stories_VirtualizationExample}));__webpack_require__(30);var _parameters,delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),src=(__webpack_require__(65),__webpack_require__(23)),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"2 File Browser examples|Virtualization with 10,000 files",parameters:(_parameters={storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import React from \'react\';\\n\\nimport \'chonky/style/main.css\';\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from \'chonky\';\\n\\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\\n\\n// @ts-ignore\\n\\nimport markdown from \'./02-Virtualization.md\';\\n\\n\\nexport default {\\n    title: \'2 File Browser examples|Virtualization with 10,000 files\',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const VirtualizationExample = () => {\\n    const files = [];\\n\\n    for (let i = 0; i < 10000; ++i) {\\n        files.push({\\n            id: `file-${i}`,\\n            name: i ? `Chrome (${i}).exe` : \'Chrome.exe\',\\n        });\\n    }\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"2-file-browser-examples-virtualization-with-10-000-files--virtualization-example":{"startLoc":{"col":37,"line":20},"endLoc":{"col":1,"line":46},"startBody":{"col":37,"line":20},"endBody":{"col":1,"line":46}}};\n    \nimport React from \'react\';\n\nimport \'chonky/style/main.css\';\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from \'chonky\';\n\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\n\n// @ts-ignore\n\nimport markdown from \'./02-Virtualization.md\';\n\n\nexport default {\n    title: \'2 File Browser examples|Virtualization with 10,000 files\',\n    parameters: {"storySource":{"source":"import React from \'react\';\\n\\nimport \'chonky/style/main.css\';\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from \'chonky\';\\n\\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\\n\\n// @ts-ignore\\n\\nimport markdown from \'./02-Virtualization.md\';\\n\\n\\nexport default {\\n    title: \'2 File Browser examples|Virtualization with 10,000 files\',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const VirtualizationExample = () => {\\n    const files = [];\\n\\n    for (let i = 0; i < 10000; ++i) {\\n        files.push({\\n            id: `file-${i}`,\\n            name: i ? `Chrome (${i}).exe` : \'Chrome.exe\',\\n        });\\n    }\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n","locationsMap":{"2-file-browser-examples-virtualization-with-10-000-files--virtualization-example":{"startLoc":{"col":37,"line":20},"endLoc":{"col":1,"line":46},"startBody":{"col":37,"line":20},"endBody":{"col":1,"line":46}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const VirtualizationExample = () => {\n    const files = [];\n\n    for (let i = 0; i < 10000; ++i) {\n        files.push({\n            id: `file-${i}`,\n            name: i ? `Chrome (${i}).exe` : \'Chrome.exe\',\n        });\n    }\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n',locationsMap:{"2-file-browser-examples-virtualization-with-10-000-files--virtualization-example":{startLoc:{col:37,line:28},endLoc:{col:1,line:54},startBody:{col:37,line:28},endBody:{col:1,line:54}}}}},_defineProperty(_parameters,"storySource",{source:"import React from 'react';\n\nimport 'chonky/style/main.css';\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n\n// @ts-ignore\n\nimport markdown from './02-Virtualization.md';\n\n\nexport default {\n    title: '2 File Browser examples|Virtualization with 10,000 files',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const VirtualizationExample = () => {\n    const files = [];\n\n    for (let i = 0; i < 10000; ++i) {\n        files.push({\n            id: `file-${i}`,\n            name: i ? `Chrome (${i}).exe` : 'Chrome.exe',\n        });\n    }\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"2-file-browser-examples-virtualization-with-10-000-files--virtualization-example":{startLoc:{col:37,line:20},endLoc:{col:1,line:46},startBody:{col:37,line:20},endBody:{col:1,line:46}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"This component uses [`react-virtualized`](https://bvaughn.github.io/react-virtualized/).\n"})),_parameters)};var _02_Virtualization_stories_VirtualizationExample=function VirtualizationExample(){for(var files=[],i=0;i<1e4;++i)files.push({id:"file-".concat(i),name:i?"Chrome (".concat(i,").exe"):"Chrome.exe"});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:files,onFileAction:function handleFileAction(action,data){Object(story_helpers.b)({action:action,data:data})},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null)))};_02_Virtualization_stories_VirtualizationExample.displayName="VirtualizationExample"},79:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("WNMA")},81:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("1IsZ")},82:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("vbDw")},83:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("y2Ah")},9:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("7x/C")},95:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("JtPf")},96:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ax0f")},97:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("tVqn")}},[[360,1,2]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3QvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbi5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vdXRpbC1kZXByZWNhdGUvYnJvd3Nlci5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvd2ViLnRpbWVycy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaXMtYXJyYXkuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vd2VicGFjay9idWlsZGluL21vZHVsZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuY3JlYXRlLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5jb25zdHJ1Y3QuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5ldmVyeS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnNldC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9xcy9saWIvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3Rvci5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvd2ViLnVybC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3IuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcHJvY2Vzcy9icm93c2VyLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJzdG9yeWJvb2tfZG9jc19kbGxcIiIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pdGVyYXRvci5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1zdHJpbmcuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvbWUuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLmJpbmQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLm1hcC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9AZW1vdGlvbi9jb3JlL2Rpc3QvY29yZS5icm93c2VyLmVzbS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmNvbnN0cnVjdG9yLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vLy4vc3JjL3R5cGVzL2ljb25zLnR5cGVzLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlsL2xvZ2dlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbC92YWxpZGF0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlsL2ZpbGUtaGVscGVyLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlsL2ZpbGUtaWNvbi1oZWxwZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZXh0ZXJuYWwvQ2hvbmt5SWNvbi50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZXh0ZXJuYWwvVGV4dFBsYWNlaG9sZGVyLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9pbnRlcm5hbC9GaWxlVGh1bWJuYWlsLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9pbnRlcm5hbC9CYXNlRmlsZUVudHJ5LnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvdHlwZXMvc3BlY2lhbC1hY3Rpb25zLnR5cGVzLnRzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2ludGVybmFsL0Jhc2VGaWxlRW50cnktaG9va3MudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2ludGVybmFsL0NsaWNrYWJsZUZpbGVFbnRyeS1ob29rcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaW50ZXJuYWwvQ2xpY2thYmxlV3JhcHBlci1ob29rcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaW50ZXJuYWwvQ2xpY2thYmxlV3JhcHBlci50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaW50ZXJuYWwvQ2xpY2thYmxlRmlsZUVudHJ5LnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9pbnRlcm5hbC9EbkRGaWxlRW50cnkudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2V4dGVybmFsL0ZpbGVMaXN0LXZpcnR1YWxpemF0aW9uLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbC9jb25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWwvc2VsZWN0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlsL2NvbnRleHQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWwvZmlsZS1hY3Rpb25zLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlsL2hvb2tzLWhlbHBlcnMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWwvc2VhcmNoLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlsL3NwZWNpYWwtYWN0aW9ucy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9pbnRlcm5hbC9Db250ZXh0Q29tcG9zZXIudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2ludGVybmFsL0RuREZpbGVMaXN0RHJhZ0xheWVyLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9pbnRlcm5hbC9FcnJvck1lc3NhZ2UudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2V4dGVybmFsL0ZpbGVCcm93c2VyLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9leHRlcm5hbC9GaWxlVG9vbGJhci1ob29rcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZXh0ZXJuYWwvVG9vbGJhckJ1dHRvbi1ob29rcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZXh0ZXJuYWwvRHJvcGRvd25CdXR0b24udHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2V4dGVybmFsL1Rvb2xiYXJCdXR0b24udHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2V4dGVybmFsL0Ryb3Bkb3duLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9leHRlcm5hbC9Ub29sYmFyQnV0dG9uR3JvdXAudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2V4dGVybmFsL0ZpbGVUb29sYmFyLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9leHRlcm5hbC9GaWxlU2VhcmNoLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9leHRlcm5hbC9GaWxlTGlzdC50c3giLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL21hcmtkb3duLXRvLWpzeC9kaXN0L2VzbS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZyb20uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzL3N0b3J5LWhlbHBlcnMudHN4Iiwid2VicGFjazovLy8uL3N0b3JpZXMvVW5zdGFibGUtd2FybmluZy5tZCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzL0xpdmUtZXhhbXBsZXMubWQiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2dsb2JhbC93aW5kb3cuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9haXJibmItanMtc2hpbXMvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9wYXRoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vLy4vLnN0b3J5Ym9vay9zdG9yeWJvb2staW5pdC1mcmFtZXdvcmstZW50cnkuanMiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy53ZWFrLW1hcC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9sb2Rhc2gvbWVyZ2VXaXRoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zb3J0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9pcy1vYmplY3QuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vdGVsZWpzb24vZGlzdC9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9wb2xpc2hlZC9kaXN0L3BvbGlzaGVkLmVzbS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9AZW1vdGlvbi9zdHlsZWQvZGlzdC9zdHlsZWQuYnJvd3Nlci5lc20uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vZW1vdGlvbi10aGVtaW5nL2Rpc3QvZW1vdGlvbi10aGVtaW5nLmJyb3dzZXIuZXNtLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL0BlbW90aW9uL2lzLXByb3AtdmFsaWQvZGlzdC9pcy1wcm9wLXZhbGlkLmJyb3dzZXIuZXNtLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2RlZXAtb2JqZWN0LWRpZmYvZGlzdC9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXIvZGlzdC9janMvbGFuZ3VhZ2VzL3ByaXNtL2pzeC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXIvZGlzdC9janMvbGFuZ3VhZ2VzL3ByaXNtL2Jhc2guanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvY2pzL2xhbmd1YWdlcy9wcmlzbS9jc3MuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvY2pzL2xhbmd1YWdlcy9wcmlzbS9qc29uLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3JlYWN0LXN5bnRheC1oaWdobGlnaHRlci9kaXN0L2Nqcy9sYW5ndWFnZXMvcHJpc20vbWFya3VwLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3JlYWN0LXN5bnRheC1oaWdobGlnaHRlci9kaXN0L2Nqcy9sYW5ndWFnZXMvcHJpc20vbWFya2Rvd24uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvY2pzL2xhbmd1YWdlcy9wcmlzbS95YW1sLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3JlYWN0LXN5bnRheC1oaWdobGlnaHRlci9kaXN0L2Nqcy9sYW5ndWFnZXMvcHJpc20vdHN4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3JlYWN0LXN5bnRheC1oaWdobGlnaHRlci9kaXN0L2Nqcy9sYW5ndWFnZXMvcHJpc20vdHlwZXNjcmlwdC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXIvZGlzdC9lc20vaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvY2pzL2NyZWF0ZS1lbGVtZW50LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL292ZXJsYXlzY3JvbGxiYXJzL2pzL092ZXJsYXlTY3JvbGxiYXJzLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc21hbGwuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydGllcy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC10ZXh0YXJlYS1hdXRvc2l6ZS9kaXN0L3JlYWN0LXRleHRhcmVhLWF1dG9zaXplLmJyb3dzZXIuZXNtLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3JlYWN0LXBvcHBlci10b29sdGlwL2Rpc3QvZXNtL3JlYWN0LXBvcHBlci10b29sdGlwLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3JlYWN0LWNvbG9yL2xpYi9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMucGFyc2UtaW50LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuaXMtbmFuLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5wYXJzZS1mbG9hdC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuYXNzaWduLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9mYXN0LWRlZXAtZXF1YWwvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5mcmVlemUuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9vYmplY3QtYXNzaWduL2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbG9kYXNoL19hcnJheU1hcC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9sb2Rhc2gvX2Jhc2VJdGVyYXRlZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9sb2Rhc2gvX2Jhc2VQaWNrQnkuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbG9kYXNoL19nZXRBbGxLZXlzSW4uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3QtaXMvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vdHMtZGVkZW50L2Rpc3QvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvdG8tbGVuZ3RoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL25vdC1hLXJlZ2V4cC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2xvZGFzaC9pc1BsYWluT2JqZWN0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2xvZGFzaC9pc0Z1bmN0aW9uLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2xvZGFzaC9pc1N0cmluZy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC1saWZlY3ljbGVzLWNvbXBhdC9yZWFjdC1saWZlY3ljbGVzLWNvbXBhdC5lcy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9wcm9wLXR5cGVzL2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL0BzdG9yeWJvb2svY3NmL2Rpc3QvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vLi8uc3Rvcnlib29rL3ByZXZpZXcuanMtZ2VuZXJhdGVkLWNvbmZpZy1lbnRyeS5qcyIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvb3duLWtleXMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy8uLy5zdG9yeWJvb2svZ2VuZXJhdGVkLXN0b3JpZXMtZW50cnkuanMiLCJ3ZWJwYWNrOi8vL1xcLikuKiIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzLzAwLVdlbGNvbWUvMDEtV2VsY29tZS5zdG9yaWVzLm1keCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzLzAwLVdlbGNvbWUvMDItRmVhdHVyZXMuc3Rvcmllcy5tZHgiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wMC1XZWxjb21lLzAzLUluc3RhbGxhdGlvbi5zdG9yaWVzLm1keCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzLzAwLVdlbGNvbWUvMDQtSW1tdXRhYmlsaXR5LnN0b3JpZXMubWR4Iiwid2VicGFjazovLy8uL3N0eWxlL21haW4uY3NzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmJvbGQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vd2VicGFjay9idWlsZGluL2dsb2JhbC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy8uL3N0eWxlL21haW4uY3NzPzdjYmIiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy9DaG9ua3ktaGVhZGVyLm1keCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZW50cmllcy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc2VhcmNoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL3RvLWludGVnZXIuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktcmVkdWNlLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy9zdG9yeWJvb2suY3NzPzdhMGMiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy9zdG9yeWJvb2suY3NzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC1kb20vaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzLzAzLUFQSS1SZWZlcmVuY2UvMDItQnVpbHQtaW4tYWN0aW9ucy5zdG9yaWVzLm1keCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzLzAxLUZpbGUtQnJvd3Nlci1iYXNpY3MvMDEtQ29tcG9uZW50LWhpZXJhcmNoeS5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzLzAxLUZpbGUtQnJvd3Nlci1iYXNpY3MvMDEtQ29tcG9uZW50LWhpZXJhcmNoeS5tZCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzLzAxLUZpbGUtQnJvd3Nlci1iYXNpY3MvMDItRGlzcGxheWluZy1maWxlcy5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzLzAxLUZpbGUtQnJvd3Nlci1iYXNpY3MvMDItRGlzcGxheWluZy1maWxlcy5tZCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzLzAxLUZpbGUtQnJvd3Nlci1iYXNpY3MvMDMtU3BlY2lmeWluZy1mb2xkZXIuc3Rvcmllcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wMS1GaWxlLUJyb3dzZXItYmFzaWNzLzAzLVNwZWNpZnlpbmctZm9sZGVyLm1kIiwid2VicGFjazovLy8uL3N0b3JpZXMvMDEtRmlsZS1Ccm93c2VyLWJhc2ljcy8wNC1BY3Rpb25zLnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3N0b3JpZXMvMDEtRmlsZS1Ccm93c2VyLWJhc2ljcy8wNC1BY3Rpb25zLm1kIiwid2VicGFjazovLy8uL3N0b3JpZXMvMDEtRmlsZS1Ccm93c2VyLWJhc2ljcy8wNS1DdXN0b20tYWN0aW9ucy5zdG9yaWVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzLzAxLUZpbGUtQnJvd3Nlci1iYXNpY3MvMDUtQ3VzdG9tLWFjdGlvbnMubWQiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wMS1GaWxlLUJyb3dzZXItYmFzaWNzLzA2LVRodW1ibmFpbHMuc3Rvcmllcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wMS1GaWxlLUJyb3dzZXItYmFzaWNzLzA2LVRodW1ibmFpbHMubWQiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wMS1GaWxlLUJyb3dzZXItYmFzaWNzLzA3LURyYWctbi1kcm9wLnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3N0b3JpZXMvMDEtRmlsZS1Ccm93c2VyLWJhc2ljcy8wNy1EcmFnLW4tZHJvcC5tZCIsIndlYnBhY2s6Ly8vLi9zdG9yaWVzLzAyLUZpbGUtQnJvd3Nlci1hZHZhbmNlZC8wMS1JbnZhbGlkLXByb3BzLnN0b3JpZXMudHN4Iiwid2VicGFjazovLy8uL3N0b3JpZXMvMDItRmlsZS1Ccm93c2VyLWFkdmFuY2VkLzAxLUludmFsaWQtcHJvcHMubWQiLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wMi1GaWxlLUJyb3dzZXItYWR2YW5jZWQvMDItVmlydHVhbGl6YXRpb24uc3Rvcmllcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3Rvcmllcy8wMi1GaWxlLUJyb3dzZXItYWR2YW5jZWQvMDItVmlydHVhbGl6YXRpb24ubWQiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2guanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC52YWx1ZXMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbWVtb2l6ZXJpZmljL21lbW9pemVyaWZpYy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9sb2Rhc2gvbWFwVmFsdWVzLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL2V4cG9ydC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsInN0b3J5Ym9va19kb2NzX2RsbCIsIkNob25reUljb25OYW1lIiwiTG9nZ2VyIiwiYXJncyIsImNvbnNvbGUiLCJlcnJvciIsImJ1bGxldHMiLCJqb2luIiwiaXNQbGFpbk9iamVjdCIsInZhbHVlIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwidXNlQ2xlYW5GaWxlQXJyYXkiLCJmaWxlQXJyYXkiLCJhbGxvd051bGwiLCJjbGVhbkZpbGVBcnJheSIsIndhcm5pbmdNZXNzYWdlIiwid2FybmluZ0J1bGxldHMiLCJBcnJheSIsImlzQXJyYXkiLCJpbmRpY2VzVG9CZVJlbW92ZWQiLCJTZXQiLCJzZWVuSWRzIiwiZHVwbGljYXRlSWRTZXQiLCJtaXNzaW5nSWRJbmRpY2VzIiwibWlzc2luZ05hbWVJbmRpY2VzIiwiaW52YWxpZFR5cGVJbmRpY2VzIiwiaSIsImxlbmd0aCIsImZpbGUiLCJpZCIsImFkZCIsIm5hbWUiLCJwdXNoIiwic2l6ZSIsImZyb20iLCJmaWx0ZXIiLCJpbmRleCIsImhhcyIsIkZpbGVIZWxwZXIiLCJvcGVuYWJsZSIsInNlbGVjdGFibGUiLCJkcmFnZ2FibGUiLCJpc0RpciIsImRyb3BwYWJsZSIsImdldEljb25UcmllIiwibWVtb2l6ZSIsImNvbG91ckluZGV4IiwiSWNvbnNUb0V4dGVuc2lvbnMiLCJsaWNlbnNlIiwiY29uZmlnIiwibW9kZWwiLCJkYXRhYmFzZSIsInRleHQiLCJhcmNoaXZlIiwiY3N2IiwiaW1hZ2UiLCJJbWFnZUV4dGVuc2lvbnMiLCJwZGYiLCJ3b3JkIiwidmlkZW8iLCJWaWRlb0V4dGVuc2lvbnMiLCJjb2RlIiwiaW5mbyIsImtleSIsImxvY2siLCJtdXNpYyIsIkF1ZGlvRXh0ZW5zaW9ucyIsImZsYXNoIiwidGVybWluYWwiLCJ0cmFzaCIsImF1dGhvcnMiLCJhZG9iZSIsImdpdCIsImxpbnV4Iiwid2luZG93cyIsIm5vZGVqcyIsInBocCIsInB5dGhvbiIsInVidW50dSIsImV4YWN0VHJpZSIsIkV4YWN0VHJpZSIsImljb24iLCJleHRlbnNpb25zIiwiaWNvbkRhdGEiLCJjb2xvckNvZGUiLCJDb2xvcnNMaWdodCIsInB1dCIsIkNvbG9yc0RhcmsiLCJJY29uTWFwIiwibG9hZGluZyIsImZhQ2lyY2xlTm90Y2giLCJkcm9wZG93biIsImZhQ2hldnJvbkRvd24iLCJkbmREcmFnZ2luZyIsImZhRmlzdFJhaXNlZCIsImRuZENhbkRyb3AiLCJmYUFycm93RG93biIsImRuZENhbm5vdERyb3AiLCJmYVRpbWVzIiwib3BlbkZpbGVzIiwiZmFCb3hPcGVuIiwib3BlblBhcmVudEZvbGRlciIsImZhTGV2ZWxVcEFsdCIsInNlYXJjaCIsImZhU2VhcmNoIiwiY2hlY2tBY3RpdmUiLCJmYUNoZWNrQ2lyY2xlIiwiY2hlY2tJbmFjdGl2ZSIsImZhQ2lyY2xlIiwiZGVzYyIsImFzYyIsImZhQXJyb3dVcCIsImxpc3QiLCJmYUxpc3QiLCJmb2xkZXIiLCJmYUZvbGRlciIsImZvbGRlckNyZWF0ZSIsImZhRm9sZGVyUGx1cyIsImZvbGRlck9wZW4iLCJmYUZvbGRlck9wZW4iLCJzbWFsbFRodW1ibmFpbCIsImZhVGgiLCJsYXJnZVRodW1ibmFpbCIsImZhVGhMYXJnZSIsImZvbGRlckNoYWluU2VwYXJhdG9yIiwiZmFDaGV2cm9uUmlnaHQiLCJkb3dubG9hZCIsImZhRG93bmxvYWQiLCJ1cGxvYWQiLCJmYVVwbG9hZCIsImZhVHJhc2giLCJmYWxsYmFja0ljb24iLCJmYUV4Y2xhbWF0aW9uVHJpYW5nbGUiLCJzeW1saW5rIiwiZmFFeHRlcm5hbExpbmtBbHQiLCJoaWRkZW4iLCJmYUV5ZVNsYXNoIiwiZmFGaWxlIiwiZmFCYWxhbmNlU2NhbGUiLCJmYUZpbGVDb2RlIiwiZmFDb2dzIiwiZmFDdWJlcyIsImZhRGF0YWJhc2UiLCJmYUZpbGVBbHQiLCJmYUZpbGVBcmNoaXZlIiwiZmFGaWxlRXhjZWwiLCJmYUZpbGVJbWFnZSIsImZhRmlsZVBkZiIsImZhRmlsZVdvcmQiLCJmYUZpbG0iLCJmYUluZm9DaXJjbGUiLCJmYUtleSIsImZhTG9jayIsImZhTXVzaWMiLCJmYVJ1bm5pbmciLCJmYVRlcm1pbmFsIiwiZmFVc2VycyIsImZhQWRvYmUiLCJmYUdpdEFsdCIsImZhTGludXgiLCJmYVdpbmRvd3MiLCJmYU5vZGVKcyIsImZhUGhwIiwiZmFQeXRob24iLCJmYVVidW50dSIsIkNob25reUljb25GQSIsIlJlYWN0IiwibWVtbyIsInByb3BzIiwiZmFQcm9wcyIsIlRleHRQbGFjZWhvbGRlciIsInBsYWNlaG9sZGVyTGVuZ3RoIiwiZ2V0UmFuZG9tSW50IiwibWluIiwibWF4IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwibWluTGVuZ3RoIiwibWF4TGVuZ3RoIiwid2hpdGVzcGFjZSIsInJlcGVhdCIsImNsYXNzTmFtZSIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiX19odG1sIiwiRmlsZVRodW1ibmFpbCIsInRodW1ibmFpbFVybCIsInRodW1ibmFpbFN0eWxlIiwiYmFja2dyb3VuZEltYWdlIiwiYyIsInN0eWxlIiwiU3BlY2lhbEFjdGlvbiIsIkJhc2VGaWxlRW50cnkiLCJzZWxlY3RlZCIsImRuZElzRHJhZ2dpbmciLCJkbmRJc092ZXIiLCJ1c2VTdGF0ZSIsInNldFRodW1ibmFpbFVybCIsInRodW1ibmFpbExvYWRpbmciLCJ1c2VUaHVtYm5haWxVcmwiLCJzZXRUaHVtYm5haWxMb2FkaW5nIiwidGh1bWJuYWlsR2VuZXJhdG9yIiwidXNlQ29udGV4dCIsIkNob25reVRodW1ibmFpbEdlbmVyYXRvckNvbnRleHQiLCJkZXBzIiwidXNlRWZmZWN0IiwibG9hZGluZ0NhbmNlbGxlZCIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsIm1lc3NhZ2UiLCJ1c2VJY29uRGF0YSIsInVzZU1lbW8iLCJtYXRjaCIsImdldFdpdGhDaGVja3BvaW50cyIsImJhY2tncm91bmRDb2xvciIsImljb25TcGluIiwiZG5kSWNvbiIsInVzZURuZEljb24iLCJpc0RyYWdnaW5nIiwiaXNPdmVyIiwiY2FuRHJvcCIsInNwaW4iLCJ1c2VGaWxlQ2xpY2tIYW5kbGVycyIsImRpc3BhdGNoU3BlY2lhbEFjdGlvbiIsIkNob25reURpc3BhdGNoU3BlY2lhbEFjdGlvbkNvbnRleHQiLCJoYW5kbGVyRGVwcyIsIm9uTW91c2VDbGljayIsInVzZUNhbGxiYWNrIiwiZXZlbnQiLCJjbGlja1R5cGUiLCJhY3Rpb25OYW1lIiwiTW91c2VDbGlja0ZpbGUiLCJhbHRLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJvbktleWJvYXJkQ2xpY2siLCJLZXlib2FyZENsaWNrRmlsZSIsImVudGVyS2V5Iiwic3BhY2VLZXkiLCJvblNpbmdsZUNsaWNrIiwib25Eb3VibGVDbGljayIsInVzZUtleURvd25IYW5kbGVyIiwia2V5Ym9hcmRDbGlja0V2ZW50IiwibmF0aXZlRXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsIkNsaWNrYWJsZVdyYXBwZXIiLCJjaGlsZHJlbiIsIldyYXBwZXJUYWciLCJ3cmFwcGVyVGFnIiwicGFzc3Rocm91Z2hQcm9wcyIsImhhbmRsZUNsaWNrIiwidXNlQ2xpY2tIYW5kbGVyIiwiZG91YmxlQ2xpY2tEZWxheSIsIkNob25reURvdWJsZUNsaWNrRGVsYXlDb250ZXh0IiwiY291bnRlciIsImNsaWNrQ291bnQiLCJjbGlja1RpbWVvdXQiLCJtb3VzZUNsaWNrRXZlbnQiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiaGFuZGxlS2V5RG93biIsImNvbXBQcm9wcyIsIm9uQ2xpY2siLCJvbktleURvd24iLCJ0YWJJbmRleCIsIm1lcmdlZFByb3BzIiwiQ2xpY2thYmxlRmlsZUVudHJ5IiwiZmlsZUNsaWNrSGFuZGxlcnMiLCJ3cmFwcGVyUHJvcHMiLCJpc0NsaWNrYWJsZSIsInVuZGVmaW5lZCIsIkRuREZpbGVFbnRyeSIsImNhbkRyYWciLCJpc0RyYWdnYWJsZSIsIm9uRHJhZ1N0YXJ0IiwiRHJhZ05Ecm9wU3RhcnQiLCJkcmFnU291cmNlIiwib25EcmFnRW5kIiwiaXRlbSIsIm1vbml0b3IiLCJkcm9wUmVzdWx0IiwiZ2V0RHJvcFJlc3VsdCIsImRyb3BUYXJnZXQiLCJEcmFnTkRyb3BFbmQiLCJkcm9wRWZmZWN0Iiwib25Ecm9wIiwiaXNTYW1lRmlsZSIsImlzRHJvcHBhYmxlIiwidXNlRHJhZyIsInR5cGUiLCJiZWdpbiIsImVuZCIsImNvbGxlY3QiLCJkcmFnIiwicHJldmlldyIsInVzZURyb3AiLCJhY2NlcHQiLCJkcm9wIiwiZ2V0RW1wdHlJbWFnZSIsImNhcHR1cmVEcmFnZ2luZ1N0YXRlIiwicmVmIiwiRGVmYXVsdEVudHJ5U2l6ZSIsIndpZHRoIiwiaGVpZ2h0IiwidXNlRW50cnlSZW5kZXJlciIsImZpbGVzIiwic2VsZWN0aW9uIiwiQ2hvbmt5U2VsZWN0aW9uQ29udGV4dCIsImVuYWJsZURyYWdBbmREcm9wIiwiQ2hvbmt5RW5hYmxlRHJhZ0FuZERyb3BDb250ZXh0IiwidmlydHVhbEtleSIsInBhcmVudCIsImd1dHRlclNpemUiLCJsYXN0Um93IiwibGFzdENvbHVtbiIsImVudHJ5UHJvcHMiLCJkaXNwbGF5SW5kZXgiLCJmaWxlRW50cnlDb21wb25lbnQiLCJub0NvbnRlbnRSZW5kZXJlciIsInBsYWNlaG9sZGVyUHJvcHMiLCJ1c2VHcmlkUmVuZGVyZXIiLCJlbnRyeVNpemUiLCJlbnRyeVJlbmRlcmVyIiwidGh1bWJzR3JpZFJlZiIsImZpbGxQYXJlbnRDb250YWluZXIiLCJpc01vYmlsZSIsImlzTW9iaWxlRGV2aWNlIiwid2luZG93Iiwib3JpZW50YXRpb24iLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpbmRleE9mIiwiZ3V0dGVyIiwiY29sdW1uQ291bnRGbG9hdCIsImNvbHVtbkNvdW50Iiwicm93Q291bnQiLCJjZWlsIiwibWluSGVpZ2h0IiwiY2VsbFJlbmRlcmVyIiwiZGF0YSIsInJvd0luZGV4IiwiY29sdW1uSW5kZXgiLCJjb2x1bW5XaWR0aCIsImdldENvbFdpZHRoIiwicm93SGVpZ2h0IiwiZ2V0Um93SGVpZ2h0Iiwib3ZlcnNjYW5Sb3dDb3VudCIsImNvbnRhaW5lclN0eWxlIiwiYXV0b0hlaWdodCIsIklOVEVOVElPTkFMX0VNUFRZX0RFUFMiLCJOT09QX0ZVTkNUSU9OIiwidXNlU2VsZWN0aW9uTW9kaWZpZXJzIiwiZGlzYWJsZVNlbGVjdGlvbiIsInNldFNlbGVjdGlvbiIsInNlbGVjdEZpbGVzIiwiZmlsZUlkcyIsInJlc2V0IiwibmV3U2VsZWN0aW9uIiwidG9nZ2xlU2VsZWN0aW9uIiwiZmlsZUlkIiwiZXhjbHVzaXZlIiwiY2xlYXJTZWxlY3Rpb24iLCJTZWxlY3Rpb25IZWxwZXIiLCJzZWxlY3RlZEZpbGVzIiwiaXNTZWxlY3RhYmxlIiwiZmlsdGVycyIsInJlZHVjZSIsInByZXZGaWxlcyIsImdldFNlbGVjdGVkRmlsZXMiLCJTZWxlY3Rpb25VdGlsIiwidGhpcyIsInByb3RlY3RlZFVwZGF0ZSIsImdldFNlbGVjdGlvblNpemUiLCJpc1NlbGVjdGVkIiwiVXBkYXRlYWJsZVNlbGVjdGlvblV0aWwiLCJDaG9ua3lJbnN0YW5jZUlkQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJDaG9ua3lGaWxlc0NvbnRleHQiLCJDaG9ua3lGb2xkZXJDaGFpbkNvbnRleHQiLCJDaG9ua3lTZWxlY3Rpb25TaXplQ29udGV4dCIsIkNob25reVNlbGVjdGlvblV0aWxDb250ZXh0IiwiQ2hvbmt5RmlsZUFjdGlvbnNDb250ZXh0IiwiQ2hvbmt5RGlzcGF0Y2hGaWxlQWN0aW9uQ29udGV4dCIsIkNob25reVNlYXJjaEJhckVuYWJsZWRDb250ZXh0IiwiQ2hvbmt5U2V0U2VhcmNoQmFyRW5hYmxlZENvbnRleHQiLCJDaG9ua3lTZWFyY2hCYXJWaXNpYmxlQ29udGV4dCIsIkNob25reVNldFNlYXJjaEJhclZpc2libGVDb250ZXh0IiwiQ2hvbmt5U2VhcmNoRmlsdGVyQ29udGV4dCIsIkNob25reVNldFNlYXJjaEZpbHRlckNvbnRleHQiLCJDaG9ua3lGaWxlRW50cnlTaXplQ29udGV4dCIsIkNob25reURpc2FibGVTZWxlY3Rpb25Db250ZXh0IiwiQ2hvbmt5QWN0aW9ucyIsIk1vdmVGaWxlc1RvIiwiRHVwbGljYXRlRmlsZXNUbyIsIk9wZW5QYXJlbnRGb2xkZXIiLCJyZXF1aXJlc1BhcmVudEZvbGRlciIsImZpbGVGaWx0ZXIiLCJpc09wZW5hYmxlIiwiaG90a2V5cyIsInRvb2xiYXJCdXR0b24iLCJ0b29sdGlwIiwiaWNvbk9ubHkiLCJPcGVuRmlsZXMiLCJyZXF1aXJlc1NlbGVjdGlvbiIsImdyb3VwIiwiVG9nZ2xlU2VhcmNoIiwic3BlY2lhbEFjdGlvblRvRGlzcGF0Y2giLCJUb2dnbGVTZWFyY2hCYXIiLCJDb3B5RmlsZXMiLCJDcmVhdGVGb2xkZXIiLCJVcGxvYWRGaWxlcyIsIkRvd25sb2FkRmlsZXMiLCJEZWZhdWx0QWN0aW9ucyIsIlVOSU5JVElBTElaRURfU0VOVElORUwiLCJ1c2VDbGlja0xpc3RlbmVyIiwicGFyYW1zIiwidHJpZ2dlckNvbXBvbmVudFJlZiIsInVzZVJlZiIsImNsaWNrTGlzdGVuZXIiLCJjdXJyZW50IiwiY29udGFpbnMiLCJ0YXJnZXQiLCJvbkluc2lkZUNsaWNrIiwib25PdXRzaWRlQ2xpY2siLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidXNlU2VhcmNoU3RhdGUiLCJzZWFyY2hCYXJFbmFibGVkIiwic2V0U2VhcmNoQmFyRW5hYmxlZCIsInNlYXJjaEJhclZpc2libGUiLCJzZXRTZWFyY2hCYXJWaXNpYmxlIiwic2VhcmNoRmlsdGVyIiwic2V0U2VhcmNoRmlsdGVyIiwidXNlU2VhcmNoQ29udGV4dHMiLCJzZWFyY2hTdGF0ZSIsImNvbnRleHQiLCJ1c2VTcGVjaWFsRmlsZUFjdGlvbkhhbmRsZXJNYXAiLCJzZWxlY3Rpb25VdGlsIiwiZGlzcGF0Y2hGaWxlQWN0aW9uIiwic3BlY2lhbEFjdGlvbkhhbmRsZXJNYXBEZXBzIiwiYWN0aW9uSWQiLCJkcm9wcGVkRmlsZXMiLCJDb250ZXh0Q29tcG9zZXIiLCJwcm92aWRlcnMiLCJGcmFnbWVudCIsInJlZHVjZVJpZ2h0IiwiYWNjIiwiUHJvdmlkZXIiLCJwcm92aWRlciIsImxheWVyU3R5bGVzIiwicG9zaXRpb24iLCJwb2ludGVyRXZlbnRzIiwiekluZGV4IiwibGVmdCIsInRvcCIsImdldEl0ZW1TdHlsZXMiLCJpbml0aWFsQ3Vyc29yT2Zmc2V0IiwiaW5pdGlhbEZpbGVPZmZzZXQiLCJjdXJyZW50RmlsZU9mZnNldCIsImRpc3BsYXkiLCJ4IiwieSIsInRyYW5zZm9ybSIsIldlYmtpdFRyYW5zZm9ybSIsIkRuREZpbGVMaXN0RHJhZ0xheWVyIiwic2VsZWN0aW9uU2l6ZSIsInVzZURyYWdMYXllciIsImdldEl0ZW0iLCJpdGVtVHlwZSIsImdldEl0ZW1UeXBlIiwiZ2V0SW5pdGlhbENsaWVudE9mZnNldCIsImdldEluaXRpYWxTb3VyY2VDbGllbnRPZmZzZXQiLCJnZXRTb3VyY2VDbGllbnRPZmZzZXQiLCJyZW5kZXJJdGVtIiwiRXJyb3JNZXNzYWdlIiwiYnVsbGV0TGlzdCIsIml0ZW1zIiwiRmlsZUJyb3dzZXIiLCJjaG9ua3lJbnN0YW5jZUlkIiwidXNlU3RhdGljVmFsdWUiLCJmYWN0b3J5IiwidmFsdWVSZWYiLCJzaG9ydGlkIiwiZ2VuZXJhdGUiLCJmb2xkZXJDaGFpbiIsImZpbGVBY3Rpb25zIiwib25GaWxlQWN0aW9uIiwidmFsaWRhdGlvblJlc3VsdCIsInVzZUZpbGVCcm93c2VyVmFsaWRhdGlvbiIsImZpbGVzRGVwcyIsImVycm9yTWVzc2FnZXMiLCJjbGVhbkZpbGVzUmVzdWx0IiwiZXJyb3JNZXNzYWdlIiwiZm9ybWF0QnVsbGV0cyIsImNsZWFuRmlsZXMiLCJmaWxlc0Vycm9yTWVzc2FnZXMiLCJmb2xkZXJDaGFpbkRlcHMiLCJjbGVhbkZvbGRlckNoYWluUmVzdWx0IiwiY2xlYW5Gb2xkZXJDaGFpbiIsImZvbGRlckNoYWluRXJyb3JNZXNzYWdlcyIsInNvcnRlZEZpbGVzIiwidXNlU2VsZWN0aW9uIiwic2VsZWN0aW9uVXRpbFJlZiIsInVwZGF0ZSIsImV4dGVuZGVkRmlsZUFjdGlvbnMiLCJ1c2VGaWxlQWN0aW9uRGlzcGF0Y2hlciIsImFjdGlvbk1hcERlcHMiLCJhY3Rpb25NYXAiLCJmaWxlQWN0aW9uIiwiZGlzcGF0Y2hGaWxlQWN0aW9uRGVwcyIsImFjdGlvbkRhdGEiLCJhY3Rpb24iLCJpc0Z1bmN0aW9uIiwiY29uc3RydWN0b3IiLCJhcHBseSIsInVzZVNwZWNpYWxBY3Rpb25EaXNwYXRjaGVyIiwic3BlY2lhbFN0YXRlRGVwcyIsInNwZWNpYWxTdGF0ZSIsInNwZWNpYWxBY3Rpb25IYW5kbGVyTWFwIiwiZGlzcGF0Y2hTcGVjaWFsQWN0aW9uRGVwcyIsImhhbmRsZXIiLCJ1c2VTZWFyY2giLCJzZWFyY2hDb250ZXh0cyIsImZpbHRlcmVkRmlsZXMiLCJ1c2VGaWx0ZXJlZEZpbGVzIiwiRnV6enlTZWFyY2giLCJmIiwiY2FzZVNlbnNpdGl2ZSIsInNvcnQiLCJjaG9ua3lSb290UmVmIiwiY29udGV4dHMiLCJjb250ZXh0UHJvdmlkZXJzIiwibWFwIiwidXNlRm9sZGVyQ2hhaW5Db21wb25lbnQiLCJkaXNwYXRjaENob25reUFjdGlvbiIsImNvbXBzIiwiaXNMYXN0IiwiaiIsIlRhZ1RvVXNlIiwidXNlU21hcnRUb29sYmFyQnV0dG9uUHJvcHMiLCJwYXJlbnRGb2xkZXIiLCJhY3Rpb25TZWxlY3Rpb25TaXplIiwiYWN0aW9uRmlsZXMiLCJhY3RpdmUiLCJhY3Rpb25UYXJnZXQiLCJkaXNhYmxlZCIsIkRyb3Bkb3duQnV0dG9uIiwidGl0bGUiLCJmaXhlZFdpZHRoIiwiU21hcnREcm9wZG93bkJ1dHRvbiIsImJ1dHRvbiIsIlRvb2xiYXJCdXR0b24iLCJpY29uT25SaWdodCIsImljb25Db21wb25lbnQiLCJTbWFydFRvb2xiYXJCdXR0b24iLCJEcm9wZG93biIsInNob3dEcm9wZG93biIsInNldFNob3dEcm9wZG93biIsImhpZGVEcm9wZG93biIsImRyb3Bkb3duUmVmIiwidHJpZ2dlckNsaWNrIiwiVG9vbGJhckJ1dHRvbkdyb3VwIiwiZ3JvdXBDb250ZW50cyIsIkZpbGVUb29sYmFyIiwiZm9sZGVyQ2hhaW5Db21wIiwidXNlVG9vbGJhckJ1dHRvbkdyb3VwcyIsImJ1dHRvbkdyb3VwcyIsImJ1dHRvbkdyb3VwTWFwIiwib3BlblBhcmVudEZvbGRlckJ1dHRvbkdyb3VwIiwic2VhcmNoQnV0dG9uR3JvdXAiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJhcnJheU9mIiwib25lT2ZUeXBlIiwic3RyaW5nIiwiaXNSZXF1aXJlZCIsIm9uZU9mIiwiRmlsZVNlYXJjaCIsImdsb2JhbFNlYXJjaEZpbHRlciIsInNldEdsb2JhbFNlYXJjaEZpbHRlciIsImxvY2FsU2VhcmNoRmlsdGVyIiwic2V0TG9jYWxTZWFyY2hGaWx0ZXIiLCJkZWJvdW5jZWRMb2NhbFNlYXJjaEZpbHRlciIsInVzZURlYm91bmNlIiwiZGVsYXkiLCJkZWJvdW5jZWRWYWx1ZSIsInNldERlYm91bmNlZFZhbHVlIiwidHJpbW1lZEZpbHRlciIsInRyaW0iLCJoYW5kbGVJbnB1dENoYW5nZSIsImh0bWxGb3IiLCJwbGFjZWhvbGRlciIsIm9uQ2hhbmdlIiwiRmlsZUxpc3QiLCJncmlkUmVuZGVyZXIiLCJkaXNhYmxlSGVpZ2h0IiwiY3JlYXRlRG9jc09iamVjdCIsIm1hcmtkb3duIiwicGFnZSIsIkRuZFByb3ZpZGVyIiwiYmFja2VuZCIsIkhUTUw1QmFja2VuZCIsInBhcnNlTWFya2Rvd24iLCJDdXN0b21QcmltYXJ5Iiwic3RvcnkiLCJEb2NzQ29udGV4dCIsImNvbXBvbmVudFN0b3JpZXMiLCJnZXREb2NzU3RvcmllcyIsImZpbmQiLCJzIiwiZXhwYW5kZWQiLCJvY2N1cnJlbmNlcyIsImdldEluZGljZXNPZiIsImxpbmVFbmQiLCJsaW5lIiwic3Vic3RyaW5nIiwib3BlbmluZ19tYXRjaGVzIiwiZXhlYyIsImxhbmd1YWdlIiwianNvbkNvbmZpZyIsIm1hcmtkb3duRW5kIiwiY29kZVN0YXJ0IiwiY29kZUVuZCIsIm1hcmtkb3duU3RhcnQiLCJjb21wb25lbnRzIiwic3RhcnQiLCJtZFNsaWNlIiwiY29kZVNsaWNlIiwicHJlcGFyZU1hcmtkb3duQ29tcCIsInByZXBhcmVDb2RlQ29tcCIsImRpc3BsYXlDb2RlIiwibmVlZGxlIiwiaGF5c3RhY2siLCJzZWFyY2hTdHJMZW4iLCJzdGFydEluZGV4IiwiaW5kaWNlcyIsInNob3dBY3Rpb25Ob3RpZmljYXRpb24iLCJ0ZXh0UGFydHMiLCJmaWxlQ29tcHMiLCJmaWxlQ291bnQiLCJmaWxlVGl0bGUiLCJOb3R5IiwidGhlbWUiLCJ0aW1lb3V0Iiwic2hvdyIsIl9jbGllbnRBcGkiLCJyZXF1aXJlIiwiX2NsaWVudExvZ2dlciIsIl9jb25maWdGaWxlbmFtZSIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJzb3VyY2UiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiYXJnVHlwZXMiLCJsb2dnZXIiLCJ3YXJuIiwiSlNPTiIsInN0cmluZ2lmeSIsImRlY29yYXRvcnMiLCJkZWNvcmF0b3IiLCJhZGREZWNvcmF0b3IiLCJwYXJhbWV0ZXJzIiwiZ2xvYmFsQXJncyIsImdsb2JhbEFyZ1R5cGVzIiwiYWRkUGFyYW1ldGVycyIsImFyZ1R5cGVzRW5oYW5jZXJzIiwiZW5oYW5jZXIiLCJhZGRBcmdUeXBlc0VuaGFuY2VyIiwiX2ZyYW1ld29yayIsIl9TdG9yeWJvb2tQcmVzZXJ2ZURlY29yYXRvcnMiLCJjb25maWd1cmUiLCJ3ZWJwYWNrQ29udGV4dCIsInJlcSIsIndlYnBhY2tDb250ZXh0UmVzb2x2ZSIsIm8iLCJlIiwiRXJyb3IiLCJ3ZWJwYWNrQ29udGV4dEtleXMiLCJNZXRhIiwibWFrZVNob3J0Y29kZSIsIk1EWERlZmF1bHRTaG9ydGNvZGUiLCJsYXlvdXRQcm9wcyIsIk1EWENvbnRlbnQiLCJtZHhUeXBlIiwicGFyZW50TmFtZSIsImlzTURYQ29tcG9uZW50IiwiX19wYWdlIiwiZG9jc09ubHkiLCJjb21wb25lbnRNZXRhIiwiaW5jbHVkZVN0b3JpZXMiLCJtZHhTdG9yeU5hbWVUb0tleSIsImRvY3MiLCJtZHhDb21wb25lbnRNZXRhIiwiX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIiwiYXBpIiwiY29udGVudCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0Iiwib3B0aW9ucyIsImxvY2FscyIsInRleHRBbGlnbiIsInNyYyIsImFsdCIsImhyZWYiLCJtYXJnaW5MZWZ0IiwiY2xhc3MiLCJDb21wb25lbnRIaWVyYXJjaHlFeGFtcGxlIiwiaGFuZGxlRmlsZUFjdGlvbiIsIkZpbGVzQXJyYXlFeGFtcGxlIiwiaXNIaWRkZW4iLCJjaGlsZHJlbklkcyIsImlzU3ltbGluayIsImV4dCIsIm1vZERhdGUiLCJEYXRlIiwiRm9sZGVyQ2hhaW5FeGFtcGxlIiwiQWN0aW9uc0V4YW1wbGUiLCJsb2ciLCJDdXN0b21BY3Rpb25zRXhhbXBsZSIsImN1c3RvbUZpbGVBY3Rpb25zIiwiZW5kc1dpdGgiLCJEcmFnTkRyb3BFeGFtcGxlIiwiSW52YWxpZFByb3BzRXhhbXBsZSIsIlZpcnR1YWxpemF0aW9uRXhhbXBsZSJdLCJtYXBwaW5ncyI6Ijt3R0FBQUEsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsZ0RDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUywrR0NBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxnRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxnRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGdEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGdEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxnRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxnRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGdEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9C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LE1BQ0EsT0FDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsT0FDQSxNQUNBLE1BQ0EsT0FDQSxPQUNBLE1BQ0EsT0FDQSxNQUNBLE9BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxPQUVTVSxnQkFBNEIsQ0FDckMsT0FDQSxNQUNBLE1BQ0EsTUFDQSxPQUNBLE9BQ0EsS0FDQSxNQUNBLE1BQ0EsTUFDQSxRQUNBLFlBQ0EsWUFDQSxZQUNBLE1BQ0EsT0FDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsT0FDQSxNQUNBLE1BQ0EsT0FDQSxNQUNBLE1BQ0EsT0FDQSxPQUNBLE1BQ0EsTUFDQSxNQUNBLEtBQ0EsS0FDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxPQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsT0FDQSxNQUNBLE1BRVNtQixZQUF3QixDQUNqQyxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxXQUVTRSxXQUF1QixDQUNoQyxPQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFD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QXlCLFMsZ0RDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsZ0RDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLCtDQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsZ0RDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGdEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsZ0RDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGdEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGdEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGlEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsaURDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxpRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFy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TWxSLEtBQUssQ0FDUEgsR0FBSSxRQUFGLE9BQVVILEdBQ1pLLEtBQU1MLEVBQUksV0FBSCxPQUFjQSxFQUFkLFNBQXlCLGVBUXhDLE9BQ0ksb0ZBQUtvSyxNQUFPLENBQUVrSCxPQUFRLE1BQ2xCLDZFQUFDLE1BQUQsQ0FDSUUsTUFBT0EsTUFDUHNMLGFBUmEsU0FBbkI2TyxpQkFBb0JwTixPQUFvQjdLLE1BQzFDMFMsd0JBQXVCLENBQUU3SCxjQUFRN0ssYUFRekIvQixtQkFBbUIsR0FFbkIsNkVBQUMsTUFBRCxNQUNBLDZFQUFDLE1BQUQsU0F0QkhnYixpRCxxRkVuQ2IzdUIsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsZ0RDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxnRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGdEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsK0NDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsUyxnRENBMUNGLE9BQU9DLFFBQVdDLG9CQUFvQixFQUFyQixDQUF5QixTLGdEQ0ExQ0YsT0FBT0MsUUFBV0Msb0JBQW9CLEVBQXJCLENBQXlCLFMsZ0RDQTFDRixPQUFPQyxRQUFXQyxvQkFBb0IsRUFBckIsQ0FBeUIsVSIsImZpbGUiOiJtYWluLjlmNDE5YzE1NGMwY2QzMzkwNmFiLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiRVJrUFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcImpRL3lcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCI1bzQzXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiUDJhR1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcInNWRmJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJwbEJ3XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiYVlTclwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIi9Rb3NcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJqNFNmXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiTFV3ZFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIk9aYUpcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJNKy9GXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiODdpZlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIjN5WU1cIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJEZmhNXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwidnJSZlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIkxxTHNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJwdTNvXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiNlU3aVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIkNtNG9cIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJsVEVMXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiRjYzaVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIkdGcHRcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJrWXhQXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiRForY1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHN0b3J5Ym9va19kb2NzX2RsbDsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcImFMZ29cIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJjQVJPXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiK2tZN1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIjVCWWJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCI1ODc4XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwibTlMUFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcImwxQzJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJpS0UrXCIpOyIsImV4cG9ydCBlbnVtIENob25reUljb25OYW1lIHtcbiAgICAvLyBNaXNjXG4gICAgbG9hZGluZyA9ICdsb2FkaW5nJyxcbiAgICBkcm9wZG93biA9ICdkcm9wZG93bicsXG5cbiAgICAvLyBGaWxlIEFjdGlvbnM6IERyYWcgJiBkcm9wXG4gICAgZG5kRHJhZ2dpbmcgPSAnZG5kRHJhZ2dpbmcnLFxuICAgIGRuZENhbkRyb3AgPSAnZG5kQ2FuRHJvcCcsXG4gICAgZG5kQ2Fubm90RHJvcCA9ICdkbmRDYW5ub3REcm9wJyxcblxuICAgIC8vIEZpbGUgQWN0aW9uczogRmlsZSBvcGVyYXRpb25zXG4gICAgb3BlbkZpbGVzID0gJ29wZW5GaWxlcycsXG4gICAgb3BlblBhcmVudEZvbGRlciA9ICdvcGVuUGFyZW50Rm9sZGVyJyxcbiAgICBzZWFyY2ggPSAnc2VhcmNoJyxcblxuICAgIC8vIEZpbGUgQWN0aW9uczogVW5zb3J0ZWRcbiAgICBjaGVja0FjdGl2ZSA9ICdjaGVja0FjdGl2ZScsXG4gICAgY2hlY2tJbmFjdGl2ZSA9ICdjaGVja0luYWN0aXZlJyxcbiAgICBkZXNjID0gJ2Rlc2MnLFxuICAgIGFzYyA9ICdhc2MnLFxuICAgIGxpc3QgPSAnbGlzdCcsXG4gICAgZm9sZGVyID0gJ2ZvbGRlcicsXG4gICAgZm9sZGVyQ3JlYXRlID0gJ2ZvbGRlckNyZWF0ZScsXG4gICAgZm9sZGVyT3BlbiA9ICdmb2xkZXJPcGVuJyxcbiAgICBzbWFsbFRodW1ibmFpbCA9ICdzbWFsbFRodW1ibmFpbCcsXG4gICAgbGFyZ2VUaHVtYm5haWwgPSAnbGFyZ2VUaHVtYm5haWwnLFxuICAgIGZvbGRlckNoYWluU2VwYXJhdG9yID0gJ2ZvbGRlckNoYWluU2VwYXJhdG9yJyxcbiAgICBkb3dubG9hZCA9ICdkb3dubG9hZCcsXG4gICAgdXBsb2FkID0gJ3VwbG9hZCcsXG4gICAgdHJhc2ggPSAndHJhc2gnLFxuICAgIGZhbGxiYWNrSWNvbiA9ICdmYWxsYmFja0ljb24nLFxuICAgIHN5bWxpbmsgPSAnc3ltbGluaycsXG4gICAgaGlkZGVuID0gJ2hpZGRlbicsXG5cbiAgICAvLyBGaWxlIHR5cGVzXG4gICAgZmlsZSA9ICdmaWxlJyxcbiAgICBsaWNlbnNlID0gJ2xpY2Vuc2UnLFxuICAgIGNvZGUgPSAnY29kZScsXG4gICAgY29uZmlnID0gJ2NvbmZpZycsXG4gICAgbW9kZWwgPSAnbW9kZWwnLFxuICAgIGRhdGFiYXNlID0gJ2RhdGFiYXNlJyxcbiAgICB0ZXh0ID0gJ3RleHQnLFxuICAgIGFyY2hpdmUgPSAnYXJjaGl2ZScsXG4gICAgY3N2ID0gJ2NzdicsXG4gICAgaW1hZ2UgPSAnaW1hZ2UnLFxuICAgIHBkZiA9ICdwZGYnLFxuICAgIHdvcmQgPSAnd29yZCcsXG4gICAgdmlkZW8gPSAndmlkZW8nLFxuICAgIGluZm8gPSAnaW5mbycsXG4gICAga2V5ID0gJ2tleScsXG4gICAgbG9jayA9ICdsb2NrJyxcbiAgICBtdXNpYyA9ICdtdXNpYycsXG4gICAgZmxhc2ggPSAnZmxhc2gnLFxuICAgIHRlcm1pbmFsID0gJ3Rlcm1pbmFsJyxcbiAgICBhdXRob3JzID0gJ2F1dGhvcnMnLFxuICAgIGFkb2JlID0gJ2Fkb2JlJyxcbiAgICBnaXQgPSAnZ2l0JyxcbiAgICBsaW51eCA9ICdsaW51eCcsXG4gICAgd2luZG93cyA9ICd3aW5kb3dzJyxcbiAgICBub2RlanMgPSAnbm9kZWpzJyxcbiAgICBwaHAgPSAncGhwJyxcbiAgICBweXRob24gPSAncHl0aG9uJyxcbiAgICB1YnVudHUgPSAndWJ1bnR1Jyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaWxlSWNvbkRhdGEge1xuICAgIGljb246IENob25reUljb25OYW1lIHwgc3RyaW5nO1xuICAgIGNvbG9yQ29kZTogbnVtYmVyO1xufVxuIiwiZXhwb3J0IGNsYXNzIExvZ2dlciB7XG4gICAgcHVibGljIHN0YXRpYyBlcnJvciguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLmVycm9yKCdbQ2hvbmt5IHJ1bnRpbWUgZXJyb3JdJywgLi4uYXJncyk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBmb3JtYXRCdWxsZXRzKGJ1bGxldHM6IHN0cmluZ1tdKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGBcXG4tICR7YnVsbGV0cy5qb2luKCdcXG4tICcpfWA7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAndHNkZWYnO1xuXG5pbXBvcnQgeyBGaWxlQnJvd3NlciB9IGZyb20gJy4uL2NvbXBvbmVudHMvZXh0ZXJuYWwvRmlsZUJyb3dzZXInO1xuaW1wb3J0IHsgRmlsZUFycmF5IH0gZnJvbSAnLi4vdHlwZXMvZmlsZXMudHlwZXMnO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXInO1xuXG5leHBvcnQgY29uc3QgaXNQbGFpbk9iamVjdCA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgb2JqZWN0ID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59O1xuZXhwb3J0IGNvbnN0IGlzRnVuY3Rpb24gPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIEZ1bmN0aW9uID0+IHtcbiAgICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY2FsbCAmJiB2YWx1ZS5hcHBseSk7XG59O1xuXG5leHBvcnQgY29uc3QgaXNNb2JpbGVEZXZpY2UgPSAoKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgdHlwZW9mIHdpbmRvdy5vcmllbnRhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdJRU1vYmlsZScpICE9PSAtMVxuICAgICk7XG59O1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gdmFsaWRhdGVzIHRoZSB1c2VyLXByb3ZpZGVkIGZpbGVzIGFycmF5LiBJdCBjaGVja3MgdGhlIGZvbGxvd2luZ1xuICogY3JpdGVyaWE6XG4gKiAtIGBmaWxlc2AgaXMgbm90IGFuIGFycmF5XG4gKiAtIHRoZXJlIGFyZSBkdXBsaWNhdGUgZmlsZSBJRHNcbiAqIC0gc29tZSBmaWxlcyBhcmUgbWlzc2luZyBgaWRgIGZpZWxkXG4gKiAtIHNvbWUgZmlsZXMgYXJlIG1pc3NpbmcgYG5hbWVgIGZpZWxkXG4gKiAtIHNvbWUgZmlsZXMgaGF2ZSBpbnZhbGlkIHR5cGUgKHRoZXkgYXJlIG5laXRoZXIgYW4gb2JqZWN0IG5vciBgbnVsbGApXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VDbGVhbkZpbGVBcnJheSA9IDxBbGxvd051bGwgZXh0ZW5kcyBib29sZWFuPihcbiAgICBmaWxlQXJyYXk6IEFsbG93TnVsbCBleHRlbmRzIGZhbHNlID8gRmlsZUFycmF5IDogTnVsbGFibGU8RmlsZUFycmF5PixcbiAgICBhbGxvd051bGw6IEFsbG93TnVsbFxuKToge1xuICAgIGNsZWFuRmlsZUFycmF5OiBBbGxvd051bGwgZXh0ZW5kcyBmYWxzZSA/IEZpbGVBcnJheSA6IE51bGxhYmxlPEZpbGVBcnJheT47XG4gICAgd2FybmluZ01lc3NhZ2U6IE51bGxhYmxlPHN0cmluZz47XG4gICAgd2FybmluZ0J1bGxldHM6IHN0cmluZ1tdO1xufSA9PiB7XG4gICAgbGV0IGNsZWFuRmlsZUFycmF5OiBBbGxvd051bGwgZXh0ZW5kcyBmYWxzZSA/IEZpbGVBcnJheSA6IE51bGxhYmxlPEZpbGVBcnJheT47XG4gICAgbGV0IHdhcm5pbmdNZXNzYWdlID0gbnVsbDtcbiAgICBjb25zdCB3YXJuaW5nQnVsbGV0cyA9IFtdO1xuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGZpbGVBcnJheSkpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjbGVhbkZpbGVBcnJheSA9IGFsbG93TnVsbCA/IG51bGwgOiBbXTtcbiAgICAgICAgaWYgKCFhbGxvd051bGwgfHwgZmlsZUFycmF5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICB3YXJuaW5nTWVzc2FnZSA9XG4gICAgICAgICAgICAgICAgYFByb3ZpZGVkIHZhbHVlIHdhcyByZXBsYWNlZCBgICtcbiAgICAgICAgICAgICAgICBgd2l0aCAke2FsbG93TnVsbCA/ICdudWxsJyA6ICdlbXB0eSBhcnJheSd9LmA7XG4gICAgICAgICAgICB3YXJuaW5nQnVsbGV0cy5wdXNoKFxuICAgICAgICAgICAgICAgIGBFeHBlY3RlZCBcImZpbGVzXCIgdG8gYmUgYW4gYXJyYXksIGdvdCB0eXBlIGAgK1xuICAgICAgICAgICAgICAgICAgICBgXCIke3R5cGVvZiBmaWxlQXJyYXl9XCIgaW5zdGVhZCAodmFsdWU6ICR7ZmlsZUFycmF5fSkuYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGluZGljZXNUb0JlUmVtb3ZlZCA9IG5ldyBTZXQ8bnVtYmVyPigpO1xuXG4gICAgICAgIGNvbnN0IHNlZW5JZHMgPSB7fTtcbiAgICAgICAgY29uc3QgZHVwbGljYXRlSWRTZXQgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgICAgICAgY29uc3QgbWlzc2luZ0lkSW5kaWNlcyA9IFtdO1xuICAgICAgICBjb25zdCBtaXNzaW5nTmFtZUluZGljZXMgPSBbXTtcbiAgICAgICAgY29uc3QgaW52YWxpZFR5cGVJbmRpY2VzID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlQXJyYXkubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBmaWxlQXJyYXlbaV07XG5cbiAgICAgICAgICAgIGlmIChpc1BsYWluT2JqZWN0KGZpbGUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZpbGUuaWQgJiYgc2Vlbklkc1tmaWxlLmlkXSkge1xuICAgICAgICAgICAgICAgICAgICBkdXBsaWNhdGVJZFNldC5hZGQoZmlsZS5pZCk7XG4gICAgICAgICAgICAgICAgICAgIGluZGljZXNUb0JlUmVtb3ZlZC5hZGQoaSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2Vlbklkc1tmaWxlLmlkXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFmaWxlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgbWlzc2luZ05hbWVJbmRpY2VzLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgICAgIGluZGljZXNUb0JlUmVtb3ZlZC5hZGQoaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZmlsZS5pZCkge1xuICAgICAgICAgICAgICAgICAgICBtaXNzaW5nSWRJbmRpY2VzLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgICAgIGluZGljZXNUb0JlUmVtb3ZlZC5hZGQoaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChmaWxlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaW52YWxpZFR5cGVJbmRpY2VzLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgaW5kaWNlc1RvQmVSZW1vdmVkLmFkZChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkdXBsaWNhdGVJZFNldC5zaXplID4gMCkge1xuICAgICAgICAgICAgd2FybmluZ0J1bGxldHMucHVzaChcbiAgICAgICAgICAgICAgICBgU29tZSBmaWxlcyBoYXZlIGR1cGxpY2F0ZSBJRHMuIFRoZXNlIElEcyBhcHBlYXJlZCBtdWx0aXBsZSBgICtcbiAgICAgICAgICAgICAgICAgICAgYHRpbWVzOiAke0FycmF5LmZyb20oZHVwbGljYXRlSWRTZXQpfWBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pc3NpbmdJZEluZGljZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgd2FybmluZ0J1bGxldHMucHVzaChcbiAgICAgICAgICAgICAgICBgU29tZSBmaWxlcyBhcmUgbWlzc2luZyB0aGUgXCJpZFwiIGZpZWxkLiBgICtcbiAgICAgICAgICAgICAgICAgICAgYFJlbGV2YW50IGZpbGUgaW5kaWNlczogJHttaXNzaW5nSWRJbmRpY2VzLmpvaW4oJywgJyl9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWlzc2luZ05hbWVJbmRpY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHdhcm5pbmdCdWxsZXRzLnB1c2goXG4gICAgICAgICAgICAgICAgYFNvbWUgZmlsZXMgYXJlIG1pc3NpbmcgdGhlIFwibmFtZVwiIGZpZWxkLiBgICtcbiAgICAgICAgICAgICAgICAgICAgYFJlbGV2YW50IGZpbGUgaW5kaWNlczogJHttaXNzaW5nTmFtZUluZGljZXMuam9pbignLCAnKX1gXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnZhbGlkVHlwZUluZGljZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgd2FybmluZ0J1bGxldHMucHVzaChcbiAgICAgICAgICAgICAgICBgU29tZSBmaWxlcyBoYXZlIGludmFsaWQgdHlwZSAodGhleSBhcmUgbmVpdGhlciBhIHBsYWluIG9iamVjdCBub3IgXCJudWxsXCIpLiBgICtcbiAgICAgICAgICAgICAgICAgICAgYFJlbGV2YW50IGZpbGUgaW5kaWNlczogJHtpbnZhbGlkVHlwZUluZGljZXMuam9pbignLCAnKX1gXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZGljZXNUb0JlUmVtb3ZlZC5zaXplID4gMCkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgY2xlYW5GaWxlQXJyYXkgPSBmaWxlQXJyYXkuZmlsdGVyKFxuICAgICAgICAgICAgICAgICh2YWx1ZSwgaW5kZXgpID0+ICFpbmRpY2VzVG9CZVJlbW92ZWQuaGFzKGluZGV4KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHdhcm5pbmdNZXNzYWdlID1cbiAgICAgICAgICAgICAgICBgJHtpbmRpY2VzVG9CZVJlbW92ZWQuc2l6ZX0gb2ZmZW5kaW5nIGAgK1xuICAgICAgICAgICAgICAgIGBmaWxlJHtpbmRpY2VzVG9CZVJlbW92ZWQuc2l6ZSA9PT0gMSA/ICcgd2FzJyA6ICdzIHdlcmUnfSBgICtcbiAgICAgICAgICAgICAgICBgIHJlbW92ZWQgZnJvbSB0aGUgYXJyYXkuYDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsZWFuRmlsZUFycmF5ID0gZmlsZUFycmF5O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgY2xlYW5GaWxlQXJyYXksIHdhcm5pbmdNZXNzYWdlLCB3YXJuaW5nQnVsbGV0cyB9O1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBFcnJvck1lc3NhZ2VEYXRhIHtcbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgYnVsbGV0czogc3RyaW5nW107XG59XG5cbmV4cG9ydCBjb25zdCB1c2VGaWxlQnJvd3NlclZhbGlkYXRpb24gPSAoXG4gICAgZmlsZXM6IEZpbGVBcnJheSxcbiAgICBmb2xkZXJDaGFpbjogTnVsbGFibGU8RmlsZUFycmF5PlxuKToge1xuICAgIGNsZWFuRmlsZXM6IEZpbGVBcnJheTtcbiAgICBjbGVhbkZvbGRlckNoYWluOiBOdWxsYWJsZTxGaWxlQXJyYXk+O1xuICAgIGVycm9yTWVzc2FnZXM6IEVycm9yTWVzc2FnZURhdGFbXTtcbn0gPT4ge1xuICAgIGNvbnN0IGZpbGVzRGVwcyA9IFtmaWxlc107XG4gICAgY29uc3QgeyBjbGVhbkZpbGVzLCBlcnJvck1lc3NhZ2VzOiBmaWxlc0Vycm9yTWVzc2FnZXMgfSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2VzOiBFcnJvck1lc3NhZ2VEYXRhW10gPSBbXTtcblxuICAgICAgICBjb25zdCBjbGVhbkZpbGVzUmVzdWx0ID0gdXNlQ2xlYW5GaWxlQXJyYXkoZmlsZXMsIGZhbHNlKTtcbiAgICAgICAgaWYgKGNsZWFuRmlsZXNSZXN1bHQud2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9XG4gICAgICAgICAgICAgICAgYFRoZSBcImZpbGVzXCIgcHJvcCBwYXNzZWQgdG8gJHtGaWxlQnJvd3Nlci5uYW1lfSBkaWQgbm90IHBhc3MgdmFsaWRhdGlvbi4gYCArXG4gICAgICAgICAgICAgICAgYCR7Y2xlYW5GaWxlc1Jlc3VsdC53YXJuaW5nTWVzc2FnZX0gYCArXG4gICAgICAgICAgICAgICAgYFRoZSBmb2xsb3dpbmcgZXJyb3JzIHdlcmUgZW5jb3VudGVyZWQ6YDtcbiAgICAgICAgICAgIExvZ2dlci5lcnJvcihcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgTG9nZ2VyLmZvcm1hdEJ1bGxldHMoY2xlYW5GaWxlc1Jlc3VsdC53YXJuaW5nQnVsbGV0cylcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgICAgICBidWxsZXRzOiBjbGVhbkZpbGVzUmVzdWx0Lndhcm5pbmdCdWxsZXRzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2xlYW5GaWxlczogY2xlYW5GaWxlc1Jlc3VsdC5jbGVhbkZpbGVBcnJheSxcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZXMsXG4gICAgICAgIH07XG4gICAgfSwgZmlsZXNEZXBzKTtcblxuICAgIGNvbnN0IGZvbGRlckNoYWluRGVwcyA9IFtmb2xkZXJDaGFpbl07XG4gICAgY29uc3QgeyBjbGVhbkZvbGRlckNoYWluLCBlcnJvck1lc3NhZ2VzOiBmb2xkZXJDaGFpbkVycm9yTWVzc2FnZXMgfSA9IHVzZU1lbW8oXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZXM6IEVycm9yTWVzc2FnZURhdGFbXSA9IFtdO1xuXG4gICAgICAgICAgICBjb25zdCBjbGVhbkZvbGRlckNoYWluUmVzdWx0ID0gdXNlQ2xlYW5GaWxlQXJyYXkoZm9sZGVyQ2hhaW4sIHRydWUpO1xuICAgICAgICAgICAgaWYgKGNsZWFuRm9sZGVyQ2hhaW5SZXN1bHQud2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPVxuICAgICAgICAgICAgICAgICAgICBgVGhlIFwiZm9sZGVyQ2hhaW5cIiBwcm9wIHBhc3NlZCB0byAke0ZpbGVCcm93c2VyLm5hbWV9IGRpZCBub3QgcGFzcyB2YWxpZGF0aW9uLiBgICtcbiAgICAgICAgICAgICAgICAgICAgYCR7Y2xlYW5Gb2xkZXJDaGFpblJlc3VsdC53YXJuaW5nTWVzc2FnZX0gYCArXG4gICAgICAgICAgICAgICAgICAgIGBUaGUgZm9sbG93aW5nIGVycm9ycyB3ZXJlIGVuY291bnRlcmVkOmA7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5mb3JtYXRCdWxsZXRzKGNsZWFuRm9sZGVyQ2hhaW5SZXN1bHQud2FybmluZ0J1bGxldHMpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIGJ1bGxldHM6IGNsZWFuRm9sZGVyQ2hhaW5SZXN1bHQud2FybmluZ0J1bGxldHMsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY2xlYW5Gb2xkZXJDaGFpbjogY2xlYW5Gb2xkZXJDaGFpblJlc3VsdC5jbGVhbkZpbGVBcnJheSxcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2VzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZm9sZGVyQ2hhaW5EZXBzXG4gICAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGNsZWFuRmlsZXMsXG4gICAgICAgIGNsZWFuRm9sZGVyQ2hhaW4sXG4gICAgICAgIGVycm9yTWVzc2FnZXM6IFsuLi5maWxlc0Vycm9yTWVzc2FnZXMsIC4uLmZvbGRlckNoYWluRXJyb3JNZXNzYWdlc10sXG4gICAgfTtcbn07XG4iLCJpbXBvcnQgeyBOdWxsYWJsZSB9IGZyb20gJ3RzZGVmJztcblxuaW1wb3J0IHsgRmlsZURhdGEgfSBmcm9tICcuLi90eXBlcy9maWxlcy50eXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBGaWxlSGVscGVyIHtcbiAgICBwdWJsaWMgc3RhdGljIGlzQ2xpY2thYmxlKGZpbGU6IE51bGxhYmxlPEZpbGVEYXRhPik6IGZpbGUgaXMgRmlsZURhdGEge1xuICAgICAgICAvLyBDbGlja2FibGUgYnkgZGVmYXVsdFxuICAgICAgICByZXR1cm4gISFmaWxlO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgaXNPcGVuYWJsZShmaWxlOiBOdWxsYWJsZTxGaWxlRGF0YT4pOiBmaWxlIGlzIEZpbGVEYXRhIHtcbiAgICAgICAgLy8gT3BlbmFibGUgYnkgZGVmYXVsdFxuICAgICAgICByZXR1cm4gISFmaWxlICYmIGZpbGUub3BlbmFibGUgIT09IGZhbHNlO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgaXNTZWxlY3RhYmxlKGZpbGU6IE51bGxhYmxlPEZpbGVEYXRhPik6IGZpbGUgaXMgRmlsZURhdGEge1xuICAgICAgICAvLyBTZWxlY3RhYmxlIGJ5IGRlZmF1bHRcbiAgICAgICAgcmV0dXJuICEhZmlsZSAmJiBmaWxlLnNlbGVjdGFibGUgIT09IGZhbHNlO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgaXNEcmFnZ2FibGUoZmlsZTogTnVsbGFibGU8RmlsZURhdGE+KTogZmlsZSBpcyBGaWxlRGF0YSB7XG4gICAgICAgIC8vIEZpbGUgJiBmb2xkZXJzIGFyZSBkcmFnZ2FibGUgYnkgZGVmYXVsdCwgYG51bGxgIGlzIG5vdFxuICAgICAgICByZXR1cm4gISFmaWxlICYmIGZpbGUuZHJhZ2dhYmxlICE9PSBmYWxzZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGlzRHJvcHBhYmxlKGZpbGU6IE51bGxhYmxlPEZpbGVEYXRhPik6IGZpbGUgaXMgRmlsZURhdGEge1xuICAgICAgICAvLyBGb2xkZXJzIGFyZSBkcm9wcGFibGUgYnkgZGVmYXVsdCwgZmlsZXMgYXJlIG5vdFxuICAgICAgICBpZiAoIWZpbGUpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGZpbGUuaXNEaXIgJiYgZmlsZS5kcm9wcGFibGUgIT09IGZhbHNlKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZpbGUuZHJvcHBhYmxlID09PSB0cnVlO1xuICAgIH1cbn1cbiIsIi8qKlxuICogQGF1dGhvciBUaW11ciBLdXpoYWdhbGl5ZXYgPHRpbS5rdXpoQGdtYWlsLmNvbT5cbiAqIEBjb3B5cmlnaHQgMjAxOVxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IEV4YWN0VHJpZSBmcm9tICdleGFjdC10cmllJztcbmltcG9ydCBtZW1vaXplIGZyb20gJ21lbW9pemVlJztcbmltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBOdWxsYWJsZSB9IGZyb20gJ3RzZGVmJztcblxuaW1wb3J0IHsgRmlsZURhdGEgfSBmcm9tICcuLi90eXBlcy9maWxlcy50eXBlcyc7XG5pbXBvcnQgeyBDaG9ua3lJY29uTmFtZSwgRmlsZUljb25EYXRhIH0gZnJvbSAnLi4vdHlwZXMvaWNvbnMudHlwZXMnO1xuXG5jb25zdCBnZXRJY29uVHJpZSA9IG1lbW9pemUoKCkgPT4ge1xuICAgIGxldCBjb2xvdXJJbmRleCA9IDA7XG4gICAgY29uc3Qgc3RlcCA9IDU7XG5cbiAgICBjb25zdCBJY29uc1RvRXh0ZW5zaW9ucyA9IFtcbiAgICAgICAgW0Nob25reUljb25OYW1lLmxpY2Vuc2UsIFsnbGljZW5zZSddXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLmNvbmZpZywgWydzZmsnLCAnaW5pJywgJ3lhbWwnLCAndG9tbCcsICdpbWwnXV0sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS5tb2RlbCwgWyczZHMnLCAnb2JqJywgJ3BseScsICdmYngnXV0sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS5kYXRhYmFzZSwgWydqc29uJywgJ3NxbCcsICducHknLCAnbnB6J11dLFxuICAgICAgICBbQ2hvbmt5SWNvbk5hbWUudGV4dCwgWyd0eHQnLCAnbWQnXV0sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS5hcmNoaXZlLCBbJ3ppcCcsICdyYXInLCAndGFyJywgJ3Rhci5neiddXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLmNzdiwgWydjc3YnLCAneGxzJywgJ3hsc3gnXV0sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS5pbWFnZSwgSW1hZ2VFeHRlbnNpb25zXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLnBkZiwgWydwZGYnXV0sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS53b3JkLCBbJ2RvYycsICdkb2N4JywgJ29kdCddXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLnZpZGVvLCBWaWRlb0V4dGVuc2lvbnNdLFxuICAgICAgICBbXG4gICAgICAgICAgICBDaG9ua3lJY29uTmFtZS5jb2RlLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICdodG1sJyxcbiAgICAgICAgICAgICAgICAncGhwJyxcbiAgICAgICAgICAgICAgICAnY3NzJyxcbiAgICAgICAgICAgICAgICAnc2FzcycsXG4gICAgICAgICAgICAgICAgJ3Njc3MnLFxuICAgICAgICAgICAgICAgICdsZXNzJyxcbiAgICAgICAgICAgICAgICAnY3BwJyxcbiAgICAgICAgICAgICAgICAnaCcsXG4gICAgICAgICAgICAgICAgJ2hwcCcsXG4gICAgICAgICAgICAgICAgJ2MnLFxuICAgICAgICAgICAgICAgICd4bWwnLFxuICAgICAgICAgICAgICAgICdpcHluYicsXG4gICAgICAgICAgICBdLFxuICAgICAgICBdLFxuICAgICAgICBbQ2hvbmt5SWNvbk5hbWUuaW5mbywgWydiaWInLCAncmVhZG1lJywgJ25mbyddXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLmtleSwgWydwZW0nLCAncHViJ11dLFxuICAgICAgICBbQ2hvbmt5SWNvbk5hbWUubG9jaywgWydsb2NrJywgJ2xvY2suanNvbicsICdzaHJpbmt3cmFwLmpzb24nXV0sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS5tdXNpYywgQXVkaW9FeHRlbnNpb25zXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLmZsYXNoLCBbJ3N3ZiddXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLnRlcm1pbmFsLCBbJ3J1bicsICdzaCddXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLnRyYXNoLCBbJy5UcmFzaGVzJ11dLFxuICAgICAgICBbQ2hvbmt5SWNvbk5hbWUuYXV0aG9ycywgWydhdXRob3JzJywgJ2NvbnRyaWJ1dG9ycyddXSxcblxuICAgICAgICBbQ2hvbmt5SWNvbk5hbWUuYWRvYmUsIFsncHNkJ11dLFxuICAgICAgICBbQ2hvbmt5SWNvbk5hbWUuZ2l0LCBbJy5naXRpZ25vcmUnXV0sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS5saW51eCwgWydBcHBJbWFnZSddXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLndpbmRvd3MsIFsnZXhlJ11dLFxuICAgICAgICBbQ2hvbmt5SWNvbk5hbWUubm9kZWpzLCBbJ2pzJywgJ2pzeCcsICd0cycsICd0c3gnLCAnZC50cyddXSxcbiAgICAgICAgW0Nob25reUljb25OYW1lLnBocCwgWydwaHAnXV0sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS5weXRob24sIFsncHknXV0sXG4gICAgICAgIFtDaG9ua3lJY29uTmFtZS51YnVudHUsIFsnZGViJ11dLFxuICAgIF0gYXMgY29uc3Q7XG5cbiAgICBjb25zdCBleGFjdFRyaWUgPSBuZXcgRXhhY3RUcmllKCk7XG4gICAgZm9yIChjb25zdCBwYWlyIG9mIEljb25zVG9FeHRlbnNpb25zKSB7XG4gICAgICAgIGNvbnN0IFtpY29uLCBleHRlbnNpb25zXSA9IHBhaXI7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBleHRlbnNpb25zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb2xvdXJJbmRleCArPSBzdGVwO1xuICAgICAgICAgICAgY29uc3QgY29sb3JDb2RlID0gKGNvbG91ckluZGV4ICUgKENvbG9yc0xpZ2h0Lmxlbmd0aCAtIDEpKSArIDE7XG4gICAgICAgICAgICBjb25zdCBpY29uRGF0YTogRmlsZUljb25EYXRhID0ge1xuICAgICAgICAgICAgICAgIGljb24sXG4gICAgICAgICAgICAgICAgY29sb3JDb2RlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGV4YWN0VHJpZS5wdXQoZXh0ZW5zaW9uc1tpXSwgaWNvbkRhdGEsIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4YWN0VHJpZTtcbn0pO1xuXG5leHBvcnQgY29uc3QgdXNlSWNvbkRhdGEgPSAoZmlsZTogTnVsbGFibGU8RmlsZURhdGE+KTogRmlsZUljb25EYXRhID0+IHtcbiAgICBjb25zdCBkZXBzID0gW2ZpbGVdO1xuICAgIHJldHVybiB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgaWYgKCFmaWxlKSByZXR1cm4geyBpY29uOiBDaG9ua3lJY29uTmFtZS5sb2FkaW5nLCBjb2xvckNvZGU6IDAgfTtcbiAgICAgICAgaWYgKGZpbGUuaXNEaXIgPT09IHRydWUpIHJldHVybiB7IGljb246IENob25reUljb25OYW1lLmZvbGRlciwgY29sb3JDb2RlOiAwIH07XG5cbiAgICAgICAgY29uc3QgaWNvblRyaWUgPSBnZXRJY29uVHJpZSgpO1xuICAgICAgICBjb25zdCBtYXRjaCA9IGljb25UcmllLmdldFdpdGhDaGVja3BvaW50cyhmaWxlLm5hbWUsICcuJywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoIDogeyBpY29uOiBDaG9ua3lJY29uTmFtZS5maWxlLCBjb2xvckNvZGU6IDMyIH07XG4gICAgfSwgZGVwcyk7XG59O1xuXG5leHBvcnQgY29uc3QgVmlkZW9FeHRlbnNpb25zOiBzdHJpbmdbXSA9IFtcbiAgICAnM2cyJyxcbiAgICAnM2dwJyxcbiAgICAnM2dwcCcsXG4gICAgJ2FzZicsXG4gICAgJ2FzeCcsXG4gICAgJ2F2aScsXG4gICAgJ2R2YicsXG4gICAgJ2Y0dicsXG4gICAgJ2ZsaScsXG4gICAgJ2ZsdicsXG4gICAgJ2Z2dCcsXG4gICAgJ2gyNjEnLFxuICAgICdoMjYzJyxcbiAgICAnaDI2NCcsXG4gICAgJ2pwZ20nLFxuICAgICdqcGd2JyxcbiAgICAnanBtJyxcbiAgICAnbTF2JyxcbiAgICAnbTJ2JyxcbiAgICAnbTR1JyxcbiAgICAnbTR2JyxcbiAgICAnbWoyJyxcbiAgICAnbWpwMicsXG4gICAgJ21rM2QnLFxuICAgICdta3MnLFxuICAgICdta3YnLFxuICAgICdtbmcnLFxuICAgICdtb3YnLFxuICAgICdtb3ZpZScsXG4gICAgJ21wNCcsXG4gICAgJ21wNHYnLFxuICAgICdtcGUnLFxuICAgICdtcGVnJyxcbiAgICAnbXBnJyxcbiAgICAnbXBnNCcsXG4gICAgJ214dScsXG4gICAgJ29ndicsXG4gICAgJ3B5dicsXG4gICAgJ3F0JyxcbiAgICAnc212JyxcbiAgICAndHMnLFxuICAgICd1dmgnLFxuICAgICd1dm0nLFxuICAgICd1dnAnLFxuICAgICd1dnMnLFxuICAgICd1dnUnLFxuICAgICd1dnYnLFxuICAgICd1dnZoJyxcbiAgICAndXZ2bScsXG4gICAgJ3V2dnAnLFxuICAgICd1dnZzJyxcbiAgICAndXZ2dScsXG4gICAgJ3V2dnYnLFxuICAgICd2aXYnLFxuICAgICd2b2InLFxuICAgICd3ZWJtJyxcbiAgICAnd20nLFxuICAgICd3bXYnLFxuICAgICd3bXgnLFxuICAgICd3dngnLFxuXTtcbmV4cG9ydCBjb25zdCBJbWFnZUV4dGVuc2lvbnM6IHN0cmluZ1tdID0gW1xuICAgICczZHMnLFxuICAgICdhcG5nJyxcbiAgICAnYXp2JyxcbiAgICAnYm1wJyxcbiAgICAnYm1wJyxcbiAgICAnYnRpZicsXG4gICAgJ2NnbScsXG4gICAgJ2NteCcsXG4gICAgJ2RqdicsXG4gICAgJ2RqdnUnLFxuICAgICdkcmxlJyxcbiAgICAnZHdnJyxcbiAgICAnZHhmJyxcbiAgICAnZW1mJyxcbiAgICAnZXhyJyxcbiAgICAnZmJzJyxcbiAgICAnZmgnLFxuICAgICdmaDQnLFxuICAgICdmaDUnLFxuICAgICdmaDcnLFxuICAgICdmaGMnLFxuICAgICdmaXRzJyxcbiAgICAnZnB4JyxcbiAgICAnZnN0JyxcbiAgICAnZzMnLFxuICAgICdnaWYnLFxuICAgICdoZWljJyxcbiAgICAnaGVpY3MnLFxuICAgICdoZWlmJyxcbiAgICAnaGVpZnMnLFxuICAgICdpY28nLFxuICAgICdpY28nLFxuICAgICdpZWYnLFxuICAgICdqbHMnLFxuICAgICdqbmcnLFxuICAgICdqcDInLFxuICAgICdqcGUnLFxuICAgICdqcGVnJyxcbiAgICAnanBmJyxcbiAgICAnanBnJyxcbiAgICAnanBnMicsXG4gICAgJ2pwbScsXG4gICAgJ2pweCcsXG4gICAgJ2p4cicsXG4gICAgJ2t0eCcsXG4gICAgJ21kaScsXG4gICAgJ21tcicsXG4gICAgJ25weCcsXG4gICAgJ3BibScsXG4gICAgJ3BjdCcsXG4gICAgJ3BjeCcsXG4gICAgJ3BjeCcsXG4gICAgJ3BnbScsXG4gICAgJ3BpYycsXG4gICAgJ3BuZycsXG4gICAgJ3BubScsXG4gICAgJ3BwbScsXG4gICAgJ3BzZCcsXG4gICAgJ3B0aScsXG4gICAgJ3JhcycsXG4gICAgJ3JnYicsXG4gICAgJ3JsYycsXG4gICAgJ3NnaScsXG4gICAgJ3NpZCcsXG4gICAgJ3N1YicsXG4gICAgJ3N2ZycsXG4gICAgJ3N2Z3onLFxuICAgICd0MzgnLFxuICAgICd0YXAnLFxuICAgICd0ZngnLFxuICAgICd0Z2EnLFxuICAgICd0aWYnLFxuICAgICd0aWZmJyxcbiAgICAndXZnJyxcbiAgICAndXZpJyxcbiAgICAndXZ2ZycsXG4gICAgJ3V2dmknLFxuICAgICd2dGYnLFxuICAgICd3Ym1wJyxcbiAgICAnd2RwJyxcbiAgICAnd2VicCcsXG4gICAgJ3dtZicsXG4gICAgJ3hibScsXG4gICAgJ3hpZicsXG4gICAgJ3hwbScsXG4gICAgJ3h3ZCcsXG5dO1xuZXhwb3J0IGNvbnN0IEF1ZGlvRXh0ZW5zaW9uczogc3RyaW5nW10gPSBbXG4gICAgJzNncHAnLFxuICAgICdhYWMnLFxuICAgICdhZHAnLFxuICAgICdhaWYnLFxuICAgICdhaWZjJyxcbiAgICAnYWlmZicsXG4gICAgJ2F1JyxcbiAgICAnY2FmJyxcbiAgICAnZHJhJyxcbiAgICAnZHRzJyxcbiAgICAnZHRzaGQnLFxuICAgICdlY2VscDQ4MDAnLFxuICAgICdlY2VscDc0NzAnLFxuICAgICdlY2VscDk2MDAnLFxuICAgICdlb2wnLFxuICAgICdmbGFjJyxcbiAgICAna2FyJyxcbiAgICAnbHZwJyxcbiAgICAnbTJhJyxcbiAgICAnbTNhJyxcbiAgICAnbTN1JyxcbiAgICAnbTRhJyxcbiAgICAnbTRhJyxcbiAgICAnbWlkJyxcbiAgICAnbWlkaScsXG4gICAgJ21rYScsXG4gICAgJ21wMicsXG4gICAgJ21wMmEnLFxuICAgICdtcDMnLFxuICAgICdtcDMnLFxuICAgICdtcDRhJyxcbiAgICAnbXBnYScsXG4gICAgJ29nYScsXG4gICAgJ29nZycsXG4gICAgJ3B5YScsXG4gICAgJ3JhJyxcbiAgICAncmEnLFxuICAgICdyYW0nLFxuICAgICdyaXAnLFxuICAgICdybWknLFxuICAgICdybXAnLFxuICAgICdzM20nLFxuICAgICdzaWwnLFxuICAgICdzbmQnLFxuICAgICdzcHgnLFxuICAgICd1dmEnLFxuICAgICd1dnZhJyxcbiAgICAnd2F2JyxcbiAgICAnd2F2JyxcbiAgICAnd2F2JyxcbiAgICAnd2F4JyxcbiAgICAnd2ViYScsXG4gICAgJ3dtYScsXG4gICAgJ3htJyxcbl07XG5leHBvcnQgY29uc3QgQ29sb3JzTGlnaHQ6IHN0cmluZ1tdID0gW1xuICAgICcjYmJiYmJiJyxcbiAgICAnI2Q2NWM1YycsXG4gICAgJyNkNjY2NWMnLFxuICAgICcjZDY3MDVjJyxcbiAgICAnI2Q2N2E1YycsXG4gICAgJyNkNjg1NWMnLFxuICAgICcjZDY4ZjVjJyxcbiAgICAnI2Q2OTk1YycsXG4gICAgJyNkNmEzNWMnLFxuICAgICcjZDZhZDVjJyxcbiAgICAnI2Q2Yjg1YycsXG4gICAgJyNkNmMyNWMnLFxuICAgICcjZDZjYzVjJyxcbiAgICAnI2Q2ZDY1YycsXG4gICAgJyNjY2Q2NWMnLFxuICAgICcjYzJkNjVjJyxcbiAgICAnI2I4ZDY1YycsXG4gICAgJyNhZGQ2NWMnLFxuICAgICcjYTNkNjVjJyxcbiAgICAnIzk5ZDY1YycsXG4gICAgJyM4ZmQ2NWMnLFxuICAgICcjODVkNjVjJyxcbiAgICAnIzdhZDY1YycsXG4gICAgJyM3MGQ2NWMnLFxuICAgICcjNjZkNjVjJyxcbiAgICAnIzVjZDY1YycsXG4gICAgJyM1Y2Q2NjYnLFxuICAgICcjNWNkNjcwJyxcbiAgICAnIzVjZDY3YScsXG4gICAgJyM1Y2Q2ODUnLFxuICAgICcjNWNkNjhmJyxcbiAgICAnIzVjZDY5OScsXG4gICAgJyM1Y2Q2YTMnLFxuICAgICcjNWNkNmFkJyxcbiAgICAnIzVjZDZiOCcsXG4gICAgJyM1Y2Q2YzInLFxuICAgICcjNWNkNmNjJyxcbiAgICAnIzVjZDZkNicsXG4gICAgJyM1Y2NjZDYnLFxuICAgICcjNWNjMmQ2JyxcbiAgICAnIzVjYjhkNicsXG4gICAgJyM1Y2FkZDYnLFxuICAgICcjNWNhM2Q2JyxcbiAgICAnIzVjOTlkNicsXG4gICAgJyM1YzhmZDYnLFxuICAgICcjNWM4NWQ2JyxcbiAgICAnIzVjN2FkNicsXG4gICAgJyM1YzcwZDYnLFxuICAgICcjNWM2NmQ2JyxcbiAgICAnIzVjNWNkNicsXG4gICAgJyM2NjVjZDYnLFxuICAgICcjNzA1Y2Q2JyxcbiAgICAnIzdhNWNkNicsXG4gICAgJyM4NTVjZDYnLFxuICAgICcjOGY1Y2Q2JyxcbiAgICAnIzk5NWNkNicsXG4gICAgJyNhMzVjZDYnLFxuICAgICcjYWQ1Y2Q2JyxcbiAgICAnI2I4NWNkNicsXG4gICAgJyNjMjVjZDYnLFxuICAgICcjY2M1Y2Q2JyxcbiAgICAnI2Q2NWNkNicsXG4gICAgJyNkNjVjY2MnLFxuICAgICcjZDY1Y2MyJyxcbiAgICAnI2Q2NWNiOCcsXG4gICAgJyNkNjVjYWQnLFxuICAgICcjZDY1Y2EzJyxcbiAgICAnI2Q2NWM5OScsXG4gICAgJyNkNjVjOGYnLFxuICAgICcjZDY1Yzg1JyxcbiAgICAnI2Q2NWM3YScsXG4gICAgJyNkNjVjNzAnLFxuICAgICcjZDY1YzY2Jyxcbl07XG5leHBvcnQgY29uc3QgQ29sb3JzRGFyazogc3RyaW5nW10gPSBbXG4gICAgJyM3NzcnLFxuICAgICcjOGYzZDNkJyxcbiAgICAnIzhmNDQzZCcsXG4gICAgJyM4ZjRiM2QnLFxuICAgICcjOGY1MjNkJyxcbiAgICAnIzhmNTgzZCcsXG4gICAgJyM4ZjVmM2QnLFxuICAgICcjOGY2NjNkJyxcbiAgICAnIzhmNmQzZCcsXG4gICAgJyM4Zjc0M2QnLFxuICAgICcjOGY3YTNkJyxcbiAgICAnIzhmODEzZCcsXG4gICAgJyM4Zjg4M2QnLFxuICAgICcjOGY4ZjNkJyxcbiAgICAnIzg4OGYzZCcsXG4gICAgJyM4MThmM2QnLFxuICAgICcjN2E4ZjNkJyxcbiAgICAnIzc0OGYzZCcsXG4gICAgJyM2ZDhmM2QnLFxuICAgICcjNjY4ZjNkJyxcbiAgICAnIzVmOGYzZCcsXG4gICAgJyM1ODhmM2QnLFxuICAgICcjNTI4ZjNkJyxcbiAgICAnIzRiOGYzZCcsXG4gICAgJyM0NDhmM2QnLFxuICAgICcjM2Q4ZjNkJyxcbiAgICAnIzNkOGY0NCcsXG4gICAgJyMzZDhmNGInLFxuICAgICcjM2Q4ZjUyJyxcbiAgICAnIzNkOGY1OCcsXG4gICAgJyMzZDhmNWYnLFxuICAgICcjM2Q4ZjY2JyxcbiAgICAnIzNkOGY2ZCcsXG4gICAgJyMzZDhmNzQnLFxuICAgICcjM2Q4ZjdhJyxcbiAgICAnIzNkOGY4MScsXG4gICAgJyMzZDhmODgnLFxuICAgICcjM2Q4ZjhmJyxcbiAgICAnIzNkODg4ZicsXG4gICAgJyMzZDgxOGYnLFxuICAgICcjM2Q3YThmJyxcbiAgICAnIzNkNzQ4ZicsXG4gICAgJyMzZDZkOGYnLFxuICAgICcjM2Q2NjhmJyxcbiAgICAnIzNkNWY4ZicsXG4gICAgJyMzZDU4OGYnLFxuICAgICcjM2Q1MjhmJyxcbiAgICAnIzNkNGI4ZicsXG4gICAgJyMzZDQ0OGYnLFxuICAgICcjM2QzZDhmJyxcbiAgICAnIzQ0M2Q4ZicsXG4gICAgJyM0YjNkOGYnLFxuICAgICcjNTIzZDhmJyxcbiAgICAnIzU4M2Q4ZicsXG4gICAgJyM1ZjNkOGYnLFxuICAgICcjNjYzZDhmJyxcbiAgICAnIzZkM2Q4ZicsXG4gICAgJyM3NDNkOGYnLFxuICAgICcjN2EzZDhmJyxcbiAgICAnIzgxM2Q4ZicsXG4gICAgJyM4ODNkOGYnLFxuICAgICcjOGYzZDhmJyxcbiAgICAnIzhmM2Q4OCcsXG4gICAgJyM4ZjNkODEnLFxuICAgICcjOGYzZDdhJyxcbiAgICAnIzhmM2Q3NCcsXG4gICAgJyM4ZjNkNmQnLFxuICAgICcjOGYzZDY2JyxcbiAgICAnIzhmM2Q1ZicsXG4gICAgJyM4ZjNkNTgnLFxuICAgICcjOGYzZDUyJyxcbiAgICAnIzhmM2Q0YicsXG4gICAgJyM4ZjNkNDQnLFxuXTtcbiIsImltcG9ydCB7IGZhQWRvYmUgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1icmFuZHMtc3ZnLWljb25zL2ZhQWRvYmUnO1xuaW1wb3J0IHsgZmFHaXRBbHQgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1icmFuZHMtc3ZnLWljb25zL2ZhR2l0QWx0JztcbmltcG9ydCB7IGZhTGludXggfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1icmFuZHMtc3ZnLWljb25zL2ZhTGludXgnO1xuaW1wb3J0IHsgZmFOb2RlSnMgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1icmFuZHMtc3ZnLWljb25zL2ZhTm9kZUpzJztcbmltcG9ydCB7IGZhUGhwIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtYnJhbmRzLXN2Zy1pY29ucy9mYVBocCc7XG5pbXBvcnQgeyBmYVB5dGhvbiB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLWJyYW5kcy1zdmctaWNvbnMvZmFQeXRob24nO1xuaW1wb3J0IHsgZmFVYnVudHUgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1icmFuZHMtc3ZnLWljb25zL2ZhVWJ1bnR1JztcbmltcG9ydCB7IGZhV2luZG93cyB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLWJyYW5kcy1zdmctaWNvbnMvZmFXaW5kb3dzJztcbmltcG9ydCB7IGZhQXJyb3dEb3duIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhQXJyb3dEb3duJztcbmltcG9ydCB7IGZhQXJyb3dVcCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUFycm93VXAnO1xuaW1wb3J0IHsgZmFCYWxhbmNlU2NhbGUgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFCYWxhbmNlU2NhbGUnO1xuaW1wb3J0IHsgZmFCb3hPcGVuIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhQm94T3Blbic7XG5pbXBvcnQgeyBmYUNoZWNrQ2lyY2xlIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhQ2hlY2tDaXJjbGUnO1xuaW1wb3J0IHsgZmFDaGV2cm9uRG93biB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUNoZXZyb25Eb3duJztcbmltcG9ydCB7IGZhQ2hldnJvblJpZ2h0IH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhQ2hldnJvblJpZ2h0JztcbmltcG9ydCB7IGZhQ2lyY2xlIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhQ2lyY2xlJztcbmltcG9ydCB7IGZhQ2lyY2xlTm90Y2ggfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFDaXJjbGVOb3RjaCc7XG5pbXBvcnQgeyBmYUNvZ3MgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFDb2dzJztcbmltcG9ydCB7IGZhQ3ViZXMgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFDdWJlcyc7XG5pbXBvcnQgeyBmYURhdGFiYXNlIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRGF0YWJhc2UnO1xuaW1wb3J0IHsgZmFEb3dubG9hZCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYURvd25sb2FkJztcbmltcG9ydCB7IGZhRXhjbGFtYXRpb25UcmlhbmdsZSB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUV4Y2xhbWF0aW9uVHJpYW5nbGUnO1xuaW1wb3J0IHsgZmFFeHRlcm5hbExpbmtBbHQgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFFeHRlcm5hbExpbmtBbHQnO1xuaW1wb3J0IHsgZmFFeWVTbGFzaCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUV5ZVNsYXNoJztcbmltcG9ydCB7IGZhRmlsZSB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUZpbGUnO1xuaW1wb3J0IHsgZmFGaWxlQWx0IH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRmlsZUFsdCc7XG5pbXBvcnQgeyBmYUZpbGVBcmNoaXZlIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRmlsZUFyY2hpdmUnO1xuaW1wb3J0IHsgZmFGaWxlQ29kZSB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUZpbGVDb2RlJztcbmltcG9ydCB7IGZhRmlsZUV4Y2VsIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRmlsZUV4Y2VsJztcbmltcG9ydCB7IGZhRmlsZUltYWdlIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRmlsZUltYWdlJztcbmltcG9ydCB7IGZhRmlsZVBkZiB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUZpbGVQZGYnO1xuaW1wb3J0IHsgZmFGaWxlV29yZCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUZpbGVXb3JkJztcbmltcG9ydCB7IGZhRmlsbSB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUZpbG0nO1xuaW1wb3J0IHsgZmFGaXN0UmFpc2VkIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhRmlzdFJhaXNlZCc7XG5pbXBvcnQgeyBmYUZvbGRlciB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUZvbGRlcic7XG5pbXBvcnQgeyBmYUZvbGRlck9wZW4gfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFGb2xkZXJPcGVuJztcbmltcG9ydCB7IGZhRm9sZGVyUGx1cyB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUZvbGRlclBsdXMnO1xuaW1wb3J0IHsgZmFJbmZvQ2lyY2xlIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhSW5mb0NpcmNsZSc7XG5pbXBvcnQgeyBmYUtleSB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUtleSc7XG5pbXBvcnQgeyBmYUxldmVsVXBBbHQgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFMZXZlbFVwQWx0JztcbmltcG9ydCB7IGZhTGlzdCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUxpc3QnO1xuaW1wb3J0IHsgZmFMb2NrIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhTG9jayc7XG5pbXBvcnQgeyBmYU11c2ljIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhTXVzaWMnO1xuaW1wb3J0IHsgZmFSdW5uaW5nIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhUnVubmluZyc7XG5pbXBvcnQgeyBmYVNlYXJjaCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYVNlYXJjaCc7XG5pbXBvcnQgeyBmYVRlcm1pbmFsIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhVGVybWluYWwnO1xuaW1wb3J0IHsgZmFUaCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYVRoJztcbmltcG9ydCB7IGZhVGhMYXJnZSB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYVRoTGFyZ2UnO1xuaW1wb3J0IHsgZmFUaW1lcyB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYVRpbWVzJztcbmltcG9ydCB7IGZhVHJhc2ggfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFUcmFzaCc7XG5pbXBvcnQgeyBmYVVwbG9hZCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYVVwbG9hZCc7XG5pbXBvcnQgeyBmYVVzZXJzIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zL2ZhVXNlcnMnO1xuaW1wb3J0IHsgRm9udEF3ZXNvbWVJY29uIH0gZnJvbSAnQGZvcnRhd2Vzb21lL3JlYWN0LWZvbnRhd2Vzb21lJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IENob25reUljb25OYW1lIH0gZnJvbSAnLi4vLi4vdHlwZXMvaWNvbnMudHlwZXMnO1xuXG5jb25zdCBJY29uTWFwOiB7IFtpY29uTmFtZSBpbiBDaG9ua3lJY29uTmFtZV06IGFueSB9ID0ge1xuICAgIC8vIE1pc2NcbiAgICBbQ2hvbmt5SWNvbk5hbWUubG9hZGluZ106IGZhQ2lyY2xlTm90Y2gsXG4gICAgW0Nob25reUljb25OYW1lLmRyb3Bkb3duXTogZmFDaGV2cm9uRG93bixcblxuICAgIC8vIEZpbGUgQWN0aW9uczogRHJhZyAmIGRyb3BcbiAgICBbQ2hvbmt5SWNvbk5hbWUuZG5kRHJhZ2dpbmddOiBmYUZpc3RSYWlzZWQsXG4gICAgW0Nob25reUljb25OYW1lLmRuZENhbkRyb3BdOiBmYUFycm93RG93bixcbiAgICBbQ2hvbmt5SWNvbk5hbWUuZG5kQ2Fubm90RHJvcF06IGZhVGltZXMsXG5cbiAgICAvLyBGaWxlIEFjdGlvbnM6IEZpbGUgb3BlcmF0aW9uc1xuICAgIFtDaG9ua3lJY29uTmFtZS5vcGVuRmlsZXNdOiBmYUJveE9wZW4sXG4gICAgW0Nob25reUljb25OYW1lLm9wZW5QYXJlbnRGb2xkZXJdOiBmYUxldmVsVXBBbHQsXG4gICAgW0Nob25reUljb25OYW1lLnNlYXJjaF06IGZhU2VhcmNoLFxuXG4gICAgLy8gRmlsZSBBY3Rpb25zOiBVbnNvcnRlZFxuICAgIFtDaG9ua3lJY29uTmFtZS5jaGVja0FjdGl2ZV06IGZhQ2hlY2tDaXJjbGUsXG4gICAgW0Nob25reUljb25OYW1lLmNoZWNrSW5hY3RpdmVdOiBmYUNpcmNsZSxcbiAgICBbQ2hvbmt5SWNvbk5hbWUuZGVzY106IGZhQXJyb3dEb3duLFxuICAgIFtDaG9ua3lJY29uTmFtZS5hc2NdOiBmYUFycm93VXAsXG4gICAgW0Nob25reUljb25OYW1lLmxpc3RdOiBmYUxpc3QsXG4gICAgW0Nob25reUljb25OYW1lLmZvbGRlcl06IGZhRm9sZGVyLFxuICAgIFtDaG9ua3lJY29uTmFtZS5mb2xkZXJDcmVhdGVdOiBmYUZvbGRlclBsdXMsXG4gICAgW0Nob25reUljb25OYW1lLmZvbGRlck9wZW5dOiBmYUZvbGRlck9wZW4sXG4gICAgW0Nob25reUljb25OYW1lLnNtYWxsVGh1bWJuYWlsXTogZmFUaCxcbiAgICBbQ2hvbmt5SWNvbk5hbWUubGFyZ2VUaHVtYm5haWxdOiBmYVRoTGFyZ2UsXG4gICAgW0Nob25reUljb25OYW1lLmZvbGRlckNoYWluU2VwYXJhdG9yXTogZmFDaGV2cm9uUmlnaHQsXG4gICAgW0Nob25reUljb25OYW1lLmRvd25sb2FkXTogZmFEb3dubG9hZCxcbiAgICBbQ2hvbmt5SWNvbk5hbWUudXBsb2FkXTogZmFVcGxvYWQsXG4gICAgW0Nob25reUljb25OYW1lLnRyYXNoXTogZmFUcmFzaCxcbiAgICBbQ2hvbmt5SWNvbk5hbWUuZmFsbGJhY2tJY29uXTogZmFFeGNsYW1hdGlvblRyaWFuZ2xlLFxuICAgIFtDaG9ua3lJY29uTmFtZS5zeW1saW5rXTogZmFFeHRlcm5hbExpbmtBbHQsXG4gICAgW0Nob25reUljb25OYW1lLmhpZGRlbl06IGZhRXllU2xhc2gsXG5cbiAgICAvLyBmaWxlIHR5cGVzXG4gICAgW0Nob25reUljb25OYW1lLmZpbGVdOiBmYUZpbGUsXG4gICAgW0Nob25reUljb25OYW1lLmxpY2Vuc2VdOiBmYUJhbGFuY2VTY2FsZSxcbiAgICBbQ2hvbmt5SWNvbk5hbWUuY29kZV06IGZhRmlsZUNvZGUsXG4gICAgW0Nob25reUljb25OYW1lLmNvbmZpZ106IGZhQ29ncyxcbiAgICBbQ2hvbmt5SWNvbk5hbWUubW9kZWxdOiBmYUN1YmVzLFxuICAgIFtDaG9ua3lJY29uTmFtZS5kYXRhYmFzZV06IGZhRGF0YWJhc2UsXG4gICAgW0Nob25reUljb25OYW1lLnRleHRdOiBmYUZpbGVBbHQsXG4gICAgW0Nob25reUljb25OYW1lLmFyY2hpdmVdOiBmYUZpbGVBcmNoaXZlLFxuICAgIFtDaG9ua3lJY29uTmFtZS5jc3ZdOiBmYUZpbGVFeGNlbCxcbiAgICBbQ2hvbmt5SWNvbk5hbWUuaW1hZ2VdOiBmYUZpbGVJbWFnZSxcbiAgICBbQ2hvbmt5SWNvbk5hbWUucGRmXTogZmFGaWxlUGRmLFxuICAgIFtDaG9ua3lJY29uTmFtZS53b3JkXTogZmFGaWxlV29yZCxcbiAgICBbQ2hvbmt5SWNvbk5hbWUudmlkZW9dOiBmYUZpbG0sXG4gICAgW0Nob25reUljb25OYW1lLmluZm9dOiBmYUluZm9DaXJjbGUsXG4gICAgW0Nob25reUljb25OYW1lLmtleV06IGZhS2V5LFxuICAgIFtDaG9ua3lJY29uTmFtZS5sb2NrXTogZmFMb2NrLFxuICAgIFtDaG9ua3lJY29uTmFtZS5tdXNpY106IGZhTXVzaWMsXG4gICAgW0Nob25reUljb25OYW1lLmZsYXNoXTogZmFSdW5uaW5nLFxuICAgIFtDaG9ua3lJY29uTmFtZS50ZXJtaW5hbF06IGZhVGVybWluYWwsXG4gICAgW0Nob25reUljb25OYW1lLmF1dGhvcnNdOiBmYVVzZXJzLFxuICAgIFtDaG9ua3lJY29uTmFtZS5hZG9iZV06IGZhQWRvYmUsXG4gICAgW0Nob25reUljb25OYW1lLmdpdF06IGZhR2l0QWx0LFxuICAgIFtDaG9ua3lJY29uTmFtZS5saW51eF06IGZhTGludXgsXG4gICAgW0Nob25reUljb25OYW1lLndpbmRvd3NdOiBmYVdpbmRvd3MsXG4gICAgW0Nob25reUljb25OYW1lLm5vZGVqc106IGZhTm9kZUpzLFxuICAgIFtDaG9ua3lJY29uTmFtZS5waHBdOiBmYVBocCxcbiAgICBbQ2hvbmt5SWNvbk5hbWUucHl0aG9uXTogZmFQeXRob24sXG4gICAgW0Nob25reUljb25OYW1lLnVidW50dV06IGZhVWJ1bnR1LFxufSBhcyBjb25zdDtcblxuZXhwb3J0IGludGVyZmFjZSBDaG9ua3lJY29uUHJvcHMge1xuICAgIGljb246IENob25reUljb25OYW1lIHwgc3RyaW5nO1xuICAgIHNwaW4/OiBib29sZWFuO1xuICAgIGNsYXNzTmFtZT86IHN0cmluZztcbiAgICBjb2xvcj86IHN0cmluZztcbiAgICBmaXhlZFdpZHRoPzogYm9vbGVhbjtcbiAgICBzaXplPzogJ3hzJyB8ICdsZycgfCAnc20nO1xuICAgIHN0eWxlPzogUmVhY3QuQ1NTUHJvcGVydGllcztcbn1cblxuZXhwb3J0IGNvbnN0IENob25reUljb25GQTogUmVhY3QuRkM8Q2hvbmt5SWNvblByb3BzPiA9IFJlYWN0Lm1lbW8oKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBpY29uIH0gPSBwcm9wcztcblxuICAgIGNvbnN0IGZhUHJvcHMgPSB7XG4gICAgICAgIC4uLnByb3BzLFxuICAgICAgICBpY29uOiBJY29uTWFwW2ljb25dID8gSWNvbk1hcFtpY29uXSA6IEljb25NYXAuZmFsbGJhY2tJY29uLFxuICAgIH0gYXMgY29uc3Q7XG4gICAgcmV0dXJuIDxGb250QXdlc29tZUljb24gey4uLmZhUHJvcHN9IC8+O1xufSk7XG4iLCIvKipcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMjBcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGV4dFBsYWNlaG9sZGVyUHJvcHMge1xuICAgIG1pbkxlbmd0aDogbnVtYmVyO1xuICAgIG1heExlbmd0aDogbnVtYmVyO1xufVxuXG5jb25zdCBnZXRSYW5kb21JbnQgPSAobWluOiBudW1iZXIsIG1heDogbnVtYmVyKSA9PiB7XG4gICAgcmV0dXJuIG1pbiArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIE1hdGguZmxvb3IobWF4IC0gbWluKSk7XG59O1xuZXhwb3J0IGNvbnN0IFRleHRQbGFjZWhvbGRlcjogUmVhY3QuRkM8VGV4dFBsYWNlaG9sZGVyUHJvcHM+ID0gUmVhY3QubWVtbygocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IG1pbkxlbmd0aCwgbWF4TGVuZ3RoIH0gPSBwcm9wcztcblxuICAgIGNvbnN0IHBsYWNlaG9sZGVyTGVuZ3RoID0gZ2V0UmFuZG9tSW50KG1pbkxlbmd0aCwgbWF4TGVuZ3RoKTtcbiAgICBjb25zdCB3aGl0ZXNwYWNlID0gJyZuYnNwOycucmVwZWF0KHBsYWNlaG9sZGVyTGVuZ3RoKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxzcGFuXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJjaG9ua3ktdGV4dC1wbGFjZWhvbGRlclwiXG4gICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IHdoaXRlc3BhY2UgfX1cbiAgICAgICAgLz5cbiAgICApO1xufSk7XG4iLCIvKipcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMjBcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCBjIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAndHNkZWYnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVUaHVtYm5haWxQcm9wcyB7XG4gICAgdGh1bWJuYWlsVXJsOiBOdWxsYWJsZTxzdHJpbmc+O1xufVxuXG5leHBvcnQgY29uc3QgRmlsZVRodW1ibmFpbDogUmVhY3QuRkM8RmlsZVRodW1ibmFpbFByb3BzPiA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgdGh1bWJuYWlsVXJsIH0gPSBwcm9wcztcblxuICAgIGNvbnN0IHRodW1ibmFpbFN0eWxlOiBSZWFjdC5DU1NQcm9wZXJ0aWVzID0gdGh1bWJuYWlsVXJsXG4gICAgICAgID8geyBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJyR7dGh1bWJuYWlsVXJsfScpYCB9XG4gICAgICAgIDoge307XG5cbiAgICBjb25zdCBjbGFzc05hbWUgPSBjKHtcbiAgICAgICAgJ2Nob25reS1maWxlLXRodW1ibmFpbCc6IHRydWUsXG4gICAgICAgICdjaG9ua3ktZmlsZS10aHVtYm5haWwtaGlkZGVuJzogIXRodW1ibmFpbFVybCxcbiAgICB9KTtcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0gc3R5bGU9e3RodW1ibmFpbFN0eWxlfSAvPjtcbn07XG4iLCJpbXBvcnQgYyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAndHNkZWYnO1xuXG5pbXBvcnQgeyBGaWxlRGF0YSB9IGZyb20gJy4uLy4uL3R5cGVzL2ZpbGVzLnR5cGVzJztcbmltcG9ydCB7IENob25reUljb25OYW1lIH0gZnJvbSAnLi4vLi4vdHlwZXMvaWNvbnMudHlwZXMnO1xuaW1wb3J0IHsgQ29sb3JzRGFyaywgQ29sb3JzTGlnaHQsIHVzZUljb25EYXRhIH0gZnJvbSAnLi4vLi4vdXRpbC9maWxlLWljb24taGVscGVyJztcbmltcG9ydCB7IENob25reUljb25GQSB9IGZyb20gJy4uL2V4dGVybmFsL0Nob25reUljb24nO1xuaW1wb3J0IHsgVGV4dFBsYWNlaG9sZGVyIH0gZnJvbSAnLi4vZXh0ZXJuYWwvVGV4dFBsYWNlaG9sZGVyJztcbmltcG9ydCB7IHVzZURuZEljb24sIHVzZVRodW1ibmFpbFVybCB9IGZyb20gJy4vQmFzZUZpbGVFbnRyeS1ob29rcyc7XG5pbXBvcnQgeyBEbkRQcm9wcyB9IGZyb20gJy4vRG5ERmlsZUVudHJ5JztcbmltcG9ydCB7IEZpbGVUaHVtYm5haWwgfSBmcm9tICcuL0ZpbGVUaHVtYm5haWwnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVFbnRyeVByb3BzIGV4dGVuZHMgRG5EUHJvcHMge1xuICAgIGZpbGU6IE51bGxhYmxlPEZpbGVEYXRhPjtcblxuICAgIGRpc3BsYXlJbmRleDogbnVtYmVyOyAvLyBJbmRleCBhdCB3aGljaCB0aGlzIGZpbGUgYXBwZWFycyBpbiB0aGUgZmlsZSBsaXN0XG5cbiAgICBzZWxlY3RlZDogYm9vbGVhbjtcblxuICAgIHN0eWxlPzogUmVhY3QuQ1NTUHJvcGVydGllcztcbn1cblxuZXhwb3J0IGNvbnN0IEJhc2VGaWxlRW50cnk6IFJlYWN0LkZDPEZpbGVFbnRyeVByb3BzPiA9IFJlYWN0Lm1lbW8oKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBmaWxlLCBzZWxlY3RlZCwgc3R5bGUsIGRuZElzRHJhZ2dpbmcsIGRuZElzT3ZlciwgZG5kQ2FuRHJvcCB9ID0gcHJvcHM7XG5cbiAgICAvLyBEZWFsIHdpdGggdGh1bWJuYWlsc1xuICAgIGNvbnN0IFt0aHVtYm5haWxVcmwsIHNldFRodW1ibmFpbFVybF0gPSB1c2VTdGF0ZTxOdWxsYWJsZTxzdHJpbmc+PihudWxsKTtcbiAgICBjb25zdCBbdGh1bWJuYWlsTG9hZGluZywgc2V0VGh1bWJuYWlsTG9hZGluZ10gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG4gICAgdXNlVGh1bWJuYWlsVXJsKGZpbGUsIHNldFRodW1ibmFpbFVybCwgc2V0VGh1bWJuYWlsTG9hZGluZyk7XG5cbiAgICAvLyBEZWFsIHdpdGggZmlsZSBpY29uXG4gICAgY29uc3QgaWNvbkRhdGEgPSB1c2VJY29uRGF0YShmaWxlKTtcbiAgICBjb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSB0aHVtYm5haWxVcmxcbiAgICAgICAgPyBDb2xvcnNEYXJrW2ljb25EYXRhLmNvbG9yQ29kZV1cbiAgICAgICAgOiBDb2xvcnNMaWdodFtpY29uRGF0YS5jb2xvckNvZGVdO1xuICAgIGNvbnN0IGljb25TcGluID0gdGh1bWJuYWlsTG9hZGluZyB8fCAhZmlsZTtcbiAgICBjb25zdCBpY29uID0gdGh1bWJuYWlsTG9hZGluZyA/IENob25reUljb25OYW1lLmxvYWRpbmcgOiBpY29uRGF0YS5pY29uO1xuXG4gICAgLy8gRGVhbCB3aXRoIGRyYWcgJiBkcm9wXG4gICAgY29uc3QgZG5kSWNvbiA9IHVzZURuZEljb24oc2VsZWN0ZWQsIGRuZElzRHJhZ2dpbmcsIGRuZElzT3ZlciwgZG5kQ2FuRHJvcCk7XG5cbiAgICAvLyBSZW5kZXIgdGhlIGNvbXBvbmVudFxuICAgIGNvbnN0IGNsYXNzTmFtZSA9IGMoe1xuICAgICAgICAnY2hvbmt5LWZpbGUtZW50cnknOiB0cnVlLFxuICAgICAgICAnY2hvbmt5LWZpbGUtZW50cnktc2VsZWN0ZWQnOiBzZWxlY3RlZCxcbiAgICAgICAgJ2Nob25reS1maWxlLWVudHJ5LWRyYWdnaW5nJzogZG5kSXNEcmFnZ2luZyxcbiAgICAgICAgJ2Nob25reS1maWxlLWVudHJ5LWRyb3AtaG92ZXJlZCc6IGRuZElzT3ZlciAmJiBkbmRDYW5Ecm9wLFxuICAgIH0pO1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9IHN0eWxlPXtzdHlsZX0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNob25reS1maWxlLWVudHJ5LWluc2lkZVwiPlxuICAgICAgICAgICAgICAgIHtkbmRJY29uICYmIChcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjaG9ua3ktZmlsZS1lbnRyeS1kbmQtaW5kaWNhdG9yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Q2hvbmt5SWNvbkZBIGljb249e2RuZEljb259IC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjaG9ua3ktZmlsZS1lbnRyeS1wcmV2aWV3XCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2hvbmt5LWZpbGUtaWNvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjaG9ua3ktZmlsZS1pY29uLWluc2lkZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDaG9ua3lJY29uRkEgaWNvbj17aWNvbn0gc3Bpbj17aWNvblNwaW59IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2hvbmt5LWZpbGUtc2VsZWN0aW9uXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPEZpbGVUaHVtYm5haWwgdGh1bWJuYWlsVXJsPXt0aHVtYm5haWxVcmx9IC8+XG4gICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNob25reS1maWxlLWJhY2tncm91bmRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yIH19XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjaG9ua3ktZmlsZS1lbnRyeS1kZXNjcmlwdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICB7ZmlsZSA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUubmFtZVxuICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgPFRleHRQbGFjZWhvbGRlciBtaW5MZW5ndGg9ezE1fSBtYXhMZW5ndGg9ezIwfSAvPlxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59KTtcbiIsImltcG9ydCB7IEZpbGVEYXRhIH0gZnJvbSAnLi9maWxlcy50eXBlcyc7XG5cbmV4cG9ydCBlbnVtIFNwZWNpYWxBY3Rpb24ge1xuICAgIE1vdXNlQ2xpY2tGaWxlID0gJ21vdXNlX2NsaWNrX2ZpbGUnLFxuICAgIEtleWJvYXJkQ2xpY2tGaWxlID0gJ2tleWJvYXJkX2NsaWNrX2ZpbGUnLFxuXG4gICAgVG9nZ2xlU2VhcmNoQmFyID0gJ3RvZ2dsZV9zZWFyY2hfYmFyJyxcblxuICAgIERyYWdORHJvcFN0YXJ0ID0gJ2RyYWdfbl9kcm9wX3N0YXJ0JyxcbiAgICBEcmFnTkRyb3BFbmQgPSAnZHJhZ19uX2Ryb3BfZW5kJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTcGVjaWFsRmlsZU1vdXNlQ2xpY2tBY3Rpb24ge1xuICAgIGFjdGlvbk5hbWU6IFNwZWNpYWxBY3Rpb24uTW91c2VDbGlja0ZpbGU7XG4gICAgZmlsZTogRmlsZURhdGE7XG4gICAgYWx0S2V5OiBib29sZWFuO1xuICAgIGN0cmxLZXk6IGJvb2xlYW47XG4gICAgc2hpZnRLZXk6IGJvb2xlYW47XG4gICAgY2xpY2tUeXBlOiAnc2luZ2xlJyB8ICdkb3VibGUnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNwZWNpYWxGaWxlS2V5Ym9hcmRDbGlja0FjdGlvbiB7XG4gICAgYWN0aW9uTmFtZTogU3BlY2lhbEFjdGlvbi5LZXlib2FyZENsaWNrRmlsZTtcbiAgICBmaWxlOiBGaWxlRGF0YTtcbiAgICBlbnRlcktleTogYm9vbGVhbjtcbiAgICBzcGFjZUtleTogYm9vbGVhbjtcbiAgICBhbHRLZXk6IGJvb2xlYW47XG4gICAgY3RybEtleTogYm9vbGVhbjtcbiAgICBzaGlmdEtleTogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTcGVjaWFsVG9nZ2xlU2VhcmNoQmFyQWN0aW9uIHtcbiAgICBhY3Rpb25OYW1lOiBTcGVjaWFsQWN0aW9uLktleWJvYXJkQ2xpY2tGaWxlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNwZWNpYWxEcmFnTkRyb3BTdGFydEFjdGlvbiB7XG4gICAgYWN0aW9uTmFtZTogU3BlY2lhbEFjdGlvbi5EcmFnTkRyb3BTdGFydDtcbiAgICBkcmFnU291cmNlOiBGaWxlRGF0YTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTcGVjaWFsRHJhZ05Ecm9wRW5kQWN0aW9uIHtcbiAgICBhY3Rpb25OYW1lOiBTcGVjaWFsQWN0aW9uLkRyYWdORHJvcEVuZDtcbiAgICBkcmFnU291cmNlOiBGaWxlRGF0YTtcbiAgICBkcm9wVGFyZ2V0OiBGaWxlRGF0YTtcbiAgICBkcm9wRWZmZWN0OiAnbW92ZScgfCAnY29weSc7XG59XG5cbmV4cG9ydCB0eXBlIFNwZWNpYWxBY3Rpb25EYXRhID1cbiAgICB8IFNwZWNpYWxGaWxlTW91c2VDbGlja0FjdGlvblxuICAgIHwgU3BlY2lhbEZpbGVLZXlib2FyZENsaWNrQWN0aW9uXG4gICAgfCBTcGVjaWFsVG9nZ2xlU2VhcmNoQmFyQWN0aW9uXG4gICAgfCBTcGVjaWFsRHJhZ05Ecm9wU3RhcnRBY3Rpb25cbiAgICB8IFNwZWNpYWxEcmFnTkRyb3BFbmRBY3Rpb247XG5leHBvcnQgdHlwZSBJbnRlcm5hbFNwZWNpYWxBY3Rpb25EaXNwYXRjaGVyID0gKGFjdGlvbkRhdGE6IFNwZWNpYWxBY3Rpb25EYXRhKSA9PiB2b2lkO1xuIiwiaW1wb3J0IHsgdXNlQ29udGV4dCwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTmlsYWJsZSwgTnVsbGFibGUgfSBmcm9tICd0c2RlZic7XG5cbmltcG9ydCB7IEZpbGVEYXRhIH0gZnJvbSAnLi4vLi4vdHlwZXMvZmlsZXMudHlwZXMnO1xuaW1wb3J0IHsgQ2hvbmt5SWNvbk5hbWUgfSBmcm9tICcuLi8uLi90eXBlcy9pY29ucy50eXBlcyc7XG5pbXBvcnQgeyBDaG9ua3lUaHVtYm5haWxHZW5lcmF0b3JDb250ZXh0IH0gZnJvbSAnLi4vLi4vdXRpbC9jb250ZXh0JztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uLy4uL3V0aWwvbG9nZ2VyJztcblxuZXhwb3J0IGNvbnN0IHVzZURuZEljb24gPSAoXG4gICAgc2VsZWN0ZWQ6IE5pbGFibGU8Ym9vbGVhbj4sXG4gICAgaXNEcmFnZ2luZzogTmlsYWJsZTxib29sZWFuPixcbiAgICBpc092ZXI6IE5pbGFibGU8Ym9vbGVhbj4sXG4gICAgY2FuRHJvcDogTmlsYWJsZTxib29sZWFuPlxuKTogTnVsbGFibGU8Q2hvbmt5SWNvbk5hbWU+ID0+IHtcbiAgICBpZiAoaXNPdmVyKSB7XG4gICAgICAgIHJldHVybiBjYW5Ecm9wICYmICFzZWxlY3RlZFxuICAgICAgICAgICAgPyBDaG9ua3lJY29uTmFtZS5kbmRDYW5Ecm9wXG4gICAgICAgICAgICA6IENob25reUljb25OYW1lLmRuZENhbm5vdERyb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzRHJhZ2dpbmcgPyBDaG9ua3lJY29uTmFtZS5kbmREcmFnZ2luZyA6IG51bGw7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlVGh1bWJuYWlsVXJsID0gKFxuICAgIGZpbGU6IE51bGxhYmxlPEZpbGVEYXRhPixcbiAgICBzZXRUaHVtYm5haWxVcmw6ICh1cmw6IHN0cmluZykgPT4gdm9pZCxcbiAgICBzZXRUaHVtYm5haWxMb2FkaW5nOiAoc3RhdGU6IGJvb2xlYW4pID0+IHZvaWRcbikgPT4ge1xuICAgIGNvbnN0IHRodW1ibmFpbEdlbmVyYXRvciA9IHVzZUNvbnRleHQoQ2hvbmt5VGh1bWJuYWlsR2VuZXJhdG9yQ29udGV4dCk7XG5cbiAgICBjb25zdCBkZXBzID0gW2ZpbGUsIHNldFRodW1ibmFpbFVybCwgc2V0VGh1bWJuYWlsTG9hZGluZywgdGh1bWJuYWlsR2VuZXJhdG9yXTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBsZXQgbG9hZGluZ0NhbmNlbGxlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChmaWxlKSB7XG4gICAgICAgICAgICBpZiAodGh1bWJuYWlsR2VuZXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgc2V0VGh1bWJuYWlsTG9hZGluZyh0cnVlKTtcbiAgICAgICAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB0aHVtYm5haWxHZW5lcmF0b3IoZmlsZSkpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCh0aHVtYm5haWxVcmw6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvYWRpbmdDYW5jZWxsZWQpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRodW1ibmFpbExvYWRpbmcoZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGh1bWJuYWlsVXJsICYmIHR5cGVvZiB0aHVtYm5haWxVcmwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGh1bWJuYWlsVXJsKHRodW1ibmFpbFVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbG9hZGluZ0NhbmNlbGxlZCkgc2V0VGh1bWJuYWlsTG9hZGluZyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2dnZXIuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYFVzZXItZGVmaW5lZCBcInRodW1ibmFpbEdlbmVyYXRvclwiIGhhbmRsZXIgdGhyZXcgYW4gZXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlsZS50aHVtYm5haWxVcmwpIHtcbiAgICAgICAgICAgICAgICBzZXRUaHVtYm5haWxVcmwoZmlsZS50aHVtYm5haWxVcmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGxvYWRpbmdDYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICB9O1xuICAgIH0sIGRlcHMpO1xufTtcbiIsImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTnVsbGFibGUgfSBmcm9tICd0c2RlZic7XG5cbmltcG9ydCB7IEZpbGVEYXRhIH0gZnJvbSAnLi4vLi4vdHlwZXMvZmlsZXMudHlwZXMnO1xuaW1wb3J0IHtcbiAgICBTcGVjaWFsQWN0aW9uLFxuICAgIFNwZWNpYWxGaWxlTW91c2VDbGlja0FjdGlvbixcbn0gZnJvbSAnLi4vLi4vdHlwZXMvc3BlY2lhbC1hY3Rpb25zLnR5cGVzJztcbmltcG9ydCB7IENob25reURpc3BhdGNoU3BlY2lhbEFjdGlvbkNvbnRleHQgfSBmcm9tICcuLi8uLi91dGlsL2NvbnRleHQnO1xuaW1wb3J0IHsgS2V5Ym9hcmRDbGlja0V2ZW50LCBNb3VzZUNsaWNrRXZlbnQgfSBmcm9tICcuL0NsaWNrYWJsZVdyYXBwZXInO1xuXG5leHBvcnQgY29uc3QgdXNlRmlsZUNsaWNrSGFuZGxlcnMgPSAoZmlsZTogTnVsbGFibGU8RmlsZURhdGE+KSA9PiB7XG4gICAgY29uc3QgZGlzcGF0Y2hTcGVjaWFsQWN0aW9uID0gdXNlQ29udGV4dChDaG9ua3lEaXNwYXRjaFNwZWNpYWxBY3Rpb25Db250ZXh0KTtcblxuICAgIC8vIFByZXBhcmUgYmFzZSBoYW5kbGVyc1xuICAgIGNvbnN0IGhhbmRsZXJEZXBzID0gW2ZpbGUsIGRpc3BhdGNoU3BlY2lhbEFjdGlvbl07XG4gICAgY29uc3Qgb25Nb3VzZUNsaWNrID0gdXNlQ2FsbGJhY2soXG4gICAgICAgIChcbiAgICAgICAgICAgIGV2ZW50OiBNb3VzZUNsaWNrRXZlbnQsXG4gICAgICAgICAgICBjbGlja1R5cGU6IFNwZWNpYWxGaWxlTW91c2VDbGlja0FjdGlvblsnY2xpY2tUeXBlJ11cbiAgICAgICAgKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWZpbGUpIHJldHVybjtcblxuICAgICAgICAgICAgZGlzcGF0Y2hTcGVjaWFsQWN0aW9uKHtcbiAgICAgICAgICAgICAgICBhY3Rpb25OYW1lOiBTcGVjaWFsQWN0aW9uLk1vdXNlQ2xpY2tGaWxlLFxuICAgICAgICAgICAgICAgIGNsaWNrVHlwZSxcbiAgICAgICAgICAgICAgICBmaWxlLFxuICAgICAgICAgICAgICAgIGFsdEtleTogZXZlbnQuYWx0S2V5LFxuICAgICAgICAgICAgICAgIGN0cmxLZXk6IGV2ZW50LmN0cmxLZXksXG4gICAgICAgICAgICAgICAgc2hpZnRLZXk6IGV2ZW50LnNoaWZ0S2V5LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGhhbmRsZXJEZXBzXG4gICAgKTtcbiAgICBjb25zdCBvbktleWJvYXJkQ2xpY2sgPSB1c2VDYWxsYmFjaygoZXZlbnQ6IEtleWJvYXJkQ2xpY2tFdmVudCkgPT4ge1xuICAgICAgICBpZiAoIWZpbGUpIHJldHVybjtcblxuICAgICAgICBkaXNwYXRjaFNwZWNpYWxBY3Rpb24oe1xuICAgICAgICAgICAgYWN0aW9uTmFtZTogU3BlY2lhbEFjdGlvbi5LZXlib2FyZENsaWNrRmlsZSxcbiAgICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgICBlbnRlcktleTogZXZlbnQuZW50ZXJLZXksXG4gICAgICAgICAgICBzcGFjZUtleTogZXZlbnQuc3BhY2VLZXksXG4gICAgICAgICAgICBhbHRLZXk6IGV2ZW50LmFsdEtleSxcbiAgICAgICAgICAgIGN0cmxLZXk6IGV2ZW50LmN0cmxLZXksXG4gICAgICAgICAgICBzaGlmdEtleTogZXZlbnQuc2hpZnRLZXksXG4gICAgICAgIH0pO1xuICAgIH0sIGhhbmRsZXJEZXBzKTtcblxuICAgIC8vIFByZXBhcmUgc2luZ2xlL2RvdWJsZSBjbGljayBoYW5kbGVyc1xuICAgIGNvbnN0IG9uU2luZ2xlQ2xpY2sgPSB1c2VDYWxsYmFjayhcbiAgICAgICAgKGV2ZW50OiBNb3VzZUNsaWNrRXZlbnQpID0+IG9uTW91c2VDbGljayhldmVudCwgJ3NpbmdsZScpLFxuICAgICAgICBbb25Nb3VzZUNsaWNrXVxuICAgICk7XG4gICAgY29uc3Qgb25Eb3VibGVDbGljayA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAoZXZlbnQ6IE1vdXNlQ2xpY2tFdmVudCkgPT4gb25Nb3VzZUNsaWNrKGV2ZW50LCAnZG91YmxlJyksXG4gICAgICAgIFtvbk1vdXNlQ2xpY2tdXG4gICAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIG9uU2luZ2xlQ2xpY2ssXG4gICAgICAgIG9uRG91YmxlQ2xpY2ssXG4gICAgICAgIG9uS2V5Ym9hcmRDbGljayxcbiAgICB9O1xufTtcbiIsIi8qKlxuICogQGF1dGhvciBUaW11ciBLdXpoYWdhbGl5ZXYgPHRpbS5rdXpoQGdtYWlsLmNvbT5cbiAqIEBjb3B5cmlnaHQgMjAyMFxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VDb250ZXh0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTmlsYWJsZSwgTnVsbGFibGUgfSBmcm9tICd0c2RlZic7XG5cbmltcG9ydCB7IENob25reURvdWJsZUNsaWNrRGVsYXlDb250ZXh0IH0gZnJvbSAnLi4vLi4vdXRpbC9jb250ZXh0JztcbmltcG9ydCB7XG4gICAgS2V5Ym9hcmRDbGlja0V2ZW50LFxuICAgIEtleWJvYXJkQ2xpY2tFdmVudEhhbmRsZXIsXG4gICAgTW91c2VDbGlja0V2ZW50LFxuICAgIE1vdXNlQ2xpY2tFdmVudEhhbmRsZXIsXG59IGZyb20gJy4vQ2xpY2thYmxlV3JhcHBlcic7XG5cbmV4cG9ydCBjb25zdCB1c2VDbGlja0hhbmRsZXIgPSAoXG4gICAgb25TaW5nbGVDbGljazogTmlsYWJsZTxNb3VzZUNsaWNrRXZlbnRIYW5kbGVyPixcbiAgICBvbkRvdWJsZUNsaWNrOiBOaWxhYmxlPE1vdXNlQ2xpY2tFdmVudEhhbmRsZXI+XG4pID0+IHtcbiAgICBjb25zdCBkb3VibGVDbGlja0RlbGF5ID0gdXNlQ29udGV4dChDaG9ua3lEb3VibGVDbGlja0RlbGF5Q29udGV4dCk7XG5cbiAgICBjb25zdCBjb3VudGVyID0gdXNlTWVtbyhcbiAgICAgICAgKCkgPT4gKHtcbiAgICAgICAgICAgIGNsaWNrQ291bnQ6IDAsXG4gICAgICAgICAgICBjbGlja1RpbWVvdXQ6IG51bGwgYXMgTnVsbGFibGU8bnVtYmVyPixcbiAgICAgICAgfSksXG4gICAgICAgIFtdXG4gICAgKTtcblxuICAgIGNvbnN0IGRlcHMgPSBbZG91YmxlQ2xpY2tEZWxheSwgb25TaW5nbGVDbGljaywgb25Eb3VibGVDbGlja107XG4gICAgcmV0dXJuIHVzZUNhbGxiYWNrKChldmVudDogUmVhY3QuTW91c2VFdmVudCkgPT4ge1xuICAgICAgICBjb25zdCBtb3VzZUNsaWNrRXZlbnQ6IE1vdXNlQ2xpY2tFdmVudCA9IHtcbiAgICAgICAgICAgIGFsdEtleTogZXZlbnQuYWx0S2V5LFxuICAgICAgICAgICAgY3RybEtleTogZXZlbnQuY3RybEtleSxcbiAgICAgICAgICAgIHNoaWZ0S2V5OiBldmVudC5zaGlmdEtleSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb3VudGVyLmNsaWNrQ291bnQrKztcbiAgICAgICAgaWYgKGNvdW50ZXIuY2xpY2tDb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgaWYgKG9uU2luZ2xlQ2xpY2spIHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIG9uU2luZ2xlQ2xpY2sobW91c2VDbGlja0V2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvdW50ZXIuY2xpY2tDb3VudCA9IDE7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjb3VudGVyLmNsaWNrVGltZW91dCA9IHNldFRpbWVvdXQoXG4gICAgICAgICAgICAgICAgKCkgPT4gKGNvdW50ZXIuY2xpY2tDb3VudCA9IDApLFxuICAgICAgICAgICAgICAgIGRvdWJsZUNsaWNrRGVsYXlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAoY291bnRlci5jbGlja0NvdW50ID09PSAyKSB7XG4gICAgICAgICAgICBpZiAob25Eb3VibGVDbGljaykge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgb25Eb3VibGVDbGljayhtb3VzZUNsaWNrRXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb3VudGVyLmNsaWNrVGltZW91dCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoY291bnRlci5jbGlja1RpbWVvdXQpO1xuICAgICAgICAgICAgICAgIGNvdW50ZXIuY2xpY2tUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjb3VudGVyLmNsaWNrQ291bnQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgZGVwcyk7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlS2V5RG93bkhhbmRsZXIgPSAob25LZXlib2FyZENsaWNrPzogS2V5Ym9hcmRDbGlja0V2ZW50SGFuZGxlcikgPT4ge1xuICAgIGNvbnN0IGRlcHMgPSBbb25LZXlib2FyZENsaWNrXTtcbiAgICByZXR1cm4gdXNlQ2FsbGJhY2soKGV2ZW50OiBSZWFjdC5LZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICAgIGlmICghb25LZXlib2FyZENsaWNrKSByZXR1cm47XG5cbiAgICAgICAgY29uc3Qga2V5Ym9hcmRDbGlja0V2ZW50OiBLZXlib2FyZENsaWNrRXZlbnQgPSB7XG4gICAgICAgICAgICBlbnRlcktleTogZXZlbnQubmF0aXZlRXZlbnQuY29kZSA9PT0gJ0VudGVyJyxcbiAgICAgICAgICAgIHNwYWNlS2V5OiBldmVudC5uYXRpdmVFdmVudC5jb2RlID09PSAnU3BhY2UnLFxuICAgICAgICAgICAgYWx0S2V5OiBldmVudC5hbHRLZXksXG4gICAgICAgICAgICBjdHJsS2V5OiBldmVudC5jdHJsS2V5LFxuICAgICAgICAgICAgc2hpZnRLZXk6IGV2ZW50LnNoaWZ0S2V5LFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChrZXlib2FyZENsaWNrRXZlbnQuc3BhY2VLZXkgfHwga2V5Ym9hcmRDbGlja0V2ZW50LmVudGVyS2V5KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgb25LZXlib2FyZENsaWNrKGtleWJvYXJkQ2xpY2tFdmVudCk7XG4gICAgICAgIH1cbiAgICB9LCBkZXBzKTtcbn07XG4iLCIvKipcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMjBcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBBbnlPYmplY3RXaXRoU3RyaW5nS2V5cyB9IGZyb20gJ3RzZGVmJztcblxuaW1wb3J0IHsgdXNlQ2xpY2tIYW5kbGVyLCB1c2VLZXlEb3duSGFuZGxlciB9IGZyb20gJy4vQ2xpY2thYmxlV3JhcHBlci1ob29rcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW91c2VDbGlja0V2ZW50IHtcbiAgICBhbHRLZXk6IGJvb2xlYW47XG4gICAgY3RybEtleTogYm9vbGVhbjtcbiAgICBzaGlmdEtleTogYm9vbGVhbjtcbn1cbmV4cG9ydCB0eXBlIE1vdXNlQ2xpY2tFdmVudEhhbmRsZXIgPSAoZXZlbnQ6IE1vdXNlQ2xpY2tFdmVudCkgPT4gdm9pZDtcblxuZXhwb3J0IGludGVyZmFjZSBLZXlib2FyZENsaWNrRXZlbnQge1xuICAgIGVudGVyS2V5OiBib29sZWFuO1xuICAgIHNwYWNlS2V5OiBib29sZWFuO1xuICAgIGFsdEtleTogYm9vbGVhbjtcbiAgICBjdHJsS2V5OiBib29sZWFuO1xuICAgIHNoaWZ0S2V5OiBib29sZWFuO1xufVxuZXhwb3J0IHR5cGUgS2V5Ym9hcmRDbGlja0V2ZW50SGFuZGxlciA9IChldmVudDogS2V5Ym9hcmRDbGlja0V2ZW50KSA9PiB2b2lkO1xuXG5leHBvcnQgaW50ZXJmYWNlIENsaWNrYWJsZVdyYXBwZXJQcm9wcyB7XG4gICAgd3JhcHBlclRhZzogYW55O1xuICAgIHBhc3N0aHJvdWdoUHJvcHM/OiBhbnk7XG5cbiAgICBvblNpbmdsZUNsaWNrPzogTW91c2VDbGlja0V2ZW50SGFuZGxlcjtcbiAgICBvbkRvdWJsZUNsaWNrPzogTW91c2VDbGlja0V2ZW50SGFuZGxlcjtcbiAgICBvbktleWJvYXJkQ2xpY2s/OiBLZXlib2FyZENsaWNrRXZlbnRIYW5kbGVyO1xufVxuXG5leHBvcnQgY29uc3QgQ2xpY2thYmxlV3JhcHBlcjogUmVhY3QuRkM8Q2xpY2thYmxlV3JhcHBlclByb3BzPiA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIHdyYXBwZXJUYWc6IFdyYXBwZXJUYWcsXG4gICAgICAgIHBhc3N0aHJvdWdoUHJvcHMsXG4gICAgICAgIG9uU2luZ2xlQ2xpY2ssXG4gICAgICAgIG9uRG91YmxlQ2xpY2ssXG4gICAgICAgIG9uS2V5Ym9hcmRDbGljayxcbiAgICB9ID0gcHJvcHM7XG5cbiAgICBjb25zdCBoYW5kbGVDbGljayA9IHVzZUNsaWNrSGFuZGxlcihvblNpbmdsZUNsaWNrLCBvbkRvdWJsZUNsaWNrKTtcbiAgICBjb25zdCBoYW5kbGVLZXlEb3duID0gdXNlS2V5RG93bkhhbmRsZXIob25LZXlib2FyZENsaWNrKTtcblxuICAgIGNvbnN0IGNvbXBQcm9wczogQW55T2JqZWN0V2l0aFN0cmluZ0tleXMgPSB7fTtcbiAgICBpZiAob25TaW5nbGVDbGljayB8fCBvbkRvdWJsZUNsaWNrIHx8IG9uS2V5Ym9hcmRDbGljaykge1xuICAgICAgICBjb21wUHJvcHMub25DbGljayA9IGhhbmRsZUNsaWNrO1xuICAgICAgICBjb21wUHJvcHMub25LZXlEb3duID0gaGFuZGxlS2V5RG93bjtcbiAgICAgICAgY29tcFByb3BzLnRhYkluZGV4ID0gMDtcbiAgICB9XG5cbiAgICBjb25zdCBtZXJnZWRQcm9wcyA9IHsgLi4uY29tcFByb3BzLCAuLi5wYXNzdGhyb3VnaFByb3BzIH07XG4gICAgcmV0dXJuIDxXcmFwcGVyVGFnIHsuLi5tZXJnZWRQcm9wc30+e2NoaWxkcmVufTwvV3JhcHBlclRhZz47XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgRmlsZUhlbHBlciB9IGZyb20gJy4uLy4uL3V0aWwvZmlsZS1oZWxwZXInO1xuaW1wb3J0IHsgQmFzZUZpbGVFbnRyeSwgRmlsZUVudHJ5UHJvcHMgfSBmcm9tICcuL0Jhc2VGaWxlRW50cnknO1xuaW1wb3J0IHsgdXNlRmlsZUNsaWNrSGFuZGxlcnMgfSBmcm9tICcuL0NsaWNrYWJsZUZpbGVFbnRyeS1ob29rcyc7XG5pbXBvcnQgeyBDbGlja2FibGVXcmFwcGVyLCBDbGlja2FibGVXcmFwcGVyUHJvcHMgfSBmcm9tICcuL0NsaWNrYWJsZVdyYXBwZXInO1xuXG5leHBvcnQgY29uc3QgQ2xpY2thYmxlRmlsZUVudHJ5OiBSZWFjdC5GQzxGaWxlRW50cnlQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IGZpbGUgfSA9IHByb3BzO1xuXG4gICAgY29uc3QgZmlsZUNsaWNrSGFuZGxlcnMgPSB1c2VGaWxlQ2xpY2tIYW5kbGVycyhmaWxlKTtcblxuICAgIGNvbnN0IHdyYXBwZXJQcm9wczogQ2xpY2thYmxlV3JhcHBlclByb3BzID0ge1xuICAgICAgICB3cmFwcGVyVGFnOiAnZGl2JyxcbiAgICAgICAgcGFzc3Rocm91Z2hQcm9wczoge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAnY2hvbmt5LWZpbGUtZW50cnktY2xpY2thYmxlLXdyYXBwZXIgY2hvbmt5LWZpbGwtcGFyZW50JyxcbiAgICAgICAgfSxcbiAgICAgICAgLi4uKEZpbGVIZWxwZXIuaXNDbGlja2FibGUoZmlsZSkgPyBmaWxlQ2xpY2tIYW5kbGVycyA6IHVuZGVmaW5lZCksXG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxDbGlja2FibGVXcmFwcGVyIHsuLi53cmFwcGVyUHJvcHN9PlxuICAgICAgICAgICAgPEJhc2VGaWxlRW50cnkgey4uLnByb3BzfSAvPlxuICAgICAgICA8L0NsaWNrYWJsZVdyYXBwZXI+XG4gICAgKTtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZUNvbnRleHQsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IERyYWdPYmplY3RXaXRoVHlwZSwgRHJhZ1NvdXJjZU1vbml0b3IsIHVzZURyYWcsIHVzZURyb3AgfSBmcm9tICdyZWFjdC1kbmQnO1xuaW1wb3J0IHsgZ2V0RW1wdHlJbWFnZSB9IGZyb20gJ3JlYWN0LWRuZC1odG1sNS1iYWNrZW5kJztcbmltcG9ydCB7IEV4Y2x1ZGVLZXlzLCBOaWxhYmxlLCBOdWxsYWJsZSB9IGZyb20gJ3RzZGVmJztcblxuaW1wb3J0IHsgRmlsZURhdGEgfSBmcm9tICcuLi8uLi90eXBlcy9maWxlcy50eXBlcyc7XG5pbXBvcnQgeyBTcGVjaWFsQWN0aW9uIH0gZnJvbSAnLi4vLi4vdHlwZXMvc3BlY2lhbC1hY3Rpb25zLnR5cGVzJztcbmltcG9ydCB7IENob25reURpc3BhdGNoU3BlY2lhbEFjdGlvbkNvbnRleHQgfSBmcm9tICcuLi8uLi91dGlsL2NvbnRleHQnO1xuaW1wb3J0IHsgRmlsZUhlbHBlciB9IGZyb20gJy4uLy4uL3V0aWwvZmlsZS1oZWxwZXInO1xuaW1wb3J0IHsgRmlsZUVudHJ5UHJvcHMgfSBmcm9tICcuL0Jhc2VGaWxlRW50cnknO1xuaW1wb3J0IHsgQ2xpY2thYmxlRmlsZUVudHJ5IH0gZnJvbSAnLi9DbGlja2FibGVGaWxlRW50cnknO1xuXG5leHBvcnQgaW50ZXJmYWNlIERuRFByb3BzIHtcbiAgICBkbmRJc0RyYWdnaW5nPzogYm9vbGVhbjtcbiAgICBkbmRJc092ZXI/OiBib29sZWFuO1xuICAgIGRuZENhbkRyb3A/OiBib29sZWFuO1xufVxuXG5leHBvcnQgdHlwZSBEbkRGaWxlRW50cnlJdGVtID0gRHJhZ09iamVjdFdpdGhUeXBlICYgeyBmaWxlOiBOdWxsYWJsZTxGaWxlRGF0YT4gfTtcbmV4cG9ydCBjb25zdCBEbkRGaWxlRW50cnlUeXBlID0gJ2Nob25reS1maWxlLWVudHJ5JztcblxuZXhwb3J0IGNvbnN0IERuREZpbGVFbnRyeTogUmVhY3QuRkM8RmlsZUVudHJ5UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBmaWxlIH0gPSBwcm9wcztcblxuICAgIGNvbnN0IGRpc3BhdGNoU3BlY2lhbEFjdGlvbiA9IHVzZUNvbnRleHQoQ2hvbmt5RGlzcGF0Y2hTcGVjaWFsQWN0aW9uQ29udGV4dCk7XG5cbiAgICBpbnRlcmZhY2UgQ2hvbmt5RG5ERHJvcFJlc3VsdCB7XG4gICAgICAgIGRyb3BUYXJnZXQ6IE5pbGFibGU8RmlsZURhdGE+O1xuICAgICAgICBkcm9wRWZmZWN0OiAnbW92ZScgfCAnY29weSc7XG4gICAgfVxuXG4gICAgLy8gRm9yIGRyYWcgc291cmNlXG4gICAgY29uc3QgY2FuRHJhZyA9IEZpbGVIZWxwZXIuaXNEcmFnZ2FibGUoZmlsZSk7XG4gICAgY29uc3Qgb25EcmFnU3RhcnQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIGlmICghRmlsZUhlbHBlci5pc0RyYWdnYWJsZShmaWxlKSkgcmV0dXJuO1xuXG4gICAgICAgIGRpc3BhdGNoU3BlY2lhbEFjdGlvbih7XG4gICAgICAgICAgICBhY3Rpb25OYW1lOiBTcGVjaWFsQWN0aW9uLkRyYWdORHJvcFN0YXJ0LFxuICAgICAgICAgICAgZHJhZ1NvdXJjZTogZmlsZSxcbiAgICAgICAgfSk7XG4gICAgfSwgW2Rpc3BhdGNoU3BlY2lhbEFjdGlvbiwgZmlsZV0pO1xuICAgIGNvbnN0IG9uRHJhZ0VuZCA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAoaXRlbTogRG5ERmlsZUVudHJ5SXRlbSwgbW9uaXRvcjogRHJhZ1NvdXJjZU1vbml0b3IpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRyb3BSZXN1bHQgPSBtb25pdG9yLmdldERyb3BSZXN1bHQoKSBhcyBDaG9ua3lEbkREcm9wUmVzdWx0O1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICFGaWxlSGVscGVyLmlzRHJhZ2dhYmxlKGZpbGUpIHx8XG4gICAgICAgICAgICAgICAgIWRyb3BSZXN1bHQgfHxcbiAgICAgICAgICAgICAgICAhZHJvcFJlc3VsdC5kcm9wVGFyZ2V0XG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRpc3BhdGNoU3BlY2lhbEFjdGlvbih7XG4gICAgICAgICAgICAgICAgYWN0aW9uTmFtZTogU3BlY2lhbEFjdGlvbi5EcmFnTkRyb3BFbmQsXG4gICAgICAgICAgICAgICAgZHJhZ1NvdXJjZTogZmlsZSxcbiAgICAgICAgICAgICAgICBkcm9wVGFyZ2V0OiBkcm9wUmVzdWx0LmRyb3BUYXJnZXQsXG4gICAgICAgICAgICAgICAgZHJvcEVmZmVjdDogZHJvcFJlc3VsdC5kcm9wRWZmZWN0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIFtkaXNwYXRjaFNwZWNpYWxBY3Rpb24sIGZpbGVdXG4gICAgKTtcblxuICAgIC8vIEZvciBkcm9wIHRhcmdldFxuICAgIGNvbnN0IG9uRHJvcCA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAoaXRlbTogRG5ERmlsZUVudHJ5SXRlbSwgbW9uaXRvcikgPT4ge1xuICAgICAgICAgICAgaWYgKCFtb25pdG9yLmNhbkRyb3AoKSkgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgY3VzdG9tRHJvcFJlc3VsdDogRXhjbHVkZUtleXM8Q2hvbmt5RG5ERHJvcFJlc3VsdCwgJ2Ryb3BFZmZlY3QnPiA9IHtcbiAgICAgICAgICAgICAgICBkcm9wVGFyZ2V0OiBmaWxlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBjdXN0b21Ecm9wUmVzdWx0O1xuICAgICAgICB9LFxuICAgICAgICBbZmlsZV1cbiAgICApO1xuICAgIGNvbnN0IGNhbkRyb3AgPSB1c2VDYWxsYmFjayhcbiAgICAgICAgKGl0ZW06IERuREZpbGVFbnRyeUl0ZW0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlzU2FtZUZpbGUgPSBpdGVtLmZpbGU/LmlkID09PSBmaWxlPy5pZDtcbiAgICAgICAgICAgIHJldHVybiBGaWxlSGVscGVyLmlzRHJvcHBhYmxlKGZpbGUpICYmICFpc1NhbWVGaWxlO1xuICAgICAgICB9LFxuICAgICAgICBbZmlsZV1cbiAgICApO1xuXG4gICAgLy8gQ3JlYXRlIHJlZnMgZm9yIHJlYWN0LWRuZCBob29rc1xuICAgIGNvbnN0IFt7IGlzRHJhZ2dpbmc6IGRuZElzRHJhZ2dpbmcgfSwgZHJhZywgcHJldmlld10gPSB1c2VEcmFnKHtcbiAgICAgICAgaXRlbTogeyB0eXBlOiBEbkRGaWxlRW50cnlUeXBlLCBmaWxlIH0gYXMgRG5ERmlsZUVudHJ5SXRlbSxcbiAgICAgICAgY2FuRHJhZyxcbiAgICAgICAgYmVnaW46IG9uRHJhZ1N0YXJ0LFxuICAgICAgICBlbmQ6IG9uRHJhZ0VuZCxcbiAgICAgICAgY29sbGVjdDogKG1vbml0b3IpID0+ICh7XG4gICAgICAgICAgICBpc0RyYWdnaW5nOiBtb25pdG9yLmlzRHJhZ2dpbmcoKSxcbiAgICAgICAgfSksXG4gICAgfSk7XG4gICAgY29uc3QgW3sgaXNPdmVyOiBkbmRJc092ZXIsIGNhbkRyb3A6IGRuZENhbkRyb3AgfSwgZHJvcF0gPSB1c2VEcm9wKHtcbiAgICAgICAgYWNjZXB0OiBEbkRGaWxlRW50cnlUeXBlLFxuICAgICAgICBkcm9wOiBvbkRyb3AsXG4gICAgICAgIGNhbkRyb3AsXG4gICAgICAgIGNvbGxlY3Q6IChtb25pdG9yKSA9PiAoe1xuICAgICAgICAgICAgaXNPdmVyOiBtb25pdG9yLmlzT3ZlcigpLFxuICAgICAgICAgICAgY2FuRHJvcDogbW9uaXRvci5jYW5Ecm9wKCksXG4gICAgICAgIH0pLFxuICAgIH0pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgLy8gU2V0IGRyYWcgcHJldmlldyB0byBhbiBlbXB0eSBpbWFnZSBiZWNhdXNlIGBEbkRGaWxlTGlzdERyYWdMYXllcmAgd2lsbFxuICAgICAgICAvLyBwcm92aWRlIGl0cyBvd24gcHJldmlldy5cbiAgICAgICAgcHJldmlldyhnZXRFbXB0eUltYWdlKCksIHsgY2FwdHVyZURyYWdnaW5nU3RhdGU6IHRydWUgfSk7XG4gICAgfSwgW10pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdlxuICAgICAgICAgICAgcmVmPXtkcm9wfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2hvbmt5LWZpbGUtZW50cnktZHJvcHBhYmxlLXdyYXBwZXIgY2hvbmt5LWZpbGwtcGFyZW50XCJcbiAgICAgICAgPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIHJlZj17RmlsZUhlbHBlci5pc0RyYWdnYWJsZShmaWxlKSA/IGRyYWcgOiBudWxsfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNob25reS1maWxlLWVudHJ5LWRyYWdnYWJsZS13cmFwcGVyIGNob25reS1maWxsLXBhcmVudFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPENsaWNrYWJsZUZpbGVFbnRyeVxuICAgICAgICAgICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgICAgICAgICAgIGRuZElzRHJhZ2dpbmc9e2RuZElzRHJhZ2dpbmd9XG4gICAgICAgICAgICAgICAgICAgIGRuZElzT3Zlcj17ZG5kSXNPdmVyfVxuICAgICAgICAgICAgICAgICAgICBkbmRDYW5Ecm9wPXtkbmRDYW5Ecm9wfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG4iLCJpbXBvcnQgYyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEdyaWQgfSBmcm9tICdyZWFjdC12aXJ0dWFsaXplZCc7XG5pbXBvcnQgeyBOaWxhYmxlIH0gZnJvbSAndHNkZWYnO1xuXG5pbXBvcnQgeyBGaWxlRW50cnlTaXplIH0gZnJvbSAnLi4vLi4vdHlwZXMvZmlsZS1saXN0LXZpZXcudHlwZXMnO1xuaW1wb3J0IHsgRmlsZUFycmF5IH0gZnJvbSAnLi4vLi4vdHlwZXMvZmlsZXMudHlwZXMnO1xuaW1wb3J0IHsgQ2hvbmt5SWNvbk5hbWUgfSBmcm9tICcuLi8uLi90eXBlcy9pY29ucy50eXBlcyc7XG5pbXBvcnQge1xuICAgIENob25reUVuYWJsZURyYWdBbmREcm9wQ29udGV4dCxcbiAgICBDaG9ua3lTZWxlY3Rpb25Db250ZXh0LFxufSBmcm9tICcuLi8uLi91dGlsL2NvbnRleHQnO1xuaW1wb3J0IHsgaXNNb2JpbGVEZXZpY2UgfSBmcm9tICcuLi8uLi91dGlsL3ZhbGlkYXRpb24nO1xuaW1wb3J0IHsgRmlsZUVudHJ5UHJvcHMgfSBmcm9tICcuLi9pbnRlcm5hbC9CYXNlRmlsZUVudHJ5JztcbmltcG9ydCB7IENsaWNrYWJsZUZpbGVFbnRyeSB9IGZyb20gJy4uL2ludGVybmFsL0NsaWNrYWJsZUZpbGVFbnRyeSc7XG5pbXBvcnQgeyBEbkRGaWxlRW50cnkgfSBmcm9tICcuLi9pbnRlcm5hbC9EbkRGaWxlRW50cnknO1xuaW1wb3J0IHsgQ2hvbmt5SWNvbkZBIH0gZnJvbSAnLi9DaG9ua3lJY29uJztcblxuZXhwb3J0IGNvbnN0IFNtYWxsVGh1bWJzU2l6ZTogRmlsZUVudHJ5U2l6ZSA9IHsgd2lkdGg6IDE2MCwgaGVpZ2h0OiAxMjAgfTtcblxuZXhwb3J0IGNvbnN0IERlZmF1bHRFbnRyeVNpemU6IEZpbGVFbnRyeVNpemUgPSBTbWFsbFRodW1ic1NpemU7XG5cbmV4cG9ydCBjb25zdCBnZXRDb2xXaWR0aCA9IChcbiAgICBpbmRleDogbnVtYmVyLFxuICAgIGNvbHVtbkNvdW50OiBudW1iZXIsXG4gICAgZW50cnlTaXplOiBGaWxlRW50cnlTaXplLFxuICAgIGd1dHRlclNpemU6IG51bWJlclxuKSA9PiB7XG4gICAgaWYgKGluZGV4ID09PSBjb2x1bW5Db3VudCAtIDEpIHJldHVybiBlbnRyeVNpemUud2lkdGg7XG4gICAgcmV0dXJuIGVudHJ5U2l6ZS53aWR0aCArIGd1dHRlclNpemU7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Um93SGVpZ2h0ID0gKFxuICAgIGluZGV4OiBudW1iZXIsXG4gICAgcm93Q291bnQ6IG51bWJlcixcbiAgICBlbnRyeVNpemU6IEZpbGVFbnRyeVNpemUsXG4gICAgZ3V0dGVyU2l6ZTogbnVtYmVyXG4pID0+IHtcbiAgICAvLyBXZSBhbHdheXMgYWRkIGBndXR0ZXJTaXplYCB0byBoZWlnaHQgYmVjYXVzZSB3ZSBkb24ndCB3YW50IHRoZSBsYXN0IGl0ZW1cbiAgICAvLyBzdGlja2luZyB0byB0aGUgYm90dG9tIG9mIHRoZSBzY3JvbGwgcGFuZS5cbiAgICByZXR1cm4gZW50cnlTaXplLmhlaWdodCArIGd1dHRlclNpemU7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlRW50cnlSZW5kZXJlciA9IChmaWxlczogRmlsZUFycmF5KSA9PiB7XG4gICAgY29uc3Qgc2VsZWN0aW9uID0gdXNlQ29udGV4dChDaG9ua3lTZWxlY3Rpb25Db250ZXh0KTtcbiAgICBjb25zdCBlbmFibGVEcmFnQW5kRHJvcCA9IHVzZUNvbnRleHQoQ2hvbmt5RW5hYmxlRHJhZ0FuZERyb3BDb250ZXh0KTtcbiAgICAvLyBBbGwgaG9vayBwYXJhbWV0ZXJzIHNob3VsZCBnbyBpbnRvIGBkZXBzYCBhcnJheVxuICAgIGNvbnN0IGRlcHMgPSBbZmlsZXMsIHNlbGVjdGlvbiwgZW5hYmxlRHJhZ0FuZERyb3BdO1xuICAgIGNvbnN0IGVudHJ5UmVuZGVyZXIgPSB1c2VDYWxsYmFjayhcbiAgICAgICAgKFxuICAgICAgICAgICAgdmlydHVhbEtleTogc3RyaW5nLFxuICAgICAgICAgICAgaW5kZXg6IG51bWJlcixcbiAgICAgICAgICAgIHN0eWxlOiBhbnksXG4gICAgICAgICAgICBwYXJlbnQ6IGFueSxcbiAgICAgICAgICAgIGd1dHRlclNpemU/OiBudW1iZXIsXG4gICAgICAgICAgICBsYXN0Um93PzogYm9vbGVhbixcbiAgICAgICAgICAgIGxhc3RDb2x1bW4/OiBib29sZWFuXG4gICAgICAgICkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBndXR0ZXJTaXplID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIGlmICghbGFzdENvbHVtbikgc3R5bGUud2lkdGggPSBzdHlsZS53aWR0aCAtIGd1dHRlclNpemU7XG5cbiAgICAgICAgICAgICAgICAvLyBXZSBhbHdheXMgc3VidHJhY3QgYGd1dHRlclNpemVgIHRvIGhlaWdodCBiZWNhdXNlIHdlIGRvbid0IHdhbnQgdGhlXG4gICAgICAgICAgICAgICAgLy8gbGFzdCBpdGVtIHN0aWNraW5nIHRvIHRoZSBib3R0b20gb2YgdGhlIHNjcm9sbCBwYW5lLlxuICAgICAgICAgICAgICAgIHN0eWxlLmhlaWdodCA9IHN0eWxlLmhlaWdodCAtIGd1dHRlclNpemU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFdoZW4gcmVuZGVyaW5nIHRoZSBmaWxlIGxpc3QsIHNvbWUgYnJvd3NlcnMgY3V0IG9mZiB0aGUgbGFzdCBwaXhlbCBvZlxuICAgICAgICAgICAgLy8gYSBmaWxlIGVudHJ5LCBtYWtpbmcgaXQgbG9vayB1Z2x5LiBUbyBnZXQgYXJvdW5kIHRoaXMgcmVuZGVyaW5nIGJ1Z1xuICAgICAgICAgICAgLy8gd2UgbWFrZSBmaWxlIGVudHJpZXMgaW4gdGhlIGxhc3Qgcm93L2NvbHVtbiAxIHBpeGVsIHNob3J0ZXIuXG4gICAgICAgICAgICAvLyBUT0RPOiBJbnN0ZWFkIG9mIHN1YnRyYWN0aW5nIDEgaGVyZSwgYWRkIDEgdG8gd2lkdGgvaGVpZ2h0IG9mIGxhc3RcbiAgICAgICAgICAgIC8vICBjb2x1bW4uXG4gICAgICAgICAgICBpZiAobGFzdFJvdykgc3R5bGUuaGVpZ2h0ID0gc3R5bGUuaGVpZ2h0IC0gMTtcbiAgICAgICAgICAgIGlmIChsYXN0Q29sdW1uKSBzdHlsZS53aWR0aCA9IHN0eWxlLndpZHRoIC0gMTtcblxuICAgICAgICAgICAgaWYgKGluZGV4ID49IGZpbGVzLmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBjb25zdCBmaWxlID0gZmlsZXNbaW5kZXhdO1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gZmlsZSA/IGZpbGUuaWQgOiBgbG9hZGluZy1maWxlLSR7dmlydHVhbEtleX1gO1xuICAgICAgICAgICAgY29uc3QgZW50cnlQcm9wczogRmlsZUVudHJ5UHJvcHMgPSB7XG4gICAgICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgICAgICBkaXNwbGF5SW5kZXg6IGluZGV4LFxuXG4gICAgICAgICAgICAgICAgLy8gV2UgZGVsaWJlcmF0ZWx5IGRvbid0IHVzZSBgRmlsZUhlbHBlci5pc1NlbGVjdGFibGVgIGhlcmUuIFdlIHdhbnRcbiAgICAgICAgICAgICAgICAvLyB0aGUgVUkgdG8gcmVwcmVzZW50IHRoZSB0cnVlIHN0YXRlIG9mIHNlbGVjdGlvbi4gVGhpcyB3aWxsIGhlbHAgdXNlcnNcbiAgICAgICAgICAgICAgICAvLyBzZWUgd2hhdCBleGFjdGx5IHRoZSBzZWxlY3Rpb24gaXMgYmVmb3JlIHJ1bm5pbmcgc29tZSBjb2RlLlxuICAgICAgICAgICAgICAgIHNlbGVjdGVkOiAhIWZpbGUgJiYgc2VsZWN0aW9uW2ZpbGUuaWRdID09PSB0cnVlLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgZmlsZUVudHJ5Q29tcG9uZW50ID0gZW5hYmxlRHJhZ0FuZERyb3AgPyAoXG4gICAgICAgICAgICAgICAgPERuREZpbGVFbnRyeSB7Li4uZW50cnlQcm9wc30gLz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgPENsaWNrYWJsZUZpbGVFbnRyeSB7Li4uZW50cnlQcm9wc30gLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxkaXYga2V5PXtrZXl9IGNsYXNzTmFtZT1cImNob25reS12aXJ0dWFsaXphdGlvbi13cmFwcGVyXCIgc3R5bGU9e3N0eWxlfT5cbiAgICAgICAgICAgICAgICAgICAge2ZpbGVFbnRyeUNvbXBvbmVudH1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIGRlcHNcbiAgICApO1xuXG4gICAgcmV0dXJuIGVudHJ5UmVuZGVyZXI7XG59O1xuXG5leHBvcnQgY29uc3Qgbm9Db250ZW50UmVuZGVyZXIgPSAoaGVpZ2h0PzogbnVtYmVyKSA9PiB7XG4gICAgY29uc3QgcGxhY2Vob2xkZXJQcm9wczogYW55ID0ge1xuICAgICAgICBjbGFzc05hbWU6IGMoe1xuICAgICAgICAgICAgJ2Nob25reS1maWxlLWxpc3Qtbm90aWZpY2F0aW9uJzogdHJ1ZSxcbiAgICAgICAgICAgICdjaG9ua3ktZmlsZS1saXN0LW5vdGlmaWNhdGlvbi1lbXB0eSc6IHRydWUsXG4gICAgICAgIH0pLFxuICAgIH07XG4gICAgaWYgKHR5cGVvZiBoZWlnaHQgPT09ICdudW1iZXInKSBwbGFjZWhvbGRlclByb3BzLnN0eWxlID0geyBoZWlnaHQgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgey4uLnBsYWNlaG9sZGVyUHJvcHN9PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjaG9ua3ktZmlsZS1saXN0LW5vdGlmaWNhdGlvbi1jb250ZW50XCI+XG4gICAgICAgICAgICAgICAgPENob25reUljb25GQSBpY29uPXtDaG9ua3lJY29uTmFtZS5mb2xkZXJPcGVufSAvPlxuICAgICAgICAgICAgICAgICZuYnNwOyBOb3RoaW5nIHRvIHNob3dcbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZUdyaWRSZW5kZXJlciA9IChcbiAgICBmaWxlczogRmlsZUFycmF5LFxuICAgIGVudHJ5U2l6ZTogRmlsZUVudHJ5U2l6ZSxcbiAgICBlbnRyeVJlbmRlcmVyOiBSZXR1cm5UeXBlPHR5cGVvZiB1c2VFbnRyeVJlbmRlcmVyPixcbiAgICB0aHVtYnNHcmlkUmVmOiBSZWFjdC5SZWY8TmlsYWJsZTxHcmlkPj4sXG4gICAgZmlsbFBhcmVudENvbnRhaW5lcjogYm9vbGVhblxuKSA9PiB7XG4gICAgY29uc3QgZGVwcyA9IFtmaWxlcywgZW50cnlTaXplLCBlbnRyeVJlbmRlcmVyLCB0aHVtYnNHcmlkUmVmLCBmaWxsUGFyZW50Q29udGFpbmVyXTtcbiAgICByZXR1cm4gdXNlQ2FsbGJhY2soKHsgd2lkdGgsIGhlaWdodCB9KSA9PiB7XG4gICAgICAgIGNvbnN0IGlzTW9iaWxlID0gaXNNb2JpbGVEZXZpY2UoKTtcbiAgICAgICAgY29uc3QgZ3V0dGVyID0gaXNNb2JpbGUgPyA1IDogODtcbiAgICAgICAgY29uc3Qgc2Nyb2xsYmFyID0gIWZpbGxQYXJlbnRDb250YWluZXIgfHwgaXNNb2JpbGUgPyAwIDogMTY7XG5cbiAgICAgICAgLy8gVE9ETzogY29uc3QgaXNMYXJnZVRodW1icyA9IHZpZXcgPT09IEZpbGVWaWV3LkxhcmdlVGh1bWJzO1xuICAgICAgICBjb25zdCBjb2x1bW5Db3VudEZsb2F0ID1cbiAgICAgICAgICAgICh3aWR0aCArIGd1dHRlciAtIHNjcm9sbGJhcikgLyAoZW50cnlTaXplLndpZHRoICsgZ3V0dGVyKTtcbiAgICAgICAgY29uc3QgY29sdW1uQ291bnQgPSBNYXRoLm1heCgxLCBNYXRoLmZsb29yKGNvbHVtbkNvdW50RmxvYXQpKTtcbiAgICAgICAgY29uc3Qgcm93Q291bnQgPSBNYXRoLmNlaWwoZmlsZXMubGVuZ3RoIC8gY29sdW1uQ291bnQpO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8R3JpZFxuICAgICAgICAgICAgICAgIHN0eWxlPXt7IG1pbkhlaWdodDogZW50cnlTaXplLmhlaWdodCArIDEwIH19XG4gICAgICAgICAgICAgICAgcmVmPXt0aHVtYnNHcmlkUmVmIGFzIGFueX1cbiAgICAgICAgICAgICAgICBjZWxsUmVuZGVyZXI9eyhkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gZGF0YS5yb3dJbmRleCAqIGNvbHVtbkNvdW50ICsgZGF0YS5jb2x1bW5JbmRleDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVudHJ5UmVuZGVyZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgeyAuLi5kYXRhLnN0eWxlIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnBhcmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGd1dHRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucm93SW5kZXggPT09IHJvd0NvdW50IC0gMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuY29sdW1uSW5kZXggPT09IGNvbHVtbkNvdW50IC0gMVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgbm9Db250ZW50UmVuZGVyZXI9eygpID0+IG5vQ29udGVudFJlbmRlcmVyKGVudHJ5U2l6ZS5oZWlnaHQpfVxuICAgICAgICAgICAgICAgIHJvd0NvdW50PXtyb3dDb3VudH1cbiAgICAgICAgICAgICAgICBjb2x1bW5Db3VudD17Y29sdW1uQ291bnR9XG4gICAgICAgICAgICAgICAgY29sdW1uV2lkdGg9eyh7IGluZGV4IH0pID0+XG4gICAgICAgICAgICAgICAgICAgIGdldENvbFdpZHRoKGluZGV4LCBjb2x1bW5Db3VudCwgZW50cnlTaXplLCBndXR0ZXIpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJvd0hlaWdodD17KHsgaW5kZXggfSkgPT5cbiAgICAgICAgICAgICAgICAgICAgZ2V0Um93SGVpZ2h0KGluZGV4LCByb3dDb3VudCwgZW50cnlTaXplLCBndXR0ZXIpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG92ZXJzY2FuUm93Q291bnQ9ezJ9XG4gICAgICAgICAgICAgICAgd2lkdGg9e3dpZHRofVxuICAgICAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlPXt7bWluSGVpZ2h0OiA1MH19XG4gICAgICAgICAgICAgICAgaGVpZ2h0PXt0eXBlb2YgaGVpZ2h0ID09PSAnbnVtYmVyJyA/IGhlaWdodCA6IDUwMH1cbiAgICAgICAgICAgICAgICBhdXRvSGVpZ2h0PXshZmlsbFBhcmVudENvbnRhaW5lcn1cbiAgICAgICAgICAgICAgICB0YWJJbmRleD17bnVsbH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgfSwgZGVwcyk7XG59O1xuIiwiLy8gVXNlZCBpbiBSZWFjdCBob29rcyB0byBpbmRpY2F0ZSBlbXB0eSBkZXBzIGFyZSBpbnRlbnRpb25hbC5cbmV4cG9ydCBjb25zdCBJTlRFTlRJT05BTF9FTVBUWV9ERVBTOiBSZWFkb25seUFycmF5PG5ldmVyPiA9IFtdO1xuXG4vLyBVc2VkIGluIGNvbnRleHRzIHRoYXQgbmVlZCB0byBwcm92aWRlIHNvbWUgZGVmYXVsdCB2YWx1ZSBmb3IgYSBmdW5jdGlvbi5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyxAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbmV4cG9ydCBjb25zdCBOT09QX0ZVTkNUSU9OID0gKC4uLmFyZ3M6IGFueVtdKSA9PiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAndHNkZWYnO1xuXG5pbXBvcnQge1xuICAgIEZpbGVBcnJheSxcbiAgICBGaWxlRGF0YSxcbiAgICBGaWxlRmlsdGVyLFxuICAgIEZpbGVTZWxlY3Rpb24sXG4gICAgUmVhZG9ubHlGaWxlQXJyYXksXG59IGZyb20gJy4uL3R5cGVzL2ZpbGVzLnR5cGVzJztcbmltcG9ydCB7IEZpbGVIZWxwZXIgfSBmcm9tICcuL2ZpbGUtaGVscGVyJztcblxuZXhwb3J0IGNvbnN0IHVzZVNlbGVjdGlvbiA9IChmaWxlczogRmlsZUFycmF5LCBkaXNhYmxlU2VsZWN0aW9uOiBib29sZWFuKSA9PiB7XG4gICAgLy8gQ3JlYXRlIFJlYWN0LW1hbmFnZWQgc3RhdGUgZm9yIGNvbXBvbmVudHMgdGhhdCBuZWVkIHRvIHJlLXJlbmRlciBvbiBzdGF0ZSBjaGFuZ2UuXG4gICAgY29uc3QgW3NlbGVjdGlvbiwgc2V0U2VsZWN0aW9uXSA9IHVzZVN0YXRlPEZpbGVTZWxlY3Rpb24+KHt9KTtcblxuICAgIC8vIFByZS1jb21wdXRlIHNlbGVjdGlvbiBzaXplIGZvciBjb21wb25lbnRzIHRoYXQgYXJlIG9ubHkgaW50ZXJlc3RlZCBpbiB0aGVcbiAgICAvLyBudW1iZXIgb2Ygc2VsZWN0ZWQgZmlsZXMgYnV0IG5vdCB0aGUgYWN0dWFsIGZpbGVzXG4gICAgY29uc3Qgc2VsZWN0aW9uU2l6ZSA9IHVzZU1lbW8oXG4gICAgICAgICgpID0+IFNlbGVjdGlvbkhlbHBlci5nZXRTZWxlY3Rpb25TaXplKGZpbGVzLCBzZWxlY3Rpb24pLFxuICAgICAgICBbZmlsZXMsIHNlbGVjdGlvbl1cbiAgICApO1xuXG4gICAgLy8gQ3JlYXRlIGNhbGxiYWNrcyBmb3IgdXBkYXRpbmcgc2VsZWN0aW9uLiBUaGVzZSB3aWxsIHVwZGF0ZSB0aGUgUmVhY3RcbiAgICAvLyBzdGF0ZSBgc2VsZWN0aW9uYCwgY2F1c2luZyByZS1yZW5kZXJzLiBUaGlzIGlzIGludGVudGlvbmFsLlxuICAgIGNvbnN0IHsgc2VsZWN0RmlsZXMsIHRvZ2dsZVNlbGVjdGlvbiwgY2xlYXJTZWxlY3Rpb24gfSA9IHVzZVNlbGVjdGlvbk1vZGlmaWVycyhcbiAgICAgICAgZGlzYWJsZVNlbGVjdGlvbixcbiAgICAgICAgc2V0U2VsZWN0aW9uXG4gICAgKTtcblxuICAgIC8vIENyZWF0ZSBzZWxlY3Rpb24gcmVmIGZvciBmdW5jdGlvbnMgdGhhdCBuZWVkIHNlbGVjdGlvbiBidXQgc2hvdWxkbid0IHJlLXJlbmRlclxuICAgIGNvbnN0IHNlbGVjdGlvblV0aWxSZWYgPSB1c2VSZWY8U2VsZWN0aW9uVXRpbD4oXG4gICAgICAgIG5ldyBVcGRhdGVhYmxlU2VsZWN0aW9uVXRpbChmaWxlcywgc2VsZWN0aW9uKVxuICAgICk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgKHNlbGVjdGlvblV0aWxSZWYuY3VycmVudCBhcyBVcGRhdGVhYmxlU2VsZWN0aW9uVXRpbCkudXBkYXRlKGZpbGVzLCBzZWxlY3Rpb24pO1xuICAgIH0sIFtmaWxlcywgc2VsZWN0aW9uXSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBzZWxlY3Rpb24sXG4gICAgICAgIHNlbGVjdGlvblNpemUsXG4gICAgICAgIHNlbGVjdGlvblV0aWxSZWYsXG4gICAgICAgIHNlbGVjdEZpbGVzLFxuICAgICAgICB0b2dnbGVTZWxlY3Rpb24sXG4gICAgICAgIGNsZWFyU2VsZWN0aW9uLFxuICAgIH07XG59O1xuXG5jb25zdCB1c2VTZWxlY3Rpb25Nb2RpZmllcnMgPSAoXG4gICAgZGlzYWJsZVNlbGVjdGlvbjogYm9vbGVhbixcbiAgICBzZXRTZWxlY3Rpb246IFJlYWN0LkRpc3BhdGNoPFJlYWN0LlNldFN0YXRlQWN0aW9uPEZpbGVTZWxlY3Rpb24+PlxuKSA9PiB7XG4gICAgY29uc3QgZGVwcyA9IFtkaXNhYmxlU2VsZWN0aW9uLCBzZXRTZWxlY3Rpb25dO1xuICAgIGNvbnN0IHNlbGVjdEZpbGVzID0gdXNlQ2FsbGJhY2soKGZpbGVJZHM6IHN0cmluZ1tdLCByZXNldDogYm9vbGVhbiA9IHRydWUpID0+IHtcbiAgICAgICAgaWYgKGRpc2FibGVTZWxlY3Rpb24pIHJldHVybjtcblxuICAgICAgICBzZXRTZWxlY3Rpb24oKHNlbGVjdGlvbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3U2VsZWN0aW9uID0gcmVzZXQgPyB7fSA6IHsgLi4uc2VsZWN0aW9uIH07XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZpbGVJZCBvZiBmaWxlSWRzKSBuZXdTZWxlY3Rpb25bZmlsZUlkXSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gbmV3U2VsZWN0aW9uO1xuICAgICAgICB9KTtcbiAgICB9LCBkZXBzKTtcbiAgICBjb25zdCB0b2dnbGVTZWxlY3Rpb24gPSB1c2VDYWxsYmFjayhcbiAgICAgICAgKGZpbGVJZDogc3RyaW5nLCBleGNsdXNpdmU6IGJvb2xlYW4gPSBmYWxzZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGRpc2FibGVTZWxlY3Rpb24pIHJldHVybjtcblxuICAgICAgICAgICAgc2V0U2VsZWN0aW9uKChzZWxlY3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdTZWxlY3Rpb24gPSBleGNsdXNpdmUgPyB7fSA6IHsgLi4uc2VsZWN0aW9uIH07XG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGlvbltmaWxlSWRdID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBuZXdTZWxlY3Rpb25bZmlsZUlkXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXdTZWxlY3Rpb25bZmlsZUlkXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXdTZWxlY3Rpb247XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVwc1xuICAgICk7XG4gICAgY29uc3QgY2xlYXJTZWxlY3Rpb24gPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIGlmIChkaXNhYmxlU2VsZWN0aW9uKSByZXR1cm47XG5cbiAgICAgICAgc2V0U2VsZWN0aW9uKHt9KTtcbiAgICB9LCBkZXBzKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHNlbGVjdEZpbGVzLFxuICAgICAgICB0b2dnbGVTZWxlY3Rpb24sXG4gICAgICAgIGNsZWFyU2VsZWN0aW9uLFxuICAgIH07XG59O1xuXG4vKipcbiAqIFRoaXMgaGVscGVyIHJlbGllcyBvbiB0aGUgYGZpbGVzYCBhbmQgYHNlbGVjdGlvbmAgb2JqZWN0cyB0byBiZSBwYXNzZWQgZnJvbSB0aGVcbiAqIG91dHNpZGUuIEl0IGlzIHNhZmUgdG8gdXNlIGluIFJlYWN0IGNvbXBvbmVudHMgYmVjYXVzZSBpdCBkb2Vzbid0IGhhdmUgYW55XG4gKiBpbnRlcm5hbCBzdGF0ZSwgYW5kIGFsbCBtZXRob2RzIGFyZSBzdGF0aWMuXG4gKi9cbmV4cG9ydCBjbGFzcyBTZWxlY3Rpb25IZWxwZXIge1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0U2VsZWN0ZWRGaWxlcyhcbiAgICAgICAgZmlsZXM6IFJlYWRvbmx5RmlsZUFycmF5LFxuICAgICAgICBzZWxlY3Rpb246IFJlYWRvbmx5PEZpbGVTZWxlY3Rpb24+LFxuICAgICAgICAuLi5maWx0ZXJzOiBGaWxlRmlsdGVyW11cbiAgICApOiBSZWFkb25seUFycmF5PFJlYWRvbmx5PEZpbGVEYXRhPj4ge1xuICAgICAgICBjb25zdCBzZWxlY3RlZEZpbGVzID0gZmlsZXMuZmlsdGVyKFxuICAgICAgICAgICAgKGZpbGUpID0+IEZpbGVIZWxwZXIuaXNTZWxlY3RhYmxlKGZpbGUpICYmIHNlbGVjdGlvbltmaWxlLmlkXSA9PT0gdHJ1ZVxuICAgICAgICApIGFzIEZpbGVEYXRhW107XG5cbiAgICAgICAgcmV0dXJuIGZpbHRlcnMucmVkdWNlKFxuICAgICAgICAgICAgKHByZXZGaWxlcywgZmlsdGVyKSA9PiBwcmV2RmlsZXMuZmlsdGVyKGZpbHRlciksXG4gICAgICAgICAgICBzZWxlY3RlZEZpbGVzXG4gICAgICAgICk7XG4gICAgfVxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0U2VsZWN0aW9uU2l6ZShcbiAgICAgICAgZmlsZXM6IFJlYWRvbmx5RmlsZUFycmF5LFxuICAgICAgICBzZWxlY3Rpb246IFJlYWRvbmx5PEZpbGVTZWxlY3Rpb24+LFxuICAgICAgICAuLi5maWx0ZXJzOiBGaWxlRmlsdGVyW11cbiAgICApOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gU2VsZWN0aW9uSGVscGVyLmdldFNlbGVjdGVkRmlsZXMoZmlsZXMsIHNlbGVjdGlvbiwgLi4uZmlsdGVycykubGVuZ3RoO1xuICAgIH1cbiAgICBwdWJsaWMgc3RhdGljIGlzU2VsZWN0ZWQoXG4gICAgICAgIHNlbGVjdGlvbjogUmVhZG9ubHk8RmlsZVNlbGVjdGlvbj4sXG4gICAgICAgIGZpbGU6IE51bGxhYmxlPFJlYWRvbmx5PEZpbGVEYXRhPj5cbiAgICApOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIEZpbGVIZWxwZXIuaXNTZWxlY3RhYmxlKGZpbGUpICYmIHNlbGVjdGlvbltmaWxlLmlkXSA9PT0gdHJ1ZTtcbiAgICB9XG59XG5cbi8qKlxuICogVGhpcyBgU2VsZWN0aW9uVXRpbGAgY29udGFpbnMgYW4gaW50ZXJuYWwgcmVmZXJlbmNlIHRvIGBmaWxlc2AgYW5kIGBzZWxlY3Rpb25gXG4gKiBvYmplY3RzLiBJdCBpcyBleHBvc2VkIHZpYSBhIFJlYWN0IGNvbnRleHQsIGFuZCBpcyBtZWFudCB0byBiZSB1c2VkIGluIGZ1bmN0aW9uc1xuICogdGhhdCBuZWVkIHRvIGFjY2VzcyBzZWxlY3Rpb24gV0lUSE9VVCB0cmlnZ2VyaW5nIHJlLXJlbmRlcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBTZWxlY3Rpb25VdGlsIHtcbiAgICBwcml2YXRlIGZpbGVzOiBGaWxlQXJyYXk7XG4gICAgcHJpdmF0ZSBzZWxlY3Rpb246IEZpbGVTZWxlY3Rpb247XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoZmlsZXM6IEZpbGVBcnJheSA9IFtdLCBzZWxlY3Rpb246IEZpbGVTZWxlY3Rpb24gPSB7fSkge1xuICAgICAgICB0aGlzLnByb3RlY3RlZFVwZGF0ZShmaWxlcywgc2VsZWN0aW9uKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgcHJvdGVjdGVkVXBkYXRlKGZpbGVzOiBGaWxlQXJyYXksIHNlbGVjdGlvbjogRmlsZVNlbGVjdGlvbikge1xuICAgICAgICB0aGlzLmZpbGVzID0gZmlsZXM7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uID0gc2VsZWN0aW9uO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTZWxlY3Rpb24oKTogUmVhZG9ubHk8RmlsZVNlbGVjdGlvbj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3Rpb247XG4gICAgfVxuICAgIHB1YmxpYyBnZXRTZWxlY3RlZEZpbGVzKFxuICAgICAgICAuLi5maWx0ZXJzOiBGaWxlRmlsdGVyW11cbiAgICApOiBSZWFkb25seUFycmF5PFJlYWRvbmx5PEZpbGVEYXRhPj4ge1xuICAgICAgICByZXR1cm4gU2VsZWN0aW9uSGVscGVyLmdldFNlbGVjdGVkRmlsZXModGhpcy5maWxlcywgdGhpcy5zZWxlY3Rpb24sIC4uLmZpbHRlcnMpO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0U2VsZWN0aW9uU2l6ZSguLi5maWx0ZXJzOiBGaWxlRmlsdGVyW10pOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gU2VsZWN0aW9uSGVscGVyLmdldFNlbGVjdGlvblNpemUodGhpcy5maWxlcywgdGhpcy5zZWxlY3Rpb24sIC4uLmZpbHRlcnMpO1xuICAgIH1cbiAgICBwdWJsaWMgaXNTZWxlY3RlZChmaWxlOiBOdWxsYWJsZTxGaWxlRGF0YT4pOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIFNlbGVjdGlvbkhlbHBlci5pc1NlbGVjdGVkKHRoaXMuc2VsZWN0aW9uLCBmaWxlKTtcbiAgICB9XG59XG5cbmNsYXNzIFVwZGF0ZWFibGVTZWxlY3Rpb25VdGlsIGV4dGVuZHMgU2VsZWN0aW9uVXRpbCB7XG4gICAgcHVibGljIHVwZGF0ZSguLi5hcmdzOiBQYXJhbWV0ZXJzPFNlbGVjdGlvblV0aWxbJ3Byb3RlY3RlZFVwZGF0ZSddPikge1xuICAgICAgICB0aGlzLnByb3RlY3RlZFVwZGF0ZSguLi5hcmdzKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTnVsbGFibGUgfSBmcm9tICd0c2RlZic7XG5cbmltcG9ydCB7IERlZmF1bHRFbnRyeVNpemUgfSBmcm9tICcuLi9jb21wb25lbnRzL2V4dGVybmFsL0ZpbGVMaXN0LXZpcnR1YWxpemF0aW9uJztcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEludGVybmFsRmlsZUFjdGlvbkRpc3BhdGNoZXIgfSBmcm9tICcuLi90eXBlcy9maWxlLWFjdGlvbnMudHlwZXMnO1xuaW1wb3J0IHsgRmlsZUVudHJ5U2l6ZSB9IGZyb20gJy4uL3R5cGVzL2ZpbGUtbGlzdC12aWV3LnR5cGVzJztcbmltcG9ydCB7IEZpbGVBcnJheSwgRmlsZVNlbGVjdGlvbiB9IGZyb20gJy4uL3R5cGVzL2ZpbGVzLnR5cGVzJztcbmltcG9ydCB7IEludGVybmFsU3BlY2lhbEFjdGlvbkRpc3BhdGNoZXIgfSBmcm9tICcuLi90eXBlcy9zcGVjaWFsLWFjdGlvbnMudHlwZXMnO1xuaW1wb3J0IHsgVGh1bWJuYWlsR2VuZXJhdG9yIH0gZnJvbSAnLi4vdHlwZXMvdGh1bWJuYWlscy50eXBlcyc7XG5pbXBvcnQgeyBOT09QX0ZVTkNUSU9OIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgU2VsZWN0aW9uVXRpbCB9IGZyb20gJy4vc2VsZWN0aW9uJztcblxuZXhwb3J0IGNvbnN0IENob25reUluc3RhbmNlSWRDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxzdHJpbmc+KCduby1pbnN0YW5jZS1pZCcpO1xuZXhwb3J0IGNvbnN0IENob25reUZpbGVzQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8RmlsZUFycmF5PihbXSk7XG5leHBvcnQgY29uc3QgQ2hvbmt5Rm9sZGVyQ2hhaW5Db250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxOdWxsYWJsZTxGaWxlQXJyYXk+PihudWxsKTtcblxuLy8gPT09IFNlbGVjdGlvbiBjb250ZXh0c1xuZXhwb3J0IGNvbnN0IENob25reVNlbGVjdGlvbkNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PEZpbGVTZWxlY3Rpb24+KHt9KTtcbmV4cG9ydCBjb25zdCBDaG9ua3lTZWxlY3Rpb25TaXplQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8bnVtYmVyPigwKTtcbmV4cG9ydCBjb25zdCBDaG9ua3lTZWxlY3Rpb25VdGlsQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8U2VsZWN0aW9uVXRpbD4oXG4gICAgbmV3IFNlbGVjdGlvblV0aWwoKVxuKTtcblxuZXhwb3J0IGNvbnN0IENob25reUZpbGVBY3Rpb25zQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8RmlsZUFjdGlvbltdPihbXSk7XG5leHBvcnQgY29uc3QgQ2hvbmt5RGlzcGF0Y2hGaWxlQWN0aW9uQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8XG4gICAgSW50ZXJuYWxGaWxlQWN0aW9uRGlzcGF0Y2hlclxuPihOT09QX0ZVTkNUSU9OKTtcbmV4cG9ydCBjb25zdCBDaG9ua3lEaXNwYXRjaFNwZWNpYWxBY3Rpb25Db250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxcbiAgICBJbnRlcm5hbFNwZWNpYWxBY3Rpb25EaXNwYXRjaGVyXG4+KE5PT1BfRlVOQ1RJT04pO1xuXG4vLyA9PT0gU2VhcmNoIGNvbnRleHRzXG5leHBvcnQgY29uc3QgQ2hvbmt5U2VhcmNoQmFyRW5hYmxlZENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PGJvb2xlYW4+KGZhbHNlKTtcbmV4cG9ydCBjb25zdCBDaG9ua3lTZXRTZWFyY2hCYXJFbmFibGVkQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8XG4gICAgKHZpc2libGU6IGJvb2xlYW4pID0+IHZvaWRcbj4oTk9PUF9GVU5DVElPTik7XG5leHBvcnQgY29uc3QgQ2hvbmt5U2VhcmNoQmFyVmlzaWJsZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PGJvb2xlYW4+KGZhbHNlKTtcbmV4cG9ydCBjb25zdCBDaG9ua3lTZXRTZWFyY2hCYXJWaXNpYmxlQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8XG4gICAgKHZpc2libGU6IGJvb2xlYW4pID0+IHZvaWRcbj4oTk9PUF9GVU5DVElPTik7XG5leHBvcnQgY29uc3QgQ2hvbmt5U2VhcmNoRmlsdGVyQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8c3RyaW5nPignJyk7XG5leHBvcnQgY29uc3QgQ2hvbmt5U2V0U2VhcmNoRmlsdGVyQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8XG4gICAgKHNlYXJjaEZpbHRlcjogc3RyaW5nKSA9PiB2b2lkXG4+KE5PT1BfRlVOQ1RJT04pO1xuXG5leHBvcnQgY29uc3QgQ2hvbmt5VGh1bWJuYWlsR2VuZXJhdG9yQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8XG4gICAgTnVsbGFibGU8VGh1bWJuYWlsR2VuZXJhdG9yPlxuPihudWxsKTtcblxuZXhwb3J0IGNvbnN0IENob25reURvdWJsZUNsaWNrRGVsYXlDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxudW1iZXI+KDMwMCk7XG5cbi8vID09PSBGaWxlIExpc3QgYXBwZWFyYW5jZSAmIHZpcnR1YWxpemF0aW9uIGNvbnRleHRzXG5leHBvcnQgY29uc3QgQ2hvbmt5RmlsZUVudHJ5U2l6ZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PEZpbGVFbnRyeVNpemU+KFxuICAgIERlZmF1bHRFbnRyeVNpemVcbik7XG5cbi8vID09PSBNaXNjIG9wdGlvbnMgY29udGV4dHNcbmV4cG9ydCBjb25zdCBDaG9ua3lEaXNhYmxlU2VsZWN0aW9uQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8Ym9vbGVhbj4oZmFsc2UpO1xuZXhwb3J0IGNvbnN0IENob25reUVuYWJsZURyYWdBbmREcm9wQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8Ym9vbGVhbj4oZmFsc2UpO1xuXG4vLyAtLS0gVXRpbCB0eXBlcyBhbmQgZnVuY3Rpb25zIGZvciB2YWxpZGF0aW9uIG9mIGNvbnRleHRzXG50eXBlIEV4dHJhY3RDb250ZXh0VHlwZTxQPiA9IFAgZXh0ZW5kcyBSZWFjdC5Db250ZXh0PGluZmVyIFQ+ID8gVCA6IG5ldmVyO1xuZXhwb3J0IGludGVyZmFjZSBDb250ZXh0RGF0YTxDb250ZXh0VHlwZSBleHRlbmRzIFJlYWN0LkNvbnRleHQ8YW55Pj4ge1xuICAgIGNvbnRleHQ6IENvbnRleHRUeXBlO1xuICAgIHZhbHVlOiBFeHRyYWN0Q29udGV4dFR5cGU8Q29udGV4dFR5cGU+O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgYSBuby1vcCwgYnV0IGl0J3MgdHlwZSB2ZXJpZmllcyB0aGF0IHRoZSBwcm92aWRlZCBgQ29udGV4dERhdGFgXG4gKiB2YWx1ZSBtYXRjaGVzIHRoZSB0eXBlIGV4cGVjdGVkIGJ5IHRoZSBjb250ZXh0LlxuICovXG5leHBvcnQgY29uc3QgdmFsaWRhdGVDb250ZXh0VHlwZSA9IDxUIGV4dGVuZHMgUmVhY3QuQ29udGV4dDxhbnk+PihcbiAgICBjb250ZXh0RGF0YTogQ29udGV4dERhdGE8VD5cbikgPT4gY29udGV4dERhdGE7XG4iLCJpbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAndHNkZWYnO1xuXG5pbXBvcnQge1xuICAgIEZpbGVBY3Rpb24sXG4gICAgRmlsZUFjdGlvbkhhbmRsZXIsXG4gICAgSW50ZXJuYWxGaWxlQWN0aW9uRGlzcGF0Y2hlcixcbn0gZnJvbSAnLi4vdHlwZXMvZmlsZS1hY3Rpb25zLnR5cGVzJztcbmltcG9ydCB7IEZpbGVEYXRhIH0gZnJvbSAnLi4vdHlwZXMvZmlsZXMudHlwZXMnO1xuaW1wb3J0IHsgQ2hvbmt5SWNvbk5hbWUgfSBmcm9tICcuLi90eXBlcy9pY29ucy50eXBlcyc7XG5pbXBvcnQgeyBTcGVjaWFsQWN0aW9uIH0gZnJvbSAnLi4vdHlwZXMvc3BlY2lhbC1hY3Rpb25zLnR5cGVzJztcbmltcG9ydCB7IEZpbGVIZWxwZXIgfSBmcm9tICcuL2ZpbGUtaGVscGVyJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3ZhbGlkYXRpb24nO1xuXG5leHBvcnQgY29uc3QgQ2hvbmt5QWN0aW9ucyA9IHtcbiAgICAvLyBBY3Rpb25zIHRyaWdnZXJlZCBieSBkcmFnICYgZHJvcFxuICAgIE1vdmVGaWxlc1RvOiB7XG4gICAgICAgIGlkOiAnbW92ZV9maWxlc190bycsXG4gICAgfSxcbiAgICBEdXBsaWNhdGVGaWxlc1RvOiB7XG4gICAgICAgIGlkOiAnZHVwbGljYXRlX2ZpbGVzX3RvJyxcbiAgICB9LFxuXG4gICAgT3BlblBhcmVudEZvbGRlcjoge1xuICAgICAgICBpZDogJ29wZW5fcGFyZW50X2ZvbGRlcicsXG4gICAgICAgIHJlcXVpcmVzUGFyZW50Rm9sZGVyOiB0cnVlLFxuICAgICAgICBmaWxlRmlsdGVyOiAoZmlsZTogRmlsZURhdGEpID0+IEZpbGVIZWxwZXIuaXNPcGVuYWJsZShmaWxlKSxcbiAgICAgICAgaG90a2V5czogWydiYWNrc3BhY2UnXSxcbiAgICAgICAgdG9vbGJhckJ1dHRvbjoge1xuICAgICAgICAgICAgbmFtZTogJ0dvIHVwIGEgZGlyZWN0b3J5JyxcbiAgICAgICAgICAgIHRvb2x0aXA6ICdHbyB1cCBhIGRpcmVjdG9yeScsXG4gICAgICAgICAgICBpY29uOiBDaG9ua3lJY29uTmFtZS5vcGVuUGFyZW50Rm9sZGVyLFxuICAgICAgICAgICAgaWNvbk9ubHk6IHRydWUsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBPcGVuRmlsZXM6IHtcbiAgICAgICAgLy8gV2UgZG9uJ3Qgc3BlY2lmeSB0aGUgJ2VudGVyJyBob3RrZXkgaGVyZSBiZWNhdXNlIGl0IGlzIGhhbmRsZWQgaW5zaWRlXG4gICAgICAgIC8vIGA8Q2xpY2thYmxlRmlsZUVudHJ5PmAgY29tcG9uZW50LlxuICAgICAgICBpZDogJ29wZW5fZmlsZXMnLFxuICAgICAgICByZXF1aXJlc1NlbGVjdGlvbjogdHJ1ZSxcbiAgICAgICAgZmlsZUZpbHRlcjogRmlsZUhlbHBlci5pc09wZW5hYmxlLFxuICAgICAgICB0b29sYmFyQnV0dG9uOiB7XG4gICAgICAgICAgICBuYW1lOiAnT3BlbiBzZWxlY3Rpb24nLFxuICAgICAgICAgICAgZ3JvdXA6ICdBY3Rpb25zJyxcbiAgICAgICAgICAgIGRyb3Bkb3duOiB0cnVlLFxuICAgICAgICAgICAgaWNvbjogQ2hvbmt5SWNvbk5hbWUub3BlbkZpbGVzLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgVG9nZ2xlU2VhcmNoOiB7XG4gICAgICAgIGlkOiAndG9nZ2xlX3NlYXJjaCcsXG4gICAgICAgIGhvdGtleXM6IFsnY3RybCtmJ10sXG4gICAgICAgIHRvb2xiYXJCdXR0b246IHtcbiAgICAgICAgICAgIG5hbWU6ICdTZWFyY2gnLFxuICAgICAgICAgICAgaWNvbjogQ2hvbmt5SWNvbk5hbWUuc2VhcmNoLFxuICAgICAgICAgICAgaWNvbk9ubHk6IHRydWUsXG4gICAgICAgIH0sXG5cbiAgICAgICAgc3BlY2lhbEFjdGlvblRvRGlzcGF0Y2g6IFNwZWNpYWxBY3Rpb24uVG9nZ2xlU2VhcmNoQmFyLFxuICAgIH0sXG5cbiAgICBDb3B5RmlsZXM6IHtcbiAgICAgICAgaWQ6ICdjb3B5X2ZpbGVzJyxcbiAgICAgICAgcmVxdWlyZXNTZWxlY3Rpb246IHRydWUsXG4gICAgfSxcblxuICAgIENyZWF0ZUZvbGRlcjoge1xuICAgICAgICBpZDogJ2NyZWF0ZV9mb2xkZXInLFxuICAgICAgICB0b29sYmFyQnV0dG9uOiB7XG4gICAgICAgICAgICBuYW1lOiAnQ3JlYXRlIGZvbGRlcicsXG4gICAgICAgICAgICB0b29sdGlwOiAnQ3JlYXRlIGEgZm9sZGVyJyxcbiAgICAgICAgICAgIGljb246IENob25reUljb25OYW1lLmZvbGRlckNyZWF0ZSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIFVwbG9hZEZpbGVzOiB7XG4gICAgICAgIGlkOiAndXBsb2FkX2ZpbGVzJyxcbiAgICAgICAgdG9vbGJhckJ1dHRvbjoge1xuICAgICAgICAgICAgbmFtZTogJ1VwbG9hZCBmaWxlcycsXG4gICAgICAgICAgICB0b29sdGlwOiAnVXBsb2FkIGZpbGVzJyxcbiAgICAgICAgICAgIGljb246IENob25reUljb25OYW1lLnVwbG9hZCxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIERvd25sb2FkRmlsZXM6IHtcbiAgICAgICAgaWQ6ICdkb3dubG9hZF9maWxlcycsXG4gICAgICAgIHJlcXVpcmVzU2VsZWN0aW9uOiB0cnVlLFxuICAgICAgICB0b29sYmFyQnV0dG9uOiB7XG4gICAgICAgICAgICBuYW1lOiAnRG93bmxvYWQgZmlsZXMnLFxuICAgICAgICAgICAgZ3JvdXA6ICdBY3Rpb25zJyxcbiAgICAgICAgICAgIHRvb2x0aXA6ICdEb3dubG9hZCBmaWxlcycsXG4gICAgICAgICAgICBkcm9wZG93bjogdHJ1ZSxcbiAgICAgICAgICAgIGljb246IENob25reUljb25OYW1lLmRvd25sb2FkLFxuICAgICAgICB9LFxuICAgIH0sXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgY29uc3QgRGVmYXVsdEFjdGlvbnM6IEZpbGVBY3Rpb25bXSA9IFtcbiAgICBDaG9ua3lBY3Rpb25zLk1vdmVGaWxlc1RvLFxuICAgIENob25reUFjdGlvbnMuRHVwbGljYXRlRmlsZXNUbyxcblxuICAgIENob25reUFjdGlvbnMuT3BlblBhcmVudEZvbGRlcixcbiAgICBDaG9ua3lBY3Rpb25zLk9wZW5GaWxlcyxcbiAgICBDaG9ua3lBY3Rpb25zLlRvZ2dsZVNlYXJjaCxcbl07XG5cbi8qKlxuICogUmV0dXJucyBhIGRpc3BhdGNoIG1ldGhvZCBtZWFudCB0byBiZSB1c2VkIGJ5IGNoaWxkIGNvbXBvbmVudHMuIFRoaXMgZGlzcGF0Y2ggbWV0aG9kXG4gKiBpcyBtZWFudCBmb3IgYWN0aW9ucyB0aGF0IHNob3VsZCBiZSBoYW5kbGVkIGRpcmVjdGx5IGJ5IHRoZSB1c2VyLiBJZiB5b3Ugd2FudCB0b1xuICogdHJhbnNmb3JtIHRoZSBhY3Rpb24gaW50ZXJuYWxseSBiZWZvcmUgc2VuZGluZyBpdCB0byB0aGUgdXNlciwgdXNlIHRoZSBcInNwZWNpYWxcbiAqIGFjdGlvbiBkaXNwYXRjaGVyXCIuXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VGaWxlQWN0aW9uRGlzcGF0Y2hlciA9IChcbiAgICBmaWxlQWN0aW9uczogRmlsZUFjdGlvbltdLFxuICAgIG9uRmlsZUFjdGlvbjogTnVsbGFibGU8RmlsZUFjdGlvbkhhbmRsZXI+XG4pOiBJbnRlcm5hbEZpbGVBY3Rpb25EaXNwYXRjaGVyID0+IHtcbiAgICBjb25zdCBhY3Rpb25NYXBEZXBzID0gW2ZpbGVBY3Rpb25zXTtcbiAgICBjb25zdCBhY3Rpb25NYXAgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgY29uc3QgYWN0aW9uTWFwID0ge307XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGZpbGVBY3Rpb25zKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBmaWxlQWN0aW9uIG9mIGZpbGVBY3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uTWFwW2ZpbGVBY3Rpb24uaWRdID0gZmlsZUFjdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWN0aW9uTWFwO1xuICAgIH0sIGFjdGlvbk1hcERlcHMpO1xuXG4gICAgY29uc3QgZGlzcGF0Y2hGaWxlQWN0aW9uRGVwcyA9IFthY3Rpb25NYXAsIG9uRmlsZUFjdGlvbl07XG4gICAgY29uc3QgZGlzcGF0Y2hGaWxlQWN0aW9uOiBJbnRlcm5hbEZpbGVBY3Rpb25EaXNwYXRjaGVyID0gdXNlQ2FsbGJhY2soXG4gICAgICAgIChhY3Rpb25EYXRhKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGFjdGlvbklkIH0gPSBhY3Rpb25EYXRhO1xuXG4gICAgICAgICAgICBjb25zdCBhY3Rpb24gPSBhY3Rpb25NYXBbYWN0aW9uSWRdO1xuICAgICAgICAgICAgaWYgKGFjdGlvbikge1xuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKG9uRmlsZUFjdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IG9uRmlsZUFjdGlvbihhY3Rpb24sIGFjdGlvbkRhdGEpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dnZXIuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBVc2VyLWRlZmluZWQgXCJvbkFjdGlvblwiIGhhbmRsZXIgdGhyZXcgYW4gZXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIExvZ2dlci5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAgYEludGVybmFsIGNvbXBvbmVudHMgZGlzcGF0Y2hlZCBhIFwiJHthY3Rpb25JZH1cIiBmaWxlIGFjdGlvbiwgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgYnV0IHN1Y2ggYWN0aW9uIHdhcyBub3QgcmVnaXN0ZXJlZC5gXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGlzcGF0Y2hGaWxlQWN0aW9uRGVwc1xuICAgICk7XG5cbiAgICByZXR1cm4gZGlzcGF0Y2hGaWxlQWN0aW9uO1xufTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgY29uc3QgdXNlRGVib3VuY2UgPSA8VD4odmFsdWU6IFQsIGRlbGF5OiBudW1iZXIpOiBUID0+IHtcbiAgICBjb25zdCBbZGVib3VuY2VkVmFsdWUsIHNldERlYm91bmNlZFZhbHVlXSA9IHVzZVN0YXRlKHZhbHVlKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHNldERlYm91bmNlZFZhbHVlKHZhbHVlKTtcbiAgICAgICAgfSwgZGVsYXkpO1xuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoaGFuZGxlcik7XG4gICAgICAgIH07XG4gICAgfSwgW3ZhbHVlLCBkZWxheV0pO1xuXG4gICAgcmV0dXJuIGRlYm91bmNlZFZhbHVlO1xufTtcblxuY29uc3QgVU5JTklUSUFMSVpFRF9TRU5USU5FTCA9IHt9O1xuZXhwb3J0IGNvbnN0IHVzZVN0YXRpY1ZhbHVlID0gPFQ+KGZhY3Rvcnk6ICgpID0+IFQpOiBUID0+IHtcbiAgICBjb25zdCB2YWx1ZVJlZiA9IHVzZVJlZjxUPihVTklOSVRJQUxJWkVEX1NFTlRJTkVMIGFzIFQpO1xuICAgIGlmICh2YWx1ZVJlZi5jdXJyZW50ID09PSBVTklOSVRJQUxJWkVEX1NFTlRJTkVMKSB2YWx1ZVJlZi5jdXJyZW50ID0gZmFjdG9yeSgpO1xuICAgIHJldHVybiB2YWx1ZVJlZi5jdXJyZW50O1xufTtcblxuaW50ZXJmYWNlIFVzZUNsaWNrTGlzdGVuZXJQYXJhbXMge1xuICAgIG9uQ2xpY2s/OiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG4gICAgb25JbnNpZGVDbGljaz86IChldmVudDogTW91c2VFdmVudCkgPT4gdm9pZDtcbiAgICBvbk91dHNpZGVDbGljaz86IChldmVudDogTW91c2VFdmVudCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGNvbnN0IHVzZUNsaWNrTGlzdGVuZXIgPSA8VCBleHRlbmRzIEhUTUxFbGVtZW50ID0gSFRNTERpdkVsZW1lbnQ+KFxuICAgIHBhcmFtczogVXNlQ2xpY2tMaXN0ZW5lclBhcmFtc1xuKSA9PiB7XG4gICAgY29uc3QgdHJpZ2dlckNvbXBvbmVudFJlZiA9IHVzZVJlZjxUPigpO1xuXG4gICAgY29uc3QgY2xpY2tMaXN0ZW5lciA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAhdHJpZ2dlckNvbXBvbmVudFJlZi5jdXJyZW50IHx8XG4gICAgICAgICAgICAgICAgdHJpZ2dlckNvbXBvbmVudFJlZi5jdXJyZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCBhcyBhbnkpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAvLyBDbGljayBvcmlnaW5hdGVkIGZyb20gaW5zaWRlLlxuICAgICAgICAgICAgICAgIGlmIChwYXJhbXMub25JbnNpZGVDbGljaykgcGFyYW1zLm9uSW5zaWRlQ2xpY2soZXZlbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBDbGljayBvcmlnaW5hdGVkIGZyb20gb3V0c2lkZSBpbnNpZGUuXG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5vbk91dHNpZGVDbGljaykgcGFyYW1zLm9uT3V0c2lkZUNsaWNrKGV2ZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHBhcmFtcy5vbkNsaWNrKSBwYXJhbXMub25DbGljayhldmVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIFtcbiAgICAgICAgICAgIHBhcmFtcy5vbkNsaWNrLFxuICAgICAgICAgICAgcGFyYW1zLm9uSW5zaWRlQ2xpY2ssXG4gICAgICAgICAgICBwYXJhbXMub25PdXRzaWRlQ2xpY2ssXG4gICAgICAgICAgICB0cmlnZ2VyQ29tcG9uZW50UmVmLFxuICAgICAgICBdXG4gICAgKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGNsaWNrTGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGNsaWNrTGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgfTtcbiAgICB9LCBbY2xpY2tMaXN0ZW5lcl0pO1xuXG4gICAgcmV0dXJuIHRyaWdnZXJDb21wb25lbnRSZWYgYXMgUmVhY3QuUmVmT2JqZWN0PFQ+O1xufTtcbiIsImltcG9ydCBGdXp6eVNlYXJjaCBmcm9tICdmdXp6eS1zZWFyY2gnO1xuaW1wb3J0IHsgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IEZpbGVBcnJheSwgRmlsZURhdGEgfSBmcm9tICcuLi90eXBlcy9maWxlcy50eXBlcyc7XG5pbXBvcnQge1xuICAgIENob25reVNlYXJjaEJhckVuYWJsZWRDb250ZXh0LFxuICAgIENob25reVNlYXJjaEJhclZpc2libGVDb250ZXh0LFxuICAgIENob25reVNlYXJjaEZpbHRlckNvbnRleHQsXG4gICAgQ2hvbmt5U2V0U2VhcmNoQmFyRW5hYmxlZENvbnRleHQsXG4gICAgQ2hvbmt5U2V0U2VhcmNoQmFyVmlzaWJsZUNvbnRleHQsXG4gICAgQ2hvbmt5U2V0U2VhcmNoRmlsdGVyQ29udGV4dCxcbiAgICB2YWxpZGF0ZUNvbnRleHRUeXBlLFxufSBmcm9tICcuL2NvbnRleHQnO1xuXG5leHBvcnQgY29uc3QgdXNlU2VhcmNoID0gKCkgPT4ge1xuICAgIGNvbnN0IHNlYXJjaFN0YXRlID0gdXNlU2VhcmNoU3RhdGUoKTtcbiAgICBjb25zdCBzZWFyY2hDb250ZXh0cyA9IHVzZVNlYXJjaENvbnRleHRzKHNlYXJjaFN0YXRlKTtcbiAgICByZXR1cm4geyBzZWFyY2hTdGF0ZSwgc2VhcmNoQ29udGV4dHMgfTtcbn07XG5cbmNvbnN0IHVzZVNlYXJjaFN0YXRlID0gKCkgPT4ge1xuICAgIGNvbnN0IFtzZWFyY2hCYXJFbmFibGVkLCBzZXRTZWFyY2hCYXJFbmFibGVkXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcbiAgICBjb25zdCBbc2VhcmNoQmFyVmlzaWJsZSwgc2V0U2VhcmNoQmFyVmlzaWJsZV0gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG4gICAgY29uc3QgW3NlYXJjaEZpbHRlciwgc2V0U2VhcmNoRmlsdGVyXSA9IHVzZVN0YXRlPHN0cmluZz4oJycpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2VhcmNoQmFyRW5hYmxlZCxcbiAgICAgICAgc2V0U2VhcmNoQmFyRW5hYmxlZCxcbiAgICAgICAgc2VhcmNoQmFyVmlzaWJsZSxcbiAgICAgICAgc2V0U2VhcmNoQmFyVmlzaWJsZSxcbiAgICAgICAgc2VhcmNoRmlsdGVyLFxuICAgICAgICBzZXRTZWFyY2hGaWx0ZXIsXG4gICAgfTtcbn07XG5cbmNvbnN0IHVzZVNlYXJjaENvbnRleHRzID0gKHNlYXJjaFN0YXRlOiBSZXR1cm5UeXBlPHR5cGVvZiB1c2VTZWFyY2hTdGF0ZT4pID0+IHtcbiAgICByZXR1cm4gW1xuICAgICAgICB2YWxpZGF0ZUNvbnRleHRUeXBlKHtcbiAgICAgICAgICAgIGNvbnRleHQ6IENob25reVNlYXJjaEJhckVuYWJsZWRDb250ZXh0LFxuICAgICAgICAgICAgdmFsdWU6IHNlYXJjaFN0YXRlLnNlYXJjaEJhckVuYWJsZWQsXG4gICAgICAgIH0pLFxuICAgICAgICB2YWxpZGF0ZUNvbnRleHRUeXBlKHtcbiAgICAgICAgICAgIGNvbnRleHQ6IENob25reVNldFNlYXJjaEJhckVuYWJsZWRDb250ZXh0LFxuICAgICAgICAgICAgdmFsdWU6IHNlYXJjaFN0YXRlLnNldFNlYXJjaEJhckVuYWJsZWQsXG4gICAgICAgIH0pLFxuICAgICAgICB2YWxpZGF0ZUNvbnRleHRUeXBlKHtcbiAgICAgICAgICAgIGNvbnRleHQ6IENob25reVNlYXJjaEJhclZpc2libGVDb250ZXh0LFxuICAgICAgICAgICAgdmFsdWU6IHNlYXJjaFN0YXRlLnNlYXJjaEJhclZpc2libGUsXG4gICAgICAgIH0pLFxuICAgICAgICB2YWxpZGF0ZUNvbnRleHRUeXBlKHtcbiAgICAgICAgICAgIGNvbnRleHQ6IENob25reVNldFNlYXJjaEJhclZpc2libGVDb250ZXh0LFxuICAgICAgICAgICAgdmFsdWU6IHNlYXJjaFN0YXRlLnNldFNlYXJjaEJhclZpc2libGUsXG4gICAgICAgIH0pLFxuICAgICAgICB2YWxpZGF0ZUNvbnRleHRUeXBlKHtcbiAgICAgICAgICAgIGNvbnRleHQ6IENob25reVNlYXJjaEZpbHRlckNvbnRleHQsXG4gICAgICAgICAgICB2YWx1ZTogc2VhcmNoU3RhdGUuc2VhcmNoRmlsdGVyLFxuICAgICAgICB9KSxcbiAgICAgICAgdmFsaWRhdGVDb250ZXh0VHlwZSh7XG4gICAgICAgICAgICBjb250ZXh0OiBDaG9ua3lTZXRTZWFyY2hGaWx0ZXJDb250ZXh0LFxuICAgICAgICAgICAgdmFsdWU6IHNlYXJjaFN0YXRlLnNldFNlYXJjaEZpbHRlcixcbiAgICAgICAgfSksXG4gICAgXTtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VGaWx0ZXJlZEZpbGVzID0gKGZpbGVzOiBGaWxlQXJyYXksIHNlYXJjaEZpbHRlcjogc3RyaW5nKTogRmlsZUFycmF5ID0+IHtcbiAgICBjb25zdCBkZXBzID0gW2ZpbGVzLCBzZWFyY2hGaWx0ZXJdO1xuICAgIHJldHVybiB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgaWYgKCFzZWFyY2hGaWx0ZXIpIHJldHVybiBmaWxlcztcbiAgICAgICAgY29uc3Qgc2VhcmNoZXIgPSBuZXcgRnV6enlTZWFyY2goXG4gICAgICAgICAgICBmaWxlcy5maWx0ZXIoKGYpID0+ICEhZikgYXMgRmlsZURhdGFbXSxcbiAgICAgICAgICAgIFsnbmFtZSddLFxuICAgICAgICAgICAgeyBjYXNlU2Vuc2l0aXZlOiBmYWxzZSwgc29ydDogdHJ1ZSB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBzZWFyY2hlci5zZWFyY2goc2VhcmNoRmlsdGVyKTtcbiAgICB9LCBkZXBzKTtcbn07XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBJbnRlcm5hbEZpbGVBY3Rpb25EaXNwYXRjaGVyIH0gZnJvbSAnLi4vdHlwZXMvZmlsZS1hY3Rpb25zLnR5cGVzJztcbmltcG9ydCB7IEZpbGVBcnJheSwgRmlsZVNlbGVjdGlvbiB9IGZyb20gJy4uL3R5cGVzL2ZpbGVzLnR5cGVzJztcbmltcG9ydCB7XG4gICAgSW50ZXJuYWxTcGVjaWFsQWN0aW9uRGlzcGF0Y2hlcixcbiAgICBTcGVjaWFsQWN0aW9uLFxuICAgIFNwZWNpYWxBY3Rpb25EYXRhLFxuICAgIFNwZWNpYWxEcmFnTkRyb3BFbmRBY3Rpb24sXG4gICAgU3BlY2lhbERyYWdORHJvcFN0YXJ0QWN0aW9uLFxuICAgIFNwZWNpYWxGaWxlS2V5Ym9hcmRDbGlja0FjdGlvbixcbiAgICBTcGVjaWFsRmlsZU1vdXNlQ2xpY2tBY3Rpb24sXG59IGZyb20gJy4uL3R5cGVzL3NwZWNpYWwtYWN0aW9ucy50eXBlcyc7XG5pbXBvcnQgeyBJTlRFTlRJT05BTF9FTVBUWV9ERVBTIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgQ2hvbmt5QWN0aW9ucyB9IGZyb20gJy4vZmlsZS1hY3Rpb25zJztcbmltcG9ydCB7IEZpbGVIZWxwZXIgfSBmcm9tICcuL2ZpbGUtaGVscGVyJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IFNlbGVjdGlvblV0aWwsIHVzZVNlbGVjdGlvbiB9IGZyb20gJy4vc2VsZWN0aW9uJztcblxuaW50ZXJmYWNlIFNwZWNpYWxNdXRhYmxlQ2hvbmt5U3RhdGUge1xuICAgIGZpbGVzOiBGaWxlQXJyYXk7XG4gICAgc2VsZWN0aW9uOiBGaWxlU2VsZWN0aW9uO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBkaXNwYXRjaCBtZXRob2QgbWVhbnQgdG8gYmUgdXNlZCBieSBjaGlsZCBjb21wb25lbnRzLiBUaGlzIGRpc3BhdGNoXG4gKiBtZXRob2QgaXMgbWVhbnQgZm9yIFwic3BlY2lhbFwiIGludGVybmFsIGFjdGlvbnMuIEl0IHRha2VzIGEgc3BlY2lhbCBhY3Rpb24sIGFuZFxuICogdHJhbnNmb3JtcyBpdCBpbnRvIGEgXCJmaWxlIGFjdGlvblwiIHRoYXQgY2FuIGJlIGhhbmRsZWQgYnkgdGhlIHVzZXIuXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VTcGVjaWFsQWN0aW9uRGlzcGF0Y2hlciA9IChcbiAgICBmaWxlczogRmlsZUFycmF5LFxuICAgIHNlbGVjdGlvbjogRmlsZVNlbGVjdGlvbixcbiAgICBzZWxlY3Rpb25VdGlsOiBTZWxlY3Rpb25VdGlsLFxuICAgIHNlbGVjdEZpbGVzOiBSZXR1cm5UeXBlPHR5cGVvZiB1c2VTZWxlY3Rpb24+WydzZWxlY3RGaWxlcyddLFxuICAgIHRvZ2dsZVNlbGVjdGlvbjogUmV0dXJuVHlwZTx0eXBlb2YgdXNlU2VsZWN0aW9uPlsndG9nZ2xlU2VsZWN0aW9uJ10sXG4gICAgY2xlYXJTZWxlY3Rpb246IFJldHVyblR5cGU8dHlwZW9mIHVzZVNlbGVjdGlvbj5bJ2NsZWFyU2VsZWN0aW9uJ10sXG4gICAgZGlzcGF0Y2hGaWxlQWN0aW9uOiBJbnRlcm5hbEZpbGVBY3Rpb25EaXNwYXRjaGVyXG4pOiBJbnRlcm5hbFNwZWNpYWxBY3Rpb25EaXNwYXRjaGVyID0+IHtcbiAgICAvLyBHZW5lcmF0ZSBtdXRhYmxlIENob25reSBzdGF0ZSBvYmplY3Qgc28gdGhhdCBzcGVjaWFsIGFjdGlvbiBoYW5kbGVycyBjYW4gdXNlXG4gICAgLy8gdXAtdG8tZGF0ZSBzdGF0ZSB3aXRob3V0IHRyaWdnZXJpbmcgcmUtcmVuZGVyc1xuICAgIGNvbnN0IHNwZWNpYWxTdGF0ZURlcHMgPSBbZmlsZXMsIHNlbGVjdGlvbl07XG4gICAgY29uc3Qgc3BlY2lhbFN0YXRlID0gdXNlTWVtbzxTcGVjaWFsTXV0YWJsZUNob25reVN0YXRlPihcbiAgICAgICAgKCkgPT4gKHtcbiAgICAgICAgICAgIGZpbGVzLFxuICAgICAgICAgICAgc2VsZWN0aW9uLFxuICAgICAgICB9KSxcbiAgICAgICAgSU5URU5USU9OQUxfRU1QVFlfREVQU1xuICAgICk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgc3BlY2lhbFN0YXRlLmZpbGVzID0gZmlsZXM7XG4gICAgICAgIHNwZWNpYWxTdGF0ZS5zZWxlY3Rpb24gPSBzZWxlY3Rpb247XG4gICAgfSwgc3BlY2lhbFN0YXRlRGVwcyk7XG5cbiAgICAvLyBDcmVhdGUgdGhlIHNwZWNpYWwgYWN0aW9uIGhhbmRsZXIgbWFwXG4gICAgY29uc3Qgc3BlY2lhbEFjdGlvbkhhbmRsZXJNYXAgPSB1c2VTcGVjaWFsRmlsZUFjdGlvbkhhbmRsZXJNYXAoXG4gICAgICAgIHNlbGVjdGlvblV0aWwsXG4gICAgICAgIHNlbGVjdEZpbGVzLFxuICAgICAgICB0b2dnbGVTZWxlY3Rpb24sXG4gICAgICAgIGNsZWFyU2VsZWN0aW9uLFxuICAgICAgICBkaXNwYXRjaEZpbGVBY3Rpb25cbiAgICApO1xuXG4gICAgLy8gUHJvY2VzcyBzcGVjaWFsIGFjdGlvbnMgdXNpbmcgdGhlIGhhbmRsZXJzIGZyb20gdGhlIG1hcFxuICAgIGNvbnN0IGRpc3BhdGNoU3BlY2lhbEFjdGlvbkRlcHMgPSBbc3BlY2lhbEFjdGlvbkhhbmRsZXJNYXBdO1xuICAgIGNvbnN0IGRpc3BhdGNoU3BlY2lhbEFjdGlvbiA9IHVzZUNhbGxiYWNrKChhY3Rpb25EYXRhOiBTcGVjaWFsQWN0aW9uRGF0YSkgPT4ge1xuICAgICAgICBjb25zdCB7IGFjdGlvbk5hbWUgfSA9IGFjdGlvbkRhdGE7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBzcGVjaWFsQWN0aW9uSGFuZGxlck1hcFthY3Rpb25OYW1lXTtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcihhY3Rpb25EYXRhKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgSGFuZGxlciBmb3Igc3BlY2lhbCBhY3Rpb24gXCIke2FjdGlvbk5hbWV9XCIgdGhyZXcgYW4gZXJyb3IuYCxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgTG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgICAgIGBJbnRlcm5hbCBjb21wb25lbnRzIGRpc3BhdGNoZWQgYSBcIiR7YWN0aW9uTmFtZX1cIiBzcGVjaWFsIGFjdGlvbiwgYCArXG4gICAgICAgICAgICAgICAgICAgIGBidXQgbm8gaW50ZXJuYWwgaGFuZGxlciBpcyBhdmFpbGFibGUgdG8gcHJvY2VzcyBpdC5gXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfSwgZGlzcGF0Y2hTcGVjaWFsQWN0aW9uRGVwcyk7XG4gICAgcmV0dXJuIGRpc3BhdGNoU3BlY2lhbEFjdGlvbjtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VTcGVjaWFsRmlsZUFjdGlvbkhhbmRsZXJNYXAgPSAoXG4gICAgc2VsZWN0aW9uVXRpbDogU2VsZWN0aW9uVXRpbCxcbiAgICBzZWxlY3RGaWxlczogUmV0dXJuVHlwZTx0eXBlb2YgdXNlU2VsZWN0aW9uPlsnc2VsZWN0RmlsZXMnXSxcbiAgICB0b2dnbGVTZWxlY3Rpb246IFJldHVyblR5cGU8dHlwZW9mIHVzZVNlbGVjdGlvbj5bJ3RvZ2dsZVNlbGVjdGlvbiddLFxuICAgIGNsZWFyU2VsZWN0aW9uOiBSZXR1cm5UeXBlPHR5cGVvZiB1c2VTZWxlY3Rpb24+WydjbGVhclNlbGVjdGlvbiddLFxuICAgIGRpc3BhdGNoRmlsZUFjdGlvbjogSW50ZXJuYWxGaWxlQWN0aW9uRGlzcGF0Y2hlclxuKSA9PiB7XG4gICAgLy8gRGVmaW5lIGhhbmRsZXJzIGluIGEgbWFwXG4gICAgY29uc3Qgc3BlY2lhbEFjdGlvbkhhbmRsZXJNYXBEZXBzID0gW1xuICAgICAgICBzZWxlY3RGaWxlcyxcbiAgICAgICAgdG9nZ2xlU2VsZWN0aW9uLFxuICAgICAgICBjbGVhclNlbGVjdGlvbixcbiAgICAgICAgZGlzcGF0Y2hGaWxlQWN0aW9uLFxuICAgIF07XG4gICAgY29uc3Qgc3BlY2lhbEFjdGlvbkhhbmRsZXJNYXAgPSB1c2VNZW1vKFxuICAgICAgICAoKSA9PlxuICAgICAgICAgICAgKHtcbiAgICAgICAgICAgICAgICBbU3BlY2lhbEFjdGlvbi5Nb3VzZUNsaWNrRmlsZV06IChkYXRhOiBTcGVjaWFsRmlsZU1vdXNlQ2xpY2tBY3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5jbGlja1R5cGUgPT09ICdkb3VibGUnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBGaWxlSGVscGVyLmlzT3BlbmFibGUoZGF0YS5maWxlKVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoRmlsZUFjdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uSWQ6IENob25reUFjdGlvbnMuT3BlbkZpbGVzLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogZGF0YS5maWxlLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVG8gc2ltdWxhdGUgV2luZG93cyBFeHBsb3JlciBhbmQgTmF1dGlsdXMgYmVoYXZpb3VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEgZG91YmxlIGNsaWNrIG9uIGEgZmlsZSBvbmx5IG9wZW5zIHRoYXQgZmlsZSBldmVuIGlmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlcmUgaXMgYSBzZWxlY3Rpb24uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXM6IFtkYXRhLmZpbGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoRmlsZUhlbHBlci5pc1NlbGVjdGFibGUoZGF0YS5maWxlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZVNlbGVjdGlvbihkYXRhLmZpbGUuaWQsICFkYXRhLmN0cmxLZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IEhhbmRsZSByYW5nZSBzZWxlY3Rpb25zLlxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRhdGEuY3RybEtleSkgY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgW1NwZWNpYWxBY3Rpb24uS2V5Ym9hcmRDbGlja0ZpbGVdOiAoXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IFNwZWNpYWxGaWxlS2V5Ym9hcmRDbGlja0FjdGlvblxuICAgICAgICAgICAgICAgICkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5lbnRlcktleSAmJiBGaWxlSGVscGVyLmlzT3BlbmFibGUoZGF0YS5maWxlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hGaWxlQWN0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25JZDogQ2hvbmt5QWN0aW9ucy5PcGVuRmlsZXMuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBkYXRhLmZpbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXM6IHNlbGVjdGlvblV0aWwuZ2V0U2VsZWN0ZWRGaWxlcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsZUhlbHBlci5pc09wZW5hYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEuc3BhY2VLZXkgJiYgRmlsZUhlbHBlci5pc1NlbGVjdGFibGUoZGF0YS5maWxlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlU2VsZWN0aW9uKGRhdGEuZmlsZS5pZCwgZGF0YS5jdHJsS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IEhhbmRsZSByYW5nZSBzZWxlY3Rpb25zLlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbU3BlY2lhbEFjdGlvbi5EcmFnTkRyb3BTdGFydF06IChkYXRhOiBTcGVjaWFsRHJhZ05Ecm9wU3RhcnRBY3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZSA9IGRhdGEuZHJhZ1NvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxlY3Rpb25VdGlsLmlzU2VsZWN0ZWQoZmlsZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyU2VsZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoRmlsZUhlbHBlci5pc1NlbGVjdGFibGUoZmlsZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RGaWxlcyhbZmlsZS5pZF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbU3BlY2lhbEFjdGlvbi5EcmFnTkRyb3BFbmRdOiAoZGF0YTogU3BlY2lhbERyYWdORHJvcEVuZEFjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0aW9uVXRpbC5pc1NlbGVjdGVkKGRhdGEuZHJvcFRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhbid0IGRyb3AgYSBzZWxlY3Rpb24gaW50byBpdHNlbGZcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkRmlsZXMgPSBzZWxlY3Rpb25VdGlsLmdldFNlbGVjdGVkRmlsZXMoXG4gICAgICAgICAgICAgICAgICAgICAgICBGaWxlSGVscGVyLmlzRHJhZ2dhYmxlXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRyb3BwZWRGaWxlcyA9XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEZpbGVzLmxlbmd0aCA+IDAgPyBzZWxlY3RlZEZpbGVzIDogW2RhdGEuZHJhZ1NvdXJjZV07XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoRmlsZUFjdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25JZDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmRyb3BFZmZlY3QgPT09ICdjb3B5J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IENob25reUFjdGlvbnMuRHVwbGljYXRlRmlsZXNUby5pZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IENob25reUFjdGlvbnMuTW92ZUZpbGVzVG8uaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IGRhdGEuZHJvcFRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzOiBkcm9wcGVkRmlsZXMsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9IGFzIHsgW2FjdGlvbk5hbWUgaW4gU3BlY2lhbEFjdGlvbl06IChkYXRhOiBTcGVjaWFsQWN0aW9uRGF0YSkgPT4gdm9pZCB9KSxcbiAgICAgICAgc3BlY2lhbEFjdGlvbkhhbmRsZXJNYXBEZXBzXG4gICAgKTtcbiAgICByZXR1cm4gc3BlY2lhbEFjdGlvbkhhbmRsZXJNYXA7XG59O1xuIiwiLyoqXG4gKiBAYXV0aG9yIFRpbXVyIEt1emhhZ2FsaXlldiA8dGltLmt1emhAZ21haWwuY29tPlxuICogQGNvcHlyaWdodCAyMDIwXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbnRleHRQcm92aWRlckRhdGE8VCA9IGFueT4ge1xuICAgIHByb3ZpZGVyOiBSZWFjdC5Qcm92aWRlcjxUPjtcbiAgICB2YWx1ZTogVDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb250ZXh0Q29tcG9zZXJQcm9wcyB7XG4gICAgcHJvdmlkZXJzOiBDb250ZXh0UHJvdmlkZXJEYXRhW107XG59XG5cbi8qKlxuICogVGFrZXMgYW4gYXJyYXkgb2YgY29udGV4dCBwcm92aWRlcnMgYW5kIGNvbXBvc2VzIHRoZW0gaW50byBhXG4gKiBoaWVyYXJjaHk6XG4gKlxuICogPENvbXAxIHsuLi5wcm9wc30+XG4gKiAgICAgPENvbXAyIHsuLi5wcm9wc30+XG4gKiAgICAgICAgIDxDb21wMyB7Li4ucHJvcHN9PlxuICogICAgICAgICAgICAge2NoaWxkcmVufVxuICogICAgICAgICA8L0NvbXAzPlxuICogICAgIDwvQ29tcDI+XG4gKiA8L0NvbXAxPlxuICovXG5leHBvcnQgY29uc3QgQ29udGV4dENvbXBvc2VyOiBSZWFjdC5GQzxDb250ZXh0Q29tcG9zZXJQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IHByb3ZpZGVycywgY2hpbGRyZW4gfSA9IHByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAge3Byb3ZpZGVycy5yZWR1Y2VSaWdodCgoYWNjLCBkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgUHJvdmlkZXIgPSBkYXRhLnByb3ZpZGVyO1xuICAgICAgICAgICAgICAgIHJldHVybiA8UHJvdmlkZXIgdmFsdWU9e2RhdGEudmFsdWV9PnthY2N9PC9Qcm92aWRlcj47XG4gICAgICAgICAgICB9LCBjaGlsZHJlbil9XG4gICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgKTtcbn07XG4iLCIvKipcbiAqIEBhdXRob3IgVGltdXIgS3V6aGFnYWxpeWV2IDx0aW0ua3V6aEBnbWFpbC5jb20+XG4gKiBAY29weXJpZ2h0IDIwMjBcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlRHJhZ0xheWVyIH0gZnJvbSAncmVhY3QtZG5kJztcbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAndHNkZWYnO1xuXG5pbXBvcnQgeyBDaG9ua3lTZWxlY3Rpb25TaXplQ29udGV4dCB9IGZyb20gJy4uLy4uL3V0aWwvY29udGV4dCc7XG5pbXBvcnQgeyBEbkRGaWxlRW50cnlJdGVtLCBEbkRGaWxlRW50cnlUeXBlIH0gZnJvbSAnLi9EbkRGaWxlRW50cnknO1xuXG5leHBvcnQgaW50ZXJmYWNlIERuREZpbGVMaXN0RHJhZ0xheWVyUHJvcHMge31cblxuY29uc3QgbGF5ZXJTdHlsZXM6IFJlYWN0LkNTU1Byb3BlcnRpZXMgPSB7XG4gICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgIHpJbmRleDogMTAwLFxuICAgIGxlZnQ6IDAsXG4gICAgdG9wOiAwLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG59O1xuY29uc3QgZ2V0SXRlbVN0eWxlcyA9IChcbiAgICBpbml0aWFsQ3Vyc29yT2Zmc2V0OiBOdWxsYWJsZTx7IHg6IG51bWJlcjsgeTogbnVtYmVyIH0+LFxuICAgIGluaXRpYWxGaWxlT2Zmc2V0OiBOdWxsYWJsZTx7IHg6IG51bWJlcjsgeTogbnVtYmVyIH0+LFxuICAgIGN1cnJlbnRGaWxlT2Zmc2V0OiBOdWxsYWJsZTx7IHg6IG51bWJlcjsgeTogbnVtYmVyIH0+XG4pID0+IHtcbiAgICBpZiAoIWluaXRpYWxDdXJzb3JPZmZzZXQgfHwgIWluaXRpYWxGaWxlT2Zmc2V0IHx8ICFjdXJyZW50RmlsZU9mZnNldCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCB4ID0gaW5pdGlhbEN1cnNvck9mZnNldC54ICsgKGN1cnJlbnRGaWxlT2Zmc2V0LnggLSBpbml0aWFsRmlsZU9mZnNldC54KTtcbiAgICBjb25zdCB5ID0gaW5pdGlhbEN1cnNvck9mZnNldC55ICsgKGN1cnJlbnRGaWxlT2Zmc2V0LnkgLSBpbml0aWFsRmlsZU9mZnNldC55KTtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSBgdHJhbnNsYXRlKCR7eH1weCwgJHt5fXB4KWA7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHJhbnNmb3JtLFxuICAgICAgICBXZWJraXRUcmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IERuREZpbGVMaXN0RHJhZ0xheWVyOiBSZWFjdC5GQzxEbkRGaWxlTGlzdERyYWdMYXllclByb3BzPiA9ICgpID0+IHtcbiAgICBjb25zdCBzZWxlY3Rpb25TaXplID0gdXNlQ29udGV4dChDaG9ua3lTZWxlY3Rpb25TaXplQ29udGV4dCk7XG5cbiAgICBjb25zdCB7XG4gICAgICAgIGl0ZW1UeXBlLFxuICAgICAgICBpdGVtLFxuICAgICAgICBpbml0aWFsQ3Vyc29yT2Zmc2V0LFxuICAgICAgICBpbml0aWFsRmlsZU9mZnNldCxcbiAgICAgICAgY3VycmVudEZpbGVPZmZzZXQsXG4gICAgICAgIGlzRHJhZ2dpbmcsXG4gICAgfSA9IHVzZURyYWdMYXllcigobW9uaXRvcikgPT4gKHtcbiAgICAgICAgaXRlbTogbW9uaXRvci5nZXRJdGVtKCkgYXMgRG5ERmlsZUVudHJ5SXRlbSxcbiAgICAgICAgaXRlbVR5cGU6IG1vbml0b3IuZ2V0SXRlbVR5cGUoKSxcbiAgICAgICAgaW5pdGlhbEN1cnNvck9mZnNldDogbW9uaXRvci5nZXRJbml0aWFsQ2xpZW50T2Zmc2V0KCksXG4gICAgICAgIGluaXRpYWxGaWxlT2Zmc2V0OiBtb25pdG9yLmdldEluaXRpYWxTb3VyY2VDbGllbnRPZmZzZXQoKSxcbiAgICAgICAgY3VycmVudEZpbGVPZmZzZXQ6IG1vbml0b3IuZ2V0U291cmNlQ2xpZW50T2Zmc2V0KCksXG4gICAgICAgIGlzRHJhZ2dpbmc6IG1vbml0b3IuaXNEcmFnZ2luZygpLFxuICAgIH0pKTtcbiAgICBmdW5jdGlvbiByZW5kZXJJdGVtKCkge1xuICAgICAgICBpZiAoIWl0ZW0uZmlsZSB8fCBpdGVtVHlwZSAhPT0gRG5ERmlsZUVudHJ5VHlwZSkgcmV0dXJuO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNob25reS1maWxlLWRyYWctcHJldmlld1wiPlxuICAgICAgICAgICAgICAgIDxiPntpdGVtLmZpbGUubmFtZX08L2I+XG4gICAgICAgICAgICAgICAge3NlbGVjdGlvblNpemUgPiAxICYmIChcbiAgICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsnIGFuZCAnfVxuICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2VsZWN0aW9uU2l6ZSAtIDF9IG90aGVyIGZpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2VsZWN0aW9uU2l6ZSAtIDEgIT09IDEgPyAncycgOiAnJ31cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Ryb25nPlxuICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxuICAgIGlmICghaXNEcmFnZ2luZykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBzdHlsZT17bGF5ZXJTdHlsZXN9PlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIHN0eWxlPXtnZXRJdGVtU3R5bGVzKFxuICAgICAgICAgICAgICAgICAgICBpbml0aWFsQ3Vyc29yT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICBpbml0aWFsRmlsZU9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEZpbGVPZmZzZXRcbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtyZW5kZXJJdGVtKCl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEVycm9yTWVzc2FnZVByb3BzIHtcbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgYnVsbGV0cz86IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgY29uc3QgRXJyb3JNZXNzYWdlID0gUmVhY3QubWVtbzxFcnJvck1lc3NhZ2VQcm9wcz4oKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBtZXNzYWdlLCBidWxsZXRzIH0gPSBwcm9wcztcblxuICAgIGxldCBidWxsZXRMaXN0ID0gbnVsbDtcbiAgICBpZiAoYnVsbGV0cyAmJiBidWxsZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWxsZXRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpdGVtcy5wdXNoKDxsaSBrZXk9e2BlcnJvci1idWxsZXQtJHtpfWB9PntidWxsZXRzW2ldfTwvbGk+KTtcbiAgICAgICAgfVxuICAgICAgICBidWxsZXRMaXN0ID0gPHVsPntpdGVtc308L3VsPjtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNob25reS1lcnJvclwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiY2hvbmt5LWVycm9yLW5hbWVcIj5DaG9ua3kgcnVudGltZSBlcnJvcjo8L3NwYW4+IHttZXNzYWdlfVxuICAgICAgICAgICAge2J1bGxldExpc3R9XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59KTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHNob3J0aWQgZnJvbSAnc2hvcnRpZCc7XG5cbmltcG9ydCB7IEZpbGVBY3Rpb25IYW5kbGVyLCBGaWxlQXJyYXkgfSBmcm9tICcuLi8uLic7XG5pbXBvcnQgeyBGaWxlQWN0aW9uIH0gZnJvbSAnLi4vLi4vdHlwZXMvZmlsZS1hY3Rpb25zLnR5cGVzJztcbmltcG9ydCB7IFRodW1ibmFpbEdlbmVyYXRvciB9IGZyb20gJy4uLy4uL3R5cGVzL3RodW1ibmFpbHMudHlwZXMnO1xuaW1wb3J0IHtcbiAgICBDaG9ua3lEaXNhYmxlU2VsZWN0aW9uQ29udGV4dCxcbiAgICBDaG9ua3lEaXNwYXRjaEZpbGVBY3Rpb25Db250ZXh0LFxuICAgIENob25reURpc3BhdGNoU3BlY2lhbEFjdGlvbkNvbnRleHQsXG4gICAgQ2hvbmt5RG91YmxlQ2xpY2tEZWxheUNvbnRleHQsXG4gICAgQ2hvbmt5RW5hYmxlRHJhZ0FuZERyb3BDb250ZXh0LFxuICAgIENob25reUZpbGVBY3Rpb25zQ29udGV4dCxcbiAgICBDaG9ua3lGaWxlRW50cnlTaXplQ29udGV4dCxcbiAgICBDaG9ua3lGaWxlc0NvbnRleHQsXG4gICAgQ2hvbmt5Rm9sZGVyQ2hhaW5Db250ZXh0LFxuICAgIENob25reUluc3RhbmNlSWRDb250ZXh0LFxuICAgIENob25reVNlbGVjdGlvbkNvbnRleHQsXG4gICAgQ2hvbmt5U2VsZWN0aW9uU2l6ZUNvbnRleHQsXG4gICAgQ2hvbmt5U2VsZWN0aW9uVXRpbENvbnRleHQsXG4gICAgQ2hvbmt5VGh1bWJuYWlsR2VuZXJhdG9yQ29udGV4dCxcbiAgICB2YWxpZGF0ZUNvbnRleHRUeXBlLFxufSBmcm9tICcuLi8uLi91dGlsL2NvbnRleHQnO1xuaW1wb3J0IHsgRGVmYXVsdEFjdGlvbnMsIHVzZUZpbGVBY3Rpb25EaXNwYXRjaGVyIH0gZnJvbSAnLi4vLi4vdXRpbC9maWxlLWFjdGlvbnMnO1xuaW1wb3J0IHsgdXNlQ2xpY2tMaXN0ZW5lciwgdXNlU3RhdGljVmFsdWUgfSBmcm9tICcuLi8uLi91dGlsL2hvb2tzLWhlbHBlcnMnO1xuaW1wb3J0IHsgdXNlRmlsdGVyZWRGaWxlcywgdXNlU2VhcmNoIH0gZnJvbSAnLi4vLi4vdXRpbC9zZWFyY2gnO1xuaW1wb3J0IHsgdXNlU2VsZWN0aW9uIH0gZnJvbSAnLi4vLi4vdXRpbC9zZWxlY3Rpb24nO1xuaW1wb3J0IHsgdXNlU3BlY2lhbEFjdGlvbkRpc3BhdGNoZXIgfSBmcm9tICcuLi8uLi91dGlsL3NwZWNpYWwtYWN0aW9ucyc7XG5pbXBvcnQgeyB1c2VGaWxlQnJvd3NlclZhbGlkYXRpb24gfSBmcm9tICcuLi8uLi91dGlsL3ZhbGlkYXRpb24nO1xuaW1wb3J0IHsgQ29udGV4dENvbXBvc2VyLCBDb250ZXh0UHJvdmlkZXJEYXRhIH0gZnJvbSAnLi4vaW50ZXJuYWwvQ29udGV4dENvbXBvc2VyJztcbmltcG9ydCB7IERuREZpbGVMaXN0RHJhZ0xheWVyIH0gZnJvbSAnLi4vaW50ZXJuYWwvRG5ERmlsZUxpc3REcmFnTGF5ZXInO1xuaW1wb3J0IHsgRXJyb3JNZXNzYWdlIH0gZnJvbSAnLi4vaW50ZXJuYWwvRXJyb3JNZXNzYWdlJztcbmltcG9ydCB7IERlZmF1bHRFbnRyeVNpemUgfSBmcm9tICcuL0ZpbGVMaXN0LXZpcnR1YWxpemF0aW9uJztcblxuZXhwb3J0IGludGVyZmFjZSBGaWxlQnJvd3NlclByb3BzIHtcbiAgICAvKipcbiAgICAgKiBMaXN0IG9mIGZpbGVzIHRoYXQgd2lsbCBiZSBkaXNwbGF5ZWQgaW4gdGhlIG1haW4gY29udGFpbmVyLiBUaGUgcHJvdmlkZWQgdmFsdWVcbiAgICAgKiAqKm11c3QqKiBiZSBhbiBhcnJheSwgd2hlcmUgZWFjaCBlbGVtZW50IGlzIGVpdGhlciBgbnVsbGAgb3IgYW4gb2JqZWN0IHRoYXRcbiAgICAgKiBzYXRpc2ZpZXMgdGhlIGBGaWxlRGF0YWAgdHlwZS4gSWYgYW4gZWxlbWVudCBpcyBgbnVsbGAsIGEgbG9hZGluZyBwbGFjZWhvbGRlclxuICAgICAqIHdpbGwgYmUgZGlzcGxheWVkIGluIGl0cyBwbGFjZS5cbiAgICAgKi9cbiAgICBmaWxlczogRmlsZUFycmF5O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgZm9sZGVyIGhpZXJhcmNoeS4gVGhpcyBzaG91bGQgYmUgYW4gYXJyYXkgb2YgYGZpbGVzYCwgZXZlcnlcbiAgICAgKiBlbGVtZW50IHNob3VsZCBlaXRoZXIgYmUgYG51bGxgIG9yIGFuIG9iamVjdCBvZiBgRmlsZURhdGFgIHR5cGUuIFRoZSBmaXJzdFxuICAgICAqIGVsZW1lbnQgc2hvdWxkIHJlcHJlc2VudCB0aGUgdG9wLWxldmVsIGRpcmVjdG9yeSwgYW5kIHRoZSBsYXN0IGVsZW1lbnRcbiAgICAgKiBzaG91bGQgYmUgdGhlIGN1cnJlbnQgZm9sZGVyLlxuICAgICAqL1xuICAgIGZvbGRlckNoYWluPzogRmlsZUFycmF5O1xuXG4gICAgZmlsZUFjdGlvbnM/OiBGaWxlQWN0aW9uW107XG4gICAgb25GaWxlQWN0aW9uPzogRmlsZUFjdGlvbkhhbmRsZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZnVuY3Rpb24gdGhhdCBkZXRlcm1pbmVzIHRoZSB0aHVtYm5haWwgaW1hZ2UgVVJMIGZvciBhIGZpbGUuIEl0IGdldHMgYSBmaWxlIG9iamVjdCBhcyB0aGUgaW5wdXQsIGFuZFxuICAgICAqIHNob3VsZCByZXR1cm4gYSBgc3RyaW5nYCBvciBgbnVsbGAuIEl0IGNhbiBhbHNvIHJldHVybiBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBpbnRvIGEgYHN0cmluZ2Agb3IgYG51bGxgLlxuICAgICAqIFtTZWUgcmVsZXZhbnQgc2VjdGlvbl0oI3NlY3Rpb24tZGlzcGxheWluZy1maWxlLXRodW1ibmFpbHMpLlxuICAgICAqL1xuICAgIHRodW1ibmFpbEdlbmVyYXRvcj86IFRodW1ibmFpbEdlbmVyYXRvcjtcblxuICAgIC8qKlxuICAgICAqIE1heGltdW0gZGVsYXkgYmV0d2VlbiB0aGUgdHdvIGNsaWNrcyBpbiBhIGRvdWJsZSBjbGljaywgaW4gbWlsbGlzZWNvbmRzLlxuICAgICAqL1xuICAgIGRvdWJsZUNsaWNrRGVsYXk/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZmxhZyB0aGF0IGNvbXBsZXRlbHkgZGlzYWJsZXMgZmlsZSBzZWxlY3Rpb24gZnVuY3Rpb25hbGl0eS4gSWYgYW55IGhhbmRsZXJzIGRlcGVuZCBvbiBmaWxlIHNlbGVjdGlvbnMsIHRoZWlyXG4gICAgICogaW5wdXQgd2lsbCBsb29rIGxpa2Ugbm8gZmlsZXMgYXJlIHNlbGVjdGVkLlxuICAgICAqL1xuICAgIGRpc2FibGVTZWxlY3Rpb24/OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZsYWcgdGhhdCBjb21wbGV0ZWx5IGRpc2FibGVzIGRyYWcgJiBkcm9wIGZ1bmN0aW9uYWxpdHkuXG4gICAgICogW1NlZSByZWxldmFudCBzZWN0aW9uXSgjc2VjdGlvbi1tYW5hZ2luZy1maWxlLXNlbGVjdGlvbikuXG4gICAgICovXG4gICAgZW5hYmxlRHJhZ0FuZERyb3A/OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZsYWcgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgQ2hvbmt5IHNob3VsZCBmaWxsIHRoZSBoZWlnaHQgcGFyZW50IGNvbnRhaW5lci4gV2hlbiBzZXQgdG8gYHRydWVgLCB0aGUgbWF4aW11bVxuICAgICAqIGhlaWdodCBvZiB0aGUgZmlsZSBicm93c2VyIHdpbGwgYmUgbGltaXRlZCB0byB0aGUgaGVpZ2h0IG9mIHRoZSBwYXJlbnQgY29udGFpbmVyLCBhbmQgc2Nyb2xsYmFyIHdpbGwgYmUgc2hvd25cbiAgICAgKiB3aGVuIG5lY2Vzc2FyeS4gV2hlbiBzZXQgdG8gYGZhbHNlYCwgZmlsZSBicm93c2VyIGhlaWdodCB3aWxsIGJlIGV4dGVuZGVkIHRvIGRpc3BsYXkgYWxsIGZpbGVzIGF0IHRoZSBzYW1lIHRpbWUuXG4gICAgICovXG4gICAgZmlsbFBhcmVudENvbnRhaW5lcj86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjb25zdCBGaWxlQnJvd3NlcjogUmVhY3QuRkM8RmlsZUJyb3dzZXJQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IGZpbGVzLCBjaGlsZHJlbiB9ID0gcHJvcHM7XG5cbiAgICAvLyBJbnN0YW5jZSBJRCB1c2VkIHRvIGRpc3Rpbmd1aXNoIGJldHdlZW5cbiAgICBjb25zdCBjaG9ua3lJbnN0YW5jZUlkID0gdXNlU3RhdGljVmFsdWUoc2hvcnRpZC5nZW5lcmF0ZSk7XG5cbiAgICAvLyBBc3NpZ24gZGVmYXVsdCB2YWx1ZXNcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IHByb3BzLmZvbGRlckNoYWluID8gcHJvcHMuZm9sZGVyQ2hhaW4gOiBudWxsO1xuICAgIGNvbnN0IGZpbGVBY3Rpb25zID0gcHJvcHMuZmlsZUFjdGlvbnMgPyBwcm9wcy5maWxlQWN0aW9ucyA6IFtdO1xuICAgIGNvbnN0IG9uRmlsZUFjdGlvbiA9IHByb3BzLm9uRmlsZUFjdGlvbiA/IHByb3BzLm9uRmlsZUFjdGlvbiA6IG51bGw7XG4gICAgY29uc3QgdGh1bWJuYWlsR2VuZXJhdG9yID0gcHJvcHMudGh1bWJuYWlsR2VuZXJhdG9yXG4gICAgICAgID8gcHJvcHMudGh1bWJuYWlsR2VuZXJhdG9yXG4gICAgICAgIDogbnVsbDtcbiAgICBjb25zdCBkb3VibGVDbGlja0RlbGF5ID1cbiAgICAgICAgdHlwZW9mIHByb3BzLmRvdWJsZUNsaWNrRGVsYXkgPT09ICdudW1iZXInID8gcHJvcHMuZG91YmxlQ2xpY2tEZWxheSA6IDMwMDtcbiAgICBjb25zdCBkaXNhYmxlU2VsZWN0aW9uID0gISFwcm9wcy5kaXNhYmxlU2VsZWN0aW9uO1xuICAgIGNvbnN0IGVuYWJsZURyYWdBbmREcm9wID0gISFwcm9wcy5lbmFibGVEcmFnQW5kRHJvcDtcblxuICAgIGNvbnN0IHZhbGlkYXRpb25SZXN1bHQgPSB1c2VGaWxlQnJvd3NlclZhbGlkYXRpb24oZmlsZXMsIGZvbGRlckNoYWluKTtcblxuICAgIGNvbnN0IHNvcnRlZEZpbGVzID0gdmFsaWRhdGlvblJlc3VsdC5jbGVhbkZpbGVzO1xuICAgIGNvbnN0IGNsZWFuRm9sZGVyQ2hhaW4gPSB2YWxpZGF0aW9uUmVzdWx0LmNsZWFuRm9sZGVyQ2hhaW47XG5cbiAgICAvLyBJbml0aWFsIHNlbGVjdGlvblxuICAgIGNvbnN0IHtcbiAgICAgICAgc2VsZWN0aW9uLFxuICAgICAgICBzZWxlY3Rpb25TaXplLFxuICAgICAgICBzZWxlY3Rpb25VdGlsUmVmLFxuICAgICAgICBzZWxlY3RGaWxlcyxcbiAgICAgICAgdG9nZ2xlU2VsZWN0aW9uLFxuICAgICAgICBjbGVhclNlbGVjdGlvbixcbiAgICB9ID0gdXNlU2VsZWN0aW9uKHNvcnRlZEZpbGVzLCBkaXNhYmxlU2VsZWN0aW9uKTtcblxuICAgIC8vIFRPRE86IFZhbGlkYXRlIGZpbGUgYWN0aW9uc1xuICAgIC8vIFRPRE86IFJlbW92ZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlIGRlZmF1bHQgYWN0aW9ucywgb3RoZXJ3aXNlIGVycm9yIG9uXG4gICAgLy8gIGR1cGxpY2F0ZXMuXG4gICAgY29uc3QgZXh0ZW5kZWRGaWxlQWN0aW9ucyA9IFsuLi5maWxlQWN0aW9ucywgLi4uRGVmYXVsdEFjdGlvbnNdO1xuXG4gICAgY29uc3QgZGlzcGF0Y2hGaWxlQWN0aW9uID0gdXNlRmlsZUFjdGlvbkRpc3BhdGNoZXIoXG4gICAgICAgIGV4dGVuZGVkRmlsZUFjdGlvbnMsXG4gICAgICAgIG9uRmlsZUFjdGlvblxuICAgICk7XG4gICAgY29uc3QgZGlzcGF0Y2hTcGVjaWFsQWN0aW9uID0gdXNlU3BlY2lhbEFjdGlvbkRpc3BhdGNoZXIoXG4gICAgICAgIHNvcnRlZEZpbGVzLFxuICAgICAgICBzZWxlY3Rpb24sXG4gICAgICAgIHNlbGVjdGlvblV0aWxSZWYuY3VycmVudCxcbiAgICAgICAgc2VsZWN0RmlsZXMsXG4gICAgICAgIHRvZ2dsZVNlbGVjdGlvbixcbiAgICAgICAgY2xlYXJTZWxlY3Rpb24sXG4gICAgICAgIGRpc3BhdGNoRmlsZUFjdGlvblxuICAgICk7XG5cbiAgICAvLyBEZWFsIHdpdGggZmlsZSB0ZXh0IHNlYXJjaFxuICAgIGNvbnN0IHsgc2VhcmNoU3RhdGUsIHNlYXJjaENvbnRleHRzIH0gPSB1c2VTZWFyY2goKTtcbiAgICBjb25zdCBmaWx0ZXJlZEZpbGVzID0gdXNlRmlsdGVyZWRGaWxlcyhzb3J0ZWRGaWxlcywgc2VhcmNoU3RhdGUuc2VhcmNoRmlsdGVyKTtcblxuICAgIC8vIERlYWwgd2l0aCBjbGlja3Mgb3V0c2lkZSBvZiBDaG9ua3lcbiAgICBjb25zdCBjaG9ua3lSb290UmVmID0gdXNlQ2xpY2tMaXN0ZW5lcih7XG4gICAgICAgIG9uT3V0c2lkZUNsaWNrOiBjbGVhclNlbGVjdGlvbixcbiAgICB9KTtcblxuICAgIHR5cGUgRXh0cmFjdENvbnRleHRUeXBlPFA+ID0gUCBleHRlbmRzIFJlYWN0LkNvbnRleHQ8aW5mZXIgVD4gPyBUIDogbmV2ZXI7XG4gICAgaW50ZXJmYWNlIENvbnRleHREYXRhPENvbnRleHRUeXBlIGV4dGVuZHMgUmVhY3QuQ29udGV4dDxhbnk+PiB7XG4gICAgICAgIGNvbnRleHQ6IENvbnRleHRUeXBlO1xuICAgICAgICB2YWx1ZTogRXh0cmFjdENvbnRleHRUeXBlPENvbnRleHRUeXBlPjtcbiAgICB9XG4gICAgY29uc3QgY29udGV4dHM6IENvbnRleHREYXRhPGFueT5bXSA9IFtcbiAgICAgICAgLi4uc2VhcmNoQ29udGV4dHMsXG4gICAgICAgIHZhbGlkYXRlQ29udGV4dFR5cGUoe1xuICAgICAgICAgICAgY29udGV4dDogQ2hvbmt5SW5zdGFuY2VJZENvbnRleHQsXG4gICAgICAgICAgICB2YWx1ZTogY2hvbmt5SW5zdGFuY2VJZCxcbiAgICAgICAgfSksXG4gICAgICAgIHZhbGlkYXRlQ29udGV4dFR5cGUoe1xuICAgICAgICAgICAgY29udGV4dDogQ2hvbmt5RmlsZXNDb250ZXh0LFxuICAgICAgICAgICAgdmFsdWU6IGZpbHRlcmVkRmlsZXMsXG4gICAgICAgIH0pLFxuICAgICAgICB2YWxpZGF0ZUNvbnRleHRUeXBlKHtcbiAgICAgICAgICAgIGNvbnRleHQ6IENob25reUZvbGRlckNoYWluQ29udGV4dCxcbiAgICAgICAgICAgIHZhbHVlOiBjbGVhbkZvbGRlckNoYWluLFxuICAgICAgICB9KSxcbiAgICAgICAgdmFsaWRhdGVDb250ZXh0VHlwZSh7XG4gICAgICAgICAgICBjb250ZXh0OiBDaG9ua3lTZWxlY3Rpb25Db250ZXh0LFxuICAgICAgICAgICAgdmFsdWU6IHNlbGVjdGlvbixcbiAgICAgICAgfSksXG4gICAgICAgIHZhbGlkYXRlQ29udGV4dFR5cGUoe1xuICAgICAgICAgICAgY29udGV4dDogQ2hvbmt5U2VsZWN0aW9uU2l6ZUNvbnRleHQsXG4gICAgICAgICAgICB2YWx1ZTogc2VsZWN0aW9uU2l6ZSxcbiAgICAgICAgfSksXG4gICAgICAgIHZhbGlkYXRlQ29udGV4dFR5cGUoe1xuICAgICAgICAgICAgY29udGV4dDogQ2hvbmt5U2VsZWN0aW9uVXRpbENvbnRleHQsXG4gICAgICAgICAgICB2YWx1ZTogc2VsZWN0aW9uVXRpbFJlZi5jdXJyZW50LFxuICAgICAgICB9KSxcbiAgICAgICAgdmFsaWRhdGVDb250ZXh0VHlwZSh7XG4gICAgICAgICAgICBjb250ZXh0OiBDaG9ua3lGaWxlQWN0aW9uc0NvbnRleHQsXG4gICAgICAgICAgICB2YWx1ZTogZXh0ZW5kZWRGaWxlQWN0aW9ucyxcbiAgICAgICAgfSksXG4gICAgICAgIHZhbGlkYXRlQ29udGV4dFR5cGUoe1xuICAgICAgICAgICAgY29udGV4dDogQ2hvbmt5RGlzcGF0Y2hGaWxlQWN0aW9uQ29udGV4dCxcbiAgICAgICAgICAgIHZhbHVlOiBkaXNwYXRjaEZpbGVBY3Rpb24sXG4gICAgICAgIH0pLFxuICAgICAgICB2YWxpZGF0ZUNvbnRleHRUeXBlKHtcbiAgICAgICAgICAgIGNvbnRleHQ6IENob25reURpc3BhdGNoU3BlY2lhbEFjdGlvbkNvbnRleHQsXG4gICAgICAgICAgICB2YWx1ZTogZGlzcGF0Y2hTcGVjaWFsQWN0aW9uLFxuICAgICAgICB9KSxcbiAgICAgICAgdmFsaWRhdGVDb250ZXh0VHlwZSh7XG4gICAgICAgICAgICBjb250ZXh0OiBDaG9ua3lUaHVtYm5haWxHZW5lcmF0b3JDb250ZXh0LFxuICAgICAgICAgICAgdmFsdWU6IHRodW1ibmFpbEdlbmVyYXRvcixcbiAgICAgICAgfSksXG4gICAgICAgIHZhbGlkYXRlQ29udGV4dFR5cGUoe1xuICAgICAgICAgICAgY29udGV4dDogQ2hvbmt5RG91YmxlQ2xpY2tEZWxheUNvbnRleHQsXG4gICAgICAgICAgICB2YWx1ZTogZG91YmxlQ2xpY2tEZWxheSxcbiAgICAgICAgfSksXG4gICAgICAgIHZhbGlkYXRlQ29udGV4dFR5cGUoe1xuICAgICAgICAgICAgY29udGV4dDogQ2hvbmt5RmlsZUVudHJ5U2l6ZUNvbnRleHQsXG4gICAgICAgICAgICB2YWx1ZTogRGVmYXVsdEVudHJ5U2l6ZSxcbiAgICAgICAgfSksXG4gICAgICAgIHZhbGlkYXRlQ29udGV4dFR5cGUoe1xuICAgICAgICAgICAgY29udGV4dDogQ2hvbmt5RGlzYWJsZVNlbGVjdGlvbkNvbnRleHQsXG4gICAgICAgICAgICB2YWx1ZTogZGlzYWJsZVNlbGVjdGlvbixcbiAgICAgICAgfSksXG4gICAgICAgIHZhbGlkYXRlQ29udGV4dFR5cGUoe1xuICAgICAgICAgICAgY29udGV4dDogQ2hvbmt5RW5hYmxlRHJhZ0FuZERyb3BDb250ZXh0LFxuICAgICAgICAgICAgdmFsdWU6IGVuYWJsZURyYWdBbmREcm9wLFxuICAgICAgICB9KSxcbiAgICBdO1xuXG4gICAgY29uc3QgY29udGV4dFByb3ZpZGVycyA9IHVzZU1lbW88Q29udGV4dFByb3ZpZGVyRGF0YVtdPihcbiAgICAgICAgKCkgPT5cbiAgICAgICAgICAgIGNvbnRleHRzLm1hcCgoZGF0YSkgPT4gKHtcbiAgICAgICAgICAgICAgICBwcm92aWRlcjogZGF0YS5jb250ZXh0LlByb3ZpZGVyLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhLnZhbHVlLFxuICAgICAgICAgICAgfSkpLFxuICAgICAgICBjb250ZXh0cy5tYXAoKGRhdGEpID0+IGRhdGEudmFsdWUpXG4gICAgKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxDb250ZXh0Q29tcG9zZXIgcHJvdmlkZXJzPXtjb250ZXh0UHJvdmlkZXJzfT5cbiAgICAgICAgICAgIDxkaXYgcmVmPXtjaG9ua3lSb290UmVmfSBjbGFzc05hbWU9XCJjaG9ua3ktcm9vdCBjaG9ua3ktbm8tc2VsZWN0XCI+XG4gICAgICAgICAgICAgICAge2VuYWJsZURyYWdBbmREcm9wICYmIDxEbkRGaWxlTGlzdERyYWdMYXllciAvPn1cbiAgICAgICAgICAgICAgICB7dmFsaWRhdGlvblJlc3VsdC5lcnJvck1lc3NhZ2VzLm1hcCgoZGF0YSwgaW5kZXgpID0+IChcbiAgICAgICAgICAgICAgICAgICAgPEVycm9yTWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtgZXJyb3ItbWVzc2FnZS0ke2luZGV4fWB9XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlPXtkYXRhLm1lc3NhZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICBidWxsZXRzPXtkYXRhLmJ1bGxldHN9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAge2NoaWxkcmVuID8gY2hpbGRyZW4gOiBudWxsfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvQ29udGV4dENvbXBvc2VyPlxuICAgICk7XG59O1xuIiwiaW1wb3J0IGMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAndHNkZWYnO1xuXG5pbXBvcnQgeyBDaG9ua3lJY29uTmFtZSB9IGZyb20gJy4uLy4uL3R5cGVzL2ljb25zLnR5cGVzJztcbmltcG9ydCB7XG4gICAgQ2hvbmt5RGlzcGF0Y2hGaWxlQWN0aW9uQ29udGV4dCxcbiAgICBDaG9ua3lGaWxlQWN0aW9uc0NvbnRleHQsXG4gICAgQ2hvbmt5Rm9sZGVyQ2hhaW5Db250ZXh0LFxufSBmcm9tICcuLi8uLi91dGlsL2NvbnRleHQnO1xuaW1wb3J0IHsgQ2hvbmt5QWN0aW9ucyB9IGZyb20gJy4uLy4uL3V0aWwvZmlsZS1hY3Rpb25zJztcbmltcG9ydCB7IEZpbGVIZWxwZXIgfSBmcm9tICcuLi8uLi91dGlsL2ZpbGUtaGVscGVyJztcbmltcG9ydCB7IENob25reUljb25GQSB9IGZyb20gJy4vQ2hvbmt5SWNvbic7XG5pbXBvcnQgeyBUb29sYmFyQnV0dG9uR3JvdXAgfSBmcm9tICcuL1Rvb2xiYXJCdXR0b25Hcm91cCc7XG5cbi8qKlxuICogR2VuZXJhdGVzIGZvbGRlciBjaGFpbiBIVE1MIGNvbXBvbmVudHMgZm9yIHRoZSBgRmlsZVRvb2xiYXJgIGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGNvbnN0IHVzZUZvbGRlckNoYWluQ29tcG9uZW50ID0gKCkgPT4ge1xuICAgIGNvbnN0IGZvbGRlckNoYWluID0gdXNlQ29udGV4dChDaG9ua3lGb2xkZXJDaGFpbkNvbnRleHQpO1xuICAgIGNvbnN0IGRpc3BhdGNoQ2hvbmt5QWN0aW9uID0gdXNlQ29udGV4dChDaG9ua3lEaXNwYXRjaEZpbGVBY3Rpb25Db250ZXh0KTtcbiAgICAvLyBBbGwgaG9vayBwYXJhbXMgc2hvdWxkIGdvIGludG8gYGRlcHNgXG4gICAgY29uc3QgZGVwcyA9IFtmb2xkZXJDaGFpbiwgZGlzcGF0Y2hDaG9ua3lBY3Rpb25dO1xuICAgIGNvbnN0IGZvbGRlckNoYWluQ29tcG9uZW50ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIGlmICghZm9sZGVyQ2hhaW4pIHJldHVybiBmb2xkZXJDaGFpbjtcblxuICAgICAgICBjb25zdCBjb21wcyA9IG5ldyBBcnJheShNYXRoLm1heCgwLCBmb2xkZXJDaGFpbi5sZW5ndGggKiAyIC0gMSkpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZvbGRlckNoYWluLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlID0gZm9sZGVyQ2hhaW5baV07XG4gICAgICAgICAgICBjb25zdCBpc0xhc3QgPSBpID09PSBmb2xkZXJDaGFpbi5sZW5ndGggLSAxO1xuICAgICAgICAgICAgY29uc3QgaiA9IGkgKiAyO1xuXG4gICAgICAgICAgICBjb25zdCBjb21wUHJvcHM6IFJlYWN0LkNvbXBvbmVudFByb3BzPGFueT4gPSB7XG4gICAgICAgICAgICAgICAga2V5OiBgZm9sZGVyLWNoYWluLWVudHJ5LSR7an1gLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogYyh7XG4gICAgICAgICAgICAgICAgICAgICdjaG9ua3ktZm9sZGVyLWNoYWluLWVudHJ5JzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgJ2Nob25reS1sb2FkaW5nJzogIWZpbGUsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKEZpbGVIZWxwZXIuaXNPcGVuYWJsZShmaWxlKSAmJiAhaXNMYXN0KSB7XG4gICAgICAgICAgICAgICAgY29tcFByb3BzLm9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoQ2hvbmt5QWN0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbklkOiBDaG9ua3lBY3Rpb25zLk9wZW5GaWxlcy5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogZmlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzOiBbZmlsZV0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBUYWdUb1VzZSA9IGNvbXBQcm9wcy5vbkNsaWNrID8gJ2J1dHRvbicgOiAnZGl2JztcbiAgICAgICAgICAgIGNvbXBzW2pdID0gKFxuICAgICAgICAgICAgICAgIDxUYWdUb1VzZSB7Li4uY29tcFByb3BzfT5cbiAgICAgICAgICAgICAgICAgICAgey8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSAqL31cbiAgICAgICAgICAgICAgICAgICAge2ogPT09IDAgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiY2hvbmt5LXRleHQtc3VidGxlLWRhcmtcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2hvbmt5SWNvbkZBIGljb249e0Nob25reUljb25OYW1lLmZvbGRlcn0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmbmJzcDsmbmJzcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiY2hvbmt5LWZvbGRlci1jaGFpbi1lbnRyeS1uYW1lXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7ZmlsZSA/IGZpbGUubmFtZSA6ICdMb2FkaW5nLi4uJ31cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvVGFnVG9Vc2U+XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKCFpc0xhc3QpIHtcbiAgICAgICAgICAgICAgICBjb21wc1tqICsgMV0gPSAoXG4gICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleT17YGZvbGRlci1jaGFpbi1zZXBhcmF0b3ItJHtqfWB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjaG9ua3ktZm9sZGVyLWNoYWluLXNlcGFyYXRvclwiXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxDaG9ua3lJY29uRkFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uPXtDaG9ua3lJY29uTmFtZS5mb2xkZXJDaGFpblNlcGFyYXRvcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplPVwieHNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJjaG9ua3ktZm9sZGVyLWNoYWluXCI+e2NvbXBzfTwvZGl2PjtcbiAgICB9LCBkZXBzKTtcbiAgICByZXR1cm4gZm9sZGVyQ2hhaW5Db21wb25lbnQ7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlVG9vbGJhckJ1dHRvbkdyb3VwcyA9ICgpID0+IHtcbiAgICBjb25zdCBmaWxlQWN0aW9ucyA9IHVzZUNvbnRleHQoQ2hvbmt5RmlsZUFjdGlvbnNDb250ZXh0KTtcbiAgICBjb25zdCBkZXBzID0gW2ZpbGVBY3Rpb25zXTtcbiAgICByZXR1cm4gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIC8vIENyZWF0ZSBhbiBhcnJheSBmb3Igbm9ybWFsIHRvb2xiYXIgYnV0dG9uc1xuICAgICAgICBjb25zdCBidXR0b25Hcm91cHM6IFRvb2xiYXJCdXR0b25Hcm91cFtdID0gW107XG5cbiAgICAgICAgLy8gQ3JlYXRlIGEgbWFwIHVzZWQgZm9yIG1lcmdpbmcgYnV0dG9ucyBpbnRvIGdyb3Vwc1xuICAgICAgICBjb25zdCBidXR0b25Hcm91cE1hcDogeyBbZ3JvdXBOYW1lOiBzdHJpbmddOiBUb29sYmFyQnV0dG9uR3JvdXAgfSA9IHt9O1xuXG4gICAgICAgIC8vIENyZWF0ZSBzZXBhcmF0ZSB2YXJpYWJsZXMgZm9yIGJ1dHRvbnMgdGhhdCBnZXQgc3BlY2lhbCB0cmVhdG1lbnQ6XG4gICAgICAgIGxldCBvcGVuUGFyZW50Rm9sZGVyQnV0dG9uR3JvdXA6IE51bGxhYmxlPFRvb2xiYXJCdXR0b25Hcm91cD4gPSBudWxsO1xuICAgICAgICBsZXQgc2VhcmNoQnV0dG9uR3JvdXA6IE51bGxhYmxlPFRvb2xiYXJCdXR0b25Hcm91cD4gPSBudWxsO1xuXG4gICAgICAgIGZvciAoY29uc3QgYWN0aW9uIG9mIGZpbGVBY3Rpb25zKSB7XG4gICAgICAgICAgICBpZiAoIWFjdGlvbi50b29sYmFyQnV0dG9uKSBjb250aW51ZTtcblxuICAgICAgICAgICAgY29uc3QgYnV0dG9uID0gYWN0aW9uLnRvb2xiYXJCdXR0b247XG4gICAgICAgICAgICBsZXQgZ3JvdXA6IFRvb2xiYXJCdXR0b25Hcm91cDtcblxuICAgICAgICAgICAgaWYgKGJ1dHRvbi5ncm91cCkge1xuICAgICAgICAgICAgICAgIGlmIChidXR0b25Hcm91cE1hcFtidXR0b24uZ3JvdXBdKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGdyb3VwIGV4aXN0cywgYXBwZW5kIGFjdGlvbiB0byBpdC5cbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAgPSBidXR0b25Hcm91cE1hcFtidXR0b24uZ3JvdXBdO1xuICAgICAgICAgICAgICAgICAgICBncm91cC5kcm9wZG93biA9IGdyb3VwLmRyb3Bkb3duIHx8IGJ1dHRvbi5kcm9wZG93bjtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAuZmlsZUFjdGlvbnMucHVzaChhY3Rpb24pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgY3JlYXRlIGEgbmV3IGdyb3VwLlxuICAgICAgICAgICAgICAgICAgICBncm91cCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGJ1dHRvbi5ncm91cCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duOiBidXR0b24uZHJvcGRvd24sXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlQWN0aW9uczogW2FjdGlvbl0sXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbkdyb3Vwcy5wdXNoKGdyb3VwKTtcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uR3JvdXBNYXBbZ3JvdXAubmFtZSFdID0gZ3JvdXA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBidXR0b24gaGFzIG5vIGdyb3VwIHNwZWNpZmllZCwgd2UgcHV0IGl0IGluIGEgc3RhbmRhbG9uZSBncm91cFxuICAgICAgICAgICAgICAgIGdyb3VwID0ge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBidXR0b24uZ3JvdXAsXG4gICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duOiBidXR0b24uZHJvcGRvd24sXG4gICAgICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zOiBbYWN0aW9uXSxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy8gT25seSBhZGQgaXQgdG8gdGhlIG5vcm1hbCBncm91cHMgYXJyYXkgaWYgaXQncyBub3QgYSBzcGVjaWFsIGJ1dHRvblxuICAgICAgICAgICAgICAgIGlmIChhY3Rpb24uaWQgPT09IENob25reUFjdGlvbnMuT3BlblBhcmVudEZvbGRlci5pZCkge1xuICAgICAgICAgICAgICAgICAgICBvcGVuUGFyZW50Rm9sZGVyQnV0dG9uR3JvdXAgPSBncm91cDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbi5pZCA9PT0gQ2hvbmt5QWN0aW9ucy5Ub2dnbGVTZWFyY2guaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoQnV0dG9uR3JvdXAgPSBncm91cDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBidXR0b25Hcm91cHMucHVzaChncm91cCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgYnV0dG9uR3JvdXBzLCBvcGVuUGFyZW50Rm9sZGVyQnV0dG9uR3JvdXAsIHNlYXJjaEJ1dHRvbkdyb3VwIH07XG4gICAgfSwgZGVwcyk7XG59O1xuIiwiaW1wb3J0IHsgdXNlQ29udGV4dCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFVuZGVmaW5hYmxlIH0gZnJvbSAndHNkZWYnO1xuXG5pbXBvcnQgeyBGaWxlQWN0aW9uIH0gZnJvbSAnLi4vLi4vdHlwZXMvZmlsZS1hY3Rpb25zLnR5cGVzJztcbmltcG9ydCB7IEZpbGVEYXRhIH0gZnJvbSAnLi4vLi4vdHlwZXMvZmlsZXMudHlwZXMnO1xuaW1wb3J0IHtcbiAgICBDaG9ua3lEaXNwYXRjaEZpbGVBY3Rpb25Db250ZXh0LFxuICAgIENob25reUZpbGVzQ29udGV4dCxcbiAgICBDaG9ua3lGb2xkZXJDaGFpbkNvbnRleHQsXG4gICAgQ2hvbmt5U2VhcmNoQmFyVmlzaWJsZUNvbnRleHQsXG4gICAgQ2hvbmt5U2VsZWN0aW9uQ29udGV4dCxcbiAgICBDaG9ua3lTZWxlY3Rpb25TaXplQ29udGV4dCxcbn0gZnJvbSAnLi4vLi4vdXRpbC9jb250ZXh0JztcbmltcG9ydCB7IENob25reUFjdGlvbnMgfSBmcm9tICcuLi8uLi91dGlsL2ZpbGUtYWN0aW9ucyc7XG5pbXBvcnQgeyBTZWxlY3Rpb25IZWxwZXIgfSBmcm9tICcuLi8uLi91dGlsL3NlbGVjdGlvbic7XG5cbmV4cG9ydCBjb25zdCB1c2VTbWFydFRvb2xiYXJCdXR0b25Qcm9wcyA9IChhY3Rpb246IEZpbGVBY3Rpb24pID0+IHtcbiAgICBjb25zdCBmaWxlcyA9IHVzZUNvbnRleHQoQ2hvbmt5RmlsZXNDb250ZXh0KTtcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IHVzZUNvbnRleHQoQ2hvbmt5Rm9sZGVyQ2hhaW5Db250ZXh0KTtcbiAgICBjb25zdCBzZWxlY3Rpb24gPSB1c2VDb250ZXh0KENob25reVNlbGVjdGlvbkNvbnRleHQpO1xuICAgIGNvbnN0IHNlbGVjdGlvblNpemUgPSB1c2VDb250ZXh0KENob25reVNlbGVjdGlvblNpemVDb250ZXh0KTtcbiAgICBjb25zdCBzZWFyY2hCYXJWaXNpYmxlID0gdXNlQ29udGV4dChDaG9ua3lTZWFyY2hCYXJWaXNpYmxlQ29udGV4dCk7XG4gICAgY29uc3QgZGlzcGF0Y2hDaG9ua3lBY3Rpb24gPSB1c2VDb250ZXh0KENob25reURpc3BhdGNoRmlsZUFjdGlvbkNvbnRleHQpO1xuXG4gICAgY29uc3QgcGFyZW50Rm9sZGVyID1cbiAgICAgICAgZm9sZGVyQ2hhaW4gJiYgZm9sZGVyQ2hhaW4ubGVuZ3RoID4gMVxuICAgICAgICAgICAgPyBmb2xkZXJDaGFpbltmb2xkZXJDaGFpbj8ubGVuZ3RoIC0gMl1cbiAgICAgICAgICAgIDogbnVsbDtcblxuICAgIGNvbnN0IGRlcHMgPSBbXG4gICAgICAgIGFjdGlvbixcbiAgICAgICAgZmlsZXMsXG4gICAgICAgIHNlbGVjdGlvbixcbiAgICAgICAgc2VsZWN0aW9uU2l6ZSxcbiAgICAgICAgZGlzcGF0Y2hDaG9ua3lBY3Rpb24sXG4gICAgICAgIHBhcmVudEZvbGRlcixcbiAgICBdO1xuICAgIHJldHVybiB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgbGV0IGFjdGlvblNlbGVjdGlvblNpemU6IFVuZGVmaW5hYmxlPG51bWJlcj4gPSB1bmRlZmluZWQ7XG4gICAgICAgIGxldCBhY3Rpb25GaWxlczogVW5kZWZpbmFibGU8UmVhZG9ubHlBcnJheTxGaWxlRGF0YT4+ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoYWN0aW9uLnJlcXVpcmVzU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICBpZiAoYWN0aW9uLmZpbGVGaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb25TZWxlY3Rpb25TaXplID0gU2VsZWN0aW9uSGVscGVyLmdldFNlbGVjdGlvblNpemUoXG4gICAgICAgICAgICAgICAgICAgIGZpbGVzLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbi5maWxlRmlsdGVyXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBhY3Rpb25GaWxlcyA9IFNlbGVjdGlvbkhlbHBlci5nZXRTZWxlY3RlZEZpbGVzKFxuICAgICAgICAgICAgICAgICAgICBmaWxlcyxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24uZmlsZUZpbHRlclxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFjdGlvblNlbGVjdGlvblNpemUgPSBzZWxlY3Rpb25TaXplO1xuICAgICAgICAgICAgICAgIGFjdGlvbkZpbGVzID0gU2VsZWN0aW9uSGVscGVyLmdldFNlbGVjdGVkRmlsZXMoZmlsZXMsIHNlbGVjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhY3RpdmUgPSBhY3Rpb24uaWQgPT09IENob25reUFjdGlvbnMuVG9nZ2xlU2VhcmNoLmlkICYmIHNlYXJjaEJhclZpc2libGU7XG5cbiAgICAgICAgLy8gQWN0aW9uIHRhcmdldCBpcyB0YWlsb3JlZCB0byB0aGUgXCJHbyB1cCBhIGRpcmVjdG9yeVwiIGJ1dHRvbiBhdCB0aGUgbW9tZW50XG4gICAgICAgIGxldCBhY3Rpb25UYXJnZXQ6IFVuZGVmaW5hYmxlPEZpbGVEYXRhPiA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGFjdGlvbi5yZXF1aXJlc1BhcmVudEZvbGRlciAmJiBwYXJlbnRGb2xkZXIpIHtcbiAgICAgICAgICAgIGlmIChhY3Rpb24uZmlsZUZpbHRlcikge1xuICAgICAgICAgICAgICAgIGlmIChhY3Rpb24uZmlsZUZpbHRlcihwYXJlbnRGb2xkZXIpKSBhY3Rpb25UYXJnZXQgPSBwYXJlbnRGb2xkZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFjdGlvblRhcmdldCA9IHBhcmVudEZvbGRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGRpc2FibGVkID1cbiAgICAgICAgICAgIChhY3Rpb24ucmVxdWlyZXNTZWxlY3Rpb24gJiYgYWN0aW9uU2VsZWN0aW9uU2l6ZSA9PT0gMCkgfHxcbiAgICAgICAgICAgIChhY3Rpb24ucmVxdWlyZXNQYXJlbnRGb2xkZXIgJiYgIWFjdGlvblRhcmdldCk7XG4gICAgICAgIC8vIFRPRE86IF5eXiBEZWNvdXBsZSBgYWN0aW9uVGFyZ2V0YCBhbmQgYHBhcmVudEZvbGRlcmAuXG5cbiAgICAgICAgY29uc3Qgb25DbGljayA9ICgpID0+XG4gICAgICAgICAgICBkaXNwYXRjaENob25reUFjdGlvbih7XG4gICAgICAgICAgICAgICAgYWN0aW9uSWQ6IGFjdGlvbi5pZCxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGFjdGlvblRhcmdldCxcbiAgICAgICAgICAgICAgICBmaWxlczogYWN0aW9uRmlsZXMsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4geyBhY3RpdmUsIG9uQ2xpY2ssIGRpc2FibGVkIH07XG4gICAgfSwgZGVwcyk7XG59O1xuIiwiLyoqXG4gKiBAYXV0aG9yIFRpbXVyIEt1emhhZ2FsaXlldiA8dGltLmt1emhAZ21haWwuY29tPlxuICogQGNvcHlyaWdodCAyMDIwXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBGaWxlQWN0aW9uIH0gZnJvbSAnLi4vLi4vdHlwZXMvZmlsZS1hY3Rpb25zLnR5cGVzJztcbmltcG9ydCB7IENob25reUljb25OYW1lIH0gZnJvbSAnLi4vLi4vdHlwZXMvaWNvbnMudHlwZXMnO1xuaW1wb3J0IHsgQ2hvbmt5SWNvbkZBIH0gZnJvbSAnLi9DaG9ua3lJY29uJztcbmltcG9ydCB7IHVzZVNtYXJ0VG9vbGJhckJ1dHRvblByb3BzIH0gZnJvbSAnLi9Ub29sYmFyQnV0dG9uLWhvb2tzJztcblxuZXhwb3J0IGludGVyZmFjZSBEcm9wZG93bkJ1dHRvblByb3BzIHtcbiAgICB0ZXh0OiBzdHJpbmc7XG4gICAgdG9vbHRpcD86IHN0cmluZztcbiAgICBpY29uPzogQ2hvbmt5SWNvbk5hbWUgfCBzdHJpbmc7XG4gICAgb25DbGljaz86ICgpID0+IHZvaWQ7XG4gICAgZGlzYWJsZWQ/OiBib29sZWFuO1xufVxuXG5leHBvcnQgY29uc3QgRHJvcGRvd25CdXR0b246IFJlYWN0LkZDPERyb3Bkb3duQnV0dG9uUHJvcHM+ID0gUmVhY3QubWVtbygocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IHRleHQsIHRvb2x0aXAsIGljb24sIG9uQ2xpY2ssIGRpc2FibGVkIH0gPSBwcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImNob25reS10b29sYmFyLWRyb3Bkb3duLWJ1dHRvblwiXG4gICAgICAgICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgICAgICAgdGl0bGU9e3Rvb2x0aXAgPyB0b29sdGlwIDogdGV4dH1cbiAgICAgICAgICAgIGRpc2FibGVkPXshb25DbGljayB8fCBkaXNhYmxlZH1cbiAgICAgICAgPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjaG9ua3ktdG9vbGJhci1kcm9wZG93bi1idXR0b24taWNvblwiPlxuICAgICAgICAgICAgICAgIDxDaG9ua3lJY29uRkFcbiAgICAgICAgICAgICAgICAgICAgaWNvbj17aWNvbiA/IGljb24gOiBDaG9ua3lJY29uTmFtZS5mYWxsYmFja0ljb259XG4gICAgICAgICAgICAgICAgICAgIGZpeGVkV2lkdGg9e3RydWV9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjaG9ua3ktdG9vbGJhci1kcm9wZG93bi1idXR0b24tdGV4dFwiPnt0ZXh0fTwvZGl2PlxuICAgICAgICA8L2J1dHRvbj5cbiAgICApO1xufSk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU21hcnREcm9wZG93bkJ1dHRvblByb3BzIHtcbiAgICBmaWxlQWN0aW9uOiBGaWxlQWN0aW9uO1xufVxuXG5leHBvcnQgY29uc3QgU21hcnREcm9wZG93bkJ1dHRvbjogUmVhY3QuRkM8U21hcnREcm9wZG93bkJ1dHRvblByb3BzPiA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgZmlsZUFjdGlvbjogYWN0aW9uIH0gPSBwcm9wcztcblxuICAgIGNvbnN0IHsgdG9vbGJhckJ1dHRvbjogYnV0dG9uIH0gPSBhY3Rpb247XG4gICAgaWYgKCFidXR0b24pIHJldHVybiBudWxsO1xuXG4gICAgY29uc3QgeyBvbkNsaWNrLCBkaXNhYmxlZCB9ID0gdXNlU21hcnRUb29sYmFyQnV0dG9uUHJvcHMoYWN0aW9uKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxEcm9wZG93bkJ1dHRvblxuICAgICAgICAgICAgdGV4dD17YnV0dG9uLm5hbWV9XG4gICAgICAgICAgICB0b29sdGlwPXtidXR0b24udG9vbHRpcH1cbiAgICAgICAgICAgIGljb249e2J1dHRvbi5pY29ufVxuICAgICAgICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgLz5cbiAgICApO1xufTtcbiIsImltcG9ydCBjIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgRmlsZUFjdGlvbiB9IGZyb20gJy4uLy4uL3R5cGVzL2ZpbGUtYWN0aW9ucy50eXBlcyc7XG5pbXBvcnQgeyBDaG9ua3lJY29uTmFtZSB9IGZyb20gJy4uLy4uL3R5cGVzL2ljb25zLnR5cGVzJztcbmltcG9ydCB7IENob25reUljb25GQSB9IGZyb20gJy4vQ2hvbmt5SWNvbic7XG5pbXBvcnQgeyB1c2VTbWFydFRvb2xiYXJCdXR0b25Qcm9wcyB9IGZyb20gJy4vVG9vbGJhckJ1dHRvbi1ob29rcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG9vbGJhckJ1dHRvblByb3BzIHtcbiAgICB0ZXh0OiBzdHJpbmc7XG4gICAgdG9vbHRpcD86IHN0cmluZztcbiAgICBhY3RpdmU/OiBib29sZWFuO1xuICAgIGljb24/OiBDaG9ua3lJY29uTmFtZSB8IHN0cmluZztcbiAgICBpY29uT25seT86IGJvb2xlYW47XG4gICAgaWNvbk9uUmlnaHQ/OiBib29sZWFuO1xuICAgIG9uQ2xpY2s/OiAoKSA9PiB2b2lkO1xuICAgIGRpc2FibGVkPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNvbnN0IFRvb2xiYXJCdXR0b246IFJlYWN0LkZDPFRvb2xiYXJCdXR0b25Qcm9wcz4gPSBSZWFjdC5tZW1vKChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgICAgdGV4dCxcbiAgICAgICAgdG9vbHRpcCxcbiAgICAgICAgYWN0aXZlLFxuICAgICAgICBpY29uLFxuICAgICAgICBpY29uT25seSxcbiAgICAgICAgaWNvbk9uUmlnaHQsXG4gICAgICAgIG9uQ2xpY2ssXG4gICAgICAgIGRpc2FibGVkLFxuICAgIH0gPSBwcm9wcztcblxuICAgIGNvbnN0IGljb25Db21wb25lbnQgPVxuICAgICAgICBpY29uIHx8IGljb25Pbmx5ID8gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjaG9ua3ktdG9vbGJhci1idXR0b24taWNvblwiPlxuICAgICAgICAgICAgICAgIDxDaG9ua3lJY29uRkFcbiAgICAgICAgICAgICAgICAgICAgaWNvbj17aWNvbiA/IGljb24gOiBDaG9ua3lJY29uTmFtZS5mYWxsYmFja0ljb259XG4gICAgICAgICAgICAgICAgICAgIGZpeGVkV2lkdGg9e3RydWV9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApIDogbnVsbDtcblxuICAgIGNvbnN0IGNsYXNzTmFtZSA9IGMoe1xuICAgICAgICAnY2hvbmt5LXRvb2xiYXItYnV0dG9uJzogdHJ1ZSxcbiAgICAgICAgJ2Nob25reS1hY3RpdmUnOiAhIWFjdGl2ZSxcbiAgICB9KTtcbiAgICByZXR1cm4gKFxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICAgICAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICAgICAgICB0aXRsZT17dG9vbHRpcCA/IHRvb2x0aXAgOiB0ZXh0fVxuICAgICAgICAgICAgZGlzYWJsZWQ9eyFvbkNsaWNrIHx8IGRpc2FibGVkfVxuICAgICAgICA+XG4gICAgICAgICAgICB7IWljb25PblJpZ2h0ICYmIGljb25Db21wb25lbnR9XG4gICAgICAgICAgICB7dGV4dCAmJiAhaWNvbk9ubHkgJiYgKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2hvbmt5LXRvb2xiYXItYnV0dG9uLXRleHRcIj57dGV4dH08L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICB7aWNvbk9uUmlnaHQgJiYgaWNvbkNvbXBvbmVudH1cbiAgICAgICAgPC9idXR0b24+XG4gICAgKTtcbn0pO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNtYXJ0VG9vbGJhckJ1dHRvblByb3BzIHtcbiAgICBmaWxlQWN0aW9uOiBGaWxlQWN0aW9uO1xufVxuXG5leHBvcnQgY29uc3QgU21hcnRUb29sYmFyQnV0dG9uOiBSZWFjdC5GQzxTbWFydFRvb2xiYXJCdXR0b25Qcm9wcz4gPSBSZWFjdC5tZW1vKFxuICAgIChwcm9wcykgPT4ge1xuICAgICAgICBjb25zdCB7IGZpbGVBY3Rpb246IGFjdGlvbiB9ID0gcHJvcHM7XG5cbiAgICAgICAgY29uc3QgeyB0b29sYmFyQnV0dG9uOiBidXR0b24gfSA9IGFjdGlvbjtcbiAgICAgICAgaWYgKCFidXR0b24pIHJldHVybiBudWxsO1xuXG4gICAgICAgIGNvbnN0IHsgYWN0aXZlLCBvbkNsaWNrLCBkaXNhYmxlZCB9ID0gdXNlU21hcnRUb29sYmFyQnV0dG9uUHJvcHMoYWN0aW9uKTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFRvb2xiYXJCdXR0b25cbiAgICAgICAgICAgICAgICB0ZXh0PXtidXR0b24ubmFtZX1cbiAgICAgICAgICAgICAgICB0b29sdGlwPXtidXR0b24udG9vbHRpcH1cbiAgICAgICAgICAgICAgICBpY29uPXtidXR0b24uaWNvbn1cbiAgICAgICAgICAgICAgICBpY29uT25seT17YnV0dG9uLmljb25Pbmx5fVxuICAgICAgICAgICAgICAgIGFjdGl2ZT17YWN0aXZlfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICB9XG4pO1xuIiwiLyoqXG4gKiBAYXV0aG9yIFRpbXVyIEt1emhhZ2FsaXlldiA8dGltLmt1emhAZ21haWwuY29tPlxuICogQGNvcHlyaWdodCAyMDIwXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBDaG9ua3lJY29uTmFtZSB9IGZyb20gJy4uLy4uL3R5cGVzL2ljb25zLnR5cGVzJztcbmltcG9ydCB7IHVzZUNsaWNrTGlzdGVuZXIgfSBmcm9tICcuLi8uLi91dGlsL2hvb2tzLWhlbHBlcnMnO1xuaW1wb3J0IHsgU21hcnREcm9wZG93bkJ1dHRvbiB9IGZyb20gJy4vRHJvcGRvd25CdXR0b24nO1xuaW1wb3J0IHsgVG9vbGJhckJ1dHRvbiB9IGZyb20gJy4vVG9vbGJhckJ1dHRvbic7XG5pbXBvcnQgeyBUb29sYmFyQnV0dG9uR3JvdXAgfSBmcm9tICcuL1Rvb2xiYXJCdXR0b25Hcm91cCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRHJvcGRvd25Qcm9wcyB7XG4gICAgZ3JvdXA6IFRvb2xiYXJCdXR0b25Hcm91cDtcbn1cblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duOiBSZWFjdC5GQzxEcm9wZG93blByb3BzPiA9IFJlYWN0Lm1lbW8oKHByb3BzKSA9PiB7XG4gICAgY29uc3QgeyBncm91cCB9ID0gcHJvcHM7XG5cbiAgICBjb25zdCBbc2hvd0Ryb3Bkb3duLCBzZXRTaG93RHJvcGRvd25dID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gICAgY29uc3QgaGlkZURyb3Bkb3duID0gdXNlQ2FsbGJhY2soKCkgPT4gc2V0U2hvd0Ryb3Bkb3duKGZhbHNlKSwgW3NldFNob3dEcm9wZG93bl0pO1xuICAgIGNvbnN0IGRyb3Bkb3duUmVmID0gdXNlQ2xpY2tMaXN0ZW5lcih7XG4gICAgICAgIG9uT3V0c2lkZUNsaWNrOiBoaWRlRHJvcGRvd24sXG4gICAgfSk7XG5cbiAgICBjb25zdCB0cmlnZ2VyQ2xpY2sgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIHNldFNob3dEcm9wZG93bih0cnVlKTtcbiAgICB9LCBbc2V0U2hvd0Ryb3Bkb3duXSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IHJlZj17ZHJvcGRvd25SZWZ9IGNsYXNzTmFtZT1cImNob25reS10b29sYmFyLWRyb3Bkb3duXCI+XG4gICAgICAgICAgICA8VG9vbGJhckJ1dHRvblxuICAgICAgICAgICAgICAgIHRleHQ9e2dyb3VwLm5hbWUhfVxuICAgICAgICAgICAgICAgIGFjdGl2ZT17c2hvd0Ryb3Bkb3dufVxuICAgICAgICAgICAgICAgIGljb249e0Nob25reUljb25OYW1lLmRyb3Bkb3dufVxuICAgICAgICAgICAgICAgIGljb25PblJpZ2h0PXt0cnVlfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RyaWdnZXJDbGlja31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7c2hvd0Ryb3Bkb3duICYmIChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNob25reS10b29sYmFyLWRyb3Bkb3duLWNvbnRlbnRcIj5cbiAgICAgICAgICAgICAgICAgICAge2dyb3VwLmZpbGVBY3Rpb25zLm1hcCgoYWN0aW9uKSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8U21hcnREcm9wZG93bkJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17YGFjdGlvbi1idXR0b24tJHthY3Rpb24uaWR9YH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlQWN0aW9uPXthY3Rpb259XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59KTtcbiIsIi8qKlxuICogQGF1dGhvciBUaW11ciBLdXpoYWdhbGl5ZXYgPHRpbS5rdXpoQGdtYWlsLmNvbT5cbiAqIEBjb3B5cmlnaHQgMjAxOVxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgRmlsZUFjdGlvbiB9IGZyb20gJy4uLy4uL3R5cGVzL2ZpbGUtYWN0aW9ucy50eXBlcyc7XG5pbXBvcnQgeyBEcm9wZG93biB9IGZyb20gJy4vRHJvcGRvd24nO1xuaW1wb3J0IHsgU21hcnRUb29sYmFyQnV0dG9uIH0gZnJvbSAnLi9Ub29sYmFyQnV0dG9uJztcblxuZXhwb3J0IGludGVyZmFjZSBUb29sYmFyQnV0dG9uR3JvdXAge1xuICAgIG5hbWU/OiBzdHJpbmc7XG4gICAgZHJvcGRvd24/OiBib29sZWFuO1xuICAgIGZpbGVBY3Rpb25zOiBGaWxlQWN0aW9uW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG9vbGJhckJ1dHRvbkdyb3VwUHJvcHMge1xuICAgIGdyb3VwOiBUb29sYmFyQnV0dG9uR3JvdXA7XG59XG5cbmV4cG9ydCBjb25zdCBUb29sYmFyQnV0dG9uR3JvdXA6IFJlYWN0LkZDPFRvb2xiYXJCdXR0b25Hcm91cFByb3BzPiA9IFJlYWN0Lm1lbW8oXG4gICAgKHByb3BzKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgZ3JvdXAgfSA9IHByb3BzO1xuXG4gICAgICAgIGxldCBncm91cENvbnRlbnRzOiBSZWFjdC5SZWFjdEVsZW1lbnQgfCBSZWFjdC5SZWFjdEVsZW1lbnRbXTtcbiAgICAgICAgaWYgKGdyb3VwLmRyb3Bkb3duKSB7XG4gICAgICAgICAgICBncm91cENvbnRlbnRzID0gPERyb3Bkb3duIGdyb3VwPXtncm91cH0gLz47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBncm91cENvbnRlbnRzID0gZ3JvdXAuZmlsZUFjdGlvbnMubWFwKChhY3Rpb24pID0+IChcbiAgICAgICAgICAgICAgICA8U21hcnRUb29sYmFyQnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIGtleT17YGFjdGlvbi1idXR0b24tJHthY3Rpb24uaWR9YH1cbiAgICAgICAgICAgICAgICAgICAgZmlsZUFjdGlvbj17YWN0aW9ufVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImNob25reS10b29sYmFyLWJ1dHRvbi1ncm91cFwiPntncm91cENvbnRlbnRzfTwvZGl2PjtcbiAgICB9XG4pO1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBDaG9ua3lTZWFyY2hCYXJFbmFibGVkQ29udGV4dCB9IGZyb20gJy4uLy4uL3V0aWwvY29udGV4dCc7XG5pbXBvcnQgeyB1c2VGb2xkZXJDaGFpbkNvbXBvbmVudCwgdXNlVG9vbGJhckJ1dHRvbkdyb3VwcyB9IGZyb20gJy4vRmlsZVRvb2xiYXItaG9va3MnO1xuaW1wb3J0IHsgVG9vbGJhckJ1dHRvbkdyb3VwIH0gZnJvbSAnLi9Ub29sYmFyQnV0dG9uR3JvdXAnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVUb29sYmFyUHJvcHMge31cblxuZXhwb3J0IGNvbnN0IEZpbGVUb29sYmFyOiBSZWFjdC5GQzxGaWxlVG9vbGJhclByb3BzPiA9IFJlYWN0Lm1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IHNlYXJjaEJhckVuYWJsZWQgPSB1c2VDb250ZXh0KENob25reVNlYXJjaEJhckVuYWJsZWRDb250ZXh0KTtcblxuICAgIGNvbnN0IGZvbGRlckNoYWluQ29tcCA9IHVzZUZvbGRlckNoYWluQ29tcG9uZW50KCk7XG4gICAgY29uc3Qge1xuICAgICAgICBidXR0b25Hcm91cHMsXG4gICAgICAgIG9wZW5QYXJlbnRGb2xkZXJCdXR0b25Hcm91cCxcbiAgICAgICAgc2VhcmNoQnV0dG9uR3JvdXAsXG4gICAgfSA9IHVzZVRvb2xiYXJCdXR0b25Hcm91cHMoKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2hvbmt5LXRvb2xiYXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2hvbmt5LXRvb2xiYXItc2lkZSBjaG9ua3ktdG9vbGJhci1zaWRlLWxlZnRcIj5cbiAgICAgICAgICAgICAgICB7b3BlblBhcmVudEZvbGRlckJ1dHRvbkdyb3VwICYmIChcbiAgICAgICAgICAgICAgICAgICAgPFRvb2xiYXJCdXR0b25Hcm91cCBncm91cD17b3BlblBhcmVudEZvbGRlckJ1dHRvbkdyb3VwfSAvPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAge2ZvbGRlckNoYWluQ29tcH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjaG9ua3ktdG9vbGJhci1zaWRlIGNob25reS10b29sYmFyLXNpZGUtcmlnaHRcIj5cbiAgICAgICAgICAgICAgICB7YnV0dG9uR3JvdXBzLm1hcCgoZ3JvdXAsIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgIDxUb29sYmFyQnV0dG9uR3JvdXBcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleT17YGJ1dHRvbi1ncm91cC0ke2dyb3VwLm5hbWUgPyBncm91cC5uYW1lIDogaW5kZXh9YH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwPXtncm91cH1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICB7c2VhcmNoQmFyRW5hYmxlZCAmJiBzZWFyY2hCdXR0b25Hcm91cCAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDxUb29sYmFyQnV0dG9uR3JvdXAgZ3JvdXA9e3NlYXJjaEJ1dHRvbkdyb3VwfSAvPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn0pO1xuXG5GaWxlVG9vbGJhci5wcm9wVHlwZXMgPSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGZvbGRlckNoYWluOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICAgICAgUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgICAgICBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICAgICAgICBQcm9wVHlwZXMub25lT2YoW251bGxdKS5pc1JlcXVpcmVkLFxuICAgICAgICBdKVxuICAgICksXG59O1xuIiwiLyoqXG4gKiBAYXV0aG9yIFRpbXVyIEt1emhhZ2FsaXlldiA8dGltLmt1emhAZ21haWwuY29tPlxuICogQGNvcHlyaWdodCAyMDIwXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZUNvbnRleHQsIHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IENob25reUljb25OYW1lIH0gZnJvbSAnLi4vLi4vdHlwZXMvaWNvbnMudHlwZXMnO1xuaW1wb3J0IHsgSU5URU5USU9OQUxfRU1QVFlfREVQUyB9IGZyb20gJy4uLy4uL3V0aWwvY29uc3RhbnRzJztcbmltcG9ydCB7XG4gICAgQ2hvbmt5U2VhcmNoRmlsdGVyQ29udGV4dCxcbiAgICBDaG9ua3lTZXRTZWFyY2hCYXJFbmFibGVkQ29udGV4dCxcbiAgICBDaG9ua3lTZXRTZWFyY2hGaWx0ZXJDb250ZXh0LFxufSBmcm9tICcuLi8uLi91dGlsL2NvbnRleHQnO1xuaW1wb3J0IHsgdXNlRGVib3VuY2UgfSBmcm9tICcuLi8uLi91dGlsL2hvb2tzLWhlbHBlcnMnO1xuaW1wb3J0IHsgQ2hvbmt5SWNvbkZBIH0gZnJvbSAnLi9DaG9ua3lJY29uJztcblxuZXhwb3J0IGludGVyZmFjZSBGaWxlU2VhcmNoUHJvcHMge31cblxuZXhwb3J0IGNvbnN0IEZpbGVTZWFyY2g6IFJlYWN0LkZDPEZpbGVTZWFyY2hQcm9wcz4gPSAoKSA9PiB7XG4gICAgY29uc3Qgc2V0U2VhcmNoQmFyRW5hYmxlZCA9IHVzZUNvbnRleHQoQ2hvbmt5U2V0U2VhcmNoQmFyRW5hYmxlZENvbnRleHQpO1xuICAgIGNvbnN0IGdsb2JhbFNlYXJjaEZpbHRlciA9IHVzZUNvbnRleHQoQ2hvbmt5U2VhcmNoRmlsdGVyQ29udGV4dCk7XG4gICAgY29uc3Qgc2V0R2xvYmFsU2VhcmNoRmlsdGVyID0gdXNlQ29udGV4dChDaG9ua3lTZXRTZWFyY2hGaWx0ZXJDb250ZXh0KTtcblxuICAgIC8vIE5vdGlmeSBhbGwgb3RoZXIgY29tcG9uZW50cyB0aGF0IHNlYXJjaCBiYXIgaXMgbW91bnRlZC5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBzZXRTZWFyY2hCYXJFbmFibGVkKHRydWUpO1xuICAgICAgICByZXR1cm4gKCkgPT4gc2V0U2VhcmNoQmFyRW5hYmxlZChmYWxzZSk7XG4gICAgfSwgSU5URU5USU9OQUxfRU1QVFlfREVQUyk7XG5cbiAgICAvLyBEZWZpbmUgYSBsb2NhbCBzZWFyY2ggZmlsdGVyLCBhbmQgdXBkYXRlIGl0IHdoZW4gZ2xvYmFsIHNlYXJjaCBmaWx0ZXIgdXBkYXRlc1xuICAgIGNvbnN0IFtsb2NhbFNlYXJjaEZpbHRlciwgc2V0TG9jYWxTZWFyY2hGaWx0ZXJdID0gdXNlU3RhdGU8c3RyaW5nPihcbiAgICAgICAgZ2xvYmFsU2VhcmNoRmlsdGVyXG4gICAgKTtcbiAgICB1c2VFZmZlY3QoXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIGlmIChnbG9iYWxTZWFyY2hGaWx0ZXIgPT09IGxvY2FsU2VhcmNoRmlsdGVyKSByZXR1cm47XG4gICAgICAgICAgICBzZXRMb2NhbFNlYXJjaEZpbHRlcihnbG9iYWxTZWFyY2hGaWx0ZXIpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIGBsb2NhbFNlYXJjaEZpbHRlcmAgaXMgZGVsaWJlcmF0ZWx5IG5vdCBpbmNsdWRlZCBpbiB0aGUgZGVwcyBiZWxvdy4gVGhpc1xuICAgICAgICAvLyBpcyBiZWNhdXNlIHdlIGRvbid0IHdhbnQgdG8gcmUtc2V0IGxvY2FsIHNlYXJjaCBmaWx0ZXIgdG8gaXRzZWxmLlxuICAgICAgICBbZ2xvYmFsU2VhcmNoRmlsdGVyLCBzZXRMb2NhbFNlYXJjaEZpbHRlcl1cbiAgICApO1xuXG4gICAgLy8gU2V0IGdsb2JhbCBzZWFyY2ggZmlsdGVyIHRvIGxvY2FsIHNlYXJjaCBmaWx0ZXIgd2l0aCBkZWJvdW5jZVxuICAgIGNvbnN0IGRlYm91bmNlZExvY2FsU2VhcmNoRmlsdGVyID0gdXNlRGVib3VuY2UobG9jYWxTZWFyY2hGaWx0ZXIsIDUwMCk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgY29uc3QgdHJpbW1lZEZpbHRlciA9IGRlYm91bmNlZExvY2FsU2VhcmNoRmlsdGVyLnRyaW0oKTtcbiAgICAgICAgaWYgKHRyaW1tZWRGaWx0ZXIgPT09IGdsb2JhbFNlYXJjaEZpbHRlcikgcmV0dXJuO1xuICAgICAgICBzZXRHbG9iYWxTZWFyY2hGaWx0ZXIodHJpbW1lZEZpbHRlcik7XG4gICAgfSwgW2dsb2JhbFNlYXJjaEZpbHRlciwgZGVib3VuY2VkTG9jYWxTZWFyY2hGaWx0ZXJdKTtcblxuICAgIGNvbnN0IGhhbmRsZUlucHV0Q2hhbmdlID0gdXNlQ2FsbGJhY2soXG4gICAgICAgIChldmVudDogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcbiAgICAgICAgICAgIHNldExvY2FsU2VhcmNoRmlsdGVyKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIFtzZXRMb2NhbFNlYXJjaEZpbHRlcl1cbiAgICApO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjaG9ua3ktZmlsZS1zZWFyY2hcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2hvbmt5LWZpbGUtc2VhcmNoLWlucHV0LWdyb3VwXCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJjaG9ua3ktZmlsZS1zZWFyY2hcIj5cbiAgICAgICAgICAgICAgICAgICAgPENob25reUljb25GQSBpY29uPXtDaG9ua3lJY29uTmFtZS5zZWFyY2h9IGZpeGVkV2lkdGg9e3RydWV9IC8+XG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgICBpZD1cImNob25reS1maWxlLXNlYXJjaFwiXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXtsb2NhbFNlYXJjaEZpbHRlcn1cbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJUeXBlIHRvIHNlYXJjaC4uLlwiXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVJbnB1dENoYW5nZX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEF1dG9TaXplciwgR3JpZCB9IGZyb20gJ3JlYWN0LXZpcnR1YWxpemVkJztcblxuaW1wb3J0IHsgQ2hvbmt5RmlsZUVudHJ5U2l6ZUNvbnRleHQsIENob25reUZpbGVzQ29udGV4dCB9IGZyb20gJy4uLy4uL3V0aWwvY29udGV4dCc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi8uLi91dGlsL2xvZ2dlcic7XG5pbXBvcnQgeyBFcnJvck1lc3NhZ2UgfSBmcm9tICcuLi9pbnRlcm5hbC9FcnJvck1lc3NhZ2UnO1xuaW1wb3J0IHsgdXNlRW50cnlSZW5kZXJlciwgdXNlR3JpZFJlbmRlcmVyIH0gZnJvbSAnLi9GaWxlTGlzdC12aXJ0dWFsaXphdGlvbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZUxpc3RQcm9wcyB7fVxuXG5leHBvcnQgY29uc3QgRmlsZUxpc3Q6IFJlYWN0LkZDPEZpbGVMaXN0UHJvcHM+ID0gUmVhY3QubWVtbygoKSA9PiB7XG4gICAgY29uc3QgZmlsZXMgPSB1c2VDb250ZXh0KENob25reUZpbGVzQ29udGV4dCk7XG4gICAgY29uc3QgZW50cnlTaXplID0gdXNlQ29udGV4dChDaG9ua3lGaWxlRW50cnlTaXplQ29udGV4dCk7XG5cbiAgICBjb25zdCBlbnRyeVJlbmRlcmVyID0gdXNlRW50cnlSZW5kZXJlcihmaWxlcyk7XG5cbiAgICAvLyBUaHVtYnMgZ3JpZCByZWYgaXMgbm90IHVzZWQgYXQgdGhlIG1vbWVudCBidXQgd2lsbCBiZSBuZWNlc3NhcnkgbGF0ZXIuIEl0IGlzXG4gICAgLy8gdXNlZCB0byByZWNvbXB1dGUgdGhlIGhlaWdodCBvZiByb3dzIGluIHRoZSBgTGlzdGAgZnJvbSBgcmVhY3QtdmlydHVhbGl6ZWRgLlxuICAgIC8vIENvbnN1bHQgQ2hvbmt5IHYwLnggaW1wbGVtZW50YXRpb24gZm9yIGRldGFpbHMuXG4gICAgY29uc3QgdGh1bWJzR3JpZFJlZiA9IHVzZVJlZjxHcmlkPigpO1xuXG4gICAgLy8gVE9ETzogUmVhZCB0aGlzIHZhbHVlIGZyb20gc29tZXdoZXJlLlxuICAgIGNvbnN0IGZpbGxQYXJlbnRDb250YWluZXIgPSB0cnVlO1xuXG4gICAgY29uc3QgZ3JpZFJlbmRlcmVyID0gdXNlR3JpZFJlbmRlcmVyKFxuICAgICAgICBmaWxlcyxcbiAgICAgICAgZW50cnlTaXplLFxuICAgICAgICBlbnRyeVJlbmRlcmVyLFxuICAgICAgICB0aHVtYnNHcmlkUmVmLFxuICAgICAgICBmaWxsUGFyZW50Q29udGFpbmVyXG4gICAgKTtcblxuICAgIGlmICghZmlsZXMpIHtcbiAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID1cbiAgICAgICAgICAgIGAke0ZpbGVMaXN0Lm5hbWV9IGNhbm5vdCBmaW5kIHRoZSBcImZpbGVzXCIgYXJyYXkgdmlhIFJlYWN0IGNvbnRleHQuIFRoaXMgYCArXG4gICAgICAgICAgICBgaGFwcGVucyB3aGVuICR7RmlsZUxpc3QubmFtZX0gaXMgcGxhY2VkIG91dHNpZGUgb2YgXCJGaWxlQnJvd3NlclwiYCArXG4gICAgICAgICAgICBgY29tcG9uZW50LmA7XG4gICAgICAgIExvZ2dlci5lcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgICByZXR1cm4gPEVycm9yTWVzc2FnZSBtZXNzYWdlPXtlcnJvck1lc3NhZ2V9IC8+O1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2hvbmt5LWZpbGUtbGlzdFwiIHN0eWxlPXt7IG1pbkhlaWdodDogZW50cnlTaXplLmhlaWdodCB9fT5cbiAgICAgICAgICAgIDxBdXRvU2l6ZXIgZGlzYWJsZUhlaWdodD17IWZpbGxQYXJlbnRDb250YWluZXJ9PntncmlkUmVuZGVyZXJ9PC9BdXRvU2l6ZXI+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiQ1VNUVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIjN2b0hcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJ6ODRJXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiY3d3M1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIjJHOVNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJONHozXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiMU11L1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcImhDT2FcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJLcVh3XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiMXQ3UFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIlV2bUJcIik7IiwiaW1wb3J0ICdub3R5L2xpYi9ub3R5LmNzcyc7XG5pbXBvcnQgJ25vdHkvbGliL3RoZW1lcy9yZWxheC5jc3MnO1xuaW1wb3J0ICcuL3N0b3J5Ym9vay5jc3MnO1xuXG5pbXBvcnQge1xuICAgIERlc2NyaXB0aW9uLFxuICAgIERvY3NDb250ZXh0LFxuICAgIERvY3NTdG9yeSxcbiAgICBUaXRsZSxcbn0gZnJvbSAnQHN0b3J5Ym9vay9hZGRvbi1kb2NzL2Jsb2Nrcyc7XG5pbXBvcnQgeyBnZXREb2NzU3RvcmllcyB9IGZyb20gJ0BzdG9yeWJvb2svYWRkb24tZG9jcy9kaXN0L2Jsb2Nrcy91dGlscyc7XG5pbXBvcnQgeyBTb3VyY2UgfSBmcm9tICdAc3Rvcnlib29rL2NvbXBvbmVudHMnO1xuaW1wb3J0IE5vdHkgZnJvbSAnbm90eSc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IERuZFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtZG5kJztcbmltcG9ydCB7IEhUTUw1QmFja2VuZCB9IGZyb20gJ3JlYWN0LWRuZC1odG1sNS1iYWNrZW5kJztcblxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEgfSBmcm9tICcuLi9zcmMnO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IExpdmVFeGFtcGxlTWQgZnJvbSAnLi9MaXZlLWV4YW1wbGVzLm1kJztcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBVbnN0YWJsZVdhcm5pbmdNZCBmcm9tICcuL1Vuc3RhYmxlLXdhcm5pbmcubWQnO1xuXG5leHBvcnQgY29uc3QgY3JlYXRlRG9jc09iamVjdCA9IChwYXJhbXM6IHsgbWFya2Rvd246IHN0cmluZyB9KSA9PiB7XG4gICAgY29uc3QgeyBtYXJrZG93biB9ID0gcGFyYW1zO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcGFnZTogKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICAgICAgICAgIDxEbmRQcm92aWRlciBiYWNrZW5kPXtIVE1MNUJhY2tlbmR9PlxuICAgICAgICAgICAgICAgICAgICAgICAge3BhcnNlTWFya2Rvd24oVW5zdGFibGVXYXJuaW5nTWQpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPFRpdGxlIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICB7cGFyc2VNYXJrZG93bihtYXJrZG93bil9XG4gICAgICAgICAgICAgICAgICAgICAgICA8Q3VzdG9tUHJpbWFyeSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAge3BhcnNlTWFya2Rvd24oTGl2ZUV4YW1wbGVNZCl9XG4gICAgICAgICAgICAgICAgICAgIDwvRG5kUHJvdmlkZXI+XG4gICAgICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBDdXN0b21QcmltYXJ5OiBSZWFjdC5GQzxhbnk+ID0gKHsgbmFtZSB9KSA9PiB7XG4gICAgY29uc3QgY29udGV4dCA9IHVzZUNvbnRleHQoRG9jc0NvbnRleHQpO1xuICAgIGNvbnN0IGNvbXBvbmVudFN0b3JpZXMgPSBnZXREb2NzU3Rvcmllcyhjb250ZXh0KTtcbiAgICBsZXQgc3Rvcnk7XG4gICAgaWYgKGNvbXBvbmVudFN0b3JpZXMpIHtcbiAgICAgICAgc3RvcnkgPSBuYW1lXG4gICAgICAgICAgICA/IGNvbXBvbmVudFN0b3JpZXMuZmluZCgocykgPT4gcy5uYW1lID09PSBuYW1lKVxuICAgICAgICAgICAgOiBjb21wb25lbnRTdG9yaWVzWzBdO1xuICAgIH1cbiAgICByZXR1cm4gc3RvcnkgPyA8RG9jc1N0b3J5IHsuLi5zdG9yeX0gZXhwYW5kZWQ9e2ZhbHNlfSAvPiA6IG51bGw7XG59O1xuXG5jb25zdCBwYXJzZU1hcmtkb3duID0gKG1hcmtkb3duOiBzdHJpbmcpOiBSZWFjdC5SZWFjdEVsZW1lbnRbXSA9PiB7XG4gICAgLy8gRXh0cmFjdCBpbmRpY2VzIG9mIHN0YXJ0IGFuZCBlbmQgb2YgZWFjaCBjb2RlIGJsb2NrXG4gICAgY29uc3QgaW5kaWNlcyA9IGdldEluZGljZXNPZignYGBgJywgbWFya2Rvd24pO1xuXG4gICAgLy8gTWF0Y2ggaW5kaWNlcyB0byBzdGFydC9lbmQgbG9jYXRpb25cbiAgICBjb25zdCBvY2N1cnJlbmNlcyA9IFtdO1xuICAgIGZvciAoY29uc3QgaW5kZXggb2YgaW5kaWNlcykge1xuICAgICAgICBjb25zdCBsaW5lRW5kID0gbWFya2Rvd24uaW5kZXhPZignXFxuJywgaW5kZXgpO1xuICAgICAgICBjb25zdCBsaW5lID0gbWFya2Rvd24uc3Vic3RyaW5nKGluZGV4LCBsaW5lRW5kKS50cmltKCk7XG5cbiAgICAgICAgY29uc3Qgb3BlbmluZ19tYXRjaGVzID0gL15gYGAoW2Etei1dKykoXFxzK3suKj99KT8kL2kuZXhlYyhsaW5lKTtcblxuICAgICAgICBpZiAob3BlbmluZ19tYXRjaGVzKSB7XG4gICAgICAgICAgICBjb25zdCBbLCBsYW5ndWFnZSwganNvbkNvbmZpZ10gPSBvcGVuaW5nX21hdGNoZXM7XG4gICAgICAgICAgICBvY2N1cnJlbmNlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc3RhcnQnLFxuICAgICAgICAgICAgICAgIGxhbmd1YWdlLFxuICAgICAgICAgICAgICAgIGpzb25Db25maWcsXG4gICAgICAgICAgICAgICAgbWFya2Rvd25FbmQ6IGluZGV4LFxuICAgICAgICAgICAgICAgIGNvZGVTdGFydDogbGluZUVuZCArIDEsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgvXmBgYCQvaS5leGVjKGxpbmUpKSB7XG4gICAgICAgICAgICBvY2N1cnJlbmNlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnZW5kJyxcbiAgICAgICAgICAgICAgICBjb2RlRW5kOiBpbmRleCxcbiAgICAgICAgICAgICAgICBtYXJrZG93blN0YXJ0OiBsaW5lRW5kICsgMSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGNvbXBvbmVudHMgYmFzZWQgb24gc3RhcnQvZW5kIGxvY2F0aW9uXG4gICAgY29uc3QgY29tcG9uZW50cyA9IFtdO1xuICAgIGxldCBtYXJrZG93blN0YXJ0ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9jY3VycmVuY2VzLmxlbmd0aCAtIDE7ICsraSkge1xuICAgICAgICBjb25zdCBzdGFydCA9IG9jY3VycmVuY2VzW2ldO1xuICAgICAgICBjb25zdCBlbmQgPSBvY2N1cnJlbmNlc1tpICsgMV07XG5cbiAgICAgICAgaWYgKHN0YXJ0LnR5cGUgIT09ICdzdGFydCcgfHwgZW5kLnR5cGUgIT09ICdlbmQnKSBjb250aW51ZTtcbiAgICAgICAgZWxzZSBpICs9IDE7XG5cbiAgICAgICAgY29uc3QgbWRTbGljZSA9IG1hcmtkb3duLnN1YnN0cmluZyhtYXJrZG93blN0YXJ0LCBzdGFydC5tYXJrZG93bkVuZCk7XG4gICAgICAgIGNvbnN0IGNvZGVTbGljZSA9IG1hcmtkb3duLnN1YnN0cmluZyhzdGFydC5jb2RlU3RhcnQhLCBlbmQuY29kZUVuZCk7XG5cbiAgICAgICAgY29tcG9uZW50cy5wdXNoKHByZXBhcmVNYXJrZG93bkNvbXAoaSwgbWRTbGljZSkpO1xuICAgICAgICBjb21wb25lbnRzLnB1c2goXG4gICAgICAgICAgICBwcmVwYXJlQ29kZUNvbXAoaSwgc3RhcnQubGFuZ3VhZ2UsIGNvZGVTbGljZSwgc3RhcnQuanNvbkNvbmZpZylcbiAgICAgICAgKTtcbiAgICAgICAgbWFya2Rvd25TdGFydCA9IGVuZC5tYXJrZG93blN0YXJ0ITtcbiAgICB9XG4gICAgY29tcG9uZW50cy5wdXNoKFxuICAgICAgICA8RGVzY3JpcHRpb24ga2V5PVwibWFya2Rvd24tbGFzdFwiIG1hcmtkb3duPXttYXJrZG93bi5zdWJzdHJpbmcobWFya2Rvd25TdGFydCl9IC8+XG4gICAgKTtcblxuICAgIHJldHVybiBjb21wb25lbnRzO1xufTtcblxuY29uc3QgcHJlcGFyZU1hcmtkb3duQ29tcCA9IChpbmRleDogbnVtYmVyLCBtYXJrZG93bjogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIDxEZXNjcmlwdGlvbiBrZXk9e2BtZC0ke2luZGV4fWB9IG1hcmtkb3duPXttYXJrZG93bn0gLz47XG59O1xuXG5jb25zdCBwcmVwYXJlQ29kZUNvbXAgPSAoXG4gICAgaW5kZXg6IG51bWJlcixcbiAgICBsYW5ndWFnZT86IHN0cmluZyxcbiAgICBjb2RlPzogc3RyaW5nLFxuICAgIGpzb25Db25maWc/OiBzdHJpbmdcbikgPT4ge1xuICAgIGNvbnN0IGtleSA9IGBjb2RlLSR7MiAqIGluZGV4ICsgMX1gO1xuXG4gICAgbGV0IGRpc3BsYXlDb2RlO1xuICAgIGlmIChqc29uQ29uZmlnKSB7XG4gICAgICAgIGRpc3BsYXlDb2RlID1cbiAgICAgICAgICAgIGBTb3JyeSwgSlNPTiBjb25maWcgbG9hZGluZyBpcyBjdXJyZW50bHkgbm90IHN1cHBvcnRlZC4gYCArXG4gICAgICAgICAgICBgXFxuWW91ciBjb25maWc6ICR7anNvbkNvbmZpZ31gO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGRpc3BsYXlDb2RlID0gY29kZTtcbiAgICB9XG5cbiAgICByZXR1cm4gPFNvdXJjZSBrZXk9e2tleX0gbGFuZ3VhZ2U9e2xhbmd1YWdlfSBjb2RlPXtkaXNwbGF5Q29kZX0gLz47XG59O1xuXG5jb25zdCBnZXRJbmRpY2VzT2YgPSAobmVlZGxlOiBzdHJpbmcsIGhheXN0YWNrOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBzZWFyY2hTdHJMZW4gPSBuZWVkbGUubGVuZ3RoO1xuICAgIGlmIChzZWFyY2hTdHJMZW4gPT0gMCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGxldCBpbmRleDtcbiAgICBsZXQgc3RhcnRJbmRleCA9IDA7XG4gICAgY29uc3QgaW5kaWNlcyA9IFtdO1xuICAgIHdoaWxlICgoaW5kZXggPSBoYXlzdGFjay5pbmRleE9mKG5lZWRsZSwgc3RhcnRJbmRleCkpID4gLTEpIHtcbiAgICAgICAgaW5kaWNlcy5wdXNoKGluZGV4KTtcbiAgICAgICAgc3RhcnRJbmRleCA9IGluZGV4ICsgc2VhcmNoU3RyTGVuO1xuICAgIH1cbiAgICByZXR1cm4gaW5kaWNlcztcbn07XG5cbmV4cG9ydCBjb25zdCBzaG93QWN0aW9uTm90aWZpY2F0aW9uID0gKHBhcmFtczoge1xuICAgIGFjdGlvbjogRmlsZUFjdGlvbjtcbiAgICBkYXRhOiBGaWxlQWN0aW9uRGF0YTtcbn0pID0+IHtcbiAgICBjb25zdCB7IGFjdGlvbiwgZGF0YSB9ID0gcGFyYW1zO1xuXG4gICAgY29uc3QgdGV4dFBhcnRzID0gW107XG4gICAgdGV4dFBhcnRzLnB1c2goYDxiPkFjdGlvbjo8L2I+ICR7YWN0aW9uLmlkfWApO1xuICAgIGlmIChkYXRhLnRhcmdldCkge1xuICAgICAgICB0ZXh0UGFydHMucHVzaChgPGI+VGFyZ2V0OjwvYj4gPGNvZGU+JHtkYXRhLnRhcmdldC5uYW1lfTwvY29kZT5gKTtcbiAgICB9XG4gICAgaWYgKGRhdGEuZmlsZXMpIHtcbiAgICAgICAgY29uc3QgZmlsZU5hbWVzID0gZGF0YS5maWxlcy5tYXAoKGYpID0+IGYubmFtZSk7XG4gICAgICAgIGNvbnN0IGZpbGVDb21wcyA9IGZpbGVOYW1lcy5tYXAoKG5hbWUpID0+IGA8Y29kZT4ke25hbWV9PC9jb2RlPmApO1xuICAgICAgICBjb25zdCBmaWxlQ291bnQgPSBmaWxlQ29tcHMubGVuZ3RoO1xuICAgICAgICBjb25zdCBmaWxlVGl0bGUgPSBgJHtmaWxlQ291bnR9ICR7ZmlsZUNvdW50ID09PSAxID8gJ2ZpbGUnIDogJ2ZpbGVzJ306YDtcbiAgICAgICAgdGV4dFBhcnRzLnB1c2goYDxiPiR7ZmlsZVRpdGxlfTwvYj4gWyR7ZmlsZUNvbXBzLmpvaW4oJywgJyl9XWApO1xuICAgIH1cbiAgICBjb25zdCB0ZXh0ID0gdGV4dFBhcnRzLmpvaW4oJzxici8+Jyk7XG5cbiAgICBuZXcgTm90eSh7XG4gICAgICAgIHRleHQsXG4gICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgICAgdGhlbWU6ICdyZWxheCcsXG4gICAgICAgIHRpbWVvdXQ6IDMwMDAsXG4gICAgfSkuc2hvdygpO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IFwiPGRpdiBjbGFzcz1cXFwidW5zdGFibGUtd2FybmluZ1xcXCI+XFxuXFxuPiAqKlN0b3AgcmlnaHQgdGhlcmUhKipcXG4+XFxuPiBZb3UgYXJlIHJlYWRpbmcgdGhlIGRvY3VtZW50YXRpb24gZm9yIGFuICoqdW5yZWxlYXNlZCoqIDEueFxcbj4gdmVyc2lvbiBvZiBDaG9ua3kuIFRoZSBBUEkgZGVzY3JpYmVkIGhlcmUgY2FuIGNoYW5nZSAtIGl0IHdpbGwgbm90IGJlXFxuPiBmcm96ZW4gdW50aWwgdGhlIG9mZmljaWFsIDEueCByZWxlYXNlLlxcbj5cXG4+IElmIHlvdSBuZWVkIHRvIHVzZSBDaG9ua3kgcmlnaHQgbm93LCB1c2UgdGhlIDAueCB2ZXJzaW9uIGZyb20gdGhlXFxuPiBbRG9jdW1lbnRhdGlvbiBJbmRleF0oaHR0cHM6Ly90aW1ib2t6LmdpdGh1Yi5pby9DaG9ua3kvKS5cXG4+XFxuPiAqKldhbnQgdG8gcmVxdWVzdCBhIGZlYXR1cmUgZm9yIDEueCBvciByZXBvcnQgYSAxLnggaXNzdWU/KiogUG9zdCBpdCBpblxcbj4gW0Nob25reSBHaXRIdWIgaXNzdWVzXShodHRwczovL2dpdGh1Yi5jb20vVGltYm9LWi9DaG9ua3kvaXNzdWVzKS5cXG5cXG48L2Rpdj5cXG5cIjsiLCJleHBvcnQgZGVmYXVsdCBcIiMjIyBBIG5vdGUgYWJvdXQgbGl2ZSBleGFtcGxlcy4uLlxcblxcbkFsbCBsaXZlIGV4YW1wbGVzIGFyZSB3cml0dGVuIGluIFR5cGVzY3JpcHQuIEFsbCBjb21wb25lbnRzIGFuZCB0eXBlcyBhcmUgaW1wb3J0ZWRcXG5mcm9tIHRoZSBgY2hvbmt5YCBwYWNrYWdlLCBlLmcuOlxcblxcbmBgYHRzXFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcbmltcG9ydCB7IEZpbGVCcm93c2VyLCBGaWxlVG9vbGJhciwgRmlsZUxpc3QsIEZpbGVEYXRhIH0gZnJvbSAnY2hvbmt5JztcXG5gYGBcXG5cXG5UaGUgb25seSBleGNlcHRpb24gaXMgdGhlIGBzaG93QWN0aW9uTm90aWZpY2F0aW9uKClgIGZ1bmN0aW9uLCB3aGljaCBjYWxsc1xcblt0aGUgTm90eSBub3RpZmljYXRpb24gbGlicmFyeV0oaHR0cHM6Ly9uZWQuaW0vbm90eS8pIChub3QgcGFja2FnZWQgd2l0aCBDaG9ua3kpLiBUb1xcbnJ1biB0aGUgZXhhbXBsZXMgbG9jYWxseSwgeW91IGNhbiByZXBsYWNlIGBzaG93QWN0aW9uTm90aWZpY2F0aW9uKClgIHdpdGhcXG5gY29uc29sZS5sb2coKWAuXFxuXCI7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJOeU1ZXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiTFcwaFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIkFSdWFcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJhb2tBXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiOUpoTlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIlBqWlhcIik7IiwiaW1wb3J0ICdAc3Rvcnlib29rL3JlYWN0JzsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIkpZK0NcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJaVWRHXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiUHVJeFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcImhvMHpcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCI3eFJVXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwidFFiUFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcImp3dWVcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJkU2FHXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiaFFpblwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIitveFpcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJsTjVCXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiTEo3ZVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIkkyZktcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJEWTQ3XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiM2twOVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIi9iYzJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCIvSnVSXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiK0J4dlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIm11RnhcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJXY2k2XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiV29SVVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIm8zZlNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJKbVRpXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwieGFpUlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIlNsRC9cIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJNb25uXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiZm1OUFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcInVGWGpcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJFZ1JQXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiVjBJV1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIk9DU2xcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJrQTRyXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiQmxtNlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcInNzdlVcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJsWm0zXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiRWUyWFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIklBZERcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJNdlVMXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiYjJlM1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcInlIL2ZcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJZc2doXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwibWFqOFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIktPdFpcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJIODdKXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiUzNwQVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIk8xU2NcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJ6RjVuXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwia3ZWelwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIkEzVVFcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJ0SlZlXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwibnVvbFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIlBqSk9cIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJEcE81XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiS2thclwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIjJxOGdcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJuRGloXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiSFVDZ1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcImFXenpcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJZY3Q1XCIpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2NsaWVudEFwaSA9IHJlcXVpcmUoXCIvaG9tZS9ldXFsMW4vV29ya3NwYWNlcy9wZXJzb25hbC9DaG9ua3kvbm9kZV9tb2R1bGVzL0BzdG9yeWJvb2svY2xpZW50LWFwaVwiKTtcblxudmFyIF9jbGllbnRMb2dnZXIgPSByZXF1aXJlKFwiL2hvbWUvZXVxbDFuL1dvcmtzcGFjZXMvcGVyc29uYWwvQ2hvbmt5L25vZGVfbW9kdWxlcy9Ac3Rvcnlib29rL2NsaWVudC1sb2dnZXJcIik7XG5cbnZhciBfY29uZmlnRmlsZW5hbWUgPSByZXF1aXJlKFwiL2hvbWUvZXVxbDFuL1dvcmtzcGFjZXMvcGVyc29uYWwvQ2hvbmt5Ly5zdG9yeWJvb2svcHJldmlldy5qc1wiKTtcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmlmIChfY29uZmlnRmlsZW5hbWUuYXJncyB8fCBfY29uZmlnRmlsZW5hbWUuYXJnVHlwZXMpIHtcbiAgX2NsaWVudExvZ2dlci5sb2dnZXIud2FybignSW52YWxpZCBhcmdzL2FyZ1R5cGVzIGluIGNvbmZpZywgaWdub3JpbmcuJywgSlNPTi5zdHJpbmdpZnkoe1xuICAgIGFyZ3M6IF9jb25maWdGaWxlbmFtZS5hcmdzLFxuICAgIGFyZ1R5cGVzOiBfY29uZmlnRmlsZW5hbWUuYXJnVHlwZXNcbiAgfSkpO1xufVxuXG5pZiAoX2NvbmZpZ0ZpbGVuYW1lLmRlY29yYXRvcnMpIHtcbiAgX2NvbmZpZ0ZpbGVuYW1lLmRlY29yYXRvcnMuZm9yRWFjaChmdW5jdGlvbiAoZGVjb3JhdG9yKSB7XG4gICAgcmV0dXJuICgwLCBfY2xpZW50QXBpLmFkZERlY29yYXRvcikoZGVjb3JhdG9yKTtcbiAgfSk7XG59XG5cbmlmIChfY29uZmlnRmlsZW5hbWUucGFyYW1ldGVycyB8fCBfY29uZmlnRmlsZW5hbWUuZ2xvYmFsQXJncyB8fCBfY29uZmlnRmlsZW5hbWUuZ2xvYmFsQXJnVHlwZXMpIHtcbiAgKDAsIF9jbGllbnRBcGkuYWRkUGFyYW1ldGVycykoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBfY29uZmlnRmlsZW5hbWUucGFyYW1ldGVycyksIHt9LCB7XG4gICAgZ2xvYmFsQXJnczogX2NvbmZpZ0ZpbGVuYW1lLmdsb2JhbEFyZ3MsXG4gICAgZ2xvYmFsQXJnVHlwZXM6IF9jb25maWdGaWxlbmFtZS5nbG9iYWxBcmdUeXBlc1xuICB9KSk7XG59XG5cbmlmIChfY29uZmlnRmlsZW5hbWUuYXJnVHlwZXNFbmhhbmNlcnMpIHtcbiAgX2NvbmZpZ0ZpbGVuYW1lLmFyZ1R5cGVzRW5oYW5jZXJzLmZvckVhY2goZnVuY3Rpb24gKGVuaGFuY2VyKSB7XG4gICAgcmV0dXJuICgwLCBfY2xpZW50QXBpLmFkZEFyZ1R5cGVzRW5oYW5jZXIpKGVuaGFuY2VyKTtcbiAgfSk7XG59IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJjdDgwXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwib0Q0dFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIjJzWjdcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJqUTNpXCIpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ZyYW1ld29yayA9IHJlcXVpcmUoXCJAc3Rvcnlib29rL3JlYWN0XCIpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZXJzY29yZS1kYW5nbGVcbm1vZHVsZS5fU3Rvcnlib29rUHJlc2VydmVEZWNvcmF0b3JzID0gdHJ1ZTtcbigwLCBfZnJhbWV3b3JrLmNvbmZpZ3VyZSkoW3JlcXVpcmUuY29udGV4dCgnLi4vc3RvcmllcycsIHRydWUsIC8oPzooPyFcXC4pLio/XFwuc3Rvcmllc1xcLih0c3h8bWR4KSkkLyldLCBtb2R1bGUpOyIsInZhciBtYXAgPSB7XG5cdFwiLi8wMC1XZWxjb21lLzAxLVdlbGNvbWUuc3Rvcmllcy5tZHhcIjogNjIyLFxuXHRcIi4vMDAtV2VsY29tZS8wMi1GZWF0dXJlcy5zdG9yaWVzLm1keFwiOiA2MjMsXG5cdFwiLi8wMC1XZWxjb21lLzAzLUluc3RhbGxhdGlvbi5zdG9yaWVzLm1keFwiOiA2MjQsXG5cdFwiLi8wMC1XZWxjb21lLzA0LUltbXV0YWJpbGl0eS5zdG9yaWVzLm1keFwiOiA2MjUsXG5cdFwiLi8wMS1GaWxlLUJyb3dzZXItYmFzaWNzLzAxLUNvbXBvbmVudC1oaWVyYXJjaHkuc3Rvcmllcy50c3hcIjogNzcyLFxuXHRcIi4vMDEtRmlsZS1Ccm93c2VyLWJhc2ljcy8wMi1EaXNwbGF5aW5nLWZpbGVzLnN0b3JpZXMudHN4XCI6IDc3Myxcblx0XCIuLzAxLUZpbGUtQnJvd3Nlci1iYXNpY3MvMDMtU3BlY2lmeWluZy1mb2xkZXIuc3Rvcmllcy50c3hcIjogNzc0LFxuXHRcIi4vMDEtRmlsZS1Ccm93c2VyLWJhc2ljcy8wNC1BY3Rpb25zLnN0b3JpZXMudHN4XCI6IDc3NSxcblx0XCIuLzAxLUZpbGUtQnJvd3Nlci1iYXNpY3MvMDUtQ3VzdG9tLWFjdGlvbnMuc3Rvcmllcy50c3hcIjogNzc2LFxuXHRcIi4vMDEtRmlsZS1Ccm93c2VyLWJhc2ljcy8wNi1UaHVtYm5haWxzLnN0b3JpZXMudHN4XCI6IDc3Nyxcblx0XCIuLzAxLUZpbGUtQnJvd3Nlci1iYXNpY3MvMDctRHJhZy1uLWRyb3Auc3Rvcmllcy50c3hcIjogNzc4LFxuXHRcIi4vMDItRmlsZS1Ccm93c2VyLWFkdmFuY2VkLzAxLUludmFsaWQtcHJvcHMuc3Rvcmllcy50c3hcIjogNzc5LFxuXHRcIi4vMDItRmlsZS1Ccm93c2VyLWFkdmFuY2VkLzAyLVZpcnR1YWxpemF0aW9uLnN0b3JpZXMudHN4XCI6IDc4MCxcblx0XCIuLzAzLUFQSS1SZWZlcmVuY2UvMDItQnVpbHQtaW4tYWN0aW9ucy5zdG9yaWVzLm1keFwiOiA3NzBcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSA2MjE7IiwiXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBtZHggfSBmcm9tICdAbWR4LWpzL3JlYWN0J1xuXG4vKiBAanN4IG1keCAqL1xuaW1wb3J0IHsgYXNzZXJ0SXNGbiwgQWRkQ29udGV4dCB9IGZyb20gXCJAc3Rvcnlib29rL2FkZG9uLWRvY3MvYmxvY2tzXCI7XG5cbmltcG9ydCBDaG9ua3lIZWFkZXIgZnJvbSAnLi4vQ2hvbmt5LWhlYWRlci5tZHgnO1xuXG5jb25zdCBtYWtlU2hvcnRjb2RlID0gbmFtZSA9PiBmdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKSB7XG4gIGNvbnNvbGUud2FybihcIkNvbXBvbmVudCBcIiArIG5hbWUgKyBcIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlXCIpXG4gIHJldHVybiA8ZGl2IHsuLi5wcm9wc30vPlxufTtcbmNvbnN0IE1ldGEgPSBtYWtlU2hvcnRjb2RlKFwiTWV0YVwiKTtcbmNvbnN0IGxheW91dFByb3BzID0ge1xuICBcbn07XG5jb25zdCBNRFhMYXlvdXQgPSBcIndyYXBwZXJcIlxuZnVuY3Rpb24gTURYQ29udGVudCh7XG4gIGNvbXBvbmVudHMsXG4gIC4uLnByb3BzXG59KSB7XG4gIHJldHVybiA8TURYTGF5b3V0IHsuLi5sYXlvdXRQcm9wc30gey4uLnByb3BzfSBjb21wb25lbnRzPXtjb21wb25lbnRzfSBtZHhUeXBlPVwiTURYTGF5b3V0XCI+XG5cbiAgICA8TWV0YSB0aXRsZT1cIjAgQ2hvbmt5IE92ZXJ2aWV3fEludHJvZHVjdGlvblwiIG1keFR5cGU9XCJNZXRhXCIgLz5cbiAgICA8Q2hvbmt5SGVhZGVyIG1keFR5cGU9XCJDaG9ua3lIZWFkZXJcIiAvPlxuICAgIDxoMSB7Li4ue1xuICAgICAgXCJpZFwiOiBcImludHJvZHVjdGlvblwiXG4gICAgfX0+e2BJbnRyb2R1Y3Rpb25gfTwvaDE+XG4gICAgPHA+PHN0cm9uZyBwYXJlbnROYW1lPVwicFwiPntgQ2hvbmt5IGlzIGEgZmlsZSBicm93c2VyIGNvbXBvbmVudCBmb3IgUmVhY3QuYH08L3N0cm9uZz57YCBJdCB0cmllcyB0byByZWNyZWF0ZSB0aGUgbmF0aXZlIGZpbGVcbmJyb3dzaW5nIGV4cGVyaWVuY2UgaW4geW91ciBicm93c2VyLiBDaG9ua3kgc3VwcG9ydHMgZHJhZyAmIGRyb3AsIGZpbGUgc2VsZWN0aW9uLFxuaW1hZ2UgdGh1bWJuYWlscywgYW5kIG11Y2ggbW9yZSFgfTwvcD5cbiAgICA8cD48YSBwYXJlbnROYW1lPVwicFwiIHsuLi57XG4gICAgICAgIFwiaHJlZlwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9UaW1ib0taL0Nob25reVwiLFxuICAgICAgICBcInRhcmdldFwiOiBcIl9ibGFua1wiLFxuICAgICAgICBcInJlbFwiOiBcIm5vZm9sbG93IG5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgfX0+PHN0cm9uZyBwYXJlbnROYW1lPVwiYVwiPntgVmlldyBvbiBHaXRodWJgfTwvc3Ryb25nPjwvYT48L3A+XG4gICAgPGJyIC8+XG4gICAgPGgxIHsuLi57XG4gICAgICBcImlkXCI6IFwicGhpbG9zb3BoeVwiXG4gICAgfX0+e2BQaGlsb3NvcGh5YH08L2gxPlxuICAgIDxwPntgUGxlYXNlIHJlYWQgdGhpcyBzZWN0aW9uIHRvIHVuZGVyc3RhbmQgd2hhdCBDaG9ua3kgaXMgYW5kIGlzIG5vdC5gfTwvcD5cbiAgICA8YnIgLz5cbiAgICA8aDMgey4uLntcbiAgICAgIFwiaWRcIjogXCIxLWNob25reS1pcy10aGUtcHJlc2VudGF0aW9uLWxheWVyXCJcbiAgICB9fT57YDEuIENob25reSBpcyB0aGUgcHJlc2VudGF0aW9uIGxheWVyLmB9PC9oMz5cbiAgICA8cD57YENob25reSB0YWtlcyBhIGxpc3Qgb2YgZmlsZXMgYW5kIHNob3dzIHRoZW0gdG8gdGhlIHVzZXIuIEl0IGRvZXMgbm90IGFuZCBzaG91bGQgbm90XG5rbm93IHdoZXJlIHRoZSBmaWxlcyBjYW1lIGZyb20sIG5vciBzaG91bGQgaXQgbm93IGhvdyBmaWxlIG9wZXJhdGlvbnMgYXJlIGNhcnJpZWQgb3V0LmB9PC9wPlxuICAgIDxiciAvPlxuICAgIDxoMyB7Li4ue1xuICAgICAgXCJpZFwiOiBcIjItY2hvbmt5LWlzLWZpbGVzeXN0ZW0tYWdub3N0aWNcIlxuICAgIH19PntgMi4gQ2hvbmt5IGlzIGZpbGVzeXN0ZW0tYWdub3N0aWMuYH08L2gzPlxuICAgIDxwPntgQ2hvbmt5IHRyaWVzIHRvIHN0YXkgYH08c3Ryb25nIHBhcmVudE5hbWU9XCJwXCI+e2B1bm9waW5pb25hdGVkYH08L3N0cm9uZz57YCB3aGVuIGl0IGNvbWVzIHRvIGludGVyYWN0aW9ucyB3aXRoIHRoZSBmaWxlXG5zeXN0ZW0gKEZTKS5gfTwvcD5cbiAgICA8YnIgLz5cbiAgICA8aDMgey4uLntcbiAgICAgIFwiaWRcIjogXCIzLWRldmVsb3BpbmctZmlsZS1icm93c2Vycy1pcy1oYXJkLWVhY2gtdXNlLWNhc2UtaXMtdW5pcXVlXCJcbiAgICB9fT57YDMuIERldmVsb3BpbmcgZmlsZSBicm93c2VycyBpcyBoYXJkLiBFYWNoIHVzZSBjYXNlIGlzIHVuaXF1ZS5gfTwvaDM+XG4gICAgPHA+e2BBdCB0aGUgc2FtZSB0aW1lLCBDaG9ua3kgdHJpZXMgdG8gY292ZXIgYWxsIHBvc3NpYmxlIGludGVyYWN0aW9ucyB3aXRoIHRoZSB1c2VyLiBUaGlzIGluY2x1ZGVzIHN1cHBvcnQgZm9yIGtleWJvYXJkXG5uYXZpZ2F0aW9uIGFuZCBjb21tb24ga2V5Ym9hcmQgc2hvcnRjdXRzLCBzdXBwb3J0IGZvciBmaWxlIHNlbGVjdGlvbnMsIGRyYWcgJiBkcm9wLCBkaWZmZXJlbnQgZmlsZSB2aWV3cywgYW5kIG11Y2ggbW9yZS5gfTwvcD5cbiAgICA8YnIgLz5cbiAgICA8YnIgLz5cbiAgICA8YnIgLz5cbiAgICA8YnIgLz5cbiZuYnNwO1xuICAgIDwvTURYTGF5b3V0Pjtcbn1cblxuO1xuTURYQ29udGVudC5pc01EWENvbXBvbmVudCA9IHRydWU7XG5cbmV4cG9ydCBjb25zdCBfX3BhZ2UgPSAoKSA9PiB7IHRocm93IG5ldyBFcnJvcihcIkRvY3Mtb25seSBzdG9yeVwiKTsgfTtcblxuX19wYWdlLnBhcmFtZXRlcnMgPSB7IGRvY3NPbmx5OiB0cnVlIH07XG5cbmNvbnN0IGNvbXBvbmVudE1ldGEgPSB7IHRpdGxlOiAnMCBDaG9ua3kgT3ZlcnZpZXd8SW50cm9kdWN0aW9uJywgaW5jbHVkZVN0b3JpZXM6IFtcIl9fcGFnZVwiXSwgIH07XG5cbmNvbnN0IG1keFN0b3J5TmFtZVRvS2V5ID0ge307XG5cbmNvbXBvbmVudE1ldGEucGFyYW1ldGVycyA9IGNvbXBvbmVudE1ldGEucGFyYW1ldGVycyB8fCB7fTtcbmNvbXBvbmVudE1ldGEucGFyYW1ldGVycy5kb2NzID0ge1xuICAuLi4oY29tcG9uZW50TWV0YS5wYXJhbWV0ZXJzLmRvY3MgfHwge30pLFxuICBwYWdlOiAoKSA9PiA8QWRkQ29udGV4dCBtZHhTdG9yeU5hbWVUb0tleT17bWR4U3RvcnlOYW1lVG9LZXl9IG1keENvbXBvbmVudE1ldGE9e2NvbXBvbmVudE1ldGF9PjxNRFhDb250ZW50IC8+PC9BZGRDb250ZXh0Pixcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudE1ldGE7IiwiXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBtZHggfSBmcm9tICdAbWR4LWpzL3JlYWN0J1xuXG4vKiBAanN4IG1keCAqL1xuaW1wb3J0IHsgYXNzZXJ0SXNGbiwgQWRkQ29udGV4dCB9IGZyb20gXCJAc3Rvcnlib29rL2FkZG9uLWRvY3MvYmxvY2tzXCI7XG5cbmltcG9ydCBDaG9ua3lIZWFkZXIgZnJvbSAnLi4vQ2hvbmt5LWhlYWRlci5tZHgnO1xuXG5jb25zdCBtYWtlU2hvcnRjb2RlID0gbmFtZSA9PiBmdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKSB7XG4gIGNvbnNvbGUud2FybihcIkNvbXBvbmVudCBcIiArIG5hbWUgKyBcIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlXCIpXG4gIHJldHVybiA8ZGl2IHsuLi5wcm9wc30vPlxufTtcbmNvbnN0IE1ldGEgPSBtYWtlU2hvcnRjb2RlKFwiTWV0YVwiKTtcbmNvbnN0IGxheW91dFByb3BzID0ge1xuICBcbn07XG5jb25zdCBNRFhMYXlvdXQgPSBcIndyYXBwZXJcIlxuZnVuY3Rpb24gTURYQ29udGVudCh7XG4gIGNvbXBvbmVudHMsXG4gIC4uLnByb3BzXG59KSB7XG4gIHJldHVybiA8TURYTGF5b3V0IHsuLi5sYXlvdXRQcm9wc30gey4uLnByb3BzfSBjb21wb25lbnRzPXtjb21wb25lbnRzfSBtZHhUeXBlPVwiTURYTGF5b3V0XCI+XG5cbiAgICA8TWV0YSB0aXRsZT1cIjAgQ2hvbmt5IE92ZXJ2aWV3fENob25reSBmZWF0dXJlc1wiIG1keFR5cGU9XCJNZXRhXCIgLz5cbiAgICA8Q2hvbmt5SGVhZGVyIG1keFR5cGU9XCJDaG9ua3lIZWFkZXJcIiAvPlxuICAgIDxoMSB7Li4ue1xuICAgICAgXCJpZFwiOiBcImNob25reS1mZWF0dXJlc1wiXG4gICAgfX0+e2BDaG9ua3kgZmVhdHVyZXM6YH08L2gxPlxuICAgIDxiciAvPlxuICAgIDxibG9ja3F1b3RlPlxuICAgICAgPHAgcGFyZW50TmFtZT1cImJsb2NrcXVvdGVcIj57YFdhbnQgdG8gcmVxdWVzdCBhIGZlYXR1cmU/IFBvc3QgYSBmZWF0dXJlIHJlcXVlc3QgaW4gQ2hvbmt5J3NcbmB9PGEgcGFyZW50TmFtZT1cInBcIiB7Li4ue1xuICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9UaW1ib0taL0Nob25reS9pc3N1ZXNcIixcbiAgICAgICAgICBcInRhcmdldFwiOiBcIl9ibGFua1wiLFxuICAgICAgICAgIFwicmVsXCI6IFwibm9mb2xsb3cgbm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgIH19PntgR2l0SHViIGlzc3Vlc2B9PC9hPntgLmB9PC9wPlxuICAgIDwvYmxvY2txdW90ZT5cbiAgICA8YnIgLz5cbiAgICA8dWwgey4uLntcbiAgICAgIFwiY2xhc3NOYW1lXCI6IFwiY29udGFpbnMtdGFzay1saXN0XCJcbiAgICB9fT5cbiAgICAgIDxsaSBwYXJlbnROYW1lPVwidWxcIiB7Li4ue1xuICAgICAgICBcImNsYXNzTmFtZVwiOiBcInRhc2stbGlzdC1pdGVtXCJcbiAgICAgIH19PjxpbnB1dCBwYXJlbnROYW1lPVwibGlcIiB7Li4ue1xuICAgICAgICAgIFwidHlwZVwiOiBcImNoZWNrYm94XCIsXG4gICAgICAgICAgXCJjaGVja2VkXCI6IHRydWUsXG4gICAgICAgICAgXCJkaXNhYmxlZFwiOiB0cnVlXG4gICAgICAgIH19PjwvaW5wdXQ+e2AgYH17YEJhY2tlbmQtYWdub3N0aWMgLSBmaWxlcyBjYW4gY29tZSBmcm9tIGFueSBzb3VyY2UgKHJlbW90ZSBzZXJ2ZXIsIFMzLCB2aXJ0dWFsIEZTKS5gfTwvbGk+XG4gICAgICA8bGkgcGFyZW50TmFtZT1cInVsXCIgey4uLntcbiAgICAgICAgXCJjbGFzc05hbWVcIjogXCJ0YXNrLWxpc3QtaXRlbVwiXG4gICAgICB9fT48aW5wdXQgcGFyZW50TmFtZT1cImxpXCIgey4uLntcbiAgICAgICAgICBcInR5cGVcIjogXCJjaGVja2JveFwiLFxuICAgICAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgICAgICBcImRpc2FibGVkXCI6IHRydWVcbiAgICAgICAgfX0+PC9pbnB1dD57YCBgfXtgU3VwcG9ydHMgdGV4dCBzZWFyY2guYH08L2xpPlxuICAgICAgPGxpIHBhcmVudE5hbWU9XCJ1bFwiIHsuLi57XG4gICAgICAgIFwiY2xhc3NOYW1lXCI6IFwidGFzay1saXN0LWl0ZW1cIlxuICAgICAgfX0+PGlucHV0IHBhcmVudE5hbWU9XCJsaVwiIHsuLi57XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiY2hlY2tib3hcIixcbiAgICAgICAgICBcImNoZWNrZWRcIjogdHJ1ZSxcbiAgICAgICAgICBcImRpc2FibGVkXCI6IHRydWVcbiAgICAgICAgfX0+PC9pbnB1dD57YCBgfXtgU3VwcG9ydHMgZHJhZyAmIGRyb3AuYH08L2xpPlxuICAgICAgPGxpIHBhcmVudE5hbWU9XCJ1bFwiIHsuLi57XG4gICAgICAgIFwiY2xhc3NOYW1lXCI6IFwidGFzay1saXN0LWl0ZW1cIlxuICAgICAgfX0+PGlucHV0IHBhcmVudE5hbWU9XCJsaVwiIHsuLi57XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiY2hlY2tib3hcIixcbiAgICAgICAgICBcImNoZWNrZWRcIjogdHJ1ZSxcbiAgICAgICAgICBcImRpc2FibGVkXCI6IHRydWVcbiAgICAgICAgfX0+PC9pbnB1dD57YCBgfXtgU3VwcG9ydHMgaW1hZ2UgdGh1bWJuYWlscy5gfTwvbGk+XG4gICAgICA8bGkgcGFyZW50TmFtZT1cInVsXCIgey4uLntcbiAgICAgICAgXCJjbGFzc05hbWVcIjogXCJ0YXNrLWxpc3QtaXRlbVwiXG4gICAgICB9fT48aW5wdXQgcGFyZW50TmFtZT1cImxpXCIgey4uLntcbiAgICAgICAgICBcInR5cGVcIjogXCJjaGVja2JveFwiLFxuICAgICAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgICAgICBcImRpc2FibGVkXCI6IHRydWVcbiAgICAgICAgfX0+PC9pbnB1dD57YCBgfXtgU3VwcG9ydHMga2V5Ym9hcmQgc2hvcnRjdXRzLmB9PC9saT5cbiAgICAgIDxsaSBwYXJlbnROYW1lPVwidWxcIiB7Li4ue1xuICAgICAgICBcImNsYXNzTmFtZVwiOiBcInRhc2stbGlzdC1pdGVtXCJcbiAgICAgIH19PjxpbnB1dCBwYXJlbnROYW1lPVwibGlcIiB7Li4ue1xuICAgICAgICAgIFwidHlwZVwiOiBcImNoZWNrYm94XCIsXG4gICAgICAgICAgXCJjaGVja2VkXCI6IHRydWUsXG4gICAgICAgICAgXCJkaXNhYmxlZFwiOiB0cnVlXG4gICAgICAgIH19PjwvaW5wdXQ+e2AgYH17YFN1cHBvcnRzIGNvbW1vbiBhbmQgY3VzdG9tIGZpbGUgYWN0aW9ucy5gfTwvbGk+XG4gICAgICA8bGkgcGFyZW50TmFtZT1cInVsXCIgey4uLntcbiAgICAgICAgXCJjbGFzc05hbWVcIjogXCJ0YXNrLWxpc3QtaXRlbVwiXG4gICAgICB9fT48aW5wdXQgcGFyZW50TmFtZT1cImxpXCIgey4uLntcbiAgICAgICAgICBcInR5cGVcIjogXCJjaGVja2JveFwiLFxuICAgICAgICAgIFwiY2hlY2tlZFwiOiBmYWxzZSxcbiAgICAgICAgICBcImRpc2FibGVkXCI6IHRydWVcbiAgICAgICAgfX0+PC9pbnB1dD57YCBgfXtgU3VwcG9ydHMgYH08ZW0gcGFyZW50TmFtZT1cImxpXCI+e2BkZXRhaWxlZCBsaXN0YH08L2VtPntgIGFuZCBgfTxlbSBwYXJlbnROYW1lPVwibGlcIj57YHRodW1ibmFpbHNgfTwvZW0+e2Agdmlld3MuYH08L2xpPlxuICAgICAgPGxpIHBhcmVudE5hbWU9XCJ1bFwiIHsuLi57XG4gICAgICAgIFwiY2xhc3NOYW1lXCI6IFwidGFzay1saXN0LWl0ZW1cIlxuICAgICAgfX0+PGlucHV0IHBhcmVudE5hbWU9XCJsaVwiIHsuLi57XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiY2hlY2tib3hcIixcbiAgICAgICAgICBcImNoZWNrZWRcIjogdHJ1ZSxcbiAgICAgICAgICBcImRpc2FibGVkXCI6IHRydWVcbiAgICAgICAgfX0+PC9pbnB1dD57YCBgfXtgUHJvdmlkZXMgdW5pcXVlIGljb25zIGZvciBlYWNoIGZpbGUgZXh0ZW5zaW9uLmB9PC9saT5cbiAgICAgIDxsaSBwYXJlbnROYW1lPVwidWxcIiB7Li4ue1xuICAgICAgICBcImNsYXNzTmFtZVwiOiBcInRhc2stbGlzdC1pdGVtXCJcbiAgICAgIH19PjxpbnB1dCBwYXJlbnROYW1lPVwibGlcIiB7Li4ue1xuICAgICAgICAgIFwidHlwZVwiOiBcImNoZWNrYm94XCIsXG4gICAgICAgICAgXCJjaGVja2VkXCI6IHRydWUsXG4gICAgICAgICAgXCJkaXNhYmxlZFwiOiB0cnVlXG4gICAgICAgIH19PjwvaW5wdXQ+e2AgYH17YFN1cHBvcnRzIGZpbGUgc2VsZWN0aW9ucyAoZXhjbHVkaW5nIGRyYWcgc2VsZWN0aW9uLCBgfTxlbSBwYXJlbnROYW1lPVwibGlcIj57YGZvciBub3dgfTwvZW0+e2ApLmB9PC9saT5cbiAgICAgIDxsaSBwYXJlbnROYW1lPVwidWxcIiB7Li4ue1xuICAgICAgICBcImNsYXNzTmFtZVwiOiBcInRhc2stbGlzdC1pdGVtXCJcbiAgICAgIH19PjxpbnB1dCBwYXJlbnROYW1lPVwibGlcIiB7Li4ue1xuICAgICAgICAgIFwidHlwZVwiOiBcImNoZWNrYm94XCIsXG4gICAgICAgICAgXCJjaGVja2VkXCI6IHRydWUsXG4gICAgICAgICAgXCJkaXNhYmxlZFwiOiB0cnVlXG4gICAgICAgIH19PjwvaW5wdXQ+e2AgYH17YFN1cHBvcnRzIGxvYWRpbmcgYW5pbWF0aW9ucyBhbmQgYXN5bmMgdGh1bWJuYWlsIGdlbmVyYXRpb24uYH08L2xpPlxuICAgICAgPGxpIHBhcmVudE5hbWU9XCJ1bFwiIHsuLi57XG4gICAgICAgIFwiY2xhc3NOYW1lXCI6IFwidGFzay1saXN0LWl0ZW1cIlxuICAgICAgfX0+PGlucHV0IHBhcmVudE5hbWU9XCJsaVwiIHsuLi57XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiY2hlY2tib3hcIixcbiAgICAgICAgICBcImNoZWNrZWRcIjogdHJ1ZSxcbiAgICAgICAgICBcImRpc2FibGVkXCI6IHRydWVcbiAgICAgICAgfX0+PC9pbnB1dD57YCBgfXtgUGVyZm9ybXMgd2VsbCB3aXRoIGxhcmdlIGZpbGUgY29sbGVjdGlvbnMgdGhhbmtzIHRvXG5gfTxhIHBhcmVudE5hbWU9XCJsaVwiIHsuLi57XG4gICAgICAgICAgXCJocmVmXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL2J2YXVnaG4vcmVhY3QtdmlydHVhbGl6ZWRcIixcbiAgICAgICAgICBcInRhcmdldFwiOiBcIl9ibGFua1wiLFxuICAgICAgICAgIFwicmVsXCI6IFwibm9mb2xsb3cgbm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgIH19PntgdmlydHVhbGl6YXRpb25gfTwvYT57YC5gfTwvbGk+XG4gICAgPC91bD5cbiAgICA8L01EWExheW91dD47XG59XG5cbjtcbk1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQgPSB0cnVlO1xuXG5leHBvcnQgY29uc3QgX19wYWdlID0gKCkgPT4geyB0aHJvdyBuZXcgRXJyb3IoXCJEb2NzLW9ubHkgc3RvcnlcIik7IH07XG5cbl9fcGFnZS5wYXJhbWV0ZXJzID0geyBkb2NzT25seTogdHJ1ZSB9O1xuXG5jb25zdCBjb21wb25lbnRNZXRhID0geyB0aXRsZTogJzAgQ2hvbmt5IE92ZXJ2aWV3fENob25reSBmZWF0dXJlcycsIGluY2x1ZGVTdG9yaWVzOiBbXCJfX3BhZ2VcIl0sICB9O1xuXG5jb25zdCBtZHhTdG9yeU5hbWVUb0tleSA9IHt9O1xuXG5jb21wb25lbnRNZXRhLnBhcmFtZXRlcnMgPSBjb21wb25lbnRNZXRhLnBhcmFtZXRlcnMgfHwge307XG5jb21wb25lbnRNZXRhLnBhcmFtZXRlcnMuZG9jcyA9IHtcbiAgLi4uKGNvbXBvbmVudE1ldGEucGFyYW1ldGVycy5kb2NzIHx8IHt9KSxcbiAgcGFnZTogKCkgPT4gPEFkZENvbnRleHQgbWR4U3RvcnlOYW1lVG9LZXk9e21keFN0b3J5TmFtZVRvS2V5fSBtZHhDb21wb25lbnRNZXRhPXtjb21wb25lbnRNZXRhfT48TURYQ29udGVudCAvPjwvQWRkQ29udGV4dD4sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnRNZXRhOyIsIlxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgbWR4IH0gZnJvbSAnQG1keC1qcy9yZWFjdCdcblxuLyogQGpzeCBtZHggKi9cbmltcG9ydCB7IGFzc2VydElzRm4sIEFkZENvbnRleHQgfSBmcm9tIFwiQHN0b3J5Ym9vay9hZGRvbi1kb2NzL2Jsb2Nrc1wiO1xuXG5pbXBvcnQgQ2hvbmt5SGVhZGVyIGZyb20gJy4uL0Nob25reS1oZWFkZXIubWR4JztcblxuY29uc3QgbWFrZVNob3J0Y29kZSA9IG5hbWUgPT4gZnVuY3Rpb24gTURYRGVmYXVsdFNob3J0Y29kZShwcm9wcykge1xuICBjb25zb2xlLndhcm4oXCJDb21wb25lbnQgXCIgKyBuYW1lICsgXCIgd2FzIG5vdCBpbXBvcnRlZCwgZXhwb3J0ZWQsIG9yIHByb3ZpZGVkIGJ5IE1EWFByb3ZpZGVyIGFzIGdsb2JhbCBzY29wZVwiKVxuICByZXR1cm4gPGRpdiB7Li4ucHJvcHN9Lz5cbn07XG5jb25zdCBNZXRhID0gbWFrZVNob3J0Y29kZShcIk1ldGFcIik7XG5jb25zdCBsYXlvdXRQcm9wcyA9IHtcbiAgXG59O1xuY29uc3QgTURYTGF5b3V0ID0gXCJ3cmFwcGVyXCJcbmZ1bmN0aW9uIE1EWENvbnRlbnQoe1xuICBjb21wb25lbnRzLFxuICAuLi5wcm9wc1xufSkge1xuICByZXR1cm4gPE1EWExheW91dCB7Li4ubGF5b3V0UHJvcHN9IHsuLi5wcm9wc30gY29tcG9uZW50cz17Y29tcG9uZW50c30gbWR4VHlwZT1cIk1EWExheW91dFwiPlxuXG4gICAgPE1ldGEgdGl0bGU9XCIwIENob25reSBPdmVydmlld3xJbnN0YWxsYXRpb24gJmFtcDsgdXNhZ2VcIiBtZHhUeXBlPVwiTWV0YVwiIC8+XG4gICAgPENob25reUhlYWRlciBtZHhUeXBlPVwiQ2hvbmt5SGVhZGVyXCIgLz5cbiAgICA8aDEgey4uLntcbiAgICAgIFwiaWRcIjogXCJpbnN0YWxsYXRpb25cIlxuICAgIH19PntgSW5zdGFsbGF0aW9uYH08L2gxPlxuICAgIDxwPntgQWRkIENob25reSB0byB5b3VyIE5QTSBwcm9qZWN0OmB9PC9wPlxuICAgIDxwcmU+PGNvZGUgcGFyZW50TmFtZT1cInByZVwiIHsuLi57XG4gICAgICAgIFwiY2xhc3NOYW1lXCI6IFwibGFuZ3VhZ2Utc2hlbGxcIlxuICAgICAgfX0+e2BucG0gaW5zdGFsbCBjaG9ua3lcbmB9PC9jb2RlPjwvcHJlPlxuICAgIDxwPntgVGhlbiwgaW1wb3J0IHJlbGV2YW50IGNvbXBvbmVudHMgYW5kIHN0eWxlczpgfTwvcD5cbiAgICA8cHJlPjxjb2RlIHBhcmVudE5hbWU9XCJwcmVcIiB7Li4ue1xuICAgICAgICBcImNsYXNzTmFtZVwiOiBcImxhbmd1YWdlLWpzXCJcbiAgICAgIH19PntgaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xuaW1wb3J0IHsgRmlsZUJyb3dzZXIsIEZpbGVMaXN0IH0gZnJvbSAnY2hvbmt5JztcbmB9PC9jb2RlPjwvcHJlPlxuICAgIDxwPntgQW5kIHlvdSdyZSBnb29kIHRvIGdvISBDaGVjayBvdGhlciBzZWN0aW9ucyBpbiB0aGUgZG9jdW1lbnRhdGlvbiB0byBzZWUgaG93IENob25reVxuY29tcG9uZW50cyBjYW4gYmUgdXNlZC5gfTwvcD5cbiAgICA8aDMgey4uLntcbiAgICAgIFwiaWRcIjogXCJ1c2FnZS13aXRoLXR5cGVzY3JpcHRcIlxuICAgIH19PntgVXNhZ2Ugd2l0aCBUeXBlc2NyaXB0YH08L2gzPlxuICAgIDxwPntgQ2hvbmt5IHdhcyBidWlsdCB1c2luZyBUeXBlc2NyaXB0LiBBcyBzdWNoLCBtYW55IG9mIHRoZSBpbnRlcm5hbCB0eXBlcyBhbmQgaW50ZXJmYWNlc1xuYXJlIGV4cG9ydGVkLiBTb21lIHR5cGVzIGFyZSBnZW5lcmljLCB0byBtYWtlIGl0IGVhc2llciBmb3IgeW91IHRvIGludGVncmF0ZSBDaG9ua3lcbmludG8geW91IFR5cGVzY3JpcHQgcGFja2FnZS5gfTwvcD5cbiAgICA8cD57YElmIHlvdSdyZSBhbHNvIHVzaW5nIFR5cGVzY3JpcHQsIHlvdSBjYW4gYWRkIENob25reSB0eXBlcyB0byB5b3VyIHByb2plY3QgdXNpbmdcbnN0YW5kYXJkXG5pbXBvcnRzOmB9PC9wPlxuICAgIDxwcmU+PGNvZGUgcGFyZW50TmFtZT1cInByZVwiIHsuLi57XG4gICAgICAgIFwiY2xhc3NOYW1lXCI6IFwibGFuZ3VhZ2UtdHNcIlxuICAgICAgfX0+e2AvLyBGaWxlQXJyYXkgaXMgYSBUUyB0eXBlXG5pbXBvcnQgeyBGaWxlQXJyYXkgfSBmcm9tICdjaG9ua3knO1xuXG5jb25zdCBteUZpbGVzOiBGaWxlQXJyYXkgPSBbXG4gICAge1xuICAgICAgICBpZDogJ2FiRDMnLFxuICAgICAgICBuYW1lOiAnUkVBRE1FLnR4dCcsXG4gICAgfSxcbiAgICBudWxsLFxuXTtcbmB9PC9jb2RlPjwvcHJlPlxuICAgIDwvTURYTGF5b3V0Pjtcbn1cblxuO1xuTURYQ29udGVudC5pc01EWENvbXBvbmVudCA9IHRydWU7XG5cbmV4cG9ydCBjb25zdCBfX3BhZ2UgPSAoKSA9PiB7IHRocm93IG5ldyBFcnJvcihcIkRvY3Mtb25seSBzdG9yeVwiKTsgfTtcblxuX19wYWdlLnBhcmFtZXRlcnMgPSB7IGRvY3NPbmx5OiB0cnVlIH07XG5cbmNvbnN0IGNvbXBvbmVudE1ldGEgPSB7IHRpdGxlOiAnMCBDaG9ua3kgT3ZlcnZpZXd8SW5zdGFsbGF0aW9uICYgdXNhZ2UnLCBpbmNsdWRlU3RvcmllczogW1wiX19wYWdlXCJdLCAgfTtcblxuY29uc3QgbWR4U3RvcnlOYW1lVG9LZXkgPSB7fTtcblxuY29tcG9uZW50TWV0YS5wYXJhbWV0ZXJzID0gY29tcG9uZW50TWV0YS5wYXJhbWV0ZXJzIHx8IHt9O1xuY29tcG9uZW50TWV0YS5wYXJhbWV0ZXJzLmRvY3MgPSB7XG4gIC4uLihjb21wb25lbnRNZXRhLnBhcmFtZXRlcnMuZG9jcyB8fCB7fSksXG4gIHBhZ2U6ICgpID0+IDxBZGRDb250ZXh0IG1keFN0b3J5TmFtZVRvS2V5PXttZHhTdG9yeU5hbWVUb0tleX0gbWR4Q29tcG9uZW50TWV0YT17Y29tcG9uZW50TWV0YX0+PE1EWENvbnRlbnQgLz48L0FkZENvbnRleHQ+LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50TWV0YTsiLCJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IG1keCB9IGZyb20gJ0BtZHgtanMvcmVhY3QnXG5cbi8qIEBqc3ggbWR4ICovXG5pbXBvcnQgeyBhc3NlcnRJc0ZuLCBBZGRDb250ZXh0IH0gZnJvbSBcIkBzdG9yeWJvb2svYWRkb24tZG9jcy9ibG9ja3NcIjtcblxuaW1wb3J0IENob25reUhlYWRlciBmcm9tICcuLi9DaG9ua3ktaGVhZGVyLm1keCc7XG5cbmNvbnN0IG1ha2VTaG9ydGNvZGUgPSBuYW1lID0+IGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpIHtcbiAgY29uc29sZS53YXJuKFwiQ29tcG9uZW50IFwiICsgbmFtZSArIFwiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGVcIilcbiAgcmV0dXJuIDxkaXYgey4uLnByb3BzfS8+XG59O1xuY29uc3QgTWV0YSA9IG1ha2VTaG9ydGNvZGUoXCJNZXRhXCIpO1xuY29uc3QgbGF5b3V0UHJvcHMgPSB7XG4gIFxufTtcbmNvbnN0IE1EWExheW91dCA9IFwid3JhcHBlclwiXG5mdW5jdGlvbiBNRFhDb250ZW50KHtcbiAgY29tcG9uZW50cyxcbiAgLi4ucHJvcHNcbn0pIHtcbiAgcmV0dXJuIDxNRFhMYXlvdXQgey4uLmxheW91dFByb3BzfSB7Li4ucHJvcHN9IGNvbXBvbmVudHM9e2NvbXBvbmVudHN9IG1keFR5cGU9XCJNRFhMYXlvdXRcIj5cblxuICAgIDxNZXRhIHRpdGxlPVwiMCBDaG9ua3kgT3ZlcnZpZXd8SW1tdXRhYmlsaXR5XCIgbWR4VHlwZT1cIk1ldGFcIiAvPlxuICAgIDxDaG9ua3lIZWFkZXIgbWR4VHlwZT1cIkNob25reUhlYWRlclwiIC8+XG4gICAgPGgxIHsuLi57XG4gICAgICBcImlkXCI6IFwiaW1tdXRhYmlsaXR5LWluLWNob25reVwiXG4gICAgfX0+e2BJbW11dGFiaWxpdHkgaW4gQ2hvbmt5YH08L2gxPlxuICAgIDxwPntgVE9ETyBleHBsYWluOmB9PC9wPlxuICAgIDx1bD5cbiAgICAgIDxsaSBwYXJlbnROYW1lPVwidWxcIj57YENob25reSBhc3N1bWVzIGRhdGEgaXMgaW1tdXRhYmxlIHRvIGJlIHBlcmZvcm1hbnQuYH08L2xpPlxuICAgICAgPGxpIHBhcmVudE5hbWU9XCJ1bFwiPntgTGluayB0byBSZWR1eCBkb2NzLmB9PC9saT5cbiAgICAgIDxsaSBwYXJlbnROYW1lPVwidWxcIj57YEV4YW1wbGVzIG9mIGNvbW1vbiBiZWdpbm5lciBwcm9ibGVtcz9gfTwvbGk+XG4gICAgPC91bD5cbiAgICA8L01EWExheW91dD47XG59XG5cbjtcbk1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQgPSB0cnVlO1xuXG5leHBvcnQgY29uc3QgX19wYWdlID0gKCkgPT4geyB0aHJvdyBuZXcgRXJyb3IoXCJEb2NzLW9ubHkgc3RvcnlcIik7IH07XG5cbl9fcGFnZS5wYXJhbWV0ZXJzID0geyBkb2NzT25seTogdHJ1ZSB9O1xuXG5jb25zdCBjb21wb25lbnRNZXRhID0geyB0aXRsZTogJzAgQ2hvbmt5IE92ZXJ2aWV3fEltbXV0YWJpbGl0eScsIGluY2x1ZGVTdG9yaWVzOiBbXCJfX3BhZ2VcIl0sICB9O1xuXG5jb25zdCBtZHhTdG9yeU5hbWVUb0tleSA9IHt9O1xuXG5jb21wb25lbnRNZXRhLnBhcmFtZXRlcnMgPSBjb21wb25lbnRNZXRhLnBhcmFtZXRlcnMgfHwge307XG5jb21wb25lbnRNZXRhLnBhcmFtZXRlcnMuZG9jcyA9IHtcbiAgLi4uKGNvbXBvbmVudE1ldGEucGFyYW1ldGVycy5kb2NzIHx8IHt9KSxcbiAgcGFnZTogKCkgPT4gPEFkZENvbnRleHQgbWR4U3RvcnlOYW1lVG9LZXk9e21keFN0b3J5TmFtZVRvS2V5fSBtZHhDb21wb25lbnRNZXRhPXtjb21wb25lbnRNZXRhfT48TURYQ29udGVudCAvPjwvQWRkQ29udGV4dD4sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnRNZXRhOyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuY2hvbmt5LWZpbGwtcGFyZW50IHtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuXFxuLmNob25reS1uby1zZWxlY3Qge1xcbiAgLXdlYmtpdC10b3VjaC1jYWxsb3V0OiBub25lO1xcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXG59XFxuXFxuLmNob25reS1yb290IHtcXG4gIGJvcmRlcjogc29saWQgMXB4ICNlNGU0ZTQ7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBwYWRkaW5nOiA3LjVweDtcXG4gIHRvdWNoLWFjdGlvbjogbWFuaXB1bGF0aW9uO1xcbiAgZm9udC1zaXplOiAxNXB4O1xcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuXFxuLmNob25reS1lcnJvciB7XFxuICBib3JkZXI6IHNvbGlkIDFweCByZ2JhKDEwOCwgNzIsIDcyLCAwLjExKTtcXG4gIG1hcmdpbi1ib3R0b206IDcuNXB4O1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZkZWJlYjtcXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xcbiAgY29sb3I6ICM4ZTIxMjE7XFxuICBwYWRkaW5nOiAxZW07XFxufVxcbi5jaG9ua3ktZXJyb3ItbmFtZSB7XFxuICBvcGFjaXR5OiAwLjU7XFxufVxcbi5jaG9ua3ktZXJyb3IgdWwge1xcbiAgcGFkZGluZy10b3A6IDAuMWVtO1xcbiAgbWFyZ2luOiAwO1xcbn1cXG4uY2hvbmt5LWVycm9yIGxpIHtcXG4gIG1hcmdpbi10b3A6IDAuNWVtO1xcbn1cXG5cXG4uY2hvbmt5LXRvb2x0aXAge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4uY2hvbmt5LXRvb2x0aXA6aG92ZXI6OmJlZm9yZSwgLmNob25reS10b29sdGlwOmhvdmVyOjphZnRlciwgLmNob25reS10b29sdGlwOmZvY3VzOjpiZWZvcmUsIC5jaG9ua3ktdG9vbHRpcDpmb2N1czo6YWZ0ZXIsIC5jaG9ua3ktdG9vbHRpcDphY3RpdmU6OmJlZm9yZSwgLmNob25reS10b29sdGlwOmFjdGl2ZTo6YWZ0ZXIge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG4uY2hvbmt5LXRvb2x0aXA6OmJlZm9yZSwgLmNob25reS10b29sdGlwOjphZnRlciB7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDEwMG1zIGVhc2UtaW4tb3V0O1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBkaXNwbGF5OiBub25lO1xcbiAgei1pbmRleDogOTk5OTtcXG4gIGJvdHRvbTogMTAwJTtcXG4gIG9wYWNpdHk6IDA7XFxuICBsZWZ0OiA1MCU7XFxufVxcbi5jaG9ua3ktdG9vbHRpcDo6YmVmb3JlIHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNzUlKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44KTtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIGNvbnRlbnQ6IGF0dHIoZGF0YS10b29sdGlwKTtcXG4gIHBhZGRpbmc6IDAuNGVtIDAuNWVtO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIG1hcmdpbi1ib3R0b206IDZweDtcXG4gIGxpbmUtaGVpZ2h0OiAxZW07XFxuICBjb2xvcjogI2ZmZjtcXG4gIGZvbnQtc2l6ZTogMC44ZW07XFxuICBoZWlnaHQ6IDFlbTtcXG59XFxuLmNob25reS10b29sdGlwOjphZnRlciB7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgcm90YXRlKDQ1ZGVnKTtcXG4gIGJvcmRlcjogc29saWQgMnB4IHJnYmEoMCwgMCwgMCwgMC44KTtcXG4gIGJvcmRlci1sZWZ0LWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci10b3AtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgbWFyZ2luLWJvdHRvbTogNHB4O1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxufVxcblxcbi5jaG9ua3ktdGV4dC1wbGFjZWhvbGRlciB7XFxuICAtd2Via2l0LWFuaW1hdGlvbjogbG9hZGluZy1wbGFjZWhvbGRlciAxLjVzIGluZmluaXRlIGxpbmVhcjtcXG4gIGFuaW1hdGlvbjogbG9hZGluZy1wbGFjZWhvbGRlciAxLjVzIGluZmluaXRlIGxpbmVhcjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNjY2M7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIG1pbi13aWR0aDogMjBweDtcXG4gIG1heC13aWR0aDogNDAlO1xcbn1cXG5ALXdlYmtpdC1rZXlmcmFtZXMgbG9hZGluZy1wbGFjZWhvbGRlciB7XFxuICAwJSB7XFxuICAgIG9wYWNpdHk6IDAuMjtcXG4gIH1cXG4gIDUwJSB7XFxuICAgIG9wYWNpdHk6IDAuNDtcXG4gIH1cXG4gIDEwMCUge1xcbiAgICBvcGFjaXR5OiAwLjI7XFxuICB9XFxufVxcbkBrZXlmcmFtZXMgbG9hZGluZy1wbGFjZWhvbGRlciB7XFxuICAwJSB7XFxuICAgIG9wYWNpdHk6IDAuMjtcXG4gIH1cXG4gIDUwJSB7XFxuICAgIG9wYWNpdHk6IDAuNDtcXG4gIH1cXG4gIDEwMCUge1xcbiAgICBvcGFjaXR5OiAwLjI7XFxuICB9XFxufVxcblxcbi5jaG9ua3ktdG9vbGJhciB7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBmbGV4LXdyYXA6IHdyYXAtcmV2ZXJzZTtcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG4uY2hvbmt5LXRvb2xiYXItc2lkZSB7XFxuICBtYXJnaW4tYm90dG9tOiA3LjVweDtcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICBwYWRkaW5nLWJvdHRvbTogMDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWdyb3c6IDE7XFxufVxcbi5jaG9ua3ktdG9vbGJhci1zaWRlLWxlZnQge1xcbiAgZmxleC1ncm93OiAxMDAwMDtcXG59XFxuLmNob25reS10b29sYmFyLXNpZGUtcmlnaHQge1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbn1cXG4uY2hvbmt5LXRvb2xiYXItc2lkZS1pbnNpZGUge1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcbi5jaG9ua3ktdG9vbGJhci1zaWRlLWluc2lkZSA+ICoge1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDAwcHgpIHtcXG4gIC5jaG9ua3ktdG9vbGJhciB7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4tcmV2ZXJzZTtcXG4gIH1cXG4gIC5jaG9ua3ktc2lkZS1yaWdodCB7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIH1cXG59XFxuLmNob25reS1mb2xkZXItY2hhaW4tZW50cnksIC5jaG9ua3ktZm9sZGVyLWNoYWluLXNlcGFyYXRvciB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG4uY2hvbmt5LWZvbGRlci1jaGFpbi1lbnRyeSB7XFxuICBiYWNrZ3JvdW5kOiBub25lO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgY29sb3I6IGluaGVyaXQ7XFxuICBmb250OiBpbmhlcml0O1xcbiAgYm9yZGVyOiBub25lO1xcbiAgcGFkZGluZzogMDtcXG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMTAwbXMgZWFzZS1pbi1vdXQ7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBib3JkZXI6IHNvbGlkIDFweCB0cmFuc3BhcmVudDtcXG4gIGxpbmUtaGVpZ2h0OiAyOHB4O1xcbiAgcGFkZGluZzogMCAwLjNlbSAhaW1wb3J0YW50O1xcbiAgaGVpZ2h0OiAyOHB4O1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDAwcHgpIHtcXG4gIC5jaG9ua3ktZm9sZGVyLWNoYWluLWVudHJ5IHtcXG4gICAgbGluZS1oZWlnaHQ6IDEuN2VtO1xcbiAgICBoZWlnaHQ6IDEuN2VtO1xcbiAgfVxcbn1cXG4uY2hvbmt5LWZvbGRlci1jaGFpbi1lbnRyeTpsYXN0LWNoaWxkIC5jaG9ua3ktZm9sZGVyLWNoYWluLWVudHJ5LW5hbWUge1xcbiAgLXdlYmtpdC10ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSAjYmJiO1xcbiAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSAjYmJiO1xcbn1cXG4uY2hvbmt5LWZvbGRlci1jaGFpbi1lbnRyeS5jaG9ua3ktbG9hZGluZyB7XFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxuICBjb2xvcjogI2JiYjtcXG59XFxuZGl2LmNob25reS1mb2xkZXItY2hhaW4tZW50cnkge1xcbiAgY3Vyc29yOiBkZWZhdWx0O1xcbn1cXG5cXG5idXR0b24uY2hvbmt5LWZvbGRlci1jaGFpbi1lbnRyeTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmNWY1O1xcbn1cXG5idXR0b24uY2hvbmt5LWZvbGRlci1jaGFpbi1lbnRyeTphY3RpdmUge1xcbiAgYm9yZGVyLWNvbG9yOiAjY2NjO1xcbn1cXG5cXG4uY2hvbmt5LWZvbGRlci1jaGFpbi1zZXBhcmF0b3Ige1xcbiAgbGluZS1oZWlnaHQ6IDI4cHg7XFxuICBoZWlnaHQ6IDI4cHg7XFxuICBjb2xvcjogI2JiYjtcXG4gIHBhZGRpbmc6IDAgMC4xZW07XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQwMHB4KSB7XFxuICAuY2hvbmt5LWZvbGRlci1jaGFpbi1zZXBhcmF0b3Ige1xcbiAgICBsaW5lLWhlaWdodDogMS43ZW07XFxuICAgIGhlaWdodDogMS43ZW07XFxuICAgIHBhZGRpbmc6IDAgMC4xZW07XFxuICB9XFxufVxcblxcbi5jaG9ua3ktdG9vbGJhci1idXR0b24tZ3JvdXAgLmNob25reS10b29sYmFyLWJ1dHRvbiB7XFxuICBib3JkZXItcmFkaXVzOiAwO1xcbn1cXG4uY2hvbmt5LXRvb2xiYXItYnV0dG9uLWdyb3VwIC5jaG9ua3ktdG9vbGJhci1idXR0b246Zmlyc3Qtb2YtdHlwZSB7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiA0cHg7XFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiA0cHg7XFxufVxcbi5jaG9ua3ktdG9vbGJhci1idXR0b24tZ3JvdXAgLmNob25reS10b29sYmFyLWJ1dHRvbjpsYXN0LW9mLXR5cGUge1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDRweDtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiA0cHg7XFxufVxcbi5jaG9ua3ktdG9vbGJhci1idXR0b24tZ3JvdXAgLmNob25reS10b29sYmFyLWJ1dHRvbjpmb2N1cyB7XFxuICB6LWluZGV4OiAxNTtcXG59XFxuLmNob25reS10b29sYmFyLWJ1dHRvbi1ncm91cCAuY2hvbmt5LXRvb2xiYXItYnV0dG9uOm5vdCg6Zmlyc3QtY2hpbGQpIHtcXG4gIG1hcmdpbi1sZWZ0OiAtMXB4O1xcbn1cXG5cXG4uY2hvbmt5LXRvb2xiYXItYnV0dG9uIHtcXG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMTAwbXMgZWFzZS1pbi1vdXQ7XFxuICBiYWNrZ3JvdW5kOiBub25lO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgY29sb3I6IGluaGVyaXQ7XFxuICBmb250OiBpbmhlcml0O1xcbiAgYm9yZGVyOiBub25lO1xcbiAgcGFkZGluZzogMDtcXG4gIGxpbmUtaGVpZ2h0OiAyNnB4O1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgYm9yZGVyOiBzb2xpZCAxcHggdHJhbnNwYXJlbnQ7XFxuICBtaW4td2lkdGg6IDI4cHg7XFxuICBoZWlnaHQ6IDI4cHg7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB6LWluZGV4OiAxMDtcXG59XFxuLmNob25reS10b29sYmFyLWJ1dHRvbi1pY29uLCAuY2hvbmt5LXRvb2xiYXItYnV0dG9uLXRleHQge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG4uY2hvbmt5LXRvb2xiYXItYnV0dG9uLWljb24ge1xcbiAgbWluLXdpZHRoOiAyOHB4O1xcbn1cXG4uY2hvbmt5LXRvb2xiYXItYnV0dG9uLXRleHQge1xcbiAgcGFkZGluZy1yaWdodDogMTBweDtcXG4gIHBhZGRpbmctbGVmdDogMTBweDtcXG59XFxuLmNob25reS10b29sYmFyLWJ1dHRvbi1pY29uICsgLmNob25reS10b29sYmFyLWJ1dHRvbi10ZXh0IHtcXG4gIHBhZGRpbmctbGVmdDogMCAhaW1wb3J0YW50O1xcbn1cXG4uY2hvbmt5LXRvb2xiYXItYnV0dG9uLXRleHQgKyAuY2hvbmt5LXRvb2xiYXItYnV0dG9uLWljb24ge1xcbiAgbWFyZ2luLWxlZnQ6IC0xMHB4ICFpbXBvcnRhbnQ7XFxufVxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQwMHB4KSB7XFxuICAuY2hvbmt5LXRvb2xiYXItYnV0dG9uIHtcXG4gICAgbGluZS1oZWlnaHQ6IDEuN2VtO1xcbiAgICBtaW4td2lkdGg6IDEuN2VtO1xcbiAgICBoZWlnaHQ6IDEuN2VtO1xcbiAgfVxcbiAgLmNob25reS10b29sYmFyLWJ1dHRvbi1pY29uIHtcXG4gICAgbWluLXdpZHRoOiAxLjdlbTtcXG4gIH1cXG59XFxuLmNob25reS10b29sYmFyLWJ1dHRvbi5jaG9ua3ktYWN0aXZlIHtcXG4gIGNvbG9yOiAjMDlmO1xcbiAgei1pbmRleDogOTM7XFxufVxcbi5jaG9ua3ktdG9vbGJhci1idXR0b246aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjVmNTtcXG4gIHotaW5kZXg6IDkyO1xcbn1cXG4uY2hvbmt5LXRvb2xiYXItYnV0dG9uOmFjdGl2ZSB7XFxuICBib3JkZXItY29sb3I6ICNjY2M7XFxufVxcbi5jaG9ua3ktdG9vbGJhci1idXR0b24gPiBzcGFuIHtcXG4gIHBhZGRpbmc6IDZweDtcXG4gIGJvcmRlci1jb2xvcjogI2NjYztcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxufVxcbi5jaG9ua3ktdG9vbGJhci1idXR0b25bZGlzYWJsZWRdIHtcXG4gIGNvbG9yOiAjYmJiICFpbXBvcnRhbnQ7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuXFxuLmNob25reS10b29sYmFyLWRyb3Bkb3duIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLmNob25reS10b29sYmFyLWRyb3Bkb3duIC5jaG9ua3ktdG9vbGJhci1idXR0b24taWNvbiB7XFxuICBmb250LXNpemU6IDAuOGVtO1xcbn1cXG4uY2hvbmt5LXRvb2xiYXItZHJvcGRvd24tY29udGVudCB7XFxuICBtYXJnaW4tdG9wOiAyLjVweDtcXG4gIGJvcmRlcjogc29saWQgMXB4ICNjY2M7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICB6LWluZGV4OiA3MDtcXG4gIHJpZ2h0OiAwO1xcbn1cXG4uY2hvbmt5LXRvb2xiYXItZHJvcGRvd24tYnV0dG9uIHtcXG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMTAwbXMgZWFzZS1pbi1vdXQ7XFxuICBiYWNrZ3JvdW5kOiBub25lO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgY29sb3I6IGluaGVyaXQ7XFxuICBmb250OiBpbmhlcml0O1xcbiAgYm9yZGVyOiBub25lO1xcbiAgcGFkZGluZzogMDtcXG4gIGxpbmUtaGVpZ2h0OiAyOS45cHg7XFxuICBib3JkZXItYm90dG9tOiBzb2xpZCAxcHggI2NjYztcXG4gIGhlaWdodDogMzIuMnB4O1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG4uY2hvbmt5LXRvb2xiYXItZHJvcGRvd24tYnV0dG9uLWljb24ge1xcbiAgcGFkZGluZy1sZWZ0OiA3LjVweDtcXG4gIG9wYWNpdHk6IDAuNTtcXG59XFxuLmNob25reS10b29sYmFyLWRyb3Bkb3duLWJ1dHRvbi10ZXh0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDcuNXB4O1xcbiAgcGFkZGluZy1sZWZ0OiA3LjVweDtcXG59XFxuLmNob25reS10b29sYmFyLWRyb3Bkb3duLWJ1dHRvbltkaXNhYmxlZF0ge1xcbiAgY29sb3I6ICNiYmIgIWltcG9ydGFudDtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG4uY2hvbmt5LXRvb2xiYXItZHJvcGRvd24tYnV0dG9uOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7XFxufVxcblxcbi5jaG9ua3ktZmlsZS1zZWFyY2gge1xcbiAgbWFyZ2luLWJvdHRvbTogNy41cHg7XFxuICBtYXJnaW4tdG9wOiAtNy41cHg7XFxufVxcbi5jaG9ua3ktZmlsZS1zZWFyY2gtaW5wdXQtZ3JvdXAgbGFiZWwsXFxuLmNob25reS1maWxlLXNlYXJjaC1pbnB1dC1ncm91cCBpbnB1dCB7XFxuICBsaW5lLWhlaWdodDogMjZweDtcXG4gIGhlaWdodDogMjhweDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xcbiAgZm9udC1zaXplOiBpbmhlcml0O1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG59XFxuLmNob25reS1maWxlLXNlYXJjaC1pbnB1dC1ncm91cCBsYWJlbCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIHBhZGRpbmc6IDAgNXB4O1xcbiAgY29sb3I6ICM2NjY7XFxuICBtYXJnaW46IDFweCAwIDAgMnB4O1xcbiAgYm9yZGVyLXJpZ2h0OiBub25lO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbn1cXG4uY2hvbmt5LWZpbGUtc2VhcmNoLWlucHV0LWdyb3VwIGlucHV0IHtcXG4gIHBhZGRpbmctbGVmdDogMzBweDtcXG4gIGJvcmRlcjogc29saWQgMXB4ICNlNGU0ZTQ7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBwYWRkaW5nLXJpZ2h0OiA1cHg7XFxufVxcblxcbi5jaG9ua3ktZmlsZS1saXN0IHtcXG4gIGZsZXg6IDEgMTtcXG59XFxuLmNob25reS1maWxlLWxpc3Qtbm90aWZpY2F0aW9uIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLmNob25reS1maWxlLWxpc3Qtbm90aWZpY2F0aW9uLWVtcHR5IHtcXG4gIGNvbG9yOiAjYmJiO1xcbiAgZm9udC1zaXplOiAxLjJlbTtcXG59XFxuLmNob25reS1maWxlLWxpc3Qtbm90aWZpY2F0aW9uLWNvbnRlbnQge1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpIHRyYW5zbGF0ZVkoLTUwJSk7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBsZWZ0OiA1MCU7XFxuICB0b3A6IDUwJTtcXG59XFxuXFxuLmNob25reS1maWxlLWVudHJ5LWNsaWNrYWJsZS13cmFwcGVyIHtcXG4gIG91dGxpbmU6IG5vbmUgIWltcG9ydGFudDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLmNob25reS1maWxlLWVudHJ5LWNsaWNrYWJsZS13cmFwcGVyOmZvY3VzIC5jaG9ua3ktZmlsZS1lbnRyeS1pbnNpZGU6YmVmb3JlIHtcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMCAwIDJweCAjMDAwICFpbXBvcnRhbnQ7XFxufVxcbi5jaG9ua3ktZmlsZS1lbnRyeS1jbGlja2FibGUtd3JhcHBlcjpmb2N1cyAuY2hvbmt5LWZpbGUtZW50cnktZGVzY3JpcHRpb24ge1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogIzAwMCAhaW1wb3J0YW50O1xcbn1cXG4uY2hvbmt5LWZpbGUtZW50cnktY2xpY2thYmxlLXdyYXBwZXI6Zm9jdXMgLmNob25reS1maWxlLWljb24taW5zaWRlIHtcXG4gIGNvbG9yOiAjMDAwO1xcbn1cXG5cXG4uY2hvbmt5LWZpbGUtZHJhZy1wcmV2aWV3IHtcXG4gIHBhZGRpbmc6IDcuNXB4IDEwcHg7XFxuICBib3gtc2hhZG93OiAycHggMnB4IDVweCAjODg4O1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgYm9yZGVyOiBzb2xpZCAycHggIzA5ZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblxcbi5jaG9ua3ktZmlsZS1lbnRyeSB7XFxuICBib3JkZXI6IHNvbGlkIDFweCAjZTRlNGU0O1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBoZWlnaHQ6IDEwMCU7XFxufVxcbi5jaG9ua3ktZmlsZS1lbnRyeS1pbnNpZGUge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG4uY2hvbmt5LWZpbGUtZW50cnktaW5zaWRlOmJlZm9yZSB7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHotaW5kZXg6IDk5OTtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgYm90dG9tOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBsZWZ0OiAwO1xcbiAgdG9wOiAwO1xcbn1cXG4uY2hvbmt5LWZpbGUtZW50cnktZG5kLWluZGljYXRvciB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgZm9udC1zaXplOiAxLjJlbTtcXG4gIG9wYWNpdHk6IDAuNjtcXG4gIHBhZGRpbmc6IDZweDtcXG4gIHotaW5kZXg6IDgwO1xcbiAgbGVmdDogMXB4O1xcbiAgdG9wOiAxcHg7XFxufVxcbi5jaG9ua3ktZmlsZS1lbnRyeS1kbmQtaW5kaWNhdG9yOmJlZm9yZSB7XFxuICBib3JkZXItYm90dG9tOiA1MHB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWxlZnQ6IDUwcHggc29saWQgI2ZmZjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgei1pbmRleDogLTE7XFxuICBoZWlnaHQ6IDA7XFxuICB3aWR0aDogMDtcXG4gIGxlZnQ6IDA7XFxuICB0b3A6IDA7XFxufVxcbi5jaG9ua3ktZmlsZS1lbnRyeS1wcmV2aWV3IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgZmxleC1ncm93OiAxO1xcbn1cXG4uY2hvbmt5LWZpbGUtZW50cnktZGVzY3JpcHRpb24ge1xcbiAgYm9yZGVyLXRvcDogc29saWQgMnB4IHRyYW5zcGFyZW50O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIHBhZGRpbmc6IDNweCA1cHggNXB4IDVweDtcXG59XFxuLmNob25reS1maWxlLWVudHJ5LXNlbGVjdGVkIC5jaG9ua3ktZmlsZS1lbnRyeS1pbnNpZGU6YmVmb3JlIHtcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMCAwIDJweCAjMzNhZGZmICFpbXBvcnRhbnQ7XFxufVxcbi5jaG9ua3ktZmlsZS1lbnRyeS1zZWxlY3RlZCAuY2hvbmt5LWZpbGUtZW50cnktZGVzY3JpcHRpb24ge1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogIzMzYWRmZiAhaW1wb3J0YW50O1xcbn1cXG4uY2hvbmt5LWZpbGUtZW50cnktc2VsZWN0ZWQgLmNob25reS1maWxlLXNlbGVjdGlvbiB7XFxuICBvcGFjaXR5OiAxICFpbXBvcnRhbnQ7XFxufVxcbi5jaG9ua3ktZmlsZS1lbnRyeS1kcmFnZ2luZyAuY2hvbmt5LWZpbGUtYmFja2dyb3VuZCB7XFxuICBvcGFjaXR5OiAwLjMgIWltcG9ydGFudDtcXG59XFxuLmNob25reS1maWxlLWVudHJ5LWRyb3AtaG92ZXJlZCAuY2hvbmt5LWZpbGUtYmFja2dyb3VuZCB7XFxuICBvcGFjaXR5OiAxICFpbXBvcnRhbnQ7XFxufVxcblxcbi5jaG9ua3ktZmlsZS1pY29uLCAuY2hvbmt5LWZpbGUtc2VsZWN0aW9uLCAuY2hvbmt5LWZpbGUtdGh1bWJuYWlsLCAuY2hvbmt5LWZpbGUtYmFja2dyb3VuZCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGhlaWdodDogMTAwJTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgbGVmdDogMDtcXG4gIHRvcDogMDtcXG59XFxuLmNob25reS1maWxlLWljb24ge1xcbiAgei1pbmRleDogNDA7XFxufVxcbi5jaG9ua3ktZmlsZS1pY29uLWluc2lkZSB7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGZvbnQtc2l6ZTogMi4yZW07XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGNvbG9yOiAjZmZmO1xcbiAgbGVmdDogNTAlO1xcbiAgdG9wOiA1MCU7XFxufVxcbi5jaG9ua3ktZmlsZS1zZWxlY3Rpb24ge1xcbiAgei1pbmRleDogMzA7XFxuICBiYWNrZ3JvdW5kOiByZXBlYXRpbmctbGluZWFyLWdyYWRpZW50KDQ1ZGVnLCByZ2JhKDAsIDE1MywgMjU1LCAwLjE0KSwgcmdiYSgwLCAxNTMsIDI1NSwgMC4xNCkgMTBweCwgcmdiYSgwLCAxNTMsIDI1NSwgMC4yKSAxMHB4LCByZ2JhKDAsIDE1MywgMjU1LCAwLjIpIDIwcHgpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAxNTMsIDI1NSwgMC4xNCk7XFxuICBvcGFjaXR5OiAwO1xcbn1cXG4uY2hvbmt5LWZpbGUtdGh1bWJuYWlsIHtcXG4gIHotaW5kZXg6IDIwO1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAxMDBtcyBlYXNlLWluLW91dDtcXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XFxuICBiYWNrZ3JvdW5kLXNpemU6IGNvbnRhaW47XFxuICBvcGFjaXR5OiAxO1xcbn1cXG4uY2hvbmt5LWZpbGUtdGh1bWJuYWlsLWhpZGRlbiB7XFxuICBvcGFjaXR5OiAwO1xcbn1cXG4uY2hvbmt5LWZpbGUtYmFja2dyb3VuZCB7XFxuICB6LWluZGV4OiAxMDtcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMTAwbXMgZWFzZS1pbi1vdXQ7XFxuICBvcGFjaXR5OiAwLjU7XFxufVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIjFJdWNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJmUlYxXCIpOyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMTItMSEuLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9wb3N0Y3NzIS4vbWFpbi5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIlxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgbWR4IH0gZnJvbSAnQG1keC1qcy9yZWFjdCdcblxuLyogQGpzeCBtZHggKi9cblxuXG5jb25zdCBtYWtlU2hvcnRjb2RlID0gbmFtZSA9PiBmdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKSB7XG4gIGNvbnNvbGUud2FybihcIkNvbXBvbmVudCBcIiArIG5hbWUgKyBcIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlXCIpXG4gIHJldHVybiA8ZGl2IHsuLi5wcm9wc30vPlxufTtcblxuY29uc3QgbGF5b3V0UHJvcHMgPSB7XG4gIFxufTtcbmNvbnN0IE1EWExheW91dCA9IFwid3JhcHBlclwiXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KHtcbiAgY29tcG9uZW50cyxcbiAgLi4ucHJvcHNcbn0pIHtcbiAgcmV0dXJuIDxNRFhMYXlvdXQgey4uLmxheW91dFByb3BzfSB7Li4ucHJvcHN9IGNvbXBvbmVudHM9e2NvbXBvbmVudHN9IG1keFR5cGU9XCJNRFhMYXlvdXRcIj5cbiAgICA8ZGl2IHN0eWxlPXt7XG4gICAgICB0ZXh0QWxpZ246ICdjZW50ZXInXG4gICAgfX0+XG4gICAgPGltZyBzcmM9XCIuL0Nob25reV9jbGVhci5wbmdcIiBhbHQ9XCJDaG9ua3kgbG9nb1wiIHN0eWxlPXt7XG4gICAgICAgIHdpZHRoOiA1MDBcbiAgICAgIH19IC8+XG4gICAgPGJyIC8+XG4gICAgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2Nob25reVwiIHRhcmdldD1cIl9ibGFua1wiPlxuICAgICAgICA8aW1nIGFsdD1cIk5QTSBwYWNrYWdlXCIgc3JjPVwiaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9ucG0vdi9jaG9ua3kuc3ZnXCIgLz5cbiAgICA8L2E+XG4gICAgPGEgaHJlZj1cImh0dHBzOi8vdGxkcmxlZ2FsLmNvbS9saWNlbnNlL21pdC1saWNlbnNlXCIgc3R5bGU9e3tcbiAgICAgICAgbWFyZ2luTGVmdDogNVxuICAgICAgfX0gdGFyZ2V0PVwiX2JsYW5rXCI+XG4gICAgICAgIDxpbWcgYWx0PVwiTUlUIGxpY2Vuc2VcIiBzcmM9XCJodHRwczovL2ltZy5zaGllbGRzLmlvL25wbS9sL2Nob25reVwiIC8+XG4gICAgPC9hPlxuICAgIDxhIGhyZWY9XCJodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9jaG9ua3lcIiBzdHlsZT17e1xuICAgICAgICBtYXJnaW5MZWZ0OiA1XG4gICAgICB9fSB0YXJnZXQ9XCJfYmxhbmtcIj5cbiAgICAgICAgPGltZyBhbHQ9XCJOUE0gZG93bmxvYWRzXCIgc3JjPVwiaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9ucG0vZHQvY2hvbmt5XCIgLz5cbiAgICA8L2E+XG4gICAgPGEgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9UaW1ib0taL0Nob25reVwiIHN0eWxlPXt7XG4gICAgICAgIG1hcmdpbkxlZnQ6IDVcbiAgICAgIH19IHRhcmdldD1cIl9ibGFua1wiPlxuICAgICAgICA8aW1nIGFsdD1cIkdpdEh1YiBzdGFyc1wiIHNyYz1cImh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZ2l0aHViL3N0YXJzL1RpbWJvS1ovQ2hvbmt5XCIgLz5cbiAgICA8L2E+XG4gICAgPGEgaHJlZj1cImh0dHBzOi8vZGlzY29yZC5nZy80SEphRm45XCIgc3R5bGU9e3tcbiAgICAgICAgbWFyZ2luTGVmdDogNVxuICAgICAgfX0gdGFyZ2V0PVwiX2JsYW5rXCI+XG4gICAgICAgIDxpbWcgYWx0PVwiQ2hhdCBvbiBEaXNjb3JkXCIgc3JjPVwiaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9kaXNjb3JkLzY5NjAzMzYyMTk4Njc3MDk1Nz9sYWJlbD1DaGF0JTIwb24lMjBEaXNjb3JkXCIgLz5cbiAgICA8L2E+XG4gICAgPGJyIC8+XG4gICAgPGJyIC8+XG4gICAgPGJyIC8+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInVuc3RhYmxlLXdhcm5pbmdcIj5cbiAgICAgIDxibG9ja3F1b3RlPlxuICAgICAgICA8cCBwYXJlbnROYW1lPVwiYmxvY2txdW90ZVwiPjxzdHJvbmcgcGFyZW50TmFtZT1cInBcIj57YFN0b3AgcmlnaHQgdGhlcmUhYH08L3N0cm9uZz48L3A+XG4gICAgICAgIDxwIHBhcmVudE5hbWU9XCJibG9ja3F1b3RlXCI+e2BZb3UgYXJlIHJlYWRpbmcgdGhlIGRvY3VtZW50YXRpb24gZm9yIGFuIGB9PHN0cm9uZyBwYXJlbnROYW1lPVwicFwiPntgdW5yZWxlYXNlZGB9PC9zdHJvbmc+e2AgMS54XG52ZXJzaW9uIG9mIENob25reS4gVGhlIEFQSSBkZXNjcmliZWQgaGVyZSBjYW4gY2hhbmdlIC0gaXQgd2lsbCBub3QgYmVcbmZyb3plbiB1bnRpbCB0aGUgb2ZmaWNpYWwgMS54IHJlbGVhc2UuYH08L3A+XG4gICAgICAgIDxwIHBhcmVudE5hbWU9XCJibG9ja3F1b3RlXCI+e2BJZiB5b3UgbmVlZCB0byB1c2UgQ2hvbmt5IHJpZ2h0IG5vdywgdXNlIHRoZSAwLnggdmVyc2lvbiBmcm9tIHRoZVxuYH08YSBwYXJlbnROYW1lPVwicFwiIHsuLi57XG4gICAgICAgICAgICBcImhyZWZcIjogXCJodHRwczovL3RpbWJva3ouZ2l0aHViLmlvL0Nob25reS9cIixcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IFwiX2JsYW5rXCIsXG4gICAgICAgICAgICBcInJlbFwiOiBcIm5vZm9sbG93IG5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgIH19PntgRG9jdW1lbnRhdGlvbiBJbmRleGB9PC9hPntgLmB9PC9wPlxuICAgICAgICA8cCBwYXJlbnROYW1lPVwiYmxvY2txdW90ZVwiPjxzdHJvbmcgcGFyZW50TmFtZT1cInBcIj57YFdhbnQgdG8gcmVxdWVzdCBhIGZlYXR1cmUgZm9yIDEueCBvciByZXBvcnQgYSAxLnggaXNzdWU/YH08L3N0cm9uZz57YCBQb3N0IGl0IGluXG5gfTxhIHBhcmVudE5hbWU9XCJwXCIgey4uLntcbiAgICAgICAgICAgIFwiaHJlZlwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9UaW1ib0taL0Nob25reS9pc3N1ZXNcIixcbiAgICAgICAgICAgIFwidGFyZ2V0XCI6IFwiX2JsYW5rXCIsXG4gICAgICAgICAgICBcInJlbFwiOiBcIm5vZm9sbG93IG5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgIH19PntgQ2hvbmt5IEdpdEh1YiBpc3N1ZXNgfTwvYT57YC5gfTwvcD5cbiAgICAgIDwvYmxvY2txdW90ZT5cbiAgICA8L2Rpdj5cbiAgICA8L01EWExheW91dD47XG59XG5cbjtcbk1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQgPSB0cnVlOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiK0tYT1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcImhCcEdcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJaVmtCXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwieDR0MFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIkxKT3JcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJpN0tuXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwibVBPU1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcImY0cDdcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJ6bkdaXCIpOyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMTItMSEuLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9wb3N0Y3NzIS4vc3Rvcnlib29rLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5zYmRvY3MtY29udGVudCAuc2Jkb2NzLXAsIC5zYmRvY3MtY29udGVudCAuc2Jkb2NzLXAgKixcXG4uc2Jkb2NzLWNvbnRlbnQgLnNiZG9jcy11bCxcXG4uc2Jkb2NzLWNvbnRlbnQgLnNiZG9jcy11bCAqLFxcbi5zYmRvY3MtY29udGVudCAuc2Jkb2NzLW9sLFxcbi5zYmRvY3MtY29udGVudCAuc2Jkb2NzLW9sICoge1xcbiAgbGluZS1oZWlnaHQ6IDI1cHggIWltcG9ydGFudDtcXG4gIGZvbnQtc2l6ZTogMTdweCAhaW1wb3J0YW50O1xcbn1cXG4uc2Jkb2NzLWNvbnRlbnQgLnNiZG9jcy1wIGNvZGUsXFxuLnNiZG9jcy1jb250ZW50IC5zYmRvY3MtdWwgY29kZSxcXG4uc2Jkb2NzLWNvbnRlbnQgLnNiZG9jcy1vbCBjb2RlIHtcXG4gIHBhZGRpbmc6IDAgNXB4ICFpbXBvcnRhbnQ7XFxuICBmb250LXNpemU6IDE0cHggIWltcG9ydGFudDtcXG59XFxuLnNiZG9jcy1jb250ZW50IC5zYmRvY3MtaDIge1xcbiAgbWFyZ2luLXRvcDogNDBweCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uc2Jkb2NzLXByZXZpZXcge1xcbiAgYm9yZGVyOiBzb2xpZCAzcHggIzA5ZiAhaW1wb3J0YW50O1xcbiAgbWFyZ2luOiA1MHB4IDAgNDBweCAwICFpbXBvcnRhbnQ7XFxuICBib3JkZXItcmFkaXVzOiAzcHggIWltcG9ydGFudDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZSAhaW1wb3J0YW50O1xcbiAgb3ZlcmZsb3c6IHZpc2libGUgIWltcG9ydGFudDtcXG59XFxuLnNiZG9jcy1wcmV2aWV3OmJlZm9yZSB7XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogM3B4O1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogM3B4O1xcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxuICBjb250ZW50OiBcXFwiTGl2ZSBFeGFtcGxlXFxcIjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwOWY7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBtYXJnaW4tbGVmdDogLTNweDtcXG4gIG1hcmdpbi10b3A6IC0yNXB4O1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBsaW5lLWhlaWdodDogMjVweDtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIHBhZGRpbmc6IDAgOHB4O1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBoZWlnaHQ6IDI1cHg7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLnNiZG9jcy1wcmV2aWV3ID4gZGl2OmZpcnN0LWNoaWxkID4gZGl2OmZpcnN0LWNoaWxkIHtcXG4gIHBhZGRpbmc6IDEwcHggMTBweCAzMHB4IDEwcHggIWltcG9ydGFudDtcXG4gIG1hcmdpbjogMCAhaW1wb3J0YW50O1xcbiAgb3ZlcmZsb3c6IHZpc2libGUgIWltcG9ydGFudDtcXG59XFxuXFxuLm5vdHlfYmFyIHtcXG4gIGxpbmUtaGVpZ2h0OiAyNHB4O1xcbn1cXG4ubm90eV9iYXIgY29kZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyk7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBsaW5lLWhlaWdodDogMjBweDtcXG4gIHBhZGRpbmc6IDAgNHB4O1xcbn1cXG5cXG4udW5zdGFibGUtd2FybmluZyBibG9ja3F1b3RlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZGUwZTA7XFxuICBib3JkZXItY29sb3I6ICM5ZTA4MDg7XFxuICBtYXJnaW4tYm90dG9tOiA0MHB4O1xcbiAgcGFkZGluZzogMjBweCAzMHB4O1xcbn1cXG5cXG4ubGl2ZS1leGFtcGxlLWFjdGlvbiB7XFxuICBmb250LWZhbWlseTogc2Fucy1zZXJpZiAhaW1wb3J0YW50O1xcbiAgZm9udC1zaXplOiAxLjJlbSAhaW1wb3J0YW50O1xcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGNvbG9yOiAjNWYwNzA3O1xcbn1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCI3bm1UXCIpOyIsIlxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgbWR4IH0gZnJvbSAnQG1keC1qcy9yZWFjdCdcblxuLyogQGpzeCBtZHggKi9cbmltcG9ydCB7IGFzc2VydElzRm4sIEFkZENvbnRleHQgfSBmcm9tIFwiQHN0b3J5Ym9vay9hZGRvbi1kb2NzL2Jsb2Nrc1wiO1xuXG5pbXBvcnQgQ2hvbmt5SGVhZGVyIGZyb20gJy4uL0Nob25reS1oZWFkZXIubWR4JztcblxuY29uc3QgbWFrZVNob3J0Y29kZSA9IG5hbWUgPT4gZnVuY3Rpb24gTURYRGVmYXVsdFNob3J0Y29kZShwcm9wcykge1xuICBjb25zb2xlLndhcm4oXCJDb21wb25lbnQgXCIgKyBuYW1lICsgXCIgd2FzIG5vdCBpbXBvcnRlZCwgZXhwb3J0ZWQsIG9yIHByb3ZpZGVkIGJ5IE1EWFByb3ZpZGVyIGFzIGdsb2JhbCBzY29wZVwiKVxuICByZXR1cm4gPGRpdiB7Li4ucHJvcHN9Lz5cbn07XG5jb25zdCBNZXRhID0gbWFrZVNob3J0Y29kZShcIk1ldGFcIik7XG5jb25zdCBsYXlvdXRQcm9wcyA9IHtcbiAgXG59O1xuY29uc3QgTURYTGF5b3V0ID0gXCJ3cmFwcGVyXCJcbmZ1bmN0aW9uIE1EWENvbnRlbnQoe1xuICBjb21wb25lbnRzLFxuICAuLi5wcm9wc1xufSkge1xuICByZXR1cm4gPE1EWExheW91dCB7Li4ubGF5b3V0UHJvcHN9IHsuLi5wcm9wc30gY29tcG9uZW50cz17Y29tcG9uZW50c30gbWR4VHlwZT1cIk1EWExheW91dFwiPlxuXG4gICAgPE1ldGEgdGl0bGU9XCIzIEFQSSBSZWZlcmVuY2V8QnVpbHQtaW4gZmlsZSBhY3Rpb25zXCIgbWR4VHlwZT1cIk1ldGFcIiAvPlxuICAgIDxoMSB7Li4ue1xuICAgICAgXCJpZFwiOiBcImJ1aWx0LWluLWZpbGUtYWN0aW9uc1wiXG4gICAgfX0+e2BCdWlsdC1pbiBmaWxlIGFjdGlvbnNgfTwvaDE+XG4gICAgPHA+e2BFeHBsYWluIGB9PGlubGluZUNvZGUgcGFyZW50TmFtZT1cInBcIj57YENob25reUFjdGlvbnNgfTwvaW5saW5lQ29kZT57YCBtYXAuYH08L3A+XG4gICAgPGgyIHsuLi57XG4gICAgICBcImlkXCI6IFwiaG93LXRvLXVzZS1maWxlLWFjdGlvbnNcIlxuICAgIH19PntgSG93IHRvIHVzZSBmaWxlIGFjdGlvbnNgfTwvaDI+XG4gICAgPGgyIHsuLi57XG4gICAgICBcImlkXCI6IFwibGlzdC1vZi1idWlsdC1pbi1maWxlLWFjdGlvbnNcIlxuICAgIH19PntgTGlzdCBvZiBidWlsdC1pbiBmaWxlIGFjdGlvbnNgfTwvaDI+XG4gICAgPGgzIHsuLi57XG4gICAgICBcImlkXCI6IFwib3BlbmZpbGVzXCJcbiAgICB9fT48aW5saW5lQ29kZSBwYXJlbnROYW1lPVwiaDNcIj57YE9wZW5GaWxlc2B9PC9pbmxpbmVDb2RlPjwvaDM+XG4gICAgPHA+PGlubGluZUNvZGUgcGFyZW50TmFtZT1cInBcIj57YGRhdGEuZmlsZXNgfTwvaW5saW5lQ29kZT57YCB3aWxsIGFsd2F5cyBiZSBzZXQsIGJ1dCBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2BkYXRhLnRhcmdldGB9PC9pbmxpbmVDb2RlPntgIGNhbiBzb21ldGltZXMgYmUgdW5kZWZpbmVkLiBGb3JcbmV4YW1wbGUsIHdoZW4gdGhlIHVzZXIgY2xpY2tzIGB9PGlubGluZUNvZGUgcGFyZW50TmFtZT1cInBcIj57YEFjdGlvbnMgLT4gT3BlbiBzZWxlY3Rpb25gfTwvaW5saW5lQ29kZT57YCwgdGFyZ2V0IHdpbGwgYmUgdW5kZWZpbmVkLmB9PC9wPlxuICAgIDwvTURYTGF5b3V0Pjtcbn1cblxuO1xuTURYQ29udGVudC5pc01EWENvbXBvbmVudCA9IHRydWU7XG5cbmV4cG9ydCBjb25zdCBfX3BhZ2UgPSAoKSA9PiB7IHRocm93IG5ldyBFcnJvcihcIkRvY3Mtb25seSBzdG9yeVwiKTsgfTtcblxuX19wYWdlLnBhcmFtZXRlcnMgPSB7IGRvY3NPbmx5OiB0cnVlIH07XG5cbmNvbnN0IGNvbXBvbmVudE1ldGEgPSB7IHRpdGxlOiAnMyBBUEkgUmVmZXJlbmNlfEJ1aWx0LWluIGZpbGUgYWN0aW9ucycsIGluY2x1ZGVTdG9yaWVzOiBbXCJfX3BhZ2VcIl0sICB9O1xuXG5jb25zdCBtZHhTdG9yeU5hbWVUb0tleSA9IHt9O1xuXG5jb21wb25lbnRNZXRhLnBhcmFtZXRlcnMgPSBjb21wb25lbnRNZXRhLnBhcmFtZXRlcnMgfHwge307XG5jb21wb25lbnRNZXRhLnBhcmFtZXRlcnMuZG9jcyA9IHtcbiAgLi4uKGNvbXBvbmVudE1ldGEucGFyYW1ldGVycy5kb2NzIHx8IHt9KSxcbiAgcGFnZTogKCkgPT4gPEFkZENvbnRleHQgbWR4U3RvcnlOYW1lVG9LZXk9e21keFN0b3J5TmFtZVRvS2V5fSBtZHhDb21wb25lbnRNZXRhPXtjb21wb25lbnRNZXRhfT48TURYQ29udGVudCAvPjwvQWRkQ29udGV4dD4sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnRNZXRhOyIsIlxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJcXG4gICAgICBcXG4gICAgICAvLyBAdHMtbm9jaGVja1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19TVE9SWV9fID0gXFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IHtcXFxcbiAgICBGaWxlQWN0aW9uLFxcXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcXFxuICAgIEZpbGVCcm93c2VyLFxcXFxuICAgIEZpbGVMaXN0LFxcXFxuICAgIEZpbGVTZWFyY2gsXFxcXG4gICAgRmlsZVRvb2xiYXJcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtQ29tcG9uZW50LWhpZXJhcmNoeS5tZCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfENvbXBvbmVudCBoaWVyYXJjaHknLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgQ29tcG9uZW50SGllcmFyY2h5RXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAneEFTdycsIG5hbWU6ICdDaG9ua3kgRGVtbyBGb2xkZXInLCBpc0RpcjogdHJ1ZSB9XTtcXFxcbiAgICBjb25zdCBmaWxlcyA9IFt7IGlkOiAnYkVmWCcsIG5hbWU6ICdEZW1vLnRzJyB9XTtcXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIjtcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1xcXCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtY29tcG9uZW50LWhpZXJhcmNoeS0tY29tcG9uZW50LWhpZXJhcmNoeS1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6NDEsXFxcImxpbmVcXFwiOjI2fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDh9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjo0MSxcXFwibGluZVxcXCI6MjZ9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDh9fX07XFxuICAgIFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQge1xcbiAgICBGaWxlQWN0aW9uLFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXG4gICAgRmlsZUJyb3dzZXIsXFxuICAgIEZpbGVMaXN0LFxcbiAgICBGaWxlU2VhcmNoLFxcbiAgICBGaWxlVG9vbGJhclxcbn0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtQ29tcG9uZW50LWhpZXJhcmNoeS5tZCc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xDb21wb25lbnQgaGllcmFyY2h5JyxcXG4gICAgcGFyYW1ldGVyczoge1xcXCJzdG9yeVNvdXJjZVxcXCI6e1xcXCJzb3VyY2VcXFwiOlxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQnJvd3NlcixcXFxcbiAgICBGaWxlTGlzdCxcXFxcbiAgICBGaWxlU2VhcmNoLFxcXFxuICAgIEZpbGVUb29sYmFyXFxcXG59IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAxLUNvbXBvbmVudC1oaWVyYXJjaHkubWQnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xDb21wb25lbnQgaGllcmFyY2h5JyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IENvbXBvbmVudEhpZXJhcmNoeUV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ3hBU3cnLCBuYW1lOiAnQ2hvbmt5IERlbW8gRm9sZGVyJywgaXNEaXI6IHRydWUgfV07XFxcXG4gICAgY29uc3QgZmlsZXMgPSBbeyBpZDogJ2JFZlgnLCBuYW1lOiAnRGVtby50cycgfV07XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCIsXFxcImxvY2F0aW9uc01hcFxcXCI6e1xcXCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtY29tcG9uZW50LWhpZXJhcmNoeS0tY29tcG9uZW50LWhpZXJhcmNoeS1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6NDEsXFxcImxpbmVcXFwiOjI2fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDh9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjo0MSxcXFwibGluZVxcXCI6MjZ9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDh9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IENvbXBvbmVudEhpZXJhcmNoeUV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICd4QVN3JywgbmFtZTogJ0Nob25reSBEZW1vIEZvbGRlcicsIGlzRGlyOiB0cnVlIH1dO1xcbiAgICBjb25zdCBmaWxlcyA9IFt7IGlkOiAnYkVmWCcsIG5hbWU6ICdEZW1vLnRzJyB9XTtcXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCI7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtY29tcG9uZW50LWhpZXJhcmNoeS0tY29tcG9uZW50LWhpZXJhcmNoeS1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjo0MSxcImxpbmVcIjozNH0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjU2fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjQxLFwibGluZVwiOjM0fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjU2fX19O1xuICAgIFxuXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQge1xcbiAgICBGaWxlQWN0aW9uLFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXG4gICAgRmlsZUJyb3dzZXIsXFxuICAgIEZpbGVMaXN0LFxcbiAgICBGaWxlU2VhcmNoLFxcbiAgICBGaWxlVG9vbGJhclxcbn0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtQ29tcG9uZW50LWhpZXJhcmNoeS5tZCc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xDb21wb25lbnQgaGllcmFyY2h5JyxcXG4gICAgcGFyYW1ldGVyczoge1xcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IENvbXBvbmVudEhpZXJhcmNoeUV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICd4QVN3JywgbmFtZTogJ0Nob25reSBEZW1vIEZvbGRlcicsIGlzRGlyOiB0cnVlIH1dO1xcbiAgICBjb25zdCBmaWxlcyA9IFt7IGlkOiAnYkVmWCcsIG5hbWU6ICdEZW1vLnRzJyB9XTtcXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCI7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtY29tcG9uZW50LWhpZXJhcmNoeS0tY29tcG9uZW50LWhpZXJhcmNoeS1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjo0MSxcImxpbmVcIjoyNn0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjQ4fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjQxLFwibGluZVwiOjI2fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjQ4fX19O1xuICAgIFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xuXG5pbXBvcnQge1xuICAgIEZpbGVBY3Rpb24sXG4gICAgRmlsZUFjdGlvbkRhdGEsXG4gICAgRmlsZUJyb3dzZXIsXG4gICAgRmlsZUxpc3QsXG4gICAgRmlsZVNlYXJjaCxcbiAgICBGaWxlVG9vbGJhclxufSBmcm9tICdjaG9ua3knO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xuLy8gQHRzLWlnbm9yZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMS1Db21wb25lbnQtaGllcmFyY2h5Lm1kJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1kZWZhdWx0LWV4cG9ydFxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfENvbXBvbmVudCBoaWVyYXJjaHknLFxuICAgIHBhcmFtZXRlcnM6IHtcInN0b3J5U291cmNlXCI6e1wic291cmNlXCI6XCJcXG4gICAgICBcXG4gICAgICAvLyBAdHMtbm9jaGVja1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19TVE9SWV9fID0gXFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IHtcXFxcbiAgICBGaWxlQWN0aW9uLFxcXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcXFxuICAgIEZpbGVCcm93c2VyLFxcXFxuICAgIEZpbGVMaXN0LFxcXFxuICAgIEZpbGVTZWFyY2gsXFxcXG4gICAgRmlsZVRvb2xiYXJcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtQ29tcG9uZW50LWhpZXJhcmNoeS5tZCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfENvbXBvbmVudCBoaWVyYXJjaHknLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgQ29tcG9uZW50SGllcmFyY2h5RXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAneEFTdycsIG5hbWU6ICdDaG9ua3kgRGVtbyBGb2xkZXInLCBpc0RpcjogdHJ1ZSB9XTtcXFxcbiAgICBjb25zdCBmaWxlcyA9IFt7IGlkOiAnYkVmWCcsIG5hbWU6ICdEZW1vLnRzJyB9XTtcXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIjtcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1xcXCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtY29tcG9uZW50LWhpZXJhcmNoeS0tY29tcG9uZW50LWhpZXJhcmNoeS1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6NDEsXFxcImxpbmVcXFwiOjI2fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDh9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjo0MSxcXFwibGluZVxcXCI6MjZ9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDh9fX07XFxuICAgIFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQge1xcbiAgICBGaWxlQWN0aW9uLFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXG4gICAgRmlsZUJyb3dzZXIsXFxuICAgIEZpbGVMaXN0LFxcbiAgICBGaWxlU2VhcmNoLFxcbiAgICBGaWxlVG9vbGJhclxcbn0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtQ29tcG9uZW50LWhpZXJhcmNoeS5tZCc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xDb21wb25lbnQgaGllcmFyY2h5JyxcXG4gICAgcGFyYW1ldGVyczoge1xcXCJzdG9yeVNvdXJjZVxcXCI6e1xcXCJzb3VyY2VcXFwiOlxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQnJvd3NlcixcXFxcbiAgICBGaWxlTGlzdCxcXFxcbiAgICBGaWxlU2VhcmNoLFxcXFxuICAgIEZpbGVUb29sYmFyXFxcXG59IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAxLUNvbXBvbmVudC1oaWVyYXJjaHkubWQnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xDb21wb25lbnQgaGllcmFyY2h5JyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IENvbXBvbmVudEhpZXJhcmNoeUV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ3hBU3cnLCBuYW1lOiAnQ2hvbmt5IERlbW8gRm9sZGVyJywgaXNEaXI6IHRydWUgfV07XFxcXG4gICAgY29uc3QgZmlsZXMgPSBbeyBpZDogJ2JFZlgnLCBuYW1lOiAnRGVtby50cycgfV07XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCIsXFxcImxvY2F0aW9uc01hcFxcXCI6e1xcXCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtY29tcG9uZW50LWhpZXJhcmNoeS0tY29tcG9uZW50LWhpZXJhcmNoeS1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6NDEsXFxcImxpbmVcXFwiOjI2fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDh9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjo0MSxcXFwibGluZVxcXCI6MjZ9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDh9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IENvbXBvbmVudEhpZXJhcmNoeUV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICd4QVN3JywgbmFtZTogJ0Nob25reSBEZW1vIEZvbGRlcicsIGlzRGlyOiB0cnVlIH1dO1xcbiAgICBjb25zdCBmaWxlcyA9IFt7IGlkOiAnYkVmWCcsIG5hbWU6ICdEZW1vLnRzJyB9XTtcXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCIsXCJsb2NhdGlvbnNNYXBcIjp7XCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtY29tcG9uZW50LWhpZXJhcmNoeS0tY29tcG9uZW50LWhpZXJhcmNoeS1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjo0MSxcImxpbmVcIjozNH0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjU2fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjQxLFwibGluZVwiOjM0fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjU2fX19fSxcInN0b3J5U291cmNlXCI6e1wic291cmNlXCI6XCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHtcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVCcm93c2VyLFxcbiAgICBGaWxlTGlzdCxcXG4gICAgRmlsZVNlYXJjaCxcXG4gICAgRmlsZVRvb2xiYXJcXG59IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAxLUNvbXBvbmVudC1oaWVyYXJjaHkubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8Q29tcG9uZW50IGhpZXJhcmNoeScsXFxuICAgIHBhcmFtZXRlcnM6IHtcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBDb21wb25lbnRIaWVyYXJjaHlFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAneEFTdycsIG5hbWU6ICdDaG9ua3kgRGVtbyBGb2xkZXInLCBpc0RpcjogdHJ1ZSB9XTtcXG4gICAgY29uc3QgZmlsZXMgPSBbeyBpZDogJ2JFZlgnLCBuYW1lOiAnRGVtby50cycgfV07XFxuXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXG4gICAgfTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiLFwibG9jYXRpb25zTWFwXCI6e1wiMS1maWxlLWJyb3dzZXItYmFzaWNzLWNvbXBvbmVudC1oaWVyYXJjaHktLWNvbXBvbmVudC1oaWVyYXJjaHktZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6NDEsXCJsaW5lXCI6MjZ9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo0OH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjo0MSxcImxpbmVcIjoyNn0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo0OH19fX0sXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcbiAgICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IENvbXBvbmVudEhpZXJhcmNoeUV4YW1wbGUgPSAoKSA9PiB7XG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ3hBU3cnLCBuYW1lOiAnQ2hvbmt5IERlbW8gRm9sZGVyJywgaXNEaXI6IHRydWUgfV07XG4gICAgY29uc3QgZmlsZXMgPSBbeyBpZDogJ2JFZlgnLCBuYW1lOiAnRGVtby50cycgfV07XG5cbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IFwiQ2hvbmt5IGluY2x1ZGVzIHNldmVyYWwgbWFqb3IgY29tcG9uZW50cyAtIGBGaWxlQnJvd3NlcmAsIGBGaWxlTGlzdGAsIGBGaWxlVG9vbGJhcmAsXFxuYW5kIHNvbWUgb3RoZXJzLlxcblxcbmBGaWxlQnJvd3NlcmAgaXMgdGhlIG1vc3QgaW1wb3J0YW50IGNvbXBvbmVudC4gSW4geW91ciBjb2RlLCBpdCBzaG91bGQgd3JhcFxcbmFsbCBvdGhlciBDaG9ua3kgY29tcG9uZW50czpcXG5cXG5gYGB0c3hcXG48RmlsZUJyb3dzZXIgZmlsZXM9e1tdfT5cXG4gICAgPEZpbGVUb29sYmFyIC8+XFxuICAgIDxGaWxlU2VhcmNoIC8+XFxuICAgIDxGaWxlTGlzdCAvPlxcbjwvRmlsZUJyb3dzZXI+XFxuYGBgXFxuXFxuVGhpcyBpcyBiZWNhdXNlIGBGaWxlQnJvd3NlcmAgaXMgcmVzcG9uc2libGUgZm9yIHByb3ZpZGluZyB0aGUgY29uZmlndXJhdGlvbiBhbmRcXG5yZWxldmFudCBSZWFjdCBjb250ZXh0cyB0byBhbGwgdGhlIGNoaWxkcmVuIENob25reSBjb21wb25lbnRzLiBJdCBhbHNvIHRoZSBjb21wb25lbnRcXG50aGF0IHlvdSB3aWxsIGJlIHBhc3NpbmcgYWxsIG9mIHlvdXIgcHJvcHMgdG9vLlxcblxcbmBGaWxlQnJvd3NlcmAgaXMgYWxzbyB0aGUgb25seSByZXF1aXJlZCBjb21wb25lbnQgLSBhbGwgb3RoZXJzLCBzdWNoIGFzIGBGaWxlTGlzdGAsXFxuYXJlIG9wdGlvbmFsLiBGb3IgZXhhbXBsZSwgaWYgeW91J3JlIG9ubHkgaW50ZXJlc3RlZCBpbiBkaXNwbGF5aW5nIGZpbGVzLCBidXQgZG9uJ3RcXG5uZWVkIHRvIHRoZSB0b29sYmFyLCB5b3UgY291bGQgdXNlIHRoZSBmb2xsb3dpbmcgaGllcmFyY2h5OlxcblxcbmBgYHRzeFxcbjxGaWxlQnJvd3NlciBmaWxlcz17W119PlxcbiAgICA8RmlsZUxpc3QgLz5cXG48L0ZpbGVCcm93c2VyPlxcbmBgYFxcblxcbk9yLCBpZiB5b3UncmUgYSBwb3dlciB1c2VyLCBhbmQgeW91IHdhbnQgdG8gdXNlIGEgY3VzdG9tIGltcGxlbWVudGF0aW9uIG9mIHRoZSBmaWxlXFxubGlzdCBieSBjb25zdW1pbmcgQ2hvbmt5J3MgUmVhY3QgY29udGV4dHMgZGlyZWN0bHksIHlvdSBjb3VsZCB1c2Ugc29tZXRoaW5nIGxpa2U6XFxuXFxuYGBgdHN4XFxuPEZpbGVCcm93c2VyIGZpbGVzPXtbXX0+XFxuICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICA8RmlsZVNlYXJjaCAvPlxcbiAgICA8TXlDdXN0b21GaWxlTGlzdCAvPlxcbjwvRmlsZUJyb3dzZXI+XFxuYGBgXFxuXCI7IiwiXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIEZpbGVBY3Rpb24sXFxcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxcXG4gICAgRmlsZUFycmF5LFxcXFxuICAgIEZpbGVCcm93c2VyLFxcXFxuICAgIEZpbGVMaXN0LFxcXFxuICAgIEZpbGVTZWFyY2gsXFxcXG4gICAgRmlsZVRvb2xiYXIsXFxcXG59IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAyLURpc3BsYXlpbmctZmlsZXMubWQnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xEaXNwbGF5aW5nIGZpbGVzJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEZpbGVzQXJyYXlFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGZpbGVzOiBGaWxlQXJyYXkgPSBbXFxcXG4gICAgICAgIG51bGwsIC8vIExvYWRpbmcgYW5pbWF0aW9uIHdpbGwgYmUgc2hvd24gZm9yIHRoaXMgZmlsZVxcXFxuICAgICAgICBudWxsLFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ25UZScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm9ybWFsIGZpbGUueWFtbCcsXFxcXG4gICAgICAgICAgICBpc0RpcjogZmFsc2UsXFxcXG4gICAgICAgICAgICBpc0hpZGRlbjogdHJ1ZSxcXFxcbiAgICAgICAgICAgIHNpemU6IDg5MCxcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICd6eGMnLFxcXFxuICAgICAgICAgICAgbmFtZTogJ0hpZGRlbiBmaWxlLm1wNCcsXFxcXG4gICAgICAgICAgICBpc0RpcjogZmFsc2UsXFxcXG4gICAgICAgICAgICBpc0hpZGRlbjogdHJ1ZSxcXFxcbiAgICAgICAgICAgIHNpemU6IDg5MCxcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICdibm0nLFxcXFxuICAgICAgICAgICAgbmFtZTogJ05vcm1hbCBmb2xkZXInLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgICAgICBjaGlsZHJlbklkczogWydyYW5kb20taWQtMScsICdyYW5kb20taWQtMiddLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3ZmcicsXFxcXG4gICAgICAgICAgICBuYW1lOiAnU3ltbGluayBmb2xkZXInLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgICAgICBpc1N5bWxpbms6IHRydWUsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAncXdlJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3Qgc2VsZWN0YWJsZS50YXIuZ3onLFxcXFxuICAgICAgICAgICAgZXh0OiAnLnRhci5neicsIC8vIEN1c3RvbSBleHRlbnNpb25cXFxcbiAgICAgICAgICAgIHNlbGVjdGFibGU6IGZhbHNlLCAvLyBEaXNhYmxlIHNlbGVjdGlvblxcXFxuICAgICAgICAgICAgc2l6ZTogNTQzMDAwMDAwMDAsXFxcXG4gICAgICAgICAgICBtb2REYXRlOiBuZXcgRGF0ZSgpLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3J0eScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IG9wZW5hYmxlLnBlbScsXFxcXG4gICAgICAgICAgICBvcGVuYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgb3BlbmluZ1xcXFxuICAgICAgICAgICAgc2l6ZTogMTAwMDAwMDAwLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ2J0aicsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IGRyYWdnYWJsZS5leGUnLFxcXFxuICAgICAgICAgICAgZHJhZ2dhYmxlOiBmYWxzZSwgLy8gUHJldmVudCB0aGlzIGZpbGVzIGZyb20gYmVpbmcgZHJhZ2dlZFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3VwcScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IGRyb3BwYWJsZScsXFxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICAgICAgICAgIGRyb3BwYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgZmlsZXMgZnJvbSBiZWluZyBkcm9wcGVkIGludG8gdGhpcyBmb2xkZXJcXFxcbiAgICAgICAgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwiMS1maWxlLWJyb3dzZXItYmFzaWNzLWRpc3BsYXlpbmctZmlsZXMtLWZpbGVzLWFycmF5LWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozMyxcXFwibGluZVxcXCI6Mjd9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjoxMDF9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozMyxcXFwibGluZVxcXCI6Mjd9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6MTAxfX19O1xcbiAgICBcXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHtcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVBcnJheSxcXG4gICAgRmlsZUJyb3dzZXIsXFxuICAgIEZpbGVMaXN0LFxcbiAgICBGaWxlU2VhcmNoLFxcbiAgICBGaWxlVG9vbGJhcixcXG59IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAyLURpc3BsYXlpbmctZmlsZXMubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8RGlzcGxheWluZyBmaWxlcycsXFxuICAgIHBhcmFtZXRlcnM6IHtcXFwic3RvcnlTb3VyY2VcXFwiOntcXFwic291cmNlXFxcIjpcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIEZpbGVBY3Rpb24sXFxcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxcXG4gICAgRmlsZUFycmF5LFxcXFxuICAgIEZpbGVCcm93c2VyLFxcXFxuICAgIEZpbGVMaXN0LFxcXFxuICAgIEZpbGVTZWFyY2gsXFxcXG4gICAgRmlsZVRvb2xiYXIsXFxcXG59IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAyLURpc3BsYXlpbmctZmlsZXMubWQnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xEaXNwbGF5aW5nIGZpbGVzJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEZpbGVzQXJyYXlFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGZpbGVzOiBGaWxlQXJyYXkgPSBbXFxcXG4gICAgICAgIG51bGwsIC8vIExvYWRpbmcgYW5pbWF0aW9uIHdpbGwgYmUgc2hvd24gZm9yIHRoaXMgZmlsZVxcXFxuICAgICAgICBudWxsLFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ25UZScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm9ybWFsIGZpbGUueWFtbCcsXFxcXG4gICAgICAgICAgICBpc0RpcjogZmFsc2UsXFxcXG4gICAgICAgICAgICBpc0hpZGRlbjogdHJ1ZSxcXFxcbiAgICAgICAgICAgIHNpemU6IDg5MCxcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICd6eGMnLFxcXFxuICAgICAgICAgICAgbmFtZTogJ0hpZGRlbiBmaWxlLm1wNCcsXFxcXG4gICAgICAgICAgICBpc0RpcjogZmFsc2UsXFxcXG4gICAgICAgICAgICBpc0hpZGRlbjogdHJ1ZSxcXFxcbiAgICAgICAgICAgIHNpemU6IDg5MCxcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICdibm0nLFxcXFxuICAgICAgICAgICAgbmFtZTogJ05vcm1hbCBmb2xkZXInLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgICAgICBjaGlsZHJlbklkczogWydyYW5kb20taWQtMScsICdyYW5kb20taWQtMiddLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3ZmcicsXFxcXG4gICAgICAgICAgICBuYW1lOiAnU3ltbGluayBmb2xkZXInLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgICAgICBpc1N5bWxpbms6IHRydWUsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAncXdlJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3Qgc2VsZWN0YWJsZS50YXIuZ3onLFxcXFxuICAgICAgICAgICAgZXh0OiAnLnRhci5neicsIC8vIEN1c3RvbSBleHRlbnNpb25cXFxcbiAgICAgICAgICAgIHNlbGVjdGFibGU6IGZhbHNlLCAvLyBEaXNhYmxlIHNlbGVjdGlvblxcXFxuICAgICAgICAgICAgc2l6ZTogNTQzMDAwMDAwMDAsXFxcXG4gICAgICAgICAgICBtb2REYXRlOiBuZXcgRGF0ZSgpLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3J0eScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IG9wZW5hYmxlLnBlbScsXFxcXG4gICAgICAgICAgICBvcGVuYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgb3BlbmluZ1xcXFxuICAgICAgICAgICAgc2l6ZTogMTAwMDAwMDAwLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ2J0aicsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IGRyYWdnYWJsZS5leGUnLFxcXFxuICAgICAgICAgICAgZHJhZ2dhYmxlOiBmYWxzZSwgLy8gUHJldmVudCB0aGlzIGZpbGVzIGZyb20gYmVpbmcgZHJhZ2dlZFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3VwcScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IGRyb3BwYWJsZScsXFxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICAgICAgICAgIGRyb3BwYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgZmlsZXMgZnJvbSBiZWluZyBkcm9wcGVkIGludG8gdGhpcyBmb2xkZXJcXFxcbiAgICAgICAgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCIsXFxcImxvY2F0aW9uc01hcFxcXCI6e1xcXCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtZGlzcGxheWluZy1maWxlcy0tZmlsZXMtYXJyYXktZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjMzLFxcXCJsaW5lXFxcIjoyN30sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjEwMX0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjMzLFxcXCJsaW5lXFxcIjoyN30sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjoxMDF9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEZpbGVzQXJyYXlFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBmaWxlczogRmlsZUFycmF5ID0gW1xcbiAgICAgICAgbnVsbCwgLy8gTG9hZGluZyBhbmltYXRpb24gd2lsbCBiZSBzaG93biBmb3IgdGhpcyBmaWxlXFxuICAgICAgICBudWxsLFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnblRlJyxcXG4gICAgICAgICAgICBuYW1lOiAnTm9ybWFsIGZpbGUueWFtbCcsXFxuICAgICAgICAgICAgaXNEaXI6IGZhbHNlLFxcbiAgICAgICAgICAgIGlzSGlkZGVuOiB0cnVlLFxcbiAgICAgICAgICAgIHNpemU6IDg5MCxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICd6eGMnLFxcbiAgICAgICAgICAgIG5hbWU6ICdIaWRkZW4gZmlsZS5tcDQnLFxcbiAgICAgICAgICAgIGlzRGlyOiBmYWxzZSxcXG4gICAgICAgICAgICBpc0hpZGRlbjogdHJ1ZSxcXG4gICAgICAgICAgICBzaXplOiA4OTAsXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnYm5tJyxcXG4gICAgICAgICAgICBuYW1lOiAnTm9ybWFsIGZvbGRlcicsXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxuICAgICAgICAgICAgY2hpbGRyZW5JZHM6IFsncmFuZG9tLWlkLTEnLCAncmFuZG9tLWlkLTInXSxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICd2ZnInLFxcbiAgICAgICAgICAgIG5hbWU6ICdTeW1saW5rIGZvbGRlcicsXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxuICAgICAgICAgICAgaXNTeW1saW5rOiB0cnVlLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ3F3ZScsXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBzZWxlY3RhYmxlLnRhci5neicsXFxuICAgICAgICAgICAgZXh0OiAnLnRhci5neicsIC8vIEN1c3RvbSBleHRlbnNpb25cXG4gICAgICAgICAgICBzZWxlY3RhYmxlOiBmYWxzZSwgLy8gRGlzYWJsZSBzZWxlY3Rpb25cXG4gICAgICAgICAgICBzaXplOiA1NDMwMDAwMDAwMCxcXG4gICAgICAgICAgICBtb2REYXRlOiBuZXcgRGF0ZSgpLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ3J0eScsXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBvcGVuYWJsZS5wZW0nLFxcbiAgICAgICAgICAgIG9wZW5hYmxlOiBmYWxzZSwgLy8gUHJldmVudCBvcGVuaW5nXFxuICAgICAgICAgICAgc2l6ZTogMTAwMDAwMDAwLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ2J0aicsXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBkcmFnZ2FibGUuZXhlJyxcXG4gICAgICAgICAgICBkcmFnZ2FibGU6IGZhbHNlLCAvLyBQcmV2ZW50IHRoaXMgZmlsZXMgZnJvbSBiZWluZyBkcmFnZ2VkXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAndXBxJyxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IGRyb3BwYWJsZScsXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxuICAgICAgICAgICAgZHJvcHBhYmxlOiBmYWxzZSwgLy8gUHJldmVudCBmaWxlcyBmcm9tIGJlaW5nIGRyb3BwZWQgaW50byB0aGlzIGZvbGRlclxcbiAgICAgICAgfSxcXG4gICAgXTtcXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiMS1maWxlLWJyb3dzZXItYmFzaWNzLWRpc3BsYXlpbmctZmlsZXMtLWZpbGVzLWFycmF5LWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjMzLFwibGluZVwiOjM1fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6MTA5fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjMzLFwibGluZVwiOjM1fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjEwOX19fTtcbiAgICBcblxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHtcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVBcnJheSxcXG4gICAgRmlsZUJyb3dzZXIsXFxuICAgIEZpbGVMaXN0LFxcbiAgICBGaWxlU2VhcmNoLFxcbiAgICBGaWxlVG9vbGJhcixcXG59IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAyLURpc3BsYXlpbmctZmlsZXMubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8RGlzcGxheWluZyBmaWxlcycsXFxuICAgIHBhcmFtZXRlcnM6IHtcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBGaWxlc0FycmF5RXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgZmlsZXM6IEZpbGVBcnJheSA9IFtcXG4gICAgICAgIG51bGwsIC8vIExvYWRpbmcgYW5pbWF0aW9uIHdpbGwgYmUgc2hvd24gZm9yIHRoaXMgZmlsZVxcbiAgICAgICAgbnVsbCxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ25UZScsXFxuICAgICAgICAgICAgbmFtZTogJ05vcm1hbCBmaWxlLnlhbWwnLFxcbiAgICAgICAgICAgIGlzRGlyOiBmYWxzZSxcXG4gICAgICAgICAgICBpc0hpZGRlbjogdHJ1ZSxcXG4gICAgICAgICAgICBzaXplOiA4OTAsXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnenhjJyxcXG4gICAgICAgICAgICBuYW1lOiAnSGlkZGVuIGZpbGUubXA0JyxcXG4gICAgICAgICAgICBpc0RpcjogZmFsc2UsXFxuICAgICAgICAgICAgaXNIaWRkZW46IHRydWUsXFxuICAgICAgICAgICAgc2l6ZTogODkwLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ2JubScsXFxuICAgICAgICAgICAgbmFtZTogJ05vcm1hbCBmb2xkZXInLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgICAgIGNoaWxkcmVuSWRzOiBbJ3JhbmRvbS1pZC0xJywgJ3JhbmRvbS1pZC0yJ10sXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAndmZyJyxcXG4gICAgICAgICAgICBuYW1lOiAnU3ltbGluayBmb2xkZXInLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgICAgIGlzU3ltbGluazogdHJ1ZSxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdxd2UnLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3Qgc2VsZWN0YWJsZS50YXIuZ3onLFxcbiAgICAgICAgICAgIGV4dDogJy50YXIuZ3onLCAvLyBDdXN0b20gZXh0ZW5zaW9uXFxuICAgICAgICAgICAgc2VsZWN0YWJsZTogZmFsc2UsIC8vIERpc2FibGUgc2VsZWN0aW9uXFxuICAgICAgICAgICAgc2l6ZTogNTQzMDAwMDAwMDAsXFxuICAgICAgICAgICAgbW9kRGF0ZTogbmV3IERhdGUoKSxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdydHknLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3Qgb3BlbmFibGUucGVtJyxcXG4gICAgICAgICAgICBvcGVuYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgb3BlbmluZ1xcbiAgICAgICAgICAgIHNpemU6IDEwMDAwMDAwMCxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdidGonLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgZHJhZ2dhYmxlLmV4ZScsXFxuICAgICAgICAgICAgZHJhZ2dhYmxlOiBmYWxzZSwgLy8gUHJldmVudCB0aGlzIGZpbGVzIGZyb20gYmVpbmcgZHJhZ2dlZFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ3VwcScsXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBkcm9wcGFibGUnLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgICAgIGRyb3BwYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgZmlsZXMgZnJvbSBiZWluZyBkcm9wcGVkIGludG8gdGhpcyBmb2xkZXJcXG4gICAgICAgIH0sXFxuICAgIF07XFxuXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXG4gICAgfTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIjtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1kaXNwbGF5aW5nLWZpbGVzLS1maWxlcy1hcnJheS1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozMyxcImxpbmVcIjoyN30sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjEwMX0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMyxcImxpbmVcIjoyN30sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjoxMDF9fX07XG4gICAgXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XG5cbmltcG9ydCB7XG4gICAgRmlsZUFjdGlvbixcbiAgICBGaWxlQWN0aW9uRGF0YSxcbiAgICBGaWxlQXJyYXksXG4gICAgRmlsZUJyb3dzZXIsXG4gICAgRmlsZUxpc3QsXG4gICAgRmlsZVNlYXJjaCxcbiAgICBGaWxlVG9vbGJhcixcbn0gZnJvbSAnY2hvbmt5JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcbi8vIEB0cy1pZ25vcmVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDItRGlzcGxheWluZy1maWxlcy5tZCc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZGVmYXVsdC1leHBvcnRcbmV4cG9ydCBkZWZhdWx0IHtcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xEaXNwbGF5aW5nIGZpbGVzJyxcbiAgICBwYXJhbWV0ZXJzOiB7XCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiXFxuICAgICAgXFxuICAgICAgLy8gQHRzLW5vY2hlY2tcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fU1RPUllfXyA9IFxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQXJyYXksXFxcXG4gICAgRmlsZUJyb3dzZXIsXFxcXG4gICAgRmlsZUxpc3QsXFxcXG4gICAgRmlsZVNlYXJjaCxcXFxcbiAgICBGaWxlVG9vbGJhcixcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDItRGlzcGxheWluZy1maWxlcy5tZCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfERpc3BsYXlpbmcgZmlsZXMnLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgRmlsZXNBcnJheUV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgZmlsZXM6IEZpbGVBcnJheSA9IFtcXFxcbiAgICAgICAgbnVsbCwgLy8gTG9hZGluZyBhbmltYXRpb24gd2lsbCBiZSBzaG93biBmb3IgdGhpcyBmaWxlXFxcXG4gICAgICAgIG51bGwsXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnblRlJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3JtYWwgZmlsZS55YW1sJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiBmYWxzZSxcXFxcbiAgICAgICAgICAgIGlzSGlkZGVuOiB0cnVlLFxcXFxuICAgICAgICAgICAgc2l6ZTogODkwLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3p4YycsXFxcXG4gICAgICAgICAgICBuYW1lOiAnSGlkZGVuIGZpbGUubXA0JyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiBmYWxzZSxcXFxcbiAgICAgICAgICAgIGlzSGlkZGVuOiB0cnVlLFxcXFxuICAgICAgICAgICAgc2l6ZTogODkwLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ2JubScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm9ybWFsIGZvbGRlcicsXFxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICAgICAgICAgIGNoaWxkcmVuSWRzOiBbJ3JhbmRvbS1pZC0xJywgJ3JhbmRvbS1pZC0yJ10sXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAndmZyJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdTeW1saW5rIGZvbGRlcicsXFxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICAgICAgICAgIGlzU3ltbGluazogdHJ1ZSxcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICdxd2UnLFxcXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBzZWxlY3RhYmxlLnRhci5neicsXFxcXG4gICAgICAgICAgICBleHQ6ICcudGFyLmd6JywgLy8gQ3VzdG9tIGV4dGVuc2lvblxcXFxuICAgICAgICAgICAgc2VsZWN0YWJsZTogZmFsc2UsIC8vIERpc2FibGUgc2VsZWN0aW9uXFxcXG4gICAgICAgICAgICBzaXplOiA1NDMwMDAwMDAwMCxcXFxcbiAgICAgICAgICAgIG1vZERhdGU6IG5ldyBEYXRlKCksXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAncnR5JyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3Qgb3BlbmFibGUucGVtJyxcXFxcbiAgICAgICAgICAgIG9wZW5hYmxlOiBmYWxzZSwgLy8gUHJldmVudCBvcGVuaW5nXFxcXG4gICAgICAgICAgICBzaXplOiAxMDAwMDAwMDAsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnYnRqJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgZHJhZ2dhYmxlLmV4ZScsXFxcXG4gICAgICAgICAgICBkcmFnZ2FibGU6IGZhbHNlLCAvLyBQcmV2ZW50IHRoaXMgZmlsZXMgZnJvbSBiZWluZyBkcmFnZ2VkXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAndXBxJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgZHJvcHBhYmxlJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcXFxuICAgICAgICAgICAgZHJvcHBhYmxlOiBmYWxzZSwgLy8gUHJldmVudCBmaWxlcyBmcm9tIGJlaW5nIGRyb3BwZWQgaW50byB0aGlzIGZvbGRlclxcXFxuICAgICAgICB9LFxcXFxuICAgIF07XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIjtcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1xcXCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtZGlzcGxheWluZy1maWxlcy0tZmlsZXMtYXJyYXktZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjMzLFxcXCJsaW5lXFxcIjoyN30sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjEwMX0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjMzLFxcXCJsaW5lXFxcIjoyN30sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjoxMDF9fX07XFxuICAgIFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQge1xcbiAgICBGaWxlQWN0aW9uLFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXG4gICAgRmlsZUFycmF5LFxcbiAgICBGaWxlQnJvd3NlcixcXG4gICAgRmlsZUxpc3QsXFxuICAgIEZpbGVTZWFyY2gsXFxuICAgIEZpbGVUb29sYmFyLFxcbn0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDItRGlzcGxheWluZy1maWxlcy5tZCc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xEaXNwbGF5aW5nIGZpbGVzJyxcXG4gICAgcGFyYW1ldGVyczoge1xcXCJzdG9yeVNvdXJjZVxcXCI6e1xcXCJzb3VyY2VcXFwiOlxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQXJyYXksXFxcXG4gICAgRmlsZUJyb3dzZXIsXFxcXG4gICAgRmlsZUxpc3QsXFxcXG4gICAgRmlsZVNlYXJjaCxcXFxcbiAgICBGaWxlVG9vbGJhcixcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDItRGlzcGxheWluZy1maWxlcy5tZCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfERpc3BsYXlpbmcgZmlsZXMnLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgRmlsZXNBcnJheUV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgZmlsZXM6IEZpbGVBcnJheSA9IFtcXFxcbiAgICAgICAgbnVsbCwgLy8gTG9hZGluZyBhbmltYXRpb24gd2lsbCBiZSBzaG93biBmb3IgdGhpcyBmaWxlXFxcXG4gICAgICAgIG51bGwsXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnblRlJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3JtYWwgZmlsZS55YW1sJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiBmYWxzZSxcXFxcbiAgICAgICAgICAgIGlzSGlkZGVuOiB0cnVlLFxcXFxuICAgICAgICAgICAgc2l6ZTogODkwLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ3p4YycsXFxcXG4gICAgICAgICAgICBuYW1lOiAnSGlkZGVuIGZpbGUubXA0JyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiBmYWxzZSxcXFxcbiAgICAgICAgICAgIGlzSGlkZGVuOiB0cnVlLFxcXFxuICAgICAgICAgICAgc2l6ZTogODkwLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ2JubScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm9ybWFsIGZvbGRlcicsXFxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICAgICAgICAgIGNoaWxkcmVuSWRzOiBbJ3JhbmRvbS1pZC0xJywgJ3JhbmRvbS1pZC0yJ10sXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAndmZyJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdTeW1saW5rIGZvbGRlcicsXFxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXFxcbiAgICAgICAgICAgIGlzU3ltbGluazogdHJ1ZSxcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICdxd2UnLFxcXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBzZWxlY3RhYmxlLnRhci5neicsXFxcXG4gICAgICAgICAgICBleHQ6ICcudGFyLmd6JywgLy8gQ3VzdG9tIGV4dGVuc2lvblxcXFxuICAgICAgICAgICAgc2VsZWN0YWJsZTogZmFsc2UsIC8vIERpc2FibGUgc2VsZWN0aW9uXFxcXG4gICAgICAgICAgICBzaXplOiA1NDMwMDAwMDAwMCxcXFxcbiAgICAgICAgICAgIG1vZERhdGU6IG5ldyBEYXRlKCksXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAncnR5JyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3Qgb3BlbmFibGUucGVtJyxcXFxcbiAgICAgICAgICAgIG9wZW5hYmxlOiBmYWxzZSwgLy8gUHJldmVudCBvcGVuaW5nXFxcXG4gICAgICAgICAgICBzaXplOiAxMDAwMDAwMDAsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnYnRqJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgZHJhZ2dhYmxlLmV4ZScsXFxcXG4gICAgICAgICAgICBkcmFnZ2FibGU6IGZhbHNlLCAvLyBQcmV2ZW50IHRoaXMgZmlsZXMgZnJvbSBiZWluZyBkcmFnZ2VkXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAndXBxJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgZHJvcHBhYmxlJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcXFxuICAgICAgICAgICAgZHJvcHBhYmxlOiBmYWxzZSwgLy8gUHJldmVudCBmaWxlcyBmcm9tIGJlaW5nIGRyb3BwZWQgaW50byB0aGlzIGZvbGRlclxcXFxuICAgICAgICB9LFxcXFxuICAgIF07XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1kaXNwbGF5aW5nLWZpbGVzLS1maWxlcy1hcnJheS1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzMsXFxcImxpbmVcXFwiOjI3fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6MTAxfSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzMsXFxcImxpbmVcXFwiOjI3fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjEwMX19fX0sXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgRmlsZXNBcnJheUV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGZpbGVzOiBGaWxlQXJyYXkgPSBbXFxuICAgICAgICBudWxsLCAvLyBMb2FkaW5nIGFuaW1hdGlvbiB3aWxsIGJlIHNob3duIGZvciB0aGlzIGZpbGVcXG4gICAgICAgIG51bGwsXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICduVGUnLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3JtYWwgZmlsZS55YW1sJyxcXG4gICAgICAgICAgICBpc0RpcjogZmFsc2UsXFxuICAgICAgICAgICAgaXNIaWRkZW46IHRydWUsXFxuICAgICAgICAgICAgc2l6ZTogODkwLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ3p4YycsXFxuICAgICAgICAgICAgbmFtZTogJ0hpZGRlbiBmaWxlLm1wNCcsXFxuICAgICAgICAgICAgaXNEaXI6IGZhbHNlLFxcbiAgICAgICAgICAgIGlzSGlkZGVuOiB0cnVlLFxcbiAgICAgICAgICAgIHNpemU6IDg5MCxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdibm0nLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3JtYWwgZm9sZGVyJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgICAgICBjaGlsZHJlbklkczogWydyYW5kb20taWQtMScsICdyYW5kb20taWQtMiddLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ3ZmcicsXFxuICAgICAgICAgICAgbmFtZTogJ1N5bWxpbmsgZm9sZGVyJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgICAgICBpc1N5bWxpbms6IHRydWUsXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAncXdlJyxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IHNlbGVjdGFibGUudGFyLmd6JyxcXG4gICAgICAgICAgICBleHQ6ICcudGFyLmd6JywgLy8gQ3VzdG9tIGV4dGVuc2lvblxcbiAgICAgICAgICAgIHNlbGVjdGFibGU6IGZhbHNlLCAvLyBEaXNhYmxlIHNlbGVjdGlvblxcbiAgICAgICAgICAgIHNpemU6IDU0MzAwMDAwMDAwLFxcbiAgICAgICAgICAgIG1vZERhdGU6IG5ldyBEYXRlKCksXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAncnR5JyxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IG9wZW5hYmxlLnBlbScsXFxuICAgICAgICAgICAgb3BlbmFibGU6IGZhbHNlLCAvLyBQcmV2ZW50IG9wZW5pbmdcXG4gICAgICAgICAgICBzaXplOiAxMDAwMDAwMDAsXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnYnRqJyxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IGRyYWdnYWJsZS5leGUnLFxcbiAgICAgICAgICAgIGRyYWdnYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgdGhpcyBmaWxlcyBmcm9tIGJlaW5nIGRyYWdnZWRcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICd1cHEnLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgZHJvcHBhYmxlJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgICAgICBkcm9wcGFibGU6IGZhbHNlLCAvLyBQcmV2ZW50IGZpbGVzIGZyb20gYmVpbmcgZHJvcHBlZCBpbnRvIHRoaXMgZm9sZGVyXFxuICAgICAgICB9LFxcbiAgICBdO1xcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCIsXCJsb2NhdGlvbnNNYXBcIjp7XCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtZGlzcGxheWluZy1maWxlcy0tZmlsZXMtYXJyYXktZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzMsXCJsaW5lXCI6MzV9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjoxMDl9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzMsXCJsaW5lXCI6MzV9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6MTA5fX19fSxcInN0b3J5U291cmNlXCI6e1wic291cmNlXCI6XCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHtcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVBcnJheSxcXG4gICAgRmlsZUJyb3dzZXIsXFxuICAgIEZpbGVMaXN0LFxcbiAgICBGaWxlU2VhcmNoLFxcbiAgICBGaWxlVG9vbGJhcixcXG59IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAyLURpc3BsYXlpbmctZmlsZXMubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8RGlzcGxheWluZyBmaWxlcycsXFxuICAgIHBhcmFtZXRlcnM6IHtcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBGaWxlc0FycmF5RXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgZmlsZXM6IEZpbGVBcnJheSA9IFtcXG4gICAgICAgIG51bGwsIC8vIExvYWRpbmcgYW5pbWF0aW9uIHdpbGwgYmUgc2hvd24gZm9yIHRoaXMgZmlsZVxcbiAgICAgICAgbnVsbCxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ25UZScsXFxuICAgICAgICAgICAgbmFtZTogJ05vcm1hbCBmaWxlLnlhbWwnLFxcbiAgICAgICAgICAgIGlzRGlyOiBmYWxzZSxcXG4gICAgICAgICAgICBpc0hpZGRlbjogdHJ1ZSxcXG4gICAgICAgICAgICBzaXplOiA4OTAsXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnenhjJyxcXG4gICAgICAgICAgICBuYW1lOiAnSGlkZGVuIGZpbGUubXA0JyxcXG4gICAgICAgICAgICBpc0RpcjogZmFsc2UsXFxuICAgICAgICAgICAgaXNIaWRkZW46IHRydWUsXFxuICAgICAgICAgICAgc2l6ZTogODkwLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ2JubScsXFxuICAgICAgICAgICAgbmFtZTogJ05vcm1hbCBmb2xkZXInLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgICAgIGNoaWxkcmVuSWRzOiBbJ3JhbmRvbS1pZC0xJywgJ3JhbmRvbS1pZC0yJ10sXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAndmZyJyxcXG4gICAgICAgICAgICBuYW1lOiAnU3ltbGluayBmb2xkZXInLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgICAgIGlzU3ltbGluazogdHJ1ZSxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdxd2UnLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3Qgc2VsZWN0YWJsZS50YXIuZ3onLFxcbiAgICAgICAgICAgIGV4dDogJy50YXIuZ3onLCAvLyBDdXN0b20gZXh0ZW5zaW9uXFxuICAgICAgICAgICAgc2VsZWN0YWJsZTogZmFsc2UsIC8vIERpc2FibGUgc2VsZWN0aW9uXFxuICAgICAgICAgICAgc2l6ZTogNTQzMDAwMDAwMDAsXFxuICAgICAgICAgICAgbW9kRGF0ZTogbmV3IERhdGUoKSxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdydHknLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3Qgb3BlbmFibGUucGVtJyxcXG4gICAgICAgICAgICBvcGVuYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgb3BlbmluZ1xcbiAgICAgICAgICAgIHNpemU6IDEwMDAwMDAwMCxcXG4gICAgICAgIH0sXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdidGonLFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgZHJhZ2dhYmxlLmV4ZScsXFxuICAgICAgICAgICAgZHJhZ2dhYmxlOiBmYWxzZSwgLy8gUHJldmVudCB0aGlzIGZpbGVzIGZyb20gYmVpbmcgZHJhZ2dlZFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ3VwcScsXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBkcm9wcGFibGUnLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgICAgIGRyb3BwYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgZmlsZXMgZnJvbSBiZWluZyBkcm9wcGVkIGludG8gdGhpcyBmb2xkZXJcXG4gICAgICAgIH0sXFxuICAgIF07XFxuXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXG4gICAgfTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIixcImxvY2F0aW9uc01hcFwiOntcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1kaXNwbGF5aW5nLWZpbGVzLS1maWxlcy1hcnJheS1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozMyxcImxpbmVcIjoyN30sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjEwMX0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMyxcImxpbmVcIjoyN30sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjoxMDF9fX19LFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXG4gICAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBGaWxlc0FycmF5RXhhbXBsZSA9ICgpID0+IHtcbiAgICBjb25zdCBmaWxlczogRmlsZUFycmF5ID0gW1xuICAgICAgICBudWxsLCAvLyBMb2FkaW5nIGFuaW1hdGlvbiB3aWxsIGJlIHNob3duIGZvciB0aGlzIGZpbGVcbiAgICAgICAgbnVsbCxcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICduVGUnLFxuICAgICAgICAgICAgbmFtZTogJ05vcm1hbCBmaWxlLnlhbWwnLFxuICAgICAgICAgICAgaXNEaXI6IGZhbHNlLFxuICAgICAgICAgICAgaXNIaWRkZW46IHRydWUsXG4gICAgICAgICAgICBzaXplOiA4OTAsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAnenhjJyxcbiAgICAgICAgICAgIG5hbWU6ICdIaWRkZW4gZmlsZS5tcDQnLFxuICAgICAgICAgICAgaXNEaXI6IGZhbHNlLFxuICAgICAgICAgICAgaXNIaWRkZW46IHRydWUsXG4gICAgICAgICAgICBzaXplOiA4OTAsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAnYm5tJyxcbiAgICAgICAgICAgIG5hbWU6ICdOb3JtYWwgZm9sZGVyJyxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxuICAgICAgICAgICAgY2hpbGRyZW5JZHM6IFsncmFuZG9tLWlkLTEnLCAncmFuZG9tLWlkLTInXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICd2ZnInLFxuICAgICAgICAgICAgbmFtZTogJ1N5bWxpbmsgZm9sZGVyJyxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxuICAgICAgICAgICAgaXNTeW1saW5rOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ3F3ZScsXG4gICAgICAgICAgICBuYW1lOiAnTm90IHNlbGVjdGFibGUudGFyLmd6JyxcbiAgICAgICAgICAgIGV4dDogJy50YXIuZ3onLCAvLyBDdXN0b20gZXh0ZW5zaW9uXG4gICAgICAgICAgICBzZWxlY3RhYmxlOiBmYWxzZSwgLy8gRGlzYWJsZSBzZWxlY3Rpb25cbiAgICAgICAgICAgIHNpemU6IDU0MzAwMDAwMDAwLFxuICAgICAgICAgICAgbW9kRGF0ZTogbmV3IERhdGUoKSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICdydHknLFxuICAgICAgICAgICAgbmFtZTogJ05vdCBvcGVuYWJsZS5wZW0nLFxuICAgICAgICAgICAgb3BlbmFibGU6IGZhbHNlLCAvLyBQcmV2ZW50IG9wZW5pbmdcbiAgICAgICAgICAgIHNpemU6IDEwMDAwMDAwMCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICdidGonLFxuICAgICAgICAgICAgbmFtZTogJ05vdCBkcmFnZ2FibGUuZXhlJyxcbiAgICAgICAgICAgIGRyYWdnYWJsZTogZmFsc2UsIC8vIFByZXZlbnQgdGhpcyBmaWxlcyBmcm9tIGJlaW5nIGRyYWdnZWRcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICd1cHEnLFxuICAgICAgICAgICAgbmFtZTogJ05vdCBkcm9wcGFibGUnLFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXG4gICAgICAgICAgICBkcm9wcGFibGU6IGZhbHNlLCAvLyBQcmV2ZW50IGZpbGVzIGZyb20gYmVpbmcgZHJvcHBlZCBpbnRvIHRoaXMgZm9sZGVyXG4gICAgICAgIH0sXG4gICAgXTtcblxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBcIlRoZSBgRmlsZUJyb3dzZXJgIGNvbXBvbmVudCBoYXMgb25seSBvbmUgcmVxdWlyZWQgcHJvcCAtIHRoZSBgZmlsZXNgIGFycmF5OlxcblxcbmBgYHRzeFxcbmNvbnN0IEZpbGVzRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgZmlsZXMgPSBbXFxuICAgICAgICBudWxsLCAvLyBXaWxsIHNob3cgbG9hZGluZyBhbmltYXRpb25cXG4gICAgICAgIHsgaWQ6ICd4V2JaJywgbmFtZTogJ0luc3RydWN0aW9ucy50eHQnIH0sXFxuICAgICAgICB7IGlkOiAneFdiWicsIG5hbWU6ICdUb29scycsIGlzRGlyOiB0cnVlIH0sXFxuICAgIF07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8RmlsZUJyb3dzZXIgZmlsZXM9e2ZpbGVzfT5cXG4gICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcbiAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgKTtcXG59O1xcbmBgYFxcblxcblRoaXMgYXJyYXkgZGVzY3JpYmVzIHRoZSBmaWxlcyB0aGF0IENob25reSBzaG91bGQgc2hvdyB0byB0aGUgdXNlci4gSXQgY2FuIGNvbnRhaW5cXG5maWxlIGRlc2NyaXB0aW9ucyAoYXMgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3RzKSBvciBgbnVsbGAgdmFsdWVzLiBgbnVsbGAgdmFsdWVzXFxuaW5kaWNhdGUgXFxcImxvYWRpbmdcXFwiIGZpbGVzIC0gYSBsb2FkaW5nIHBsYWNlaG9sZGVyIGFuaW1hdGlvbiB3aWxsIGJlIHNob3duIGluIHRoZWlyIHBsYWNlLlxcblxcbiMjIFRoZSBgRmlsZURhdGFgIHR5cGVcXG5cXG5Gb3JtYWxseSwgdGhlIFR5cGVzY3JpcHQgdHlwZSBmb3IgdGhlIGBmaWxlc2AgYXJyYXkgaXM6XFxuXFxuYGBgdHNcXG50eXBlIEZpbGVBcnJheSA9IE51bGxhYmxlPEZpbGVEYXRhPltdO1xcbi8vIGkuZS4gQXJyYXkgb2YgbnVsbHMgYW5kIGBGaWxlRGF0YWAgb2JqZWN0cyBtaXhlZCB0b2dldGhlclxcbmBgYFxcblxcblRoZSBgRmlsZURhdGFgIHR5cGUgaXMgc2hvd24gYmVsb3cuIEl0IG1pZ2h0IGxvb2sgaW50aW1pZGF0aW5nLCBidXQgcGxlYXNlIG5vdGUgdGhhdFxcbmBpZGAgYW5kIGBuYW1lYCBhcmUgdGhlIG9ubHkgMiByZXF1aXJlZCBmaWVsZHMuIEFsbCBvdGhlciBmaWVsZHMgYXJlIG9wdGlvbmFsLCBhbmRcXG5hcmUgdGhlcmUgdG8gZ2l2ZSB5b3UgbW9yZSBjb250cm9sIG92ZXIgaG93IENob25reSBkaXNwbGF5cyB5b3VyIGZpbGVzLlxcblxcbmBgYHRzXFxuaW50ZXJmYWNlIEZpbGVEYXRhIHtcXG4gICAgaWQ6IHN0cmluZzsgLy8gKFJlcXVpcmVkKSBTdHJpbmcgdGhhdCB1bmlxdWVseSBpZGVudGlmaWVzIHRoZSBmaWxlXFxuXFxuICAgIG5hbWU6IHN0cmluZzsgLy8gKFJlcXVpcmVkKSBGdWxsIG5hbWUsIGUuZy4gYE15SW1hZ2UuanBnYFxcbiAgICBleHQ/OiBzdHJpbmc7IC8vIEZpbGUgZXh0ZW5zaW9uLCBlLmcuIGAuanBnYFxcblxcbiAgICBpc0Rpcj86IGJvb2xlYW47IC8vIElzIGEgZGlyZWN0b3J5LCBkZWZhdWx0OiBmYWxzZVxcbiAgICBpc0hpZGRlbj86IGJvb2xlYW47IC8vIElzIGEgaGlkZGVuIGZpbGUsIGRlZmF1bHQ6IGZhbHNlXFxuICAgIGlzU3ltbGluaz86IGJvb2xlYW47IC8vIElzIGEgc3ltbGluaywgZGVmYXVsdDogZmFsc2VcXG4gICAgb3BlbmFibGU/OiBib29sZWFuOyAvLyBDYW4gYmUgb3BlbmVkLCBkZWZhdWx0OiB0cnVlXFxuICAgIHNlbGVjdGFibGU/OiBib29sZWFuOyAvLyBDYW4gYmUgc2VsZWN0ZWQsIGRlZmF1bHQ6IHRydWVcXG4gICAgZHJhZ2dhYmxlPzogYm9vbGVhbjsgLy8gQ2FuIGJlIGRyYWdnZWQsIGRlZmF1bHQ6IHRydWVcXG4gICAgZHJvcHBhYmxlPzogYm9vbGVhbjsgLy8gQ2FuIGhhdmUgZmlsZXMgZHJvcHBlZCBpbnRvIGl0LCBkZWZhdWx0OiB0cnVlXFxuXFxuICAgIHNpemU/OiBudW1iZXI7IC8vIEZpbGUgc2l6ZSBpbiBieXRlc1xcbiAgICBtb2REYXRlPzogRGF0ZTsgLy8gTGFzdCBjaGFuZ2UgZGF0ZVxcblxcbiAgICBwYXJlbnRJZD86IHN0cmluZzsgLy8gSUQgb2YgdGhlIHBhcmVudCBmb2xkZXJcXG4gICAgY2hpbGRyZW5JZHM/OiBzdHJpbmdbXTsgLy8gQW4gYXJyYXkgb2YgSURzIG9mIGNoaWxkcmVuIChvbmx5IGZvciBmb2xkZXJzKVxcblxcbiAgICB0aHVtYm5haWxVcmw/OiBzdHJpbmc7IC8vIEF1dG9tYXRpY2FsbHkgbG9hZCB0aHVtYm5haWwgZnJvbSBoZXJlXFxuXFxuICAgIFtwcm9wZXJ0eTogc3RyaW5nXTogYW55OyAvLyBBbnkgb3RoZXIgdXNlci1kZWZpbmVkIHByb3BlcnR5XFxufVxcbmBgYFxcblxcbjxzcGFuIHN0eWxlPVxcXCJjb2xvcjogcmVkOyBmb250LXdlaWdodDogYm9sZDtcXFwiPlxcbkl0IGlzIHZlcnkgaW1wb3J0YW50IHRoYXQgZmlsZSBJRHMgYXJlIHVuaXF1ZTpcXG48L3NwYW4+XFxuXFxuPiBJZiBmaWxlIElEcyBhcmUgbm90IHVuaXF1ZSwgdGhlIGNvbnNlcXVlbmNlcyBjYW4gYmUgZGlyZSAtIGZvciBleGFtcGxlLCB5b3VyIHVzZXIgY2FuXFxuPiBhY2NpZGVudGFsbHkgZGVsZXRlIHRoZSB3cm9uZyBmaWxlLiBDaG9ua3kgdHJpZXMgdG8gcHJvdGVjdCB5b3UgYnkgc2Nhbm5pbmcgdGhlIGZpbGVzXFxuPiBhcnJheSBmb3IgZHVwbGljYXRlIElEcywgYnV0IHlvdSBzaG91bGQgcHV0IHNvbWUgZXh0cmEgY2hlY2tzIGluIHlvdXIgY29kZSB0b28uIFlvdVxcbj4gY2FuIG5ldmVyIGJlIHRvbyBzYWZlLlxcblxcbkFwYXJ0IGZyb20gdGhlIGFib3ZlLCB0aGVyZSBhcmUgYSBmZXcgb3RoZXIgZGV0YWlscyB5b3Ugc2hvdWxkIGtub3cgYWJvdXQ6XFxuXFxuLSAgIGBmaWxlc2AgYXJyYXkgc2hvdWxkIGJlICoqaW1tdXRhYmxlKiouIElmIHlvdSdyZSBmb2xsb3dpbmcgdGhlIGJlc3QgUmVkdXggcHJhY3RpY2VzLFxcbiAgICB5b3UncmUgZ29vZC4gSWYgeW91IGRvbid0IGtub3cgd2hhdCBpbW11dGFiaWxpdHkgaXMsIHBsZWFzZSByZWFkIHRoZVxcbiAgICBfSW1tdXRhYmlsaXR5XyBzZWN0aW9uIGZyb20gdGhlIHNpZGViYXIuIFRoaXMgaXMgaW1wb3J0YW50Llxcbi0gICBUaGUgZmlsZSBleHRlbnNpb24gaXMgYXV0b21hdGljYWxseSBleHRyYWN0ZWQgZnJvbSB0aGUgYG5hbWVgIGZpZWxkLCBzbyB5b3UgZG9uJ3RcXG4gICAgbmVlZCB0byBwcm92aWRlIGFuIGBleHRgIGZpZWxkIHlvdXJzZWxmLiBJbiB0aGUgcmFyZSBjYXNlIHdoZXJlIHRoZSBhdXRvbWF0aWNcXG4gICAgZXh0ZW5zaW9uIGRldGVjdGlvbiBmYWlscyAoZm9yIGV4YW1wbGU6IGBmaWxlLnRhci5nemApLCB5b3UgY2FuIHByb3ZpZGUgdGhlIGBleHRgXFxuICAgIGZpZWxkIGV4cGxpY2l0bHkuIFBsZWFzZSBtYWtlIHN1cmUgZXh0ZW5zaW9uIGlzIGluY2x1ZGVkIGluIGJvdGggYG5hbWVgIGFuZCBgZXh0YCxcXG4gICAgZS5nLiBge2lkOiAnQXNWeicsIG5hbWU6ICdmaWxlLnRhci5neicsIGV4dDogJy50YXIuZ3onfWAuXFxuXFxuIyMgRXhhbXBsZSBmaWxlIGFycmF5XFxuXFxuVGhlIF9MaXZlIEV4YW1wbGVfIGJlbG93IHRyaWVzIHRvIHNob3cgY2FzZSBhbGwgZGlmZmVyZW50IGZpbGUgY29uZmlndXJhdGlvbnMuIFRyeVxcbnBlcmZvcm1pbmcgZGlmZmVyZW50IGFjdGlvbnMgKHNlbGVjdGlvbnMsIGRyYWcgJiBkcm9wKSBhbmQgc2VlIGhvdyBlYWNoIGZpbGUgcmVhY3RzLlxcbkNsaWNrIG9uIGBWaWV3IENvZGVgIGF0IHRoZSBib3R0b20gdG8gc2VlIHRoZSBmaWxlIGFycmF5IGRlZmluaXRpb24uXFxuXCI7IiwiXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSwgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAzLVNwZWNpZnlpbmctZm9sZGVyLm1kJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8U3BlY2lmeWluZyBjdXJyZW50IGZvbGRlcicsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBGb2xkZXJDaGFpbkV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnZ001dFRlJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdNeSBEb2N1bWVudHMnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnbVR4WWVBJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgT3BlbmFibGUnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgICAgICBvcGVuYWJsZTogZmFsc2UsIC8vIFRoaXMgYnV0dG9uIHdpbGwgbm90IGJlIGNsaWNrYWJsZVxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICBudWxsLCAvLyBMb2FkaW5nIGFuaW1hdGlvbiB3aWxsIGJlIHNob3duIGZvciB0aGlzIGZpbGVcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICd2eFd0QScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnVW5pdHkgUHJvamVjdHMnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnbVQ3RXQnLFxcXFxuICAgICAgICAgICAgbmFtZTogJ0dvb2QgUHJvamVjdHMnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e1tdfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwiMS1maWxlLWJyb3dzZXItYmFzaWNzLXNwZWNpZnlpbmctY3VycmVudC1mb2xkZXItLWZvbGRlci1jaGFpbi1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzQsXFxcImxpbmVcXFwiOjE5fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjF9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozNCxcXFwibGluZVxcXCI6MTl9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjF9fX07XFxuICAgIFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSwgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAzLVNwZWNpZnlpbmctZm9sZGVyLm1kJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfFNwZWNpZnlpbmcgY3VycmVudCBmb2xkZXInLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcInN0b3J5U291cmNlXFxcIjp7XFxcInNvdXJjZVxcXCI6XFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMy1TcGVjaWZ5aW5nLWZvbGRlci5tZCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfFNwZWNpZnlpbmcgY3VycmVudCBmb2xkZXInLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgRm9sZGVyQ2hhaW5FeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW1xcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ2dNNXRUZScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTXkgRG9jdW1lbnRzJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ21UeFllQScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IE9wZW5hYmxlJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcXFxuICAgICAgICAgICAgb3BlbmFibGU6IGZhbHNlLCAvLyBUaGlzIGJ1dHRvbiB3aWxsIG5vdCBiZSBjbGlja2FibGVcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAgbnVsbCwgLy8gTG9hZGluZyBhbmltYXRpb24gd2lsbCBiZSBzaG93biBmb3IgdGhpcyBmaWxlXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAndnhXdEEnLFxcXFxuICAgICAgICAgICAgbmFtZTogJ1VuaXR5IFByb2plY3RzJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ21UN0V0JyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdHb29kIFByb2plY3RzJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcXFxuICAgICAgICB9LFxcXFxuICAgIF07XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtbXX1cXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiLFxcXCJsb2NhdGlvbnNNYXBcXFwiOntcXFwiMS1maWxlLWJyb3dzZXItYmFzaWNzLXNwZWNpZnlpbmctY3VycmVudC1mb2xkZXItLWZvbGRlci1jaGFpbi1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzQsXFxcImxpbmVcXFwiOjE5fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjF9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozNCxcXFwibGluZVxcXCI6MTl9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjF9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEZvbGRlckNoYWluRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdnTTV0VGUnLFxcbiAgICAgICAgICAgIG5hbWU6ICdNeSBEb2N1bWVudHMnLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ21UeFllQScsXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBPcGVuYWJsZScsXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxuICAgICAgICAgICAgb3BlbmFibGU6IGZhbHNlLCAvLyBUaGlzIGJ1dHRvbiB3aWxsIG5vdCBiZSBjbGlja2FibGVcXG4gICAgICAgIH0sXFxuICAgICAgICBudWxsLCAvLyBMb2FkaW5nIGFuaW1hdGlvbiB3aWxsIGJlIHNob3duIGZvciB0aGlzIGZpbGVcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ3Z4V3RBJyxcXG4gICAgICAgICAgICBuYW1lOiAnVW5pdHkgUHJvamVjdHMnLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ21UN0V0JyxcXG4gICAgICAgICAgICBuYW1lOiAnR29vZCBQcm9qZWN0cycsXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxuICAgICAgICB9LFxcbiAgICBdO1xcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17W119XFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiMS1maWxlLWJyb3dzZXItYmFzaWNzLXNwZWNpZnlpbmctY3VycmVudC1mb2xkZXItLWZvbGRlci1jaGFpbi1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozNCxcImxpbmVcIjoyN30sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjY5fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjM0LFwibGluZVwiOjI3fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjY5fX19O1xuICAgIFxuXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSwgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAzLVNwZWNpZnlpbmctZm9sZGVyLm1kJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfFNwZWNpZnlpbmcgY3VycmVudCBmb2xkZXInLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgRm9sZGVyQ2hhaW5FeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFtcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ2dNNXRUZScsXFxuICAgICAgICAgICAgbmFtZTogJ015IERvY3VtZW50cycsXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnbVR4WWVBJyxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IE9wZW5hYmxlJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgICAgICBvcGVuYWJsZTogZmFsc2UsIC8vIFRoaXMgYnV0dG9uIHdpbGwgbm90IGJlIGNsaWNrYWJsZVxcbiAgICAgICAgfSxcXG4gICAgICAgIG51bGwsIC8vIExvYWRpbmcgYW5pbWF0aW9uIHdpbGwgYmUgc2hvd24gZm9yIHRoaXMgZmlsZVxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAndnhXdEEnLFxcbiAgICAgICAgICAgIG5hbWU6ICdVbml0eSBQcm9qZWN0cycsXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxuICAgICAgICB9LFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIGlkOiAnbVQ3RXQnLFxcbiAgICAgICAgICAgIG5hbWU6ICdHb29kIFByb2plY3RzJyxcXG4gICAgICAgICAgICBpc0RpcjogdHJ1ZSxcXG4gICAgICAgIH0sXFxuICAgIF07XFxuXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXG4gICAgfTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtbXX1cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCI7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCIxLWZpbGUtYnJvd3Nlci1iYXNpY3Mtc3BlY2lmeWluZy1jdXJyZW50LWZvbGRlci0tZm9sZGVyLWNoYWluLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjM0LFwibGluZVwiOjE5fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6NjF9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzQsXCJsaW5lXCI6MTl9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6NjF9fX07XG4gICAgXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XG5cbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcbi8vIEB0cy1pZ25vcmVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDMtU3BlY2lmeWluZy1mb2xkZXIubWQnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWRlZmF1bHQtZXhwb3J0XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8U3BlY2lmeWluZyBjdXJyZW50IGZvbGRlcicsXG4gICAgcGFyYW1ldGVyczoge1wic3RvcnlTb3VyY2VcIjp7XCJzb3VyY2VcIjpcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSwgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAzLVNwZWNpZnlpbmctZm9sZGVyLm1kJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8U3BlY2lmeWluZyBjdXJyZW50IGZvbGRlcicsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBGb2xkZXJDaGFpbkV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnZ001dFRlJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdNeSBEb2N1bWVudHMnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnbVR4WWVBJyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdOb3QgT3BlbmFibGUnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgICAgICBvcGVuYWJsZTogZmFsc2UsIC8vIFRoaXMgYnV0dG9uIHdpbGwgbm90IGJlIGNsaWNrYWJsZVxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICBudWxsLCAvLyBMb2FkaW5nIGFuaW1hdGlvbiB3aWxsIGJlIHNob3duIGZvciB0aGlzIGZpbGVcXFxcbiAgICAgICAge1xcXFxuICAgICAgICAgICAgaWQ6ICd2eFd0QScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnVW5pdHkgUHJvamVjdHMnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAnbVQ3RXQnLFxcXFxuICAgICAgICAgICAgbmFtZTogJ0dvb2QgUHJvamVjdHMnLFxcXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e1tdfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwiMS1maWxlLWJyb3dzZXItYmFzaWNzLXNwZWNpZnlpbmctY3VycmVudC1mb2xkZXItLWZvbGRlci1jaGFpbi1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzQsXFxcImxpbmVcXFwiOjE5fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjF9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozNCxcXFwibGluZVxcXCI6MTl9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjF9fX07XFxuICAgIFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSwgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAzLVNwZWNpZnlpbmctZm9sZGVyLm1kJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfFNwZWNpZnlpbmcgY3VycmVudCBmb2xkZXInLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcInN0b3J5U291cmNlXFxcIjp7XFxcInNvdXJjZVxcXCI6XFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMy1TcGVjaWZ5aW5nLWZvbGRlci5tZCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfFNwZWNpZnlpbmcgY3VycmVudCBmb2xkZXInLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgRm9sZGVyQ2hhaW5FeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW1xcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ2dNNXRUZScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTXkgRG9jdW1lbnRzJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ21UeFllQScsXFxcXG4gICAgICAgICAgICBuYW1lOiAnTm90IE9wZW5hYmxlJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcXFxuICAgICAgICAgICAgb3BlbmFibGU6IGZhbHNlLCAvLyBUaGlzIGJ1dHRvbiB3aWxsIG5vdCBiZSBjbGlja2FibGVcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAgbnVsbCwgLy8gTG9hZGluZyBhbmltYXRpb24gd2lsbCBiZSBzaG93biBmb3IgdGhpcyBmaWxlXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIGlkOiAndnhXdEEnLFxcXFxuICAgICAgICAgICAgbmFtZTogJ1VuaXR5IFByb2plY3RzJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICB7XFxcXG4gICAgICAgICAgICBpZDogJ21UN0V0JyxcXFxcbiAgICAgICAgICAgIG5hbWU6ICdHb29kIFByb2plY3RzJyxcXFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcXFxuICAgICAgICB9LFxcXFxuICAgIF07XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtbXX1cXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiLFxcXCJsb2NhdGlvbnNNYXBcXFwiOntcXFwiMS1maWxlLWJyb3dzZXItYmFzaWNzLXNwZWNpZnlpbmctY3VycmVudC1mb2xkZXItLWZvbGRlci1jaGFpbi1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzQsXFxcImxpbmVcXFwiOjE5fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjF9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozNCxcXFwibGluZVxcXCI6MTl9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjF9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEZvbGRlckNoYWluRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdnTTV0VGUnLFxcbiAgICAgICAgICAgIG5hbWU6ICdNeSBEb2N1bWVudHMnLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ21UeFllQScsXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBPcGVuYWJsZScsXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxuICAgICAgICAgICAgb3BlbmFibGU6IGZhbHNlLCAvLyBUaGlzIGJ1dHRvbiB3aWxsIG5vdCBiZSBjbGlja2FibGVcXG4gICAgICAgIH0sXFxuICAgICAgICBudWxsLCAvLyBMb2FkaW5nIGFuaW1hdGlvbiB3aWxsIGJlIHNob3duIGZvciB0aGlzIGZpbGVcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ3Z4V3RBJyxcXG4gICAgICAgICAgICBuYW1lOiAnVW5pdHkgUHJvamVjdHMnLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ21UN0V0JyxcXG4gICAgICAgICAgICBuYW1lOiAnR29vZCBQcm9qZWN0cycsXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxuICAgICAgICB9LFxcbiAgICBdO1xcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17W119XFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiLFwibG9jYXRpb25zTWFwXCI6e1wiMS1maWxlLWJyb3dzZXItYmFzaWNzLXNwZWNpZnlpbmctY3VycmVudC1mb2xkZXItLWZvbGRlci1jaGFpbi1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozNCxcImxpbmVcIjoyN30sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjY5fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjM0LFwibGluZVwiOjI3fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjY5fX19fSxcInN0b3J5U291cmNlXCI6e1wic291cmNlXCI6XCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMy1TcGVjaWZ5aW5nLWZvbGRlci5tZCc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xTcGVjaWZ5aW5nIGN1cnJlbnQgZm9sZGVyJyxcXG4gICAgcGFyYW1ldGVyczoge1xcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEZvbGRlckNoYWluRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbXFxuICAgICAgICB7XFxuICAgICAgICAgICAgaWQ6ICdnTTV0VGUnLFxcbiAgICAgICAgICAgIG5hbWU6ICdNeSBEb2N1bWVudHMnLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ21UeFllQScsXFxuICAgICAgICAgICAgbmFtZTogJ05vdCBPcGVuYWJsZScsXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxuICAgICAgICAgICAgb3BlbmFibGU6IGZhbHNlLCAvLyBUaGlzIGJ1dHRvbiB3aWxsIG5vdCBiZSBjbGlja2FibGVcXG4gICAgICAgIH0sXFxuICAgICAgICBudWxsLCAvLyBMb2FkaW5nIGFuaW1hdGlvbiB3aWxsIGJlIHNob3duIGZvciB0aGlzIGZpbGVcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ3Z4V3RBJyxcXG4gICAgICAgICAgICBuYW1lOiAnVW5pdHkgUHJvamVjdHMnLFxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxcbiAgICAgICAgfSxcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBpZDogJ21UN0V0JyxcXG4gICAgICAgICAgICBuYW1lOiAnR29vZCBQcm9qZWN0cycsXFxuICAgICAgICAgICAgaXNEaXI6IHRydWUsXFxuICAgICAgICB9LFxcbiAgICBdO1xcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17W119XFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiLFwibG9jYXRpb25zTWFwXCI6e1wiMS1maWxlLWJyb3dzZXItYmFzaWNzLXNwZWNpZnlpbmctY3VycmVudC1mb2xkZXItLWZvbGRlci1jaGFpbi1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozNCxcImxpbmVcIjoxOX0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjYxfSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjM0LFwibGluZVwiOjE5fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjYxfX19fSxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxuICAgIH0sXG59O1xuXG5leHBvcnQgY29uc3QgRm9sZGVyQ2hhaW5FeGFtcGxlID0gKCkgPT4ge1xuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW1xuICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ2dNNXRUZScsXG4gICAgICAgICAgICBuYW1lOiAnTXkgRG9jdW1lbnRzJyxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ21UeFllQScsXG4gICAgICAgICAgICBuYW1lOiAnTm90IE9wZW5hYmxlJyxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxuICAgICAgICAgICAgb3BlbmFibGU6IGZhbHNlLCAvLyBUaGlzIGJ1dHRvbiB3aWxsIG5vdCBiZSBjbGlja2FibGVcbiAgICAgICAgfSxcbiAgICAgICAgbnVsbCwgLy8gTG9hZGluZyBhbmltYXRpb24gd2lsbCBiZSBzaG93biBmb3IgdGhpcyBmaWxlXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAndnhXdEEnLFxuICAgICAgICAgICAgbmFtZTogJ1VuaXR5IFByb2plY3RzJyxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ21UN0V0JyxcbiAgICAgICAgICAgIG5hbWU6ICdHb29kIFByb2plY3RzJyxcbiAgICAgICAgICAgIGlzRGlyOiB0cnVlLFxuICAgICAgICB9LFxuICAgIF07XG5cbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxuICAgICAgICAgICAgICAgIGZpbGVzPXtbXX1cbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBcIkxpa2UgYW55IG90aGVyIGZpbGUgYnJvd3NlciwgQ2hvbmt5IGNhbiBkaXNwbGF5IHRoZSBwYXRoIHRvIHRoZSBjdXJyZW50IGZvbGRlciBpbiB0aGVcXG50b29sYmFyIGFib3ZlIHRoZSBmaWxlcy4gVG8gZW5hYmxlIHRoaXMgZnVuY3Rpb25hbGl0eSwgeW91IHdpbGwgbmVlZCB0byBhZGQgdGhlXFxuYDxGaWxlVG9vbGJhciAvPmAgdG8geW91ciBjb21wb25lbnQgYW5kIHBhc3MgdGhlIGBmb2xkZXJDaGFpbmAgYXJyYXkgdG8gYEZpbGVCcm93c2VyYDpcXG5cXG5gYGB0c3hcXG5jb25zdCBGb2xkZXJDaGFpbkV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnTVRlJywgbmFtZTogJ015IERvY3VtZW50cycsIGlzRGlyOiB0cnVlIH1dO1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPEZpbGVCcm93c2VyIGZpbGVzPXtbXX0gZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufT5cXG4gICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz4gey8qIDwtLS0tLSAqL31cXG4gICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICk7XFxufTtcXG5gYGBcXG5cXG5Gb2xkZXIgY2hhaW4gZm9sbG93cyB0aGUgZXhhY3Qgc2FtZSBydWxlcyBhcyB0aGUgYGZpbGVzYCBhcnJheSBkZXNjcmliZWQgaW5cXG5fRGlzcGxheWluZyBmaWxlc18gc2VjdGlvbi4gSXQgY2FuIGFsc28gY29udGFpbiBgbnVsbGAgdmFsdWVzIHRvIGluZGljYXRlIGxvYWRpbmdcXG5maWxlcywgYW5kIHRoZSBvYmplY3RzIGluc2lkZSBpdCBzaG91bGQgZm9sbG93IHRoZSBgRmlsZURhdGFgIHR5cGUuXFxuXFxuU29tZSBub3RlczpcXG5cXG4tICAgVGhlIGZpbGVzIGluIHRoZSBgZm9sZGVyQ2hhaW5gIGFycmF5IGRvbid0IG5lZWQgdG8gaGF2ZSBgaXNEaXJgIHNldCB0byBgdHJ1ZWAuXFxuLSAgIENsaWNraW5nIG9uIGFuIGl0ZW0gaW4gdGhlIGZvbGRlciBjaGFpbiB3aWxsIG9wZW4gaXQsIHVubGVzcyBpdCBpcyBgbnVsbGAgb3IgaGFzXFxuICAgIGBvcGVuYWJsZWAgc2V0IHRvIGZhbHNlLlxcbi0gICBUaGUgXFxcIkdvIHVwIGEgZGlyZWN0b3J5XFxcIiBidXR0b24gb25seSB3b3JrcyB3aGVuIHRoZSBzZWNvbmQtdG8tbGFzdCBmaWxlIGluIHRoZVxcbiAgICBmb2xkZXIgY2hhaW4gaXMgb3BlbmFibGUuXFxuXCI7IiwiXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIENob25reUFjdGlvbnMsXFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQnJvd3NlcixcXFxcbiAgICBGaWxlTGlzdCxcXFxcbiAgICBGaWxlVG9vbGJhcixcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDQtQWN0aW9ucy5tZCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfFVzaW5nIGZpbGUgYWN0aW9ucycsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBBY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgLy8gTG9nIGFjdGlvbiB0byBjb25zb2xlXFxcXG4gICAgICAgIFxcXFxuICAgICAgICBjb25zb2xlLmxvZygnXFxcXFxcXFxuQWN0aW9uIG9iamVjdDonLCBhY3Rpb24sICdcXFxcXFxcXG5BY3Rpb24gZGF0YTonLCBkYXRhKTtcXFxcblxcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IERvY3VtZW50cycsIGlzRGlyOiB0cnVlIH1dO1xcXFxuICAgIGNvbnN0IGZpbGVzID0gW1xcXFxuICAgICAgICB7IGlkOiAnbUhlNEExJywgbmFtZTogJ01lYW5pbmcgb2YgbGlmZS50eHQnLCBzaXplOiAzMTQxNSB9LFxcXFxuICAgICAgICB7IGlkOiAnaHVudGVyMicsIG5hbWU6ICdQYXNzd29yZC50eHQnIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdiRWYyNHEnLCBuYW1lOiAnRHJhZyAmIGRyb3AgZmlsZXMgaGVyZScsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIGNvbnN0IGZpbGVBY3Rpb25zID0gW1xcXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNyZWF0ZUZvbGRlcixcXFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5VcGxvYWRGaWxlcyxcXFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Eb3dubG9hZEZpbGVzLFxcXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNvcHlGaWxlcyxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcXFxcXCJsaXZlLWV4YW1wbGVcXFxcXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXFxcXFwibGl2ZS1leGFtcGxlLWFjdGlvblxcXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgIDxzdHJvbmc+Q2hlY2sgeW91ciBicm93c2VyIGNvbnNvbGUgZm9yIGxvZ2dlZCBhY3Rpb25zITwvc3Ryb25nPlxcXFxuICAgICAgICAgICAgPC9kaXY+XFxcXG5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxcXG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2ZpbGVBY3Rpb25zfVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIjtcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1xcXCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtdXNpbmctZmlsZS1hY3Rpb25zLS1hY3Rpb25zLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozMCxcXFwibGluZVxcXCI6MjZ9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo2N30sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjMwLFxcXCJsaW5lXFxcIjoyNn0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo2N319fTtcXG4gICAgXFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7XFxuICAgIENob25reUFjdGlvbnMsXFxuICAgIEZpbGVBY3Rpb24sXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcbiAgICBGaWxlQnJvd3NlcixcXG4gICAgRmlsZUxpc3QsXFxuICAgIEZpbGVUb29sYmFyLFxcbn0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDQtQWN0aW9ucy5tZCc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xVc2luZyBmaWxlIGFjdGlvbnMnLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcInN0b3J5U291cmNlXFxcIjp7XFxcInNvdXJjZVxcXCI6XFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IHtcXFxcbiAgICBDaG9ua3lBY3Rpb25zLFxcXFxuICAgIEZpbGVBY3Rpb24sXFxcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxcXG4gICAgRmlsZUJyb3dzZXIsXFxcXG4gICAgRmlsZUxpc3QsXFxcXG4gICAgRmlsZVRvb2xiYXIsXFxcXG59IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA0LUFjdGlvbnMubWQnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xVc2luZyBmaWxlIGFjdGlvbnMnLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgQWN0aW9uc0V4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgIC8vIExvZyBhY3Rpb24gdG8gY29uc29sZVxcXFxuICAgICAgICBcXFxcbiAgICAgICAgY29uc29sZS5sb2coJ1xcXFxcXFxcbkFjdGlvbiBvYmplY3Q6JywgYWN0aW9uLCAnXFxcXFxcXFxuQWN0aW9uIGRhdGE6JywgZGF0YSk7XFxcXG5cXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBEb2N1bWVudHMnLCBpc0RpcjogdHJ1ZSB9XTtcXFxcbiAgICBjb25zdCBmaWxlcyA9IFtcXFxcbiAgICAgICAgeyBpZDogJ21IZTRBMScsIG5hbWU6ICdNZWFuaW5nIG9mIGxpZmUudHh0Jywgc2l6ZTogMzE0MTUgfSxcXFxcbiAgICAgICAgeyBpZDogJ2h1bnRlcjInLCBuYW1lOiAnUGFzc3dvcmQudHh0JyB9LFxcXFxuICAgICAgICB7IGlkOiAnYkVmMjRxJywgbmFtZTogJ0RyYWcgJiBkcm9wIGZpbGVzIGhlcmUnLCBpc0RpcjogdHJ1ZSB9LFxcXFxuICAgIF07XFxcXG5cXFxcbiAgICBjb25zdCBmaWxlQWN0aW9ucyA9IFtcXFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5DcmVhdGVGb2xkZXIsXFxcXG4gICAgICAgIENob25reUFjdGlvbnMuVXBsb2FkRmlsZXMsXFxcXG4gICAgICAgIENob25reUFjdGlvbnMuRG93bmxvYWRGaWxlcyxcXFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Db3B5RmlsZXMsXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXFxcXFwibGl2ZS1leGFtcGxlXFxcXFxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFxcXFxcImxpdmUtZXhhbXBsZS1hY3Rpb25cXFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICA8c3Ryb25nPkNoZWNrIHlvdXIgYnJvd3NlciBjb25zb2xlIGZvciBsb2dnZWQgYWN0aW9ucyE8L3N0cm9uZz5cXFxcbiAgICAgICAgICAgIDwvZGl2PlxcXFxuXFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcXFxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtmaWxlQWN0aW9uc31cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCIsXFxcImxvY2F0aW9uc01hcFxcXCI6e1xcXCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtdXNpbmctZmlsZS1hY3Rpb25zLS1hY3Rpb25zLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozMCxcXFwibGluZVxcXCI6MjZ9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo2N30sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjMwLFxcXCJsaW5lXFxcIjoyNn0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo2N319fX0sXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgQWN0aW9uc0V4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgLy8gTG9nIGFjdGlvbiB0byBjb25zb2xlXFxuICAgICAgICBcXG4gICAgICAgIGNvbnNvbGUubG9nKCdcXFxcbkFjdGlvbiBvYmplY3Q6JywgYWN0aW9uLCAnXFxcXG5BY3Rpb24gZGF0YTonLCBkYXRhKTtcXG5cXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgRG9jdW1lbnRzJywgaXNEaXI6IHRydWUgfV07XFxuICAgIGNvbnN0IGZpbGVzID0gW1xcbiAgICAgICAgeyBpZDogJ21IZTRBMScsIG5hbWU6ICdNZWFuaW5nIG9mIGxpZmUudHh0Jywgc2l6ZTogMzE0MTUgfSxcXG4gICAgICAgIHsgaWQ6ICdodW50ZXIyJywgbmFtZTogJ1Bhc3N3b3JkLnR4dCcgfSxcXG4gICAgICAgIHsgaWQ6ICdiRWYyNHEnLCBuYW1lOiAnRHJhZyAmIGRyb3AgZmlsZXMgaGVyZScsIGlzRGlyOiB0cnVlIH0sXFxuICAgIF07XFxuXFxuICAgIGNvbnN0IGZpbGVBY3Rpb25zID0gW1xcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5DcmVhdGVGb2xkZXIsXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLlVwbG9hZEZpbGVzLFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Eb3dubG9hZEZpbGVzLFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Db3B5RmlsZXMsXFxuICAgIF07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwibGl2ZS1leGFtcGxlXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwibGl2ZS1leGFtcGxlLWFjdGlvblxcXCI+XFxuICAgICAgICAgICAgICAgIDxzdHJvbmc+Q2hlY2sgeW91ciBicm93c2VyIGNvbnNvbGUgZm9yIGxvZ2dlZCBhY3Rpb25zITwvc3Ryb25nPlxcbiAgICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2ZpbGVBY3Rpb25zfVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiMS1maWxlLWJyb3dzZXItYmFzaWNzLXVzaW5nLWZpbGUtYWN0aW9ucy0tYWN0aW9ucy1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozMCxcImxpbmVcIjozNH0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjc1fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjMwLFwibGluZVwiOjM0fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjc1fX19O1xuICAgIFxuXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQge1xcbiAgICBDaG9ua3lBY3Rpb25zLFxcbiAgICBGaWxlQWN0aW9uLFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXG4gICAgRmlsZUJyb3dzZXIsXFxuICAgIEZpbGVMaXN0LFxcbiAgICBGaWxlVG9vbGJhcixcXG59IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA0LUFjdGlvbnMubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8VXNpbmcgZmlsZSBhY3Rpb25zJyxcXG4gICAgcGFyYW1ldGVyczoge1xcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIC8vIExvZyBhY3Rpb24gdG8gY29uc29sZVxcbiAgICAgICAgXFxuICAgICAgICBjb25zb2xlLmxvZygnXFxcXG5BY3Rpb24gb2JqZWN0OicsIGFjdGlvbiwgJ1xcXFxuQWN0aW9uIGRhdGE6JywgZGF0YSk7XFxuXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IERvY3VtZW50cycsIGlzRGlyOiB0cnVlIH1dO1xcbiAgICBjb25zdCBmaWxlcyA9IFtcXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXFxuICAgICAgICB7IGlkOiAnaHVudGVyMicsIG5hbWU6ICdQYXNzd29yZC50eHQnIH0sXFxuICAgICAgICB7IGlkOiAnYkVmMjRxJywgbmFtZTogJ0RyYWcgJiBkcm9wIGZpbGVzIGhlcmUnLCBpc0RpcjogdHJ1ZSB9LFxcbiAgICBdO1xcblxcbiAgICBjb25zdCBmaWxlQWN0aW9ucyA9IFtcXG4gICAgICAgIENob25reUFjdGlvbnMuQ3JlYXRlRm9sZGVyLFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5VcGxvYWRGaWxlcyxcXG4gICAgICAgIENob25reUFjdGlvbnMuRG93bmxvYWRGaWxlcyxcXG4gICAgICAgIENob25reUFjdGlvbnMuQ29weUZpbGVzLFxcbiAgICBdO1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImxpdmUtZXhhbXBsZVxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImxpdmUtZXhhbXBsZS1hY3Rpb25cXFwiPlxcbiAgICAgICAgICAgICAgICA8c3Ryb25nPkNoZWNrIHlvdXIgYnJvd3NlciBjb25zb2xlIGZvciBsb2dnZWQgYWN0aW9ucyE8L3N0cm9uZz5cXG4gICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtmaWxlQWN0aW9uc31cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIjtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcIjEtZmlsZS1icm93c2VyLWJhc2ljcy11c2luZy1maWxlLWFjdGlvbnMtLWFjdGlvbnMtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6MjZ9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo2N30sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMCxcImxpbmVcIjoyNn0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo2N319fTtcbiAgICBcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcblxuaW1wb3J0IHtcbiAgICBDaG9ua3lBY3Rpb25zLFxuICAgIEZpbGVBY3Rpb24sXG4gICAgRmlsZUFjdGlvbkRhdGEsXG4gICAgRmlsZUJyb3dzZXIsXG4gICAgRmlsZUxpc3QsXG4gICAgRmlsZVRvb2xiYXIsXG59IGZyb20gJ2Nob25reSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XG4vLyBAdHMtaWdub3JlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA0LUFjdGlvbnMubWQnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWRlZmF1bHQtZXhwb3J0XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8VXNpbmcgZmlsZSBhY3Rpb25zJyxcbiAgICBwYXJhbWV0ZXJzOiB7XCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiXFxuICAgICAgXFxuICAgICAgLy8gQHRzLW5vY2hlY2tcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fU1RPUllfXyA9IFxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgQ2hvbmt5QWN0aW9ucyxcXFxcbiAgICBGaWxlQWN0aW9uLFxcXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcXFxuICAgIEZpbGVCcm93c2VyLFxcXFxuICAgIEZpbGVMaXN0LFxcXFxuICAgIEZpbGVUb29sYmFyLFxcXFxufSBmcm9tICdjaG9ua3knO1xcXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNC1BY3Rpb25zLm1kJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8VXNpbmcgZmlsZSBhY3Rpb25zJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICAvLyBMb2cgYWN0aW9uIHRvIGNvbnNvbGVcXFxcbiAgICAgICAgXFxcXG4gICAgICAgIGNvbnNvbGUubG9nKCdcXFxcXFxcXG5BY3Rpb24gb2JqZWN0OicsIGFjdGlvbiwgJ1xcXFxcXFxcbkFjdGlvbiBkYXRhOicsIGRhdGEpO1xcXFxuXFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgRG9jdW1lbnRzJywgaXNEaXI6IHRydWUgfV07XFxcXG4gICAgY29uc3QgZmlsZXMgPSBbXFxcXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXFxcXG4gICAgICAgIHsgaWQ6ICdodW50ZXIyJywgbmFtZTogJ1Bhc3N3b3JkLnR4dCcgfSxcXFxcbiAgICAgICAgeyBpZDogJ2JFZjI0cScsIG5hbWU6ICdEcmFnICYgZHJvcCBmaWxlcyBoZXJlJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgY29uc3QgZmlsZUFjdGlvbnMgPSBbXFxcXG4gICAgICAgIENob25reUFjdGlvbnMuQ3JlYXRlRm9sZGVyLFxcXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLlVwbG9hZEZpbGVzLFxcXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkRvd25sb2FkRmlsZXMsXFxcXG4gICAgICAgIENob25reUFjdGlvbnMuQ29weUZpbGVzLFxcXFxuICAgIF07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFxcXFxcImxpdmUtZXhhbXBsZVxcXFxcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcXFxcXCJsaXZlLWV4YW1wbGUtYWN0aW9uXFxcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgPHN0cm9uZz5DaGVjayB5b3VyIGJyb3dzZXIgY29uc29sZSBmb3IgbG9nZ2VkIGFjdGlvbnMhPC9zdHJvbmc+XFxcXG4gICAgICAgICAgICA8L2Rpdj5cXFxcblxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICBmaWxlQWN0aW9ucz17ZmlsZUFjdGlvbnN9XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiO1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XFxcIjEtZmlsZS1icm93c2VyLWJhc2ljcy11c2luZy1maWxlLWFjdGlvbnMtLWFjdGlvbnMtZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjMwLFxcXCJsaW5lXFxcIjoyNn0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjY3fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzAsXFxcImxpbmVcXFwiOjI2fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjY3fX19O1xcbiAgICBcXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHtcXG4gICAgQ2hvbmt5QWN0aW9ucyxcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVCcm93c2VyLFxcbiAgICBGaWxlTGlzdCxcXG4gICAgRmlsZVRvb2xiYXIsXFxufSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNC1BY3Rpb25zLm1kJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfFVzaW5nIGZpbGUgYWN0aW9ucycsXFxuICAgIHBhcmFtZXRlcnM6IHtcXFwic3RvcnlTb3VyY2VcXFwiOntcXFwic291cmNlXFxcIjpcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIENob25reUFjdGlvbnMsXFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQnJvd3NlcixcXFxcbiAgICBGaWxlTGlzdCxcXFxcbiAgICBGaWxlVG9vbGJhcixcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDQtQWN0aW9ucy5tZCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfFVzaW5nIGZpbGUgYWN0aW9ucycsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBBY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgLy8gTG9nIGFjdGlvbiB0byBjb25zb2xlXFxcXG4gICAgICAgIFxcXFxuICAgICAgICBjb25zb2xlLmxvZygnXFxcXFxcXFxuQWN0aW9uIG9iamVjdDonLCBhY3Rpb24sICdcXFxcXFxcXG5BY3Rpb24gZGF0YTonLCBkYXRhKTtcXFxcblxcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IERvY3VtZW50cycsIGlzRGlyOiB0cnVlIH1dO1xcXFxuICAgIGNvbnN0IGZpbGVzID0gW1xcXFxuICAgICAgICB7IGlkOiAnbUhlNEExJywgbmFtZTogJ01lYW5pbmcgb2YgbGlmZS50eHQnLCBzaXplOiAzMTQxNSB9LFxcXFxuICAgICAgICB7IGlkOiAnaHVudGVyMicsIG5hbWU6ICdQYXNzd29yZC50eHQnIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdiRWYyNHEnLCBuYW1lOiAnRHJhZyAmIGRyb3AgZmlsZXMgaGVyZScsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIGNvbnN0IGZpbGVBY3Rpb25zID0gW1xcXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNyZWF0ZUZvbGRlcixcXFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5VcGxvYWRGaWxlcyxcXFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Eb3dubG9hZEZpbGVzLFxcXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNvcHlGaWxlcyxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcXFxcXCJsaXZlLWV4YW1wbGVcXFxcXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXFxcXFwibGl2ZS1leGFtcGxlLWFjdGlvblxcXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgIDxzdHJvbmc+Q2hlY2sgeW91ciBicm93c2VyIGNvbnNvbGUgZm9yIGxvZ2dlZCBhY3Rpb25zITwvc3Ryb25nPlxcXFxuICAgICAgICAgICAgPC9kaXY+XFxcXG5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxcXG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2ZpbGVBY3Rpb25zfVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcIjEtZmlsZS1icm93c2VyLWJhc2ljcy11c2luZy1maWxlLWFjdGlvbnMtLWFjdGlvbnMtZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjMwLFxcXCJsaW5lXFxcIjoyNn0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjY3fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzAsXFxcImxpbmVcXFwiOjI2fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjY3fX19fSxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBBY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICAvLyBMb2cgYWN0aW9uIHRvIGNvbnNvbGVcXG4gICAgICAgIFxcbiAgICAgICAgY29uc29sZS5sb2coJ1xcXFxuQWN0aW9uIG9iamVjdDonLCBhY3Rpb24sICdcXFxcbkFjdGlvbiBkYXRhOicsIGRhdGEpO1xcblxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXG4gICAgfTtcXG5cXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBEb2N1bWVudHMnLCBpc0RpcjogdHJ1ZSB9XTtcXG4gICAgY29uc3QgZmlsZXMgPSBbXFxuICAgICAgICB7IGlkOiAnbUhlNEExJywgbmFtZTogJ01lYW5pbmcgb2YgbGlmZS50eHQnLCBzaXplOiAzMTQxNSB9LFxcbiAgICAgICAgeyBpZDogJ2h1bnRlcjInLCBuYW1lOiAnUGFzc3dvcmQudHh0JyB9LFxcbiAgICAgICAgeyBpZDogJ2JFZjI0cScsIG5hbWU6ICdEcmFnICYgZHJvcCBmaWxlcyBoZXJlJywgaXNEaXI6IHRydWUgfSxcXG4gICAgXTtcXG5cXG4gICAgY29uc3QgZmlsZUFjdGlvbnMgPSBbXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNyZWF0ZUZvbGRlcixcXG4gICAgICAgIENob25reUFjdGlvbnMuVXBsb2FkRmlsZXMsXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkRvd25sb2FkRmlsZXMsXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkNvcHlGaWxlcyxcXG4gICAgXTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJsaXZlLWV4YW1wbGVcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJsaXZlLWV4YW1wbGUtYWN0aW9uXFxcIj5cXG4gICAgICAgICAgICAgICAgPHN0cm9uZz5DaGVjayB5b3VyIGJyb3dzZXIgY29uc29sZSBmb3IgbG9nZ2VkIGFjdGlvbnMhPC9zdHJvbmc+XFxuICAgICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcbiAgICAgICAgICAgICAgICBmaWxlQWN0aW9ucz17ZmlsZUFjdGlvbnN9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCIsXCJsb2NhdGlvbnNNYXBcIjp7XCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtdXNpbmctZmlsZS1hY3Rpb25zLS1hY3Rpb25zLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjMwLFwibGluZVwiOjM0fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6NzV9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6MzR9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6NzV9fX19LFwic3RvcnlTb3VyY2VcIjp7XCJzb3VyY2VcIjpcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQge1xcbiAgICBDaG9ua3lBY3Rpb25zLFxcbiAgICBGaWxlQWN0aW9uLFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXG4gICAgRmlsZUJyb3dzZXIsXFxuICAgIEZpbGVMaXN0LFxcbiAgICBGaWxlVG9vbGJhcixcXG59IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA0LUFjdGlvbnMubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8VXNpbmcgZmlsZSBhY3Rpb25zJyxcXG4gICAgcGFyYW1ldGVyczoge1xcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIC8vIExvZyBhY3Rpb24gdG8gY29uc29sZVxcbiAgICAgICAgXFxuICAgICAgICBjb25zb2xlLmxvZygnXFxcXG5BY3Rpb24gb2JqZWN0OicsIGFjdGlvbiwgJ1xcXFxuQWN0aW9uIGRhdGE6JywgZGF0YSk7XFxuXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IERvY3VtZW50cycsIGlzRGlyOiB0cnVlIH1dO1xcbiAgICBjb25zdCBmaWxlcyA9IFtcXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXFxuICAgICAgICB7IGlkOiAnaHVudGVyMicsIG5hbWU6ICdQYXNzd29yZC50eHQnIH0sXFxuICAgICAgICB7IGlkOiAnYkVmMjRxJywgbmFtZTogJ0RyYWcgJiBkcm9wIGZpbGVzIGhlcmUnLCBpc0RpcjogdHJ1ZSB9LFxcbiAgICBdO1xcblxcbiAgICBjb25zdCBmaWxlQWN0aW9ucyA9IFtcXG4gICAgICAgIENob25reUFjdGlvbnMuQ3JlYXRlRm9sZGVyLFxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5VcGxvYWRGaWxlcyxcXG4gICAgICAgIENob25reUFjdGlvbnMuRG93bmxvYWRGaWxlcyxcXG4gICAgICAgIENob25reUFjdGlvbnMuQ29weUZpbGVzLFxcbiAgICBdO1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImxpdmUtZXhhbXBsZVxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImxpdmUtZXhhbXBsZS1hY3Rpb25cXFwiPlxcbiAgICAgICAgICAgICAgICA8c3Ryb25nPkNoZWNrIHlvdXIgYnJvd3NlciBjb25zb2xlIGZvciBsb2dnZWQgYWN0aW9ucyE8L3N0cm9uZz5cXG4gICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtmaWxlQWN0aW9uc31cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIixcImxvY2F0aW9uc01hcFwiOntcIjEtZmlsZS1icm93c2VyLWJhc2ljcy11c2luZy1maWxlLWFjdGlvbnMtLWFjdGlvbnMtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6MjZ9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo2N30sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMCxcImxpbmVcIjoyNn0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo2N319fX0sXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcbiAgICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xuICAgICAgICAvLyBMb2cgYWN0aW9uIHRvIGNvbnNvbGVcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS5sb2coJ1xcbkFjdGlvbiBvYmplY3Q6JywgYWN0aW9uLCAnXFxuQWN0aW9uIGRhdGE6JywgZGF0YSk7XG5cbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBEb2N1bWVudHMnLCBpc0RpcjogdHJ1ZSB9XTtcbiAgICBjb25zdCBmaWxlcyA9IFtcbiAgICAgICAgeyBpZDogJ21IZTRBMScsIG5hbWU6ICdNZWFuaW5nIG9mIGxpZmUudHh0Jywgc2l6ZTogMzE0MTUgfSxcbiAgICAgICAgeyBpZDogJ2h1bnRlcjInLCBuYW1lOiAnUGFzc3dvcmQudHh0JyB9LFxuICAgICAgICB7IGlkOiAnYkVmMjRxJywgbmFtZTogJ0RyYWcgJiBkcm9wIGZpbGVzIGhlcmUnLCBpc0RpcjogdHJ1ZSB9LFxuICAgIF07XG5cbiAgICBjb25zdCBmaWxlQWN0aW9ucyA9IFtcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5DcmVhdGVGb2xkZXIsXG4gICAgICAgIENob25reUFjdGlvbnMuVXBsb2FkRmlsZXMsXG4gICAgICAgIENob25reUFjdGlvbnMuRG93bmxvYWRGaWxlcyxcbiAgICAgICAgQ2hvbmt5QWN0aW9ucy5Db3B5RmlsZXMsXG4gICAgXTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGl2ZS1leGFtcGxlXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxpdmUtZXhhbXBsZS1hY3Rpb25cIj5cbiAgICAgICAgICAgICAgICA8c3Ryb25nPkNoZWNrIHlvdXIgYnJvd3NlciBjb25zb2xlIGZvciBsb2dnZWQgYWN0aW9ucyE8L3N0cm9uZz5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtmaWxlQWN0aW9uc31cbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IFwiRXZlcnkgYXBwbGljYXRpb24gdXNpbmcgQ2hvbmt5IHdpbGwgYmUgZGlmZmVyZW50LiBTb21lIHdpbGwgcmVxdWlyZSBhIGZlYXR1cmUgdG9cXG51cGxvYWQgZmlsZXMsIG90aGVyIHdpbGwgbmVlZCB0byBzdXBwb3J0IGN1dHRpbmcgJiBwYXN0aW5nLiBCb3R0b20gbGluZSAtXFxucmVxdWlyZW1lbnRzIHdpbGwgZGlmZmVyISBDaG9ua3kgdHJpZXMgdG8gYWRkcmVzcyB0aGlzIHByb2JsZW0gdXNpbmcgKipGaWxlIEFjdGlvbnMqKlxcbmFuZCAqKkFjdGlvbiBIYW5kbGVycyoqLlxcblxcbiMjIEZpbGUgYWN0aW9uc1xcblxcbioqRmlsZSBBY3Rpb25zKiogZGVmaW5lIF93aGF0XyBjYW4gaGFwcGVuLiBUaGVzZSBhY3Rpb25zIGNhbiBiZSB0cmlnZ2VyZWQgYnkgc29tZVxcbmhvdGtleSwgdXNlciBjbGlja2luZyBvbiBhIGJ1dHRvbiwgb3IgYSBzcGVjaWFsIGV2ZW50IGxpa2UgZHJhZyAmIGRyb3AuIEhlcmUgYXJlIHNvbWVcXG5leGFtcGxlcyBvZiBmaWxlIGFjdGlvbnM6XFxuXFxuLSAgIFVzZXIgZGVsZXRlcyBzb21lIGZpbGVzIGJ5IG1ha2luZyBhIHNlbGVjdGlvbiBhbmQgcHJlc3NpbmcgYERlbGV0ZWAuXFxuLSAgIFVzZXIgaW5pdGlhbGl6ZXMgYSBmaWxlIHVwbG9hZCBieSBjbGlja2luZyBvbiBcXFwiVXBsb2FkIEZpbGVcXFwiIGJ1dHRvbi5cXG4tICAgVXNlciBtb3ZlcyBzb21lIGZpbGVzIGZyb20gb25lIGZvbGRlciB0byBhbm90aGVyIHVzaW5nIGRyYWcgJiBkcm9wLlxcblxcbkFjdGlvbiBkZWZpbml0aW9ucyBjYW4gYmUgcGFzc2VkIHRvIHRoZSBgRmlsZUJyb3dzZXJgIGNvbXBvbmVudCB2aWEgdGhlIGBhY3Rpb25zYC5cXG5Gb3IgeW91ciBjb252ZW5pZW5jZSwgQ2hvbmt5IGluY2x1ZGVzIGRlZmluaXRpb25zIGZvciBtYW55IGNvbW1vbiBhY3Rpb25zLiBZb3UganVzdFxcbm5lZWQgdG8gaW1wb3J0IGFuZCBlbmFibGUgdGhlbSBhcyBmb2xsb3dzOlxcblxcbmBgYHRzeFxcbmltcG9ydCB7IEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIsIENob25reUFjdGlvbnMgfSBmcm9tICdjaG9ua3knO1xcblxcbmV4cG9ydCBjb25zdCBNeUNvbXBvbmVudCA9ICgpID0+IHtcXG4gICAgY29uc3QgYWN0aW9ucyA9IFtcXG4gICAgICAgIENob25reUFjdGlvbnMuQ3JlYXRlRm9sZGVyLCAvLyBBZGRzIGEgYnV0dG9uIHRvIHRoZSB0b29sYmFyXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLlVwbG9hZEZpbGVzLCAvLyBBZGRzIGEgYnV0dG9uXFxuICAgICAgICBDaG9ua3lBY3Rpb25zLkRvd25sb2FkRmlsZXMsIC8vIEFkZHMgYSBidXR0b25cXG4gICAgICAgIENob25reUFjdGlvbnMuQ29weUZpbGVzLCAvLyBBZGRzIGEgYnV0dG9uIGFuZCBhIHNob3J0Y3V0OiBDdHJsK0NcXG4gICAgXTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxGaWxlQnJvd3NlciBmaWxlcz17W119IGFjdGlvbnM9e2FjdGlvbnN9PlxcbiAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgKTtcXG59O1xcbmBgYFxcblxcbiMjIEFjdGlvbiBoYW5kbGVyc1xcblxcbmBgYHRzXFxuY29uc3QgaGVsbG9Xb3JsZCA9ICcxMjMnO1xcbmBgYFxcblwiOyIsIlxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJcXG4gICAgICBcXG4gICAgICAvLyBAdHMtbm9jaGVja1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19TVE9SWV9fID0gXFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IHtcXFxcbiAgICBDaG9ua3lJY29uTmFtZSxcXFxcbiAgICBGaWxlQWN0aW9uLFxcXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcXFxuICAgIEZpbGVCcm93c2VyLFxcXFxuICAgIEZpbGVEYXRhLFxcXFxuICAgIEZpbGVMaXN0LFxcXFxuICAgIEZpbGVTZWFyY2gsXFxcXG4gICAgRmlsZVRvb2xiYXIsXFxcXG59IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA1LUN1c3RvbS1hY3Rpb25zLm1kJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8Q3VzdG9tIGZpbGUgYWN0aW9ucycsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBDdXN0b21BY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgY29uc3QgZG93bmxvYWRQc2RBY3Rpb246IEZpbGVBY3Rpb24gPSB7XFxcXG4gICAgICAgIGlkOiAnZG93bmxvYWRfcHNkJyxcXFxcbiAgICAgICAgcmVxdWlyZXNTZWxlY3Rpb246IHRydWUsXFxcXG4gICAgICAgIGZpbGVGaWx0ZXI6IChmaWxlOiBGaWxlRGF0YSkgPT4gZmlsZS5uYW1lLmVuZHNXaXRoKCcucHNkJyksXFxcXG4gICAgICAgIGhvdGtleXM6IFsnY3RybCtxJ10sXFxcXG4gICAgICAgIHRvb2xiYXJCdXR0b246IHtcXFxcbiAgICAgICAgICAgIG5hbWU6ICdEb3dubG9hZCBQaG90b3Nob3AgZmlsZXMnLFxcXFxuICAgICAgICAgICAgaWNvbjogQ2hvbmt5SWNvbk5hbWUuZG93bmxvYWQsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgfTtcXFxcblxcXFxuICAgIGNvbnN0IGN1c3RvbUZpbGVBY3Rpb25zID0gW2Rvd25sb2FkUHNkQWN0aW9uXTtcXFxcbiAgICBjb25zdCBmaWxlcyA9IFtcXFxcbiAgICAgICAgeyBpZDogJ3hWZEUnLCBuYW1lOiAnRmxvd2Vycy5wc2QnIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdiVGVYJywgbmFtZTogJ01vdW50YWlucy5wc2QnIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdtR2VYJywgbmFtZTogJ1NreS5wc2QnIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdtRnRlJywgbmFtZTogJ1N0YXJzLnBzZCcgfSxcXFxcbiAgICAgICAgeyBpZDogJ3RMd1onLCBuYW1lOiAnUGFyc2VyLnJzJyB9LFxcXFxuICAgICAgICB7IGlkOiAnbUdyUScsIG5hbWU6ICdwYWNrYWdlLmpzb24nIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtjdXN0b21GaWxlQWN0aW9uc31cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiO1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XFxcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1jdXN0b20tZmlsZS1hY3Rpb25zLS1jdXN0b20tYWN0aW9ucy1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzYsXFxcImxpbmVcXFwiOjI4fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6Njd9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozNixcXFwibGluZVxcXCI6Mjh9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6Njd9fX07XFxuICAgIFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQge1xcbiAgICBDaG9ua3lJY29uTmFtZSxcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVCcm93c2VyLFxcbiAgICBGaWxlRGF0YSxcXG4gICAgRmlsZUxpc3QsXFxuICAgIEZpbGVTZWFyY2gsXFxuICAgIEZpbGVUb29sYmFyLFxcbn0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDUtQ3VzdG9tLWFjdGlvbnMubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8Q3VzdG9tIGZpbGUgYWN0aW9ucycsXFxuICAgIHBhcmFtZXRlcnM6IHtcXFwic3RvcnlTb3VyY2VcXFwiOntcXFwic291cmNlXFxcIjpcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQge1xcXFxuICAgIENob25reUljb25OYW1lLFxcXFxuICAgIEZpbGVBY3Rpb24sXFxcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxcXG4gICAgRmlsZUJyb3dzZXIsXFxcXG4gICAgRmlsZURhdGEsXFxcXG4gICAgRmlsZUxpc3QsXFxcXG4gICAgRmlsZVNlYXJjaCxcXFxcbiAgICBGaWxlVG9vbGJhcixcXFxcbn0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDUtQ3VzdG9tLWFjdGlvbnMubWQnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xDdXN0b20gZmlsZSBhY3Rpb25zJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEN1c3RvbUFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICBjb25zdCBkb3dubG9hZFBzZEFjdGlvbjogRmlsZUFjdGlvbiA9IHtcXFxcbiAgICAgICAgaWQ6ICdkb3dubG9hZF9wc2QnLFxcXFxuICAgICAgICByZXF1aXJlc1NlbGVjdGlvbjogdHJ1ZSxcXFxcbiAgICAgICAgZmlsZUZpbHRlcjogKGZpbGU6IEZpbGVEYXRhKSA9PiBmaWxlLm5hbWUuZW5kc1dpdGgoJy5wc2QnKSxcXFxcbiAgICAgICAgaG90a2V5czogWydjdHJsK3EnXSxcXFxcbiAgICAgICAgdG9vbGJhckJ1dHRvbjoge1xcXFxuICAgICAgICAgICAgbmFtZTogJ0Rvd25sb2FkIFBob3Rvc2hvcCBmaWxlcycsXFxcXG4gICAgICAgICAgICBpY29uOiBDaG9ua3lJY29uTmFtZS5kb3dubG9hZCxcXFxcbiAgICAgICAgfSxcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgY29uc3QgY3VzdG9tRmlsZUFjdGlvbnMgPSBbZG93bmxvYWRQc2RBY3Rpb25dO1xcXFxuICAgIGNvbnN0IGZpbGVzID0gW1xcXFxuICAgICAgICB7IGlkOiAneFZkRScsIG5hbWU6ICdGbG93ZXJzLnBzZCcgfSxcXFxcbiAgICAgICAgeyBpZDogJ2JUZVgnLCBuYW1lOiAnTW91bnRhaW5zLnBzZCcgfSxcXFxcbiAgICAgICAgeyBpZDogJ21HZVgnLCBuYW1lOiAnU2t5LnBzZCcgfSxcXFxcbiAgICAgICAgeyBpZDogJ21GdGUnLCBuYW1lOiAnU3RhcnMucHNkJyB9LFxcXFxuICAgICAgICB7IGlkOiAndEx3WicsIG5hbWU6ICdQYXJzZXIucnMnIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdtR3JRJywgbmFtZTogJ3BhY2thZ2UuanNvbicgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2N1c3RvbUZpbGVBY3Rpb25zfVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCIsXFxcImxvY2F0aW9uc01hcFxcXCI6e1xcXCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtY3VzdG9tLWZpbGUtYWN0aW9ucy0tY3VzdG9tLWFjdGlvbnMtZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjM2LFxcXCJsaW5lXFxcIjoyOH0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjY3fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzYsXFxcImxpbmVcXFwiOjI4fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjY3fX19fSxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBDdXN0b21BY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICBjb25zdCBkb3dubG9hZFBzZEFjdGlvbjogRmlsZUFjdGlvbiA9IHtcXG4gICAgICAgIGlkOiAnZG93bmxvYWRfcHNkJyxcXG4gICAgICAgIHJlcXVpcmVzU2VsZWN0aW9uOiB0cnVlLFxcbiAgICAgICAgZmlsZUZpbHRlcjogKGZpbGU6IEZpbGVEYXRhKSA9PiBmaWxlLm5hbWUuZW5kc1dpdGgoJy5wc2QnKSxcXG4gICAgICAgIGhvdGtleXM6IFsnY3RybCtxJ10sXFxuICAgICAgICB0b29sYmFyQnV0dG9uOiB7XFxuICAgICAgICAgICAgbmFtZTogJ0Rvd25sb2FkIFBob3Rvc2hvcCBmaWxlcycsXFxuICAgICAgICAgICAgaWNvbjogQ2hvbmt5SWNvbk5hbWUuZG93bmxvYWQsXFxuICAgICAgICB9LFxcbiAgICB9O1xcblxcbiAgICBjb25zdCBjdXN0b21GaWxlQWN0aW9ucyA9IFtkb3dubG9hZFBzZEFjdGlvbl07XFxuICAgIGNvbnN0IGZpbGVzID0gW1xcbiAgICAgICAgeyBpZDogJ3hWZEUnLCBuYW1lOiAnRmxvd2Vycy5wc2QnIH0sXFxuICAgICAgICB7IGlkOiAnYlRlWCcsIG5hbWU6ICdNb3VudGFpbnMucHNkJyB9LFxcbiAgICAgICAgeyBpZDogJ21HZVgnLCBuYW1lOiAnU2t5LnBzZCcgfSxcXG4gICAgICAgIHsgaWQ6ICdtRnRlJywgbmFtZTogJ1N0YXJzLnBzZCcgfSxcXG4gICAgICAgIHsgaWQ6ICd0THdaJywgbmFtZTogJ1BhcnNlci5ycycgfSxcXG4gICAgICAgIHsgaWQ6ICdtR3JRJywgbmFtZTogJ3BhY2thZ2UuanNvbicgfSxcXG4gICAgXTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgICAgICBmaWxlQWN0aW9ucz17Y3VzdG9tRmlsZUFjdGlvbnN9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCI7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtY3VzdG9tLWZpbGUtYWN0aW9ucy0tY3VzdG9tLWFjdGlvbnMtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzYsXCJsaW5lXCI6MzZ9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo3NX0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozNixcImxpbmVcIjozNn0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo3NX19fTtcbiAgICBcblxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHtcXG4gICAgQ2hvbmt5SWNvbk5hbWUsXFxuICAgIEZpbGVBY3Rpb24sXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcbiAgICBGaWxlQnJvd3NlcixcXG4gICAgRmlsZURhdGEsXFxuICAgIEZpbGVMaXN0LFxcbiAgICBGaWxlU2VhcmNoLFxcbiAgICBGaWxlVG9vbGJhcixcXG59IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA1LUN1c3RvbS1hY3Rpb25zLm1kJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfEN1c3RvbSBmaWxlIGFjdGlvbnMnLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgQ3VzdG9tQWN0aW9uc0V4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXG4gICAgfTtcXG5cXG4gICAgY29uc3QgZG93bmxvYWRQc2RBY3Rpb246IEZpbGVBY3Rpb24gPSB7XFxuICAgICAgICBpZDogJ2Rvd25sb2FkX3BzZCcsXFxuICAgICAgICByZXF1aXJlc1NlbGVjdGlvbjogdHJ1ZSxcXG4gICAgICAgIGZpbGVGaWx0ZXI6IChmaWxlOiBGaWxlRGF0YSkgPT4gZmlsZS5uYW1lLmVuZHNXaXRoKCcucHNkJyksXFxuICAgICAgICBob3RrZXlzOiBbJ2N0cmwrcSddLFxcbiAgICAgICAgdG9vbGJhckJ1dHRvbjoge1xcbiAgICAgICAgICAgIG5hbWU6ICdEb3dubG9hZCBQaG90b3Nob3AgZmlsZXMnLFxcbiAgICAgICAgICAgIGljb246IENob25reUljb25OYW1lLmRvd25sb2FkLFxcbiAgICAgICAgfSxcXG4gICAgfTtcXG5cXG4gICAgY29uc3QgY3VzdG9tRmlsZUFjdGlvbnMgPSBbZG93bmxvYWRQc2RBY3Rpb25dO1xcbiAgICBjb25zdCBmaWxlcyA9IFtcXG4gICAgICAgIHsgaWQ6ICd4VmRFJywgbmFtZTogJ0Zsb3dlcnMucHNkJyB9LFxcbiAgICAgICAgeyBpZDogJ2JUZVgnLCBuYW1lOiAnTW91bnRhaW5zLnBzZCcgfSxcXG4gICAgICAgIHsgaWQ6ICdtR2VYJywgbmFtZTogJ1NreS5wc2QnIH0sXFxuICAgICAgICB7IGlkOiAnbUZ0ZScsIG5hbWU6ICdTdGFycy5wc2QnIH0sXFxuICAgICAgICB7IGlkOiAndEx3WicsIG5hbWU6ICdQYXJzZXIucnMnIH0sXFxuICAgICAgICB7IGlkOiAnbUdyUScsIG5hbWU6ICdwYWNrYWdlLmpzb24nIH0sXFxuICAgIF07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2N1c3RvbUZpbGVBY3Rpb25zfVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiMS1maWxlLWJyb3dzZXItYmFzaWNzLWN1c3RvbS1maWxlLWFjdGlvbnMtLWN1c3RvbS1hY3Rpb25zLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjM2LFwibGluZVwiOjI4fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6Njd9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzYsXCJsaW5lXCI6Mjh9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6Njd9fX07XG4gICAgXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XG5cbmltcG9ydCB7XG4gICAgQ2hvbmt5SWNvbk5hbWUsXG4gICAgRmlsZUFjdGlvbixcbiAgICBGaWxlQWN0aW9uRGF0YSxcbiAgICBGaWxlQnJvd3NlcixcbiAgICBGaWxlRGF0YSxcbiAgICBGaWxlTGlzdCxcbiAgICBGaWxlU2VhcmNoLFxuICAgIEZpbGVUb29sYmFyLFxufSBmcm9tICdjaG9ua3knO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xuLy8gQHRzLWlnbm9yZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNS1DdXN0b20tYWN0aW9ucy5tZCc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZGVmYXVsdC1leHBvcnRcbmV4cG9ydCBkZWZhdWx0IHtcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xDdXN0b20gZmlsZSBhY3Rpb25zJyxcbiAgICBwYXJhbWV0ZXJzOiB7XCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiXFxuICAgICAgXFxuICAgICAgLy8gQHRzLW5vY2hlY2tcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fU1RPUllfXyA9IFxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7XFxcXG4gICAgQ2hvbmt5SWNvbk5hbWUsXFxcXG4gICAgRmlsZUFjdGlvbixcXFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXFxcbiAgICBGaWxlQnJvd3NlcixcXFxcbiAgICBGaWxlRGF0YSxcXFxcbiAgICBGaWxlTGlzdCxcXFxcbiAgICBGaWxlU2VhcmNoLFxcXFxuICAgIEZpbGVUb29sYmFyLFxcXFxufSBmcm9tICdjaG9ua3knO1xcXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNS1DdXN0b20tYWN0aW9ucy5tZCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfEN1c3RvbSBmaWxlIGFjdGlvbnMnLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgQ3VzdG9tQWN0aW9uc0V4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIGNvbnN0IGRvd25sb2FkUHNkQWN0aW9uOiBGaWxlQWN0aW9uID0ge1xcXFxuICAgICAgICBpZDogJ2Rvd25sb2FkX3BzZCcsXFxcXG4gICAgICAgIHJlcXVpcmVzU2VsZWN0aW9uOiB0cnVlLFxcXFxuICAgICAgICBmaWxlRmlsdGVyOiAoZmlsZTogRmlsZURhdGEpID0+IGZpbGUubmFtZS5lbmRzV2l0aCgnLnBzZCcpLFxcXFxuICAgICAgICBob3RrZXlzOiBbJ2N0cmwrcSddLFxcXFxuICAgICAgICB0b29sYmFyQnV0dG9uOiB7XFxcXG4gICAgICAgICAgICBuYW1lOiAnRG93bmxvYWQgUGhvdG9zaG9wIGZpbGVzJyxcXFxcbiAgICAgICAgICAgIGljb246IENob25reUljb25OYW1lLmRvd25sb2FkLFxcXFxuICAgICAgICB9LFxcXFxuICAgIH07XFxcXG5cXFxcbiAgICBjb25zdCBjdXN0b21GaWxlQWN0aW9ucyA9IFtkb3dubG9hZFBzZEFjdGlvbl07XFxcXG4gICAgY29uc3QgZmlsZXMgPSBbXFxcXG4gICAgICAgIHsgaWQ6ICd4VmRFJywgbmFtZTogJ0Zsb3dlcnMucHNkJyB9LFxcXFxuICAgICAgICB7IGlkOiAnYlRlWCcsIG5hbWU6ICdNb3VudGFpbnMucHNkJyB9LFxcXFxuICAgICAgICB7IGlkOiAnbUdlWCcsIG5hbWU6ICdTa3kucHNkJyB9LFxcXFxuICAgICAgICB7IGlkOiAnbUZ0ZScsIG5hbWU6ICdTdGFycy5wc2QnIH0sXFxcXG4gICAgICAgIHsgaWQ6ICd0THdaJywgbmFtZTogJ1BhcnNlci5ycycgfSxcXFxcbiAgICAgICAgeyBpZDogJ21HclEnLCBuYW1lOiAncGFja2FnZS5qc29uJyB9LFxcXFxuICAgIF07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgICAgICBmaWxlQWN0aW9ucz17Y3VzdG9tRmlsZUFjdGlvbnN9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIjtcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1xcXCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtY3VzdG9tLWZpbGUtYWN0aW9ucy0tY3VzdG9tLWFjdGlvbnMtZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjM2LFxcXCJsaW5lXFxcIjoyOH0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjY3fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzYsXFxcImxpbmVcXFwiOjI4fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjY3fX19O1xcbiAgICBcXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHtcXG4gICAgQ2hvbmt5SWNvbk5hbWUsXFxuICAgIEZpbGVBY3Rpb24sXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcbiAgICBGaWxlQnJvd3NlcixcXG4gICAgRmlsZURhdGEsXFxuICAgIEZpbGVMaXN0LFxcbiAgICBGaWxlU2VhcmNoLFxcbiAgICBGaWxlVG9vbGJhcixcXG59IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA1LUN1c3RvbS1hY3Rpb25zLm1kJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfEN1c3RvbSBmaWxlIGFjdGlvbnMnLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcInN0b3J5U291cmNlXFxcIjp7XFxcInNvdXJjZVxcXCI6XFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IHtcXFxcbiAgICBDaG9ua3lJY29uTmFtZSxcXFxcbiAgICBGaWxlQWN0aW9uLFxcXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcXFxuICAgIEZpbGVCcm93c2VyLFxcXFxuICAgIEZpbGVEYXRhLFxcXFxuICAgIEZpbGVMaXN0LFxcXFxuICAgIEZpbGVTZWFyY2gsXFxcXG4gICAgRmlsZVRvb2xiYXIsXFxcXG59IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA1LUN1c3RvbS1hY3Rpb25zLm1kJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8Q3VzdG9tIGZpbGUgYWN0aW9ucycsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBDdXN0b21BY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgY29uc3QgZG93bmxvYWRQc2RBY3Rpb246IEZpbGVBY3Rpb24gPSB7XFxcXG4gICAgICAgIGlkOiAnZG93bmxvYWRfcHNkJyxcXFxcbiAgICAgICAgcmVxdWlyZXNTZWxlY3Rpb246IHRydWUsXFxcXG4gICAgICAgIGZpbGVGaWx0ZXI6IChmaWxlOiBGaWxlRGF0YSkgPT4gZmlsZS5uYW1lLmVuZHNXaXRoKCcucHNkJyksXFxcXG4gICAgICAgIGhvdGtleXM6IFsnY3RybCtxJ10sXFxcXG4gICAgICAgIHRvb2xiYXJCdXR0b246IHtcXFxcbiAgICAgICAgICAgIG5hbWU6ICdEb3dubG9hZCBQaG90b3Nob3AgZmlsZXMnLFxcXFxuICAgICAgICAgICAgaWNvbjogQ2hvbmt5SWNvbk5hbWUuZG93bmxvYWQsXFxcXG4gICAgICAgIH0sXFxcXG4gICAgfTtcXFxcblxcXFxuICAgIGNvbnN0IGN1c3RvbUZpbGVBY3Rpb25zID0gW2Rvd25sb2FkUHNkQWN0aW9uXTtcXFxcbiAgICBjb25zdCBmaWxlcyA9IFtcXFxcbiAgICAgICAgeyBpZDogJ3hWZEUnLCBuYW1lOiAnRmxvd2Vycy5wc2QnIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdiVGVYJywgbmFtZTogJ01vdW50YWlucy5wc2QnIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdtR2VYJywgbmFtZTogJ1NreS5wc2QnIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdtRnRlJywgbmFtZTogJ1N0YXJzLnBzZCcgfSxcXFxcbiAgICAgICAgeyBpZDogJ3RMd1onLCBuYW1lOiAnUGFyc2VyLnJzJyB9LFxcXFxuICAgICAgICB7IGlkOiAnbUdyUScsIG5hbWU6ICdwYWNrYWdlLmpzb24nIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zPXtjdXN0b21GaWxlQWN0aW9uc31cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVNlYXJjaCAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiLFxcXCJsb2NhdGlvbnNNYXBcXFwiOntcXFwiMS1maWxlLWJyb3dzZXItYmFzaWNzLWN1c3RvbS1maWxlLWFjdGlvbnMtLWN1c3RvbS1hY3Rpb25zLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozNixcXFwibGluZVxcXCI6Mjh9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo2N30sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjM2LFxcXCJsaW5lXFxcIjoyOH0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo2N319fX0sXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgQ3VzdG9tQWN0aW9uc0V4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXG4gICAgfTtcXG5cXG4gICAgY29uc3QgZG93bmxvYWRQc2RBY3Rpb246IEZpbGVBY3Rpb24gPSB7XFxuICAgICAgICBpZDogJ2Rvd25sb2FkX3BzZCcsXFxuICAgICAgICByZXF1aXJlc1NlbGVjdGlvbjogdHJ1ZSxcXG4gICAgICAgIGZpbGVGaWx0ZXI6IChmaWxlOiBGaWxlRGF0YSkgPT4gZmlsZS5uYW1lLmVuZHNXaXRoKCcucHNkJyksXFxuICAgICAgICBob3RrZXlzOiBbJ2N0cmwrcSddLFxcbiAgICAgICAgdG9vbGJhckJ1dHRvbjoge1xcbiAgICAgICAgICAgIG5hbWU6ICdEb3dubG9hZCBQaG90b3Nob3AgZmlsZXMnLFxcbiAgICAgICAgICAgIGljb246IENob25reUljb25OYW1lLmRvd25sb2FkLFxcbiAgICAgICAgfSxcXG4gICAgfTtcXG5cXG4gICAgY29uc3QgY3VzdG9tRmlsZUFjdGlvbnMgPSBbZG93bmxvYWRQc2RBY3Rpb25dO1xcbiAgICBjb25zdCBmaWxlcyA9IFtcXG4gICAgICAgIHsgaWQ6ICd4VmRFJywgbmFtZTogJ0Zsb3dlcnMucHNkJyB9LFxcbiAgICAgICAgeyBpZDogJ2JUZVgnLCBuYW1lOiAnTW91bnRhaW5zLnBzZCcgfSxcXG4gICAgICAgIHsgaWQ6ICdtR2VYJywgbmFtZTogJ1NreS5wc2QnIH0sXFxuICAgICAgICB7IGlkOiAnbUZ0ZScsIG5hbWU6ICdTdGFycy5wc2QnIH0sXFxuICAgICAgICB7IGlkOiAndEx3WicsIG5hbWU6ICdQYXJzZXIucnMnIH0sXFxuICAgICAgICB7IGlkOiAnbUdyUScsIG5hbWU6ICdwYWNrYWdlLmpzb24nIH0sXFxuICAgIF07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2N1c3RvbUZpbGVBY3Rpb25zfVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiLFwibG9jYXRpb25zTWFwXCI6e1wiMS1maWxlLWJyb3dzZXItYmFzaWNzLWN1c3RvbS1maWxlLWFjdGlvbnMtLWN1c3RvbS1hY3Rpb25zLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjM2LFwibGluZVwiOjM2fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6NzV9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzYsXCJsaW5lXCI6MzZ9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6NzV9fX19LFwic3RvcnlTb3VyY2VcIjp7XCJzb3VyY2VcIjpcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQge1xcbiAgICBDaG9ua3lJY29uTmFtZSxcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVCcm93c2VyLFxcbiAgICBGaWxlRGF0YSxcXG4gICAgRmlsZUxpc3QsXFxuICAgIEZpbGVTZWFyY2gsXFxuICAgIEZpbGVUb29sYmFyLFxcbn0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDUtQ3VzdG9tLWFjdGlvbnMubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8Q3VzdG9tIGZpbGUgYWN0aW9ucycsXFxuICAgIHBhcmFtZXRlcnM6IHtcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBDdXN0b21BY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICBjb25zdCBkb3dubG9hZFBzZEFjdGlvbjogRmlsZUFjdGlvbiA9IHtcXG4gICAgICAgIGlkOiAnZG93bmxvYWRfcHNkJyxcXG4gICAgICAgIHJlcXVpcmVzU2VsZWN0aW9uOiB0cnVlLFxcbiAgICAgICAgZmlsZUZpbHRlcjogKGZpbGU6IEZpbGVEYXRhKSA9PiBmaWxlLm5hbWUuZW5kc1dpdGgoJy5wc2QnKSxcXG4gICAgICAgIGhvdGtleXM6IFsnY3RybCtxJ10sXFxuICAgICAgICB0b29sYmFyQnV0dG9uOiB7XFxuICAgICAgICAgICAgbmFtZTogJ0Rvd25sb2FkIFBob3Rvc2hvcCBmaWxlcycsXFxuICAgICAgICAgICAgaWNvbjogQ2hvbmt5SWNvbk5hbWUuZG93bmxvYWQsXFxuICAgICAgICB9LFxcbiAgICB9O1xcblxcbiAgICBjb25zdCBjdXN0b21GaWxlQWN0aW9ucyA9IFtkb3dubG9hZFBzZEFjdGlvbl07XFxuICAgIGNvbnN0IGZpbGVzID0gW1xcbiAgICAgICAgeyBpZDogJ3hWZEUnLCBuYW1lOiAnRmxvd2Vycy5wc2QnIH0sXFxuICAgICAgICB7IGlkOiAnYlRlWCcsIG5hbWU6ICdNb3VudGFpbnMucHNkJyB9LFxcbiAgICAgICAgeyBpZDogJ21HZVgnLCBuYW1lOiAnU2t5LnBzZCcgfSxcXG4gICAgICAgIHsgaWQ6ICdtRnRlJywgbmFtZTogJ1N0YXJzLnBzZCcgfSxcXG4gICAgICAgIHsgaWQ6ICd0THdaJywgbmFtZTogJ1BhcnNlci5ycycgfSxcXG4gICAgICAgIHsgaWQ6ICdtR3JRJywgbmFtZTogJ3BhY2thZ2UuanNvbicgfSxcXG4gICAgXTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcbiAgICAgICAgICAgICAgICBmaWxlQWN0aW9ucz17Y3VzdG9tRmlsZUFjdGlvbnN9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCIsXCJsb2NhdGlvbnNNYXBcIjp7XCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtY3VzdG9tLWZpbGUtYWN0aW9ucy0tY3VzdG9tLWFjdGlvbnMtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzYsXCJsaW5lXCI6Mjh9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo2N30sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozNixcImxpbmVcIjoyOH0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo2N319fX0sXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcbiAgICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IEN1c3RvbUFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBkb3dubG9hZFBzZEFjdGlvbjogRmlsZUFjdGlvbiA9IHtcbiAgICAgICAgaWQ6ICdkb3dubG9hZF9wc2QnLFxuICAgICAgICByZXF1aXJlc1NlbGVjdGlvbjogdHJ1ZSxcbiAgICAgICAgZmlsZUZpbHRlcjogKGZpbGU6IEZpbGVEYXRhKSA9PiBmaWxlLm5hbWUuZW5kc1dpdGgoJy5wc2QnKSxcbiAgICAgICAgaG90a2V5czogWydjdHJsK3EnXSxcbiAgICAgICAgdG9vbGJhckJ1dHRvbjoge1xuICAgICAgICAgICAgbmFtZTogJ0Rvd25sb2FkIFBob3Rvc2hvcCBmaWxlcycsXG4gICAgICAgICAgICBpY29uOiBDaG9ua3lJY29uTmFtZS5kb3dubG9hZCxcbiAgICAgICAgfSxcbiAgICB9O1xuXG4gICAgY29uc3QgY3VzdG9tRmlsZUFjdGlvbnMgPSBbZG93bmxvYWRQc2RBY3Rpb25dO1xuICAgIGNvbnN0IGZpbGVzID0gW1xuICAgICAgICB7IGlkOiAneFZkRScsIG5hbWU6ICdGbG93ZXJzLnBzZCcgfSxcbiAgICAgICAgeyBpZDogJ2JUZVgnLCBuYW1lOiAnTW91bnRhaW5zLnBzZCcgfSxcbiAgICAgICAgeyBpZDogJ21HZVgnLCBuYW1lOiAnU2t5LnBzZCcgfSxcbiAgICAgICAgeyBpZDogJ21GdGUnLCBuYW1lOiAnU3RhcnMucHNkJyB9LFxuICAgICAgICB7IGlkOiAndEx3WicsIG5hbWU6ICdQYXJzZXIucnMnIH0sXG4gICAgICAgIHsgaWQ6ICdtR3JRJywgbmFtZTogJ3BhY2thZ2UuanNvbicgfSxcbiAgICBdO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XG4gICAgICAgICAgICAgICAgZmlsZUFjdGlvbnM9e2N1c3RvbUZpbGVBY3Rpb25zfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxuICAgICAgICAgICAgICAgIDxGaWxlU2VhcmNoIC8+XG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IFwiX1Bhc3NpbmcgaW52YWxpZCBwcm9wc18gc2VjdGlvbiBzaG93cyBfaG93XyB0byB1c2UgZmlsZSBhY3Rpb25zLCBidXQgaXQgZG9lc24ndFxcbmV4cGxhaW4gX3doYXRfIHRoZXkgYXJlLiBBIGZpbGUgYWN0aW9uIGlzIGEgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3QgdGhhdCBkZXNyaWJlc1xcbndoYXQgY2FuIGhhcHBlbiB0byBmaWxlcy5cXG5cXG5UaGUgaW50ZXJmYWNlIG9mIGEgZmlsZSBhY3Rpb24gb2JqZWN0IGlzIGRlZmluZWQgYXMgZm9sbG93czpcXG5cXG5gYGB0c1xcbmludGVyZmFjZSBGaWxlQWN0aW9uIHtcXG4gICAgbmFtZTogc3RyaW5nOyAvLyBVbmlxdWUgYWN0aW9uIG5hbWVcXG4gICAgbWV0YWRhdGE/OiBhbnk7IC8vIEFueSB1c2VyLWRlZmluZWQgdmFsdWVcXG4gICAgcmVxdWlyZXNQYXJlbnRGb2xkZXI/OiBib29sZWFuOyAvLyBSZXF1aXJlcyBwYXJlbnQgZm9sZGVyIGluIGZvbGRlciBjaGFpblxcbiAgICByZXF1aXJlc1NlbGVjdGlvbj86IGJvb2xlYW47IC8vIFJlcXVpcmVzIHNlbGVjdGlvbiBvZiAxKyBmaWxlc1xcbiAgICBmaWxlRmlsdGVyPzogRmlsZUZpbHRlcjsgLy8gVXNlZCB0byBmaWx0ZXIgdGhlIGZpbGVzIGFycmF5XFxuXFxuICAgIGhvdGtleXM/OiBzdHJpbmdbXTsgLy8gSG90a2V5cyB1c2luZyBgaG90a2V5LWpzYCBub3RhdGlvblxcbiAgICB0b29sYmFyQnV0dG9uPzogVG9vbGJhckJ1dHRvbkRhdGE7IC8vIERlc2NyaXB0aW9uIGJlbG93XFxufVxcblxcbi8vIFdoZXJlLi4uXFxudHlwZSBGaWxlRmlsdGVyID0gKGZpbGU6IE51bGxhYmxlPEZpbGVEYXRhPikgPT4gYm9vbGVhbjtcXG5cXG4vLyAuLi5hbmQuLi5cXG5pbnRlcmZhY2UgVG9vbGJhckJ1dHRvbkRhdGEge1xcbiAgICBuYW1lOiBzdHJpbmc7IC8vIEJ1dHRvbiBuYW1lXFxuICAgIGdyb3VwPzogc3RyaW5nOyAvLyBHcm91cCB0byBhZGQgdGhlIGJ1dHRvbiB0b29cXG4gICAgZHJvcGRvd24/OiBib29sZWFuOyAvLyBXaGV0aGVyIHRvIGRpc3BsYXkgZ3JvdXAgYXMgZHJvcGRvd25cXG4gICAgdG9vbHRpcD86IHN0cmluZzsgLy8gSGVscCB0b29sdGlwIHRleHRcXG4gICAgaWNvbj86IENob25reUljb25OYW1lIHwgc3RyaW5nOyAvLyBJY29uIG5hbWVcXG4gICAgaWNvbk9ubHk/OiBib29sZWFuOyAvLyBXaGV0aGVyIHRvIG9ubHkgZGlzcGxheSB0aGUgaWNvblxcbn1cXG5gYGBcXG5cXG4tICAgSWYgb25lIG9mIHRoZSBhY3Rpb25zIGluIGEgZ3JvdXAgaW5jbHVkZXMgYGRyb3Bkb3duOiB0cnVlYCwgYWxsIGFjdGlvbnMgaW4gdGhhdFxcbiAgICBncm91cCB3aWxsIGJlIHNob3duIGFzIGEgZHJvcGRvd24uXFxuXFxuIyMgRXhhbXBsZSBjdXN0b20gYWN0aW9uOiBcXFwiRG93bmxvYWQgUGhvdG9zaG9wIGZpbGVzXFxcIlxcblxcbkxldCdzIGRlZmluZSBhIGN1c3RvbSBhY3Rpb24gdGhhdCB3aWxsIGRvd25sb2FkIHRoZSBzZWxlY3RlZCBQaG90b3Nob3AgYC5wc2RgIGZpbGVzLlxcbldlIHdpbGwgYWRkIGEgYnV0dG9uIHRvIHRoZSB0b29sYmFyIGFuZCBhIHNob3J0Y3V0LCBgQ3RybCtRYC4gRmlyc3QsIHdlIGRlZmluZSB0aGVcXG5maWxlIGFjdGlvbiBvYmplY3Q6XFxuXFxuYGBgdHN4XFxuaW1wb3J0IHsgRmlsZURhdGEsIEZpbGVBY3Rpb24sIENob25reUljb25OYW1lIH0gZnJvbSAnY2hvbmt5JztcXG5cXG5jb25zdCBkb3dubG9hZFBzZEFjdGlvbjogRmlsZUFjdGlvbiA9IHtcXG4gICAgaWQ6ICdkb3dubG9hZF9wc2QnLFxcbiAgICByZXF1aXJlc1NlbGVjdGlvbjogdHJ1ZSxcXG4gICAgZmlsZUZpbHRlcjogKGZpbGU6IEZpbGVEYXRhKSA9PiBmaWxlLm5hbWUuZW5kc1dpdGgoJy5wc2QnKSxcXG4gICAgaG90a2V5czogWydjdHJsK3EnXSxcXG4gICAgdG9vbGJhckJ1dHRvbjoge1xcbiAgICAgICAgbmFtZTogJ0Rvd25sb2FkIFBob3Rvc2hvcCBmaWxlcycsXFxuICAgICAgICBpY29uOiBDaG9ua3lJY29uTmFtZS5kb3dubG9hZCxcXG4gICAgfSxcXG59O1xcbmBgYFxcblxcbk5leHQsIHdlIG5lZWQgdG8gcGFzcyB0aGlzIGN1c3RvbSBhY3Rpb24gdG8gYEZpbGVCcm93c2VyYCwgYWxvbmcgd2l0aCBzb21lIGZpbGVzOlxcblxcbmBgYHRzeFxcbmV4cG9ydCBjb25zdCBDdXN0b21BY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgY3VzdG9tRmlsZUFjdGlvbnMgPSBbZG93bmxvYWRQc2RBY3Rpb25dOyAvLyA8LS0tLS1cXG4gICAgY29uc3QgZmlsZXMgPSBbXFxuICAgICAgICB7IGlkOiAneFZkRScsIG5hbWU6ICdGbG93ZXJzLnBzZCcgfSxcXG4gICAgICAgIHsgaWQ6ICdiVGVYJywgbmFtZTogJ01vdW50YWlucy5wc2QnIH0sXFxuICAgICAgICB7IGlkOiAnbUdlWCcsIG5hbWU6ICdTa3kucHNkJyB9LFxcbiAgICAgICAgeyBpZDogJ21GdGUnLCBuYW1lOiAnU3RhcnMucHNkJyB9LFxcbiAgICAgICAgeyBpZDogJ3RMd1onLCBuYW1lOiAnUGFyc2VyLnJzJyB9LFxcbiAgICAgICAgeyBpZDogJ21HclEnLCBuYW1lOiAncGFja2FnZS5qc29uJyB9LFxcbiAgICBdO1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXIgZmlsZXM9e2ZpbGVzfSBmaWxlQWN0aW9ucz17Y3VzdG9tRmlsZUFjdGlvbnMgLyogPC0tLS0gKi99PlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVTZWFyY2ggLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuYGBgXFxuXFxuWW91IGNhbiBzZWUgdGhlIG91dGNvbWUgaW4gdGhlIGxpdmUgZXhhbXBsZSBiZWxvdy4gTm90ZSBob3cgdGhlIGJ1dHRvbiBvbmx5IGJlY29tZXNcXG5lbmFibGVkIHdoZW4geW91IHNlbGVjdCBzb21lIGAucHNkYCBmaWxlcy4gQWxzbywgd2hlbiB5b3UgY2xpY2sgXFxcIkRvd25sb2FkIFBob3Rvc2hvcFxcbmZpbGVzXFxcIiwgdGhlIGFjdGlvbiBwb3B1cCBvbmx5IGluY2x1ZGVzIGAucHNkYCBmaWxlcy4gQWZ0ZXIgeW91IG1ha2UgeW91ciBzZWxlY3Rpb24sXFxueW91IGNhbiBhbHNvIHByZXNzIGBDdHJsK1FgIHRvIG1ha2UgeW91ciBzZWxlY3Rpb24uXFxuXCI7IiwiXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XFxcXG5pbXBvcnQge1xcXFxuICAgIEZpbGVBY3Rpb24sXFxcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxcXG4gICAgRmlsZUJyb3dzZXIsXFxcXG4gICAgRmlsZURhdGEsXFxcXG4gICAgRmlsZUxpc3QsXFxcXG4gICAgRmlsZVRvb2xiYXIsXFxcXG59IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA2LVRodW1ibmFpbHMubWQnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xGaWxlIHRodW1ibmFpbHMnLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgQWN0aW9uc0V4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgdGh1bWJuYWlsR2VuZXJhdG9yID0gKGZpbGU6IEZpbGVEYXRhICYgeyBkZWxheTogbnVtYmVyIH0pID0+IHtcXFxcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XFxcXG4gICAgICAgICAgICAvLyBEZWxheSBsb2FkaW5nIGJ5IGBmaWxlLmRlbGF5YCBzZWNvbmRzIHRvIHNpbXVsYXRlIHRodW1iIGdlbmVyYXRpb24uXFxcXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUoJy4vTGVubmEucG5nJyksIGZpbGUuZGVsYXkgKiAxMDAwKTtcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgUGljdHVyZXMnLCBpc0RpcjogdHJ1ZSB9XTtcXFxcbiAgICBjb25zdCBmaWxlczogRmlsZURhdGFbXSA9IFtdO1xcXFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjA7ICsraSkge1xcXFxuICAgICAgICBjb25zdCBkZWxheSA9IGkgKiAyO1xcXFxuICAgICAgICBmaWxlcy5wdXNoKHtcXFxcbiAgICAgICAgICAgIGlkOiBgaW1hZ2UtJHtpfWAsXFxcXG4gICAgICAgICAgICBuYW1lOiBgRGVsYXkgLSAke2RlbGF5fSBzZWNvbmRzLmpwZ2AsXFxcXG4gICAgICAgICAgICBkZWxheTogZGVsYXksXFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH1cXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFxcXFxcImxpdmUtZXhhbXBsZVxcXFxcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICB0aHVtYm5haWxHZW5lcmF0b3I9e3RodW1ibmFpbEdlbmVyYXRvcn0gLy8gPC0tLS1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwiMS1maWxlLWJyb3dzZXItYmFzaWNzLWZpbGUtdGh1bWJuYWlscy0tYWN0aW9ucy1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzAsXFxcImxpbmVcXFwiOjI3fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjR9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozMCxcXFwibGluZVxcXCI6Mjd9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjR9fX07XFxuICAgIFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XFxuaW1wb3J0IHtcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVCcm93c2VyLFxcbiAgICBGaWxlRGF0YSxcXG4gICAgRmlsZUxpc3QsXFxuICAgIEZpbGVUb29sYmFyLFxcbn0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDYtVGh1bWJuYWlscy5tZCc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xGaWxlIHRodW1ibmFpbHMnLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcInN0b3J5U291cmNlXFxcIjp7XFxcInNvdXJjZVxcXCI6XFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnO1xcXFxuaW1wb3J0IHtcXFxcbiAgICBGaWxlQWN0aW9uLFxcXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcXFxuICAgIEZpbGVCcm93c2VyLFxcXFxuICAgIEZpbGVEYXRhLFxcXFxuICAgIEZpbGVMaXN0LFxcXFxuICAgIEZpbGVUb29sYmFyLFxcXFxufSBmcm9tICdjaG9ua3knO1xcXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNi1UaHVtYm5haWxzLm1kJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8RmlsZSB0aHVtYm5haWxzJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IHRodW1ibmFpbEdlbmVyYXRvciA9IChmaWxlOiBGaWxlRGF0YSAmIHsgZGVsYXk6IG51bWJlciB9KSA9PiB7XFxcXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xcXFxuICAgICAgICAgICAgLy8gRGVsYXkgbG9hZGluZyBieSBgZmlsZS5kZWxheWAgc2Vjb25kcyB0byBzaW11bGF0ZSB0aHVtYiBnZW5lcmF0aW9uLlxcXFxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKCcuL0xlbm5hLnBuZycpLCBmaWxlLmRlbGF5ICogMTAwMCk7XFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IFBpY3R1cmVzJywgaXNEaXI6IHRydWUgfV07XFxcXG4gICAgY29uc3QgZmlsZXM6IEZpbGVEYXRhW10gPSBbXTtcXFxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDIwOyArK2kpIHtcXFxcbiAgICAgICAgY29uc3QgZGVsYXkgPSBpICogMjtcXFxcbiAgICAgICAgZmlsZXMucHVzaCh7XFxcXG4gICAgICAgICAgICBpZDogYGltYWdlLSR7aX1gLFxcXFxuICAgICAgICAgICAgbmFtZTogYERlbGF5IC0gJHtkZWxheX0gc2Vjb25kcy5qcGdgLFxcXFxuICAgICAgICAgICAgZGVsYXk6IGRlbGF5LFxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcXFxcXCJsaXZlLWV4YW1wbGVcXFxcXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxcXG4gICAgICAgICAgICAgICAgdGh1bWJuYWlsR2VuZXJhdG9yPXt0aHVtYm5haWxHZW5lcmF0b3J9IC8vIDwtLS0tXFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiLFxcXCJsb2NhdGlvbnNNYXBcXFwiOntcXFwiMS1maWxlLWJyb3dzZXItYmFzaWNzLWZpbGUtdGh1bWJuYWlscy0tYWN0aW9ucy1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzAsXFxcImxpbmVcXFwiOjI3fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjR9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozMCxcXFwibGluZVxcXCI6Mjd9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjR9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCB0aHVtYm5haWxHZW5lcmF0b3IgPSAoZmlsZTogRmlsZURhdGEgJiB7IGRlbGF5OiBudW1iZXIgfSkgPT4ge1xcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XFxuICAgICAgICAgICAgLy8gRGVsYXkgbG9hZGluZyBieSBgZmlsZS5kZWxheWAgc2Vjb25kcyB0byBzaW11bGF0ZSB0aHVtYiBnZW5lcmF0aW9uLlxcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSgnLi9MZW5uYS5wbmcnKSwgZmlsZS5kZWxheSAqIDEwMDApO1xcbiAgICAgICAgfSk7XFxuICAgIH07XFxuXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgUGljdHVyZXMnLCBpc0RpcjogdHJ1ZSB9XTtcXG4gICAgY29uc3QgZmlsZXM6IEZpbGVEYXRhW10gPSBbXTtcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyMDsgKytpKSB7XFxuICAgICAgICBjb25zdCBkZWxheSA9IGkgKiAyO1xcbiAgICAgICAgZmlsZXMucHVzaCh7XFxuICAgICAgICAgICAgaWQ6IGBpbWFnZS0ke2l9YCxcXG4gICAgICAgICAgICBuYW1lOiBgRGVsYXkgLSAke2RlbGF5fSBzZWNvbmRzLmpwZ2AsXFxuICAgICAgICAgICAgZGVsYXk6IGRlbGF5LFxcbiAgICAgICAgfSk7XFxuICAgIH1cXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImxpdmUtZXhhbXBsZVxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcbiAgICAgICAgICAgICAgICB0aHVtYm5haWxHZW5lcmF0b3I9e3RodW1ibmFpbEdlbmVyYXRvcn0gLy8gPC0tLS1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIjtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1maWxlLXRodW1ibmFpbHMtLWFjdGlvbnMtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6MzV9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo3Mn0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMCxcImxpbmVcIjozNX0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo3Mn19fTtcbiAgICBcblxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnO1xcbmltcG9ydCB7XFxuICAgIEZpbGVBY3Rpb24sXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcbiAgICBGaWxlQnJvd3NlcixcXG4gICAgRmlsZURhdGEsXFxuICAgIEZpbGVMaXN0LFxcbiAgICBGaWxlVG9vbGJhcixcXG59IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA2LVRodW1ibmFpbHMubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8RmlsZSB0aHVtYm5haWxzJyxcXG4gICAgcGFyYW1ldGVyczoge1xcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCB0aHVtYm5haWxHZW5lcmF0b3IgPSAoZmlsZTogRmlsZURhdGEgJiB7IGRlbGF5OiBudW1iZXIgfSkgPT4ge1xcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XFxuICAgICAgICAgICAgLy8gRGVsYXkgbG9hZGluZyBieSBgZmlsZS5kZWxheWAgc2Vjb25kcyB0byBzaW11bGF0ZSB0aHVtYiBnZW5lcmF0aW9uLlxcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSgnLi9MZW5uYS5wbmcnKSwgZmlsZS5kZWxheSAqIDEwMDApO1xcbiAgICAgICAgfSk7XFxuICAgIH07XFxuXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgUGljdHVyZXMnLCBpc0RpcjogdHJ1ZSB9XTtcXG4gICAgY29uc3QgZmlsZXM6IEZpbGVEYXRhW10gPSBbXTtcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyMDsgKytpKSB7XFxuICAgICAgICBjb25zdCBkZWxheSA9IGkgKiAyO1xcbiAgICAgICAgZmlsZXMucHVzaCh7XFxuICAgICAgICAgICAgaWQ6IGBpbWFnZS0ke2l9YCxcXG4gICAgICAgICAgICBuYW1lOiBgRGVsYXkgLSAke2RlbGF5fSBzZWNvbmRzLmpwZ2AsXFxuICAgICAgICAgICAgZGVsYXk6IGRlbGF5LFxcbiAgICAgICAgfSk7XFxuICAgIH1cXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImxpdmUtZXhhbXBsZVxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcbiAgICAgICAgICAgICAgICB0aHVtYm5haWxHZW5lcmF0b3I9e3RodW1ibmFpbEdlbmVyYXRvcn0gLy8gPC0tLS1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIjtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1maWxlLXRodW1ibmFpbHMtLWFjdGlvbnMtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6Mjd9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo2NH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMCxcImxpbmVcIjoyN30sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo2NH19fTtcbiAgICBcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcblxuaW1wb3J0IFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHtcbiAgICBGaWxlQWN0aW9uLFxuICAgIEZpbGVBY3Rpb25EYXRhLFxuICAgIEZpbGVCcm93c2VyLFxuICAgIEZpbGVEYXRhLFxuICAgIEZpbGVMaXN0LFxuICAgIEZpbGVUb29sYmFyLFxufSBmcm9tICdjaG9ua3knO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xuLy8gQHRzLWlnbm9yZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNi1UaHVtYm5haWxzLm1kJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1kZWZhdWx0LWV4cG9ydFxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfEZpbGUgdGh1bWJuYWlscycsXG4gICAgcGFyYW1ldGVyczoge1wic3RvcnlTb3VyY2VcIjp7XCJzb3VyY2VcIjpcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XFxcXG5pbXBvcnQge1xcXFxuICAgIEZpbGVBY3Rpb24sXFxcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxcXG4gICAgRmlsZUJyb3dzZXIsXFxcXG4gICAgRmlsZURhdGEsXFxcXG4gICAgRmlsZUxpc3QsXFxcXG4gICAgRmlsZVRvb2xiYXIsXFxcXG59IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA2LVRodW1ibmFpbHMubWQnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xGaWxlIHRodW1ibmFpbHMnLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgQWN0aW9uc0V4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgdGh1bWJuYWlsR2VuZXJhdG9yID0gKGZpbGU6IEZpbGVEYXRhICYgeyBkZWxheTogbnVtYmVyIH0pID0+IHtcXFxcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XFxcXG4gICAgICAgICAgICAvLyBEZWxheSBsb2FkaW5nIGJ5IGBmaWxlLmRlbGF5YCBzZWNvbmRzIHRvIHNpbXVsYXRlIHRodW1iIGdlbmVyYXRpb24uXFxcXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUoJy4vTGVubmEucG5nJyksIGZpbGUuZGVsYXkgKiAxMDAwKTtcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgUGljdHVyZXMnLCBpc0RpcjogdHJ1ZSB9XTtcXFxcbiAgICBjb25zdCBmaWxlczogRmlsZURhdGFbXSA9IFtdO1xcXFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjA7ICsraSkge1xcXFxuICAgICAgICBjb25zdCBkZWxheSA9IGkgKiAyO1xcXFxuICAgICAgICBmaWxlcy5wdXNoKHtcXFxcbiAgICAgICAgICAgIGlkOiBgaW1hZ2UtJHtpfWAsXFxcXG4gICAgICAgICAgICBuYW1lOiBgRGVsYXkgLSAke2RlbGF5fSBzZWNvbmRzLmpwZ2AsXFxcXG4gICAgICAgICAgICBkZWxheTogZGVsYXksXFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH1cXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFxcXFxcImxpdmUtZXhhbXBsZVxcXFxcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICB0aHVtYm5haWxHZW5lcmF0b3I9e3RodW1ibmFpbEdlbmVyYXRvcn0gLy8gPC0tLS1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwiMS1maWxlLWJyb3dzZXItYmFzaWNzLWZpbGUtdGh1bWJuYWlscy0tYWN0aW9ucy1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzAsXFxcImxpbmVcXFwiOjI3fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjR9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozMCxcXFwibGluZVxcXCI6Mjd9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjR9fX07XFxuICAgIFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XFxuaW1wb3J0IHtcXG4gICAgRmlsZUFjdGlvbixcXG4gICAgRmlsZUFjdGlvbkRhdGEsXFxuICAgIEZpbGVCcm93c2VyLFxcbiAgICBGaWxlRGF0YSxcXG4gICAgRmlsZUxpc3QsXFxuICAgIEZpbGVUb29sYmFyLFxcbn0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDYtVGh1bWJuYWlscy5tZCc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xGaWxlIHRodW1ibmFpbHMnLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcInN0b3J5U291cmNlXFxcIjp7XFxcInNvdXJjZVxcXCI6XFxcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcblxcXFxuaW1wb3J0IFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnO1xcXFxuaW1wb3J0IHtcXFxcbiAgICBGaWxlQWN0aW9uLFxcXFxuICAgIEZpbGVBY3Rpb25EYXRhLFxcXFxuICAgIEZpbGVCcm93c2VyLFxcXFxuICAgIEZpbGVEYXRhLFxcXFxuICAgIEZpbGVMaXN0LFxcXFxuICAgIEZpbGVUb29sYmFyLFxcXFxufSBmcm9tICdjaG9ua3knO1xcXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuLy8gQHRzLWlnbm9yZVxcXFxuXFxcXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNi1UaHVtYm5haWxzLm1kJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8RmlsZSB0aHVtYm5haWxzJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IHRodW1ibmFpbEdlbmVyYXRvciA9IChmaWxlOiBGaWxlRGF0YSAmIHsgZGVsYXk6IG51bWJlciB9KSA9PiB7XFxcXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xcXFxuICAgICAgICAgICAgLy8gRGVsYXkgbG9hZGluZyBieSBgZmlsZS5kZWxheWAgc2Vjb25kcyB0byBzaW11bGF0ZSB0aHVtYiBnZW5lcmF0aW9uLlxcXFxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKCcuL0xlbm5hLnBuZycpLCBmaWxlLmRlbGF5ICogMTAwMCk7XFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IFBpY3R1cmVzJywgaXNEaXI6IHRydWUgfV07XFxcXG4gICAgY29uc3QgZmlsZXM6IEZpbGVEYXRhW10gPSBbXTtcXFxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDIwOyArK2kpIHtcXFxcbiAgICAgICAgY29uc3QgZGVsYXkgPSBpICogMjtcXFxcbiAgICAgICAgZmlsZXMucHVzaCh7XFxcXG4gICAgICAgICAgICBpZDogYGltYWdlLSR7aX1gLFxcXFxuICAgICAgICAgICAgbmFtZTogYERlbGF5IC0gJHtkZWxheX0gc2Vjb25kcy5qcGdgLFxcXFxuICAgICAgICAgICAgZGVsYXk6IGRlbGF5LFxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcXFxcXCJsaXZlLWV4YW1wbGVcXFxcXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxcXG4gICAgICAgICAgICAgICAgdGh1bWJuYWlsR2VuZXJhdG9yPXt0aHVtYm5haWxHZW5lcmF0b3J9IC8vIDwtLS0tXFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICAgICAgb25GaWxlQWN0aW9uPXtoYW5kbGVGaWxlQWN0aW9ufVxcXFxuICAgICAgICAgICAgPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcXFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcXFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgKTtcXFxcbn07XFxcXG5cXFwiLFxcXCJsb2NhdGlvbnNNYXBcXFwiOntcXFwiMS1maWxlLWJyb3dzZXItYmFzaWNzLWZpbGUtdGh1bWJuYWlscy0tYWN0aW9ucy1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzAsXFxcImxpbmVcXFwiOjI3fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjR9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozMCxcXFwibGluZVxcXCI6Mjd9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NjR9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEFjdGlvbnNFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCB0aHVtYm5haWxHZW5lcmF0b3IgPSAoZmlsZTogRmlsZURhdGEgJiB7IGRlbGF5OiBudW1iZXIgfSkgPT4ge1xcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XFxuICAgICAgICAgICAgLy8gRGVsYXkgbG9hZGluZyBieSBgZmlsZS5kZWxheWAgc2Vjb25kcyB0byBzaW11bGF0ZSB0aHVtYiBnZW5lcmF0aW9uLlxcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSgnLi9MZW5uYS5wbmcnKSwgZmlsZS5kZWxheSAqIDEwMDApO1xcbiAgICAgICAgfSk7XFxuICAgIH07XFxuXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW3sgaWQ6ICdnQnQ0ejMnLCBuYW1lOiAnTXkgUGljdHVyZXMnLCBpc0RpcjogdHJ1ZSB9XTtcXG4gICAgY29uc3QgZmlsZXM6IEZpbGVEYXRhW10gPSBbXTtcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyMDsgKytpKSB7XFxuICAgICAgICBjb25zdCBkZWxheSA9IGkgKiAyO1xcbiAgICAgICAgZmlsZXMucHVzaCh7XFxuICAgICAgICAgICAgaWQ6IGBpbWFnZS0ke2l9YCxcXG4gICAgICAgICAgICBuYW1lOiBgRGVsYXkgLSAke2RlbGF5fSBzZWNvbmRzLmpwZ2AsXFxuICAgICAgICAgICAgZGVsYXk6IGRlbGF5LFxcbiAgICAgICAgfSk7XFxuICAgIH1cXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImxpdmUtZXhhbXBsZVxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcbiAgICAgICAgICAgICAgICB0aHVtYm5haWxHZW5lcmF0b3I9e3RodW1ibmFpbEdlbmVyYXRvcn0gLy8gPC0tLS1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIixcImxvY2F0aW9uc01hcFwiOntcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1maWxlLXRodW1ibmFpbHMtLWFjdGlvbnMtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6MzV9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo3Mn0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMCxcImxpbmVcIjozNX0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo3Mn19fX0sXCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCBQcm9taXNlIGZyb20gJ2JsdWViaXJkJztcXG5pbXBvcnQge1xcbiAgICBGaWxlQWN0aW9uLFxcbiAgICBGaWxlQWN0aW9uRGF0YSxcXG4gICAgRmlsZUJyb3dzZXIsXFxuICAgIEZpbGVEYXRhLFxcbiAgICBGaWxlTGlzdCxcXG4gICAgRmlsZVRvb2xiYXIsXFxufSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNi1UaHVtYm5haWxzLm1kJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfEZpbGUgdGh1bWJuYWlscycsXFxuICAgIHBhcmFtZXRlcnM6IHtcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBBY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgdGh1bWJuYWlsR2VuZXJhdG9yID0gKGZpbGU6IEZpbGVEYXRhICYgeyBkZWxheTogbnVtYmVyIH0pID0+IHtcXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xcbiAgICAgICAgICAgIC8vIERlbGF5IGxvYWRpbmcgYnkgYGZpbGUuZGVsYXlgIHNlY29uZHMgdG8gc2ltdWxhdGUgdGh1bWIgZ2VuZXJhdGlvbi5cXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUoJy4vTGVubmEucG5nJyksIGZpbGUuZGVsYXkgKiAxMDAwKTtcXG4gICAgICAgIH0pO1xcbiAgICB9O1xcblxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFt7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IFBpY3R1cmVzJywgaXNEaXI6IHRydWUgfV07XFxuICAgIGNvbnN0IGZpbGVzOiBGaWxlRGF0YVtdID0gW107XFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjA7ICsraSkge1xcbiAgICAgICAgY29uc3QgZGVsYXkgPSBpICogMjtcXG4gICAgICAgIGZpbGVzLnB1c2goe1xcbiAgICAgICAgICAgIGlkOiBgaW1hZ2UtJHtpfWAsXFxuICAgICAgICAgICAgbmFtZTogYERlbGF5IC0gJHtkZWxheX0gc2Vjb25kcy5qcGdgLFxcbiAgICAgICAgICAgIGRlbGF5OiBkZWxheSxcXG4gICAgICAgIH0pO1xcbiAgICB9XFxuXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXG4gICAgfTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJsaXZlLWV4YW1wbGVcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXG4gICAgICAgICAgICAgICAgdGh1bWJuYWlsR2VuZXJhdG9yPXt0aHVtYm5haWxHZW5lcmF0b3J9IC8vIDwtLS0tXFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCIsXCJsb2NhdGlvbnNNYXBcIjp7XCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtZmlsZS10aHVtYm5haWxzLS1hY3Rpb25zLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjMwLFwibGluZVwiOjI3fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6NjR9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzAsXCJsaW5lXCI6Mjd9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6NjR9fX19LFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXG4gICAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBBY3Rpb25zRXhhbXBsZSA9ICgpID0+IHtcbiAgICBjb25zdCB0aHVtYm5haWxHZW5lcmF0b3IgPSAoZmlsZTogRmlsZURhdGEgJiB7IGRlbGF5OiBudW1iZXIgfSkgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIC8vIERlbGF5IGxvYWRpbmcgYnkgYGZpbGUuZGVsYXlgIHNlY29uZHMgdG8gc2ltdWxhdGUgdGh1bWIgZ2VuZXJhdGlvbi5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSgnLi9MZW5uYS5wbmcnKSwgZmlsZS5kZWxheSAqIDEwMDApO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBQaWN0dXJlcycsIGlzRGlyOiB0cnVlIH1dO1xuICAgIGNvbnN0IGZpbGVzOiBGaWxlRGF0YVtdID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyMDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGRlbGF5ID0gaSAqIDI7XG4gICAgICAgIGZpbGVzLnB1c2goe1xuICAgICAgICAgICAgaWQ6IGBpbWFnZS0ke2l9YCxcbiAgICAgICAgICAgIG5hbWU6IGBEZWxheSAtICR7ZGVsYXl9IHNlY29uZHMuanBnYCxcbiAgICAgICAgICAgIGRlbGF5OiBkZWxheSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGl2ZS1leGFtcGxlXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxuICAgICAgICAgICAgICAgIHRodW1ibmFpbEdlbmVyYXRvcj17dGh1bWJuYWlsR2VuZXJhdG9yfSAvLyA8LS0tLVxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgXCJGaWxlIHRodW1ibmFpbHMsIHdvbyFcXG5cIjsiLCJcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAvLyBAdHMtbm9jaGVja1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fU1RPUllfXyA9IFwiXFxuICAgICAgXFxuICAgICAgLy8gQHRzLW5vY2hlY2tcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fU1RPUllfXyA9IFxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDctRHJhZy1uLWRyb3AubWQnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xFbmFibGluZyBkcmFnICYgZHJvcCcsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBEcmFnTkRyb3BFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW1xcXFxuICAgICAgICB7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IERvY3VtZW50cycsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdnTTV0VGUnLCBuYW1lOiAnT3RoZXInLCBpc0RpcjogdHJ1ZSB9LFxcXFxuICAgIF07XFxcXG4gICAgY29uc3QgZmlsZXMgPSBbXFxcXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXFxcXG4gICAgICAgIHsgaWQ6ICd5dDQzQXgnLCBuYW1lOiAnU0NQLTM5MzAgUGhvdG9zJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXFxcXFwibGl2ZS1leGFtcGxlXFxcXFxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIjtcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1xcXCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtZW5hYmxpbmctZHJhZy1kcm9wLS1kcmFnLW4tZHJvcC1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzIsXFxcImxpbmVcXFwiOjE5fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDZ9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozMixcXFwibGluZVxcXCI6MTl9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDZ9fX07XFxuICAgIFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSwgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA3LURyYWctbi1kcm9wLm1kJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfEVuYWJsaW5nIGRyYWcgJiBkcm9wJyxcXG4gICAgcGFyYW1ldGVyczoge1xcXCJzdG9yeVNvdXJjZVxcXCI6e1xcXCJzb3VyY2VcXFwiOlxcXCJpbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxcXG5cXFxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXFxcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDctRHJhZy1uLWRyb3AubWQnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xFbmFibGluZyBkcmFnICYgZHJvcCcsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBEcmFnTkRyb3BFeGFtcGxlID0gKCkgPT4ge1xcXFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW1xcXFxuICAgICAgICB7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IERvY3VtZW50cycsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdnTTV0VGUnLCBuYW1lOiAnT3RoZXInLCBpc0RpcjogdHJ1ZSB9LFxcXFxuICAgIF07XFxcXG4gICAgY29uc3QgZmlsZXMgPSBbXFxcXG4gICAgICAgIHsgaWQ6ICdtSGU0QTEnLCBuYW1lOiAnTWVhbmluZyBvZiBsaWZlLnR4dCcsIHNpemU6IDMxNDE1IH0sXFxcXG4gICAgICAgIHsgaWQ6ICd5dDQzQXgnLCBuYW1lOiAnU0NQLTM5MzAgUGhvdG9zJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIHJldHVybiAoXFxcXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXFxcXFwibGl2ZS1leGFtcGxlXFxcXFxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxcXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXFxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxcXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcIjEtZmlsZS1icm93c2VyLWJhc2ljcy1lbmFibGluZy1kcmFnLWRyb3AtLWRyYWctbi1kcm9wLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozMixcXFwibGluZVxcXCI6MTl9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo0Nn0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjMyLFxcXCJsaW5lXFxcIjoxOX0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo0Nn19fX0sXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgRHJhZ05Ecm9wRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbXFxuICAgICAgICB7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IERvY3VtZW50cycsIGlzRGlyOiB0cnVlIH0sXFxuICAgICAgICB7IGlkOiAnZ001dFRlJywgbmFtZTogJ090aGVyJywgaXNEaXI6IHRydWUgfSxcXG4gICAgXTtcXG4gICAgY29uc3QgZmlsZXMgPSBbXFxuICAgICAgICB7IGlkOiAnbUhlNEExJywgbmFtZTogJ01lYW5pbmcgb2YgbGlmZS50eHQnLCBzaXplOiAzMTQxNSB9LFxcbiAgICAgICAgeyBpZDogJ3l0NDNBeCcsIG5hbWU6ICdTQ1AtMzkzMCBQaG90b3MnLCBpc0RpcjogdHJ1ZSB9LFxcbiAgICBdO1xcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwibGl2ZS1leGFtcGxlXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCI7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtZW5hYmxpbmctZHJhZy1kcm9wLS1kcmFnLW4tZHJvcC1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozMixcImxpbmVcIjoyN30sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjU0fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjMyLFwibGluZVwiOjI3fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjU0fX19O1xuICAgIFxuXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5cXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSwgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA3LURyYWctbi1kcm9wLm1kJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiAnMSBGaWxlIEJyb3dzZXIgYmFzaWNzfEVuYWJsaW5nIGRyYWcgJiBkcm9wJyxcXG4gICAgcGFyYW1ldGVyczoge1xcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IERyYWdORHJvcEV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW1xcbiAgICAgICAgeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBEb2N1bWVudHMnLCBpc0RpcjogdHJ1ZSB9LFxcbiAgICAgICAgeyBpZDogJ2dNNXRUZScsIG5hbWU6ICdPdGhlcicsIGlzRGlyOiB0cnVlIH0sXFxuICAgIF07XFxuICAgIGNvbnN0IGZpbGVzID0gW1xcbiAgICAgICAgeyBpZDogJ21IZTRBMScsIG5hbWU6ICdNZWFuaW5nIG9mIGxpZmUudHh0Jywgc2l6ZTogMzE0MTUgfSxcXG4gICAgICAgIHsgaWQ6ICd5dDQzQXgnLCBuYW1lOiAnU0NQLTM5MzAgUGhvdG9zJywgaXNEaXI6IHRydWUgfSxcXG4gICAgXTtcXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImxpdmUtZXhhbXBsZVxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiMS1maWxlLWJyb3dzZXItYmFzaWNzLWVuYWJsaW5nLWRyYWctZHJvcC0tZHJhZy1uLWRyb3AtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzIsXCJsaW5lXCI6MTl9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo0Nn0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMixcImxpbmVcIjoxOX0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo0Nn19fTtcbiAgICBcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcblxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xuLy8gQHRzLWlnbm9yZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNy1EcmFnLW4tZHJvcC5tZCc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZGVmYXVsdC1leHBvcnRcbmV4cG9ydCBkZWZhdWx0IHtcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xFbmFibGluZyBkcmFnICYgZHJvcCcsXG4gICAgcGFyYW1ldGVyczoge1wic3RvcnlTb3VyY2VcIjp7XCJzb3VyY2VcIjpcIlxcbiAgICAgIFxcbiAgICAgIC8vIEB0cy1ub2NoZWNrXFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSwgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA3LURyYWctbi1kcm9wLm1kJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8RW5hYmxpbmcgZHJhZyAmIGRyb3AnLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgRHJhZ05Ecm9wRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFtcXFxcbiAgICAgICAgeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBEb2N1bWVudHMnLCBpc0RpcjogdHJ1ZSB9LFxcXFxuICAgICAgICB7IGlkOiAnZ001dFRlJywgbmFtZTogJ090aGVyJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuICAgIGNvbnN0IGZpbGVzID0gW1xcXFxuICAgICAgICB7IGlkOiAnbUhlNEExJywgbmFtZTogJ01lYW5pbmcgb2YgbGlmZS50eHQnLCBzaXplOiAzMTQxNSB9LFxcXFxuICAgICAgICB7IGlkOiAneXQ0M0F4JywgbmFtZTogJ1NDUC0zOTMwIFBob3RvcycsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFxcXFxcImxpdmUtZXhhbXBsZVxcXFxcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwiMS1maWxlLWJyb3dzZXItYmFzaWNzLWVuYWJsaW5nLWRyYWctZHJvcC0tZHJhZy1uLWRyb3AtZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjMyLFxcXCJsaW5lXFxcIjoxOX0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjQ2fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzIsXFxcImxpbmVcXFwiOjE5fSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjQ2fX19O1xcbiAgICBcXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuXFxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wNy1EcmFnLW4tZHJvcC5tZCc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogJzEgRmlsZSBCcm93c2VyIGJhc2ljc3xFbmFibGluZyBkcmFnICYgZHJvcCcsXFxuICAgIHBhcmFtZXRlcnM6IHtcXFwic3RvcnlTb3VyY2VcXFwiOntcXFwic291cmNlXFxcIjpcXFwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuXFxcXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSwgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzA3LURyYWctbi1kcm9wLm1kJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8RW5hYmxpbmcgZHJhZyAmIGRyb3AnLFxcXFxuICAgIHBhcmFtZXRlcnM6IHtcXFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcXFxuICAgIH0sXFxcXG59O1xcXFxuXFxcXG5leHBvcnQgY29uc3QgRHJhZ05Ecm9wRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFtcXFxcbiAgICAgICAgeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBEb2N1bWVudHMnLCBpc0RpcjogdHJ1ZSB9LFxcXFxuICAgICAgICB7IGlkOiAnZ001dFRlJywgbmFtZTogJ090aGVyJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuICAgIGNvbnN0IGZpbGVzID0gW1xcXFxuICAgICAgICB7IGlkOiAnbUhlNEExJywgbmFtZTogJ01lYW5pbmcgb2YgbGlmZS50eHQnLCBzaXplOiAzMTQxNSB9LFxcXFxuICAgICAgICB7IGlkOiAneXQ0M0F4JywgbmFtZTogJ1NDUC0zOTMwIFBob3RvcycsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgXTtcXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFxcXFxcImxpdmUtZXhhbXBsZVxcXFxcXFwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCIsXFxcImxvY2F0aW9uc01hcFxcXCI6e1xcXCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtZW5hYmxpbmctZHJhZy1kcm9wLS1kcmFnLW4tZHJvcC1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzIsXFxcImxpbmVcXFwiOjE5fSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDZ9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozMixcXFwibGluZVxcXCI6MTl9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDZ9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IERyYWdORHJvcEV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGZvbGRlckNoYWluID0gW1xcbiAgICAgICAgeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBEb2N1bWVudHMnLCBpc0RpcjogdHJ1ZSB9LFxcbiAgICAgICAgeyBpZDogJ2dNNXRUZScsIG5hbWU6ICdPdGhlcicsIGlzRGlyOiB0cnVlIH0sXFxuICAgIF07XFxuICAgIGNvbnN0IGZpbGVzID0gW1xcbiAgICAgICAgeyBpZDogJ21IZTRBMScsIG5hbWU6ICdNZWFuaW5nIG9mIGxpZmUudHh0Jywgc2l6ZTogMzE0MTUgfSxcXG4gICAgICAgIHsgaWQ6ICd5dDQzQXgnLCBuYW1lOiAnU0NQLTM5MzAgUGhvdG9zJywgaXNEaXI6IHRydWUgfSxcXG4gICAgXTtcXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImxpdmUtZXhhbXBsZVxcXCIgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXG4gICAgICAgICAgICAgICAgZm9sZGVyQ2hhaW49e2ZvbGRlckNoYWlufVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiLFwibG9jYXRpb25zTWFwXCI6e1wiMS1maWxlLWJyb3dzZXItYmFzaWNzLWVuYWJsaW5nLWRyYWctZHJvcC0tZHJhZy1uLWRyb3AtZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzIsXCJsaW5lXCI6Mjd9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo1NH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozMixcImxpbmVcIjoyN30sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo1NH19fX0sXCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcblxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDctRHJhZy1uLWRyb3AubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcxIEZpbGUgQnJvd3NlciBiYXNpY3N8RW5hYmxpbmcgZHJhZyAmIGRyb3AnLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxuICAgIH0sXFxufTtcXG5cXG5leHBvcnQgY29uc3QgRHJhZ05Ecm9wRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgZm9sZGVyQ2hhaW4gPSBbXFxuICAgICAgICB7IGlkOiAnZ0J0NHozJywgbmFtZTogJ015IERvY3VtZW50cycsIGlzRGlyOiB0cnVlIH0sXFxuICAgICAgICB7IGlkOiAnZ001dFRlJywgbmFtZTogJ090aGVyJywgaXNEaXI6IHRydWUgfSxcXG4gICAgXTtcXG4gICAgY29uc3QgZmlsZXMgPSBbXFxuICAgICAgICB7IGlkOiAnbUhlNEExJywgbmFtZTogJ01lYW5pbmcgb2YgbGlmZS50eHQnLCBzaXplOiAzMTQxNSB9LFxcbiAgICAgICAgeyBpZDogJ3l0NDNBeCcsIG5hbWU6ICdTQ1AtMzkzMCBQaG90b3MnLCBpc0RpcjogdHJ1ZSB9LFxcbiAgICBdO1xcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwibGl2ZS1leGFtcGxlXFxcIiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcbiAgICAgICAgICAgICAgICBmb2xkZXJDaGFpbj17Zm9sZGVyQ2hhaW59XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCIsXCJsb2NhdGlvbnNNYXBcIjp7XCIxLWZpbGUtYnJvd3Nlci1iYXNpY3MtZW5hYmxpbmctZHJhZy1kcm9wLS1kcmFnLW4tZHJvcC1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozMixcImxpbmVcIjoxOX0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjQ2fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjMyLFwibGluZVwiOjE5fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjQ2fX19fSxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxuICAgIH0sXG59O1xuXG5leHBvcnQgY29uc3QgRHJhZ05Ecm9wRXhhbXBsZSA9ICgpID0+IHtcbiAgICBjb25zdCBmb2xkZXJDaGFpbiA9IFtcbiAgICAgICAgeyBpZDogJ2dCdDR6MycsIG5hbWU6ICdNeSBEb2N1bWVudHMnLCBpc0RpcjogdHJ1ZSB9LFxuICAgICAgICB7IGlkOiAnZ001dFRlJywgbmFtZTogJ090aGVyJywgaXNEaXI6IHRydWUgfSxcbiAgICBdO1xuICAgIGNvbnN0IGZpbGVzID0gW1xuICAgICAgICB7IGlkOiAnbUhlNEExJywgbmFtZTogJ01lYW5pbmcgb2YgbGlmZS50eHQnLCBzaXplOiAzMTQxNSB9LFxuICAgICAgICB7IGlkOiAneXQ0M0F4JywgbmFtZTogJ1NDUC0zOTMwIFBob3RvcycsIGlzRGlyOiB0cnVlIH0sXG4gICAgXTtcblxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxpdmUtZXhhbXBsZVwiIHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxuICAgICAgICAgICAgICAgIGZvbGRlckNoYWluPXtmb2xkZXJDaGFpbn1cbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IFwiWW91IG1pZ2h0IG5vdGljZSB0aGF0IGRyYWcgJiBkcm9wIGRvZXMgbm90IHdvcmsgb3V0LW9mLXRoZS1ib3ggaW4gQ2hvbmt5LiBUaGlzIGlzXFxuYmVjYXVzZSBDaG9ua3kgdXNlcyBbcmVhY3QtZG5kXShodHRwczovL3JlYWN0LWRuZC5naXRodWIuaW8vcmVhY3QtZG5kLykgbGlicmFyeSB0b1xcbmhhbmRsZSBkcmFnICYgZHJvcCwgd2hpY2ggaXMgbm90IHR1cm5lZCBieSBkZWZhdWx0LlxcblxcblRvIGVuYWJsZSBkcmFnICYgZHJvcCwgeW91IHdpbGwgbmVlZCB0byB3cmFwIHlvdXIgYXBwbGljYXRpb24gcm9vdCB3aXRoIHRoZVxcbmA8RG5kUHJvdmlkZXI+YCBjb21wb25lbnQgZnJvbSByZWFjdC1kbmQ6XFxuXFxuYGBgdHN4XFxuaW1wb3J0IFJlYWN0LCB7IFJlYWN0RE9NIH0gZnJvbSAncmVhY3QnO1xcbmltcG9ydCB7IERuZFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtZG5kJztcXG5pbXBvcnQgeyBIVE1MNUJhY2tlbmQgfSBmcm9tICdyZWFjdC1kbmQtaHRtbDUtYmFja2VuZCc7XFxuXFxuUmVhY3RET00ucmVuZGVyKFxcbiAgICA8RG5kUHJvdmlkZXIgYmFja2VuZD17SFRNTDVCYWNrZW5kfT5cXG4gICAgICAgIDxBcHAgLz5cXG4gICAgPC9EbmRQcm92aWRlcj4sXFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHAnKVxcbik7XFxuYGBgXFxuXFxuTmV4dCwgZW5hYmxlIGRyYWcgJiBkcm9wIGluIHlvdXIgYDxGaWxlQnJvd3Nlcj5gOlxcblxcbmBgYHRzeFxcbjxGaWxlQnJvd3NlclxcbiAgICBmaWxlcz17ZmlsZXN9XFxuICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfSAvLyA8LS0tLVxcbj5cXG4gICAgPEZpbGVUb29sYmFyIC8+XFxuICAgIDxGaWxlTGlzdCAvPlxcbjwvRmlsZUJyb3dzZXI+XFxuYGBgXFxuXFxuT25jZSB5b3UgZG8gdGhpcywgZHJhZyAmIGRyb3Agc2hvdWxkIHN0YXJ0IHdvcmtpbmcgaW4gYWxsIENob25reSBpbnN0YW5jZXMuIEZZSSwgeW91XFxuZG9uJ3QgaGF2ZSB0byB1c2UgYEhUTUw1QmFja2VuZGAsIHlvdSBjYW4gcmVwbGFjZSBpdCB3aXRoIGFueSBiYWNrZW5kIHlvdSB3YW50LiBDb25zdWx0XFxuW3JlYWN0LWRuZCBkb2NzXShodHRwczovL3JlYWN0LWRuZC5naXRodWIuaW8vcmVhY3QtZG5kL2RvY3Mvb3ZlcnZpZXcpIGZvciBkZXRhaWxzLlxcblwiOyIsIlxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJcXG4gICAgICBcXG4gICAgICAvLyBAdHMtbm9jaGVja1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19TVE9SWV9fID0gXFxcImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcbmltcG9ydCB7IEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0IH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG5cXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtSW52YWxpZC1wcm9wcy5tZCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnMiBGaWxlIEJyb3dzZXIgZXhhbXBsZXN8UGFzc2luZyBpbnZhbGlkIHByb3BzJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEludmFsaWRQcm9wc0V4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgYmFkRmlsZXMgPSBbXFxcXG4gICAgICAgIDEyMzEyLCAvLyBOb3QgYW4gb2JqZWN0IG9yIGBudWxsYCFcXFxcbiAgICAgICAge30sIC8vIE1pc3NpbmcgYWxsIHJlcXVpcmVkIGZpZWxkcyFcXFxcbiAgICAgICAgeyBpZDogJzJ4ZjQnIH0sIC8vIE1pc3Npbmcgc29tZSByZXF1aXJlZCBmaWVsZHMhXFxcXG4gICAgICAgIHsgaWQ6ICcyeGY0JywgbmFtZTogJ1NvbWUgb3RoZXIgZmlsZSEnIH0sIC8vIER1cGxpY2F0ZSBJRCFcXFxcblxcXFxuICAgICAgICB7IGlkOiAneGJBcicsIG5hbWU6ICdHb29kIGZpbGUudHh0JyB9LCAvLyBHb29kIGZpbGUhXFxcXG4gICAgXTtcXFxcbiAgICBjb25zdCBiYWRGb2xkZXJDaGFpbiA9IFtcXFxcbiAgICAgICAgMTIzMTIsIC8vIE5vdCBhbiBvYmplY3Qgb3IgYG51bGxgIVxcXFxuICAgICAgICB7IGlkOiAnYlJ5SCcsIG5hbWU6ICdHb29kIGZvbGRlcicsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdiTWdSJywgbmFtZTogJ0dvb2QgZm9sZGVyICMyJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIHsvKiBAdHMtaWdub3JlICovfVxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyIGZpbGVzPXtiYWRGaWxlc30gZm9sZGVyQ2hhaW49e2JhZEZvbGRlckNoYWlufT5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIjtcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1xcXCIyLWZpbGUtYnJvd3Nlci1leGFtcGxlcy1wYXNzaW5nLWludmFsaWQtcHJvcHMtLWludmFsaWQtcHJvcHMtZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjM1LFxcXCJsaW5lXFxcIjoyMH0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjQ0fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzUsXFxcImxpbmVcXFwiOjIwfSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjQ0fX19O1xcbiAgICBcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5pbXBvcnQgeyBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0IH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuXFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAxLUludmFsaWQtcHJvcHMubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcyIEZpbGUgQnJvd3NlciBleGFtcGxlc3xQYXNzaW5nIGludmFsaWQgcHJvcHMnLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcInN0b3J5U291cmNlXFxcIjp7XFxcInNvdXJjZVxcXCI6XFxcImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcbmltcG9ydCB7IEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0IH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG5cXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtSW52YWxpZC1wcm9wcy5tZCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnMiBGaWxlIEJyb3dzZXIgZXhhbXBsZXN8UGFzc2luZyBpbnZhbGlkIHByb3BzJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEludmFsaWRQcm9wc0V4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgYmFkRmlsZXMgPSBbXFxcXG4gICAgICAgIDEyMzEyLCAvLyBOb3QgYW4gb2JqZWN0IG9yIGBudWxsYCFcXFxcbiAgICAgICAge30sIC8vIE1pc3NpbmcgYWxsIHJlcXVpcmVkIGZpZWxkcyFcXFxcbiAgICAgICAgeyBpZDogJzJ4ZjQnIH0sIC8vIE1pc3Npbmcgc29tZSByZXF1aXJlZCBmaWVsZHMhXFxcXG4gICAgICAgIHsgaWQ6ICcyeGY0JywgbmFtZTogJ1NvbWUgb3RoZXIgZmlsZSEnIH0sIC8vIER1cGxpY2F0ZSBJRCFcXFxcblxcXFxuICAgICAgICB7IGlkOiAneGJBcicsIG5hbWU6ICdHb29kIGZpbGUudHh0JyB9LCAvLyBHb29kIGZpbGUhXFxcXG4gICAgXTtcXFxcbiAgICBjb25zdCBiYWRGb2xkZXJDaGFpbiA9IFtcXFxcbiAgICAgICAgMTIzMTIsIC8vIE5vdCBhbiBvYmplY3Qgb3IgYG51bGxgIVxcXFxuICAgICAgICB7IGlkOiAnYlJ5SCcsIG5hbWU6ICdHb29kIGZvbGRlcicsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdiTWdSJywgbmFtZTogJ0dvb2QgZm9sZGVyICMyJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIHsvKiBAdHMtaWdub3JlICovfVxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyIGZpbGVzPXtiYWRGaWxlc30gZm9sZGVyQ2hhaW49e2JhZEZvbGRlckNoYWlufT5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcIjItZmlsZS1icm93c2VyLWV4YW1wbGVzLXBhc3NpbmctaW52YWxpZC1wcm9wcy0taW52YWxpZC1wcm9wcy1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzUsXFxcImxpbmVcXFwiOjIwfSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDR9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozNSxcXFwibGluZVxcXCI6MjB9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDR9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEludmFsaWRQcm9wc0V4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGJhZEZpbGVzID0gW1xcbiAgICAgICAgMTIzMTIsIC8vIE5vdCBhbiBvYmplY3Qgb3IgYG51bGxgIVxcbiAgICAgICAge30sIC8vIE1pc3NpbmcgYWxsIHJlcXVpcmVkIGZpZWxkcyFcXG4gICAgICAgIHsgaWQ6ICcyeGY0JyB9LCAvLyBNaXNzaW5nIHNvbWUgcmVxdWlyZWQgZmllbGRzIVxcbiAgICAgICAgeyBpZDogJzJ4ZjQnLCBuYW1lOiAnU29tZSBvdGhlciBmaWxlIScgfSwgLy8gRHVwbGljYXRlIElEIVxcblxcbiAgICAgICAgeyBpZDogJ3hiQXInLCBuYW1lOiAnR29vZCBmaWxlLnR4dCcgfSwgLy8gR29vZCBmaWxlIVxcbiAgICBdO1xcbiAgICBjb25zdCBiYWRGb2xkZXJDaGFpbiA9IFtcXG4gICAgICAgIDEyMzEyLCAvLyBOb3QgYW4gb2JqZWN0IG9yIGBudWxsYCFcXG4gICAgICAgIHsgaWQ6ICdiUnlIJywgbmFtZTogJ0dvb2QgZm9sZGVyJywgaXNEaXI6IHRydWUgfSxcXG4gICAgICAgIHsgaWQ6ICdiTWdSJywgbmFtZTogJ0dvb2QgZm9sZGVyICMyJywgaXNEaXI6IHRydWUgfSxcXG4gICAgXTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgey8qIEB0cy1pZ25vcmUgKi99XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyIGZpbGVzPXtiYWRGaWxlc30gZm9sZGVyQ2hhaW49e2JhZEZvbGRlckNoYWlufT5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiMi1maWxlLWJyb3dzZXItZXhhbXBsZXMtcGFzc2luZy1pbnZhbGlkLXByb3BzLS1pbnZhbGlkLXByb3BzLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjM1LFwibGluZVwiOjI4fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6NTJ9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzUsXCJsaW5lXCI6Mjh9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6NTJ9fX07XG4gICAgXG5cbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAvLyBAdHMtbm9jaGVja1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuaW1wb3J0IHsgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxuXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcblxcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMS1JbnZhbGlkLXByb3BzLm1kJztcXG5cXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIHRpdGxlOiAnMiBGaWxlIEJyb3dzZXIgZXhhbXBsZXN8UGFzc2luZyBpbnZhbGlkIHByb3BzJyxcXG4gICAgcGFyYW1ldGVyczoge1xcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEludmFsaWRQcm9wc0V4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGJhZEZpbGVzID0gW1xcbiAgICAgICAgMTIzMTIsIC8vIE5vdCBhbiBvYmplY3Qgb3IgYG51bGxgIVxcbiAgICAgICAge30sIC8vIE1pc3NpbmcgYWxsIHJlcXVpcmVkIGZpZWxkcyFcXG4gICAgICAgIHsgaWQ6ICcyeGY0JyB9LCAvLyBNaXNzaW5nIHNvbWUgcmVxdWlyZWQgZmllbGRzIVxcbiAgICAgICAgeyBpZDogJzJ4ZjQnLCBuYW1lOiAnU29tZSBvdGhlciBmaWxlIScgfSwgLy8gRHVwbGljYXRlIElEIVxcblxcbiAgICAgICAgeyBpZDogJ3hiQXInLCBuYW1lOiAnR29vZCBmaWxlLnR4dCcgfSwgLy8gR29vZCBmaWxlIVxcbiAgICBdO1xcbiAgICBjb25zdCBiYWRGb2xkZXJDaGFpbiA9IFtcXG4gICAgICAgIDEyMzEyLCAvLyBOb3QgYW4gb2JqZWN0IG9yIGBudWxsYCFcXG4gICAgICAgIHsgaWQ6ICdiUnlIJywgbmFtZTogJ0dvb2QgZm9sZGVyJywgaXNEaXI6IHRydWUgfSxcXG4gICAgICAgIHsgaWQ6ICdiTWdSJywgbmFtZTogJ0dvb2QgZm9sZGVyICMyJywgaXNEaXI6IHRydWUgfSxcXG4gICAgXTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgey8qIEB0cy1pZ25vcmUgKi99XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyIGZpbGVzPXtiYWRGaWxlc30gZm9sZGVyQ2hhaW49e2JhZEZvbGRlckNoYWlufT5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiMi1maWxlLWJyb3dzZXItZXhhbXBsZXMtcGFzc2luZy1pbnZhbGlkLXByb3BzLS1pbnZhbGlkLXByb3BzLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjM1LFwibGluZVwiOjIwfSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6NDR9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzUsXCJsaW5lXCI6MjB9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6NDR9fX07XG4gICAgXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XG5pbXBvcnQgeyBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcblxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xuXG4vLyBAdHMtaWdub3JlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAxLUludmFsaWQtcHJvcHMubWQnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWRlZmF1bHQtZXhwb3J0XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgdGl0bGU6ICcyIEZpbGUgQnJvd3NlciBleGFtcGxlc3xQYXNzaW5nIGludmFsaWQgcHJvcHMnLFxuICAgIHBhcmFtZXRlcnM6IHtcInN0b3J5U291cmNlXCI6e1wic291cmNlXCI6XCJcXG4gICAgICBcXG4gICAgICAvLyBAdHMtbm9jaGVja1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19TVE9SWV9fID0gXFxcImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcbmltcG9ydCB7IEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0IH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG5cXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtSW52YWxpZC1wcm9wcy5tZCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnMiBGaWxlIEJyb3dzZXIgZXhhbXBsZXN8UGFzc2luZyBpbnZhbGlkIHByb3BzJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEludmFsaWRQcm9wc0V4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgYmFkRmlsZXMgPSBbXFxcXG4gICAgICAgIDEyMzEyLCAvLyBOb3QgYW4gb2JqZWN0IG9yIGBudWxsYCFcXFxcbiAgICAgICAge30sIC8vIE1pc3NpbmcgYWxsIHJlcXVpcmVkIGZpZWxkcyFcXFxcbiAgICAgICAgeyBpZDogJzJ4ZjQnIH0sIC8vIE1pc3Npbmcgc29tZSByZXF1aXJlZCBmaWVsZHMhXFxcXG4gICAgICAgIHsgaWQ6ICcyeGY0JywgbmFtZTogJ1NvbWUgb3RoZXIgZmlsZSEnIH0sIC8vIER1cGxpY2F0ZSBJRCFcXFxcblxcXFxuICAgICAgICB7IGlkOiAneGJBcicsIG5hbWU6ICdHb29kIGZpbGUudHh0JyB9LCAvLyBHb29kIGZpbGUhXFxcXG4gICAgXTtcXFxcbiAgICBjb25zdCBiYWRGb2xkZXJDaGFpbiA9IFtcXFxcbiAgICAgICAgMTIzMTIsIC8vIE5vdCBhbiBvYmplY3Qgb3IgYG51bGxgIVxcXFxuICAgICAgICB7IGlkOiAnYlJ5SCcsIG5hbWU6ICdHb29kIGZvbGRlcicsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdiTWdSJywgbmFtZTogJ0dvb2QgZm9sZGVyICMyJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIHsvKiBAdHMtaWdub3JlICovfVxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyIGZpbGVzPXtiYWRGaWxlc30gZm9sZGVyQ2hhaW49e2JhZEZvbGRlckNoYWlufT5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIjtcXG4gICAgICAvLyBAdHMtaWdub3JlXFxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1xcXCIyLWZpbGUtYnJvd3Nlci1leGFtcGxlcy1wYXNzaW5nLWludmFsaWQtcHJvcHMtLWludmFsaWQtcHJvcHMtZXhhbXBsZVxcXCI6e1xcXCJzdGFydExvY1xcXCI6e1xcXCJjb2xcXFwiOjM1LFxcXCJsaW5lXFxcIjoyMH0sXFxcImVuZExvY1xcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjQ0fSxcXFwic3RhcnRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MzUsXFxcImxpbmVcXFwiOjIwfSxcXFwiZW5kQm9keVxcXCI6e1xcXCJjb2xcXFwiOjEsXFxcImxpbmVcXFwiOjQ0fX19O1xcbiAgICBcXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5pbXBvcnQgeyBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXG5cXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0IH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxuXFxuLy8gQHRzLWlnbm9yZVxcblxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAxLUludmFsaWQtcHJvcHMubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcyIEZpbGUgQnJvd3NlciBleGFtcGxlc3xQYXNzaW5nIGludmFsaWQgcHJvcHMnLFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcInN0b3J5U291cmNlXFxcIjp7XFxcInNvdXJjZVxcXCI6XFxcImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcbmltcG9ydCB7IEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0IH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG5cXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtSW52YWxpZC1wcm9wcy5tZCc7XFxcXG5cXFxcblxcXFxuZXhwb3J0IGRlZmF1bHQge1xcXFxuICAgIHRpdGxlOiAnMiBGaWxlIEJyb3dzZXIgZXhhbXBsZXN8UGFzc2luZyBpbnZhbGlkIHByb3BzJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IEludmFsaWRQcm9wc0V4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgYmFkRmlsZXMgPSBbXFxcXG4gICAgICAgIDEyMzEyLCAvLyBOb3QgYW4gb2JqZWN0IG9yIGBudWxsYCFcXFxcbiAgICAgICAge30sIC8vIE1pc3NpbmcgYWxsIHJlcXVpcmVkIGZpZWxkcyFcXFxcbiAgICAgICAgeyBpZDogJzJ4ZjQnIH0sIC8vIE1pc3Npbmcgc29tZSByZXF1aXJlZCBmaWVsZHMhXFxcXG4gICAgICAgIHsgaWQ6ICcyeGY0JywgbmFtZTogJ1NvbWUgb3RoZXIgZmlsZSEnIH0sIC8vIER1cGxpY2F0ZSBJRCFcXFxcblxcXFxuICAgICAgICB7IGlkOiAneGJBcicsIG5hbWU6ICdHb29kIGZpbGUudHh0JyB9LCAvLyBHb29kIGZpbGUhXFxcXG4gICAgXTtcXFxcbiAgICBjb25zdCBiYWRGb2xkZXJDaGFpbiA9IFtcXFxcbiAgICAgICAgMTIzMTIsIC8vIE5vdCBhbiBvYmplY3Qgb3IgYG51bGxgIVxcXFxuICAgICAgICB7IGlkOiAnYlJ5SCcsIG5hbWU6ICdHb29kIGZvbGRlcicsIGlzRGlyOiB0cnVlIH0sXFxcXG4gICAgICAgIHsgaWQ6ICdiTWdSJywgbmFtZTogJ0dvb2QgZm9sZGVyICMyJywgaXNEaXI6IHRydWUgfSxcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIHsvKiBAdHMtaWdub3JlICovfVxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyIGZpbGVzPXtiYWRGaWxlc30gZm9sZGVyQ2hhaW49e2JhZEZvbGRlckNoYWlufT5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcIjItZmlsZS1icm93c2VyLWV4YW1wbGVzLXBhc3NpbmctaW52YWxpZC1wcm9wcy0taW52YWxpZC1wcm9wcy1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzUsXFxcImxpbmVcXFwiOjIwfSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDR9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozNSxcXFwibGluZVxcXCI6MjB9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDR9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IEludmFsaWRQcm9wc0V4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGJhZEZpbGVzID0gW1xcbiAgICAgICAgMTIzMTIsIC8vIE5vdCBhbiBvYmplY3Qgb3IgYG51bGxgIVxcbiAgICAgICAge30sIC8vIE1pc3NpbmcgYWxsIHJlcXVpcmVkIGZpZWxkcyFcXG4gICAgICAgIHsgaWQ6ICcyeGY0JyB9LCAvLyBNaXNzaW5nIHNvbWUgcmVxdWlyZWQgZmllbGRzIVxcbiAgICAgICAgeyBpZDogJzJ4ZjQnLCBuYW1lOiAnU29tZSBvdGhlciBmaWxlIScgfSwgLy8gRHVwbGljYXRlIElEIVxcblxcbiAgICAgICAgeyBpZDogJ3hiQXInLCBuYW1lOiAnR29vZCBmaWxlLnR4dCcgfSwgLy8gR29vZCBmaWxlIVxcbiAgICBdO1xcbiAgICBjb25zdCBiYWRGb2xkZXJDaGFpbiA9IFtcXG4gICAgICAgIDEyMzEyLCAvLyBOb3QgYW4gb2JqZWN0IG9yIGBudWxsYCFcXG4gICAgICAgIHsgaWQ6ICdiUnlIJywgbmFtZTogJ0dvb2QgZm9sZGVyJywgaXNEaXI6IHRydWUgfSxcXG4gICAgICAgIHsgaWQ6ICdiTWdSJywgbmFtZTogJ0dvb2QgZm9sZGVyICMyJywgaXNEaXI6IHRydWUgfSxcXG4gICAgXTtcXG5cXG4gICAgcmV0dXJuIChcXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiA1MDAgfX0+XFxuICAgICAgICAgICAgey8qIEB0cy1pZ25vcmUgKi99XFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyIGZpbGVzPXtiYWRGaWxlc30gZm9sZGVyQ2hhaW49e2JhZEZvbGRlckNoYWlufT5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiLFwibG9jYXRpb25zTWFwXCI6e1wiMi1maWxlLWJyb3dzZXItZXhhbXBsZXMtcGFzc2luZy1pbnZhbGlkLXByb3BzLS1pbnZhbGlkLXByb3BzLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjM1LFwibGluZVwiOjI4fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6NTJ9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzUsXCJsaW5lXCI6Mjh9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6NTJ9fX19LFwic3RvcnlTb3VyY2VcIjp7XCJzb3VyY2VcIjpcImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxuXFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcbmltcG9ydCB7IEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcblxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QgfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG5cXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDEtSW52YWxpZC1wcm9wcy5tZCc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogJzIgRmlsZSBCcm93c2VyIGV4YW1wbGVzfFBhc3NpbmcgaW52YWxpZCBwcm9wcycsXFxuICAgIHBhcmFtZXRlcnM6IHtcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBJbnZhbGlkUHJvcHNFeGFtcGxlID0gKCkgPT4ge1xcbiAgICBjb25zdCBiYWRGaWxlcyA9IFtcXG4gICAgICAgIDEyMzEyLCAvLyBOb3QgYW4gb2JqZWN0IG9yIGBudWxsYCFcXG4gICAgICAgIHt9LCAvLyBNaXNzaW5nIGFsbCByZXF1aXJlZCBmaWVsZHMhXFxuICAgICAgICB7IGlkOiAnMnhmNCcgfSwgLy8gTWlzc2luZyBzb21lIHJlcXVpcmVkIGZpZWxkcyFcXG4gICAgICAgIHsgaWQ6ICcyeGY0JywgbmFtZTogJ1NvbWUgb3RoZXIgZmlsZSEnIH0sIC8vIER1cGxpY2F0ZSBJRCFcXG5cXG4gICAgICAgIHsgaWQ6ICd4YkFyJywgbmFtZTogJ0dvb2QgZmlsZS50eHQnIH0sIC8vIEdvb2QgZmlsZSFcXG4gICAgXTtcXG4gICAgY29uc3QgYmFkRm9sZGVyQ2hhaW4gPSBbXFxuICAgICAgICAxMjMxMiwgLy8gTm90IGFuIG9iamVjdCBvciBgbnVsbGAhXFxuICAgICAgICB7IGlkOiAnYlJ5SCcsIG5hbWU6ICdHb29kIGZvbGRlcicsIGlzRGlyOiB0cnVlIH0sXFxuICAgICAgICB7IGlkOiAnYk1nUicsIG5hbWU6ICdHb29kIGZvbGRlciAjMicsIGlzRGlyOiB0cnVlIH0sXFxuICAgIF07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIHsvKiBAdHMtaWdub3JlICovfVxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlciBmaWxlcz17YmFkRmlsZXN9IGZvbGRlckNoYWluPXtiYWRGb2xkZXJDaGFpbn0+XFxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICk7XFxufTtcXG5cIixcImxvY2F0aW9uc01hcFwiOntcIjItZmlsZS1icm93c2VyLWV4YW1wbGVzLXBhc3NpbmctaW52YWxpZC1wcm9wcy0taW52YWxpZC1wcm9wcy1leGFtcGxlXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjozNSxcImxpbmVcIjoyMH0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjQ0fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjM1LFwibGluZVwiOjIwfSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjQ0fX19fSxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxuICAgIH0sXG59O1xuXG5leHBvcnQgY29uc3QgSW52YWxpZFByb3BzRXhhbXBsZSA9ICgpID0+IHtcbiAgICBjb25zdCBiYWRGaWxlcyA9IFtcbiAgICAgICAgMTIzMTIsIC8vIE5vdCBhbiBvYmplY3Qgb3IgYG51bGxgIVxuICAgICAgICB7fSwgLy8gTWlzc2luZyBhbGwgcmVxdWlyZWQgZmllbGRzIVxuICAgICAgICB7IGlkOiAnMnhmNCcgfSwgLy8gTWlzc2luZyBzb21lIHJlcXVpcmVkIGZpZWxkcyFcbiAgICAgICAgeyBpZDogJzJ4ZjQnLCBuYW1lOiAnU29tZSBvdGhlciBmaWxlIScgfSwgLy8gRHVwbGljYXRlIElEIVxuXG4gICAgICAgIHsgaWQ6ICd4YkFyJywgbmFtZTogJ0dvb2QgZmlsZS50eHQnIH0sIC8vIEdvb2QgZmlsZSFcbiAgICBdO1xuICAgIGNvbnN0IGJhZEZvbGRlckNoYWluID0gW1xuICAgICAgICAxMjMxMiwgLy8gTm90IGFuIG9iamVjdCBvciBgbnVsbGAhXG4gICAgICAgIHsgaWQ6ICdiUnlIJywgbmFtZTogJ0dvb2QgZm9sZGVyJywgaXNEaXI6IHRydWUgfSxcbiAgICAgICAgeyBpZDogJ2JNZ1InLCBuYW1lOiAnR29vZCBmb2xkZXIgIzInLCBpc0RpcjogdHJ1ZSB9LFxuICAgIF07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxuICAgICAgICAgICAgey8qIEB0cy1pZ25vcmUgKi99XG4gICAgICAgICAgICA8RmlsZUJyb3dzZXIgZmlsZXM9e2JhZEZpbGVzfSBmb2xkZXJDaGFpbj17YmFkRm9sZGVyQ2hhaW59PlxuICAgICAgICAgICAgICAgIDxGaWxlVG9vbGJhciAvPlxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBcIldoZXJlIHBvc3NpYmxlLCBDaG9ua3kgdHJpZXMgdG8gcmVwb3J0IGVycm9ycyB3aGVuIHRoZXkgYXJpc2UuIEZvciBleGFtcGxlLFxcbmBGaWxlQnJvd3NlcmAgY29tcG9uZW50IGV4cGVjdHMgaXRzIGBmaWxlc2AgcHJvcCB0byBiZSBhbiBhcnJheS4gSWYgeW91IHBhc3Mgc29tZVxcbmludmFsaWQgdmFsdWUgaW5zdGVhZCwgZS5nLiBgbnVsbGAsIHlvdSB3aWxsIHNlZSBhbiBlcnJvciBjb21wb25lbnQgYmVpbmcgcmVuZGVyZWRcXG5pbnN0ZWFkIG9mIHRoZSBmaWxlIGJyb3dzZXIuIFNhbWUgZXJyb3Igd2lsbCBhbHNvIGJlIGxvZ2dlZCB0byBjb25zb2xlLlxcblwiOyIsIlxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJcXG4gICAgICBcXG4gICAgICAvLyBAdHMtbm9jaGVja1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19TVE9SWV9fID0gXFxcImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXFxcblxcXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuXFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAyLVZpcnR1YWxpemF0aW9uLm1kJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICcyIEZpbGUgQnJvd3NlciBleGFtcGxlc3xWaXJ0dWFsaXphdGlvbiB3aXRoIDEwLDAwMCBmaWxlcycsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBWaXJ0dWFsaXphdGlvbkV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgZmlsZXMgPSBbXTtcXFxcblxcXFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwMDA7ICsraSkge1xcXFxuICAgICAgICBmaWxlcy5wdXNoKHtcXFxcbiAgICAgICAgICAgIGlkOiBgZmlsZS0ke2l9YCxcXFxcbiAgICAgICAgICAgIG5hbWU6IGkgPyBgQ2hyb21lICgke2l9KS5leGVgIDogJ0Nocm9tZS5leGUnLFxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwiMi1maWxlLWJyb3dzZXItZXhhbXBsZXMtdmlydHVhbGl6YXRpb24td2l0aC0xMC0wMDAtZmlsZXMtLXZpcnR1YWxpemF0aW9uLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozNyxcXFwibGluZVxcXCI6MjB9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo0Nn0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjM3LFxcXCJsaW5lXFxcIjoyMH0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo0Nn19fTtcXG4gICAgXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcblxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG5cXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDItVmlydHVhbGl6YXRpb24ubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcyIEZpbGUgQnJvd3NlciBleGFtcGxlc3xWaXJ0dWFsaXphdGlvbiB3aXRoIDEwLDAwMCBmaWxlcycsXFxuICAgIHBhcmFtZXRlcnM6IHtcXFwic3RvcnlTb3VyY2VcXFwiOntcXFwic291cmNlXFxcIjpcXFwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG5cXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDItVmlydHVhbGl6YXRpb24ubWQnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJzIgRmlsZSBCcm93c2VyIGV4YW1wbGVzfFZpcnR1YWxpemF0aW9uIHdpdGggMTAsMDAwIGZpbGVzJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IFZpcnR1YWxpemF0aW9uRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBmaWxlcyA9IFtdO1xcXFxuXFxcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDAwMDsgKytpKSB7XFxcXG4gICAgICAgIGZpbGVzLnB1c2goe1xcXFxuICAgICAgICAgICAgaWQ6IGBmaWxlLSR7aX1gLFxcXFxuICAgICAgICAgICAgbmFtZTogaSA/IGBDaHJvbWUgKCR7aX0pLmV4ZWAgOiAnQ2hyb21lLmV4ZScsXFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH1cXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcIjItZmlsZS1icm93c2VyLWV4YW1wbGVzLXZpcnR1YWxpemF0aW9uLXdpdGgtMTAtMDAwLWZpbGVzLS12aXJ0dWFsaXphdGlvbi1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzcsXFxcImxpbmVcXFwiOjIwfSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDZ9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozNyxcXFwibGluZVxcXCI6MjB9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDZ9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IFZpcnR1YWxpemF0aW9uRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgZmlsZXMgPSBbXTtcXG5cXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDAwMDsgKytpKSB7XFxuICAgICAgICBmaWxlcy5wdXNoKHtcXG4gICAgICAgICAgICBpZDogYGZpbGUtJHtpfWAsXFxuICAgICAgICAgICAgbmFtZTogaSA/IGBDaHJvbWUgKCR7aX0pLmV4ZWAgOiAnQ2hyb21lLmV4ZScsXFxuICAgICAgICB9KTtcXG4gICAgfVxcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCI7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCIyLWZpbGUtYnJvd3Nlci1leGFtcGxlcy12aXJ0dWFsaXphdGlvbi13aXRoLTEwLTAwMC1maWxlcy0tdmlydHVhbGl6YXRpb24tZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzcsXCJsaW5lXCI6Mjh9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo1NH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozNyxcImxpbmVcIjoyOH0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo1NH19fTtcbiAgICBcblxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcblxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXG5pbXBvcnQgeyBGaWxlQWN0aW9uLCBGaWxlQWN0aW9uRGF0YSwgRmlsZUJyb3dzZXIsIEZpbGVMaXN0LCBGaWxlVG9vbGJhciB9IGZyb20gJ2Nob25reSc7XFxuXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcblxcbi8vIEB0cy1pZ25vcmVcXG5cXG5pbXBvcnQgbWFya2Rvd24gZnJvbSAnLi8wMi1WaXJ0dWFsaXphdGlvbi5tZCc7XFxuXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICB0aXRsZTogJzIgRmlsZSBCcm93c2VyIGV4YW1wbGVzfFZpcnR1YWxpemF0aW9uIHdpdGggMTAsMDAwIGZpbGVzJyxcXG4gICAgcGFyYW1ldGVyczoge1xcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IFZpcnR1YWxpemF0aW9uRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgZmlsZXMgPSBbXTtcXG5cXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDAwMDsgKytpKSB7XFxuICAgICAgICBmaWxlcy5wdXNoKHtcXG4gICAgICAgICAgICBpZDogYGZpbGUtJHtpfWAsXFxuICAgICAgICAgICAgbmFtZTogaSA/IGBDaHJvbWUgKCR7aX0pLmV4ZWAgOiAnQ2hyb21lLmV4ZScsXFxuICAgICAgICB9KTtcXG4gICAgfVxcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCI7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCIyLWZpbGUtYnJvd3Nlci1leGFtcGxlcy12aXJ0dWFsaXphdGlvbi13aXRoLTEwLTAwMC1maWxlcy0tdmlydHVhbGl6YXRpb24tZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzcsXCJsaW5lXCI6MjB9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo0Nn0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozNyxcImxpbmVcIjoyMH0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo0Nn19fTtcbiAgICBcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcblxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xuXG4vLyBAdHMtaWdub3JlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAyLVZpcnR1YWxpemF0aW9uLm1kJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1kZWZhdWx0LWV4cG9ydFxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHRpdGxlOiAnMiBGaWxlIEJyb3dzZXIgZXhhbXBsZXN8VmlydHVhbGl6YXRpb24gd2l0aCAxMCwwMDAgZmlsZXMnLFxuICAgIHBhcmFtZXRlcnM6IHtcInN0b3J5U291cmNlXCI6e1wic291cmNlXCI6XCJcXG4gICAgICBcXG4gICAgICAvLyBAdHMtbm9jaGVja1xcbiAgICAgIC8vIEB0cy1pZ25vcmVcXG4gICAgICB2YXIgX19TVE9SWV9fID0gXFxcImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxcXG5cXFxcbmltcG9ydCAnY2hvbmt5L3N0eWxlL21haW4uY3NzJztcXFxcbmltcG9ydCB7IEZpbGVBY3Rpb24sIEZpbGVBY3Rpb25EYXRhLCBGaWxlQnJvd3NlciwgRmlsZUxpc3QsIEZpbGVUb29sYmFyIH0gZnJvbSAnY2hvbmt5JztcXFxcblxcXFxuaW1wb3J0IHsgY3JlYXRlRG9jc09iamVjdCwgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL3N0b3J5LWhlbHBlcnMnO1xcXFxuXFxcXG4vLyBAdHMtaWdub3JlXFxcXG5cXFxcbmltcG9ydCBtYXJrZG93biBmcm9tICcuLzAyLVZpcnR1YWxpemF0aW9uLm1kJztcXFxcblxcXFxuXFxcXG5leHBvcnQgZGVmYXVsdCB7XFxcXG4gICAgdGl0bGU6ICcyIEZpbGUgQnJvd3NlciBleGFtcGxlc3xWaXJ0dWFsaXphdGlvbiB3aXRoIDEwLDAwMCBmaWxlcycsXFxcXG4gICAgcGFyYW1ldGVyczoge1xcXFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXFxcXG4gICAgfSxcXFxcbn07XFxcXG5cXFxcbmV4cG9ydCBjb25zdCBWaXJ0dWFsaXphdGlvbkV4YW1wbGUgPSAoKSA9PiB7XFxcXG4gICAgY29uc3QgZmlsZXMgPSBbXTtcXFxcblxcXFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwMDA7ICsraSkge1xcXFxuICAgICAgICBmaWxlcy5wdXNoKHtcXFxcbiAgICAgICAgICAgIGlkOiBgZmlsZS0ke2l9YCxcXFxcbiAgICAgICAgICAgIG5hbWU6IGkgPyBgQ2hyb21lICgke2l9KS5leGVgIDogJ0Nocm9tZS5leGUnLFxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9XFxcXG5cXFxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXFxcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgcmV0dXJuIChcXFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXFxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcXFxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cXFxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxcXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxcXG4gICAgICAgICAgICA+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxcXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxcXG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICApO1xcXFxufTtcXFxcblxcXCI7XFxuICAgICAgLy8gQHRzLWlnbm9yZVxcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcXFwiMi1maWxlLWJyb3dzZXItZXhhbXBsZXMtdmlydHVhbGl6YXRpb24td2l0aC0xMC0wMDAtZmlsZXMtLXZpcnR1YWxpemF0aW9uLWV4YW1wbGVcXFwiOntcXFwic3RhcnRMb2NcXFwiOntcXFwiY29sXFxcIjozNyxcXFwibGluZVxcXCI6MjB9LFxcXCJlbmRMb2NcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo0Nn0sXFxcInN0YXJ0Qm9keVxcXCI6e1xcXCJjb2xcXFwiOjM3LFxcXCJsaW5lXFxcIjoyMH0sXFxcImVuZEJvZHlcXFwiOntcXFwiY29sXFxcIjoxLFxcXCJsaW5lXFxcIjo0Nn19fTtcXG4gICAgXFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcblxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG5cXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDItVmlydHVhbGl6YXRpb24ubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcyIEZpbGUgQnJvd3NlciBleGFtcGxlc3xWaXJ0dWFsaXphdGlvbiB3aXRoIDEwLDAwMCBmaWxlcycsXFxuICAgIHBhcmFtZXRlcnM6IHtcXFwic3RvcnlTb3VyY2VcXFwiOntcXFwic291cmNlXFxcIjpcXFwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXFxcblxcXFxuaW1wb3J0ICdjaG9ua3kvc3R5bGUvbWFpbi5jc3MnO1xcXFxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcXFxuXFxcXG5pbXBvcnQgeyBjcmVhdGVEb2NzT2JqZWN0LCBzaG93QWN0aW9uTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vc3RvcnktaGVscGVycyc7XFxcXG5cXFxcbi8vIEB0cy1pZ25vcmVcXFxcblxcXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDItVmlydHVhbGl6YXRpb24ubWQnO1xcXFxuXFxcXG5cXFxcbmV4cG9ydCBkZWZhdWx0IHtcXFxcbiAgICB0aXRsZTogJzIgRmlsZSBCcm93c2VyIGV4YW1wbGVzfFZpcnR1YWxpemF0aW9uIHdpdGggMTAsMDAwIGZpbGVzJyxcXFxcbiAgICBwYXJhbWV0ZXJzOiB7XFxcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXFxcbiAgICB9LFxcXFxufTtcXFxcblxcXFxuZXhwb3J0IGNvbnN0IFZpcnR1YWxpemF0aW9uRXhhbXBsZSA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBmaWxlcyA9IFtdO1xcXFxuXFxcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDAwMDsgKytpKSB7XFxcXG4gICAgICAgIGZpbGVzLnB1c2goe1xcXFxuICAgICAgICAgICAgaWQ6IGBmaWxlLSR7aX1gLFxcXFxuICAgICAgICAgICAgbmFtZTogaSA/IGBDaHJvbWUgKCR7aX0pLmV4ZWAgOiAnQ2hyb21lLmV4ZScsXFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH1cXFxcblxcXFxuICAgIGNvbnN0IGhhbmRsZUZpbGVBY3Rpb24gPSAoYWN0aW9uOiBGaWxlQWN0aW9uLCBkYXRhOiBGaWxlQWN0aW9uRGF0YSkgPT4ge1xcXFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZXR1cm4gKFxcXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcXFxuICAgICAgICAgICAgPEZpbGVCcm93c2VyXFxcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcXFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXFxcbiAgICAgICAgICAgICAgICBlbmFibGVEcmFnQW5kRHJvcD17dHJ1ZX1cXFxcbiAgICAgICAgICAgID5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXFxcbiAgICAgICAgICAgICAgICA8RmlsZUxpc3QgLz5cXFxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICk7XFxcXG59O1xcXFxuXFxcIixcXFwibG9jYXRpb25zTWFwXFxcIjp7XFxcIjItZmlsZS1icm93c2VyLWV4YW1wbGVzLXZpcnR1YWxpemF0aW9uLXdpdGgtMTAtMDAwLWZpbGVzLS12aXJ0dWFsaXphdGlvbi1leGFtcGxlXFxcIjp7XFxcInN0YXJ0TG9jXFxcIjp7XFxcImNvbFxcXCI6MzcsXFxcImxpbmVcXFwiOjIwfSxcXFwiZW5kTG9jXFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDZ9LFxcXCJzdGFydEJvZHlcXFwiOntcXFwiY29sXFxcIjozNyxcXFwibGluZVxcXCI6MjB9LFxcXCJlbmRCb2R5XFxcIjp7XFxcImNvbFxcXCI6MSxcXFwibGluZVxcXCI6NDZ9fX19LFxcbiAgICAgICAgZG9jczogY3JlYXRlRG9jc09iamVjdCh7IG1hcmtkb3duIH0pLFxcbiAgICB9LFxcbn07XFxuXFxuZXhwb3J0IGNvbnN0IFZpcnR1YWxpemF0aW9uRXhhbXBsZSA9ICgpID0+IHtcXG4gICAgY29uc3QgZmlsZXMgPSBbXTtcXG5cXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDAwMDsgKytpKSB7XFxuICAgICAgICBmaWxlcy5wdXNoKHtcXG4gICAgICAgICAgICBpZDogYGZpbGUtJHtpfWAsXFxuICAgICAgICAgICAgbmFtZTogaSA/IGBDaHJvbWUgKCR7aX0pLmV4ZWAgOiAnQ2hyb21lLmV4ZScsXFxuICAgICAgICB9KTtcXG4gICAgfVxcblxcbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcXG4gICAgICAgIHNob3dBY3Rpb25Ob3RpZmljYXRpb24oeyBhY3Rpb24sIGRhdGEgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNTAwIH19PlxcbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxcbiAgICAgICAgICAgICAgICBmaWxlcz17ZmlsZXN9XFxuICAgICAgICAgICAgICAgIG9uRmlsZUFjdGlvbj17aGFuZGxlRmlsZUFjdGlvbn1cXG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8RmlsZVRvb2xiYXIgLz5cXG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XFxuICAgICAgICAgICAgPC9GaWxlQnJvd3Nlcj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICApO1xcbn07XFxuXCIsXCJsb2NhdGlvbnNNYXBcIjp7XCIyLWZpbGUtYnJvd3Nlci1leGFtcGxlcy12aXJ0dWFsaXphdGlvbi13aXRoLTEwLTAwMC1maWxlcy0tdmlydHVhbGl6YXRpb24tZXhhbXBsZVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MzcsXCJsaW5lXCI6Mjh9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjo1NH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjozNyxcImxpbmVcIjoyOH0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo1NH19fX0sXCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXG5cXG5pbXBvcnQgJ2Nob25reS9zdHlsZS9tYWluLmNzcyc7XFxuaW1wb3J0IHsgRmlsZUFjdGlvbiwgRmlsZUFjdGlvbkRhdGEsIEZpbGVCcm93c2VyLCBGaWxlTGlzdCwgRmlsZVRvb2xiYXIgfSBmcm9tICdjaG9ua3knO1xcblxcbmltcG9ydCB7IGNyZWF0ZURvY3NPYmplY3QsIHNob3dBY3Rpb25Ob3RpZmljYXRpb24gfSBmcm9tICcuLi9zdG9yeS1oZWxwZXJzJztcXG5cXG4vLyBAdHMtaWdub3JlXFxuXFxuaW1wb3J0IG1hcmtkb3duIGZyb20gJy4vMDItVmlydHVhbGl6YXRpb24ubWQnO1xcblxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgdGl0bGU6ICcyIEZpbGUgQnJvd3NlciBleGFtcGxlc3xWaXJ0dWFsaXphdGlvbiB3aXRoIDEwLDAwMCBmaWxlcycsXFxuICAgIHBhcmFtZXRlcnM6IHtcXG4gICAgICAgIGRvY3M6IGNyZWF0ZURvY3NPYmplY3QoeyBtYXJrZG93biB9KSxcXG4gICAgfSxcXG59O1xcblxcbmV4cG9ydCBjb25zdCBWaXJ0dWFsaXphdGlvbkV4YW1wbGUgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGZpbGVzID0gW107XFxuXFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwMDA7ICsraSkge1xcbiAgICAgICAgZmlsZXMucHVzaCh7XFxuICAgICAgICAgICAgaWQ6IGBmaWxlLSR7aX1gLFxcbiAgICAgICAgICAgIG5hbWU6IGkgPyBgQ2hyb21lICgke2l9KS5leGVgIDogJ0Nocm9tZS5leGUnLFxcbiAgICAgICAgfSk7XFxuICAgIH1cXG5cXG4gICAgY29uc3QgaGFuZGxlRmlsZUFjdGlvbiA9IChhY3Rpb246IEZpbGVBY3Rpb24sIGRhdGE6IEZpbGVBY3Rpb25EYXRhKSA9PiB7XFxuICAgICAgICBzaG93QWN0aW9uTm90aWZpY2F0aW9uKHsgYWN0aW9uLCBkYXRhIH0pO1xcbiAgICB9O1xcblxcbiAgICByZXR1cm4gKFxcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cXG4gICAgICAgICAgICA8RmlsZUJyb3dzZXJcXG4gICAgICAgICAgICAgICAgZmlsZXM9e2ZpbGVzfVxcbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XFxuICAgICAgICAgICAgICAgIGVuYWJsZURyYWdBbmREcm9wPXt0cnVlfVxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XFxuICAgICAgICAgICAgICAgIDxGaWxlTGlzdCAvPlxcbiAgICAgICAgICAgIDwvRmlsZUJyb3dzZXI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKTtcXG59O1xcblwiLFwibG9jYXRpb25zTWFwXCI6e1wiMi1maWxlLWJyb3dzZXItZXhhbXBsZXMtdmlydHVhbGl6YXRpb24td2l0aC0xMC0wMDAtZmlsZXMtLXZpcnR1YWxpemF0aW9uLWV4YW1wbGVcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjM3LFwibGluZVwiOjIwfSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6NDZ9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MzcsXCJsaW5lXCI6MjB9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6NDZ9fX19LFxuICAgICAgICBkb2NzOiBjcmVhdGVEb2NzT2JqZWN0KHsgbWFya2Rvd24gfSksXG4gICAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBWaXJ0dWFsaXphdGlvbkV4YW1wbGUgPSAoKSA9PiB7XG4gICAgY29uc3QgZmlsZXMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwMDA7ICsraSkge1xuICAgICAgICBmaWxlcy5wdXNoKHtcbiAgICAgICAgICAgIGlkOiBgZmlsZS0ke2l9YCxcbiAgICAgICAgICAgIG5hbWU6IGkgPyBgQ2hyb21lICgke2l9KS5leGVgIDogJ0Nocm9tZS5leGUnLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBoYW5kbGVGaWxlQWN0aW9uID0gKGFjdGlvbjogRmlsZUFjdGlvbiwgZGF0YTogRmlsZUFjdGlvbkRhdGEpID0+IHtcbiAgICAgICAgc2hvd0FjdGlvbk5vdGlmaWNhdGlvbih7IGFjdGlvbiwgZGF0YSB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IDUwMCB9fT5cbiAgICAgICAgICAgIDxGaWxlQnJvd3NlclxuICAgICAgICAgICAgICAgIGZpbGVzPXtmaWxlc31cbiAgICAgICAgICAgICAgICBvbkZpbGVBY3Rpb249e2hhbmRsZUZpbGVBY3Rpb259XG4gICAgICAgICAgICAgICAgZW5hYmxlRHJhZ0FuZERyb3A9e3RydWV9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPEZpbGVUb29sYmFyIC8+XG4gICAgICAgICAgICAgICAgPEZpbGVMaXN0IC8+XG4gICAgICAgICAgICA8L0ZpbGVCcm93c2VyPlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IFwiVGhpcyBjb21wb25lbnQgdXNlcyBbYHJlYWN0LXZpcnR1YWxpemVkYF0oaHR0cHM6Ly9idmF1Z2huLmdpdGh1Yi5pby9yZWFjdC12aXJ0dWFsaXplZC8pLlxcblwiOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiV05NQVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIjFJc1pcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJ2YkR3XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwieTJBaFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcIjd4L0NcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKSkoXCJKdFBmXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMikpKFwiYXgwZlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKShcInRWcW5cIik7Il0sInNvdXJjZVJvb3QiOiIifQ==