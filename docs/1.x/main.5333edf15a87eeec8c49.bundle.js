/*! For license information please see main.5333edf15a87eeec8c49.bundle.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{0:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ERkP")},10:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("jQ/y")},107:function(module,exports){},108:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("5o43")},109:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("P2aG")},110:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("sVFb")},12:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("plBw")},123:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("aYSr")},124:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("/Qos")},125:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("j4Sf")},126:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("LUwd")},127:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("OZaJ")},14:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"c",(function(){return FileBrowser_FileBrowser})),__webpack_require__.d(__webpack_exports__,"f",(function(){return FileToolbar})),__webpack_require__.d(__webpack_exports__,"e",(function(){return FileSearch_FileSearch})),__webpack_require__.d(__webpack_exports__,"d",(function(){return FileList})),__webpack_require__.d(__webpack_exports__,"a",(function(){return ChonkyActions})),__webpack_require__.d(__webpack_exports__,"b",(function(){return ChonkyIconName}));__webpack_require__(3),__webpack_require__(10),__webpack_require__(21),__webpack_require__(26),__webpack_require__(27),__webpack_require__(12),__webpack_require__(18),__webpack_require__(24),__webpack_require__(15),__webpack_require__(22),__webpack_require__(4),__webpack_require__(9),__webpack_require__(20),__webpack_require__(16),__webpack_require__(19);var ChonkyIconName,delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),shortid=__webpack_require__(299),shortid_default=__webpack_require__.n(shortid),classnames=(__webpack_require__(5),__webpack_require__(54)),classnames_default=__webpack_require__.n(classnames),es=__webpack_require__(155);__webpack_require__(28),__webpack_require__(76);!function(ChonkyIconName){ChonkyIconName.loading="loading",ChonkyIconName.dropdown="dropdown",ChonkyIconName.dndDragging="dndDragging",ChonkyIconName.dndCanDrop="dndCanDrop",ChonkyIconName.dndCannotDrop="dndCannotDrop",ChonkyIconName.openFiles="openFiles",ChonkyIconName.openParentFolder="openParentFolder",ChonkyIconName.search="search",ChonkyIconName.checkActive="checkActive",ChonkyIconName.checkInactive="checkInactive",ChonkyIconName.desc="desc",ChonkyIconName.asc="asc",ChonkyIconName.list="list",ChonkyIconName.folder="folder",ChonkyIconName.folderCreate="folderCreate",ChonkyIconName.folderOpen="folderOpen",ChonkyIconName.smallThumbnail="smallThumbnail",ChonkyIconName.largeThumbnail="largeThumbnail",ChonkyIconName.folderChainSeparator="folderChainSeparator",ChonkyIconName.download="download",ChonkyIconName.upload="upload",ChonkyIconName.trash="trash",ChonkyIconName.fallbackIcon="fallbackIcon",ChonkyIconName.symlink="symlink",ChonkyIconName.hidden="hidden",ChonkyIconName.file="file",ChonkyIconName.license="license",ChonkyIconName.code="code",ChonkyIconName.config="config",ChonkyIconName.model="model",ChonkyIconName.database="database",ChonkyIconName.text="text",ChonkyIconName.archive="archive",ChonkyIconName.image="image",ChonkyIconName.video="video",ChonkyIconName.info="info",ChonkyIconName.key="key",ChonkyIconName.lock="lock",ChonkyIconName.music="music",ChonkyIconName.terminal="terminal",ChonkyIconName.users="users",ChonkyIconName.linux="linux",ChonkyIconName.ubuntu="ubuntu",ChonkyIconName.windows="windows",ChonkyIconName.rust="rust",ChonkyIconName.python="python",ChonkyIconName.nodejs="nodejs",ChonkyIconName.php="php",ChonkyIconName.git="git",ChonkyIconName.adobe="adobe",ChonkyIconName.pdf="pdf",ChonkyIconName.excel="excel",ChonkyIconName.word="word",ChonkyIconName.flash="flash"}(ChonkyIconName||(ChonkyIconName={}));__webpack_require__(36),__webpack_require__(17),__webpack_require__(40),__webpack_require__(161),__webpack_require__(30);function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}var Logger=function(){function Logger(){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Logger)}return function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}(Logger,null,[{key:"error",value:function error(){for(var _console,_len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];(_console=console).error.apply(_console,["[Chonky runtime error]"].concat(args))}},{key:"formatBullets",value:function formatBullets(bullets){return"\n- ".concat(bullets.join("\n- "))}}]),Logger}();function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(iter))return Array.from(iter)}(arr)||_unsupportedIterableToArray(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}var isPlainObject=function isPlainObject(value){return"[object Object]"===Object.prototype.toString.call(value)},cleanupFileArray=function cleanupFileArray(fileArray,allowNull){var cleanFileArray,warningMessage=null,warningBullets=[];if(Array.isArray(fileArray)){for(var indicesToBeRemoved=new Set,seenIds={},duplicateIdSet=new Set,missingIdIndices=[],missingNameIndices=[],invalidTypeIndices=[],i=0;i<fileArray.length;++i){var file=fileArray[i];isPlainObject(file)?(file.id&&seenIds[file.id]?(duplicateIdSet.add(file.id),indicesToBeRemoved.add(i)):seenIds[file.id]=!0,file.name||(missingNameIndices.push(i),indicesToBeRemoved.add(i)),file.id||(missingIdIndices.push(i),indicesToBeRemoved.add(i))):null!==file&&(invalidTypeIndices.push(i),indicesToBeRemoved.add(i))}duplicateIdSet.size>0&&warningBullets.push("Some files have duplicate IDs. These IDs appeared multiple "+"times: ".concat(Array.from(duplicateIdSet))),missingIdIndices.length>0&&warningBullets.push('Some files are missing the "id" field. '+"Relevant file indices: ".concat(missingIdIndices.join(", "))),missingNameIndices.length>0&&warningBullets.push('Some files are missing the "name" field. '+"Relevant file indices: ".concat(missingNameIndices.join(", "))),invalidTypeIndices.length>0&&warningBullets.push('Some files have invalid type (they are neither a plain object nor "null"). '+"Relevant file indices: ".concat(invalidTypeIndices.join(", "))),indicesToBeRemoved.size>0?(cleanFileArray=fileArray.filter((function(value,index){return!indicesToBeRemoved.has(index)})),warningMessage="".concat(indicesToBeRemoved.size," offending ")+"file".concat(1===indicesToBeRemoved.size?" was":"s were"," ")+" removed from the array."):cleanFileArray=fileArray}else cleanFileArray=allowNull?null:[],allowNull&&null===fileArray||(warningMessage="Provided value was replaced "+"with ".concat(allowNull?"null":"empty array","."),warningBullets.push('Expected "files" to be an array, got type '+'"'.concat(_typeof(fileArray),'" instead (value: ').concat(fileArray,").")));return{cleanFileArray:cleanFileArray,warningMessage:warningMessage,warningBullets:warningBullets}},validation_useFileActionsValidation=function useFileActionsValidation(fileActions,defaultFileActions,includeDefaultFileActions){var extendedFileActions=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){if(!includeDefaultFileActions)return fileActions;var seenFileActionIds={};fileActions.map((function(action){action&&action.id&&(seenFileActionIds[action.id]=!0)}));var _step,extendedFileActions=_toConsumableArray(fileActions),_iterator=function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}(defaultFileActions);try{for(_iterator.s();!(_step=_iterator.n()).done;){var action=_step.value;seenFileActionIds[action.id]||extendedFileActions.push(action)}}catch(err){_iterator.e(err)}finally{_iterator.f()}return extendedFileActions}),[fileActions,defaultFileActions,includeDefaultFileActions]),_useMemo3=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var errorMessages=[],cleanFilesResult=cleanupFileActions(extendedFileActions);if(cleanFilesResult.warningMessage){var errorMessage='The "fileActions" prop passed to '.concat(FileBrowser_FileBrowser.name," did not pass ")+"validation. ".concat(cleanFilesResult.warningMessage," ")+"The following errors were encountered:";Logger.error(errorMessage,Logger.formatBullets(cleanFilesResult.warningBullets)),errorMessages.push({message:errorMessage,bullets:cleanFilesResult.warningBullets})}return{cleanFileActions:cleanFilesResult.cleanFileActions,errorMessages:errorMessages}}),[extendedFileActions]);return{cleanFileActions:_useMemo3.cleanFileActions,errorMessages:_useMemo3.errorMessages}},cleanupFileActions=function cleanupFileActions(fileActions){var cleanFileActions,warningMessage=null,warningBullets=[];if(Array.isArray(fileActions)){for(var indicesToBeRemoved=new Set,seenIds={},duplicateIdSet=new Set,missingIdIndices=[],invalidTypeIndices=[],i=0;i<fileActions.length;++i){var fileAction=fileActions[i];isPlainObject(fileAction)?(fileAction.id&&seenIds[fileAction.id]?(duplicateIdSet.add(fileAction.id),indicesToBeRemoved.add(i)):seenIds[fileAction.id]=!0,fileAction.id||(missingIdIndices.push(i),indicesToBeRemoved.add(i))):(invalidTypeIndices.push(i),indicesToBeRemoved.add(i))}duplicateIdSet.size>0&&warningBullets.push("Some file actions have duplicate IDs. These IDs appeared multiple "+"times: ".concat(Array.from(duplicateIdSet))),missingIdIndices.length>0&&warningBullets.push('Some file actions are missing the "id" field. '+"Relevant file indices: ".concat(missingIdIndices.join(", "))),invalidTypeIndices.length>0&&warningBullets.push("Some files actions have invalid type (they are not plain object). "+"Relevant file indices: ".concat(invalidTypeIndices.join(", "))),indicesToBeRemoved.size>0?(cleanFileActions=fileActions.filter((function(value,index){return!indicesToBeRemoved.has(index)})),warningMessage="".concat(indicesToBeRemoved.size," offending ")+"file action".concat(1===indicesToBeRemoved.size?" was":"s were"," ")+" removed from the array."):cleanFileActions=fileActions}else cleanFileActions=[],warningMessage="Provided value was replaced with an empty array.",warningBullets.push('Expected "fileActions" to be an array, got type '+'"'.concat(_typeof(fileActions),'" instead (value: ').concat(fileActions,")."));return{cleanFileActions:cleanFileActions,warningMessage:warningMessage,warningBullets:warningBullets}};function file_helper_defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}var FileHelper=function(){function FileHelper(){!function file_helper_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,FileHelper)}return function file_helper_createClass(Constructor,protoProps,staticProps){return protoProps&&file_helper_defineProperties(Constructor.prototype,protoProps),staticProps&&file_helper_defineProperties(Constructor,staticProps),Constructor}(FileHelper,null,[{key:"isClickable",value:function isClickable(file){return!!file}},{key:"isOpenable",value:function isOpenable(file){return!!file&&!1!==file.openable}},{key:"isSelectable",value:function isSelectable(file){return!!file&&!1!==file.selectable}},{key:"isDraggable",value:function isDraggable(file){return!!file&&!1!==file.draggable}},{key:"isDroppable",value:function isDroppable(file){return!!file&&(!(!file.isDir||!1===file.droppable)||!0===file.droppable)}}]),FileHelper}(),exact_trie=__webpack_require__(304),exact_trie_default=__webpack_require__.n(exact_trie),memoizee=__webpack_require__(305);function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function file_icon_helper_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return file_icon_helper_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return file_icon_helper_arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function file_icon_helper_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var _IconMap,getIconTrie=__webpack_require__.n(memoizee)()((function(){for(var colourIndex=0,IconsToExtensions=[[ChonkyIconName.license,["license"]],[ChonkyIconName.config,["sfk","ini","yaml","toml","iml"]],[ChonkyIconName.model,["3ds","obj","ply","fbx"]],[ChonkyIconName.database,["csv","json","sql","sqlite","sqlite3","npy","npz","rec","idx","hdf5"]],[ChonkyIconName.text,["txt","md"]],[ChonkyIconName.archive,["zip","rar","tar","tar.gz"]],[ChonkyIconName.image,ImageExtensions],[ChonkyIconName.video,VideoExtensions],[ChonkyIconName.code,["html","php","css","sass","scss","less","cpp","h","hpp","c","xml"]],[ChonkyIconName.info,["bib","readme","nfo"]],[ChonkyIconName.key,["pem","pub"]],[ChonkyIconName.lock,["lock","lock.json","shrinkwrap.json"]],[ChonkyIconName.music,AudioExtensions],[ChonkyIconName.terminal,["run","sh"]],[ChonkyIconName.trash,[".Trashes"]],[ChonkyIconName.users,["authors","contributors"]],[ChonkyIconName.linux,["AppImage"]],[ChonkyIconName.ubuntu,["deb"]],[ChonkyIconName.windows,["exe"]],[ChonkyIconName.rust,["rs","rlib"]],[ChonkyIconName.python,["py","ipynb"]],[ChonkyIconName.nodejs,["js","jsx","ts","tsx","d.ts"]],[ChonkyIconName.php,["php"]],[ChonkyIconName.git,[".gitignore"]],[ChonkyIconName.adobe,["psd"]],[ChonkyIconName.pdf,["pdf"]],[ChonkyIconName.excel,["xls","xlsx"]],[ChonkyIconName.word,["doc","docx","odt"]],[ChonkyIconName.flash,["swf"]]],exactTrie=new exact_trie_default.a({ignoreCase:!0}),_i=0,_IconsToExtensions=IconsToExtensions;_i<_IconsToExtensions.length;_i++)for(var _pair=_slicedToArray(_IconsToExtensions[_i],2),icon=_pair[0],extensions=_pair[1],i=0;i<extensions.length;++i){var iconData={icon:icon,colorCode:(colourIndex+=5)%(ColorsLight.length-1)+1};exactTrie.put(extensions[i],iconData,!0)}return exactTrie})),VideoExtensions=["3g2","3gp","3gpp","asf","asx","avi","dvb","f4v","fli","flv","fvt","h261","h263","h264","jpgm","jpgv","jpm","m1v","m2v","m4u","m4v","mj2","mjp2","mk3d","mks","mkv","mng","mov","movie","mp4","mp4v","mpe","mpeg","mpg","mpg4","mxu","ogv","pyv","qt","smv","ts","uvh","uvm","uvp","uvs","uvu","uvv","uvvh","uvvm","uvvp","uvvs","uvvu","uvvv","viv","vob","webm","wm","wmv","wmx","wvx"],ImageExtensions=["3ds","apng","azv","bmp","bmp","btif","cgm","cmx","djv","djvu","drle","dwg","dxf","emf","exr","fbs","fh","fh4","fh5","fh7","fhc","fits","fpx","fst","g3","gif","heic","heics","heif","heifs","ico","ico","ief","jls","jng","jp2","jpe","jpeg","jpf","jpg","jpg2","jpm","jpx","jxr","ktx","mdi","mmr","npx","pbm","pct","pcx","pcx","pgm","pic","png","pnm","ppm","psd","pti","ras","rgb","rlc","sgi","sid","sub","svg","svgz","t38","tap","tfx","tga","tif","tiff","uvg","uvi","uvvg","uvvi","vtf","wbmp","wdp","webp","wmf","xbm","xif","xpm","xwd"],AudioExtensions=["3gpp","aac","adp","aif","aifc","aiff","au","caf","dra","dts","dtshd","ecelp4800","ecelp7470","ecelp9600","eol","flac","kar","lvp","m2a","m3a","m3u","m4a","m4a","mid","midi","mka","mp2","mp2a","mp3","mp3","mp4a","mpga","oga","ogg","pya","ra","ra","ram","rip","rmi","rmp","s3m","sil","snd","spx","uva","uvva","wav","wav","wav","wax","weba","wma","xm"],ColorsLight=["#bbbbbb","#d65c5c","#d6665c","#d6705c","#d67a5c","#d6855c","#d68f5c","#d6995c","#d6a35c","#d6ad5c","#d6b85c","#d6c25c","#d6cc5c","#d6d65c","#ccd65c","#c2d65c","#b8d65c","#add65c","#a3d65c","#99d65c","#8fd65c","#85d65c","#7ad65c","#70d65c","#66d65c","#5cd65c","#5cd666","#5cd670","#5cd67a","#5cd685","#5cd68f","#5cd699","#5cd6a3","#5cd6ad","#5cd6b8","#5cd6c2","#5cd6cc","#5cd6d6","#5cccd6","#5cc2d6","#5cb8d6","#5cadd6","#5ca3d6","#5c99d6","#5c8fd6","#5c85d6","#5c7ad6","#5c70d6","#5c66d6","#5c5cd6","#665cd6","#705cd6","#7a5cd6","#855cd6","#8f5cd6","#995cd6","#a35cd6","#ad5cd6","#b85cd6","#c25cd6","#cc5cd6","#d65cd6","#d65ccc","#d65cc2","#d65cb8","#d65cad","#d65ca3","#d65c99","#d65c8f","#d65c85","#d65c7a","#d65c70","#d65c66"],ColorsDark=["#777","#8f3d3d","#8f443d","#8f4b3d","#8f523d","#8f583d","#8f5f3d","#8f663d","#8f6d3d","#8f743d","#8f7a3d","#8f813d","#8f883d","#8f8f3d","#888f3d","#818f3d","#7a8f3d","#748f3d","#6d8f3d","#668f3d","#5f8f3d","#588f3d","#528f3d","#4b8f3d","#448f3d","#3d8f3d","#3d8f44","#3d8f4b","#3d8f52","#3d8f58","#3d8f5f","#3d8f66","#3d8f6d","#3d8f74","#3d8f7a","#3d8f81","#3d8f88","#3d8f8f","#3d888f","#3d818f","#3d7a8f","#3d748f","#3d6d8f","#3d668f","#3d5f8f","#3d588f","#3d528f","#3d4b8f","#3d448f","#3d3d8f","#443d8f","#4b3d8f","#523d8f","#583d8f","#5f3d8f","#663d8f","#6d3d8f","#743d8f","#7a3d8f","#813d8f","#883d8f","#8f3d8f","#8f3d88","#8f3d81","#8f3d7a","#8f3d74","#8f3d6d","#8f3d66","#8f3d5f","#8f3d58","#8f3d52","#8f3d4b","#8f3d44"],faAdobe=__webpack_require__(354),faGitAlt=__webpack_require__(353),faLinux=__webpack_require__(346),faNodeJs=__webpack_require__(351),faPhp=__webpack_require__(352),faPython=__webpack_require__(350),faRust=__webpack_require__(349),faUbuntu=__webpack_require__(347),faWindows=__webpack_require__(348),faArrowDown=__webpack_require__(207),faArrowUp=__webpack_require__(316),faBalanceScale=__webpack_require__(331),faBoxOpen=__webpack_require__(311),faCheckCircle=__webpack_require__(314),faChevronDown=__webpack_require__(308),faChevronRight=__webpack_require__(323),faCircle=__webpack_require__(315),faCircleNotch=__webpack_require__(307),faCogs=__webpack_require__(333),faCubes=__webpack_require__(334),faDatabase=__webpack_require__(335),faDownload=__webpack_require__(324),faExclamationTriangle=__webpack_require__(327),faExternalLinkAlt=__webpack_require__(328),faEyeSlash=__webpack_require__(329),faFile=__webpack_require__(330),faFileAlt=__webpack_require__(336),faFileArchive=__webpack_require__(337),faFileCode=__webpack_require__(332),faFileExcel=__webpack_require__(356),faFileImage=__webpack_require__(338),faFilePdf=__webpack_require__(355),faFileWord=__webpack_require__(357),faFilm=__webpack_require__(339),faFistRaised=__webpack_require__(309),faFolder=__webpack_require__(318),faFolderOpen=__webpack_require__(320),faFolderPlus=__webpack_require__(319),faInfoCircle=__webpack_require__(340),faKey=__webpack_require__(341),faLevelUpAlt=__webpack_require__(312),faList=__webpack_require__(317),faLock=__webpack_require__(342),faMusic=__webpack_require__(343),faRunning=__webpack_require__(358),faSearch=__webpack_require__(313),faTerminal=__webpack_require__(344),faTh=__webpack_require__(321),faThLarge=__webpack_require__(322),faTimes=__webpack_require__(310),faTrash=__webpack_require__(326),faUpload=__webpack_require__(325),faUsers=__webpack_require__(345),index_es=__webpack_require__(306);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var IconMap=(_defineProperty(_IconMap={},ChonkyIconName.loading,faCircleNotch.faCircleNotch),_defineProperty(_IconMap,ChonkyIconName.dropdown,faChevronDown.faChevronDown),_defineProperty(_IconMap,ChonkyIconName.dndDragging,faFistRaised.faFistRaised),_defineProperty(_IconMap,ChonkyIconName.dndCanDrop,faArrowDown.faArrowDown),_defineProperty(_IconMap,ChonkyIconName.dndCannotDrop,faTimes.faTimes),_defineProperty(_IconMap,ChonkyIconName.openFiles,faBoxOpen.faBoxOpen),_defineProperty(_IconMap,ChonkyIconName.openParentFolder,faLevelUpAlt.faLevelUpAlt),_defineProperty(_IconMap,ChonkyIconName.search,faSearch.faSearch),_defineProperty(_IconMap,ChonkyIconName.checkActive,faCheckCircle.faCheckCircle),_defineProperty(_IconMap,ChonkyIconName.checkInactive,faCircle.faCircle),_defineProperty(_IconMap,ChonkyIconName.desc,faArrowDown.faArrowDown),_defineProperty(_IconMap,ChonkyIconName.asc,faArrowUp.faArrowUp),_defineProperty(_IconMap,ChonkyIconName.list,faList.faList),_defineProperty(_IconMap,ChonkyIconName.folder,faFolder.faFolder),_defineProperty(_IconMap,ChonkyIconName.folderCreate,faFolderPlus.faFolderPlus),_defineProperty(_IconMap,ChonkyIconName.folderOpen,faFolderOpen.faFolderOpen),_defineProperty(_IconMap,ChonkyIconName.smallThumbnail,faTh.faTh),_defineProperty(_IconMap,ChonkyIconName.largeThumbnail,faThLarge.faThLarge),_defineProperty(_IconMap,ChonkyIconName.folderChainSeparator,faChevronRight.faChevronRight),_defineProperty(_IconMap,ChonkyIconName.download,faDownload.faDownload),_defineProperty(_IconMap,ChonkyIconName.upload,faUpload.faUpload),_defineProperty(_IconMap,ChonkyIconName.trash,faTrash.faTrash),_defineProperty(_IconMap,ChonkyIconName.fallbackIcon,faExclamationTriangle.faExclamationTriangle),_defineProperty(_IconMap,ChonkyIconName.symlink,faExternalLinkAlt.faExternalLinkAlt),_defineProperty(_IconMap,ChonkyIconName.hidden,faEyeSlash.faEyeSlash),_defineProperty(_IconMap,ChonkyIconName.file,faFile.faFile),_defineProperty(_IconMap,ChonkyIconName.license,faBalanceScale.faBalanceScale),_defineProperty(_IconMap,ChonkyIconName.code,faFileCode.faFileCode),_defineProperty(_IconMap,ChonkyIconName.config,faCogs.faCogs),_defineProperty(_IconMap,ChonkyIconName.model,faCubes.faCubes),_defineProperty(_IconMap,ChonkyIconName.database,faDatabase.faDatabase),_defineProperty(_IconMap,ChonkyIconName.text,faFileAlt.faFileAlt),_defineProperty(_IconMap,ChonkyIconName.archive,faFileArchive.faFileArchive),_defineProperty(_IconMap,ChonkyIconName.image,faFileImage.faFileImage),_defineProperty(_IconMap,ChonkyIconName.video,faFilm.faFilm),_defineProperty(_IconMap,ChonkyIconName.info,faInfoCircle.faInfoCircle),_defineProperty(_IconMap,ChonkyIconName.key,faKey.faKey),_defineProperty(_IconMap,ChonkyIconName.lock,faLock.faLock),_defineProperty(_IconMap,ChonkyIconName.music,faMusic.faMusic),_defineProperty(_IconMap,ChonkyIconName.terminal,faTerminal.faTerminal),_defineProperty(_IconMap,ChonkyIconName.users,faUsers.faUsers),_defineProperty(_IconMap,ChonkyIconName.linux,faLinux.faLinux),_defineProperty(_IconMap,ChonkyIconName.ubuntu,faUbuntu.faUbuntu),_defineProperty(_IconMap,ChonkyIconName.windows,faWindows.faWindows),_defineProperty(_IconMap,ChonkyIconName.rust,faRust.faRust),_defineProperty(_IconMap,ChonkyIconName.python,faPython.faPython),_defineProperty(_IconMap,ChonkyIconName.nodejs,faNodeJs.faNodeJs),_defineProperty(_IconMap,ChonkyIconName.php,faPhp.faPhp),_defineProperty(_IconMap,ChonkyIconName.git,faGitAlt.faGitAlt),_defineProperty(_IconMap,ChonkyIconName.adobe,faAdobe.faAdobe),_defineProperty(_IconMap,ChonkyIconName.pdf,faFilePdf.faFilePdf),_defineProperty(_IconMap,ChonkyIconName.excel,faFileExcel.faFileExcel),_defineProperty(_IconMap,ChonkyIconName.word,faFileWord.faFileWord),_defineProperty(_IconMap,ChonkyIconName.flash,faRunning.faRunning),_IconMap),ChonkyIconFA=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var icon=props.icon,faProps=Object.assign({},props,{icon:IconMap[icon]?IconMap[icon]:IconMap.fallbackIcon});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(index_es.a,faProps)}));try{ChonkyIconFA.displayName="ChonkyIconFA",ChonkyIconFA.__docgenInfo={description:"",displayName:"ChonkyIconFA",props:{icon:{defaultValue:null,description:"",name:"icon",required:!0,type:{name:"string"}},spin:{defaultValue:null,description:"",name:"spin",required:!1,type:{name:"boolean | undefined"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string | undefined"}},color:{defaultValue:null,description:"",name:"color",required:!1,type:{name:"string | undefined"}},fixedWidth:{defaultValue:null,description:"",name:"fixedWidth",required:!1,type:{name:"boolean | undefined"}},size:{defaultValue:null,description:"",name:"size",required:!1,type:{name:'"xs" | "lg" | "sm" | undefined'}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/ChonkyIcon.tsx#ChonkyIconFA"]={docgenInfo:ChonkyIconFA.__docgenInfo,name:"ChonkyIconFA",path:"src/components/external/ChonkyIcon.tsx#ChonkyIconFA"})}catch(__react_docgen_typescript_loader_error){}__webpack_require__(759);var TextPlaceholder=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var placeholderLength=function getRandomInt(min,max){return min+Math.floor(Math.random()*Math.floor(max-min))}(props.minLength,props.maxLength),whitespace="&nbsp;".repeat(placeholderLength);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-text-placeholder",dangerouslySetInnerHTML:{__html:whitespace}})}));try{TextPlaceholder.displayName="TextPlaceholder",TextPlaceholder.__docgenInfo={description:"",displayName:"TextPlaceholder",props:{minLength:{defaultValue:null,description:"",name:"minLength",required:!0,type:{name:"number"}},maxLength:{defaultValue:null,description:"",name:"maxLength",required:!0,type:{name:"number"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/TextPlaceholder.tsx#TextPlaceholder"]={docgenInfo:TextPlaceholder.__docgenInfo,name:"TextPlaceholder",path:"src/components/external/TextPlaceholder.tsx#TextPlaceholder"})}catch(__react_docgen_typescript_loader_error){}__webpack_require__(95);var FileThumbnail_FileThumbnail=function FileThumbnail(props){var thumbnailUrl=props.thumbnailUrl,thumbnailStyle=thumbnailUrl?{backgroundImage:"url('".concat(thumbnailUrl,"')")}:{},className=classnames_default()({"chonky-file-thumbnail":!0,"chonky-file-thumbnail-hidden":!thumbnailUrl});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:className,style:thumbnailStyle})};FileThumbnail_FileThumbnail.displayName="FileThumbnail";try{FileThumbnail_FileThumbnail.displayName="FileThumbnail",FileThumbnail_FileThumbnail.__docgenInfo={description:"",displayName:"FileThumbnail",props:{thumbnailUrl:{defaultValue:null,description:"",name:"thumbnailUrl",required:!0,type:{name:"Nullable<string>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/FileThumbnail.tsx#FileThumbnail"]={docgenInfo:FileThumbnail_FileThumbnail.__docgenInfo,name:"FileThumbnail",path:"src/components/internal/FileThumbnail.tsx#FileThumbnail"})}catch(__react_docgen_typescript_loader_error){}function BaseFileEntry_slicedToArray(arr,i){return function BaseFileEntry_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function BaseFileEntry_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function BaseFileEntry_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return BaseFileEntry_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return BaseFileEntry_arrayLikeToArray(o,minLen)}(arr,i)||function BaseFileEntry_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function BaseFileEntry_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var SpecialAction,BaseFileEntry=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var file=props.file,selected=props.selected,style=props.style,dndIsDragging=props.dndIsDragging,dndIsOver=props.dndIsOver,dndCanDrop=props.dndCanDrop,_useState2=BaseFileEntry_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(null),2),thumbnailUrl=_useState2[0],setThumbnailUrl=_useState2[1],_useState4=BaseFileEntry_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(!1),2),thumbnailLoading=_useState4[0];!function useThumbnailUrl(file,setThumbnailUrl,setThumbnailLoading){var thumbnailGenerator=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyThumbnailGeneratorContext);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){var loadingCancelled=!1;return file&&(thumbnailGenerator?(setThumbnailLoading(!0),Promise.resolve().then((function(){return thumbnailGenerator(file)})).then((function(thumbnailUrl){loadingCancelled||(setThumbnailLoading(!1),thumbnailUrl&&"string"==typeof thumbnailUrl&&setThumbnailUrl(thumbnailUrl))})).catch((function(error){loadingCancelled||setThumbnailLoading(!1),Logger.error('User-defined "thumbnailGenerator" handler threw an error: '.concat(error.message))}))):file.thumbnailUrl&&setThumbnailUrl(file.thumbnailUrl)),function(){loadingCancelled=!0}}),[file,setThumbnailUrl,setThumbnailLoading,thumbnailGenerator])}(file,setThumbnailUrl,_useState4[1]);var iconData=function useIconData(file){return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){if(!file)return{icon:ChonkyIconName.loading,colorCode:0};if(!0===file.isDir)return{icon:ChonkyIconName.folder,colorCode:0};var match=getIconTrie().getWithCheckpoints(file.name,".",!0);return match||{icon:ChonkyIconName.file,colorCode:32}}),[file])}(file),backgroundColor=thumbnailUrl?ColorsDark[iconData.colorCode]:ColorsLight[iconData.colorCode],iconSpin=thumbnailLoading||!file,icon=thumbnailLoading?ChonkyIconName.loading:iconData.icon,dndIcon=function useDndIcon(selected,isDragging,isOver,canDrop){return isOver?canDrop&&!selected?ChonkyIconName.dndCanDrop:ChonkyIconName.dndCannotDrop:isDragging?ChonkyIconName.dndDragging:null}(selected,dndIsDragging,dndIsOver,dndCanDrop),className=classnames_default()({"chonky-file-entry":!0,"chonky-file-entry-selected":selected,"chonky-file-entry-dragging":dndIsDragging,"chonky-file-entry-drop-hovered":dndIsOver&&dndCanDrop});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:className,style:style},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-entry-inside"},dndIcon&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-entry-dnd-indicator"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:dndIcon})),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-entry-preview"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-icon"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-icon-inside"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:icon,spin:iconSpin}))),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-selection"}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(FileThumbnail_FileThumbnail,{thumbnailUrl:thumbnailUrl}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-background",style:{backgroundColor:backgroundColor}})),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-entry-description"},file?file.name:delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(TextPlaceholder,{minLength:15,maxLength:20}))))}));try{BaseFileEntry.displayName="BaseFileEntry",BaseFileEntry.__docgenInfo={description:"",displayName:"BaseFileEntry",props:{file:{defaultValue:null,description:"",name:"file",required:!0,type:{name:"Nullable<FileData>"}},displayIndex:{defaultValue:null,description:"",name:"displayIndex",required:!0,type:{name:"number"}},selected:{defaultValue:null,description:"",name:"selected",required:!0,type:{name:"boolean"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties | undefined"}},dndIsDragging:{defaultValue:null,description:"",name:"dndIsDragging",required:!1,type:{name:"boolean | undefined"}},dndIsOver:{defaultValue:null,description:"",name:"dndIsOver",required:!1,type:{name:"boolean | undefined"}},dndCanDrop:{defaultValue:null,description:"",name:"dndCanDrop",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/BaseFileEntry.tsx#BaseFileEntry"]={docgenInfo:BaseFileEntry.__docgenInfo,name:"BaseFileEntry",path:"src/components/internal/BaseFileEntry.tsx#BaseFileEntry"})}catch(__react_docgen_typescript_loader_error){}!function(SpecialAction){SpecialAction.MouseClickFile="mouse_click_file",SpecialAction.KeyboardClickFile="keyboard_click_file",SpecialAction.ToggleSearchBar="toggle_search_bar",SpecialAction.DragNDropStart="drag_n_drop_start",SpecialAction.DragNDropEnd="drag_n_drop_end"}(SpecialAction||(SpecialAction={}));var ClickableFileEntry_hooks_useFileClickHandlers=function useFileClickHandlers(file){var dispatchSpecialAction=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyDispatchSpecialActionContext),onMouseClick=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event,clickType){file&&dispatchSpecialAction({actionId:SpecialAction.MouseClickFile,clickType:clickType,file:file,altKey:event.altKey,ctrlKey:event.ctrlKey,shiftKey:event.shiftKey})}),[file,dispatchSpecialAction]),onKeyboardClick=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){file&&dispatchSpecialAction({actionId:SpecialAction.KeyboardClickFile,file:file,enterKey:event.enterKey,spaceKey:event.spaceKey,altKey:event.altKey,ctrlKey:event.ctrlKey,shiftKey:event.shiftKey})}),[file,dispatchSpecialAction]);return{onSingleClick:Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){return onMouseClick(event,"single")}),[onMouseClick]),onDoubleClick:Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){return onMouseClick(event,"double")}),[onMouseClick]),onKeyboardClick:onKeyboardClick}};try{ClickableFileEntry_hooks_useFileClickHandlers.displayName="useFileClickHandlers",ClickableFileEntry_hooks_useFileClickHandlers.__docgenInfo={description:"",displayName:"useFileClickHandlers",props:{id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},name:{defaultValue:null,description:"",name:"name",required:!0,type:{name:"string"}},ext:{defaultValue:null,description:"",name:"ext",required:!1,type:{name:"string | undefined"}},isDir:{defaultValue:null,description:"",name:"isDir",required:!1,type:{name:"boolean | undefined"}},isHidden:{defaultValue:null,description:"",name:"isHidden",required:!1,type:{name:"boolean | undefined"}},isSymlink:{defaultValue:null,description:"",name:"isSymlink",required:!1,type:{name:"boolean | undefined"}},openable:{defaultValue:null,description:"",name:"openable",required:!1,type:{name:"boolean | undefined"}},selectable:{defaultValue:null,description:"",name:"selectable",required:!1,type:{name:"boolean | undefined"}},draggable:{defaultValue:null,description:"",name:"draggable",required:!1,type:{name:"boolean | undefined"}},droppable:{defaultValue:null,description:"",name:"droppable",required:!1,type:{name:"boolean | undefined"}},size:{defaultValue:null,description:"",name:"size",required:!1,type:{name:"number | undefined"}},modDate:{defaultValue:null,description:"",name:"modDate",required:!1,type:{name:"Date | undefined"}},parentId:{defaultValue:null,description:"",name:"parentId",required:!1,type:{name:"string | undefined"}},childrenIds:{defaultValue:null,description:"",name:"childrenIds",required:!1,type:{name:"string[] | undefined"}},thumbnailUrl:{defaultValue:null,description:"",name:"thumbnailUrl",required:!1,type:{name:"string | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/ClickableFileEntry-hooks.tsx#useFileClickHandlers"]={docgenInfo:ClickableFileEntry_hooks_useFileClickHandlers.__docgenInfo,name:"useFileClickHandlers",path:"src/components/internal/ClickableFileEntry-hooks.tsx#useFileClickHandlers"})}catch(__react_docgen_typescript_loader_error){}__webpack_require__(110);var ClickableWrapper_hooks_useKeyDownHandler=function useKeyDownHandler(onKeyboardClick){return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){if(onKeyboardClick){var keyboardClickEvent={enterKey:"Enter"===event.nativeEvent.code,spaceKey:"Space"===event.nativeEvent.code,altKey:event.altKey,ctrlKey:event.ctrlKey,shiftKey:event.shiftKey};(keyboardClickEvent.spaceKey||keyboardClickEvent.enterKey)&&(event.preventDefault(),onKeyboardClick(keyboardClickEvent))}}),[onKeyboardClick])};try{ClickableWrapper_hooks_useKeyDownHandler.displayName="useKeyDownHandler",ClickableWrapper_hooks_useKeyDownHandler.__docgenInfo={description:"",displayName:"useKeyDownHandler",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/ClickableWrapper-hooks.tsx#useKeyDownHandler"]={docgenInfo:ClickableWrapper_hooks_useKeyDownHandler.__docgenInfo,name:"useKeyDownHandler",path:"src/components/internal/ClickableWrapper-hooks.tsx#useKeyDownHandler"})}catch(__react_docgen_typescript_loader_error){}var ClickableWrapper_ClickableWrapper=function ClickableWrapper(props){var children=props.children,WrapperTag=props.wrapperTag,passthroughProps=props.passthroughProps,onSingleClick=props.onSingleClick,onDoubleClick=props.onDoubleClick,onKeyboardClick=props.onKeyboardClick,handleClick=function useClickHandler(onSingleClick,onDoubleClick){var doubleClickDelay=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyDoubleClickDelayContext),counter=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useRef)({clickCount:0,clickTimeout:null});return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){var mouseClickEvent={altKey:event.altKey,ctrlKey:event.ctrlKey,shiftKey:event.shiftKey};counter.current.clickCount++,1===counter.current.clickCount?(onSingleClick&&(event.preventDefault(),onSingleClick(mouseClickEvent)),counter.current.clickCount=1,counter.current.clickTimeout=setTimeout((function(){return counter.current.clickCount=0}),doubleClickDelay)):2===counter.current.clickCount&&(onDoubleClick&&(event.preventDefault(),onDoubleClick(mouseClickEvent)),"number"==typeof counter.current.clickTimeout&&(clearTimeout(counter.current.clickTimeout),counter.current.clickTimeout=null,counter.current.clickCount=0))}),[doubleClickDelay,onSingleClick,onDoubleClick,counter])}(onSingleClick,onDoubleClick),handleKeyDown=ClickableWrapper_hooks_useKeyDownHandler(onKeyboardClick),compProps={};(onSingleClick||onDoubleClick||onKeyboardClick)&&(compProps.onClick=handleClick,compProps.onKeyDown=handleKeyDown,compProps.tabIndex=0);var mergedProps=Object.assign({},compProps,passthroughProps);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(WrapperTag,mergedProps,children)};ClickableWrapper_ClickableWrapper.displayName="ClickableWrapper";try{ClickableWrapper_ClickableWrapper.displayName="ClickableWrapper",ClickableWrapper_ClickableWrapper.__docgenInfo={description:"",displayName:"ClickableWrapper",props:{wrapperTag:{defaultValue:null,description:"",name:"wrapperTag",required:!0,type:{name:"any"}},passthroughProps:{defaultValue:null,description:"",name:"passthroughProps",required:!1,type:{name:"any"}},onSingleClick:{defaultValue:null,description:"",name:"onSingleClick",required:!1,type:{name:"MouseClickEventHandler | undefined"}},onDoubleClick:{defaultValue:null,description:"",name:"onDoubleClick",required:!1,type:{name:"MouseClickEventHandler | undefined"}},onKeyboardClick:{defaultValue:null,description:"",name:"onKeyboardClick",required:!1,type:{name:"KeyboardClickEventHandler | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/ClickableWrapper.tsx#ClickableWrapper"]={docgenInfo:ClickableWrapper_ClickableWrapper.__docgenInfo,name:"ClickableWrapper",path:"src/components/internal/ClickableWrapper.tsx#ClickableWrapper"})}catch(__react_docgen_typescript_loader_error){}var ClickableFileEntry_ClickableFileEntry=function ClickableFileEntry(props){var file=props.file,fileClickHandlers=ClickableFileEntry_hooks_useFileClickHandlers(file),wrapperProps=Object.assign({wrapperTag:"div",passthroughProps:{className:"chonky-file-entry-clickable-wrapper chonky-fill-parent"}},FileHelper.isClickable(file)?fileClickHandlers:void 0);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ClickableWrapper_ClickableWrapper,wrapperProps,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(BaseFileEntry,props))};ClickableFileEntry_ClickableFileEntry.displayName="ClickableFileEntry";try{ClickableFileEntry_ClickableFileEntry.displayName="ClickableFileEntry",ClickableFileEntry_ClickableFileEntry.__docgenInfo={description:"",displayName:"ClickableFileEntry",props:{file:{defaultValue:null,description:"",name:"file",required:!0,type:{name:"Nullable<FileData>"}},displayIndex:{defaultValue:null,description:"",name:"displayIndex",required:!0,type:{name:"number"}},selected:{defaultValue:null,description:"",name:"selected",required:!0,type:{name:"boolean"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties | undefined"}},dndIsDragging:{defaultValue:null,description:"",name:"dndIsDragging",required:!1,type:{name:"boolean | undefined"}},dndIsOver:{defaultValue:null,description:"",name:"dndIsOver",required:!1,type:{name:"boolean | undefined"}},dndCanDrop:{defaultValue:null,description:"",name:"dndCanDrop",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/ClickableFileEntry.tsx#ClickableFileEntry"]={docgenInfo:ClickableFileEntry_ClickableFileEntry.__docgenInfo,name:"ClickableFileEntry",path:"src/components/internal/ClickableFileEntry.tsx#ClickableFileEntry"})}catch(__react_docgen_typescript_loader_error){}var useDrag=__webpack_require__(788),useDrop=__webpack_require__(789),getEmptyImage=__webpack_require__(296);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function DnDFileEntry_slicedToArray(arr,i){return function DnDFileEntry_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function DnDFileEntry_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function DnDFileEntry_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return DnDFileEntry_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return DnDFileEntry_arrayLikeToArray(o,minLen)}(arr,i)||function DnDFileEntry_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function DnDFileEntry_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var DnDFileEntry_DnDFileEntry=function DnDFileEntry(props){var file=props.file,dispatchSpecialAction=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyDispatchSpecialActionContext),canDrag=FileHelper.isDraggable(file),onDragStart=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(){FileHelper.isDraggable(file)&&dispatchSpecialAction({actionId:SpecialAction.DragNDropStart,dragSource:file})}),[dispatchSpecialAction,file]),onDragEnd=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(item,monitor){var dropResult=monitor.getDropResult();FileHelper.isDraggable(file)&&dropResult&&dropResult.dropTarget&&dispatchSpecialAction({actionId:SpecialAction.DragNDropEnd,dragSource:file,dropTarget:dropResult.dropTarget,dropEffect:dropResult.dropEffect})}),[dispatchSpecialAction,file]),onDrop=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(item,monitor){if(monitor.canDrop())return{dropTarget:file}}),[file]),canDrop=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(item){var isSameFile=file&&item.file&&file.id===item.file.id;return FileHelper.isDroppable(file)&&!isSameFile}),[file]),_useDrag2=DnDFileEntry_slicedToArray(Object(useDrag.a)({item:{type:"chonky-file-entry",file:file},canDrag:canDrag,begin:onDragStart,end:onDragEnd,collect:function collect(monitor){return{isDragging:monitor.isDragging()}}}),3),dndIsDragging=_useDrag2[0].isDragging,drag=_useDrag2[1],preview=_useDrag2[2],_useDrop2=DnDFileEntry_slicedToArray(Object(useDrop.a)({accept:"chonky-file-entry",drop:onDrop,canDrop:canDrop,collect:function collect(monitor){return{isOver:monitor.isOver(),canDrop:monitor.canDrop()}}}),2),_useDrop2$=_useDrop2[0],dndIsOver=_useDrop2$.isOver,dndCanDrop=_useDrop2$.canDrop,drop=_useDrop2[1];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){preview(Object(getEmptyImage.a)(),{captureDraggingState:!0})}),[preview]),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{ref:drop,className:"chonky-file-entry-droppable-wrapper chonky-fill-parent"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{ref:FileHelper.isDraggable(file)?drag:null,className:"chonky-file-entry-draggable-wrapper chonky-fill-parent"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ClickableFileEntry_ClickableFileEntry,_extends({},props,{dndIsDragging:dndIsDragging,dndIsOver:dndIsOver,dndCanDrop:dndCanDrop}))))};DnDFileEntry_DnDFileEntry.displayName="DnDFileEntry";try{DnDFileEntry_DnDFileEntry.displayName="DnDFileEntry",DnDFileEntry_DnDFileEntry.__docgenInfo={description:"",displayName:"DnDFileEntry",props:{file:{defaultValue:null,description:"",name:"file",required:!0,type:{name:"Nullable<FileData>"}},displayIndex:{defaultValue:null,description:"",name:"displayIndex",required:!0,type:{name:"number"}},selected:{defaultValue:null,description:"",name:"selected",required:!0,type:{name:"boolean"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties | undefined"}},dndIsDragging:{defaultValue:null,description:"",name:"dndIsDragging",required:!1,type:{name:"boolean | undefined"}},dndIsOver:{defaultValue:null,description:"",name:"dndIsOver",required:!1,type:{name:"boolean | undefined"}},dndCanDrop:{defaultValue:null,description:"",name:"dndCanDrop",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/DnDFileEntry.tsx#DnDFileEntry"]={docgenInfo:DnDFileEntry_DnDFileEntry.__docgenInfo,name:"DnDFileEntry",path:"src/components/internal/DnDFileEntry.tsx#DnDFileEntry"})}catch(__react_docgen_typescript_loader_error){}var DefaultEntrySize={width:160,height:120},FileList_virtualization_useEntryRenderer=function useEntryRenderer(files){var selection=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkySelectionContext),enableDragAndDrop=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyEnableDragAndDropContext);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(virtualKey,index,style,parent,gutterSize,lastRow,lastColumn){if("number"==typeof gutterSize&&(lastColumn||(style.width=style.width-gutterSize),style.height=style.height-gutterSize),lastRow&&(style.height=style.height-1),lastColumn&&(style.width=style.width-1),index>=files.length)return null;var file=files[index],key=file?file.id:"loading-file-".concat(virtualKey),entryProps={file:file,displayIndex:index,selected:!!file&&!0===selection[file.id]},fileEntryComponent=enableDragAndDrop?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(DnDFileEntry_DnDFileEntry,entryProps):delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ClickableFileEntry_ClickableFileEntry,entryProps);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{key:key,className:"chonky-virtualization-wrapper",style:style},fileEntryComponent)}),[files,selection,enableDragAndDrop])},_noContentRenderer=function noContentRenderer(height){var placeholderProps={className:classnames_default()({"chonky-file-list-notification":!0,"chonky-file-list-notification-empty":!0})};return"number"==typeof height&&(placeholderProps.style={height:height}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",placeholderProps,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-list-notification-content"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:ChonkyIconName.folderOpen}),"  Nothing to show"))};_noContentRenderer.displayName="noContentRenderer";var FileList_virtualization_useGridRenderer=function useGridRenderer(files,entrySize,entryRenderer,thumbsGridRef,fillParentContainer){return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(_ref){var width=_ref.width,height=_ref.height,isMobile=function isMobileDevice(){return void 0!==window.orientation||-1!==navigator.userAgent.indexOf("IEMobile")}(),gutter=isMobile?5:8,columnCountFloat=(width+gutter-(!fillParentContainer||isMobile?0:16))/(entrySize.width+gutter),columnCount=Math.max(1,Math.floor(columnCountFloat)),rowCount=Math.ceil(files.length/columnCount);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(es.b,{style:{minHeight:entrySize.height+10},ref:thumbsGridRef,cellRenderer:function cellRenderer(data){var index=data.rowIndex*columnCount+data.columnIndex;return entryRenderer(data.key,index,Object.assign({},data.style),data.parent,gutter,data.rowIndex===rowCount-1,data.columnIndex===columnCount-1)},noContentRenderer:function noContentRenderer(){return _noContentRenderer(entrySize.height)},rowCount:rowCount,columnCount:columnCount,columnWidth:function columnWidth(_ref2){return function getColWidth(index,columnCount,entrySize,gutterSize){return index===columnCount-1?entrySize.width:entrySize.width+gutterSize}(_ref2.index,columnCount,entrySize,gutter)},rowHeight:function rowHeight(_ref3){_ref3.index;return function getRowHeight(index,rowCount,entrySize,gutterSize){return entrySize.height+gutterSize}(0,0,entrySize,gutter)},overscanRowCount:2,width:width,containerStyle:{minHeight:50},height:"number"==typeof height?height:500,autoHeight:!fillParentContainer,tabIndex:null})}),[files,entrySize,entryRenderer,thumbsGridRef,fillParentContainer])};try{FileList_virtualization_useEntryRenderer.displayName="useEntryRenderer",FileList_virtualization_useEntryRenderer.__docgenInfo={description:"",displayName:"useEntryRenderer",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileList-virtualization.tsx#useEntryRenderer"]={docgenInfo:FileList_virtualization_useEntryRenderer.__docgenInfo,name:"useEntryRenderer",path:"src/components/external/FileList-virtualization.tsx#useEntryRenderer"})}catch(__react_docgen_typescript_loader_error){}try{noContentRenderer.displayName="noContentRenderer",noContentRenderer.__docgenInfo={description:"",displayName:"noContentRenderer",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileList-virtualization.tsx#noContentRenderer"]={docgenInfo:noContentRenderer.__docgenInfo,name:"noContentRenderer",path:"src/components/external/FileList-virtualization.tsx#noContentRenderer"})}catch(__react_docgen_typescript_loader_error){}var NOOP_FUNCTION=function NOOP_FUNCTION(){};__webpack_require__(55),__webpack_require__(125),__webpack_require__(108),__webpack_require__(126),__webpack_require__(127);function selection_typeof(obj){return(selection_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function _createSuperInternal(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==selection_typeof(call)&&"function"!=typeof call?function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}function selection_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function selection_defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function selection_createClass(Constructor,protoProps,staticProps){return protoProps&&selection_defineProperties(Constructor.prototype,protoProps),staticProps&&selection_defineProperties(Constructor,staticProps),Constructor}function selection_createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=selection_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e2){throw _e2},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e3){didErr=!0,err=_e3},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function selection_slicedToArray(arr,i){return function selection_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function selection_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||selection_unsupportedIterableToArray(arr,i)||function selection_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function selection_unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return selection_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?selection_arrayLikeToArray(o,minLen):void 0}}function selection_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var selection_useSelectionModifiers=function useSelectionModifiers(disableSelection,setSelection){var selectFiles=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(fileIds){var reset=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];disableSelection||setSelection((function(selection){var _step,newSelection=reset?{}:Object.assign({},selection),_iterator=selection_createForOfIteratorHelper(fileIds);try{for(_iterator.s();!(_step=_iterator.n()).done;){newSelection[_step.value]=!0}}catch(err){_iterator.e(err)}finally{_iterator.f()}return newSelection}))}),[disableSelection,setSelection]),toggleSelection=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(fileId){var exclusive=arguments.length>1&&void 0!==arguments[1]&&arguments[1];disableSelection||setSelection((function(selection){var newSelection=exclusive?{}:Object.assign({},selection);return!0===selection[fileId]?delete newSelection[fileId]:newSelection[fileId]=!0,newSelection}))}),[disableSelection,setSelection]),clearSelection=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(){disableSelection||setSelection({})}),[disableSelection,setSelection]);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return{selectFiles:selectFiles,toggleSelection:toggleSelection,clearSelection:clearSelection}}),[selectFiles,toggleSelection,clearSelection])},selection_SelectionHelper=function(){function SelectionHelper(){selection_classCallCheck(this,SelectionHelper)}return selection_createClass(SelectionHelper,null,[{key:"getSelectedFiles",value:function getSelectedFiles(files,selection){for(var selectedFiles=files.filter((function(file){return FileHelper.isSelectable(file)&&!0===selection[file.id]})),_len=arguments.length,filters=new Array(_len>2?_len-2:0),_key=2;_key<_len;_key++)filters[_key-2]=arguments[_key];return filters.reduce((function(prevFiles,filter){return prevFiles.filter(filter)}),selectedFiles)}},{key:"getSelectionSize",value:function getSelectionSize(files,selection){for(var _len2=arguments.length,filters=new Array(_len2>2?_len2-2:0),_key2=2;_key2<_len2;_key2++)filters[_key2-2]=arguments[_key2];return SelectionHelper.getSelectedFiles.apply(SelectionHelper,[files,selection].concat(filters)).length}},{key:"isSelected",value:function isSelected(selection,file){return FileHelper.isSelectable(file)&&!0===selection[file.id]}}]),SelectionHelper}(),SelectionUtil=function(){function SelectionUtil(){var files=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],selection=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};selection_classCallCheck(this,SelectionUtil),this.files=void 0,this.selection=void 0,this.protectedUpdate(files,selection)}return selection_createClass(SelectionUtil,[{key:"protectedUpdate",value:function protectedUpdate(files,selection){this.files=files,this.selection=selection}},{key:"getSelection",value:function getSelection(){return this.selection}},{key:"getSelectedFiles",value:function getSelectedFiles(){for(var _len3=arguments.length,filters=new Array(_len3),_key3=0;_key3<_len3;_key3++)filters[_key3]=arguments[_key3];return selection_SelectionHelper.getSelectedFiles.apply(selection_SelectionHelper,[this.files,this.selection].concat(filters))}},{key:"getSelectionSize",value:function getSelectionSize(){for(var _len4=arguments.length,filters=new Array(_len4),_key4=0;_key4<_len4;_key4++)filters[_key4]=arguments[_key4];return selection_SelectionHelper.getSelectionSize.apply(selection_SelectionHelper,[this.files,this.selection].concat(filters))}},{key:"isSelected",value:function isSelected(file){return selection_SelectionHelper.isSelected(this.selection,file)}}]),SelectionUtil}(),UpdateableSelectionUtil=function(_SelectionUtil){!function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(UpdateableSelectionUtil,_SelectionUtil);var _super=_createSuper(UpdateableSelectionUtil);function UpdateableSelectionUtil(){return selection_classCallCheck(this,UpdateableSelectionUtil),_super.apply(this,arguments)}return selection_createClass(UpdateableSelectionUtil,[{key:"update",value:function update(){this.protectedUpdate.apply(this,arguments)}}]),UpdateableSelectionUtil}(SelectionUtil),ChonkyInstanceIdContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext("no-instance-id"),ChonkyFilesContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext([]),ChonkyFolderChainContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(null),ChonkySelectionContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext({}),ChonkySelectionSizeContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(0),ChonkySelectionUtilContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(new SelectionUtil),ChonkyFileActionsContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext([]),ChonkyDispatchFileActionContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(NOOP_FUNCTION),ChonkyDispatchSpecialActionContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(NOOP_FUNCTION),ChonkySearchBarEnabledContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(!1),ChonkySetSearchBarEnabledContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(NOOP_FUNCTION),ChonkySearchBarVisibleContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(!1),ChonkySetSearchBarVisibleContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(NOOP_FUNCTION),ChonkySearchFilterContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(""),ChonkySetSearchFilterContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(NOOP_FUNCTION),ChonkyThumbnailGeneratorContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(null),ChonkyDoubleClickDelayContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(300),ChonkyFileEntrySizeContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(DefaultEntrySize),ChonkyDisableSelectionContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(!1),ChonkyEnableDragAndDropContext=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createContext(!1),bluebird=__webpack_require__(154),bluebird_default=__webpack_require__.n(bluebird);function file_actions_createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=function file_actions_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return file_actions_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return file_actions_arrayLikeToArray(o,minLen)}(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function file_actions_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var ChonkyActions={MoveFilesTo:{id:"move_files_to"},DuplicateFilesTo:{id:"duplicate_files_to"},OpenParentFolder:{id:"open_parent_folder",requiresParentFolder:!0,fileFilter:function fileFilter(file){return FileHelper.isOpenable(file)},hotkeys:["backspace"],toolbarButton:{name:"Go up a directory",tooltip:"Go up a directory",icon:ChonkyIconName.openParentFolder,iconOnly:!0}},OpenFiles:{id:"open_files",requiresSelection:!0,fileFilter:FileHelper.isOpenable,toolbarButton:{name:"Open selection",group:"Actions",dropdown:!0,icon:ChonkyIconName.openFiles}},ToggleSearch:{id:"toggle_search",hotkeys:["ctrl+f"],toolbarButton:{name:"Search",icon:ChonkyIconName.search,iconOnly:!0},specialActionToDispatch:SpecialAction.ToggleSearchBar},CopyFiles:{id:"copy_files",requiresSelection:!0},CreateFolder:{id:"create_folder",toolbarButton:{name:"Create folder",tooltip:"Create a folder",icon:ChonkyIconName.folderCreate}},UploadFiles:{id:"upload_files",toolbarButton:{name:"Upload files",tooltip:"Upload files",icon:ChonkyIconName.upload}},DownloadFiles:{id:"download_files",requiresSelection:!0,toolbarButton:{name:"Download files",group:"Actions",tooltip:"Download files",dropdown:!0,icon:ChonkyIconName.download}}},DefaultFileActions=[ChonkyActions.MoveFilesTo,ChonkyActions.DuplicateFilesTo,ChonkyActions.OpenParentFolder,ChonkyActions.OpenFiles,ChonkyActions.ToggleSearch],file_actions_useFileActionTrigger=function useFileActionTrigger(action){var files=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyFilesContext),folderChain=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyFolderChainContext),selection=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkySelectionContext),selectionSize=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkySelectionSizeContext),searchBarVisible=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkySearchBarVisibleContext),dispatchFileAction=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyDispatchFileActionContext),dispatchSpecialAction=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyDispatchSpecialActionContext),parentFolder=folderChain&&folderChain.length>1?folderChain[(null==folderChain?void 0:folderChain.length)-2]:null;return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var actionSelectionSize=void 0,actionFiles=void 0;action.requiresSelection&&(action.fileFilter?(actionSelectionSize=selection_SelectionHelper.getSelectionSize(files,selection,action.fileFilter),actionFiles=selection_SelectionHelper.getSelectedFiles(files,selection,action.fileFilter)):(actionSelectionSize=selectionSize,actionFiles=selection_SelectionHelper.getSelectedFiles(files,selection)));var active=action.id===ChonkyActions.ToggleSearch.id&&searchBarVisible,actionTarget=void 0;action.requiresParentFolder&&parentFolder&&(action.fileFilter?action.fileFilter(parentFolder)&&(actionTarget=parentFolder):actionTarget=parentFolder);return{active:active,disabled:action.requiresSelection&&0===actionSelectionSize||action.requiresParentFolder&&!actionTarget,triggerAction:function triggerAction(){if(action.specialActionToDispatch){var specialActionId=action.specialActionToDispatch;switch(specialActionId){case SpecialAction.ToggleSearchBar:dispatchSpecialAction({actionId:specialActionId});break;default:Logger.error('File action "'.concat(action.id,'" tried to dispatch the ')+'special action "'.concat(specialActionId,'", but no ')+"transform was defined for this action.")}}dispatchFileAction({actionId:action.id,target:actionTarget,files:actionFiles})}}}),[action,files,selection,selectionSize,searchBarVisible,dispatchFileAction,dispatchSpecialAction,parentFolder])};function hooks_helpers_slicedToArray(arr,i){return function hooks_helpers_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function hooks_helpers_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function hooks_helpers_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return hooks_helpers_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return hooks_helpers_arrayLikeToArray(o,minLen)}(arr,i)||function hooks_helpers_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function hooks_helpers_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var UNINITIALIZED_SENTINEL={},hooks_helpers_useClickListener=function useClickListener(params){var onClick=params.onClick,onInsideClick=params.onInsideClick,onOutsideClick=params.onOutsideClick,triggerComponentRef=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useRef)(null),clickListener=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){!triggerComponentRef.current||triggerComponentRef.current.contains(event.target)?onInsideClick&&onInsideClick(event):onOutsideClick&&onOutsideClick(event),onClick&&onClick(event)}),[onClick,onInsideClick,onOutsideClick,triggerComponentRef]);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){return document.addEventListener("mousedown",clickListener,!1),function(){document.removeEventListener("mousedown",clickListener,!1)}}),[clickListener]),triggerComponentRef},FuzzySearch=__webpack_require__(361);function search_slicedToArray(arr,i){return function search_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function search_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function search_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return search_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return search_arrayLikeToArray(o,minLen)}(arr,i)||function search_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function search_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var search_useSearchState=function useSearchState(){var _useState2=search_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(!1),2),searchBarEnabled=_useState2[0],setSearchBarEnabled=_useState2[1],_useState4=search_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(!1),2),searchBarVisible=_useState4[0],setSearchBarVisible=_useState4[1],_useState6=search_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(""),2);return{searchBarEnabled:searchBarEnabled,setSearchBarEnabled:setSearchBarEnabled,searchBarVisible:searchBarVisible,setSearchBarVisible:setSearchBarVisible,searchFilter:_useState6[0],setSearchFilter:_useState6[1]}},search_useSearchContexts=function useSearchContexts(searchState){return[{context:ChonkySearchBarEnabledContext,value:searchState.searchBarEnabled},{context:ChonkySetSearchBarEnabledContext,value:searchState.setSearchBarEnabled},{context:ChonkySearchBarVisibleContext,value:searchState.searchBarVisible},{context:ChonkySetSearchBarVisibleContext,value:searchState.setSearchBarVisible},{context:ChonkySearchFilterContext,value:searchState.searchFilter},{context:ChonkySetSearchFilterContext,value:searchState.setSearchFilter}]};function special_actions_defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var special_actions_useSpecialFileActionHandlerMap=function useSpecialFileActionHandlerMap(selectionUtil,selectionModifiers,setSearchBarVisible,dispatchFileAction){return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var _ref;return special_actions_defineProperty(_ref={},SpecialAction.MouseClickFile,(function(data){"double"===data.clickType&&FileHelper.isOpenable(data.file)?dispatchFileAction({actionId:ChonkyActions.OpenFiles.id,target:data.file,files:[data.file]}):FileHelper.isSelectable(data.file)?selectionModifiers.toggleSelection(data.file.id,!data.ctrlKey):data.ctrlKey||selectionModifiers.clearSelection()})),special_actions_defineProperty(_ref,SpecialAction.KeyboardClickFile,(function(data){data.enterKey&&FileHelper.isOpenable(data.file)?dispatchFileAction({actionId:ChonkyActions.OpenFiles.id,target:data.file,files:selectionUtil.getSelectedFiles(FileHelper.isOpenable)}):data.spaceKey&&FileHelper.isSelectable(data.file)&&selectionModifiers.toggleSelection(data.file.id,data.ctrlKey)})),special_actions_defineProperty(_ref,SpecialAction.ToggleSearchBar,(function(){setSearchBarVisible((function(visible){return!visible}))})),special_actions_defineProperty(_ref,SpecialAction.DragNDropStart,(function(data){var file=data.dragSource;selectionUtil.isSelected(file)||(selectionModifiers.clearSelection(),FileHelper.isSelectable(file)&&selectionModifiers.selectFiles([file.id]))})),special_actions_defineProperty(_ref,SpecialAction.DragNDropEnd,(function(data){if(!selectionUtil.isSelected(data.dropTarget)){var selectedFiles=selectionUtil.getSelectedFiles(FileHelper.isDraggable),droppedFiles=selectedFiles.length>0?selectedFiles:[data.dragSource];dispatchFileAction({actionId:"copy"===data.dropEffect?ChonkyActions.DuplicateFilesTo.id:ChonkyActions.MoveFilesTo.id,target:data.dropTarget,files:droppedFiles})}})),_ref}),[selectionUtil,selectionModifiers,setSearchBarVisible,dispatchFileAction])},ContextComposer_ContextComposer=(__webpack_require__(763),function ContextComposer(props){var providers=props.providers,children=props.children;return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.Fragment,null,providers.reduceRight((function(acc,data){var Provider=data.provider;return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(Provider,{value:data.value},acc)}),children))});ContextComposer_ContextComposer.displayName="ContextComposer";try{ContextComposer_ContextComposer.displayName="ContextComposer",ContextComposer_ContextComposer.__docgenInfo={description:"Takes an array of context providers and composes them into a\nhierarchy:\n\n<Comp1 {...props}>\n     <Comp2 {...props}>\n         <Comp3 {...props}>\n             {children}\n         </Comp3>\n     </Comp2>\n</Comp1>",displayName:"ContextComposer",props:{providers:{defaultValue:null,description:"",name:"providers",required:!0,type:{name:"ContextProviderData<any>[]"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/ContextComposer.tsx#ContextComposer"]={docgenInfo:ContextComposer_ContextComposer.__docgenInfo,name:"ContextComposer",path:"src/components/internal/ContextComposer.tsx#ContextComposer"})}catch(__react_docgen_typescript_loader_error){}var useDragLayer=__webpack_require__(786),layerStyles={position:"fixed",pointerEvents:"none",zIndex:100,left:0,top:0,width:"100%",height:"100%"},getItemStyles=function getItemStyles(initialCursorOffset,initialFileOffset,currentFileOffset){if(!initialCursorOffset||!initialFileOffset||!currentFileOffset)return{display:"none"};var x=initialCursorOffset.x+(currentFileOffset.x-initialFileOffset.x),y=initialCursorOffset.y+(currentFileOffset.y-initialFileOffset.y),transform="translate(".concat(x,"px, ").concat(y,"px)");return{transform:transform,WebkitTransform:transform}},DnDFileListDragLayer_DnDFileListDragLayer=function DnDFileListDragLayer(){var selectionSize=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkySelectionSizeContext),_useDragLayer=Object(useDragLayer.a)((function(monitor){return{item:monitor.getItem(),itemType:monitor.getItemType(),initialCursorOffset:monitor.getInitialClientOffset(),initialFileOffset:monitor.getInitialSourceClientOffset(),currentFileOffset:monitor.getSourceClientOffset(),isDragging:monitor.isDragging()}})),itemType=_useDragLayer.itemType,item=_useDragLayer.item,initialCursorOffset=_useDragLayer.initialCursorOffset,initialFileOffset=_useDragLayer.initialFileOffset,currentFileOffset=_useDragLayer.currentFileOffset;return _useDragLayer.isDragging?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:layerStyles},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:getItemStyles(initialCursorOffset,initialFileOffset,currentFileOffset)},function renderItem(){if(item.file&&"chonky-file-entry"===itemType)return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-drag-preview"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("b",null,item.file.name),selectionSize>1&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.Fragment,null," and ",delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("strong",null,selectionSize-1," other file",selectionSize-1!=1?"s":"")))}())):null};DnDFileListDragLayer_DnDFileListDragLayer.displayName="DnDFileListDragLayer";try{DnDFileListDragLayer_DnDFileListDragLayer.displayName="DnDFileListDragLayer",DnDFileListDragLayer_DnDFileListDragLayer.__docgenInfo={description:"",displayName:"DnDFileListDragLayer",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/DnDFileListDragLayer.tsx#DnDFileListDragLayer"]={docgenInfo:DnDFileListDragLayer_DnDFileListDragLayer.__docgenInfo,name:"DnDFileListDragLayer",path:"src/components/internal/DnDFileListDragLayer.tsx#DnDFileListDragLayer"})}catch(__react_docgen_typescript_loader_error){}var ErrorMessage=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var message=props.message,bullets=props.bullets,bulletList=null;if(bullets&&bullets.length>0){for(var items=[],i=0;i<bullets.length;++i)items.push(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("li",{key:"error-bullet-".concat(i)},bullets[i]));bulletList=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("ul",null,items)}return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-error"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-error-name"},"Chonky runtime error:")," ",message,bulletList)}));try{ErrorMessage.displayName="ErrorMessage",ErrorMessage.__docgenInfo={description:"",displayName:"ErrorMessage",props:{message:{defaultValue:null,description:"",name:"message",required:!0,type:{name:"string"}},bullets:{defaultValue:null,description:"",name:"bullets",required:!1,type:{name:"string[] | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/internal/ErrorMessage.tsx#ErrorMessage"]={docgenInfo:ErrorMessage.__docgenInfo,name:"ErrorMessage",path:"src/components/internal/ErrorMessage.tsx#ErrorMessage"})}catch(__react_docgen_typescript_loader_error){}function FileBrowser_toConsumableArray(arr){return function FileBrowser_arrayWithoutHoles(arr){if(Array.isArray(arr))return FileBrowser_arrayLikeToArray(arr)}(arr)||function FileBrowser_iterableToArray(iter){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(iter))return Array.from(iter)}(arr)||function FileBrowser_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return FileBrowser_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return FileBrowser_arrayLikeToArray(o,minLen)}(arr)||function FileBrowser_nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function FileBrowser_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var FileBrowser_FileBrowser=function FileBrowser(props){var files=props.files,children=props.children,chonkyInstanceId=function useStaticValue(factory){var valueRef=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useRef)(UNINITIALIZED_SENTINEL);return valueRef.current===UNINITIALIZED_SENTINEL&&(valueRef.current=factory()),valueRef.current}(shortid_default.a.generate),folderChain=props.folderChain?props.folderChain:null,fileActions=props.fileActions?props.fileActions:[],onFileAction=props.onFileAction?props.onFileAction:null,thumbnailGenerator=props.thumbnailGenerator?props.thumbnailGenerator:null,doubleClickDelay="number"==typeof props.doubleClickDelay?props.doubleClickDelay:300,disableSelection=!!props.disableSelection,enableDragAndDrop=!!props.enableDragAndDrop,disableDefaultFileActions=!!props.disableDefaultFileActions,_useFileArrayValidati=function useFileArrayValidation(files,folderChain){var _useMemo=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var errorMessages=[],cleanFilesResult=cleanupFileArray(files,!1);if(cleanFilesResult.warningMessage){var errorMessage='The "files" prop passed to '.concat(FileBrowser_FileBrowser.name," did not pass validation. ")+"".concat(cleanFilesResult.warningMessage," ")+"The following errors were encountered:";Logger.error(errorMessage,Logger.formatBullets(cleanFilesResult.warningBullets)),errorMessages.push({message:errorMessage,bullets:cleanFilesResult.warningBullets})}return{cleanFiles:cleanFilesResult.cleanFileArray,errorMessages:errorMessages}}),[files]),cleanFiles=_useMemo.cleanFiles,filesErrorMessages=_useMemo.errorMessages,_useMemo2=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var errorMessages=[],cleanFolderChainResult=cleanupFileArray(folderChain,!0);if(cleanFolderChainResult.warningMessage){var errorMessage='The "folderChain" prop passed to '.concat(FileBrowser_FileBrowser.name," did not pass validation. ")+"".concat(cleanFolderChainResult.warningMessage," ")+"The following errors were encountered:";Logger.error(errorMessage,Logger.formatBullets(cleanFolderChainResult.warningBullets)),errorMessages.push({message:errorMessage,bullets:cleanFolderChainResult.warningBullets})}return{cleanFolderChain:cleanFolderChainResult.cleanFileArray,errorMessages:errorMessages}}),[folderChain]),cleanFolderChain=_useMemo2.cleanFolderChain,folderChainErrorMessages=_useMemo2.errorMessages;return{cleanFiles:cleanFiles,cleanFolderChain:cleanFolderChain,errorMessages:[].concat(_toConsumableArray(filesErrorMessages),_toConsumableArray(folderChainErrorMessages))}}(files,folderChain),cleanFiles=_useFileArrayValidati.cleanFiles,cleanFolderChain=_useFileArrayValidati.cleanFolderChain,fileArrayErrors=_useFileArrayValidati.errorMessages,_useFileActionsValida=validation_useFileActionsValidation(fileActions,DefaultFileActions,!disableDefaultFileActions),cleanFileActions=_useFileActionsValida.cleanFileActions,fileActionsErrors=_useFileActionsValida.errorMessages,validationErrors=[].concat(FileBrowser_toConsumableArray(fileArrayErrors),FileBrowser_toConsumableArray(fileActionsErrors)),sortedFiles=cleanFiles,_useSelection=function useSelection(files,disableSelection){var _useState2=selection_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)({}),2),selection=_useState2[0],setSelection=_useState2[1],selectionSize=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return selection_SelectionHelper.getSelectionSize(files,selection)}),[files,selection]),selectionModifiers=selection_useSelectionModifiers(disableSelection,setSelection),selectionUtilRef=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useRef)(new UpdateableSelectionUtil(files,selection));return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){selectionUtilRef.current.update(files,selection)}),[files,selection]),{selection:selection,selectionSize:selectionSize,selectionUtilRef:selectionUtilRef,selectionModifiers:selectionModifiers}}(sortedFiles,disableSelection),selection=_useSelection.selection,selectionSize=_useSelection.selectionSize,selectionUtilRef=_useSelection.selectionUtilRef,selectionModifiers=_useSelection.selectionModifiers,_useSearch=function useSearch(){var searchState=search_useSearchState();return{searchState:searchState,searchContexts:search_useSearchContexts(searchState)}}(),searchState=_useSearch.searchState,searchContexts=_useSearch.searchContexts,filteredFiles=function useFilteredFiles(files,searchFilter){return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return searchFilter?new FuzzySearch.a(files.filter((function(f){return!!f})),["name"],{caseSensitive:!1,sort:!0}).search(searchFilter):files}),[files,searchFilter])}(sortedFiles,searchState.searchFilter),dispatchFileAction=function useFileActionDispatcher(fileActions,onFileAction){var actionMap=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var actionMap={};if(Array.isArray(fileActions)){var _step,_iterator=file_actions_createForOfIteratorHelper(fileActions);try{for(_iterator.s();!(_step=_iterator.n()).done;){var fileAction=_step.value;actionMap[fileAction.id]=fileAction}}catch(err){_iterator.e(err)}finally{_iterator.f()}}return actionMap}),[fileActions]);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(actionData){var actionId=actionData.actionId,action=actionMap[actionId];action?function isFunction(value){return!!(value&&value.constructor&&value.call&&value.apply)}(onFileAction)&&bluebird_default.a.resolve().then((function(){return onFileAction(action,actionData)})).catch((function(error){return Logger.error('User-defined "onAction" handler threw an error: '.concat(error.message))})):Logger.error('Internal components dispatched a "'.concat(actionId,'" file action, ')+"but such action was not registered.")}),[actionMap,onFileAction])}(cleanFileActions,onFileAction),dispatchSpecialAction=function useSpecialActionDispatcher(files,selection,selectionUtil,selectionModifiers,setSearchBarVisible,dispatchFileAction){var specialActionHandlerMap=special_actions_useSpecialFileActionHandlerMap(selectionUtil,selectionModifiers,setSearchBarVisible,dispatchFileAction);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(actionData){var actionId=actionData.actionId,handler=specialActionHandlerMap[actionId];if(handler)try{handler(actionData)}catch(error){Logger.error('Handler for special action "'.concat(actionId,'" threw an error.'),error)}else Logger.error('Internal components dispatched a "'.concat(actionId,'" special action, ')+"but no internal handler is available to process it.")}),[specialActionHandlerMap])}(0,0,selectionUtilRef.current,selectionModifiers,searchState.setSearchBarVisible,dispatchFileAction),chonkyRootRef=hooks_helpers_useClickListener({onOutsideClick:selectionModifiers.clearSelection}),contexts=[].concat(FileBrowser_toConsumableArray(searchContexts),[{context:ChonkyInstanceIdContext,value:chonkyInstanceId},{context:ChonkyFilesContext,value:filteredFiles},{context:ChonkyFolderChainContext,value:cleanFolderChain},{context:ChonkySelectionContext,value:selection},{context:ChonkySelectionSizeContext,value:selectionSize},{context:ChonkySelectionUtilContext,value:selectionUtilRef.current},{context:ChonkyFileActionsContext,value:cleanFileActions},{context:ChonkyDispatchFileActionContext,value:dispatchFileAction},{context:ChonkyDispatchSpecialActionContext,value:dispatchSpecialAction},{context:ChonkyThumbnailGeneratorContext,value:thumbnailGenerator},{context:ChonkyDoubleClickDelayContext,value:doubleClickDelay},{context:ChonkyFileEntrySizeContext,value:DefaultEntrySize},{context:ChonkyDisableSelectionContext,value:disableSelection},{context:ChonkyEnableDragAndDropContext,value:enableDragAndDrop}]),contextProviders=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){return contexts.map((function(data){return{provider:data.context.Provider,value:data.value}}))}),contexts.map((function(data){return data.value})));return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ContextComposer_ContextComposer,{providers:contextProviders},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{ref:chonkyRootRef,className:"chonky-root chonky-no-select"},enableDragAndDrop&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(DnDFileListDragLayer_DnDFileListDragLayer,null),validationErrors.map((function(data,index){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ErrorMessage,{key:"error-message-".concat(index),message:data.message,bullets:data.bullets})})),children||null))};FileBrowser_FileBrowser.displayName="FileBrowser";try{FileBrowser_FileBrowser.displayName="FileBrowser",FileBrowser_FileBrowser.__docgenInfo={description:"",displayName:"FileBrowser",props:{files:{defaultValue:null,description:"List of files that will be displayed in the main container. The provided value\n**must** be an array, where each element is either `null` or an object that\nsatisfies the `FileData` type. If an element is `null`, a loading placeholder\nwill be displayed in its place.",name:"files",required:!0,type:{name:"FileArray"}},folderChain:{defaultValue:null,description:"The current folder hierarchy. This should be an array of `files`, every\nelement should either be `null` or an object of `FileData` type. The first\nelement should represent the top-level directory, and the last element\nshould be the current folder.",name:"folderChain",required:!1,type:{name:"FileArray | undefined"}},fileActions:{defaultValue:null,description:"",name:"fileActions",required:!1,type:{name:"FileAction[] | undefined"}},onFileAction:{defaultValue:null,description:"",name:"onFileAction",required:!1,type:{name:"FileActionHandler | undefined"}},thumbnailGenerator:{defaultValue:null,description:"The function that determines the thumbnail image URL for a file. It gets a file object as the input, and\nshould return a `string` or `null`. It can also return a promise that resolves into a `string` or `null`.\n[See relevant section](#section-displaying-file-thumbnails).",name:"thumbnailGenerator",required:!1,type:{name:"ThumbnailGenerator | undefined"}},doubleClickDelay:{defaultValue:null,description:"Maximum delay between the two clicks in a double click, in milliseconds.",name:"doubleClickDelay",required:!1,type:{name:"number | undefined"}},disableSelection:{defaultValue:null,description:"The flag that completely disables file selection functionality. If any handlers depend on file selections, their\ninput will look like no files are selected.",name:"disableSelection",required:!1,type:{name:"boolean | undefined"}},disableDefaultFileActions:{defaultValue:null,description:"",name:"disableDefaultFileActions",required:!1,type:{name:"boolean | undefined"}},enableDragAndDrop:{defaultValue:null,description:"The flag that completely disables drag & drop functionality.\n[See relevant section](#section-managing-file-selection).",name:"enableDragAndDrop",required:!1,type:{name:"boolean | undefined"}},fillParentContainer:{defaultValue:null,description:"The flag that determines whether Chonky should fill the height parent container. When set to `true`, the maximum\nheight of the file browser will be limited to the height of the parent container, and scrollbar will be shown\nwhen necessary. When set to `false`, file browser height will be extended to display all files at the same time.",name:"fillParentContainer",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileBrowser.tsx#FileBrowser"]={docgenInfo:FileBrowser_FileBrowser.__docgenInfo,name:"FileBrowser",path:"src/components/external/FileBrowser.tsx#FileBrowser"})}catch(__react_docgen_typescript_loader_error){}var delegated_prop_typesfrom_dll_reference_storybook_docs_dll=__webpack_require__(6),delegated_prop_typesfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_prop_typesfrom_dll_reference_storybook_docs_dll);function FileToolbar_hooks_createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=function FileToolbar_hooks_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return FileToolbar_hooks_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return FileToolbar_hooks_arrayLikeToArray(o,minLen)}(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function FileToolbar_hooks_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var FileToolbar_hooks_useFolderChainComponent=function useFolderChainComponent(){var folderChain=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyFolderChainContext),dispatchChonkyAction=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyDispatchFileActionContext);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){if(!folderChain)return folderChain;for(var comps=new Array(Math.max(0,2*folderChain.length-1)),_loop=function _loop(i){var file=folderChain[i],isLast=i===folderChain.length-1,j=2*i,compProps={key:"folder-chain-entry-".concat(j),className:classnames_default()({"chonky-folder-chain-entry":!0,"chonky-loading":!file})};FileHelper.isOpenable(file)&&!isLast&&(compProps.onClick=function(){dispatchChonkyAction({actionId:ChonkyActions.OpenFiles.id,target:file,files:[file]})});var TagToUse=compProps.onClick?"button":"div";comps[j]=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(TagToUse,compProps,0===j&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-text-subtle-dark"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:ChonkyIconName.folder}),"  "),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-folder-chain-entry-name"},file?file.name:"Loading...")),isLast||(comps[j+1]=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{key:"folder-chain-separator-".concat(j),className:"chonky-folder-chain-separator"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:ChonkyIconName.folderChainSeparator,size:"xs"})))},i=0;i<folderChain.length;++i)_loop(i);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-folder-chain"},comps)}),[folderChain,dispatchChonkyAction])};try{FileToolbar_hooks_useFolderChainComponent.displayName="useFolderChainComponent",FileToolbar_hooks_useFolderChainComponent.__docgenInfo={description:"Generates folder chain HTML components for the `FileToolbar` component.",displayName:"useFolderChainComponent",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileToolbar-hooks.tsx#useFolderChainComponent"]={docgenInfo:FileToolbar_hooks_useFolderChainComponent.__docgenInfo,name:"useFolderChainComponent",path:"src/components/external/FileToolbar-hooks.tsx#useFolderChainComponent"})}catch(__react_docgen_typescript_loader_error){}var DropdownButton=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var text=props.text,tooltip=props.tooltip,icon=props.icon,onClick=props.onClick,disabled=props.disabled;return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("button",{className:"chonky-toolbar-dropdown-button",onClick:onClick,title:tooltip||text,disabled:!onClick||disabled},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-dropdown-button-icon"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:icon||ChonkyIconName.fallbackIcon,fixedWidth:!0})),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-dropdown-button-text"},text))})),DropdownButton_SmartDropdownButton=function SmartDropdownButton(props){var action=props.fileAction,button=action.toolbarButton,_useFileActionTrigger=file_actions_useFileActionTrigger(action),disabled=_useFileActionTrigger.disabled,triggerAction=_useFileActionTrigger.triggerAction;return button?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(DropdownButton,{text:button.name,tooltip:button.tooltip,icon:button.icon,onClick:triggerAction,disabled:disabled}):null};DropdownButton_SmartDropdownButton.displayName="SmartDropdownButton";try{DropdownButton.displayName="DropdownButton",DropdownButton.__docgenInfo={description:"",displayName:"DropdownButton",props:{text:{defaultValue:null,description:"",name:"text",required:!0,type:{name:"string"}},tooltip:{defaultValue:null,description:"",name:"tooltip",required:!1,type:{name:"string | undefined"}},icon:{defaultValue:null,description:"",name:"icon",required:!1,type:{name:"string | undefined"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"(() => void) | undefined"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/DropdownButton.tsx#DropdownButton"]={docgenInfo:DropdownButton.__docgenInfo,name:"DropdownButton",path:"src/components/external/DropdownButton.tsx#DropdownButton"})}catch(__react_docgen_typescript_loader_error){}try{DropdownButton_SmartDropdownButton.displayName="SmartDropdownButton",DropdownButton_SmartDropdownButton.__docgenInfo={description:"",displayName:"SmartDropdownButton",props:{fileAction:{defaultValue:null,description:"",name:"fileAction",required:!0,type:{name:"FileAction"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/DropdownButton.tsx#SmartDropdownButton"]={docgenInfo:DropdownButton_SmartDropdownButton.__docgenInfo,name:"SmartDropdownButton",path:"src/components/external/DropdownButton.tsx#SmartDropdownButton"})}catch(__react_docgen_typescript_loader_error){}var ToolbarButton=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var text=props.text,tooltip=props.tooltip,active=props.active,icon=props.icon,iconOnly=props.iconOnly,iconOnRight=props.iconOnRight,onClick=props.onClick,disabled=props.disabled,iconComponent=icon||iconOnly?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-button-icon"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:icon||ChonkyIconName.fallbackIcon,fixedWidth:!0})):null,className=classnames_default()({"chonky-toolbar-button":!0,"chonky-active":!!active});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("button",{className:className,onClick:onClick,title:tooltip||text,disabled:!onClick||disabled},!iconOnRight&&iconComponent,text&&!iconOnly&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-button-text"},text),iconOnRight&&iconComponent)})),SmartToolbarButton=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var action=props.fileAction,button=action.toolbarButton,_useFileActionTrigger=file_actions_useFileActionTrigger(action),active=_useFileActionTrigger.active,triggerAction=_useFileActionTrigger.triggerAction,disabled=_useFileActionTrigger.disabled;return button?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ToolbarButton,{text:button.name,tooltip:button.tooltip,icon:button.icon,iconOnly:button.iconOnly,active:active,onClick:triggerAction,disabled:disabled}):null}));try{ToolbarButton.displayName="ToolbarButton",ToolbarButton.__docgenInfo={description:"",displayName:"ToolbarButton",props:{text:{defaultValue:null,description:"",name:"text",required:!0,type:{name:"string"}},tooltip:{defaultValue:null,description:"",name:"tooltip",required:!1,type:{name:"string | undefined"}},active:{defaultValue:null,description:"",name:"active",required:!1,type:{name:"boolean | undefined"}},icon:{defaultValue:null,description:"",name:"icon",required:!1,type:{name:"string | undefined"}},iconOnly:{defaultValue:null,description:"",name:"iconOnly",required:!1,type:{name:"boolean | undefined"}},iconOnRight:{defaultValue:null,description:"",name:"iconOnRight",required:!1,type:{name:"boolean | undefined"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"(() => void) | undefined"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/ToolbarButton.tsx#ToolbarButton"]={docgenInfo:ToolbarButton.__docgenInfo,name:"ToolbarButton",path:"src/components/external/ToolbarButton.tsx#ToolbarButton"})}catch(__react_docgen_typescript_loader_error){}try{SmartToolbarButton.displayName="SmartToolbarButton",SmartToolbarButton.__docgenInfo={description:"",displayName:"SmartToolbarButton",props:{fileAction:{defaultValue:null,description:"",name:"fileAction",required:!0,type:{name:"FileAction"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/ToolbarButton.tsx#SmartToolbarButton"]={docgenInfo:SmartToolbarButton.__docgenInfo,name:"SmartToolbarButton",path:"src/components/external/ToolbarButton.tsx#SmartToolbarButton"})}catch(__react_docgen_typescript_loader_error){}function Dropdown_slicedToArray(arr,i){return function Dropdown_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function Dropdown_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function Dropdown_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return Dropdown_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Dropdown_arrayLikeToArray(o,minLen)}(arr,i)||function Dropdown_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Dropdown_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var Dropdown=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var group=props.group,_useState2=Dropdown_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(!1),2),showDropdown=_useState2[0],setShowDropdown=_useState2[1],hideDropdown=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(){return setShowDropdown(!1)}),[setShowDropdown]),dropdownRef=hooks_helpers_useClickListener({onOutsideClick:hideDropdown}),triggerClick=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(){setShowDropdown(!0)}),[setShowDropdown]);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{ref:dropdownRef,className:"chonky-toolbar-dropdown"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ToolbarButton,{text:group.name,active:showDropdown,icon:ChonkyIconName.dropdown,iconOnRight:!0,onClick:triggerClick}),showDropdown&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-dropdown-content"},group.fileActions.map((function(action){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(DropdownButton_SmartDropdownButton,{key:"action-button-".concat(action.id),fileAction:action})}))))}));try{Dropdown.displayName="Dropdown",Dropdown.__docgenInfo={description:"",displayName:"Dropdown",props:{group:{defaultValue:null,description:"",name:"group",required:!0,type:{name:"ToolbarButtonGroup"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/Dropdown.tsx#Dropdown"]={docgenInfo:Dropdown.__docgenInfo,name:"Dropdown",path:"src/components/external/Dropdown.tsx#Dropdown"})}catch(__react_docgen_typescript_loader_error){}var ToolbarButtonGroup=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(props){var groupContents,group=props.group;return groupContents=group.dropdown?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(Dropdown,{group:group}):group.fileActions.map((function(action){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(SmartToolbarButton,{key:"action-button-".concat(action.id),fileAction:action})})),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-button-group"},groupContents)}));try{ToolbarButtonGroup.displayName="ToolbarButtonGroup",ToolbarButtonGroup.__docgenInfo={description:"",displayName:"ToolbarButtonGroup",props:{group:{defaultValue:null,description:"",name:"group",required:!0,type:{name:"ToolbarButtonGroup"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/ToolbarButtonGroup.tsx#ToolbarButtonGroup"]={docgenInfo:ToolbarButtonGroup.__docgenInfo,name:"ToolbarButtonGroup",path:"src/components/external/ToolbarButtonGroup.tsx#ToolbarButtonGroup"})}catch(__react_docgen_typescript_loader_error){}var FileToolbar=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(){var searchBarEnabled=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkySearchBarEnabledContext),folderChainComp=FileToolbar_hooks_useFolderChainComponent(),_useToolbarButtonGrou=function useToolbarButtonGroups(){var fileActions=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyFileActionsContext);return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useMemo)((function(){var _step,buttonGroups=[],buttonGroupMap={},openParentFolderButtonGroup=null,searchButtonGroup=null,_iterator=FileToolbar_hooks_createForOfIteratorHelper(fileActions);try{for(_iterator.s();!(_step=_iterator.n()).done;){var action=_step.value;if(action.toolbarButton){var button=action.toolbarButton,group=void 0;button.group?buttonGroupMap[button.group]?((group=buttonGroupMap[button.group]).dropdown=group.dropdown||button.dropdown,group.fileActions.push(action)):(group={name:button.group,dropdown:button.dropdown,fileActions:[action]},buttonGroups.push(group),buttonGroupMap[group.name]=group):(group={name:button.group,dropdown:button.dropdown,fileActions:[action]},action.id===ChonkyActions.OpenParentFolder.id?openParentFolderButtonGroup=group:action.id===ChonkyActions.ToggleSearch.id?searchButtonGroup=group:buttonGroups.push(group))}}}catch(err){_iterator.e(err)}finally{_iterator.f()}return{buttonGroups:buttonGroups,openParentFolderButtonGroup:openParentFolderButtonGroup,searchButtonGroup:searchButtonGroup}}),[fileActions])}(),buttonGroups=_useToolbarButtonGrou.buttonGroups,openParentFolderButtonGroup=_useToolbarButtonGrou.openParentFolderButtonGroup,searchButtonGroup=_useToolbarButtonGrou.searchButtonGroup;return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-side chonky-toolbar-side-left"},openParentFolderButtonGroup&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ToolbarButtonGroup,{group:openParentFolderButtonGroup}),folderChainComp),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-toolbar-side chonky-toolbar-side-right"},buttonGroups.map((function(group,index){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ToolbarButtonGroup,{key:"button-group-".concat(group.name?group.name:index),group:group})})),searchBarEnabled&&searchButtonGroup&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ToolbarButtonGroup,{group:searchButtonGroup})))}));FileToolbar.propTypes={folderChain:delegated_prop_typesfrom_dll_reference_storybook_docs_dll_default.a.arrayOf(delegated_prop_typesfrom_dll_reference_storybook_docs_dll_default.a.oneOfType([delegated_prop_typesfrom_dll_reference_storybook_docs_dll_default.a.string.isRequired,delegated_prop_typesfrom_dll_reference_storybook_docs_dll_default.a.oneOf([null]).isRequired]))};try{FileToolbar.displayName="FileToolbar",FileToolbar.__docgenInfo={description:"",displayName:"FileToolbar",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileToolbar.tsx#FileToolbar"]={docgenInfo:FileToolbar.__docgenInfo,name:"FileToolbar",path:"src/components/external/FileToolbar.tsx#FileToolbar"})}catch(__react_docgen_typescript_loader_error){}__webpack_require__(97);function FileSearch_slicedToArray(arr,i){return function FileSearch_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function FileSearch_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function FileSearch_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return FileSearch_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return FileSearch_arrayLikeToArray(o,minLen)}(arr,i)||function FileSearch_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function FileSearch_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var FileSearch_FileSearch=function FileSearch(){var setSearchBarEnabled=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkySetSearchBarEnabledContext),searchBarVisible=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkySearchBarVisibleContext),globalSearchFilter=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkySearchFilterContext),setGlobalSearchFilter=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkySetSearchFilterContext);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){return setSearchBarEnabled(!0),function(){return setSearchBarEnabled(!1)}}),[setSearchBarEnabled]);var _useState2=FileSearch_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(!1),2),showLoadingIndicator=_useState2[0],setShowLoadingIndicator=_useState2[1],_useState4=FileSearch_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(globalSearchFilter),2),localFilter=_useState4[0],setLocalFilter=_useState4[1],_useDebounce2=FileSearch_slicedToArray(function useDebounce(value,delay){var _useState2=hooks_helpers_slicedToArray(Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(value),2),debouncedValue=_useState2[0],setDebouncedValue=_useState2[1];return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){var handler=setTimeout((function(){setDebouncedValue(value)}),delay);return function(){clearTimeout(handler)}}),[value,delay]),[debouncedValue,setDebouncedValue]}(localFilter,500),2),debouncedFilter=_useDebounce2[0],setDebouncedFilter=_useDebounce2[1];Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){setShowLoadingIndicator(!1);var trimmedFilter=debouncedFilter.trim();setGlobalSearchFilter(trimmedFilter)}),[debouncedFilter,setShowLoadingIndicator,setGlobalSearchFilter]);var inputRef=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.useRef(null);Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)((function(){searchBarVisible?inputRef.current&&inputRef.current.focus():(setShowLoadingIndicator(!1),setLocalFilter(""),setDebouncedFilter(""))}),[inputRef,searchBarVisible,setShowLoadingIndicator,setLocalFilter,setDebouncedFilter]);var handleInputChange=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useCallback)((function(event){setShowLoadingIndicator(!0),setLocalFilter(event.target.value)}),[setShowLoadingIndicator,setLocalFilter]),className=classnames_default()({"chonky-file-search":!0,"chonky-file-search-hidden":!searchBarVisible});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:className},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-search-input-group"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("label",{htmlFor:"chonky-file-search"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:ChonkyIconName.search,fixedWidth:!0})),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("input",{ref:inputRef,type:"text",id:"chonky-file-search",value:localFilter,placeholder:"Type to search...",onChange:handleInputChange}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-search-input-group-loading"},showLoadingIndicator&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{className:"chonky-file-search-input-group-loading-indicator"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ChonkyIconFA,{icon:ChonkyIconName.loading,spin:!0})))))};FileSearch_FileSearch.displayName="FileSearch";try{FileSearch_FileSearch.displayName="FileSearch",FileSearch_FileSearch.__docgenInfo={description:"",displayName:"FileSearch",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileSearch.tsx#FileSearch"]={docgenInfo:FileSearch_FileSearch.__docgenInfo,name:"FileSearch",path:"src/components/external/FileSearch.tsx#FileSearch"})}catch(__react_docgen_typescript_loader_error){}var FileList=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.memo((function(){var files=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyFilesContext),entrySize=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(ChonkyFileEntrySizeContext),entryRenderer=FileList_virtualization_useEntryRenderer(files),thumbsGridRef=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useRef)(),gridRenderer=FileList_virtualization_useGridRenderer(files,entrySize,entryRenderer,thumbsGridRef,!0);if(!files){var errorMessage="".concat(FileList.name,' cannot find the "files" array via React context. This ')+"happens when ".concat(FileList.name,' is placed outside of "FileBrowser"')+"component.";return Logger.error(errorMessage),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ErrorMessage,{message:errorMessage})}return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"chonky-file-list",style:{minHeight:entrySize.height}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(es.a,{disableHeight:!1},gridRenderer))}));try{FileList.displayName="FileList",FileList.__docgenInfo={description:"",displayName:"FileList",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/external/FileList.tsx#FileList"]={docgenInfo:FileList.__docgenInfo,name:"FileList",path:"src/components/external/FileList.tsx#FileList"})}catch(__react_docgen_typescript_loader_error){}__webpack_require__(148),__webpack_require__(107),__webpack_require__(297),__webpack_require__(298)},148:function(module,exports){},15:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("M+/F")},157:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("3yYM")},16:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("87if")},160:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("DfhM")},161:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("LqLs")},162:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("pu3o")},163:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("6U7i")},164:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Cm4o")},17:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("vrRf")},175:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("F63i")},178:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("GFpt")},18:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("lTEL")},19:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("kYxP")},2:function(module,exports){module.exports=storybook_docs_dll},20:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("DZ+c")},21:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("aLgo")},211:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("+kY7")},213:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("5BYb")},216:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("5878")},219:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("m9LP")},22:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("cARO")},223:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("l1C2")},228:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("iKE+")},233:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("CUMQ")},24:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("z84I")},249:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("3voH")},257:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("cww3")},26:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("2G9S")},266:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("N4z3")},267:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("1Mu/")},27:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("hCOa")},28:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("KqXw")},297:function(module,exports){},298:function(module,exports){},3:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("1t7P")},30:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("UvmB")},33:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return story_helpers_createDocsObject})),__webpack_require__.d(__webpack_exports__,"b",(function(){return story_helpers_showActionNotification}));__webpack_require__(3),__webpack_require__(10),__webpack_require__(21),__webpack_require__(26),__webpack_require__(72),__webpack_require__(27),__webpack_require__(17),__webpack_require__(12),__webpack_require__(18),__webpack_require__(40),__webpack_require__(24),__webpack_require__(15),__webpack_require__(22),__webpack_require__(4),__webpack_require__(5),__webpack_require__(9),__webpack_require__(28),__webpack_require__(20),__webpack_require__(16),__webpack_require__(97),__webpack_require__(19),__webpack_require__(767),__webpack_require__(769),__webpack_require__(771);var blocks=__webpack_require__(39),utils=__webpack_require__(93),dist=__webpack_require__(53),lib_noty=__webpack_require__(360),lib_noty_default=__webpack_require__.n(lib_noty),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),DndProvider=__webpack_require__(787),esm=__webpack_require__(205);function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}var story_helpers_createDocsObject=function createDocsObject(params){var markdown=params.markdown;return{page:function page(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.Fragment,null,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(DndProvider.a,{backend:esm.a},story_helpers_parseMarkdown('<div class="unstable-warning">\n\n> **Stop right there!**\n>\n> You are reading the documentation for an **unreleased** 1.x\n> version of Chonky. The API described here can change - it will not be\n> frozen until the official 1.x release.\n>\n> If you need to use Chonky right now, use the 0.x version from the\n> [Documentation Index](https://timbokz.github.io/Chonky/).\n>\n> **Want to request a feature for 1.x or report a 1.x issue?** Post it in\n> [Chonky GitHub issues](https://github.com/TimboKZ/Chonky/issues).\n\n</div>\n'),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(blocks.Title,null),story_helpers_parseMarkdown(markdown),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(story_helpers_CustomPrimary,null),story_helpers_parseMarkdown("### A note about live examples...\n\nAll live examples are written in Typescript. All components and types are imported\nfrom the `chonky` package, e.g.:\n\n```ts\nimport 'chonky/style/main.css';\nimport { FileBrowser, FileToolbar, FileList, FileData } from 'chonky';\n```\n\nThe only exception is the `showActionNotification()` function, which calls\n[the Noty notification library](https://ned.im/noty/) (not packaged with Chonky). To\nrun the examples locally, you can replace `showActionNotification()` with\n`console.log()`.\n")))}}},story_helpers_CustomPrimary=function CustomPrimary(_ref){var story,name=_ref.name,context=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useContext)(blocks.DocsContext),componentStories=Object(utils.getDocsStories)(context);return componentStories&&(story=name?componentStories.find((function(s){return s.name===name})):componentStories[0]),story?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(blocks.DocsStory,_extends({},story,{expanded:!1})):null},story_helpers_parseMarkdown=function parseMarkdown(markdown){var _step,occurrences=[],_iterator=function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e2){throw _e2},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e3){didErr=!0,err=_e3},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}(getIndicesOf("```",markdown));try{for(_iterator.s();!(_step=_iterator.n()).done;){var index=_step.value,lineEnd=markdown.indexOf("\n",index),line=markdown.substring(index,lineEnd).trim(),opening_matches=/^```([a-z-]+)(\s+{.*?})?$/i.exec(line);if(opening_matches){var _opening_matches=_slicedToArray(opening_matches,3),language=_opening_matches[1],jsonConfig=_opening_matches[2];occurrences.push({type:"start",language:language,jsonConfig:jsonConfig,markdownEnd:index,codeStart:lineEnd+1})}else/^```$/i.exec(line)&&occurrences.push({type:"end",codeEnd:index,markdownStart:lineEnd+1})}}catch(err){_iterator.e(err)}finally{_iterator.f()}for(var components=[],markdownStart=0,i=0;i<occurrences.length-1;++i){var start=occurrences[i],end=occurrences[i+1];if("start"===start.type&&"end"===end.type){i+=1;var mdSlice=markdown.substring(markdownStart,start.markdownEnd),codeSlice=markdown.substring(start.codeStart,end.codeEnd);components.push(story_helpers_prepareMarkdownComp(i,mdSlice)),components.push(story_helpers_prepareCodeComp(i,start.language,codeSlice,start.jsonConfig)),markdownStart=end.markdownStart}}return components.push(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(blocks.Description,{key:"markdown-last",markdown:markdown.substring(markdownStart)})),components},story_helpers_prepareMarkdownComp=function prepareMarkdownComp(index,markdown){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(blocks.Description,{key:"md-".concat(index),markdown:markdown})};story_helpers_prepareMarkdownComp.displayName="prepareMarkdownComp";var story_helpers_prepareCodeComp=function prepareCodeComp(index,language,code,jsonConfig){var displayCode,key="code-".concat(2*index+1);return displayCode=jsonConfig?"Sorry, JSON config loading is currently not supported. "+"\nYour config: ".concat(jsonConfig):code,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(dist.Source,{key:key,language:language,code:displayCode})};story_helpers_prepareCodeComp.displayName="prepareCodeComp";var getIndicesOf=function getIndicesOf(needle,haystack){var index,searchStrLen=needle.length;if(0==searchStrLen)return[];for(var startIndex=0,indices=[];(index=haystack.indexOf(needle,startIndex))>-1;)indices.push(index),startIndex=index+searchStrLen;return indices},story_helpers_showActionNotification=function showActionNotification(params){var action=params.action,data=params.data,textParts=[];if(textParts.push("<b>Action:</b> ".concat(action.id)),data.target&&textParts.push("<b>Target:</b> <code>".concat(data.target.name,"</code>")),data.files){var fileComps=data.files.map((function(f){return f.name})).map((function(name){return"<code>".concat(name,"</code>")})),fileCount=fileComps.length,fileTitle="".concat(fileCount," ").concat(1===fileCount?"file":"files",":");textParts.push("<b>".concat(fileTitle,"</b> [").concat(fileComps.join(", "),"]"))}var text=textParts.join("<br/>");new lib_noty_default.a({text:text,type:"success",theme:"relax",timeout:3e3}).show()};try{story_helpers_createDocsObject.displayName="createDocsObject",story_helpers_createDocsObject.__docgenInfo={description:"",displayName:"createDocsObject",props:{markdown:{defaultValue:null,description:"",name:"markdown",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/story-helpers.tsx#createDocsObject"]={docgenInfo:story_helpers_createDocsObject.__docgenInfo,name:"createDocsObject",path:"stories/story-helpers.tsx#createDocsObject"})}catch(__react_docgen_typescript_loader_error){}try{story_helpers_CustomPrimary.displayName="CustomPrimary",story_helpers_CustomPrimary.__docgenInfo={description:"",displayName:"CustomPrimary",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/story-helpers.tsx#CustomPrimary"]={docgenInfo:story_helpers_CustomPrimary.__docgenInfo,name:"CustomPrimary",path:"stories/story-helpers.tsx#CustomPrimary"})}catch(__react_docgen_typescript_loader_error){}try{story_helpers_showActionNotification.displayName="showActionNotification",story_helpers_showActionNotification.__docgenInfo={description:"",displayName:"showActionNotification",props:{action:{defaultValue:null,description:"",name:"action",required:!0,type:{name:"FileAction"}},data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"FileActionData"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/story-helpers.tsx#showActionNotification"]={docgenInfo:story_helpers_showActionNotification.__docgenInfo,name:"showActionNotification",path:"stories/story-helpers.tsx#showActionNotification"})}catch(__react_docgen_typescript_loader_error){}},34:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("NyMY")},36:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("LW0h")},362:function(module,exports,__webpack_require__){__webpack_require__(363),__webpack_require__(388),__webpack_require__(389),__webpack_require__(429),__webpack_require__(558),__webpack_require__(597),__webpack_require__(609),__webpack_require__(611),__webpack_require__(616),module.exports=__webpack_require__(623)},364:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ARua")},37:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("aokA")},381:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("9JhN")},382:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("PjZX")},389:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(212)},395:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("JY+C")},399:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ZUdG")},4:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ho0z")},40:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("7xRU")},400:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("PuIx")},402:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("tQbP")},41:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("jwue")},413:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("dSaG")},414:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("hQin")},42:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("+oxZ")},43:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("lN5B")},432:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("LJ7e")},434:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("I2fK")},435:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("DY47")},441:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("3kp9")},445:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("/bc2")},446:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("/JuR")},447:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("+Bxv")},448:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("muFx")},449:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Wci6")},450:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("WoRU")},451:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("o3fS")},452:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("JmTi")},453:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("xaiR")},454:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("SlD/")},455:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Monn")},457:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("fmNP")},46:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("MvUL")},461:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("uFXj")},464:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("V0IW")},465:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("OCSl")},47:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("EgRP")},490:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("kA4r")},492:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Blm6")},493:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ssvU")},494:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("lZm3")},498:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Ee2X")},5:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("IAdD")},502:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("b2e3")},51:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("yH/f")},52:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Ysgh")},523:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("maj8")},547:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("H87J")},548:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("S3pA")},549:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("O1Sc")},55:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("KOtZ")},550:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("zF5n")},562:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("kvVz")},568:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("tJVe")},569:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("nuol")},57:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("A3UQ")},570:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("PjJO")},571:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("DpO5")},58:function(module,exports,__webpack_require__){var api=__webpack_require__(138),content=__webpack_require__(629);"string"==typeof(content=content.__esModule?content.default:content)&&(content=[[module.i,content,""]]);var options={insert:"head",singleton:!1};api(content,options);module.exports=content.locals||{}},590:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Kkar")},591:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("2q8g")},592:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("nDih")},6:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("aWzz")},60:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("HUCg")},61:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("Yct5")},616:function(module,exports,__webpack_require__){"use strict";__webpack_require__(3),__webpack_require__(36),__webpack_require__(41),__webpack_require__(47),__webpack_require__(30),__webpack_require__(617),__webpack_require__(619),__webpack_require__(7),__webpack_require__(42);var _clientApi=__webpack_require__(50),_clientLogger=__webpack_require__(38),_configFilename=__webpack_require__(622);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(_configFilename.args||_configFilename.argTypes)&&_clientLogger.logger.warn("Invalid args/argTypes in config, ignoring.",JSON.stringify({args:_configFilename.args,argTypes:_configFilename.argTypes})),_configFilename.decorators&&_configFilename.decorators.forEach((function(decorator){return(0,_clientApi.addDecorator)(decorator)})),(_configFilename.parameters||_configFilename.globalArgs||_configFilename.globalArgTypes)&&(0,_clientApi.addParameters)(_objectSpread(_objectSpread({},_configFilename.parameters),{},{globalArgs:_configFilename.globalArgs,globalArgTypes:_configFilename.globalArgTypes})),_configFilename.argTypesEnhancers&&_configFilename.argTypesEnhancers.forEach((function(enhancer){return(0,_clientApi.addArgTypesEnhancer)(enhancer)}))},618:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ct80")},620:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("oD4t")},621:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("2sZ7")},622:function(module,exports){},623:function(module,exports,__webpack_require__){"use strict";(function(module){var _framework=__webpack_require__(212);module._StorybookPreserveDecorators=!0,(0,_framework.configure)([__webpack_require__(624)],module)}).call(this,__webpack_require__(123)(module))},624:function(module,exports,__webpack_require__){var map={"./00-Welcome/01-Welcome.stories.mdx":625,"./00-Welcome/02-Features.stories.mdx":626,"./00-Welcome/03-Installation.stories.mdx":627,"./00-Welcome/04-Immutability.stories.mdx":628,"./01-File-Browser-basics/01-Component-hierarchy.stories.tsx":775,"./01-File-Browser-basics/02-Displaying-files.stories.tsx":776,"./01-File-Browser-basics/03-Specifying-folder.stories.tsx":777,"./01-File-Browser-basics/04-Actions.stories.tsx":778,"./01-File-Browser-basics/05-Custom-actions.stories.tsx":779,"./01-File-Browser-basics/06-Thumbnails.stories.tsx":780,"./01-File-Browser-basics/07-Drag-n-drop.stories.tsx":781,"./02-File-Browser-advanced/01-Invalid-props.stories.tsx":782,"./02-File-Browser-advanced/02-Virtualization.stories.tsx":783,"./02-File-Browser-advanced/03-Disable-default-actions.stories.tsx":784,"./03-API-Reference/02-Built-in-actions.stories.mdx":773};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=624},625:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(3),__webpack_require__(17),__webpack_require__(5),__webpack_require__(7),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(39),_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(68);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Meta=function makeShortcode(name){return function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",props)}}("Meta"),layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(Meta,{title:"0 Chonky Overview|Introduction",mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__.a,{mdxType:"ChonkyHeader"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"introduction"},"Introduction"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("strong",{parentName:"p"},"Chonky is a file browser component for React.")," It tries to recreate the native file\nbrowsing experience in your browser. Chonky supports drag & drop, file selection,\nimage thumbnails, and much more!"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"p"},{href:"https://github.com/TimboKZ/Chonky",target:"_blank",rel:"nofollow noopener noreferrer"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("strong",{parentName:"a"},"View on Github"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"philosophy"},"Philosophy"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Please read this section to understand what Chonky is and is not."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h3",{id:"1-chonky-is-the-presentation-layer"},"1. Chonky is the presentation layer."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Chonky takes a list of files and shows them to the user. It does not and should not\nknow where the files came from, nor should it now how file operations are carried out."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h3",{id:"2-chonky-is-filesystem-agnostic"},"2. Chonky is filesystem-agnostic."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Chonky tries to stay ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("strong",{parentName:"p"},"unopinionated")," when it comes to interactions with the file\nsystem (FS)."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h3",{id:"3-developing-file-browsers-is-hard-each-use-case-is-unique"},"3. Developing file browsers is hard. Each use case is unique."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"At the same time, Chonky tries to cover all possible interactions with the user. This includes support for keyboard\nnavigation and common keyboard shortcuts, support for file selections, drag & drop, different file views, and much more."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null)," ")}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"0 Chonky Overview|Introduction",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},626:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(3),__webpack_require__(17),__webpack_require__(5),__webpack_require__(7),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(39),_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(68);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Meta=function makeShortcode(name){return function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",props)}}("Meta"),layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(Meta,{title:"0 Chonky Overview|Chonky features",mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__.a,{mdxType:"ChonkyHeader"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"chonky-features"},"Chonky features:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("blockquote",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",{parentName:"blockquote"},"Want to request a feature? Post a feature request in Chonky's\n",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"p"},{href:"https://github.com/TimboKZ/Chonky/issues",target:"_blank",rel:"nofollow noopener noreferrer"}),"GitHub issues"),".")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("ul",{className:"contains-task-list"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Backend-agnostic - files can come from any source (remote server, S3, virtual FS)."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports text search."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports drag & drop."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports image thumbnails."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","Supports keyboard shortcuts."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports common and custom file actions."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","Supports ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("em",{parentName:"li"},"detailed list")," and ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("em",{parentName:"li"},"thumbnails")," views."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Provides unique icons for each file extension."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports file selections (excluding drag selection, ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("em",{parentName:"li"},"for now"),")."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Supports loading animations and async thumbnail generation."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",_extends({parentName:"ul"},{className:"task-list-item"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("input",_extends({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ","Performs well with large file collections thanks to\n",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"li"},{href:"https://github.com/bvaughn/react-virtualized",target:"_blank",rel:"nofollow noopener noreferrer"}),"virtualization"),".")))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"0 Chonky Overview|Chonky features",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},627:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(3),__webpack_require__(17),__webpack_require__(5),__webpack_require__(7),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(39),_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(68);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Meta=function makeShortcode(name){return function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",props)}}("Meta"),layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(Meta,{title:"0 Chonky Overview|Installation & usage",mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__.a,{mdxType:"ChonkyHeader"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"installation"},"Installation"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Add Chonky to your NPM project:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("code",_extends({parentName:"pre"},{className:"language-shell"}),"npm install chonky\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Then, import relevant components and styles:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("code",_extends({parentName:"pre"},{className:"language-js"}),"import 'chonky/style/main.css';\nimport { FileBrowser, FileList } from 'chonky';\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"And you're good to go! Check other sections in the documentation to see how Chonky\ncomponents can be used."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h3",{id:"usage-with-typescript"},"Usage with Typescript"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Chonky was built using Typescript. As such, many of the internal types and interfaces\nare exported. Some types are generic, to make it easier for you to integrate Chonky\ninto you Typescript package."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"If you're also using Typescript, you can add Chonky types to your project using\nstandard\nimports:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("code",_extends({parentName:"pre"},{className:"language-ts"}),"// FileArray is a TS type\nimport { FileArray } from 'chonky';\n\nconst myFiles: FileArray = [\n    {\n        id: 'abD3',\n        name: 'README.txt',\n    },\n    null,\n];\n")))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"0 Chonky Overview|Installation & usage",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},628:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(3),__webpack_require__(17),__webpack_require__(5),__webpack_require__(7),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(39),_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(68);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Meta=function makeShortcode(name){return function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",props)}}("Meta"),layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(Meta,{title:"0 Chonky Overview|Immutability",mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_Chonky_header_mdx__WEBPACK_IMPORTED_MODULE_7__.a,{mdxType:"ChonkyHeader"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"immutability-in-chonky"},"Immutability in Chonky"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"TODO explain:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"Chonky assumes data is immutable to be performant."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"Link to Redux docs."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("li",{parentName:"ul"},"Examples of common beginner problems?")))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"0 Chonky Overview|Immutability",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},629:function(module,exports,__webpack_require__){(exports=__webpack_require__(139)(!1)).push([module.i,'.chonky-fill-parent {\n  height: 100%;\n}\n\n.chonky-no-select {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n.chonky-root {\n  border: solid 1px #e4e4e4;\n  border-radius: 4px;\n  padding: 7.5px;\n  touch-action: manipulation;\n  font-size: 15px;\n  font-family: sans-serif;\n  flex-direction: column;\n  position: relative;\n  display: flex;\n  height: 100%;\n}\n\n.chonky-error {\n  border: solid 1px rgba(108, 72, 72, 0.11);\n  margin-bottom: 7.5px;\n  border-radius: 4px;\n  background-color: #fdebeb;\n  font-family: sans-serif;\n  color: #8e2121;\n  padding: 1em;\n}\n.chonky-error-name {\n  opacity: 0.5;\n}\n.chonky-error ul {\n  padding-top: 0.1em;\n  margin: 0;\n}\n.chonky-error li {\n  margin-top: 0.5em;\n}\n\n.chonky-tooltip {\n  position: relative;\n}\n.chonky-tooltip:hover::before, .chonky-tooltip:hover::after, .chonky-tooltip:focus::before, .chonky-tooltip:focus::after, .chonky-tooltip:active::before, .chonky-tooltip:active::after {\n  display: block;\n  opacity: 1;\n}\n.chonky-tooltip::before, .chonky-tooltip::after {\n  transition: opacity 100ms ease-in-out;\n  pointer-events: none;\n  position: absolute;\n  display: none;\n  z-index: 9999;\n  bottom: 100%;\n  opacity: 0;\n  left: 50%;\n}\n.chonky-tooltip::before {\n  transform: translateX(-75%);\n  background-color: rgba(0, 0, 0, 0.8);\n  border-radius: 2px;\n  content: attr(data-tooltip);\n  padding: 0.4em 0.5em;\n  white-space: nowrap;\n  margin-bottom: 6px;\n  line-height: 1em;\n  color: #fff;\n  font-size: 0.8em;\n  height: 1em;\n}\n.chonky-tooltip::after {\n  transform: translateX(-50%) rotate(45deg);\n  border: solid 2px rgba(0, 0, 0, 0.8);\n  border-left-color: transparent;\n  border-top-color: transparent;\n  margin-bottom: 4px;\n  content: "";\n}\n\n.chonky-text-placeholder {\n  -webkit-animation: loading-placeholder 1.5s infinite linear;\n  animation: loading-placeholder 1.5s infinite linear;\n  background-color: #ccc;\n  white-space: nowrap;\n  border-radius: 4px;\n  overflow: hidden;\n  min-width: 20px;\n  max-width: 40%;\n}\n@-webkit-keyframes loading-placeholder {\n  0% {\n    opacity: 0.2;\n  }\n  50% {\n    opacity: 0.4;\n  }\n  100% {\n    opacity: 0.2;\n  }\n}\n@keyframes loading-placeholder {\n  0% {\n    opacity: 0.2;\n  }\n  50% {\n    opacity: 0.4;\n  }\n  100% {\n    opacity: 0.2;\n  }\n}\n\n.chonky-toolbar {\n  justify-content: space-between;\n  flex-wrap: wrap-reverse;\n  flex-direction: row;\n  display: flex;\n}\n.chonky-toolbar-side {\n  margin-bottom: 7.5px;\n  flex-direction: row;\n  padding-bottom: 0;\n  display: flex;\n  flex-grow: 1;\n}\n.chonky-toolbar-side-left {\n  flex-grow: 10000;\n}\n.chonky-toolbar-side-right {\n  justify-content: space-between;\n}\n.chonky-toolbar-side-inside {\n  flex-direction: row;\n  display: flex;\n}\n.chonky-toolbar-side-inside > * {\n  vertical-align: middle;\n  display: inline-block;\n}\n@media screen and (max-width: 400px) {\n  .chonky-toolbar {\n    flex-direction: column-reverse;\n  }\n  .chonky-side-right {\n    justify-content: space-between;\n  }\n}\n.chonky-folder-chain-entry, .chonky-folder-chain-separator {\n  vertical-align: middle;\n  display: inline-block;\n}\n.chonky-folder-chain-entry {\n  background: none;\n  cursor: pointer;\n  color: inherit;\n  font: inherit;\n  border: none;\n  padding: 0;\n  transition: background-color 100ms ease-in-out;\n  border-radius: 4px;\n  border: solid 1px transparent;\n  line-height: 28px;\n  padding: 0 0.3em !important;\n  height: 28px;\n  box-sizing: border-box;\n}\n@media screen and (max-width: 400px) {\n  .chonky-folder-chain-entry {\n    line-height: 1.7em;\n    height: 1.7em;\n  }\n}\n.chonky-folder-chain-entry:last-child .chonky-folder-chain-entry-name {\n  -webkit-text-decoration: underline #bbb;\n          text-decoration: underline #bbb;\n}\n.chonky-folder-chain-entry.chonky-loading {\n  font-style: italic;\n  color: #bbb;\n}\ndiv.chonky-folder-chain-entry {\n  cursor: default;\n}\n\nbutton.chonky-folder-chain-entry:hover {\n  background-color: #f5f5f5;\n}\nbutton.chonky-folder-chain-entry:active {\n  border-color: #ccc;\n}\n\n.chonky-folder-chain-separator {\n  line-height: 28px;\n  height: 28px;\n  color: #bbb;\n  padding: 0 0.1em;\n}\n@media screen and (max-width: 400px) {\n  .chonky-folder-chain-separator {\n    line-height: 1.7em;\n    height: 1.7em;\n    padding: 0 0.1em;\n  }\n}\n\n.chonky-toolbar-button-group .chonky-toolbar-button {\n  border-radius: 0;\n}\n.chonky-toolbar-button-group .chonky-toolbar-button:first-of-type {\n  border-bottom-left-radius: 4px;\n  border-top-left-radius: 4px;\n}\n.chonky-toolbar-button-group .chonky-toolbar-button:last-of-type {\n  border-bottom-right-radius: 4px;\n  border-top-right-radius: 4px;\n}\n.chonky-toolbar-button-group .chonky-toolbar-button:focus {\n  z-index: 15;\n}\n.chonky-toolbar-button-group .chonky-toolbar-button:not(:first-child) {\n  margin-left: -1px;\n}\n\n.chonky-toolbar-button {\n  transition: background-color 100ms ease-in-out;\n  background: none;\n  cursor: pointer;\n  color: inherit;\n  font: inherit;\n  border: none;\n  padding: 0;\n  line-height: 26px;\n  border-radius: 4px;\n  border: solid 1px transparent;\n  min-width: 28px;\n  height: 28px;\n  vertical-align: middle;\n  box-sizing: border-box;\n  flex-direction: row;\n  text-align: center;\n  position: relative;\n  z-index: 10;\n}\n.chonky-toolbar-button-icon, .chonky-toolbar-button-text {\n  display: inline-block;\n}\n.chonky-toolbar-button-icon {\n  min-width: 28px;\n}\n.chonky-toolbar-button-text {\n  padding-right: 10px;\n  padding-left: 10px;\n}\n.chonky-toolbar-button-icon + .chonky-toolbar-button-text {\n  padding-left: 0 !important;\n}\n.chonky-toolbar-button-text + .chonky-toolbar-button-icon {\n  margin-left: -10px !important;\n}\n@media screen and (max-width: 400px) {\n  .chonky-toolbar-button {\n    line-height: 1.7em;\n    min-width: 1.7em;\n    height: 1.7em;\n  }\n  .chonky-toolbar-button-icon {\n    min-width: 1.7em;\n  }\n}\n.chonky-toolbar-button.chonky-active {\n  color: #09f;\n  z-index: 93;\n}\n.chonky-toolbar-button:hover {\n  background-color: #f5f5f5;\n  z-index: 92;\n}\n.chonky-toolbar-button:active {\n  border-color: #ccc;\n}\n.chonky-toolbar-button > span {\n  padding: 6px;\n  border-color: #ccc;\n  white-space: nowrap;\n}\n.chonky-toolbar-button[disabled] {\n  color: #bbb !important;\n  pointer-events: none;\n}\n\n.chonky-toolbar-dropdown {\n  position: relative;\n}\n.chonky-toolbar-dropdown .chonky-toolbar-button-icon {\n  font-size: 0.8em;\n}\n.chonky-toolbar-dropdown-content {\n  margin-top: 2.5px;\n  border: solid 1px #ccc;\n  border-radius: 4px;\n  background-color: #fff;\n  flex-direction: column;\n  position: absolute;\n  display: flex;\n  z-index: 70;\n  right: 0;\n}\n.chonky-toolbar-dropdown-button {\n  transition: background-color 100ms ease-in-out;\n  background: none;\n  cursor: pointer;\n  color: inherit;\n  font: inherit;\n  border: none;\n  padding: 0;\n  line-height: 29.9px;\n  border-bottom: solid 1px #ccc;\n  height: 32.2px;\n  white-space: nowrap;\n  text-align: left;\n  display: flex;\n}\n.chonky-toolbar-dropdown-button-icon {\n  padding-left: 7.5px;\n  opacity: 0.5;\n}\n.chonky-toolbar-dropdown-button-text {\n  padding-right: 7.5px;\n  padding-left: 7.5px;\n}\n.chonky-toolbar-dropdown-button[disabled] {\n  color: #bbb !important;\n  pointer-events: none;\n}\n.chonky-toolbar-dropdown-button:hover {\n  background-color: #f5f5f5;\n}\n\n.chonky-file-search {\n  transition: height 100ms ease-in-out;\n  margin-bottom: 7.5px;\n  margin-top: -7.5px;\n  height: 28px;\n  opacity: 1;\n}\n.chonky-file-search-hidden {\n  height: 0 !important;\n  opacity: 0 !important;\n}\n\n.chonky-file-search-input-group label,\n.chonky-file-search-input-group input {\n  line-height: 26px;\n  height: 28px;\n  box-sizing: border-box;\n  display: inline-block;\n  vertical-align: top;\n  font-size: inherit;\n  padding: 0;\n  margin: 0;\n}\n.chonky-file-search-input-group label {\n  background-color: transparent;\n  padding: 0 5px;\n  color: #666;\n  margin: 1px 0 0 2px;\n  border-right: none;\n  position: absolute;\n}\n.chonky-file-search-input-group input {\n  padding-left: 30px;\n  border: solid 1px #e4e4e4;\n  border-radius: 4px;\n  padding-right: 5px;\n}\n.chonky-file-search-input-group-loading {\n  line-height: 30.8px;\n  height: 28px;\n  width: 28px;\n  box-sizing: border-box;\n  display: inline-block;\n  text-align: center;\n  color: #bbb;\n}\n\n.chonky-file-list {\n  flex: 1 1;\n}\n.chonky-file-list-notification {\n  text-align: center;\n  position: relative;\n}\n.chonky-file-list-notification-empty {\n  color: #bbb;\n  font-size: 1.2em;\n}\n.chonky-file-list-notification-content {\n  transform: translateX(-50%) translateY(-50%);\n  position: absolute;\n  left: 50%;\n  top: 50%;\n}\n\n.chonky-file-entry-clickable-wrapper {\n  outline: none !important;\n  position: relative;\n}\n.chonky-file-entry-clickable-wrapper:focus .chonky-file-entry-inside:before {\n  box-shadow: inset 0 0 0 2px #000 !important;\n}\n.chonky-file-entry-clickable-wrapper:focus .chonky-file-entry-description {\n  border-top-color: #000 !important;\n}\n.chonky-file-entry-clickable-wrapper:focus .chonky-file-icon-inside {\n  color: #000;\n}\n\n.chonky-file-drag-preview {\n  padding: 7.5px 10px;\n  box-shadow: 2px 2px 5px #888;\n  border-radius: 2px;\n  border: solid 2px #09f;\n  background-color: #f5f5f5;\n  display: inline-block;\n}\n\n.chonky-file-entry {\n  border: solid 1px #e4e4e4;\n  border-radius: 2px;\n  box-sizing: border-box;\n  overflow: hidden;\n  height: 100%;\n}\n.chonky-file-entry-inside {\n  box-sizing: border-box;\n  flex-direction: column;\n  display: flex;\n  height: 100%;\n}\n.chonky-file-entry-inside:before {\n  border-radius: 4px;\n  position: absolute;\n  display: block;\n  z-index: 999;\n  content: "";\n  bottom: 0;\n  right: 0;\n  left: 0;\n  top: 0;\n}\n.chonky-file-entry-dnd-indicator {\n  box-sizing: border-box;\n  position: absolute;\n  font-size: 1.2em;\n  opacity: 0.6;\n  padding: 6px;\n  z-index: 80;\n  left: 1px;\n  top: 1px;\n}\n.chonky-file-entry-dnd-indicator:before {\n  border-bottom: 50px solid transparent;\n  border-left: 50px solid #fff;\n  position: absolute;\n  content: "";\n  z-index: -1;\n  height: 0;\n  width: 0;\n  left: 0;\n  top: 0;\n}\n.chonky-file-entry-preview {\n  background-color: #fff;\n  position: relative;\n  overflow: hidden;\n  flex-grow: 1;\n}\n.chonky-file-entry-description {\n  border-top: solid 2px transparent;\n  background-color: #fff;\n  font-size: 14px;\n  padding: 3px 5px 5px 5px;\n}\n.chonky-file-entry-selected .chonky-file-entry-inside:before {\n  box-shadow: inset 0 0 0 2px #33adff !important;\n}\n.chonky-file-entry-selected .chonky-file-entry-description {\n  border-top-color: #33adff !important;\n}\n.chonky-file-entry-selected .chonky-file-selection {\n  opacity: 1 !important;\n}\n.chonky-file-entry-dragging .chonky-file-background {\n  opacity: 0.3 !important;\n}\n.chonky-file-entry-drop-hovered .chonky-file-background {\n  opacity: 1 !important;\n}\n\n.chonky-file-icon, .chonky-file-selection, .chonky-file-thumbnail, .chonky-file-background {\n  position: absolute;\n  display: block;\n  height: 100%;\n  width: 100%;\n  left: 0;\n  top: 0;\n}\n.chonky-file-icon {\n  z-index: 40;\n}\n.chonky-file-icon-inside {\n  transform: translateX(-50%) translateY(-50%);\n  text-align: center;\n  position: absolute;\n  font-size: 2.2em;\n  display: block;\n  color: #fff;\n  left: 50%;\n  top: 50%;\n}\n.chonky-file-selection {\n  z-index: 30;\n  background: repeating-linear-gradient(45deg, rgba(0, 153, 255, 0.14), rgba(0, 153, 255, 0.14) 10px, rgba(0, 153, 255, 0.2) 10px, rgba(0, 153, 255, 0.2) 20px);\n  background-color: rgba(0, 153, 255, 0.14);\n  opacity: 0;\n}\n.chonky-file-thumbnail {\n  z-index: 20;\n  transition: opacity 100ms ease-in-out;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: contain;\n  opacity: 1;\n}\n.chonky-file-thumbnail-hidden {\n  opacity: 0;\n}\n.chonky-file-background {\n  z-index: 10;\n  transition: opacity 100ms ease-in-out;\n  opacity: 0.5;\n}\n',""]),module.exports=exports},63:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("jQ3i")},64:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("1Iuc")},65:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("fRV1")},68:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return MDXContent}));__webpack_require__(3),__webpack_require__(17),__webpack_require__(5),__webpack_require__(7),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",{style:{textAlign:"center"}},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{src:"./Chonky_clear.png",alt:"Chonky logo",style:{width:500}}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",{href:"https://www.npmjs.com/package/chonky",target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{alt:"NPM package",src:"https://img.shields.io/npm/v/chonky.svg"})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",{href:"https://tldrlegal.com/license/mit-license",style:{marginLeft:5},target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{alt:"MIT license",src:"https://img.shields.io/npm/l/chonky"})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",{href:"https://www.npmjs.com/package/chonky",style:{marginLeft:5},target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{alt:"NPM downloads",src:"https://img.shields.io/npm/dt/chonky"})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",{href:"https://github.com/TimboKZ/Chonky",style:{marginLeft:5},target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{alt:"GitHub stars",src:"https://img.shields.io/github/stars/TimboKZ/Chonky"})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",{href:"https://discord.gg/4HJaFn9",style:{marginLeft:5},target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("img",{alt:"Chat on Discord",src:"https://img.shields.io/discord/696033621986770957?label=Chat%20on%20Discord"})),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("br",null)),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",{class:"unstable-warning"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("blockquote",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",{parentName:"blockquote"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("strong",{parentName:"p"},"Stop right there!")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",{parentName:"blockquote"},"You are reading the documentation for an ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("strong",{parentName:"p"},"unreleased")," 1.x\nversion of Chonky. The API described here can change - it will not be\nfrozen until the official 1.x release."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",{parentName:"blockquote"},"If you need to use Chonky right now, use the 0.x version from the\n",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"p"},{href:"https://timbokz.github.io/Chonky/",target:"_blank",rel:"nofollow noopener noreferrer"}),"Documentation Index"),"."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",{parentName:"blockquote"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("strong",{parentName:"p"},"Want to request a feature for 1.x or report a 1.x issue?")," Post it in\n",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("a",_extends({parentName:"p"},{href:"https://github.com/TimboKZ/Chonky/issues",target:"_blank",rel:"nofollow noopener noreferrer"}),"Chonky GitHub issues"),"."))))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0},7:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("+KXO")},71:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("WNMA")},72:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("hBpG")},73:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ZVkB")},74:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("x4t0")},75:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("y2Ah")},76:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("LJOr")},761:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("i7Kn")},764:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("mPOS")},765:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("f4p7")},766:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("znGZ")},771:function(module,exports,__webpack_require__){var api=__webpack_require__(138),content=__webpack_require__(772);"string"==typeof(content=content.__esModule?content.default:content)&&(content=[[module.i,content,""]]);var options={insert:"head",singleton:!1};api(content,options);module.exports=content.locals||{}},772:function(module,exports,__webpack_require__){(exports=__webpack_require__(139)(!1)).push([module.i,'.sbdocs-content .sbdocs-p, .sbdocs-content .sbdocs-p *,\n.sbdocs-content .sbdocs-ul,\n.sbdocs-content .sbdocs-ul *,\n.sbdocs-content .sbdocs-ol,\n.sbdocs-content .sbdocs-ol * {\n  line-height: 25px !important;\n  font-size: 17px !important;\n}\n.sbdocs-content .sbdocs-p code,\n.sbdocs-content .sbdocs-ul code,\n.sbdocs-content .sbdocs-ol code {\n  padding: 0 5px !important;\n  font-size: 14px !important;\n}\n.sbdocs-content .sbdocs-h2 {\n  margin-top: 40px !important;\n}\n\n.sbdocs-preview {\n  border: solid 3px #09f !important;\n  margin: 50px 0 40px 0 !important;\n  border-radius: 3px !important;\n  position: relative !important;\n  overflow: visible !important;\n}\n.sbdocs-preview:before {\n  border-top-right-radius: 3px;\n  border-top-left-radius: 3px;\n  font-family: sans-serif;\n  content: "Live Example";\n  background-color: #09f;\n  position: absolute;\n  margin-left: -3px;\n  margin-top: -25px;\n  font-weight: bold;\n  line-height: 25px;\n  font-size: 14px;\n  padding: 0 8px;\n  display: block;\n  height: 25px;\n  color: #fff;\n}\n.sbdocs-preview > div:first-child > div:first-child {\n  padding: 10px 10px 30px 10px !important;\n  margin: 0 !important;\n  overflow: visible !important;\n}\n\n.noty_bar {\n  line-height: 24px;\n}\n.noty_bar code {\n  background-color: rgba(255, 255, 255, 0.7);\n  display: inline-block;\n  border-radius: 4px;\n  line-height: 20px;\n  padding: 0 4px;\n}\n\n.unstable-warning blockquote {\n  background-color: #fde0e0;\n  border-color: #9e0808;\n  margin-bottom: 40px;\n  padding: 20px 30px;\n}\n\n.live-example-action {\n  font-family: sans-serif !important;\n  font-size: 1.2em !important;\n  margin-bottom: 16px;\n  text-align: center;\n  color: #5f0707;\n}\n',""]),module.exports=exports},773:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(3),__webpack_require__(17),__webpack_require__(5),__webpack_require__(7),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(1),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(39);__webpack_require__(68);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Meta=function makeShortcode(name){return function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("div",props)}}("Meta"),layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(Meta,{title:"3 API Reference|Built-in file actions",mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h1",{id:"built-in-file-actions"},"Built-in file actions"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,"Explain ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"p"},"ChonkyActions")," map."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h2",{id:"how-to-use-file-actions"},"How to use file actions"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h2",{id:"list-of-built-in-file-actions"},"List of built-in file actions"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("h3",{id:"openfiles"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"h3"},"OpenFiles")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"p"},"data.files")," will always be set, but ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"p"},"data.target")," can sometimes be undefined. For\nexample, when the user clicks ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)("inlineCode",{parentName:"p"},"Actions -> Open selection"),", target will be undefined."))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"3 API Reference|Built-in file actions",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_6__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},775:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ComponentHierarchyExample",(function(){return _01_Component_hierarchy_stories_ComponentHierarchyExample}));__webpack_require__(30),__webpack_require__(58);var _parameters,src=__webpack_require__(14),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"1 File Browser basics|Component hierarchy",parameters:(_parameters={storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import \'chonky/style/main.css\';\\n\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileSearch,\\n    FileToolbar\\n} from \'chonky\';\\nimport React from \'react\';\\n\\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./01-Component-hierarchy.md\';\\n\\n\\nexport default {\\n    title: \'1 File Browser basics|Component hierarchy\',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ComponentHierarchyExample = () => {\\n    const folderChain = [{ id: \'xASw\', name: \'Chonky Demo Folder\', isDir: true }];\\n    const files = [{ id: \'bEfX\', name: \'Demo.ts\' }];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"component-hierarchy-example":{"startLoc":{"col":41,"line":26},"endLoc":{"col":1,"line":48},"startBody":{"col":41,"line":26},"endBody":{"col":1,"line":48}}};\n    \nimport \'chonky/style/main.css\';\n\nimport {\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileSearch,\n    FileToolbar\n} from \'chonky\';\nimport React from \'react\';\n\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\n// @ts-ignore\n\nimport markdown from \'./01-Component-hierarchy.md\';\n\n\nexport default {\n    title: \'1 File Browser basics|Component hierarchy\',\n    parameters: {"storySource":{"source":"import \'chonky/style/main.css\';\\n\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileSearch,\\n    FileToolbar\\n} from \'chonky\';\\nimport React from \'react\';\\n\\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./01-Component-hierarchy.md\';\\n\\n\\nexport default {\\n    title: \'1 File Browser basics|Component hierarchy\',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ComponentHierarchyExample = () => {\\n    const folderChain = [{ id: \'xASw\', name: \'Chonky Demo Folder\', isDir: true }];\\n    const files = [{ id: \'bEfX\', name: \'Demo.ts\' }];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n","locationsMap":{"component-hierarchy-example":{"startLoc":{"col":41,"line":26},"endLoc":{"col":1,"line":48},"startBody":{"col":41,"line":26},"endBody":{"col":1,"line":48}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ComponentHierarchyExample = () => {\n    const folderChain = [{ id: \'xASw\', name: \'Chonky Demo Folder\', isDir: true }];\n    const files = [{ id: \'bEfX\', name: \'Demo.ts\' }];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n',locationsMap:{"component-hierarchy-example":{startLoc:{col:41,line:34},endLoc:{col:1,line:56},startBody:{col:41,line:34},endBody:{col:1,line:56}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileSearch,\n    FileToolbar\n} from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './01-Component-hierarchy.md';\n\n\nexport default {\n    title: '1 File Browser basics|Component hierarchy',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ComponentHierarchyExample = () => {\n    const folderChain = [{ id: 'xASw', name: 'Chonky Demo Folder', isDir: true }];\n    const files = [{ id: 'bEfX', name: 'Demo.ts' }];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"component-hierarchy-example":{startLoc:{col:41,line:26},endLoc:{col:1,line:48},startBody:{col:41,line:26},endBody:{col:1,line:48}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"Chonky includes several major components - `FileBrowser`, `FileList`, `FileToolbar`,\nand some others.\n\n`FileBrowser` is the most important component. In your code, it should wrap\nall other Chonky components:\n\n```tsx\n<FileBrowser files={[]}>\n    <FileToolbar />\n    <FileSearch />\n    <FileList />\n</FileBrowser>\n```\n\nThis is because `FileBrowser` is responsible for providing the configuration and\nrelevant React contexts to all the children Chonky components. It also the component\nthat you will be passing all of your props too.\n\n`FileBrowser` is also the only required component - all others, such as `FileList`,\nare optional. For example, if you're only interested in displaying files, but don't\nneed to the toolbar, you could use the following hierarchy:\n\n```tsx\n<FileBrowser files={[]}>\n    <FileList />\n</FileBrowser>\n```\n\nOr, if you're a power user, and you want to use a custom implementation of the file\nlist by consuming Chonky's React contexts directly, you could use something like:\n\n```tsx\n<FileBrowser files={[]}>\n    <FileToolbar />\n    <FileSearch />\n    <MyCustomFileList />\n</FileBrowser>\n```\n"})),_parameters)};var _01_Component_hierarchy_stories_ComponentHierarchyExample=function ComponentHierarchyExample(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[{id:"bEfX",name:"Demo.ts"}],folderChain:[{id:"xASw",name:"Chonky Demo Folder",isDir:!0}],onFileAction:function handleFileAction(action,data){Object(story_helpers.b)({action:action,data:data})},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null)))};_01_Component_hierarchy_stories_ComponentHierarchyExample.displayName="ComponentHierarchyExample"},776:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"FilesArrayExample",(function(){return _02_Displaying_files_stories_FilesArrayExample}));__webpack_require__(22),__webpack_require__(30),__webpack_require__(58);var _parameters,src=__webpack_require__(14),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"1 File Browser basics|Displaying files",parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileArray,\\n    FileBrowser,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './02-Displaying-files.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Displaying files',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const FilesArrayExample = () => {\\n    const files: FileArray = [\\n        null, // Loading animation will be shown for this file\\n        null,\\n        {\\n            id: 'nTe',\\n            name: 'Normal file.yaml',\\n            isDir: false,\\n            isHidden: true,\\n            size: 890,\\n        },\\n        {\\n            id: 'zxc',\\n            name: 'Hidden file.mp4',\\n            isDir: false,\\n            isHidden: true,\\n            size: 890,\\n        },\\n        {\\n            id: 'bnm',\\n            name: 'Normal folder',\\n            isDir: true,\\n            childrenIds: ['random-id-1', 'random-id-2'],\\n        },\\n        {\\n            id: 'vfr',\\n            name: 'Symlink folder',\\n            isDir: true,\\n            isSymlink: true,\\n        },\\n        {\\n            id: 'qwe',\\n            name: 'Not selectable.tar.gz',\\n            ext: '.tar.gz', // Custom extension\\n            selectable: false, // Disable selection\\n            size: 54300000000,\\n            modDate: new Date(),\\n        },\\n        {\\n            id: 'rty',\\n            name: 'Not openable.pem',\\n            openable: false, // Prevent opening\\n            size: 100000000,\\n        },\\n        {\\n            id: 'btj',\\n            name: 'Not draggable.csv',\\n            draggable: false, // Prevent this files from being dragged\\n        },\\n        {\\n            id: 'upq',\\n            name: 'Not droppable',\\n            isDir: true,\\n            droppable: false, // Prevent files from being dropped into this folder\\n        },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"files-array-example\":{\"startLoc\":{\"col\":33,\"line\":27},\"endLoc\":{\"col\":1,\"line\":101},\"startBody\":{\"col\":33,\"line\":27},\"endBody\":{\"col\":1,\"line\":101}}};\n    \nimport 'chonky/style/main.css';\n\nimport {\n    FileAction,\n    FileActionData,\n    FileArray,\n    FileBrowser,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './02-Displaying-files.md';\n\n\nexport default {\n    title: '1 File Browser basics|Displaying files',\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileArray,\\n    FileBrowser,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './02-Displaying-files.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Displaying files',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const FilesArrayExample = () => {\\n    const files: FileArray = [\\n        null, // Loading animation will be shown for this file\\n        null,\\n        {\\n            id: 'nTe',\\n            name: 'Normal file.yaml',\\n            isDir: false,\\n            isHidden: true,\\n            size: 890,\\n        },\\n        {\\n            id: 'zxc',\\n            name: 'Hidden file.mp4',\\n            isDir: false,\\n            isHidden: true,\\n            size: 890,\\n        },\\n        {\\n            id: 'bnm',\\n            name: 'Normal folder',\\n            isDir: true,\\n            childrenIds: ['random-id-1', 'random-id-2'],\\n        },\\n        {\\n            id: 'vfr',\\n            name: 'Symlink folder',\\n            isDir: true,\\n            isSymlink: true,\\n        },\\n        {\\n            id: 'qwe',\\n            name: 'Not selectable.tar.gz',\\n            ext: '.tar.gz', // Custom extension\\n            selectable: false, // Disable selection\\n            size: 54300000000,\\n            modDate: new Date(),\\n        },\\n        {\\n            id: 'rty',\\n            name: 'Not openable.pem',\\n            openable: false, // Prevent opening\\n            size: 100000000,\\n        },\\n        {\\n            id: 'btj',\\n            name: 'Not draggable.csv',\\n            draggable: false, // Prevent this files from being dragged\\n        },\\n        {\\n            id: 'upq',\\n            name: 'Not droppable',\\n            isDir: true,\\n            droppable: false, // Prevent files from being dropped into this folder\\n        },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"files-array-example\":{\"startLoc\":{\"col\":33,\"line\":27},\"endLoc\":{\"col\":1,\"line\":101},\"startBody\":{\"col\":33,\"line\":27},\"endBody\":{\"col\":1,\"line\":101}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const FilesArrayExample = () => {\n    const files: FileArray = [\n        null, // Loading animation will be shown for this file\n        null,\n        {\n            id: 'nTe',\n            name: 'Normal file.yaml',\n            isDir: false,\n            isHidden: true,\n            size: 890,\n        },\n        {\n            id: 'zxc',\n            name: 'Hidden file.mp4',\n            isDir: false,\n            isHidden: true,\n            size: 890,\n        },\n        {\n            id: 'bnm',\n            name: 'Normal folder',\n            isDir: true,\n            childrenIds: ['random-id-1', 'random-id-2'],\n        },\n        {\n            id: 'vfr',\n            name: 'Symlink folder',\n            isDir: true,\n            isSymlink: true,\n        },\n        {\n            id: 'qwe',\n            name: 'Not selectable.tar.gz',\n            ext: '.tar.gz', // Custom extension\n            selectable: false, // Disable selection\n            size: 54300000000,\n            modDate: new Date(),\n        },\n        {\n            id: 'rty',\n            name: 'Not openable.pem',\n            openable: false, // Prevent opening\n            size: 100000000,\n        },\n        {\n            id: 'btj',\n            name: 'Not draggable.csv',\n            draggable: false, // Prevent this files from being dragged\n        },\n        {\n            id: 'upq',\n            name: 'Not droppable',\n            isDir: true,\n            droppable: false, // Prevent files from being dropped into this folder\n        },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"files-array-example":{startLoc:{col:33,line:35},endLoc:{col:1,line:109},startBody:{col:33,line:35},endBody:{col:1,line:109}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    FileAction,\n    FileActionData,\n    FileArray,\n    FileBrowser,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './02-Displaying-files.md';\n\n\nexport default {\n    title: '1 File Browser basics|Displaying files',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const FilesArrayExample = () => {\n    const files: FileArray = [\n        null, // Loading animation will be shown for this file\n        null,\n        {\n            id: 'nTe',\n            name: 'Normal file.yaml',\n            isDir: false,\n            isHidden: true,\n            size: 890,\n        },\n        {\n            id: 'zxc',\n            name: 'Hidden file.mp4',\n            isDir: false,\n            isHidden: true,\n            size: 890,\n        },\n        {\n            id: 'bnm',\n            name: 'Normal folder',\n            isDir: true,\n            childrenIds: ['random-id-1', 'random-id-2'],\n        },\n        {\n            id: 'vfr',\n            name: 'Symlink folder',\n            isDir: true,\n            isSymlink: true,\n        },\n        {\n            id: 'qwe',\n            name: 'Not selectable.tar.gz',\n            ext: '.tar.gz', // Custom extension\n            selectable: false, // Disable selection\n            size: 54300000000,\n            modDate: new Date(),\n        },\n        {\n            id: 'rty',\n            name: 'Not openable.pem',\n            openable: false, // Prevent opening\n            size: 100000000,\n        },\n        {\n            id: 'btj',\n            name: 'Not draggable.csv',\n            draggable: false, // Prevent this files from being dragged\n        },\n        {\n            id: 'upq',\n            name: 'Not droppable',\n            isDir: true,\n            droppable: false, // Prevent files from being dropped into this folder\n        },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"files-array-example":{startLoc:{col:33,line:27},endLoc:{col:1,line:101},startBody:{col:33,line:27},endBody:{col:1,line:101}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"The `FileBrowser` component has only one required prop - the `files` array:\n\n```tsx\nconst FilesExample = () => {\n    const files = [\n        null, // Will show loading animation\n        { id: 'xWbZ', name: 'Instructions.txt' },\n        { id: 'xWbZ', name: 'Tools', isDir: true },\n    ];\n\n    return (\n        <FileBrowser files={files}>\n            <FileToolbar />\n            <FileSearch />\n            <FileList />\n        </FileBrowser>\n    );\n};\n```\n\nThis array describes the files that Chonky should show to the user. It can contain\nfile descriptions (as plain JavaScript objects) or `null` values. `null` values\nindicate \"loading\" files - a loading placeholder animation will be shown in their place.\n\n## The `FileData` type\n\nFormally, the Typescript type for the `files` array is:\n\n```ts\ntype FileArray = Nullable<FileData>[];\n// i.e. Array of nulls and `FileData` objects mixed together\n```\n\nThe `FileData` type is shown below. It might look intimidating, but please note that\n`id` and `name` are the only 2 required fields. All other fields are optional, and\nare there to give you more control over how Chonky displays your files.\n\n```ts\ninterface FileData {\n    id: string; // (Required) String that uniquely identifies the file\n\n    name: string; // (Required) Full name, e.g. `MyImage.jpg`\n    ext?: string; // File extension, e.g. `.jpg`\n\n    isDir?: boolean; // Is a directory, default: false\n    isHidden?: boolean; // Is a hidden file, default: false\n    isSymlink?: boolean; // Is a symlink, default: false\n    openable?: boolean; // Can be opened, default: true\n    selectable?: boolean; // Can be selected, default: true\n    draggable?: boolean; // Can be dragged, default: true\n    droppable?: boolean; // Can have files dropped into it, default: true\n\n    size?: number; // File size in bytes\n    modDate?: Date; // Last change date\n\n    parentId?: string; // ID of the parent folder\n    childrenIds?: string[]; // An array of IDs of children (only for folders)\n\n    thumbnailUrl?: string; // Automatically load thumbnail from here\n\n    [property: string]: any; // Any other user-defined property\n}\n```\n\n<span style=\"color: red; font-weight: bold;\">\nIt is very important that file IDs are unique:\n</span>\n\n> If file IDs are not unique, the consequences can be dire - for example, your user can\n> accidentally delete the wrong file. Chonky tries to protect you by scanning the files\n> array for duplicate IDs, but you should put some extra checks in your code too. You\n> can never be too safe.\n\nApart from the above, there are a few other details you should know about:\n\n-   `files` array should be **immutable**. If you're following the best Redux practices,\n    you're good. If you don't know what immutability is, please read the\n    _Immutability_ section from the sidebar. This is important.\n-   The file extension is automatically extracted from the `name` field, so you don't\n    need to provide an `ext` field yourself. In the rare case where the automatic\n    extension detection fails (for example: `file.tar.gz`), you can provide the `ext`\n    field explicitly. Please make sure extension is included in both `name` and `ext`,\n    e.g. `{id: 'AsVz', name: 'file.tar.gz', ext: '.tar.gz'}`.\n\n## Example file array\n\nThe _Live Example_ below tries to show case all different file configurations. Try\nperforming different actions (selections, drag & drop) and see how each file reacts.\nClick on `View Code` at the bottom to see the file array definition.\n"})),_parameters)};var _02_Displaying_files_stories_FilesArrayExample=function FilesArrayExample(){var files=[null,null,{id:"nTe",name:"Normal file.yaml",isDir:!1,isHidden:!0,size:890},{id:"zxc",name:"Hidden file.mp4",isDir:!1,isHidden:!0,size:890},{id:"bnm",name:"Normal folder",isDir:!0,childrenIds:["random-id-1","random-id-2"]},{id:"vfr",name:"Symlink folder",isDir:!0,isSymlink:!0},{id:"qwe",name:"Not selectable.tar.gz",ext:".tar.gz",selectable:!1,size:543e8,modDate:new Date},{id:"rty",name:"Not openable.pem",openable:!1,size:1e8},{id:"btj",name:"Not draggable.csv",draggable:!1},{id:"upq",name:"Not droppable",isDir:!0,droppable:!1}];return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:files,onFileAction:function handleFileAction(action,data){Object(story_helpers.b)({action:action,data:data})},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null)))};_02_Displaying_files_stories_FilesArrayExample.displayName="FilesArrayExample"},777:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"FolderChainExample",(function(){return _03_Specifying_folder_stories_FolderChainExample}));__webpack_require__(30),__webpack_require__(58);var _parameters,src=__webpack_require__(14),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"1 File Browser basics|Specifying current folder",parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './03-Specifying-folder.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Specifying current folder',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const FolderChainExample = () => {\\n    const folderChain = [\\n        {\\n            id: 'gM5tTe',\\n            name: 'My Documents',\\n            isDir: true,\\n        },\\n        {\\n            id: 'mTxYeA',\\n            name: 'Not Openable',\\n            isDir: true,\\n            openable: false, // This button will not be clickable\\n        },\\n        null, // Loading animation will be shown for this file\\n        {\\n            id: 'vxWtA',\\n            name: 'Unity Projects',\\n            isDir: true,\\n        },\\n        {\\n            id: 'mT7Et',\\n            name: 'Good Projects',\\n            isDir: true,\\n        },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={[]}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"folder-chain-example\":{\"startLoc\":{\"col\":34,\"line\":19},\"endLoc\":{\"col\":1,\"line\":61},\"startBody\":{\"col\":34,\"line\":19},\"endBody\":{\"col\":1,\"line\":61}}};\n    \nimport 'chonky/style/main.css';\n\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './03-Specifying-folder.md';\n\n\nexport default {\n    title: '1 File Browser basics|Specifying current folder',\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './03-Specifying-folder.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Specifying current folder',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const FolderChainExample = () => {\\n    const folderChain = [\\n        {\\n            id: 'gM5tTe',\\n            name: 'My Documents',\\n            isDir: true,\\n        },\\n        {\\n            id: 'mTxYeA',\\n            name: 'Not Openable',\\n            isDir: true,\\n            openable: false, // This button will not be clickable\\n        },\\n        null, // Loading animation will be shown for this file\\n        {\\n            id: 'vxWtA',\\n            name: 'Unity Projects',\\n            isDir: true,\\n        },\\n        {\\n            id: 'mT7Et',\\n            name: 'Good Projects',\\n            isDir: true,\\n        },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={[]}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"folder-chain-example\":{\"startLoc\":{\"col\":34,\"line\":19},\"endLoc\":{\"col\":1,\"line\":61},\"startBody\":{\"col\":34,\"line\":19},\"endBody\":{\"col\":1,\"line\":61}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const FolderChainExample = () => {\n    const folderChain = [\n        {\n            id: 'gM5tTe',\n            name: 'My Documents',\n            isDir: true,\n        },\n        {\n            id: 'mTxYeA',\n            name: 'Not Openable',\n            isDir: true,\n            openable: false, // This button will not be clickable\n        },\n        null, // Loading animation will be shown for this file\n        {\n            id: 'vxWtA',\n            name: 'Unity Projects',\n            isDir: true,\n        },\n        {\n            id: 'mT7Et',\n            name: 'Good Projects',\n            isDir: true,\n        },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={[]}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"folder-chain-example":{startLoc:{col:34,line:27},endLoc:{col:1,line:69},startBody:{col:34,line:27},endBody:{col:1,line:69}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './03-Specifying-folder.md';\n\n\nexport default {\n    title: '1 File Browser basics|Specifying current folder',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const FolderChainExample = () => {\n    const folderChain = [\n        {\n            id: 'gM5tTe',\n            name: 'My Documents',\n            isDir: true,\n        },\n        {\n            id: 'mTxYeA',\n            name: 'Not Openable',\n            isDir: true,\n            openable: false, // This button will not be clickable\n        },\n        null, // Loading animation will be shown for this file\n        {\n            id: 'vxWtA',\n            name: 'Unity Projects',\n            isDir: true,\n        },\n        {\n            id: 'mT7Et',\n            name: 'Good Projects',\n            isDir: true,\n        },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={[]}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"folder-chain-example":{startLoc:{col:34,line:19},endLoc:{col:1,line:61},startBody:{col:34,line:19},endBody:{col:1,line:61}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"Like any other file browser, Chonky can display the path to the current folder in the\ntoolbar above the files. To enable this functionality, you will need to add the\n`<FileToolbar />` to your component and pass the `folderChain` array to `FileBrowser`:\n\n```tsx\nconst FolderChainExample = () => {\n    const folderChain = [{ id: 'gMTe', name: 'My Documents', isDir: true }];\n\n    return (\n        <FileBrowser files={[]} folderChain={folderChain}>\n            <FileToolbar /> {/* <----- */}\n            <FileList />\n        </FileBrowser>\n    );\n};\n```\n\nFolder chain follows the exact same rules as the `files` array described in\n_Displaying files_ section. It can also contain `null` values to indicate loading\nfiles, and the objects inside it should follow the `FileData` type.\n\nSome notes:\n\n-   The files in the `folderChain` array don't need to have `isDir` set to `true`.\n-   Clicking on an item in the folder chain will open it, unless it is `null` or has\n    `openable` set to false.\n-   The \"Go up a directory\" button only works when the second-to-last file in the\n    folder chain is openable.\n"})),_parameters)};var _03_Specifying_folder_stories_FolderChainExample=function FolderChainExample(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[],folderChain:[{id:"gM5tTe",name:"My Documents",isDir:!0},{id:"mTxYeA",name:"Not Openable",isDir:!0,openable:!1},null,{id:"vxWtA",name:"Unity Projects",isDir:!0},{id:"mT7Et",name:"Good Projects",isDir:!0}],onFileAction:function handleFileAction(action,data){Object(story_helpers.b)({action:action,data:data})}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null)))};_03_Specifying_folder_stories_FolderChainExample.displayName="FolderChainExample"},778:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ActionsExample",(function(){return _04_Actions_stories_ActionsExample}));__webpack_require__(30),__webpack_require__(58);var _parameters,src=__webpack_require__(14),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"1 File Browser basics|Using file actions",parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyActions,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './04-Actions.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Using file actions',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ActionsExample = () => {\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        // Log action to console\\n        \\n        console.log('\\\\nAction object:', action, '\\\\nAction data:', data);\\n\\n        showActionNotification({ action, data });\\n    };\\n\\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'hunter2', name: 'Password.txt' },\\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\\n    ];\\n\\n    const fileActions = [\\n        ChonkyActions.CreateFolder,\\n        ChonkyActions.UploadFiles,\\n        ChonkyActions.DownloadFiles,\\n        ChonkyActions.CopyFiles,\\n    ];\\n\\n    return (\\n        <div className=\\\"live-example\\\" style={{ height: 500 }}>\\n            <div className=\\\"live-example-action\\\">\\n                <strong>Check your browser console for logged actions!</strong>\\n            </div>\\n\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                fileActions={fileActions}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"actions-example\":{\"startLoc\":{\"col\":30,\"line\":26},\"endLoc\":{\"col\":1,\"line\":67},\"startBody\":{\"col\":30,\"line\":26},\"endBody\":{\"col\":1,\"line\":67}}};\n    \nimport 'chonky/style/main.css';\n\nimport {\n    ChonkyActions,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './04-Actions.md';\n\n\nexport default {\n    title: '1 File Browser basics|Using file actions',\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyActions,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './04-Actions.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Using file actions',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ActionsExample = () => {\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        // Log action to console\\n        \\n        console.log('\\\\nAction object:', action, '\\\\nAction data:', data);\\n\\n        showActionNotification({ action, data });\\n    };\\n\\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'hunter2', name: 'Password.txt' },\\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\\n    ];\\n\\n    const fileActions = [\\n        ChonkyActions.CreateFolder,\\n        ChonkyActions.UploadFiles,\\n        ChonkyActions.DownloadFiles,\\n        ChonkyActions.CopyFiles,\\n    ];\\n\\n    return (\\n        <div className=\\\"live-example\\\" style={{ height: 500 }}>\\n            <div className=\\\"live-example-action\\\">\\n                <strong>Check your browser console for logged actions!</strong>\\n            </div>\\n\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                fileActions={fileActions}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"actions-example\":{\"startLoc\":{\"col\":30,\"line\":26},\"endLoc\":{\"col\":1,\"line\":67},\"startBody\":{\"col\":30,\"line\":26},\"endBody\":{\"col\":1,\"line\":67}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ActionsExample = () => {\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        // Log action to console\n        \n        console.log('\\nAction object:', action, '\\nAction data:', data);\n\n        showActionNotification({ action, data });\n    };\n\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'hunter2', name: 'Password.txt' },\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\n    ];\n\n    const fileActions = [\n        ChonkyActions.CreateFolder,\n        ChonkyActions.UploadFiles,\n        ChonkyActions.DownloadFiles,\n        ChonkyActions.CopyFiles,\n    ];\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <div className=\"live-example-action\">\n                <strong>Check your browser console for logged actions!</strong>\n            </div>\n\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                fileActions={fileActions}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"actions-example":{startLoc:{col:30,line:34},endLoc:{col:1,line:75},startBody:{col:30,line:34},endBody:{col:1,line:75}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    ChonkyActions,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './04-Actions.md';\n\n\nexport default {\n    title: '1 File Browser basics|Using file actions',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ActionsExample = () => {\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        // Log action to console\n        \n        console.log('\\nAction object:', action, '\\nAction data:', data);\n\n        showActionNotification({ action, data });\n    };\n\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'hunter2', name: 'Password.txt' },\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\n    ];\n\n    const fileActions = [\n        ChonkyActions.CreateFolder,\n        ChonkyActions.UploadFiles,\n        ChonkyActions.DownloadFiles,\n        ChonkyActions.CopyFiles,\n    ];\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <div className=\"live-example-action\">\n                <strong>Check your browser console for logged actions!</strong>\n            </div>\n\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                fileActions={fileActions}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"actions-example":{startLoc:{col:30,line:26},endLoc:{col:1,line:67},startBody:{col:30,line:26},endBody:{col:1,line:67}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"Every application using Chonky will be different. Some will require a feature to\nupload files, other will need to support cutting & pasting. Bottom line -\nrequirements will differ! Chonky tries to address this problem using **File Actions**\nand **Action Handlers**.\n\n## File actions\n\n**File Actions** define _what_ can happen. These actions can be triggered by some\nhotkey, user clicking on a button, or a special event like drag & drop. Here are some\nexamples of file actions:\n\n-   User deletes some files by making a selection and pressing `Delete`.\n-   User initializes a file upload by clicking on \"Upload File\" button.\n-   User moves some files from one folder to another using drag & drop.\n\nAction definitions can be passed to the `FileBrowser` component via the `actions`.\nFor your convenience, Chonky includes definitions for many common actions. You just\nneed to import and enable them as follows:\n\n```tsx\nimport { FileBrowser, FileList, FileToolbar, ChonkyActions } from 'chonky';\n\nexport const MyComponent = () => {\n    const actions = [\n        ChonkyActions.CreateFolder, // Adds a button to the toolbar\n        ChonkyActions.UploadFiles, // Adds a button\n        ChonkyActions.DownloadFiles, // Adds a button\n        ChonkyActions.CopyFiles, // Adds a button and a shortcut: Ctrl+C\n    ];\n\n    return (\n        <FileBrowser files={[]} actions={actions}>\n            <FileToolbar />\n            <FileList />\n        </FileBrowser>\n    );\n};\n```\n\n## Action handlers\n\n```ts\nconst helloWorld = '123';\n```\n"})),_parameters)};var _04_Actions_stories_ActionsExample=function ActionsExample(){var fileActions=[src.a.CreateFolder,src.a.UploadFiles,src.a.DownloadFiles,src.a.CopyFiles];return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"live-example",style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"live-example-action"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("strong",null,"Check your browser console for logged actions!")),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[{id:"mHe4A1",name:"Meaning of life.txt",size:31415},{id:"hunter2",name:"Password.txt"},{id:"bEf24q",name:"Drag & drop files here",isDir:!0}],folderChain:[{id:"gBt4z3",name:"My Documents",isDir:!0}],fileActions:fileActions,onFileAction:function handleFileAction(action,data){console.log("\nAction object:",action,"\nAction data:",data),Object(story_helpers.b)({action:action,data:data})},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null)))};_04_Actions_stories_ActionsExample.displayName="ActionsExample"},779:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"CustomActionsExample",(function(){return _05_Custom_actions_stories_CustomActionsExample}));__webpack_require__(4),__webpack_require__(30),__webpack_require__(256),__webpack_require__(58);var _parameters,src=__webpack_require__(14),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"1 File Browser basics|Custom file actions",parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyIconName,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileData,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './05-Custom-actions.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Custom file actions',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const CustomActionsExample = () => {\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    const downloadPsdAction: FileAction = {\\n        id: 'download_psd',\\n        requiresSelection: true,\\n        fileFilter: (file: FileData) => file.name.endsWith('.psd'),\\n        hotkeys: ['ctrl+q'],\\n        toolbarButton: {\\n            name: 'Download Photoshop files',\\n            icon: ChonkyIconName.download,\\n        },\\n    };\\n\\n    const customFileActions = [downloadPsdAction];\\n    const files = [\\n        { id: 'xVdE', name: 'Flowers.psd' },\\n        { id: 'bTeX', name: 'Mountains.psd' },\\n        { id: 'mGeX', name: 'Sky.psd' },\\n        { id: 'mFte', name: 'Stars.psd' },\\n        { id: 'tLwZ', name: 'Parser.rs' },\\n        { id: 'mGrQ', name: 'package.json' },\\n    ];\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                fileActions={customFileActions}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"custom-actions-example\":{\"startLoc\":{\"col\":36,\"line\":28},\"endLoc\":{\"col\":1,\"line\":68},\"startBody\":{\"col\":36,\"line\":28},\"endBody\":{\"col\":1,\"line\":68}}};\n    \nimport 'chonky/style/main.css';\n\nimport {\n    ChonkyIconName,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileData,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './05-Custom-actions.md';\n\n\nexport default {\n    title: '1 File Browser basics|Custom file actions',\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyIconName,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileData,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './05-Custom-actions.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Custom file actions',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const CustomActionsExample = () => {\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    const downloadPsdAction: FileAction = {\\n        id: 'download_psd',\\n        requiresSelection: true,\\n        fileFilter: (file: FileData) => file.name.endsWith('.psd'),\\n        hotkeys: ['ctrl+q'],\\n        toolbarButton: {\\n            name: 'Download Photoshop files',\\n            icon: ChonkyIconName.download,\\n        },\\n    };\\n\\n    const customFileActions = [downloadPsdAction];\\n    const files = [\\n        { id: 'xVdE', name: 'Flowers.psd' },\\n        { id: 'bTeX', name: 'Mountains.psd' },\\n        { id: 'mGeX', name: 'Sky.psd' },\\n        { id: 'mFte', name: 'Stars.psd' },\\n        { id: 'tLwZ', name: 'Parser.rs' },\\n        { id: 'mGrQ', name: 'package.json' },\\n    ];\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                fileActions={customFileActions}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"custom-actions-example\":{\"startLoc\":{\"col\":36,\"line\":28},\"endLoc\":{\"col\":1,\"line\":68},\"startBody\":{\"col\":36,\"line\":28},\"endBody\":{\"col\":1,\"line\":68}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const CustomActionsExample = () => {\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    const downloadPsdAction: FileAction = {\n        id: 'download_psd',\n        requiresSelection: true,\n        fileFilter: (file: FileData) => file.name.endsWith('.psd'),\n        hotkeys: ['ctrl+q'],\n        toolbarButton: {\n            name: 'Download Photoshop files',\n            icon: ChonkyIconName.download,\n        },\n    };\n\n    const customFileActions = [downloadPsdAction];\n    const files = [\n        { id: 'xVdE', name: 'Flowers.psd' },\n        { id: 'bTeX', name: 'Mountains.psd' },\n        { id: 'mGeX', name: 'Sky.psd' },\n        { id: 'mFte', name: 'Stars.psd' },\n        { id: 'tLwZ', name: 'Parser.rs' },\n        { id: 'mGrQ', name: 'package.json' },\n    ];\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                fileActions={customFileActions}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"custom-actions-example":{startLoc:{col:36,line:36},endLoc:{col:1,line:76},startBody:{col:36,line:36},endBody:{col:1,line:76}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    ChonkyIconName,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileData,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './05-Custom-actions.md';\n\n\nexport default {\n    title: '1 File Browser basics|Custom file actions',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const CustomActionsExample = () => {\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    const downloadPsdAction: FileAction = {\n        id: 'download_psd',\n        requiresSelection: true,\n        fileFilter: (file: FileData) => file.name.endsWith('.psd'),\n        hotkeys: ['ctrl+q'],\n        toolbarButton: {\n            name: 'Download Photoshop files',\n            icon: ChonkyIconName.download,\n        },\n    };\n\n    const customFileActions = [downloadPsdAction];\n    const files = [\n        { id: 'xVdE', name: 'Flowers.psd' },\n        { id: 'bTeX', name: 'Mountains.psd' },\n        { id: 'mGeX', name: 'Sky.psd' },\n        { id: 'mFte', name: 'Stars.psd' },\n        { id: 'tLwZ', name: 'Parser.rs' },\n        { id: 'mGrQ', name: 'package.json' },\n    ];\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                fileActions={customFileActions}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"custom-actions-example":{startLoc:{col:36,line:28},endLoc:{col:1,line:68},startBody:{col:36,line:28},endBody:{col:1,line:68}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"_Passing invalid props_ section shows _how_ to use file actions, but it doesn't\nexplain _what_ they are. A file action is a plain JavaScript object that desribes\nwhat can happen to files.\n\nThe interface of a file action object is defined as follows:\n\n```ts\ninterface FileAction {\n    name: string; // Unique action name\n    metadata?: any; // Any user-defined value\n    requiresParentFolder?: boolean; // Requires parent folder in folder chain\n    requiresSelection?: boolean; // Requires selection of 1+ files\n    fileFilter?: FileFilter; // Used to filter the files array\n\n    hotkeys?: string[]; // Hotkeys using `hotkey-js` notation\n    toolbarButton?: ToolbarButtonData; // Description below\n}\n\n// Where...\ntype FileFilter = (file: Nullable<FileData>) => boolean;\n\n// ...and...\ninterface ToolbarButtonData {\n    name: string; // Button name\n    group?: string; // Group to add the button too\n    dropdown?: boolean; // Whether to display group as dropdown\n    tooltip?: string; // Help tooltip text\n    icon?: ChonkyIconName | string; // Icon name\n    iconOnly?: boolean; // Whether to only display the icon\n}\n```\n\n-   If one of the actions in a group includes `dropdown: true`, all actions in that\n    group will be shown as a dropdown.\n\n## Example custom action: \"Download Photoshop files\"\n\nLet's define a custom action that will download the selected Photoshop `.psd` files.\nWe will add a button to the toolbar and a shortcut, `Ctrl+Q`. First, we define the\nfile action object:\n\n```tsx\nimport { FileData, FileAction, ChonkyIconName } from 'chonky';\n\nconst downloadPsdAction: FileAction = {\n    id: 'download_psd',\n    requiresSelection: true,\n    fileFilter: (file: FileData) => file.name.endsWith('.psd'),\n    hotkeys: ['ctrl+q'],\n    toolbarButton: {\n        name: 'Download Photoshop files',\n        icon: ChonkyIconName.download,\n    },\n};\n```\n\nNext, we need to pass this custom action to `FileBrowser`, along with some files:\n\n```tsx\nexport const CustomActionsExample = () => {\n    const customFileActions = [downloadPsdAction]; // <-----\n    const files = [\n        { id: 'xVdE', name: 'Flowers.psd' },\n        { id: 'bTeX', name: 'Mountains.psd' },\n        { id: 'mGeX', name: 'Sky.psd' },\n        { id: 'mFte', name: 'Stars.psd' },\n        { id: 'tLwZ', name: 'Parser.rs' },\n        { id: 'mGrQ', name: 'package.json' },\n    ];\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser files={files} fileActions={customFileActions /* <---- */}>\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n```\n\nYou can see the outcome in the live example below. Note how the button only becomes\nenabled when you select some `.psd` files. Also, when you click \"Download Photoshop\nfiles\", the action popup only includes `.psd` files. After you make your selection,\nyou can also press `Ctrl+Q` to make your selection.\n"})),_parameters)};var _05_Custom_actions_stories_CustomActionsExample=function CustomActionsExample(){var customFileActions=[{id:"download_psd",requiresSelection:!0,fileFilter:function fileFilter(file){return file.name.endsWith(".psd")},hotkeys:["ctrl+q"],toolbarButton:{name:"Download Photoshop files",icon:src.b.download}}];return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[{id:"xVdE",name:"Flowers.psd"},{id:"bTeX",name:"Mountains.psd"},{id:"mGeX",name:"Sky.psd"},{id:"mFte",name:"Stars.psd"},{id:"tLwZ",name:"Parser.rs"},{id:"mGrQ",name:"package.json"}],onFileAction:function handleFileAction(action,data){Object(story_helpers.b)({action:action,data:data})},fileActions:customFileActions,enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null)))};_05_Custom_actions_stories_CustomActionsExample.displayName="CustomActionsExample"},780:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ActionsExample",(function(){return _06_Thumbnails_stories_ActionsExample}));__webpack_require__(30),__webpack_require__(110),__webpack_require__(58);var _parameters,bluebird=__webpack_require__(154),bluebird_default=__webpack_require__.n(bluebird),src=__webpack_require__(14),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"1 File Browser basics|File thumbnails",parameters:(_parameters={storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import \'chonky/style/main.css\';\\n\\nimport Promise from \'bluebird\';\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileData,\\n    FileList,\\n    FileToolbar,\\n} from \'chonky\';\\nimport React from \'react\';\\n\\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./06-Thumbnails.md\';\\n\\n\\nexport default {\\n    title: \'1 File Browser basics|File thumbnails\',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ActionsExample = () => {\\n    const thumbnailGenerator = (file: FileData & { delay: number }) => {\\n        return new Promise((resolve) => {\\n            // Delay loading by `file.delay` seconds to simulate thumb generation.\\n            setTimeout(() => resolve(\'./Lenna.png\'), file.delay * 1000);\\n        });\\n    };\\n\\n    const folderChain = [{ id: \'gBt4z3\', name: \'My Pictures\', isDir: true }];\\n    const files: FileData[] = [];\\n    for (let i = 0; i < 20; ++i) {\\n        const delay = i * 2;\\n        files.push({\\n            id: `image-${i}`,\\n            name: `Delay - ${delay} seconds.jpg`,\\n            delay: delay,\\n        });\\n    }\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div className=\\"live-example\\" style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                thumbnailGenerator={thumbnailGenerator} // <----\\n                enableDragAndDrop={true}\\n                onFileAction={handleFileAction}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"actions-example":{"startLoc":{"col":30,"line":27},"endLoc":{"col":1,"line":64},"startBody":{"col":30,"line":27},"endBody":{"col":1,"line":64}}};\n    \nimport \'chonky/style/main.css\';\n\nimport Promise from \'bluebird\';\nimport {\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileData,\n    FileList,\n    FileToolbar,\n} from \'chonky\';\nimport React from \'react\';\n\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\n// @ts-ignore\n\nimport markdown from \'./06-Thumbnails.md\';\n\n\nexport default {\n    title: \'1 File Browser basics|File thumbnails\',\n    parameters: {"storySource":{"source":"import \'chonky/style/main.css\';\\n\\nimport Promise from \'bluebird\';\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileData,\\n    FileList,\\n    FileToolbar,\\n} from \'chonky\';\\nimport React from \'react\';\\n\\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./06-Thumbnails.md\';\\n\\n\\nexport default {\\n    title: \'1 File Browser basics|File thumbnails\',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const ActionsExample = () => {\\n    const thumbnailGenerator = (file: FileData & { delay: number }) => {\\n        return new Promise((resolve) => {\\n            // Delay loading by `file.delay` seconds to simulate thumb generation.\\n            setTimeout(() => resolve(\'./Lenna.png\'), file.delay * 1000);\\n        });\\n    };\\n\\n    const folderChain = [{ id: \'gBt4z3\', name: \'My Pictures\', isDir: true }];\\n    const files: FileData[] = [];\\n    for (let i = 0; i < 20; ++i) {\\n        const delay = i * 2;\\n        files.push({\\n            id: `image-${i}`,\\n            name: `Delay - ${delay} seconds.jpg`,\\n            delay: delay,\\n        });\\n    }\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div className=\\"live-example\\" style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                thumbnailGenerator={thumbnailGenerator} // <----\\n                enableDragAndDrop={true}\\n                onFileAction={handleFileAction}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n","locationsMap":{"actions-example":{"startLoc":{"col":30,"line":27},"endLoc":{"col":1,"line":64},"startBody":{"col":30,"line":27},"endBody":{"col":1,"line":64}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ActionsExample = () => {\n    const thumbnailGenerator = (file: FileData & { delay: number }) => {\n        return new Promise((resolve) => {\n            // Delay loading by `file.delay` seconds to simulate thumb generation.\n            setTimeout(() => resolve(\'./Lenna.png\'), file.delay * 1000);\n        });\n    };\n\n    const folderChain = [{ id: \'gBt4z3\', name: \'My Pictures\', isDir: true }];\n    const files: FileData[] = [];\n    for (let i = 0; i < 20; ++i) {\n        const delay = i * 2;\n        files.push({\n            id: `image-${i}`,\n            name: `Delay - ${delay} seconds.jpg`,\n            delay: delay,\n        });\n    }\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div className="live-example" style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                thumbnailGenerator={thumbnailGenerator} // <----\n                enableDragAndDrop={true}\n                onFileAction={handleFileAction}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n',locationsMap:{"actions-example":{startLoc:{col:30,line:35},endLoc:{col:1,line:72},startBody:{col:30,line:35},endBody:{col:1,line:72}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport Promise from 'bluebird';\nimport {\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileData,\n    FileList,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './06-Thumbnails.md';\n\n\nexport default {\n    title: '1 File Browser basics|File thumbnails',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const ActionsExample = () => {\n    const thumbnailGenerator = (file: FileData & { delay: number }) => {\n        return new Promise((resolve) => {\n            // Delay loading by `file.delay` seconds to simulate thumb generation.\n            setTimeout(() => resolve('./Lenna.png'), file.delay * 1000);\n        });\n    };\n\n    const folderChain = [{ id: 'gBt4z3', name: 'My Pictures', isDir: true }];\n    const files: FileData[] = [];\n    for (let i = 0; i < 20; ++i) {\n        const delay = i * 2;\n        files.push({\n            id: `image-${i}`,\n            name: `Delay - ${delay} seconds.jpg`,\n            delay: delay,\n        });\n    }\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                thumbnailGenerator={thumbnailGenerator} // <----\n                enableDragAndDrop={true}\n                onFileAction={handleFileAction}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"actions-example":{startLoc:{col:30,line:27},endLoc:{col:1,line:64},startBody:{col:30,line:27},endBody:{col:1,line:64}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"File thumbnails, woo!\n"})),_parameters)};var _06_Thumbnails_stories_ActionsExample=function ActionsExample(){for(var files=[],i=0;i<20;++i){var delay=2*i;files.push({id:"image-".concat(i),name:"Delay - ".concat(delay," seconds.jpg"),delay:delay})}return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"live-example",style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:files,folderChain:[{id:"gBt4z3",name:"My Pictures",isDir:!0}],thumbnailGenerator:function thumbnailGenerator(file){return new bluebird_default.a((function(resolve){setTimeout((function(){return resolve("./Lenna.png")}),1e3*file.delay)}))},enableDragAndDrop:!0,onFileAction:function handleFileAction(action,data){Object(story_helpers.b)({action:action,data:data})}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null)))};_06_Thumbnails_stories_ActionsExample.displayName="ActionsExample"},781:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"DragNDropExample",(function(){return _07_Drag_n_drop_stories_DragNDropExample}));__webpack_require__(30),__webpack_require__(58);var _parameters,src=__webpack_require__(14),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"1 File Browser basics|Enabling drag & drop",parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './07-Drag-n-drop.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Enabling drag & drop',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const DragNDropExample = () => {\\n    const folderChain = [\\n        { id: 'gBt4z3', name: 'My Documents', isDir: true },\\n        { id: 'gM5tTe', name: 'Other', isDir: true },\\n    ];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'yt43Ax', name: 'SCP-3930 Photos', isDir: true },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div className=\\\"live-example\\\" style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"drag-n-drop-example\":{\"startLoc\":{\"col\":32,\"line\":19},\"endLoc\":{\"col\":1,\"line\":46},\"startBody\":{\"col\":32,\"line\":19},\"endBody\":{\"col\":1,\"line\":46}}};\n    \nimport 'chonky/style/main.css';\n\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './07-Drag-n-drop.md';\n\n\nexport default {\n    title: '1 File Browser basics|Enabling drag & drop',\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './07-Drag-n-drop.md';\\n\\n\\nexport default {\\n    title: '1 File Browser basics|Enabling drag & drop',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const DragNDropExample = () => {\\n    const folderChain = [\\n        { id: 'gBt4z3', name: 'My Documents', isDir: true },\\n        { id: 'gM5tTe', name: 'Other', isDir: true },\\n    ];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'yt43Ax', name: 'SCP-3930 Photos', isDir: true },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div className=\\\"live-example\\\" style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"drag-n-drop-example\":{\"startLoc\":{\"col\":32,\"line\":19},\"endLoc\":{\"col\":1,\"line\":46},\"startBody\":{\"col\":32,\"line\":19},\"endBody\":{\"col\":1,\"line\":46}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const DragNDropExample = () => {\n    const folderChain = [\n        { id: 'gBt4z3', name: 'My Documents', isDir: true },\n        { id: 'gM5tTe', name: 'Other', isDir: true },\n    ];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'yt43Ax', name: 'SCP-3930 Photos', isDir: true },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"drag-n-drop-example":{startLoc:{col:32,line:27},endLoc:{col:1,line:54},startBody:{col:32,line:27},endBody:{col:1,line:54}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport { FileAction, FileActionData, FileBrowser, FileList, FileToolbar } from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './07-Drag-n-drop.md';\n\n\nexport default {\n    title: '1 File Browser basics|Enabling drag & drop',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const DragNDropExample = () => {\n    const folderChain = [\n        { id: 'gBt4z3', name: 'My Documents', isDir: true },\n        { id: 'gM5tTe', name: 'Other', isDir: true },\n    ];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'yt43Ax', name: 'SCP-3930 Photos', isDir: true },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div className=\"live-example\" style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"drag-n-drop-example":{startLoc:{col:32,line:19},endLoc:{col:1,line:46},startBody:{col:32,line:19},endBody:{col:1,line:46}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"You might notice that drag & drop does not work out-of-the-box in Chonky. This is\nbecause Chonky uses [react-dnd](https://react-dnd.github.io/react-dnd/) library to\nhandle drag & drop, which is not turned by default.\n\nTo enable drag & drop, you will need to wrap your application root with the\n`<DndProvider>` component from react-dnd:\n\n```tsx\nimport React, { ReactDOM } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nReactDOM.render(\n    <DndProvider backend={HTML5Backend}>\n        <App />\n    </DndProvider>,\n    document.getElementById('app')\n);\n```\n\nNext, enable drag & drop in your `<FileBrowser>`:\n\n```tsx\n<FileBrowser\n    files={files}\n    enableDragAndDrop={true} // <----\n>\n    <FileToolbar />\n    <FileList />\n</FileBrowser>\n```\n\nOnce you do this, drag & drop should start working in all Chonky instances. FYI, you\ndon't have to use `HTML5Backend`, you can replace it with any backend you want. Consult\n[react-dnd docs](https://react-dnd.github.io/react-dnd/docs/overview) for details.\n"})),_parameters)};var _07_Drag_n_drop_stories_DragNDropExample=function DragNDropExample(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"live-example",style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[{id:"mHe4A1",name:"Meaning of life.txt",size:31415},{id:"yt43Ax",name:"SCP-3930 Photos",isDir:!0}],folderChain:[{id:"gBt4z3",name:"My Documents",isDir:!0},{id:"gM5tTe",name:"Other",isDir:!0}],onFileAction:function handleFileAction(action,data){Object(story_helpers.b)({action:action,data:data})},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null)))};_07_Drag_n_drop_stories_DragNDropExample.displayName="DragNDropExample"},782:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"InvalidPropsExample",(function(){return _01_Invalid_props_stories_InvalidPropsExample}));__webpack_require__(30);var _parameters,delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),src=(__webpack_require__(58),__webpack_require__(14)),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"2 File Browser examples|Passing invalid props",parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import React from 'react';\\n\\nimport 'chonky/style/main.css';\\nimport { FileBrowser, FileList, FileToolbar } from 'chonky';\\n\\nimport { createDocsObject } from '../story-helpers';\\n\\n// @ts-ignore\\n\\nimport markdown from './01-Invalid-props.md';\\n\\n\\nexport default {\\n    title: '2 File Browser examples|Passing invalid props',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const InvalidPropsExample = () => {\\n    const badFiles = [\\n        12312, // Not an object or `null`!\\n        {}, // Missing all required fields!\\n        { id: '2xf4' }, // Missing some required fields!\\n        { id: '2xf4', name: 'Some other file!' }, // Duplicate ID!\\n\\n        { id: 'xbAr', name: 'Good file.txt' }, // Good file!\\n    ];\\n    const badFolderChain = [\\n        12312, // Not an object or `null`!\\n        { id: 'bRyH', name: 'Good folder', isDir: true },\\n        { id: 'bMgR', name: 'Good folder #2', isDir: true },\\n    ];\\n    const badFileActions = [{ id: 'duplicate_files' }, { id: 'duplicate_files' }];\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            {/* @ts-ignore */}\\n            <FileBrowser\\n                files={badFiles}\\n                folderChain={badFolderChain}\\n                fileActions={badFileActions}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"invalid-props-example\":{\"startLoc\":{\"col\":35,\"line\":20},\"endLoc\":{\"col\":1,\"line\":49},\"startBody\":{\"col\":35,\"line\":20},\"endBody\":{\"col\":1,\"line\":49}}};\n    \nimport React from 'react';\n\nimport 'chonky/style/main.css';\nimport { FileBrowser, FileList, FileToolbar } from 'chonky';\n\nimport { createDocsObject } from '../story-helpers';\n\n// @ts-ignore\n\nimport markdown from './01-Invalid-props.md';\n\n\nexport default {\n    title: '2 File Browser examples|Passing invalid props',\n    parameters: {\"storySource\":{\"source\":\"import React from 'react';\\n\\nimport 'chonky/style/main.css';\\nimport { FileBrowser, FileList, FileToolbar } from 'chonky';\\n\\nimport { createDocsObject } from '../story-helpers';\\n\\n// @ts-ignore\\n\\nimport markdown from './01-Invalid-props.md';\\n\\n\\nexport default {\\n    title: '2 File Browser examples|Passing invalid props',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const InvalidPropsExample = () => {\\n    const badFiles = [\\n        12312, // Not an object or `null`!\\n        {}, // Missing all required fields!\\n        { id: '2xf4' }, // Missing some required fields!\\n        { id: '2xf4', name: 'Some other file!' }, // Duplicate ID!\\n\\n        { id: 'xbAr', name: 'Good file.txt' }, // Good file!\\n    ];\\n    const badFolderChain = [\\n        12312, // Not an object or `null`!\\n        { id: 'bRyH', name: 'Good folder', isDir: true },\\n        { id: 'bMgR', name: 'Good folder #2', isDir: true },\\n    ];\\n    const badFileActions = [{ id: 'duplicate_files' }, { id: 'duplicate_files' }];\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            {/* @ts-ignore */}\\n            <FileBrowser\\n                files={badFiles}\\n                folderChain={badFolderChain}\\n                fileActions={badFileActions}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"invalid-props-example\":{\"startLoc\":{\"col\":35,\"line\":20},\"endLoc\":{\"col\":1,\"line\":49},\"startBody\":{\"col\":35,\"line\":20},\"endBody\":{\"col\":1,\"line\":49}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const InvalidPropsExample = () => {\n    const badFiles = [\n        12312, // Not an object or `null`!\n        {}, // Missing all required fields!\n        { id: '2xf4' }, // Missing some required fields!\n        { id: '2xf4', name: 'Some other file!' }, // Duplicate ID!\n\n        { id: 'xbAr', name: 'Good file.txt' }, // Good file!\n    ];\n    const badFolderChain = [\n        12312, // Not an object or `null`!\n        { id: 'bRyH', name: 'Good folder', isDir: true },\n        { id: 'bMgR', name: 'Good folder #2', isDir: true },\n    ];\n    const badFileActions = [{ id: 'duplicate_files' }, { id: 'duplicate_files' }];\n\n    return (\n        <div style={{ height: 500 }}>\n            {/* @ts-ignore */}\n            <FileBrowser\n                files={badFiles}\n                folderChain={badFolderChain}\n                fileActions={badFileActions}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"invalid-props-example":{startLoc:{col:35,line:28},endLoc:{col:1,line:57},startBody:{col:35,line:28},endBody:{col:1,line:57}}}}},_defineProperty(_parameters,"storySource",{source:"import React from 'react';\n\nimport 'chonky/style/main.css';\nimport { FileBrowser, FileList, FileToolbar } from 'chonky';\n\nimport { createDocsObject } from '../story-helpers';\n\n// @ts-ignore\n\nimport markdown from './01-Invalid-props.md';\n\n\nexport default {\n    title: '2 File Browser examples|Passing invalid props',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const InvalidPropsExample = () => {\n    const badFiles = [\n        12312, // Not an object or `null`!\n        {}, // Missing all required fields!\n        { id: '2xf4' }, // Missing some required fields!\n        { id: '2xf4', name: 'Some other file!' }, // Duplicate ID!\n\n        { id: 'xbAr', name: 'Good file.txt' }, // Good file!\n    ];\n    const badFolderChain = [\n        12312, // Not an object or `null`!\n        { id: 'bRyH', name: 'Good folder', isDir: true },\n        { id: 'bMgR', name: 'Good folder #2', isDir: true },\n    ];\n    const badFileActions = [{ id: 'duplicate_files' }, { id: 'duplicate_files' }];\n\n    return (\n        <div style={{ height: 500 }}>\n            {/* @ts-ignore */}\n            <FileBrowser\n                files={badFiles}\n                folderChain={badFolderChain}\n                fileActions={badFileActions}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"invalid-props-example":{startLoc:{col:35,line:20},endLoc:{col:1,line:49},startBody:{col:35,line:20},endBody:{col:1,line:49}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"Where possible, Chonky tries to report errors when they arise. For example,\n`FileBrowser` component expects its `files` prop to be an array. If you pass some\ninvalid value instead, e.g. `null`, you will see an error component being rendered\ninstead of the file browser. Same error will also be logged to console.\n"})),_parameters)};var _01_Invalid_props_stories_InvalidPropsExample=function InvalidPropsExample(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[12312,{},{id:"2xf4"},{id:"2xf4",name:"Some other file!"},{id:"xbAr",name:"Good file.txt"}],folderChain:[12312,{id:"bRyH",name:"Good folder",isDir:!0},{id:"bMgR",name:"Good folder #2",isDir:!0}],fileActions:[{id:"duplicate_files"},{id:"duplicate_files"}]},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null)))};_01_Invalid_props_stories_InvalidPropsExample.displayName="InvalidPropsExample"},783:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"VirtualizationExample",(function(){return _02_Virtualization_stories_VirtualizationExample}));__webpack_require__(30),__webpack_require__(58);var _parameters,src=__webpack_require__(14),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"2 File Browser examples|Virtualization with 10,000 files",parameters:(_parameters={storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import \'chonky/style/main.css\';\\n\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileData,\\n    FileList,\\n    FileToolbar\\n} from \'chonky\';\\nimport React from \'react\';\\n\\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./02-Virtualization.md\';\\n\\n\\nexport default {\\n    title: \'2 File Browser examples|Virtualization with 10,000 files\',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const VirtualizationExample = () => {\\n    const files: FileData[] = [];\\n\\n    for (let i = 0; i < 10000; ++i) {\\n        files.push({\\n            id: `file-${i}`,\\n            name: i ? `Chrome (${i}).exe` : \'Chrome.exe\',\\n        });\\n    }\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"virtualization-example":{"startLoc":{"col":37,"line":26},"endLoc":{"col":1,"line":52},"startBody":{"col":37,"line":26},"endBody":{"col":1,"line":52}}};\n    \nimport \'chonky/style/main.css\';\n\nimport {\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileData,\n    FileList,\n    FileToolbar\n} from \'chonky\';\nimport React from \'react\';\n\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\n// @ts-ignore\n\nimport markdown from \'./02-Virtualization.md\';\n\n\nexport default {\n    title: \'2 File Browser examples|Virtualization with 10,000 files\',\n    parameters: {"storySource":{"source":"import \'chonky/style/main.css\';\\n\\nimport {\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileData,\\n    FileList,\\n    FileToolbar\\n} from \'chonky\';\\nimport React from \'react\';\\n\\nimport { createDocsObject, showActionNotification } from \'../story-helpers\';\\n// @ts-ignore\\n\\nimport markdown from \'./02-Virtualization.md\';\\n\\n\\nexport default {\\n    title: \'2 File Browser examples|Virtualization with 10,000 files\',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const VirtualizationExample = () => {\\n    const files: FileData[] = [];\\n\\n    for (let i = 0; i < 10000; ++i) {\\n        files.push({\\n            id: `file-${i}`,\\n            name: i ? `Chrome (${i}).exe` : \'Chrome.exe\',\\n        });\\n    }\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                onFileAction={handleFileAction}\\n                enableDragAndDrop={true}\\n            >\\n                <FileToolbar />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n","locationsMap":{"virtualization-example":{"startLoc":{"col":37,"line":26},"endLoc":{"col":1,"line":52},"startBody":{"col":37,"line":26},"endBody":{"col":1,"line":52}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const VirtualizationExample = () => {\n    const files: FileData[] = [];\n\n    for (let i = 0; i < 10000; ++i) {\n        files.push({\n            id: `file-${i}`,\n            name: i ? `Chrome (${i}).exe` : \'Chrome.exe\',\n        });\n    }\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n',locationsMap:{"virtualization-example":{startLoc:{col:37,line:34},endLoc:{col:1,line:60},startBody:{col:37,line:34},endBody:{col:1,line:60}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileData,\n    FileList,\n    FileToolbar\n} from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './02-Virtualization.md';\n\n\nexport default {\n    title: '2 File Browser examples|Virtualization with 10,000 files',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const VirtualizationExample = () => {\n    const files: FileData[] = [];\n\n    for (let i = 0; i < 10000; ++i) {\n        files.push({\n            id: `file-${i}`,\n            name: i ? `Chrome (${i}).exe` : 'Chrome.exe',\n        });\n    }\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                onFileAction={handleFileAction}\n                enableDragAndDrop={true}\n            >\n                <FileToolbar />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"virtualization-example":{startLoc:{col:37,line:26},endLoc:{col:1,line:52},startBody:{col:37,line:26},endBody:{col:1,line:52}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:"This component uses [`react-virtualized`](https://bvaughn.github.io/react-virtualized/).\n"})),_parameters)};var _02_Virtualization_stories_VirtualizationExample=function VirtualizationExample(){for(var files=[],i=0;i<1e4;++i)files.push({id:"file-".concat(i),name:i?"Chrome (".concat(i,").exe"):"Chrome.exe"});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:files,onFileAction:function handleFileAction(action,data){Object(story_helpers.b)({action:action,data:data})},enableDragAndDrop:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null)))};_02_Virtualization_stories_VirtualizationExample.displayName="VirtualizationExample"},784:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"DisableExample",(function(){return _03_Disable_default_actions_stories_DisableExample}));__webpack_require__(30),__webpack_require__(58);var _parameters,src=__webpack_require__(14),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),story_helpers=__webpack_require__(33);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_exports__.default={title:"2 File Browser examples|Disabling default file actions",parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyActions,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './03-Disable-default-actions.md';\\n\\n\\nexport default {\\n    title: '2 File Browser examples|Disabling default file actions',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const DisableExample = () => {\\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'hunter2', name: 'Password.txt' },\\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    const fileActions: FileAction[] = [\\n        {\\n            id: ChonkyActions.OpenFiles.id,\\n        },\\n    ];\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                fileActions={fileActions}\\n                enableDragAndDrop={true}\\n                disableDefaultFileActions={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"disable-example\":{\"startLoc\":{\"col\":30,\"line\":27},\"endLoc\":{\"col\":1,\"line\":61},\"startBody\":{\"col\":30,\"line\":27},\"endBody\":{\"col\":1,\"line\":61}}};\n    \nimport 'chonky/style/main.css';\n\nimport {\n    ChonkyActions,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './03-Disable-default-actions.md';\n\n\nexport default {\n    title: '2 File Browser examples|Disabling default file actions',\n    parameters: {\"storySource\":{\"source\":\"import 'chonky/style/main.css';\\n\\nimport {\\n    ChonkyActions,\\n    FileAction,\\n    FileActionData,\\n    FileBrowser,\\n    FileList,\\n    FileSearch,\\n    FileToolbar,\\n} from 'chonky';\\nimport React from 'react';\\n\\nimport { createDocsObject, showActionNotification } from '../story-helpers';\\n// @ts-ignore\\n\\nimport markdown from './03-Disable-default-actions.md';\\n\\n\\nexport default {\\n    title: '2 File Browser examples|Disabling default file actions',\\n    parameters: {\\n        docs: createDocsObject({ markdown }),\\n    },\\n};\\n\\nexport const DisableExample = () => {\\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\\n    const files = [\\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\\n        { id: 'hunter2', name: 'Password.txt' },\\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\\n    ];\\n\\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\\n        showActionNotification({ action, data });\\n    };\\n\\n    const fileActions: FileAction[] = [\\n        {\\n            id: ChonkyActions.OpenFiles.id,\\n        },\\n    ];\\n\\n    return (\\n        <div style={{ height: 500 }}>\\n            <FileBrowser\\n                files={files}\\n                folderChain={folderChain}\\n                onFileAction={handleFileAction}\\n                fileActions={fileActions}\\n                enableDragAndDrop={true}\\n                disableDefaultFileActions={true}\\n            >\\n                <FileToolbar />\\n                <FileSearch />\\n                <FileList />\\n            </FileBrowser>\\n        </div>\\n    );\\n};\\n\",\"locationsMap\":{\"disable-example\":{\"startLoc\":{\"col\":30,\"line\":27},\"endLoc\":{\"col\":1,\"line\":61},\"startBody\":{\"col\":30,\"line\":27},\"endBody\":{\"col\":1,\"line\":61}}}},\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const DisableExample = () => {\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'hunter2', name: 'Password.txt' },\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    const fileActions: FileAction[] = [\n        {\n            id: ChonkyActions.OpenFiles.id,\n        },\n    ];\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                fileActions={fileActions}\n                enableDragAndDrop={true}\n                disableDefaultFileActions={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"disable-example":{startLoc:{col:30,line:35},endLoc:{col:1,line:69},startBody:{col:30,line:35},endBody:{col:1,line:69}}}}},_defineProperty(_parameters,"storySource",{source:"import 'chonky/style/main.css';\n\nimport {\n    ChonkyActions,\n    FileAction,\n    FileActionData,\n    FileBrowser,\n    FileList,\n    FileSearch,\n    FileToolbar,\n} from 'chonky';\nimport React from 'react';\n\nimport { createDocsObject, showActionNotification } from '../story-helpers';\n// @ts-ignore\n\nimport markdown from './03-Disable-default-actions.md';\n\n\nexport default {\n    title: '2 File Browser examples|Disabling default file actions',\n    parameters: {\n        docs: createDocsObject({ markdown }),\n    },\n};\n\nexport const DisableExample = () => {\n    const folderChain = [{ id: 'gBt4z3', name: 'My Documents', isDir: true }];\n    const files = [\n        { id: 'mHe4A1', name: 'Meaning of life.txt', size: 31415 },\n        { id: 'hunter2', name: 'Password.txt' },\n        { id: 'bEf24q', name: 'Drag & drop files here', isDir: true },\n    ];\n\n    const handleFileAction = (action: FileAction, data: FileActionData) => {\n        showActionNotification({ action, data });\n    };\n\n    const fileActions: FileAction[] = [\n        {\n            id: ChonkyActions.OpenFiles.id,\n        },\n    ];\n\n    return (\n        <div style={{ height: 500 }}>\n            <FileBrowser\n                files={files}\n                folderChain={folderChain}\n                onFileAction={handleFileAction}\n                fileActions={fileActions}\n                enableDragAndDrop={true}\n                disableDefaultFileActions={true}\n            >\n                <FileToolbar />\n                <FileSearch />\n                <FileList />\n            </FileBrowser>\n        </div>\n    );\n};\n",locationsMap:{"disable-example":{startLoc:{col:30,line:27},endLoc:{col:1,line:61},startBody:{col:30,line:27},endBody:{col:1,line:61}}}}),_defineProperty(_parameters,"docs",Object(story_helpers.a)({markdown:'As discussed in the _Using file actions_ section, Chonky specifies some default file\nactions, such as "Open selection" and "Go up a directory" actions/buttons. If you\nwant to disable all default functionality and only use custom function, you can pass\nthe `disableDefaultFileActions` prop to `FileBrowser`.\n\nFor example, imagine we want to disable all Chonky file actions except for one -\n`open_files`. And even for `open_files`, we want to hide the menu button so that you\ncan only open files by double clicking them. We do this by disabling all file actions,\nand re-enabling a customised version of `open_files`:\n\n```tsx\nexport const DisableExample = () => {\n    const fileActions: FileAction[] = [\n        {\n            id: ChonkyActions.OpenFiles.id,\n        },\n    ];\n\n    return (\n        <FileBrowser disableDefaultFileActions={true} fileActions={fileActions}>\n            <FileToolbar />\n            <FileSearch />\n            <FileList />\n        </FileBrowser>\n    );\n};\n```\n\nYou can see the outcome in the _Live Example_ below. Note that there are no buttons\nin the toolbar, unlike all other examples in the documentation. Also, note that,\nbecause we re-enabled `open_files` manually, you can still open files, but now\nwithout the button in the menu.\n'})),_parameters)};var _03_Disable_default_actions_stories_DisableExample=function DisableExample(){var fileActions=[{id:src.a.OpenFiles.id}];return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{height:500}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.c,{files:[{id:"mHe4A1",name:"Meaning of life.txt",size:31415},{id:"hunter2",name:"Password.txt"},{id:"bEf24q",name:"Drag & drop files here",isDir:!0}],folderChain:[{id:"gBt4z3",name:"My Documents",isDir:!0}],onFileAction:function handleFileAction(action,data){Object(story_helpers.b)({action:action,data:data})},fileActions:fileActions,enableDragAndDrop:!0,disableDefaultFileActions:!0},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.f,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.e,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(src.d,null)))};_03_Disable_default_actions_stories_DisableExample.displayName="DisableExample"},79:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("7nmT")},82:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("1IsZ")},83:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("vbDw")},9:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("7x/C")},95:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("JtPf")},96:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("ax0f")},97:function(module,exports,__webpack_require__){module.exports=__webpack_require__(2)("tVqn")}},[[362,1,2]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,